// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`odata should create a GraphQL schema from a simple OData endpoint 1`] = `
"type Person implements IPerson {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions): [Person]
  FriendsById(id: ID): Person
  BestFriend: Person
  Trips(queryOptions: QueryOptions): [Trip]
  TripsById(id: ID): Trip
  GetFavoriteAirline: Airline
  GetFriendsTrips: [Trip]
  UpdatePersonLastName: Boolean
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!): JSON
}

interface IPerson {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions): [Person]
  FriendsById(id: ID): Person
  BestFriend: Person
  Trips(queryOptions: QueryOptions): [Trip]
  TripsById(id: ID): Trip
  GetFavoriteAirline: Airline
  GetFriendsTrips: [Trip]
  UpdatePersonLastName: Boolean
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!): JSON
}

enum PersonGender {
  Male
  Female
  Unknow
}

\\"\\"\\"
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
\\"\\"\\"
scalar BigInt

enum Feature {
  Feature1
  Feature2
  Feature3
  Feature4
}

input QueryOptions {
  \\"\\"\\"
  A data service URI with a $orderby System Query Option specifies an expression for determining what values are used to order the collection of Entries identified by the Resource Path section of the URI. This query option is only supported when the resource path identifies a Collection of Entries.
  \\"\\"\\"
  orderby: String

  \\"\\"\\"
  A data service URI with a $top System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. This subset is formed by selecting only the first N items of the set, where N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed.
  \\"\\"\\"
  top: Int

  \\"\\"\\"
  A data service URI with a $skip System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. That subset is defined by seeking N Entries into the Collection and selecting only the remaining Entries (starting with Entry N+1). N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed.
  \\"\\"\\"
  skip: Int

  \\"\\"\\"
  A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option.
  \\"\\"\\"
  filter: String

  \\"\\"\\"
  A URI with a $inlinecount System Query Option specifies that the response to the request includes a count of the number of Entries in the Collection of Entries identified by the Resource Path section of the URI. The count must be calculated after applying any $filter System Query Options present in the URI. The set of valid values for the $inlinecount query option are shown in the table below. If a value other than one shown in Table 4 is specified the URI is considered malformed.
  \\"\\"\\"
  inlinecount: InlineCount
  count: Boolean
}

enum InlineCount {
  \\"\\"\\"
  The OData MUST include a count of the number of entities in the collection identified by the URI (after applying any $filter System Query Options present on the URI)
  \\"\\"\\"
  allpages

  \\"\\"\\"
  The OData service MUST NOT include a count in the response. This is equivalence to a URI that does not include a $inlinecount query string parameter.
  \\"\\"\\"
  none
}

\\"\\"\\"
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")

input PersonInput {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [LocationInput]
  HomeAddress: LocationInput
  FavoriteFeature: Feature!
  Features: [Feature]!
}

input LocationInput {
  Address: String
  City: CityInput
}

input CityInput {
  Name: String
  CountryRegion: String
  Region: String
}

type Airline {
  AirlineCode: String!
  Name: String
}

type Airport {
  Name: String
  IcaoCode: String!
  IataCode: String
  Location: AirportLocation
}

type Trip implements ITrip {
  TripId: Int!
  ShareId: GUID!
  Name: String
  Budget: Float!
  Description: String
  Tags: [String]
  StartsAt: DateTime!
  EndsAt: DateTime!
  PlanItems(queryOptions: QueryOptions): [PlanItem]
  PlanItemsById(id: ID): PlanItem
  GetInvolvedPeople: [Person]
}

interface ITrip {
  TripId: Int!
  ShareId: GUID!
  Name: String
  Budget: Float!
  Description: String
  Tags: [String]
  StartsAt: DateTime!
  EndsAt: DateTime!
  PlanItems(queryOptions: QueryOptions): [PlanItem]
  PlanItemsById(id: ID): PlanItem
  GetInvolvedPeople: [Person]
}

\\"\\"\\"
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
\\"\\"\\"
scalar GUID

\\"\\"\\"
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar DateTime

type PlanItem implements IPlanItem {
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

interface IPlanItem {
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

\\"\\"\\"

    A string representing a duration conforming to the ISO8601 standard,
    such as: P1W1DT13H23M34S
    P is the duration designator (for period) placed at the start of the duration representation.
    Y is the year designator that follows the value for the number of years.
    M is the month designator that follows the value for the number of months.
    W is the week designator that follows the value for the number of weeks.
    D is the day designator that follows the value for the number of days.
    T is the time designator that precedes the time components of the representation.
    H is the hour designator that follows the value for the number of hours.
    M is the minute designator that follows the value for the number of minutes.
    S is the second designator that follows the value for the number of seconds.

    Note the time designator, T, that precedes the time value.

    Matches moment.js, Luxon and DateFns implementations
    ,/. is valid for decimal places and +/- is a valid prefix
  
\\"\\"\\"
scalar ISO8601Duration

type Event implements IPlanItem {
  OccursAt: EventLocation
  Description: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

type PublicTransportation implements IPublicTransportation & IPlanItem {
  SeatNumber: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

interface IPublicTransportation {
  SeatNumber: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

type Flight implements IPublicTransportation {
  FlightNumber: String
  Airline: Airline
  From: Airport
  To: Airport
  SeatNumber: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

type Employee implements IPerson {
  Cost: BigInt!
  Peers(queryOptions: QueryOptions): [Person]
  PeersById(id: ID): Person
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions): [Person]
  FriendsById(id: ID): Person
  BestFriend: Person
  Trips(queryOptions: QueryOptions): [Trip]
  TripsById(id: ID): Trip
  GetFavoriteAirline: Airline
  GetFriendsTrips: [Trip]
  UpdatePersonLastName: Boolean
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!): JSON
}

type Manager implements IPerson {
  Budget: BigInt!
  BossOffice: Location
  DirectReports(queryOptions: QueryOptions): [Person]
  DirectReportsById(id: ID): Person
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions): [Person]
  FriendsById(id: ID): Person
  BestFriend: Person
  Trips(queryOptions: QueryOptions): [Trip]
  TripsById(id: ID): Trip
  GetFavoriteAirline: Airline
  GetFriendsTrips: [Trip]
  UpdatePersonLastName: Boolean
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!): JSON
}

type Location implements ILocation {
  Address: String
  City: City
}

interface ILocation {
  Address: String
  City: City
}

type City {
  Name: String
  CountryRegion: String
  Region: String
}

type AirportLocation implements ILocation {
  Loc: String
  Address: String
  City: City
}

type EventLocation implements ILocation {
  BuildingInfo: String
  Address: String
  City: City
}

type Query {
  GetPersonWithMostFriends: Person
  GetNearestAirport(lat: Float!, lon: Float!): Airport
  Me: Person
  People(queryOptions: QueryOptions): [IPerson]
  PeopleByUserName(UserName: String!): IPerson
  PeopleCount(queryOptions: QueryOptions): Int
  Airlines(queryOptions: QueryOptions): [Airline]
  AirlinesByAirlineCode(AirlineCode: String!): Airline
  AirlinesCount(queryOptions: QueryOptions): Int
  Airports(queryOptions: QueryOptions): [Airport]
  AirportsByIcaoCode(IcaoCode: String!): Airport
  AirportsCount(queryOptions: QueryOptions): Int
  NewComePeople(queryOptions: QueryOptions): [IPerson]
  NewComePeopleByUserName(UserName: String!): IPerson
  NewComePeopleCount(queryOptions: QueryOptions): Int
}

type Mutation {
  ResetDataSource: JSON
  People(queryOptions: QueryOptions): [IPerson]
  PeopleByUserName(UserName: String!): IPerson
  createPeople(input: PersonInput): IPerson
  deletePeopleByUserName(UserName: String!): JSON
  updatePeopleByUserName(UserName: String!, input: PersonUpdateInput): IPerson
  Airlines(queryOptions: QueryOptions): [Airline]
  AirlinesByAirlineCode(AirlineCode: String!): Airline
  createAirlines(input: AirlineInput): Airline
  deleteAirlinesByAirlineCode(AirlineCode: String!): JSON
  updateAirlinesByAirlineCode(AirlineCode: String!, input: AirlineUpdateInput): Airline
  Airports(queryOptions: QueryOptions): [Airport]
  AirportsByIcaoCode(IcaoCode: String!): Airport
  createAirports(input: AirportInput): Airport
  deleteAirportsByIcaoCode(IcaoCode: String!): JSON
  updateAirportsByIcaoCode(IcaoCode: String!, input: AirportUpdateInput): Airport
  NewComePeople(queryOptions: QueryOptions): [IPerson]
  NewComePeopleByUserName(UserName: String!): IPerson
  createNewComePeople(input: PersonInput): IPerson
  deleteNewComePeopleByUserName(UserName: String!): JSON
  updateNewComePeopleByUserName(UserName: String!, input: PersonUpdateInput): IPerson
}

\\"\\"\\"\\"\\"\\"
input PersonUpdateInput {
  UserName: String
  FirstName: String
  LastName: String
  MiddleName: String
  Gender: PersonGender
  Age: BigInt
  Emails: [String]
  AddressInfo: [LocationInput]
  HomeAddress: LocationInput
  FavoriteFeature: Feature
  Features: [Feature]
}

input AirlineInput {
  AirlineCode: String!
  Name: String
}

\\"\\"\\"\\"\\"\\"
input AirlineUpdateInput {
  AirlineCode: String
  Name: String
}

input AirportInput {
  Name: String
  IcaoCode: String!
  IataCode: String
  Location: AirportLocationInput
}

input AirportLocationInput {
  Loc: String
  Address: String
  City: CityInput
}

\\"\\"\\"\\"\\"\\"
input AirportUpdateInput {
  Name: String
  IcaoCode: String
  IataCode: String
  Location: AirportLocationInput
}
"
`;
