// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`odata should create a GraphQL schema from a simple OData endpoint 1`] = `
"type Airline {
  AirlineCode: String!
  Name: String
}

input AirlineInput {
  AirlineCode: String!
  Name: String
}

input AirlinesUpdateInput {
  AirlineCode: String
  Name: String
}

type Airport {
  Name: String
  IcaoCode: String!
  IataCode: String
  Location: AirportLocation
}

input AirportInput {
  Name: String
  IcaoCode: String!
  IataCode: String
  Location: AirportLocationInput
}

type AirportLocation {
  Loc: String
  Address: String
  City: City
}

input AirportLocationInput {
  Loc: String
  Address: String
  City: CityInput
}

input AirportsUpdateInput {
  Name: String
  IcaoCode: String
  IataCode: String
  Location: AirportLocationInput
}

\\"\\"\\"
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
\\"\\"\\"
scalar BigInt

type City {
  Name: String
  CountryRegion: String
  Region: String
}

input CityInput {
  Name: String
  CountryRegion: String
  Region: String
}

enum Feature {
  Feature1
  Feature2
  Feature3
  Feature4
}

\\"\\"\\"
A field whose value is a generic Globally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
\\"\\"\\"
scalar GUID

enum InlineCount {
  \\"\\"\\"
  The OData MUST include a count of the number of entities in the collection
  identified by the URI (after applying any $filter System Query Options present on the URI)
  \\"\\"\\"
  allpages

  \\"\\"\\"
  The OData service MUST NOT include a count in the response. This is
  equivalence to a URI that does not include a $inlinecount query string parameter.
  \\"\\"\\"
  none
}

\\"\\"\\"
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON

type Location {
  Address: String
  City: City
}

input LocationInput {
  Address: String
  City: CityInput
}

type Mutation {
  getPeopleByUserName(UserName: String!): Person
  deletePeopleByUserName(UserName: String!): JSON
  updatePeopleByUserName(UserName: String!, input: PeopleUpdateInput): Person
  createPeople(input: PersonInput): Person
  getAirlinesByAirlineCode(AirlineCode: String!): Airline
  deleteAirlinesByAirlineCode(AirlineCode: String!): JSON
  updateAirlinesByAirlineCode(AirlineCode: String!, input: AirlinesUpdateInput): Airline
  createAirlines(input: AirlineInput): Airline
  getAirportsByIcaoCode(IcaoCode: String!): Airport
  deleteAirportsByIcaoCode(IcaoCode: String!): JSON
  updateAirportsByIcaoCode(IcaoCode: String!, input: AirportsUpdateInput): Airport
  createAirports(input: AirportInput): Airport
  getNewComePeopleByUserName(UserName: String!): Person
  deleteNewComePeopleByUserName(UserName: String!): JSON
  updateNewComePeopleByUserName(UserName: String!, input: NewComePeopleUpdateInput): Person
  createNewComePeople(input: PersonInput): Person
  ResetDataSource(person: PersonInput, lastName: String, personInstance: PersonInput, userName: String, tripId: Int): Boolean
}

input NewComePeopleUpdateInput {
  UserName: String
  FirstName: String
  LastName: String
  MiddleName: String
  Gender: PersonGender
  Age: BigInt
  Emails: [String]
  FavoriteFeature: Feature
  Features: [Feature]
  AddressInfo: [LocationInput]
  HomeAddress: LocationInput
  Friends: [PersonInput]
  BestFriend: PersonInput
  Trips: [TripInput]
}

input PeopleUpdateInput {
  UserName: String
  FirstName: String
  LastName: String
  MiddleName: String
  Gender: PersonGender
  Age: BigInt
  Emails: [String]
  FavoriteFeature: Feature
  Features: [Feature]
  AddressInfo: [LocationInput]
  HomeAddress: LocationInput
  Friends: [PersonInput]
  BestFriend: PersonInput
  Trips: [TripInput]
}

type Person {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  FavoriteFeature: Feature!
  Features: [Feature]!
  AddressInfo: [Location]
  HomeAddress: Location
  Friends(queryOptions: QueryOptions): [Person]
  BestFriend: Person
  Trips(queryOptions: QueryOptions): [Trip]
  GetFavoriteAirline: Airline
  GetFriendsTrips(userName: String, queryOptions: QueryOptions): [Trip]
  UpdatePersonLastName(lastName: String): Boolean
  ShareTrip(userName: String, tripId: Int): JSON
}

enum PersonGender {
  Male
  Female
  Unknow
}

input PersonInput {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  FavoriteFeature: Feature!
  Features: [Feature]!
  AddressInfo: [LocationInput]
  HomeAddress: LocationInput
  Friends: [PersonInput]
  BestFriend: PersonInput
  Trips: [TripInput]
}

type PlanItem {
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: String!
  EndsAt: String!
  Duration: String!
}

input PlanItemInput {
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: String!
  EndsAt: String!
  Duration: String!
}

type Query {
  getPeople(queryOptions: QueryOptions): [Person]
  getPeopleByUserName(UserName: String!): Person
  getPeopleCount: Int
  getAirlines(queryOptions: QueryOptions): [Airline]
  getAirlinesByAirlineCode(AirlineCode: String!): Airline
  getAirlinesCount: Int
  getAirports(queryOptions: QueryOptions): [Airport]
  getAirportsByIcaoCode(IcaoCode: String!): Airport
  getAirportsCount: Int
  getNewComePeople(queryOptions: QueryOptions): [Person]
  getNewComePeopleByUserName(UserName: String!): Person
  getNewComePeopleCount: Int
  GetPersonWithMostFriends: Person
  GetNearestAirport(lat: Float, lon: Float): Airport
  Me: Person
}

input QueryOptions {
  \\"\\"\\"
  A data service URI with a $orderby System Query Option specifies an expression
  for determining what values are used to order the collection of Entries
  identified by the Resource Path section of the URI. This query option is only
  supported when the resource path identifies a Collection of Entries.
  \\"\\"\\"
  orderby: String

  \\"\\"\\"
  A data service URI with a $top System Query Option identifies a subset of the
  Entries in the Collection of Entries identified by the Resource Path section
  of the URI. This subset is formed by selecting only the first N items of the
  set, where N is an integer greater than or equal to zero specified by this
  query option. If a value less than zero is specified, the URI should be
  considered malformed.
  \\"\\"\\"
  top: Int

  \\"\\"\\"
  A data service URI with a $skip System Query Option identifies a subset of the
  Entries in the Collection of Entries identified by the Resource Path section
  of the URI. That subset is defined by seeking N Entries into the Collection
  and selecting only the remaining Entries (starting with Entry N+1). N is an
  integer greater than or equal to zero specified by this query option. If a
  value less than zero is specified, the URI should be considered malformed.
  \\"\\"\\"
  skip: Int

  \\"\\"\\"
  A URI with a $filter System Query Option identifies a subset of the Entries
  from the Collection of Entries identified by the Resource Path section of the
  URI. The subset is determined by selecting only the Entries that satisfy the
  predicate expression specified by the query option.
  \\"\\"\\"
  filter: String

  \\"\\"\\"
  A URI with a $inlinecount System Query Option specifies that the response to
  the request includes a count of the number of Entries in the Collection of
  Entries identified by the Resource Path section of the URI. The count must be
  calculated after applying any $filter System Query Options present in the URI.
  The set of valid values for the $inlinecount query option are shown in the
  table below. If a value other than one shown in Table 4 is specified the URI
  is considered malformed.
  \\"\\"\\"
  inlinecount: InlineCount
}

type Trip {
  TripId: Int!
  ShareId: GUID!
  Name: String
  Budget: Float!
  Description: String
  Tags: [String]
  StartsAt: String!
  EndsAt: String!
  PlanItems(queryOptions: QueryOptions): [PlanItem]
  GetInvolvedPeople(queryOptions: QueryOptions): [Person]
}

input TripInput {
  TripId: Int!
  ShareId: GUID!
  Name: String
  Budget: Float!
  Description: String
  Tags: [String]
  StartsAt: String!
  EndsAt: String!
  PlanItems: [PlanItemInput]
}
"
`;
