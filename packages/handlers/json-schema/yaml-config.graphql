extend type Handler {
  """
  Handler for JSON Schema specification. Source could be a local json file, or a url to it.
  """
  jsonSchema: JsonSchemaHandlerConfig
}

union JsonSchemaHandlerConfig = JsonSchemaHandler | JsonSchemaHandlerBundle

type JsonSchemaHandlerBundle @md {
  """
  Path to the bundle file
  """
  bundlePath: Any!
  """
  HTTP Headers to receive the bundle
  """
  bundleHeaders: JSON

  baseUrl: String
  operationHeaders: JSON
}

type JsonSchemaHandler @md {
  baseUrl: String
  operationHeaders: JSON
  schemaHeaders: JSON
  operations: [JsonSchemaOperation!]!
  ignoreErrorResponses: Boolean
  queryParams: Any
}

enum JsonSchemaOperationType {
  Query
  Mutation
  Subscription
}

enum JsonSchemaOperationMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

interface JsonSchemaBaseOperation {
  field: String!
  description: String
  type: JsonSchemaOperationType!

  requestSchema: Any
  requestSample: Any
  requestTypeName: String
  """
  This body will be merged with the request body sent with the underlying HTTP request
  """
  requestBaseBody: Any

  responseSchema: Any
  responseSample: Any
  responseTypeName: String

  argTypeMap: JSON
}

type JsonSchemaHTTPOperation implements JsonSchemaBaseOperation {
  field: String!
  description: String
  type: JsonSchemaOperationType!

  requestSchema: Any
  requestSample: Any
  requestTypeName: String
  """
  This body will be merged with the request body sent with the underlying HTTP request
  """
  requestBaseBody: Any

  responseSchema: Any
  responseSample: Any
  responseTypeName: String

  """
  You can define your response schemas by status codes;

  responseByStatusCode:
    200:
      responseSchema: ./someschema.json#/somepath
    404:
      responseSample: ./error-sample.json
      responseTypeName: MyError
  """
  responseByStatusCode: Any

  argTypeMap: JSON

  path: String!
  method: JsonSchemaOperationMethod
  headers: JSON

  """
  If true, this operation cannot have requestSchema or requestSample
  And the request body will be passed as binary with its mime type
  unless you define an explicit Content-Type header
  """
  binary: Boolean
}

type JsonSchemaPubSubOperation implements JsonSchemaBaseOperation {
  field: String!
  description: String
  type: JsonSchemaOperationType!

  requestSchema: Any
  requestSample: Any
  requestTypeName: String
  """
  This body will be merged with the request body sent with the underlying HTTP request
  """
  requestBaseBody: Any

  responseSchema: Any
  responseSample: Any
  responseTypeName: String

  argTypeMap: JSON

  pubsubTopic: String!
}

union JsonSchemaOperation = JsonSchemaHTTPOperation | JsonSchemaPubSubOperation
