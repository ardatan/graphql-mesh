schema
  @core(feature: "https://specs.apollo.dev/core/v0.2")
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION) {
  query: Query
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(
  graph: join__Graph
  provides: join__FieldSet
  requires: join__FieldSet
) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Author
  @join__owner(graph: AUTHORS)
  @join__type(graph: AUTHORS, key: "id")
  @join__type(graph: BOOKS, key: "id") {
  birthDate: String @join__field(graph: AUTHORS)
  books: [Book] @join__field(graph: BOOKS)
  id: ID! @join__field(graph: AUTHORS)
  name: String! @join__field(graph: AUTHORS)
}

type Book @join__owner(graph: BOOKS) @join__type(graph: BOOKS, key: "id") {
  author: Author! @join__field(graph: BOOKS)
  genre: String @join__field(graph: BOOKS)
  id: ID! @join__field(graph: BOOKS)
  title: String! @join__field(graph: BOOKS)
}

type Query {
  author(id: ID!): Author @join__field(graph: AUTHORS)
  authors: [Author] @join__field(graph: AUTHORS)
  book(id: ID!): Book @join__field(graph: BOOKS)
  books: [Book] @join__field(graph: BOOKS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  AUTHORS @join__graph(name: "authors", url: "http://authors/graphql")
  BOOKS @join__graph(name: "books", url: "http://books/graphql")
}
