//
// THIS CODE IN THIS FILE IS MOSTLY GENERATED BY CLAUDE SONET 4
//
import {
  Kind,
  type FieldNode,
  type FragmentSpreadNode,
  type InlineFragmentNode,
  type SelectionNode,
  type SelectionSetNode,
} from 'graphql';

/**
 * Returns the difference of two GraphQL AST selection sets ({@link set1} - {@link set2})
 * Note that the fields in fragment definitions are not compared, only the spreads themselves.
 */
export function differenceSelectionSets(
  set1: SelectionSetNode | null | undefined,
  set2: SelectionSetNode | null | undefined,
): SelectionSetNode | null {
  if (!set1) return null;
  if (!set2) return set1;

  const diff: SelectionNode[] = [];

  for (const sel1 of set1.selections) {
    const match = set2.selections.find(sel2 => matches(sel1, sel2));

    if (!match) {
      diff.push(sel1);
    } else {
      const result = diffSelection(sel1, match);
      if (result) diff.push(result);
    }
  }

  return diff.length ? { kind: Kind.SELECTION_SET, selections: diff } : null;
}

function matches(sel1: SelectionNode, sel2: SelectionNode): boolean {
  if (sel1.kind !== sel2.kind) return false;
  switch (sel1.kind) {
    case Kind.FIELD:
      return sel1.name.value === (sel2 as FieldNode).name.value;
    case Kind.INLINE_FRAGMENT:
      return (
        sel1.typeCondition?.name.value === (sel2 as InlineFragmentNode).typeCondition?.name.value
      );
    case Kind.FRAGMENT_SPREAD:
      return sel1.name.value === (sel2 as FragmentSpreadNode).name.value;
    default:
      return false;
  }
}

function diffSelection(sel1: SelectionNode, sel2: SelectionNode): SelectionNode | null {
  switch (sel1.kind) {
    case Kind.FIELD:
      const field2 = sel2 as FieldNode;
      if (!sel1.selectionSet && !field2.selectionSet) return null;
      if (!field2.selectionSet) return sel1;
      if (!sel1.selectionSet) return null;

      const diffSet = differenceSelectionSets(sel1.selectionSet, field2.selectionSet);
      return diffSet ? { ...sel1, selectionSet: diffSet } : null;

    case Kind.INLINE_FRAGMENT:
      const frag2 = sel2 as InlineFragmentNode;
      const fragDiff = differenceSelectionSets(sel1.selectionSet, frag2.selectionSet);
      return fragDiff ? { ...sel1, selectionSet: fragDiff } : null;

    case Kind.FRAGMENT_SPREAD:
      return null;

    default:
      return sel1;
  }
}
