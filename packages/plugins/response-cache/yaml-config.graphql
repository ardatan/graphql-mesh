extend type Plugin {
  responseCache: ResponseCacheConfig
}

type ResponseCacheConfig {
  """
  Maximum age in ms. Defaults to `Infinity`. Set it to 0 for disabling the global TTL.
  """
  ttl: Float
  """
  Overwrite the ttl for query operations whose selection contains a specific schema coordinate (e.g. Query.users).
  Useful if the selection of a specific field should reduce the TTL of the query operation.
  """
  ttlPerCoordinate: [ResponseCacheTTLConfig]
  """
  Skip caching of following the types.
  """
  ignoredTypes: [String]
  """
  List of fields that are used to identify the entity.
  """
  idFields: [String]
  """
  Whether the mutation execution result should be used for invalidating resources.
  Defaults to `true`
  """
  invalidateViaMutation: Boolean
  """
  Include extension values that provide useful information, such as whether the cache was hit or which resources a mutation invalidated.
  """
  includeExtensionMetadata: Boolean
  """
  Allows to cache responses based on the resolved session id.
  Return a unique value for each session.
  Creates a global session by default.
  Example;
  ```yml
  sessionId: "{context.headers.userId}"
  ```
  """
  sessionId: String
  """
  Specify whether the cache should be used based on the context.
  ```yml
  if: "context.headers.userId != null"
  ```
  """
  if: String
  """
  Customize the behavior how the response cache key is computed from the documentString, variableValues, contextValue and sessionId.
  If the given string is interpolated as empty, default behavior is used.
  Example;
  ```yml
  # Cache by specific value
  cacheKey: "{variableValues.userId}"

  # Cache by documentString
  cacheKey: "{documentString}"

  # Cache by operationName
  cacheKey: "{operationName}"

  # Cache by some header value
  cacheKey: "{contextValue.headers.authorization}"

  # Or combine two of each
  cacheKey: "{contextValue.headers.authorization}-{operationName}"
  ```
  """
  cacheKey: String

  """
  Checks if the result should be cached.
  ```yml
  shouldCacheResult: "result.errors.length > 0"
  ```
  """
  shouldCacheResult: String
}

type ResponseCacheTTLConfig {
  coordinate: String!
  ttl: Float!
}

type LiveQueryInvalidation {
  field: String!
  invalidate: [String!]!
}
