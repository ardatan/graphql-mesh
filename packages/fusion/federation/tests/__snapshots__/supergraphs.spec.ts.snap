// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Supergraphs apollo-example Example Query: topProducts: apollo-example-topProducts-result 1`] = `
{
  "data": {
    "topProducts": [
      {
        "inStock": true,
        "name": "Table",
        "price": 899,
        "reviews": [
          {
            "author": {
              "id": "1",
              "name": "Ada Lovelace",
              "username": "@ada",
            },
            "body": "Love it!",
            "id": "1",
          },
          {
            "author": {
              "id": "2",
              "name": "Alan Turing",
              "username": "@complete",
            },
            "body": "Prefer something else.",
            "id": "4",
          },
        ],
        "shippingEstimate": 50,
        "upc": "1",
        "weight": 100,
      },
      {
        "inStock": false,
        "name": "Couch",
        "price": 1299,
        "reviews": [
          {
            "author": {
              "id": "1",
              "name": "Ada Lovelace",
              "username": "@ada",
            },
            "body": "Too expensive.",
            "id": "2",
          },
        ],
        "shippingEstimate": 0,
        "upc": "2",
        "weight": 1000,
      },
      {
        "inStock": true,
        "name": "Chair",
        "price": 54,
        "reviews": [
          {
            "author": {
              "id": "2",
              "name": "Alan Turing",
              "username": "@complete",
            },
            "body": "Could be better.",
            "id": "3",
          },
        ],
        "shippingEstimate": 25,
        "upc": "3",
        "weight": 50,
      },
    ],
  },
  "errors": undefined,
  "extensions": undefined,
}
`;

exports[`Supergraphs apollo-example Example Query: users: apollo-example-users-result 1`] = `
{
  "data": {
    "users": [
      {
        "id": "1",
        "name": "Ada Lovelace",
        "reviews": [
          {
            "body": "Love it!",
            "id": "1",
            "product": {
              "inStock": true,
              "name": "Table",
              "price": 899,
              "reviews": [
                {
                  "author": {
                    "id": "1",
                    "name": "Ada Lovelace",
                    "reviews": [
                      {
                        "body": "Love it!",
                        "id": "1",
                        "product": {
                          "inStock": true,
                          "name": "Table",
                          "price": 899,
                          "shippingEstimate": 50,
                          "upc": "1",
                          "weight": 100,
                        },
                      },
                      {
                        "body": "Too expensive.",
                        "id": "2",
                        "product": {
                          "inStock": false,
                          "name": "Couch",
                          "price": 1299,
                          "shippingEstimate": 0,
                          "upc": "2",
                          "weight": 1000,
                        },
                      },
                    ],
                    "username": "@ada",
                  },
                  "body": "Love it!",
                  "id": "1",
                },
                {
                  "author": {
                    "id": "2",
                    "name": "Alan Turing",
                    "reviews": [
                      {
                        "body": "Could be better.",
                        "id": "3",
                        "product": {
                          "inStock": true,
                          "name": "Chair",
                          "price": 54,
                          "shippingEstimate": 25,
                          "upc": "3",
                          "weight": 50,
                        },
                      },
                      {
                        "body": "Prefer something else.",
                        "id": "4",
                        "product": {
                          "inStock": true,
                          "name": "Table",
                          "price": 899,
                          "shippingEstimate": 50,
                          "upc": "1",
                          "weight": 100,
                        },
                      },
                    ],
                    "username": "@complete",
                  },
                  "body": "Prefer something else.",
                  "id": "4",
                },
              ],
              "shippingEstimate": 50,
              "upc": "1",
              "weight": 100,
            },
          },
          {
            "body": "Too expensive.",
            "id": "2",
            "product": {
              "inStock": false,
              "name": "Couch",
              "price": 1299,
              "reviews": [
                {
                  "author": {
                    "id": "1",
                    "name": "Ada Lovelace",
                    "reviews": [
                      {
                        "body": "Love it!",
                        "id": "1",
                        "product": {
                          "inStock": true,
                          "name": "Table",
                          "price": 899,
                          "shippingEstimate": 50,
                          "upc": "1",
                          "weight": 100,
                        },
                      },
                      {
                        "body": "Too expensive.",
                        "id": "2",
                        "product": {
                          "inStock": false,
                          "name": "Couch",
                          "price": 1299,
                          "shippingEstimate": 0,
                          "upc": "2",
                          "weight": 1000,
                        },
                      },
                    ],
                    "username": "@ada",
                  },
                  "body": "Too expensive.",
                  "id": "2",
                },
              ],
              "shippingEstimate": 0,
              "upc": "2",
              "weight": 1000,
            },
          },
        ],
        "username": "@ada",
      },
      {
        "id": "2",
        "name": "Alan Turing",
        "reviews": [
          {
            "body": "Could be better.",
            "id": "3",
            "product": {
              "inStock": true,
              "name": "Chair",
              "price": 54,
              "reviews": [
                {
                  "author": {
                    "id": "2",
                    "name": "Alan Turing",
                    "reviews": [
                      {
                        "body": "Could be better.",
                        "id": "3",
                        "product": {
                          "inStock": true,
                          "name": "Chair",
                          "price": 54,
                          "shippingEstimate": 25,
                          "upc": "3",
                          "weight": 50,
                        },
                      },
                      {
                        "body": "Prefer something else.",
                        "id": "4",
                        "product": {
                          "inStock": true,
                          "name": "Table",
                          "price": 899,
                          "shippingEstimate": 50,
                          "upc": "1",
                          "weight": 100,
                        },
                      },
                    ],
                    "username": "@complete",
                  },
                  "body": "Could be better.",
                  "id": "3",
                },
              ],
              "shippingEstimate": 25,
              "upc": "3",
              "weight": 50,
            },
          },
          {
            "body": "Prefer something else.",
            "id": "4",
            "product": {
              "inStock": true,
              "name": "Table",
              "price": 899,
              "reviews": [
                {
                  "author": {
                    "id": "1",
                    "name": "Ada Lovelace",
                    "reviews": [
                      {
                        "body": "Love it!",
                        "id": "1",
                        "product": {
                          "inStock": true,
                          "name": "Table",
                          "price": 899,
                          "shippingEstimate": 50,
                          "upc": "1",
                          "weight": 100,
                        },
                      },
                      {
                        "body": "Too expensive.",
                        "id": "2",
                        "product": {
                          "inStock": false,
                          "name": "Couch",
                          "price": 1299,
                          "shippingEstimate": 0,
                          "upc": "2",
                          "weight": 1000,
                        },
                      },
                    ],
                    "username": "@ada",
                  },
                  "body": "Love it!",
                  "id": "1",
                },
                {
                  "author": {
                    "id": "2",
                    "name": "Alan Turing",
                    "reviews": [
                      {
                        "body": "Could be better.",
                        "id": "3",
                        "product": {
                          "inStock": true,
                          "name": "Chair",
                          "price": 54,
                          "shippingEstimate": 25,
                          "upc": "3",
                          "weight": 50,
                        },
                      },
                      {
                        "body": "Prefer something else.",
                        "id": "4",
                        "product": {
                          "inStock": true,
                          "name": "Table",
                          "price": 899,
                          "shippingEstimate": 50,
                          "upc": "1",
                          "weight": 100,
                        },
                      },
                    ],
                    "username": "@complete",
                  },
                  "body": "Prefer something else.",
                  "id": "4",
                },
              ],
              "shippingEstimate": 50,
              "upc": "1",
              "weight": 100,
            },
          },
        ],
        "username": "@complete",
      },
    ],
  },
  "errors": undefined,
  "extensions": undefined,
}
`;

exports[`Supergraphs apollo-example Fusiongraph: fusiongraph 1`] = `
"schema @transport(subgraph: "accounts", kind: "http", location: "http://accounts:4001/graphql") @transport(subgraph: "inventory", kind: "http", location: "http://inventory:4002/graphql") @transport(subgraph: "products", kind: "http", location: "http://products:4003/graphql") @transport(subgraph: "reviews", kind: "http", location: "http://reviews:4004/graphql") {
  query: Query
}

type Product @source(name: "Product", subgraph: "inventory") @source(name: "Product", subgraph: "products") @source(name: "Product", subgraph: "reviews") @variable(name: "Product_key_upc", select: "upc", subgraph: "inventory", type: "String") @variable(name: "Product_key_upc", select: "upc", subgraph: "products", type: "String") @variable(name: "Product_key_upc", select: "upc", subgraph: "reviews", type: "String") @variable(name: "representations", subgraph: "inventory", value: "{ __typename: \\"Product\\", upc: $Product_key_upc, price: $Product_shippingEstimate_requires_price, weight: $Product_shippingEstimate_requires_weight }") @variable(name: "representations", subgraph: "products", value: "{ __typename: \\"Product\\", upc: $Product_key_upc }") @variable(name: "representations", subgraph: "reviews", value: "{ __typename: \\"Product\\", upc: $Product_key_upc }") @resolver(operation: "query getProduct($representations: [_Any!]!) { _entities(representations: $representations) { ... on Product { ...__export } } }", subgraph: "inventory") @resolver(operation: "query getProduct($representations: [_Any!]!) { _entities(representations: $representations) { ... on Product { ...__export } } }", subgraph: "products") @resolver(operation: "query getProduct($representations: [_Any!]!) { _entities(representations: $representations) { ... on Product { ...__export } } }", subgraph: "reviews") {
  upc: String! @source(subgraph: "inventory", name: "upc") @source(subgraph: "products", name: "upc") @source(subgraph: "reviews", name: "upc")
  weight: Int @source(subgraph: "products", name: "weight")
  price: Int @source(subgraph: "products", name: "price")
  inStock: Boolean @source(subgraph: "inventory", name: "inStock")
  shippingEstimate: Int @source(subgraph: "inventory", name: "shippingEstimate") @variable(name: "Product_shippingEstimate_requires_price", select: "price", subgraph: "products", type: "Int") @variable(name: "Product_shippingEstimate_requires_weight", select: "weight", subgraph: "products", type: "Int")
  name: String @source(subgraph: "products", name: "name")
  reviews: [Review] @source(subgraph: "reviews", name: "reviews")
}

type Query @source(name: "Query", subgraph: "accounts") @source(name: "Query", subgraph: "inventory") @source(name: "Query", subgraph: "products") @source(name: "Query", subgraph: "reviews") {
  me: User @source(subgraph: "accounts", name: "me") @resolver(subgraph: "accounts", operation: "query me { me }")
  users: [User] @source(subgraph: "accounts", name: "users") @resolver(subgraph: "accounts", operation: "query users { users }")
  topProducts(first: Int): [Product] @source(subgraph: "products", name: "topProducts") @resolver(subgraph: "products", operation: "query topProducts($first: Int) { topProducts(first: $first) }")
}

type Review @source(name: "Review", subgraph: "reviews") @variable(name: "Review_key_id", select: "id", subgraph: "reviews", type: "ID") @variable(name: "representations", subgraph: "reviews", value: "{ __typename: \\"Review\\", id: $Review_key_id }") @resolver(operation: "query getReview($representations: [_Any!]!) { _entities(representations: $representations) { ... on Review { ...__export } } }", subgraph: "reviews") {
  id: ID! @source(subgraph: "reviews", name: "id")
  body: String @source(subgraph: "reviews", name: "body")
  product: Product @source(subgraph: "reviews", name: "product")
  author: User @source(subgraph: "reviews", name: "author")
}

type User @source(name: "User", subgraph: "accounts") @source(name: "User", subgraph: "reviews") @variable(name: "User_key_id", select: "id", subgraph: "accounts", type: "ID") @variable(name: "User_key_id", select: "id", subgraph: "reviews", type: "ID") @variable(name: "representations", subgraph: "accounts", value: "{ __typename: \\"User\\", id: $User_key_id }") @variable(name: "representations", subgraph: "reviews", value: "{ __typename: \\"User\\", id: $User_key_id }") @resolver(operation: "query getUser($representations: [_Any!]!) { _entities(representations: $representations) { ... on User { ...__export } } }", subgraph: "accounts") @resolver(operation: "query getUser($representations: [_Any!]!) { _entities(representations: $representations) { ... on User { ...__export } } }", subgraph: "reviews") {
  id: ID! @source(subgraph: "accounts", name: "id") @source(subgraph: "reviews", name: "id")
  name: String @source(subgraph: "accounts", name: "name")
  username: String @source(subgraph: "accounts", name: "username")
  birthDate: String @source(subgraph: "accounts", name: "birthDate")
  numberOfReviews: Int @source(subgraph: "reviews", name: "numberOfReviews")
  reviews: [Review] @source(subgraph: "reviews", name: "reviews")
}"
`;

exports[`Supergraphs pb Example Query: me: pb-me-result 1`] = `
{
  "data": {
    "demoFeatures": {
      "edges": [
        {
          "node": {
            "description": "Demo_feature_description",
            "id": "demo",
            "name": "Demo_feature",
            "publicId": "demo_public_id",
          },
        },
      ],
    },
    "demoMe": {
      "role": "USER",
      "spaceId": "demo_space",
      "userId": "demo_user",
    },
  },
  "errors": undefined,
  "extensions": undefined,
}
`;

exports[`Supergraphs pb Fusiongraph: fusiongraph 1`] = `
"schema @transport(subgraph: "DEMO_FEATURES", kind: "http", location: "http://graphql-demo-features-service/graphql") @transport(subgraph: "NODE_RESOLVER", kind: "http", location: "http://graphql-node-resolver/graphql") {
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

type DemoAuthInfo @source(name: "DemoAuthInfo", subgraph: "DEMO_FEATURES") @source(name: "DemoAuthInfo", subgraph: "NODE_RESOLVER") {
  role: String! @source(subgraph: "DEMO_FEATURES", name: "role") @source(subgraph: "NODE_RESOLVER", name: "role")
  spaceId: ID! @source(subgraph: "DEMO_FEATURES", name: "spaceId") @source(subgraph: "NODE_RESOLVER", name: "spaceId")
  userId: ID! @source(subgraph: "DEMO_FEATURES", name: "userId") @source(subgraph: "NODE_RESOLVER", name: "userId")
}

input DemoCreateAndLinkInput @source(name: "DemoCreateAndLinkInput", subgraph: "DEMO_FEATURES") @source(name: "DemoCreateAndLinkInput", subgraph: "NODE_RESOLVER") {
  description: String @source(subgraph: "DEMO_FEATURES", name: "description") @source(subgraph: "NODE_RESOLVER", name: "description")
  name: String! @source(subgraph: "DEMO_FEATURES", name: "name") @source(subgraph: "NODE_RESOLVER", name: "name")
  noteId: ID! @source(subgraph: "DEMO_FEATURES", name: "noteId") @source(subgraph: "NODE_RESOLVER", name: "noteId")
}

union DemoCreateAndLinkPayload @source(name: "DemoCreateAndLinkPayload", subgraph: "DEMO_FEATURES") @source(name: "DemoCreateAndLinkPayload", subgraph: "NODE_RESOLVER") = DemoCreateAndLinkSuccess

type DemoCreateAndLinkSuccess @source(name: "DemoCreateAndLinkSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoCreateAndLinkSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

input DemoCreateFeatureInput @source(name: "DemoCreateFeatureInput", subgraph: "DEMO_FEATURES") @source(name: "DemoCreateFeatureInput", subgraph: "NODE_RESOLVER") {
  description: String @source(subgraph: "DEMO_FEATURES", name: "description") @source(subgraph: "NODE_RESOLVER", name: "description")
  name: String! @source(subgraph: "DEMO_FEATURES", name: "name") @source(subgraph: "NODE_RESOLVER", name: "name")
}

union DemoCreateFeaturePayload @source(name: "DemoCreateFeaturePayload", subgraph: "DEMO_FEATURES") @source(name: "DemoCreateFeaturePayload", subgraph: "NODE_RESOLVER") = DemoCreateFeatureSuccess

type DemoCreateFeatureSuccess @source(name: "DemoCreateFeatureSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoCreateFeatureSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

input DemoDeleteFeatureInput @source(name: "DemoDeleteFeatureInput", subgraph: "DEMO_FEATURES") @source(name: "DemoDeleteFeatureInput", subgraph: "NODE_RESOLVER") {
  id: ID! @source(subgraph: "DEMO_FEATURES", name: "id") @source(subgraph: "NODE_RESOLVER", name: "id")
}

union DemoDeleteFeaturePayload @source(name: "DemoDeleteFeaturePayload", subgraph: "DEMO_FEATURES") @source(name: "DemoDeleteFeaturePayload", subgraph: "NODE_RESOLVER") = DemoDeleteFeatureSuccess

type DemoDeleteFeatureSuccess @source(name: "DemoDeleteFeatureSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoDeleteFeatureSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

type DemoFeature implements Node @source(name: "DemoFeature", subgraph: "DEMO_FEATURES") @variable(name: "DemoFeature_key_id", select: "id", subgraph: "DEMO_FEATURES", type: "ID") @variable(name: "representations", subgraph: "DEMO_FEATURES", value: "{ __typename: \\"DemoFeature\\", id: $DemoFeature_key_id }") @resolver(operation: "query getDemoFeature($representations: [_Any!]!) { _entities(representations: $representations) { ... on DemoFeature { ...__export } } }", subgraph: "DEMO_FEATURES") {
  description: String @source(subgraph: "DEMO_FEATURES", name: "description")
  id: ID! @source(subgraph: "DEMO_FEATURES", name: "id")
  name: String! @source(subgraph: "DEMO_FEATURES", name: "name")
  publicId: ID @source(subgraph: "DEMO_FEATURES", name: "publicId")
}

type DemoFeatureAlreadyHasPublicIdError implements Error @source(name: "DemoFeatureAlreadyHasPublicIdError", subgraph: "DEMO_FEATURES") @source(name: "DemoFeatureAlreadyHasPublicIdError", subgraph: "NODE_RESOLVER") {
  message: String! @source(subgraph: "DEMO_FEATURES", name: "message") @source(subgraph: "NODE_RESOLVER", name: "message")
}

type DemoFeatureAlreadyPrivateError implements Error @source(name: "DemoFeatureAlreadyPrivateError", subgraph: "DEMO_FEATURES") @source(name: "DemoFeatureAlreadyPrivateError", subgraph: "NODE_RESOLVER") {
  message: String! @source(subgraph: "DEMO_FEATURES", name: "message") @source(subgraph: "NODE_RESOLVER", name: "message")
}

type DemoFeatureConnection @source(name: "DemoFeatureConnection", subgraph: "DEMO_FEATURES") @source(name: "DemoFeatureConnection", subgraph: "NODE_RESOLVER") {
  edges: [DemoFeatureEdge] @source(subgraph: "DEMO_FEATURES", name: "edges") @source(subgraph: "NODE_RESOLVER", name: "edges")
  pageInfo: PageInfo! @source(subgraph: "DEMO_FEATURES", name: "pageInfo") @source(subgraph: "NODE_RESOLVER", name: "pageInfo")
}

type DemoFeatureEdge @source(name: "DemoFeatureEdge", subgraph: "DEMO_FEATURES") @source(name: "DemoFeatureEdge", subgraph: "NODE_RESOLVER") {
  cursor: String! @source(subgraph: "DEMO_FEATURES", name: "cursor") @source(subgraph: "NODE_RESOLVER", name: "cursor")
  node: DemoFeature @source(subgraph: "DEMO_FEATURES", name: "node") @source(subgraph: "NODE_RESOLVER", name: "node")
}

input DemoFeatureFilter @source(name: "DemoFeatureFilter", subgraph: "DEMO_FEATURES") @source(name: "DemoFeatureFilter", subgraph: "NODE_RESOLVER") {
  ids: [ID!] @source(subgraph: "DEMO_FEATURES", name: "ids") @source(subgraph: "NODE_RESOLVER", name: "ids")
}

type DemoFeatureHasNoPublicIdError implements Error @source(name: "DemoFeatureHasNoPublicIdError", subgraph: "DEMO_FEATURES") @source(name: "DemoFeatureHasNoPublicIdError", subgraph: "NODE_RESOLVER") {
  message: String! @source(subgraph: "DEMO_FEATURES", name: "message") @source(subgraph: "NODE_RESOLVER", name: "message")
}

type DemoFeatureNotPublicError implements Error @source(name: "DemoFeatureNotPublicError", subgraph: "DEMO_FEATURES") @source(name: "DemoFeatureNotPublicError", subgraph: "NODE_RESOLVER") {
  message: String! @source(subgraph: "DEMO_FEATURES", name: "message") @source(subgraph: "NODE_RESOLVER", name: "message")
}

input DemoMakeFeaturePrivateInput @source(name: "DemoMakeFeaturePrivateInput", subgraph: "DEMO_FEATURES") @source(name: "DemoMakeFeaturePrivateInput", subgraph: "NODE_RESOLVER") {
  id: ID! @source(subgraph: "DEMO_FEATURES", name: "id") @source(subgraph: "NODE_RESOLVER", name: "id")
}

union DemoMakeFeaturePrivatePayload @source(name: "DemoMakeFeaturePrivatePayload", subgraph: "DEMO_FEATURES") @source(name: "DemoMakeFeaturePrivatePayload", subgraph: "NODE_RESOLVER") = DemoFeatureAlreadyPrivateError | DemoMakeFeaturePrivateSuccess

type DemoMakeFeaturePrivateSuccess @source(name: "DemoMakeFeaturePrivateSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoMakeFeaturePrivateSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

input DemoMakeFeaturePublicInput @source(name: "DemoMakeFeaturePublicInput", subgraph: "DEMO_FEATURES") @source(name: "DemoMakeFeaturePublicInput", subgraph: "NODE_RESOLVER") {
  id: ID! @source(subgraph: "DEMO_FEATURES", name: "id") @source(subgraph: "NODE_RESOLVER", name: "id")
}

union DemoMakeFeaturePublicPayload @source(name: "DemoMakeFeaturePublicPayload", subgraph: "DEMO_FEATURES") @source(name: "DemoMakeFeaturePublicPayload", subgraph: "NODE_RESOLVER") = DemoFeatureAlreadyHasPublicIdError | DemoMakeFeaturePublicSuccess

type DemoMakeFeaturePublicSuccess @source(name: "DemoMakeFeaturePublicSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoMakeFeaturePublicSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

union DemoPublicFeaturePayload @source(name: "DemoPublicFeaturePayload", subgraph: "DEMO_FEATURES") @source(name: "DemoPublicFeaturePayload", subgraph: "NODE_RESOLVER") = DemoFeatureNotPublicError | DemoPublicFeatureSuccess

type DemoPublicFeatureSuccess @source(name: "DemoPublicFeatureSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoPublicFeatureSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

input DemoRegenFeaturePublicIdInput @source(name: "DemoRegenFeaturePublicIdInput", subgraph: "DEMO_FEATURES") @source(name: "DemoRegenFeaturePublicIdInput", subgraph: "NODE_RESOLVER") {
  id: ID! @source(subgraph: "DEMO_FEATURES", name: "id") @source(subgraph: "NODE_RESOLVER", name: "id")
}

union DemoRegenFeaturePublicIdPayload @source(name: "DemoRegenFeaturePublicIdPayload", subgraph: "DEMO_FEATURES") @source(name: "DemoRegenFeaturePublicIdPayload", subgraph: "NODE_RESOLVER") = DemoFeatureHasNoPublicIdError | DemoRegenFeaturePublicIdSuccess

type DemoRegenFeaturePublicIdSuccess @source(name: "DemoRegenFeaturePublicIdSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoRegenFeaturePublicIdSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

input DemoUpdateFeatureInput @source(name: "DemoUpdateFeatureInput", subgraph: "DEMO_FEATURES") @source(name: "DemoUpdateFeatureInput", subgraph: "NODE_RESOLVER") {
  description: String @source(subgraph: "DEMO_FEATURES", name: "description") @source(subgraph: "NODE_RESOLVER", name: "description")
  id: ID! @source(subgraph: "DEMO_FEATURES", name: "id") @source(subgraph: "NODE_RESOLVER", name: "id")
  name: String! @source(subgraph: "DEMO_FEATURES", name: "name") @source(subgraph: "NODE_RESOLVER", name: "name")
}

union DemoUpdateFeaturePayload @source(name: "DemoUpdateFeaturePayload", subgraph: "DEMO_FEATURES") @source(name: "DemoUpdateFeaturePayload", subgraph: "NODE_RESOLVER") = DemoUpdateFeatureSuccess

type DemoUpdateFeatureSuccess @source(name: "DemoUpdateFeatureSuccess", subgraph: "DEMO_FEATURES") @source(name: "DemoUpdateFeatureSuccess", subgraph: "NODE_RESOLVER") {
  feature: DemoFeature! @source(subgraph: "DEMO_FEATURES", name: "feature") @source(subgraph: "NODE_RESOLVER", name: "feature")
}

interface Error @source(name: "Error", subgraph: "DEMO_FEATURES") @source(name: "Error", subgraph: "NODE_RESOLVER") {
  message: String! @source(subgraph: "DEMO_FEATURES", name: "message") @source(subgraph: "NODE_RESOLVER", name: "message")
}

type Mutation @source(name: "Mutation", subgraph: "DEMO_FEATURES") @source(name: "Mutation", subgraph: "NODE_RESOLVER") {
  """
  This is a distributed mutation, does something in two services
  The communication between the services is in Kafka
  """
  demoCreateAndLink(input: DemoCreateAndLinkInput!): DemoCreateAndLinkPayload! @source(subgraph: "DEMO_FEATURES", name: "demoCreateAndLink") @resolver(subgraph: "DEMO_FEATURES", operation: "mutation mutationdemoCreateAndLink($input: DemoCreateAndLinkInput!) { demoCreateAndLink(input: $input) }")
  demoCreateFeature(input: DemoCreateFeatureInput!): DemoCreateFeaturePayload! @source(subgraph: "DEMO_FEATURES", name: "demoCreateFeature") @resolver(subgraph: "DEMO_FEATURES", operation: "mutation mutationdemoCreateFeature($input: DemoCreateFeatureInput!) { demoCreateFeature(input: $input) }")
  demoDeleteFeature(input: DemoDeleteFeatureInput!): DemoDeleteFeaturePayload! @source(subgraph: "DEMO_FEATURES", name: "demoDeleteFeature") @resolver(subgraph: "DEMO_FEATURES", operation: "mutation mutationdemoDeleteFeature($input: DemoDeleteFeatureInput!) { demoDeleteFeature(input: $input) }")
  """
  Provides the ability to delete the public ID of a feature that was previously made public
  """
  demoMakeFeaturePrivate(input: DemoMakeFeaturePrivateInput!): DemoMakeFeaturePrivatePayload! @source(subgraph: "DEMO_FEATURES", name: "demoMakeFeaturePrivate") @resolver(subgraph: "DEMO_FEATURES", operation: "mutation mutationdemoMakeFeaturePrivate($input: DemoMakeFeaturePrivateInput!) { demoMakeFeaturePrivate(input: $input) }")
  """
  Takes a feature ID that has no public ID yet and generates one for it
  Returns the generated public ID of the feature
  """
  demoMakeFeaturePublic(input: DemoMakeFeaturePublicInput!): DemoMakeFeaturePublicPayload! @source(subgraph: "DEMO_FEATURES", name: "demoMakeFeaturePublic") @resolver(subgraph: "DEMO_FEATURES", operation: "mutation mutationdemoMakeFeaturePublic($input: DemoMakeFeaturePublicInput!) { demoMakeFeaturePublic(input: $input) }")
  """
  Provides the ability to change the public ID of a feature that was previously made public
  """
  demoRegenFeaturePublicId(input: DemoRegenFeaturePublicIdInput!): DemoRegenFeaturePublicIdPayload! @source(subgraph: "DEMO_FEATURES", name: "demoRegenFeaturePublicId") @resolver(subgraph: "DEMO_FEATURES", operation: "mutation mutationdemoRegenFeaturePublicId($input: DemoRegenFeaturePublicIdInput!) { demoRegenFeaturePublicId(input: $input) }")
  demoUpdateFeature(input: DemoUpdateFeatureInput!): DemoUpdateFeaturePayload! @source(subgraph: "DEMO_FEATURES", name: "demoUpdateFeature") @resolver(subgraph: "DEMO_FEATURES", operation: "mutation mutationdemoUpdateFeature($input: DemoUpdateFeatureInput!) { demoUpdateFeature(input: $input) }")
}

interface Node @source(name: "Node", subgraph: "DEMO_FEATURES") @source(name: "Node", subgraph: "NODE_RESOLVER") {
  id: ID! @source(subgraph: "DEMO_FEATURES", name: "id") @source(subgraph: "NODE_RESOLVER", name: "id")
}

type PageInfo @source(name: "PageInfo", subgraph: "DEMO_FEATURES") @source(name: "PageInfo", subgraph: "NODE_RESOLVER") {
  endCursor: String @source(subgraph: "DEMO_FEATURES", name: "endCursor") @source(subgraph: "NODE_RESOLVER", name: "endCursor")
  hasNextPage: Boolean! @source(subgraph: "DEMO_FEATURES", name: "hasNextPage") @source(subgraph: "NODE_RESOLVER", name: "hasNextPage")
  hasPreviousPage: Boolean! @source(subgraph: "DEMO_FEATURES", name: "hasPreviousPage") @source(subgraph: "NODE_RESOLVER", name: "hasPreviousPage")
  startCursor: String @source(subgraph: "DEMO_FEATURES", name: "startCursor") @source(subgraph: "NODE_RESOLVER", name: "startCursor")
}

type Query @source(name: "Query", subgraph: "DEMO_FEATURES") @source(name: "Query", subgraph: "NODE_RESOLVER") {
  """Returns a feature based on its public id"""
  demoFeaturePublic(publicId: ID!): DemoPublicFeaturePayload! @source(subgraph: "DEMO_FEATURES", name: "demoFeaturePublic") @resolver(subgraph: "DEMO_FEATURES", operation: "query demoFeaturePublic($publicId: ID!) { demoFeaturePublic(publicId: $publicId) }")
  """Returns all the features to users with any roles"""
  demoFeatures(after: String, before: String, filter: DemoFeatureFilter, first: Int, last: Int): DemoFeatureConnection! @source(subgraph: "DEMO_FEATURES", name: "demoFeatures") @resolver(subgraph: "DEMO_FEATURES", operation: "query demoFeatures($after: String, $before: String, $filter: DemoFeatureFilter, $first: Int, $last: Int) { demoFeatures(after: $after, before: $before, filter: $filter, first: $first, last: $last) }")
  """Returns all the features only to users with admin role"""
  demoFeaturesAdmin(after: String, before: String, filter: DemoFeatureFilter, first: Int, last: Int): DemoFeatureConnection! @source(subgraph: "DEMO_FEATURES", name: "demoFeaturesAdmin") @resolver(subgraph: "DEMO_FEATURES", operation: "query demoFeaturesAdmin($after: String, $before: String, $filter: DemoFeatureFilter, $first: Int, $last: Int) { demoFeaturesAdmin(after: $after, before: $before, filter: $filter, first: $first, last: $last) }")
  """Returns all the features only to users with maker or admin role"""
  demoFeaturesMakerAndAdmin(after: String, before: String, filter: DemoFeatureFilter, first: Int, last: Int): DemoFeatureConnection! @source(subgraph: "DEMO_FEATURES", name: "demoFeaturesMakerAndAdmin") @resolver(subgraph: "DEMO_FEATURES", operation: "query demoFeaturesMakerAndAdmin($after: String, $before: String, $filter: DemoFeatureFilter, $first: Int, $last: Int) { demoFeaturesMakerAndAdmin(after: $after, before: $before, filter: $filter, first: $first, last: $last) }")
  demoMe: DemoAuthInfo! @source(subgraph: "DEMO_FEATURES", name: "demoMe") @resolver(subgraph: "DEMO_FEATURES", operation: "query demoMe { demoMe }")
  node(id: ID!): Node @source(subgraph: "NODE_RESOLVER", name: "node") @resolver(subgraph: "NODE_RESOLVER", operation: "query node($id: ID!) { node(id: $id) }")
  nodes(ids: [ID!]!): [Node]! @source(subgraph: "NODE_RESOLVER", name: "nodes") @resolver(subgraph: "NODE_RESOLVER", operation: "query nodes($ids: [ID!]!) { nodes(ids: $ids) }")
}

enum core__Purpose @source(name: "core__Purpose", subgraph: "DEMO_FEATURES") @source(name: "core__Purpose", subgraph: "NODE_RESOLVER") {
  """
  \`EXECUTION\` features provide metadata necessary to for operation execution.
  """
  EXECUTION
  """
  \`SECURITY\` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}"
`;
