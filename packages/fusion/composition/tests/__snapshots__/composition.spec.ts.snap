// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Composition composes basic schemas 1`] = `
"schema @transport(subgraph: "A") @transport(subgraph: "B") {
  query: Query
}

directive @merge(subgraph: String!, keyField: String!, keyArg: String!) on FIELD_DEFINITION

type Query {
  myFoo: Foo! @source(subgraph: "A", name: "myFoo", type: "Foo!")
  foo(id: ID!): Foo! @source(subgraph: "B", name: "foo", type: "Foo!") @merge(subgraph: "B", keyField: "id", keyArg: "id")
  foos(ids: [ID!]!): [Foo!]! @source(subgraph: "B", name: "foos", type: "[Foo!]!") @merge(subgraph: "B", keyField: "id", keyArg: "ids")
  foosByFilter(where: FooFilter!): [Foo!]! @source(subgraph: "B", name: "foosByFilter", type: "[Foo!]!")
}

type Foo @source(subgraph: "A", name: "Foo") @source(subgraph: "B", name: "Foo") {
  id: ID! @source(subgraph: "A", name: "id", type: "ID!") @source(subgraph: "B", name: "id", type: "ID!")
  bar: String! @source(subgraph: "B", name: "bar", type: "String!")
}

input FooFilter @source(subgraph: "B", name: "FooFilter") {
  id: ID @source(subgraph: "B", name: "id", type: "ID")
  id_in: [ID!] @source(subgraph: "B", name: "id_in", type: "[ID!]")
}"
`;

exports[`Composition composes with transforms 1`] = `
"schema @transport(subgraph: "A") @transport(subgraph: "B") {
  query: B_Query
}

directive @merge(subgraph: String!, keyField: String!, keyArg: String!) on FIELD_DEFINITION

type A_Query {
  A_myFoo: A_Foo! @source(subgraph: "A", name: "myFoo", type: "Foo!")
}

type A_Foo @source(subgraph: "A", name: "Foo") {
  id: ID! @source(subgraph: "A", name: "id", type: "ID!")
}

type B_Query {
  B_foo(id: ID!): B_Foo! @source(subgraph: "B", name: "foo", type: "Foo!") @merge(subgraph: "B", keyField: "id", keyArg: "id")
  B_foos(ids: [ID!]!): [B_Foo!]! @source(subgraph: "B", name: "foos", type: "[Foo!]!") @merge(subgraph: "B", keyField: "id", keyArg: "ids")
  B_foosByFilter(where: B_FooFilter!): [B_Foo!]! @source(subgraph: "B", name: "foosByFilter", type: "[Foo!]!")
}

input B_FooFilter @source(subgraph: "B", name: "FooFilter") {
  id: ID @source(subgraph: "B", name: "id", type: "ID")
  id_in: [ID!] @source(subgraph: "B", name: "id_in", type: "[ID!]")
}

type B_Foo @source(subgraph: "B", name: "Foo") {
  id: ID! @source(subgraph: "B", name: "id", type: "ID!")
  bar: String! @source(subgraph: "B", name: "bar", type: "String!")
}"
`;

exports[`Composition keeps the directives 1`] = `
"schema @transport(subgraph: "A") @transport(subgraph: "B") @transport(subgraph: "C") {
  query: Query
}

directive @foo on FIELD_DEFINITION

directive @merge(subgraph: String!, keyField: String!, keyArg: String!) on FIELD_DEFINITION

type Query {
  myFoo: Foo! @source(subgraph: "A", name: "myFoo", type: "Foo!")
  foo(id: ID!): Foo! @source(subgraph: "B", name: "foo", type: "Foo!") @merge(subgraph: "B", keyField: "id", keyArg: "id")
  foos(ids: [ID!]!): [Foo!]! @source(subgraph: "B", name: "foos", type: "[Foo!]!") @merge(subgraph: "B", keyField: "id", keyArg: "ids")
  foosByFilter(where: FooFilter!): [Foo!]! @source(subgraph: "B", name: "foosByFilter", type: "[Foo!]!")
  cFoo: Foo! @foo @source(subgraph: "C", name: "cFoo", type: "Foo!")
}

type Foo @source(subgraph: "A", name: "Foo") @source(subgraph: "B", name: "Foo") @source(subgraph: "C", name: "Foo") {
  id: ID! @source(subgraph: "A", name: "id", type: "ID!") @source(subgraph: "B", name: "id", type: "ID!") @source(subgraph: "C", name: "id", type: "ID!")
  bar: String! @source(subgraph: "B", name: "bar", type: "String!")
}

input FooFilter @source(subgraph: "B", name: "FooFilter") {
  id: ID @source(subgraph: "B", name: "id", type: "ID")
  id_in: [ID!] @source(subgraph: "B", name: "id_in", type: "[ID!]")
}"
`;
