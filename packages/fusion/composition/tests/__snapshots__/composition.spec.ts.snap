// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Composition composes basic schemas 1`] = `
"schema {
  query: Query
}

type Query {
  myFoo: Foo! @resolver(subgraph: "A", operation: "query myFoo { myFoo }") @source(subgraph: "A", name: "myFoo", type: "Foo!")
  foo(id: ID!): Foo! @resolver(subgraph: "B", operation: "query foo($id: ID!) { foo(id: $id) }") @source(subgraph: "B", name: "foo", type: "Foo!")
  foos(ids: [ID!]!): [Foo!]! @resolver(subgraph: "B", operation: "query foos($ids: [ID!]!) { foos(ids: $ids) }") @source(subgraph: "B", name: "foos", type: "[Foo!]!")
}

type Foo @source(subgraph: "A", name: "Foo") @source(subgraph: "B", name: "Foo") @resolver(subgraph: "B", operation: "query FooById($Foo_id: ID!) { foo(id: $Foo_id) }", kind: "FETCH") @resolver(subgraph: "B", operation: "query FoosByIds($Foo_id: [ID!]!) { foos(ids: $Foo_id) }", kind: "BATCH") @variable(subgraph: "A", name: "Foo_id", select: "id") @variable(subgraph: "B", name: "Foo_id", select: "id") {
  id: ID! @source(subgraph: "A", name: "id", type: "ID!") @source(subgraph: "B", name: "id", type: "ID!")
  bar: String! @source(subgraph: "B", name: "bar", type: "String!")
}"
`;

exports[`Composition composes with transforms on fields 1`] = `
"schema {
  query: Query
}

type Query {
  A_myFoo: Foo! @resolver(subgraph: "A", operation: "query myFoo { myFoo }") @source(subgraph: "A", name: "myFoo", type: "Foo!")
  B_foo(id: ID!): Foo! @resolver(subgraph: "B", operation: "query foo($id: ID!) { foo(id: $id) }") @source(subgraph: "B", name: "foo", type: "Foo!")
  B_foos(ids: [ID!]!): [Foo!]! @resolver(subgraph: "B", operation: "query foos($ids: [ID!]!) { foos(ids: $ids) }") @source(subgraph: "B", name: "foos", type: "[Foo!]!")
}

type Foo @source(subgraph: "A", name: "Foo") @source(subgraph: "B", name: "Foo") @resolver(subgraph: "B", operation: "query FooById($Foo_id: ID!) { foo(id: $Foo_id) }", kind: "FETCH") @resolver(subgraph: "B", operation: "query FoosByIds($Foo_id: [ID!]!) { foos(ids: $Foo_id) }", kind: "BATCH") @variable(subgraph: "A", name: "Foo_id", select: "id") @variable(subgraph: "B", name: "Foo_id", select: "id") {
  A_id: ID! @source(subgraph: "A", name: "id", type: "ID!")
  B_id: ID! @source(subgraph: "B", name: "id", type: "ID!")
  B_bar: String! @source(subgraph: "B", name: "bar", type: "String!")
}"
`;

exports[`Composition composes with transforms on types 1`] = `
"schema {
  query: B_Query
}

type A_Query {
  myFoo: A_Foo! @resolver(subgraph: "A", operation: "query myFoo { myFoo }") @source(subgraph: "A", name: "myFoo", type: "Foo!")
}

type A_Foo @source(subgraph: "A", name: "Foo") {
  id: ID! @source(subgraph: "A", name: "id", type: "ID!")
}

type B_Query {
  foo(id: ID!): B_Foo! @resolver(subgraph: "B", operation: "query foo($id: ID!) { foo(id: $id) }") @source(subgraph: "B", name: "foo", type: "Foo!")
  foos(ids: [ID!]!): [B_Foo!]! @resolver(subgraph: "B", operation: "query foos($ids: [ID!]!) { foos(ids: $ids) }") @source(subgraph: "B", name: "foos", type: "[Foo!]!")
}

type B_Foo @source(subgraph: "B", name: "Foo") @resolver(subgraph: "B", operation: "query FooById($Foo_id: ID!) { foo(id: $Foo_id) }", kind: "FETCH") @resolver(subgraph: "B", operation: "query FoosByIds($Foo_id: [ID!]!) { foos(ids: $Foo_id) }", kind: "BATCH") @variable(subgraph: "A", name: "Foo_id", select: "id") @variable(subgraph: "B", name: "Foo_id", select: "id") {
  id: ID! @source(subgraph: "B", name: "id", type: "ID!")
  bar: String! @source(subgraph: "B", name: "bar", type: "String!")
}"
`;

exports[`Composition keeps the directives 1`] = `
"schema {
  query: Query
}

directive @foo on FIELD_DEFINITION

type Query {
  myFoo: Foo! @resolver(subgraph: "A", operation: "query myFoo { myFoo }") @source(subgraph: "A", name: "myFoo", type: "Foo!")
  foo(id: ID!): Foo! @resolver(subgraph: "B", operation: "query foo($id: ID!) { foo(id: $id) }") @source(subgraph: "B", name: "foo", type: "Foo!")
  foos(ids: [ID!]!): [Foo!]! @resolver(subgraph: "B", operation: "query foos($ids: [ID!]!) { foos(ids: $ids) }") @source(subgraph: "B", name: "foos", type: "[Foo!]!")
  cFoo: Foo! @foo @resolver(subgraph: "C", operation: "query cFoo { cFoo }") @source(subgraph: "C", name: "cFoo", type: "Foo!")
}

type Foo @source(subgraph: "A", name: "Foo") @source(subgraph: "B", name: "Foo") @source(subgraph: "C", name: "Foo") @resolver(subgraph: "B", operation: "query FooById($Foo_id: ID!) { foo(id: $Foo_id) }", kind: "FETCH") @resolver(subgraph: "B", operation: "query FoosByIds($Foo_id: [ID!]!) { foos(ids: $Foo_id) }", kind: "BATCH") @variable(subgraph: "A", name: "Foo_id", select: "id") @variable(subgraph: "B", name: "Foo_id", select: "id") @variable(subgraph: "C", name: "Foo_id", select: "id") {
  id: ID! @source(subgraph: "A", name: "id", type: "ID!") @source(subgraph: "B", name: "id", type: "ID!") @source(subgraph: "C", name: "id", type: "ID!")
  bar: String! @source(subgraph: "B", name: "bar", type: "String!")
}"
`;
