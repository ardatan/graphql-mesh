// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pet should generate the correct schema: schema 1`] = `
"schema @transport(subgraph: "Pet", kind: "rest", location: "http://example.com") {
  query: Query
}

directive @discriminator(subgraph: String, field: String, mapping: [[String]]) on INTERFACE | UNION

directive @statusCodeTypeName(subgraph: String, typeName: String, statusCode: String) repeatable on UNION

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Dog implements Pet {
  dog_exclusive: String
  name: String!
  petType: String
}

interface Pet @discriminator(subgraph: "Pet", field: "petType", mapping: [["Dog", "Dog"], ["Cat", "Cat"]]) {
  name: String!
  petType: String
}

type Cat implements Pet {
  cat_exclusive: String
  name: String!
  petType: String
}

type Query {
  pets_by_id(id: String!): pets_by_id_response @httpOperation(subgraph: "Pet", path: "/pets/{args.id}", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
}

union pets_by_id_response @statusCodeTypeName(subgraph: "Pet", statusCode: "200", typeName: "Pet") @statusCodeTypeName(subgraph: "Pet", statusCode: "400", typeName: "ApiError") = Dog | Cat | ApiError

type ApiError {
  code: String!
  description: JSON!
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

scalar ObjMap"
`;
