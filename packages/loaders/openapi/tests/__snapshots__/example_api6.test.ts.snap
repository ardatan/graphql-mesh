// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`example_api6 should generate the schema correctly 1`] = `
"schema @transport(subgraph: "example_api6", kind: "rest", location: "http://localhost:3000/api") {
  query: Query
  mutation: Mutation
}

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @linkResolver(subgraph: String, linkResolverMap: ObjMap) on FIELD_DEFINITION

directive @oas_link(subgraph: String, defaultRootType: String, defaultField: String) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Query {
  """An arbitrary object"""
  object: object_200_response @httpOperation(subgraph: "example_api6", path: "/object", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET) @linkResolver(subgraph: "example_api6", linkResolverMap: "{\\"object2Link\\":{\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getObject2\\"}}")
  """Serves as a link of GET /object"""
  getObject2(
    """HTTP headers are case-insensitive"""
    specialheader: String
  ): getObject2_200_response @httpOperation(subgraph: "example_api6", path: "/object2", operationSpecificHeaders: [["specialheader", "{args.specialheader}"], ["accept", "application/json"]], httpMethod: GET)
  """A particular car"""
  cars_by_id(id: String!): String @httpOperation(subgraph: "example_api6", path: "/cars/{args.id}", operationSpecificHeaders: [["accept", "text/html"]], httpMethod: GET)
  """A particular cactus"""
  cacti_by_cactusId(cactusId: String!): String @httpOperation(subgraph: "example_api6", path: "/cacti/{args.cactusId}", operationSpecificHeaders: [["accept", "text/html"]], httpMethod: GET)
  eateries_by_eatery_breads_by_breadName_dishes_by_dishKey(eatery: String!, breadName: String!, dishKey: String!): String @httpOperation(subgraph: "example_api6", path: "/eateries/{args.eatery}/breads/{args.breadName}/dishes/{args.dishKey}", operationSpecificHeaders: [["accept", "text/html"]], httpMethod: GET)
  """Resolve a nested reference in the parameter schema"""
  nestedReferenceInParameter(russianDoll: russianDoll_Input): String @httpOperation(subgraph: "example_api6", path: "/nestedReferenceInParameter", operationSpecificHeaders: [["accept", "text/html"]], httpMethod: GET, queryParamArgMap: "{\\"russianDoll\\":\\"russianDoll\\"}")
  """An arbitrary object"""
  strictGetOperation: String @httpOperation(subgraph: "example_api6", path: "/strictGetOperation", operationSpecificHeaders: [["accept", "text/plain"]], httpMethod: GET)
  """No provided response schema test"""
  noResponseSchema: String @httpOperation(subgraph: "example_api6", path: "/noResponseSchema", operationSpecificHeaders: [["accept", "text/plain"]], httpMethod: GET)
  """Return a number from the request header."""
  returnNumber(number: Float!): Float @httpOperation(subgraph: "example_api6", path: "/returnNumber", operationSpecificHeaders: [["number", "{args.number}"], ["accept", "text/plain"]], httpMethod: GET)
  """Test link object with non-string parameter."""
  testLinkWithNonStringParam: testLinkWithNonStringParam_200_response @httpOperation(subgraph: "example_api6", path: "/testLinkWithNonStringParam", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET) @linkResolver(subgraph: "example_api6", linkResolverMap: "{\\"return5\\":{\\"linkObjArgs\\":{\\"number\\":5},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"returnNumber\\"}}")
  """Test link object with nested parameter."""
  testLinkwithNestedParam: testLinkwithNestedParam_200_response @httpOperation(subgraph: "example_api6", path: "/testLinkwithNestedParam", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET) @linkResolver(subgraph: "example_api6", linkResolverMap: "{\\"returnNestedNumber\\":{\\"linkObjArgs\\":{\\"number\\":\\"{root.$response.body#/nesting1/nesting2}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"returnNumber\\"}}")
}

type object_200_response {
  data: String
  """Link with exposed parameter"""
  object2Link(
    """HTTP headers are case-insensitive"""
    specialheader: String
  ): getObject2_200_response @oas_link(subgraph: "example_api6", defaultRootType: "Query", defaultField: "object")
}

type getObject2_200_response {
  data: String
}

"""Arbitrary query parameter object"""
input russianDoll_Input {
  name: String
  """Arbitrary query parameter object"""
  nestedDoll: russianDoll_Input
}

type testLinkWithNonStringParam_200_response {
  hello: String
  """Return a number from the request header."""
  return5: Float @oas_link(subgraph: "example_api6", defaultRootType: "Query", defaultField: "testLinkWithNonStringParam")
}

type testLinkwithNestedParam_200_response {
  nesting1: query_testLinkwithNestedParam_nesting1
  """Return a number from the request header."""
  returnNestedNumber: Float @oas_link(subgraph: "example_api6", defaultRootType: "Query", defaultField: "testLinkwithNestedParam")
}

type query_testLinkwithNestedParam_nesting1 {
  nesting2: Float
}

type Mutation {
  """Basic application/x-www-form-urlencoded test"""
  post_formUrlEncoded(input: pet_Input): pet @httpOperation(subgraph: "example_api6", path: "/formUrlEncoded", operationSpecificHeaders: [["Content-Type", "application/x-www-form-urlencoded"], ["accept", "application/json"]], httpMethod: POST)
  post_inputUnion(input: post_inputUnion_request_Input): String @httpOperation(subgraph: "example_api6", path: "/inputUnion", operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "text/html"]], httpMethod: POST)
}

type pet {
  """Name of the pet"""
  name: String
  """Status of the pet"""
  status: String!
  """Weight of the pet"""
  weight: Float
  """Previouw owner of the pet"""
  previous_owner: String
  history: mutation_post_formUrlEncoded_history
  history2: JSON
}

"""History of the pet"""
type mutation_post_formUrlEncoded_history {
  data: String
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input pet_Input {
  """Name of the pet"""
  name: String
  """Status of the pet"""
  status: String!
  """Weight of the pet"""
  weight: Float
  """Previouw owner of the pet"""
  previous_owner: String
  history: mutation_post_formUrlEncoded_history_Input
  history2: JSON
}

"""History of the pet"""
input mutation_post_formUrlEncoded_history_Input {
  data: String
}

input post_inputUnion_request_Input @oneOf(subgraph: "example_api6") {
  mutationInput_post_inputUnion_input_oneOf_0_Input: mutationInput_post_inputUnion_input_oneOf_0_Input
  mutationInput_post_inputUnion_input_oneOf_1_Input: mutationInput_post_inputUnion_input_oneOf_1_Input
}

input mutationInput_post_inputUnion_input_oneOf_0_Input {
  dogBreed: String
}

input mutationInput_post_inputUnion_input_oneOf_1_Input {
  catBreed: String
}

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

scalar ObjMap"
`;
