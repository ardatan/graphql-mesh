// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Example API Combined should generate correct schema: example_oas_combined-schema 1`] = `
"schema @transport(subgraph: "example_api_combined", kind: "rest", location: "http://localhost:3000/api") {
  query: Query
}

directive @enum(subgraph: String, value: String) on ENUM_VALUE

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) on SCHEMA

type Query {
  """Returns information about all employee cars"""
  getAllCars: [query_getAllCars_items] @httpOperation(subgraph: "example_api_combined", path: "/cars", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
}

type query_getAllCars_items {
  """The model of the car."""
  model: String
  """The color of the car."""
  color: String
  features: JSON
  """Arbitrary (string) tags describing an entity."""
  tags: JSON
  kind: query_getAllCars_items_allOf_0_kind
  rating: query_getAllCars_items_allOf_0_rating
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum query_getAllCars_items_allOf_0_kind {
  SEDAN
  SUV
  MINIVAN
  LIMOSINE
  RACE_CAR
}

"""The rating of the car."""
enum query_getAllCars_items_allOf_0_rating {
  _100 @enum(subgraph: "example_api_combined", value: "100")
  _101 @enum(subgraph: "example_api_combined", value: "101")
  _200 @enum(subgraph: "example_api_combined", value: "200")
}

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

scalar ObjMap"
`;

exports[`Example API Combined should handle allOf correctly: example_oas_combined-query-result 1`] = `
{
  "data": {
    "getAllCars": [
      {
        "model": "Retro Rides",
      },
      {
        "model": "Speedzone Speedster",
      },
      {
        "model": "Glossy German",
      },
      {
        "model": "Glossy German",
      },
    ],
  },
}
`;
