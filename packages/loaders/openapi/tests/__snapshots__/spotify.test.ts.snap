// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Spotify should generate correct schema: spotify-schema 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

directive @enum(value: String) on ENUM_VALUE

directive @typescript(type: String) on SCALAR | ENUM

directive @example(value: ObjMap) repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @resolveRoot on FIELD_DEFINITION

directive @oneOf on OBJECT | INTERFACE | INPUT_OBJECT

directive @discriminator(field: String, mapping: ObjMap) on INTERFACE | UNION

directive @statusCodeTypeName(typeName: String, statusCode: ID) repeatable on UNION

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

type Query @globalOptions(sourceName: "test", endpoint: "https://api.spotify.com/v1") {
  "Get Spotify catalog information for a single album.\\n"
  get_an_album(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): AlbumObject @httpOperation(path: "/albums/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for multiple albums identified by their Spotify IDs.\\n"
  get_multiple_albums(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs."
    ids: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): ManyAlbums_response @httpOperation(path: "/albums", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\",\\"market\\":\\"market\\"}")
  "Get Spotify catalog information about an album’s tracks.\\nOptional parameters can be used to limit the number of tracks returned.\\n"
  get_an_albums_tracks(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSimplifiedTrackObject @httpOperation(path: "/albums/{args.id}/tracks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get Spotify catalog information for a single artist identified by their unique Spotify ID.\\n"
  get_an_artist(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist."
    id: String!
  ): ArtistObject @httpOperation(path: "/artists/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get Spotify catalog information for several artists based on their Spotify IDs.\\n"
  get_multiple_artists(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the artists. Maximum: 50 IDs."
    ids: String!
  ): ManyArtists_response @httpOperation(path: "/artists", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get Spotify catalog information about an artist's albums.\\n"
  get_an_artists_albums(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist."
    id: String!
    "A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>\\nValid values are:<br/>- \`album\`<br/>- \`single\`<br/>- \`appears_on\`<br/>- \`compilation\`<br/>For example: \`include_groups=album,single\`."
    include_groups: String
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSimplifiedAlbumObject @httpOperation(path: "/artists/{args.id}/albums", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"include_groups\\":\\"include_groups\\",\\"market\\":\\"market\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get Spotify catalog information about an artist's top tracks by country.\\n"
  get_an_artists_top_tracks(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): ManyTracks_response @httpOperation(path: "/artists/{args.id}/top-tracks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\"}")
  "Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).\\n"
  get_an_artists_related_artists(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist."
    id: String!
  ): ManyArtists_response @httpOperation(path: "/artists/{args.id}/related-artists", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get Spotify catalog information for a single show identified by its\\nunique Spotify ID.\\n"
  get_a_show(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the show."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): ShowObject @httpOperation(path: "/shows/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for several shows based on their Spotify IDs.\\n"
  get_multiple_shows(
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs."
    ids: String!
  ): ManySimplifiedShows_response @httpOperation(path: "/shows", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"ids\\":\\"ids\\"}")
  "Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned.\\n"
  get_a_shows_episodes(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the show."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSimplifiedEpisodeObject @httpOperation(path: "/shows/{args.id}/episodes", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get Spotify catalog information for a single episode identified by its\\nunique Spotify ID.\\n"
  get_an_episode(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): EpisodeObject @httpOperation(path: "/episodes/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for several episodes based on their Spotify IDs.\\n"
  get_multiple_episodes(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs."
    ids: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): ManyEpisodes_response @httpOperation(path: "/episodes", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\",\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for a single audiobook.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n"
  get_an_audiobook(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the audiobook."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): AudiobookObject @httpOperation(path: "/audiobooks/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n"
  get_multiple_audiobooks(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ\`. Maximum: 50 IDs."
    ids: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): ManyAudiobooks_response @httpOperation(path: "/audiobooks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\",\\"market\\":\\"market\\"}")
  "Get Spotify catalog information about an audiobook's chapters.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n"
  get_audiobook_chapters(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the audiobook."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSimplifiedChapterObject @httpOperation(path: "/audiobooks/{args.id}/chapters", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.\\n"
  get_users_saved_audiobooks(
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSimplifiedAudiobookObject @httpOperation(path: "/me/audiobooks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Check if one or more audiobooks are already saved in the current Spotify user's library.\\n"
  check_users_saved_audiobooks(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ\`. Maximum: 50 IDs."
    ids: String!
  ): [Boolean] @httpOperation(path: "/me/audiobooks/contains", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get Spotify catalog information for a single chapter.<br />\\n**Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n"
  get_a_chapter(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the chapter."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): ChapterObject @httpOperation(path: "/chapters/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for several chapters identified by their Spotify IDs.<br />\\n**Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n"
  get_several_chapters(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=0IsXVP0JmcB2adSE338GkK,3ZXb8FKZGU0EHALYX6uCzU\`. Maximum: 50 IDs."
    ids: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): ManyChapters_response @httpOperation(path: "/chapters", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\",\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for a single track identified by its\\nunique Spotify ID.\\n"
  get_track(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the track."
    id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): TrackObject @httpOperation(path: "/tracks/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\"}")
  "Get Spotify catalog information for multiple tracks based on their Spotify IDs.\\n"
  get_several_tracks(
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M\`. Maximum: 50 IDs."
    ids: String!
  ): ManyTracks_response @httpOperation(path: "/tracks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"ids\\":\\"ids\\"}")
  "Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks\\nthat match a keyword string.<br />\\n**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**\\n"
  search(
    "Your search query.\\n\\nYou can narrow down your search using field filters. The available filters are \`album\`, \`artist\`, \`track\`, \`year\`, \`upc\`, \`tag:hipster\`, \`tag:new\`, \`isrc\`, and \`genre\`. Each field filter only applies to certain result types.\\n\\nThe \`artist\` and \`year\` filters can be used while searching albums, artists and tracks. You can filter on a single \`year\` or a range (e.g. 1955-1960).<br />\\nThe \`album\` filter can be used while searching albums and tracks.<br />\\nThe \`genre\` filter can be used while searching artists and tracks.<br />\\nThe \`isrc\` and \`track\` filters can be used while searching tracks.<br />\\nThe \`upc\`, \`tag:new\` and \`tag:hipster\` filters can only be used while searching albums. The \`tag:new\` filter will return albums released in the past two weeks and \`tag:hipster\` can be used to return only albums with the lowest 10% popularity.<br />"
    q: String!
    "A comma-separated list of item types to search across. Search results include hits\\nfrom all the specified item types. For example: \`q=abacab&type=album,track\` returns\\nboth albums and tracks matching \\"abacab\\"."
    type: [queryInput_search_type_items]!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "The maximum number of results to return in each item type."
    limit: NonNegativeInt = 20
    "The index of the first result to return. Use\\nwith limit to get the next page of search results."
    offset: NonNegativeInt
    include_external: Include_External
  ): SearchItems_response @httpOperation(path: "/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"q\\":\\"q\\",\\"type\\":\\"type\\",\\"market\\":\\"market\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"include_external\\":\\"include_external\\"}", queryStringOptionsByParam: "{\\"type\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "Get detailed profile information about the current user (including the\\ncurrent user's username).\\n"
  get_current_users_profile: PrivateUserObject @httpOperation(path: "/me", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get a playlist owned by a Spotify user.\\n"
  get_playlist(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the playlist''s description and URI: \`fields=description,uri\`. A dot\\nseparator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder: \`fields=tracks.items(added_at,added_by.id)\`.\\nUse multiple parentheses to drill down into nested objects, for example: \`fields=tracks.items(track(name,href,album(name,href)))\`.\\nFields can be excluded by prefixing them with an exclamation mark, for example:\\n\`fields=tracks.items(track(name,href,album(!name,href)))\`"
    fields: String
    "A comma-separated list of item types that your client supports besides the default \`track\` type. Valid types are: \`track\` and \`episode\`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the \`type\` field of each object."
    additional_types: String
  ): PlaylistObject @httpOperation(path: "/playlists/{args.playlist_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"fields\\":\\"fields\\",\\"additional_types\\":\\"additional_types\\"}")
  "Get full details of the items of a playlist owned by a Spotify user.\\n"
  get_playlists_tracks(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "Filters for the query: a comma-separated list of the\\nfields to return. If omitted, all fields are returned. For example, to get\\njust the total number of items and the request limit:<br/>\`fields=total,limit\`<br/>A\\ndot separator can be used to specify non-reoccurring fields, while parentheses\\ncan be used to specify reoccurring fields within objects. For example, to\\nget just the added date and user ID of the adder:<br/>\`fields=items(added_at,added_by.id)\`<br/>Use\\nmultiple parentheses to drill down into nested objects, for example:<br/>\`fields=items(track(name,href,album(name,href)))\`<br/>Fields\\ncan be excluded by prefixing them with an exclamation mark, for example:<br/>\`fields=items.track.album(!external_urls,images)\`"
    fields: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
    "A comma-separated list of item types that your client supports besides the default \`track\` type. Valid types are: \`track\` and \`episode\`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the \`type\` field of each object."
    additional_types: String
  ): PagingPlaylistTrackObject @httpOperation(path: "/playlists/{args.playlist_id}/tracks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"additional_types\\":\\"additional_types\\"}")
  "Get a list of the playlists owned or followed by the current Spotify\\nuser.\\n"
  get_a_list_of_current_users_playlists(
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "'The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with \`limit\` to get the\\nnext set of playlists.'"
    offset: Int
  ): PagingPlaylistObject @httpOperation(path: "/me/playlists", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get a list of the albums saved in the current Spotify user's 'Your Music' library.\\n"
  get_users_saved_albums(
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): PagingSavedAlbumObject @httpOperation(path: "/me/albums", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"market\\":\\"market\\"}")
  "Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.\\n"
  check_users_saved_albums(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs."
    ids: String!
  ): [Boolean] @httpOperation(path: "/me/albums/contains", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get a list of the songs saved in the current Spotify user's 'Your Music' library.\\n"
  get_users_saved_tracks(
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSavedTrackObject @httpOperation(path: "/me/tracks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.\\n"
  check_users_saved_tracks(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M\`. Maximum: 50 IDs."
    ids: String!
  ): [Boolean] @httpOperation(path: "/me/tracks/contains", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get a list of the episodes saved in the current Spotify user's library.<br/>\\nThis API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).\\n"
  get_users_saved_episodes(
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSavedEpisodeObject @httpOperation(path: "/me/episodes", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>\\nThis API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..\\n"
  check_users_saved_episodes(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the episodes. Maximum: 50 IDs."
    ids: String!
  ): [Boolean] @httpOperation(path: "/me/episodes/contains", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.\\n"
  get_users_saved_shows(
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingSavedShowObject @httpOperation(path: "/me/shows", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Check if one or more shows is already saved in the current Spotify user's library.\\n"
  check_users_saved_shows(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs."
    ids: String!
  ): [Boolean] @httpOperation(path: "/me/shows/contains", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get the current user's top artists or tracks based on calculated affinity.\\n"
  get_users_top_artists_and_tracks(
    type: Type!
    "Over what time frame the affinities are computed. Valid values: \`long_term\` (calculated from several years of data and including all new data as it becomes available), \`medium_term\` (approximately last 6 months), \`short_term\` (approximately last 4 weeks). Default: \`medium_term\`"
    time_range: String = "medium_term"
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingArtistOrTrackObject_response @httpOperation(path: "/me/top/{args.type}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"time_range\\":\\"time_range\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get public profile information about a Spotify user.\\n"
  get_users_profile(
    "The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids)."
    user_id: String!
  ): PublicUserObject @httpOperation(path: "/users/{args.user_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get a list of the playlists owned or followed by a Spotify user.\\n"
  get_list_users_playlists(
    "The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids)."
    user_id: String!
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first playlist to return. Default:\\n0 (the first object). Maximum offset: 100.000\\\\. Use with \`limit\` to get the\\nnext set of playlists."
    offset: Int
  ): PagingPlaylistObject @httpOperation(path: "/users/{args.user_id}/playlists", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).\\n"
  get_featured_playlists(
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
    country: String
    "The desired language, consisting of a lowercase [ISO 639-1 language code](http://en.wikipedia.org/wiki/ISO_639-1) and an uppercase [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: \`es_MX\`, meaning \\"Spanish (Mexico)\\". Provide this parameter if you want the results returned in a particular language (where available). <br/>\\n_**Note**: if \`locale\` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The \`locale\` parameter, combined with the \`country\` parameter, may give odd results if not carefully matched. For example \`country=SE&locale=de_DE\` will return a list of categories relevant to Sweden but as German language strings._"
    locale: String
    "A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601): \`yyyy-MM-ddTHH:mm:ss\`. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time. Example: \\"2014-10-23T09:00:00\\" for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time."
    timestamp: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingFeaturedPlaylistObject @httpOperation(path: "/browse/featured-playlists", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"country\\":\\"country\\",\\"locale\\":\\"locale\\",\\"timestamp\\":\\"timestamp\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\\n"
  get_categories(
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want to narrow the list of returned categories to those relevant to a particular country. If omitted, the returned items will be globally relevant."
    country: String
    "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: \`es_MX\`, meaning \\"Spanish (Mexico)\\". Provide this parameter if you want the category metadata returned in a particular language. <br/>\\n_**Note**: if \`locale\` is not supplied, or if the specified language is not available, all strings will be returned in the Spotify default language (American English). The \`locale\` parameter, combined with the \`country\` parameter, may give odd results if not carefully matched. For example \`country=SE&locale=de_DE\` will return a list of categories relevant to Sweden but as German language strings._"
    locale: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagedCategories_response @httpOperation(path: "/browse/categories", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"country\\":\\"country\\",\\"locale\\":\\"locale\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\\n"
  get_a_category(
    "The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category."
    category_id: String!
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country."
    country: String
    "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), joined by an underscore. For example: \`es_MX\`, meaning &quot;Spanish (Mexico)&quot;. Provide this parameter if you want the category strings returned in a particular language.<br/> _**Note**: if \`locale\` is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English)._"
    locale: String
  ): CategoryObject @httpOperation(path: "/browse/categories/{args.category_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"country\\":\\"country\\",\\"locale\\":\\"locale\\"}")
  "Get a list of Spotify playlists tagged with a particular category.\\n"
  get_a_categories_playlists(
    "The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) for the category."
    category_id: String!
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter to ensure that the category exists for a particular country."
    country: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagingFeaturedPlaylistObject @httpOperation(path: "/browse/categories/{args.category_id}/playlists", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"country\\":\\"country\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get the current image associated with a specific playlist.\\n"
  get_playlist_cover(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
  ): [ImageObject] @httpOperation(path: "/playlists/{args.playlist_id}/images", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\\n"
  get_new_releases(
    "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries."
    country: String
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items."
    offset: Int
  ): PagedAlbums_response @httpOperation(path: "/browse/new-releases", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"country\\":\\"country\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get the current user's followed artists.\\n"
  get_followed(
    type: Item_Type!
    "The last artist ID retrieved from the previous request."
    after: String
    "The maximum number of items to return. Default: 20\\\\. Minimum: 1\\\\. Maximum: 50\\\\."
    limit: NonNegativeInt = 20
  ): CursorPagedArtists_response @httpOperation(path: "/me/following", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"type\\":\\"type\\",\\"after\\":\\"after\\",\\"limit\\":\\"limit\\"}")
  "Check to see if the current user is following one or more artists or other Spotify users.\\n"
  check_current_user_follows(
    type: queryInput_check_current_user_follows_type!
    "A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) to check. For example: \`ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q\`. A maximum of 50 IDs can be sent in one request."
    ids: String!
  ): [Boolean] @httpOperation(path: "/me/following/contains", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"type\\":\\"type\\",\\"ids\\":\\"ids\\"}")
  "Check to see if one or more Spotify users are following a specified playlist.\\n"
  check_if_user_follows_playlist(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    "A comma-separated list of [Spotify User IDs](/documentation/web-api/concepts/spotify-uris-ids) ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids."
    ids: String!
  ): [Boolean] @httpOperation(path: "/playlists/{args.playlist_id}/followers/contains", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get audio features for multiple tracks based on their Spotify IDs.\\n"
  get_several_audio_features(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the tracks. Maximum: 100 IDs."
    ids: String!
  ): ManyAudioFeatures_response @httpOperation(path: "/audio-features", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Get audio feature information for a single track identified by its unique\\nSpotify ID.\\n"
  get_audio_features(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track."
    id: String!
  ): AudioFeaturesObject @httpOperation(path: "/audio-features/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre.\\n"
  get_audio_analysis(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids)\\nfor the track."
    id: String!
  ): AudioAnalysisObject @httpOperation(path: "/audio-analysis/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.\\n\\nFor artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.\\n"
  get_recommendations(
    "The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20\\\\. Minimum: 1\\\\. Maximum: 100."
    limit: PositiveInt = 20
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for seed artists.  Up to 5 seed values may be provided in any combination of \`seed_artists\`, \`seed_tracks\` and \`seed_genres\`."
    seed_artists: String!
    "A comma separated list of any genres in the set of [available genre seeds](#available-genre-seeds).  Up to 5 seed values may be provided in any combination of \`seed_artists\`, \`seed_tracks\` and \`seed_genres\`."
    seed_genres: String!
    "A comma separated list of [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for a seed track.  Up to 5 seed values may be provided in any combination of \`seed_artists\`, \`seed_tracks\` and \`seed_genres\`."
    seed_tracks: String!
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_acousticness: NonNegativeFloat
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_acousticness: NonNegativeFloat
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_acousticness: NonNegativeFloat
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_danceability: NonNegativeFloat
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_danceability: NonNegativeFloat
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_danceability: NonNegativeFloat
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_duration_ms: Int
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_duration_ms: Int
    "Target duration of the track (ms)"
    target_duration_ms: Int
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_energy: NonNegativeFloat
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_energy: NonNegativeFloat
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_energy: NonNegativeFloat
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_instrumentalness: NonNegativeFloat
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_instrumentalness: NonNegativeFloat
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_instrumentalness: NonNegativeFloat
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_key: NonNegativeInt
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_key: NonNegativeInt
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_key: NonNegativeInt
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_liveness: NonNegativeFloat
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_liveness: NonNegativeFloat
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_liveness: NonNegativeFloat
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_loudness: Float
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_loudness: Float
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_loudness: Float
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_mode: NonNegativeInt
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_mode: NonNegativeInt
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_mode: NonNegativeInt
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_popularity: NonNegativeInt
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_popularity: NonNegativeInt
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_popularity: NonNegativeInt
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_speechiness: NonNegativeFloat
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_speechiness: NonNegativeFloat
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_speechiness: NonNegativeFloat
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_tempo: Float
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_tempo: Float
    "Target tempo (BPM)"
    target_tempo: Float
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_time_signature: Int
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_time_signature: Int
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_time_signature: Int
    "For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`min_tempo=140\` would restrict results to only those tracks with a tempo of greater than 140 beats per minute."
    min_valence: NonNegativeFloat
    "For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, \`max_instrumentalness=0.35\` would filter out most tracks that are likely to be instrumental."
    max_valence: NonNegativeFloat
    "For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request \`target_energy=0.6\` and \`target_danceability=0.8\`. All target values will be weighed equally in ranking results."
    target_valence: NonNegativeFloat
  ): RecommendationsObject @httpOperation(path: "/recommendations", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"market\\":\\"market\\",\\"seed_artists\\":\\"seed_artists\\",\\"seed_genres\\":\\"seed_genres\\",\\"seed_tracks\\":\\"seed_tracks\\",\\"min_acousticness\\":\\"min_acousticness\\",\\"max_acousticness\\":\\"max_acousticness\\",\\"target_acousticness\\":\\"target_acousticness\\",\\"min_danceability\\":\\"min_danceability\\",\\"max_danceability\\":\\"max_danceability\\",\\"target_danceability\\":\\"target_danceability\\",\\"min_duration_ms\\":\\"min_duration_ms\\",\\"max_duration_ms\\":\\"max_duration_ms\\",\\"target_duration_ms\\":\\"target_duration_ms\\",\\"min_energy\\":\\"min_energy\\",\\"max_energy\\":\\"max_energy\\",\\"target_energy\\":\\"target_energy\\",\\"min_instrumentalness\\":\\"min_instrumentalness\\",\\"max_instrumentalness\\":\\"max_instrumentalness\\",\\"target_instrumentalness\\":\\"target_instrumentalness\\",\\"min_key\\":\\"min_key\\",\\"max_key\\":\\"max_key\\",\\"target_key\\":\\"target_key\\",\\"min_liveness\\":\\"min_liveness\\",\\"max_liveness\\":\\"max_liveness\\",\\"target_liveness\\":\\"target_liveness\\",\\"min_loudness\\":\\"min_loudness\\",\\"max_loudness\\":\\"max_loudness\\",\\"target_loudness\\":\\"target_loudness\\",\\"min_mode\\":\\"min_mode\\",\\"max_mode\\":\\"max_mode\\",\\"target_mode\\":\\"target_mode\\",\\"min_popularity\\":\\"min_popularity\\",\\"max_popularity\\":\\"max_popularity\\",\\"target_popularity\\":\\"target_popularity\\",\\"min_speechiness\\":\\"min_speechiness\\",\\"max_speechiness\\":\\"max_speechiness\\",\\"target_speechiness\\":\\"target_speechiness\\",\\"min_tempo\\":\\"min_tempo\\",\\"max_tempo\\":\\"max_tempo\\",\\"target_tempo\\":\\"target_tempo\\",\\"min_time_signature\\":\\"min_time_signature\\",\\"max_time_signature\\":\\"max_time_signature\\",\\"target_time_signature\\":\\"target_time_signature\\",\\"min_valence\\":\\"min_valence\\",\\"max_valence\\":\\"max_valence\\",\\"target_valence\\":\\"target_valence\\"}")
  "Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations).\\n"
  get_recommendation_genres: ManyGenres_response @httpOperation(path: "/recommendations/available-genre-seeds", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get information about the user’s current playback state, including track or episode, progress, and active device.\\n"
  get_information_about_the_users_current_playback(
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "A comma-separated list of item types that your client supports besides the default \`track\` type. Valid types are: \`track\` and \`episode\`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the \`type\` field of each object."
    additional_types: String
  ): get_information_about_the_users_current_playback_response @httpOperation(path: "/me/player", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"additional_types\\":\\"additional_types\\"}")
  "Get information about a user’s available devices.\\n"
  get_a_users_available_devices: ManyDevices_response @httpOperation(path: "/me/player/devices", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get the object currently being played on the user's Spotify account.\\n"
  get_the_users_currently_playing_track(
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
    "A comma-separated list of item types that your client supports besides the default \`track\` type. Valid types are: \`track\` and \`episode\`.<br/>\\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the \`type\` field of each object."
    additional_types: String
  ): CurrentlyPlayingContextObject @httpOperation(path: "/me/player/currently-playing", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"market\\":\\"market\\",\\"additional_types\\":\\"additional_types\\"}")
  "Get tracks from the current user's recently played tracks.\\n_**Note**: Currently doesn't support podcast episodes._\\n"
  get_recently_played(
    "The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50."
    limit: NonNegativeInt = 20
    "A Unix timestamp in milliseconds. Returns all items\\nafter (but not including) this cursor position. If \`after\` is specified, \`before\`\\nmust not be specified."
    after: Int
    "A Unix timestamp in milliseconds. Returns all items\\nbefore (but not including) this cursor position. If \`before\` is specified,\\n\`after\` must not be specified."
    before: Int
  ): CursorPagingPlayHistoryObject @httpOperation(path: "/me/player/recently-played", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"after\\":\\"after\\",\\"before\\":\\"before\\"}")
  "Get the list of objects that make up the user's queue.\\n"
  get_queue: QueueObject @httpOperation(path: "/me/player/queue", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Get the list of markets where Spotify is available.\\n"
  get_available_markets: get_available_markets_200_response @httpOperation(path: "/markets", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
}

"An album"
type AlbumObject {
  album_type: query_get_an_album_allOf_0_album_type!
  "The number of tracks in the album."
  total_tracks: Int!
  "The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._"
  available_markets: [String]!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the album."
  href: String!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album."
  id: String!
  "The cover art for the album in various sizes, widest first."
  images: [ImageObject]!
  "The name of the album. In case of an album takedown, the value may be an empty string."
  name: String!
  "The date the album was first released."
  release_date: String!
  release_date_precision: query_get_an_album_allOf_0_release_date_precision!
  restrictions: AlbumRestrictionObject
  type: album_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album."
  uri: URL!
  "The copyright statements of the album."
  copyrights: [CopyrightObject]
  external_ids: ExternalIdObject
  "A list of the genres the album is associated with. If not yet classified, the array is empty."
  genres: [String]
  "The label associated with the album."
  label: String
  "The popularity of the album. The value will be between 0 and 100, with 100 being the most popular."
  popularity: Int
  "The artists of the album. Each artist object includes a link in \`href\` to more detailed information about the artist."
  artists: [ArtistObject]
  tracks: PagingSimplifiedTrackObject
}

"The type of the album."
enum query_get_an_album_allOf_0_album_type {
  album
  single
  compilation
}

type ExternalUrlObject {
  "The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object."
  spotify: String
}

type ImageObject {
  "The source URL of the image."
  url: String!
  "The image height in pixels."
  height: Int
  "The image width in pixels."
  width: Int
}

"The precision with which \`release_date\` value is known."
enum query_get_an_album_allOf_0_release_date_precision {
  year
  month
  day
}

type AlbumRestrictionObject {
  reason: query_get_an_album_allOf_0_restrictions_reason
}

"The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.\\nAdditional reasons may be added in the future."
enum query_get_an_album_allOf_0_restrictions_reason {
  market
  product
  explicit
}

enum album_const @typescript(type: "\\"album\\"") @example(value: "\\"album\\"") {
  album @enum(value: "\\"album\\"")
}

"A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt."
scalar URL

type CopyrightObject {
  "The copyright text for this content."
  text: String
  "The type of copyright: \`C\` = the copyright, \`P\` = the sound recording (performance) copyright."
  type: String
}

type ExternalIdObject {
  "[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)"
  isrc: String
  "[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)"
  ean: String
  "[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)"
  upc: String
}

"An artist"
type ArtistObject {
  external_urls: ExternalUrlObject
  followers: FollowersObject
  "A list of the genres the artist is associated with. If not yet classified, the array is empty."
  genres: [String]
  "A link to the Web API endpoint providing full details of the artist."
  href: String
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist."
  id: String
  "Images of the artist in various sizes, widest first."
  images: [ImageObject]
  "The name of the artist."
  name: String
  "The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks."
  popularity: Int
  type: artist_const
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist."
  uri: String
}

type FollowersObject {
  "This will always be set to null, as the Web API does not support it at the moment."
  href: String
  "The total number of followers."
  total: Int
}

enum artist_const @typescript(type: "\\"artist\\"") @example(value: "\\"artist\\"") {
  artist @enum(value: "\\"artist\\"")
}

"Pages of tracks"
type PagingSimplifiedTrackObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SimplifiedTrackObject]
}

type SimplifiedTrackObject {
  "The artists who performed the track. Each artist object includes a link in \`href\` to more detailed information about the artist."
  artists: [SimplifiedArtistObject]
  "A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]
  "The disc number (usually \`1\` unless the album consists of more than one disc)."
  disc_number: Int
  "The track length in milliseconds."
  duration_ms: Int
  "Whether or not the track has explicit lyrics ( \`true\` = yes it does; \`false\` = no it does not OR unknown)."
  explicit: Boolean
  external_urls: ExternalUrlObject
  "A link to the Web API endpoint providing full details of the track."
  href: String
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track."
  id: String
  "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If \`true\`, the track is playable in the given market. Otherwise \`false\`."
  is_playable: Boolean
  linked_from: LinkedTrackObject
  restrictions: TrackRestrictionObject
  "The name of the track."
  name: String
  "A URL to a 30 second preview (MP3 format) of the track."
  preview_url: String
  "The number of the track. If an album has several discs, the track number is the number on the specified disc."
  track_number: Int
  "The object type: \\"track\\"."
  type: String
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track."
  uri: String
  "Whether or not the track is from a local file."
  is_local: Boolean
}

type SimplifiedArtistObject {
  external_urls: ExternalUrlObject
  "A link to the Web API endpoint providing full details of the artist."
  href: String
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist."
  id: String
  "The name of the artist."
  name: String
  type: artist_const
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist."
  uri: String
}

type LinkedTrackObject {
  external_urls: ExternalUrlObject
  "A link to the Web API endpoint providing full details of the track."
  href: String
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track."
  id: String
  "The object type: \\"track\\"."
  type: String
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track."
  uri: String
}

type TrackRestrictionObject {
  "The reason for the restriction. Supported values:\\n- \`market\` - The content item is not available in the given market.\\n- \`product\` - The content item is not available for the user's subscription type.\\n- \`explicit\` - The content item is explicit and the user's account is set to not play explicit content.\\n\\nAdditional reasons may be added in the future.\\n**Note**: If you use this field, make sure that your application safely handles unknown values."
  reason: String
}

"A set of albums"
type ManyAlbums_response {
  albums: [AlbumObject]!
}

"Integers that will have a value of 0 or more."
scalar NonNegativeInt

"A set of artists"
type ManyArtists_response {
  artists: [ArtistObject]!
}

"Pages of albums"
type PagingSimplifiedAlbumObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SimplifiedAlbumObject]
}

type SimplifiedAlbumObject {
  album_type: query_get_an_album_allOf_0_album_type!
  "The number of tracks in the album."
  total_tracks: Int!
  "The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._"
  available_markets: [String]!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the album."
  href: String!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album."
  id: String!
  "The cover art for the album in various sizes, widest first."
  images: [ImageObject]!
  "The name of the album. In case of an album takedown, the value may be an empty string."
  name: String!
  "The date the album was first released."
  release_date: String!
  release_date_precision: query_get_an_album_allOf_0_release_date_precision!
  restrictions: AlbumRestrictionObject
  type: album_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album."
  uri: URL!
  "The copyright statements of the album."
  copyrights: [CopyrightObject]
  external_ids: ExternalIdObject
  "A list of the genres the album is associated with. If not yet classified, the array is empty."
  genres: [String]
  "The label associated with the album."
  label: String
  "The popularity of the album. The value will be between 0 and 100, with 100 being the most popular."
  popularity: Int
  album_group: query_get_an_artists_albums_allOf_1_items_items_allOf_1_album_group
  "The artists of the album. Each artist object includes a link in \`href\` to more detailed information about the artist."
  artists: [SimplifiedArtistObject]!
}

"The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album."
enum query_get_an_artists_albums_allOf_1_items_items_allOf_1_album_group {
  album
  single
  compilation
  appears_on
}

"A set of tracks"
type ManyTracks_response {
  tracks: [TrackObject]!
}

"A track"
type TrackObject {
  album: SimplifiedAlbumObject
  "The artists who performed the track. Each artist object includes a link in \`href\` to more detailed information about the artist."
  artists: [ArtistObject]
  "A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]
  "The disc number (usually \`1\` unless the album consists of more than one disc)."
  disc_number: Int
  "The track length in milliseconds."
  duration_ms: Int
  "Whether or not the track has explicit lyrics ( \`true\` = yes it does; \`false\` = no it does not OR unknown)."
  explicit: Boolean
  external_ids: ExternalIdObject
  external_urls: ExternalUrlObject
  "A link to the Web API endpoint providing full details of the track."
  href: String
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track."
  id: String
  "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If \`true\`, the track is playable in the given market. Otherwise \`false\`."
  is_playable: Boolean
  linked_from: JSON
  restrictions: TrackRestrictionObject
  "The name of the track."
  name: String
  "The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._"
  popularity: Int
  "A link to a 30 second preview (MP3 format) of the track. Can be \`null\`"
  preview_url: String
  "The number of the track. If an album has several discs, the track number is the number on the specified disc."
  track_number: Int
  type: track_const
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track."
  uri: String
  "Whether or not the track is from a local file."
  is_local: Boolean
}

"The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum track_const @typescript(type: "\\"track\\"") @example(value: "\\"track\\"") {
  track @enum(value: "\\"track\\"")
}

"A show"
type ShowObject {
  "A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]!
  "The copyright statements of the show."
  copyrights: [CopyrightObject]!
  "A description of the show. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the show. This field may contain HTML tags."
  html_description: String!
  "Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the show."
  href: String!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show."
  id: String!
  "The cover art for the show in various sizes, widest first."
  images: [ImageObject]!
  "True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be \`null\` in some cases."
  is_externally_hosted: Boolean!
  "A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The media type of the show."
  media_type: String!
  "The name of the episode."
  name: String!
  "The publisher of the show."
  publisher: String!
  type: show_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show."
  uri: String!
  "The total number of episodes in the show."
  total_episodes: Int!
  episodes: PagingSimplifiedEpisodeObject!
}

enum show_const @typescript(type: "\\"show\\"") @example(value: "\\"show\\"") {
  show @enum(value: "\\"show\\"")
}

"Pages of episodes"
type PagingSimplifiedEpisodeObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SimplifiedEpisodeObject]
}

type SimplifiedEpisodeObject {
  "A URL to a 30 second preview (MP3 format) of the episode. \`null\` if not available."
  audio_preview_url: URL!
  "A description of the episode. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the episode. This field may contain HTML tags."
  html_description: String!
  "The episode length in milliseconds."
  duration_ms: Int!
  "Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the episode."
  href: URL!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  id: String!
  "The cover art for the episode in various sizes, widest first."
  images: [ImageObject]!
  "True if the episode is hosted outside of Spotify's CDN."
  is_externally_hosted: Boolean!
  "True if the episode is playable in the given market. Otherwise false."
  is_playable: Boolean!
  "The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the \`languages\` field instead."
  language: String
  "A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The name of the episode."
  name: String!
  "The date the episode was first released, for example \`\\"1981-12-15\\"\`. Depending on the precision, it might be shown as \`\\"1981\\"\` or \`\\"1981-12\\"\`."
  release_date: Date!
  release_date_precision: query_get_a_show_allOf_1_episodes_allOf_1_items_items_allOf_0_release_date_precision!
  resume_point: ResumePointObject!
  type: episode_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  uri: URL!
  restrictions: EpisodeRestrictionObject
  JSON: JSON @resolveRoot
}

"Represents date values"
scalar Date

"The precision with which \`release_date\` value is known."
enum query_get_a_show_allOf_1_episodes_allOf_1_items_items_allOf_0_release_date_precision {
  year
  month
  day
}

type ResumePointObject {
  "Whether or not the episode has been fully played by the user."
  fully_played: Boolean
  "The user's most recent position in the episode in milliseconds."
  resume_position_ms: Int
}

enum episode_const @typescript(type: "\\"episode\\"") @example(value: "\\"episode\\"") {
  episode @enum(value: "\\"episode\\"")
}

type EpisodeRestrictionObject {
  "The reason for the restriction. Supported values:\\n- \`market\` - The content item is not available in the given market.\\n- \`product\` - The content item is not available for the user's subscription type.\\n- \`explicit\` - The content item is explicit and the user's account is set to not play explicit content.\\n\\nAdditional reasons may be added in the future.\\n**Note**: If you use this field, make sure that your application safely handles unknown values."
  reason: String
}

"A set of shows"
type ManySimplifiedShows_response {
  shows: [SimplifiedShowObject]!
}

type SimplifiedShowObject {
  "A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]!
  "The copyright statements of the show."
  copyrights: [CopyrightObject]!
  "A description of the show. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the show. This field may contain HTML tags."
  html_description: String!
  "Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the show."
  href: String!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show."
  id: String!
  "The cover art for the show in various sizes, widest first."
  images: [ImageObject]!
  "True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be \`null\` in some cases."
  is_externally_hosted: Boolean!
  "A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The media type of the show."
  media_type: String!
  "The name of the episode."
  name: String!
  "The publisher of the show."
  publisher: String!
  type: show_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show."
  uri: String!
  "The total number of episodes in the show."
  total_episodes: Int!
  JSON: JSON @resolveRoot
}

"An episode"
type EpisodeObject {
  "A URL to a 30 second preview (MP3 format) of the episode. \`null\` if not available."
  audio_preview_url: URL!
  "A description of the episode. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the episode. This field may contain HTML tags."
  html_description: String!
  "The episode length in milliseconds."
  duration_ms: Int!
  "Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the episode."
  href: URL!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  id: String!
  "The cover art for the episode in various sizes, widest first."
  images: [ImageObject]!
  "True if the episode is hosted outside of Spotify's CDN."
  is_externally_hosted: Boolean!
  "True if the episode is playable in the given market. Otherwise false."
  is_playable: Boolean!
  "The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the \`languages\` field instead."
  language: String
  "A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The name of the episode."
  name: String!
  "The date the episode was first released, for example \`\\"1981-12-15\\"\`. Depending on the precision, it might be shown as \`\\"1981\\"\` or \`\\"1981-12\\"\`."
  release_date: Date!
  release_date_precision: query_get_a_show_allOf_1_episodes_allOf_1_items_items_allOf_0_release_date_precision!
  resume_point: ResumePointObject!
  type: episode_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  uri: URL!
  restrictions: EpisodeRestrictionObject
  show: SimplifiedShowObject!
}

"A set of episodes"
type ManyEpisodes_response {
  episodes: [EpisodeObject]!
}

"An Audiobook"
type AudiobookObject {
  "The author(s) for the audiobook."
  authors: [AuthorObject]!
  "A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]!
  "The copyright statements of the audiobook."
  copyrights: [CopyrightObject]!
  "A description of the audiobook. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the audiobook. This field may contain HTML tags."
  html_description: String!
  "The edition of the audiobook."
  edition: String
  "Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the audiobook."
  href: String!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook."
  id: String!
  "The cover art for the audiobook in various sizes, widest first."
  images: [ImageObject]!
  "A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The media type of the audiobook."
  media_type: String!
  "The name of the audiobook."
  name: String!
  "The narrator(s) for the audiobook."
  narrators: [NarratorObject]!
  "The publisher of the audiobook."
  publisher: String!
  type: audiobook_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook."
  uri: String!
  "The number of chapters in this audiobook."
  total_chapters: Int!
  chapters: PagingSimplifiedChapterObject!
}

type AuthorObject {
  "The name of the author."
  name: String
}

type NarratorObject {
  "The name of the Narrator."
  name: String
}

enum audiobook_const @typescript(type: "\\"audiobook\\"") @example(value: "\\"audiobook\\"") {
  audiobook @enum(value: "\\"audiobook\\"")
}

"Pages of chapters"
type PagingSimplifiedChapterObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SimplifiedChapterObject]
}

type SimplifiedChapterObject {
  "A URL to a 30 second preview (MP3 format) of the episode. \`null\` if not available."
  audio_preview_url: URL!
  "A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]
  "The number of the chapter"
  chapter_number: Int!
  "A description of the episode. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the episode. This field may contain HTML tags."
  html_description: String!
  "The episode length in milliseconds."
  duration_ms: Int!
  "Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the episode."
  href: URL!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  id: String!
  "The cover art for the episode in various sizes, widest first."
  images: [ImageObject]!
  "True if the episode is playable in the given market. Otherwise false."
  is_playable: Boolean!
  "A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The name of the episode."
  name: String!
  "The date the episode was first released, for example \`\\"1981-12-15\\"\`. Depending on the precision, it might be shown as \`\\"1981\\"\` or \`\\"1981-12\\"\`."
  release_date: Date!
  release_date_precision: query_get_an_audiobook_allOf_1_chapters_allOf_1_items_items_allOf_0_release_date_precision!
  resume_point: ResumePointObject!
  type: episode_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  uri: URL!
  restrictions: ChapterRestrictionObject
  JSON: JSON @resolveRoot
}

"The precision with which \`release_date\` value is known."
enum query_get_an_audiobook_allOf_1_chapters_allOf_1_items_items_allOf_0_release_date_precision {
  year
  month
  day
}

type ChapterRestrictionObject {
  "The reason for the restriction. Supported values:\\n- \`market\` - The content item is not available in the given market.\\n- \`product\` - The content item is not available for the user's subscription type.\\n- \`explicit\` - The content item is explicit and the user's account is set to not play explicit content.\\n- \`payment_required\` - Payment is required to play the content item.\\n\\nAdditional reasons may be added in the future.\\n**Note**: If you use this field, make sure that your application safely handles unknown values."
  reason: String
}

"A set of audiobooks"
type ManyAudiobooks_response {
  audiobooks: [AudiobookObject]!
}

"Pages of audiobooks"
type PagingSimplifiedAudiobookObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SimplifiedAudiobookObject]
}

type SimplifiedAudiobookObject {
  "The author(s) for the audiobook."
  authors: [AuthorObject]!
  "A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]!
  "The copyright statements of the audiobook."
  copyrights: [CopyrightObject]!
  "A description of the audiobook. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the audiobook. This field may contain HTML tags."
  html_description: String!
  "The edition of the audiobook."
  edition: String
  "Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the audiobook."
  href: String!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook."
  id: String!
  "The cover art for the audiobook in various sizes, widest first."
  images: [ImageObject]!
  "A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The media type of the audiobook."
  media_type: String!
  "The name of the audiobook."
  name: String!
  "The narrator(s) for the audiobook."
  narrators: [NarratorObject]!
  "The publisher of the audiobook."
  publisher: String!
  type: audiobook_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook."
  uri: String!
  "The number of chapters in this audiobook."
  total_chapters: Int!
  JSON: JSON @resolveRoot
}

"A Chapter"
type ChapterObject {
  "A URL to a 30 second preview (MP3 format) of the episode. \`null\` if not available."
  audio_preview_url: URL!
  "A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code."
  available_markets: [String]
  "The number of the chapter"
  chapter_number: Int!
  "A description of the episode. HTML tags are stripped away from this field, use \`html_description\` field in case HTML tags are needed."
  description: String!
  "A description of the episode. This field may contain HTML tags."
  html_description: String!
  "The episode length in milliseconds."
  duration_ms: Int!
  "Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown)."
  explicit: Boolean!
  external_urls: ExternalUrlObject!
  "A link to the Web API endpoint providing full details of the episode."
  href: URL!
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  id: String!
  "The cover art for the episode in various sizes, widest first."
  images: [ImageObject]!
  "True if the episode is playable in the given market. Otherwise false."
  is_playable: Boolean!
  "A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code."
  languages: [String]!
  "The name of the episode."
  name: String!
  "The date the episode was first released, for example \`\\"1981-12-15\\"\`. Depending on the precision, it might be shown as \`\\"1981\\"\` or \`\\"1981-12\\"\`."
  release_date: Date!
  release_date_precision: query_get_an_audiobook_allOf_1_chapters_allOf_1_items_items_allOf_0_release_date_precision!
  resume_point: ResumePointObject!
  type: episode_const!
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode."
  uri: URL!
  restrictions: ChapterRestrictionObject
  audiobook: SimplifiedAudiobookObject!
}

"A set of chapters"
type ManyChapters_response {
  chapters: [ChapterObject]!
}

"Search response"
type SearchItems_response {
  tracks: PagingTrackObject
  artists: PagingArtistObject
  albums: PagingSimplifiedAlbumObject
  playlists: PagingPlaylistObject
  shows: PagingSimplifiedShowObject
  episodes: PagingSimplifiedEpisodeObject
  audiobooks: PagingSimplifiedAudiobookObject
}

type PagingTrackObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [TrackObject]
}

type PagingArtistObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [ArtistObject]
}

"A paged set of playlists"
type PagingPlaylistObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SimplifiedPlaylistObject]
}

type SimplifiedPlaylistObject {
  "\`true\` if the owner allows other users to modify the playlist."
  collaborative: Boolean
  "The playlist description. _Only returned for modified, verified playlists, otherwise_ \`null\`."
  description: String
  external_urls: ExternalUrlObject
  "A link to the Web API endpoint providing full details of the playlist."
  href: String
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist."
  id: String
  "Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (\`url\`) is temporary and will expire in less than a day._"
  images: [ImageObject]
  "The name of the playlist."
  name: String
  owner: PlaylistOwnerObject
  "The playlist's public/private status: \`true\` the playlist is public, \`false\` the playlist is private, \`null\` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)"
  public: Boolean
  "The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version"
  snapshot_id: String
  tracks: PlaylistTracksRefObject
  "The object type: \\"playlist\\""
  type: String
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist."
  uri: String
}

type PlaylistOwnerObject {
  external_urls: ExternalUrlObject
  followers: FollowersObject
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user."
  id: String
  type: user_const
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user."
  uri: String
  "The name displayed on the user's profile. \`null\` if not available."
  display_name: String
}

enum user_const @typescript(type: "\\"user\\"") @example(value: "\\"user\\"") {
  user @enum(value: "\\"user\\"")
}

type PlaylistTracksRefObject {
  "A link to the Web API endpoint where full details of the playlist's tracks can be retrieved."
  href: String
  "Number of tracks in the playlist."
  total: Int
}

"Pages of shows"
type PagingSimplifiedShowObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SimplifiedShowObject]
}

enum queryInput_search_type_items {
  album
  artist
  playlist
  track
  show
  episode
  audiobook
}

enum Include_External @typescript(type: "\\"audio\\"") @example(value: "\\"audio\\"") {
  audio @enum(value: "\\"audio\\"")
}

"A user"
type PrivateUserObject {
  "The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._"
  country: String
  "The name displayed on the user's profile. \`null\` if not available."
  display_name: String
  "The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._"
  email: String
  explicit_content: ExplicitContentSettingsObject
  external_urls: ExternalUrlObject
  followers: FollowersObject
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user."
  id: String
  "The user's profile image."
  images: [ImageObject]
  "The user's Spotify subscription level: \\"premium\\", \\"free\\", etc. (The subscription level \\"open\\" can be considered the same as \\"free\\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._"
  product: String
  "The object type: \\"user\\""
  type: String
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user."
  uri: String
}

type ExplicitContentSettingsObject {
  "When \`true\`, indicates that explicit content should not be played."
  filter_enabled: Boolean
  "When \`true\`, indicates that the explicit content setting is locked and can't be changed by the user."
  filter_locked: Boolean
}

"A playlist"
type PlaylistObject {
  "\`true\` if the owner allows other users to modify the playlist."
  collaborative: Boolean
  "The playlist description. _Only returned for modified, verified playlists, otherwise_ \`null\`."
  description: String
  external_urls: ExternalUrlObject
  followers: FollowersObject
  "A link to the Web API endpoint providing full details of the playlist."
  href: String
  "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist."
  id: String
  "Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (\`url\`) is temporary and will expire in less than a day._"
  images: [ImageObject]
  "The name of the playlist."
  name: String
  owner: PlaylistOwnerObject
  "The playlist's public/private status: \`true\` the playlist is public, \`false\` the playlist is private, \`null\` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)"
  public: Boolean
  "The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version"
  snapshot_id: String
  tracks: PagingPlaylistTrackObject
  "The object type: \\"playlist\\""
  type: String
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist."
  uri: String
}

"Pages of tracks"
type PagingPlaylistTrackObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [PlaylistTrackObject]
}

type PlaylistTrackObject {
  "The date and time the track or episode was added. _**Note**: some very old playlists may return \`null\` in this field._"
  added_at: DateTime
  added_by: PlaylistUserObject
  "Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not."
  is_local: Boolean
  track: query_get_playlist_tracks_allOf_1_items_items_track
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

type PlaylistUserObject {
  external_urls: ExternalUrlObject
  followers: FollowersObject
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user."
  id: String
  type: user_const
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user."
  uri: String
}

"Information about the track or episode."
union query_get_playlist_tracks_allOf_1_items_items_track @discriminator(field: "type") = TrackObject | EpisodeObject

"Pages of albums"
type PagingSavedAlbumObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SavedAlbumObject]
}

type SavedAlbumObject {
  "The date and time the album was saved\\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\\nIf the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object."
  added_at: DateTime
  "An album"
  album: AlbumObject
}

"Pages of tracks"
type PagingSavedTrackObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SavedTrackObject]
}

type SavedTrackObject {
  "The date and time the track was saved.\\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\\nIf the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object."
  added_at: DateTime
  track: TrackObject
}

"Pages of episodes"
type PagingSavedEpisodeObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SavedEpisodeObject]
}

type SavedEpisodeObject {
  "The date and time the episode was saved.\\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ."
  added_at: DateTime
  episode: EpisodeObject
}

"Pages of shows"
type PagingSavedShowObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [SavedShowObject]
}

type SavedShowObject {
  "The date and time the show was saved.\\nTimestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.\\nIf the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object."
  added_at: DateTime
  show: SimplifiedShowObject
}

"Pages of artists or tracks"
type PagingArtistOrTrackObject_response {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
  items: [query_get_users_top_artists_and_tracks_allOf_1_items_items]
}

union query_get_users_top_artists_and_tracks_allOf_1_items_items @discriminator(field: "type") = ArtistObject | TrackObject

"The type of entity to return. Valid values: \`artists\` or \`tracks\`"
enum Type {
  artists
  tracks
}

"A user"
type PublicUserObject {
  "The name displayed on the user's profile. \`null\` if not available."
  display_name: String
  external_urls: ExternalUrlObject
  followers: FollowersObject
  "A link to the Web API endpoint for this user."
  href: String
  "The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user."
  id: String
  "The user's profile image."
  images: [ImageObject]
  type: user_const
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user."
  uri: String
}

"A paged set of playlists"
type PagingFeaturedPlaylistObject {
  message: String
  playlists: PagingPlaylistObject
}

"A paged set of categories"
type PagedCategories_response {
  categories: PagingObject!
}

type PagingObject {
  "A link to the Web API endpoint returning the full result of the request"
  href: String!
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int!
  "URL to the next page of items. ( \`null\` if none)"
  next: URL
  "The offset of the items returned (as set in the query or by default)"
  offset: Int!
  "URL to the previous page of items. ( \`null\` if none)"
  previous: URL
  "The total number of items available to return."
  total: Int!
}

"A category"
type CategoryObject {
  "A link to the Web API endpoint returning full details of the category."
  href: String!
  "The category icon, in various sizes."
  icons: [ImageObject]!
  "The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category."
  id: String!
  "The name of the category."
  name: String!
}

"A paged set of albums"
type PagedAlbums_response {
  albums: PagingSimplifiedAlbumObject!
}

"A paged set of artists"
type CursorPagedArtists_response {
  artists: CursorPagingSimplifiedArtistObject!
}

type CursorPagingSimplifiedArtistObject {
  "A link to the Web API endpoint returning the full result of the request."
  href: String
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( \`null\` if none)"
  next: String
  cursors: CursorObject
  "The total number of items available to return."
  total: Int
  items: [ArtistObject]
}

type CursorObject {
  "The cursor to use as key to find the next page of items."
  after: String
  "The cursor to use as key to find the previous page of items."
  before: String
}

enum Item_Type @typescript(type: "\\"artist\\"") @example(value: "\\"artist\\"") {
  artist @enum(value: "\\"artist\\"")
}

"The ID type: either \`artist\` or \`user\`."
enum queryInput_check_current_user_follows_type {
  artist
  user
}

"A set of audio features"
type ManyAudioFeatures_response {
  audio_features: [AudioFeaturesObject]!
}

"Audio features for one track"
type AudioFeaturesObject {
  "A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic."
  acousticness: Float
  "A URL to access the full audio analysis of this track. An access token is required to access this data."
  analysis_url: String
  "Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable."
  danceability: Float
  "The duration of the track in milliseconds."
  duration_ms: Int
  "Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy."
  energy: Float
  "The Spotify ID for the track."
  id: String
  "Predicts whether a track contains no vocals. \\"Ooh\\" and \\"aah\\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \\"vocal\\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0."
  instrumentalness: Float
  "The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1."
  key: Int
  "Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live."
  liveness: Float
  "The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db."
  loudness: Float
  "Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0."
  mode: Int
  "Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks."
  speechiness: Float
  "The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration."
  tempo: Float
  "An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \\"3/4\\", to \\"7/4\\"."
  time_signature: PositiveInt
  "A link to the Web API endpoint providing full details of the track."
  track_href: String
  type: audio_features_const
  "The Spotify URI for the track."
  uri: URL
  "A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry)."
  valence: Float
}

"Integers that will have a value greater than 0."
scalar PositiveInt

enum audio_features_const @typescript(type: "\\"audio_features\\"") @example(value: "\\"audio_features\\"") {
  audio_features @enum(value: "\\"audio_features\\"")
}

"Audio analysis for one track"
type AudioAnalysisObject {
  meta: query_get_audio_analysis_meta
  track: query_get_audio_analysis_track
  "The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats."
  bars: [TimeIntervalObject]
  "The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums."
  beats: [TimeIntervalObject]
  "Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness."
  sections: [SectionObject]
  "Each segment contains a roughly conisistent sound throughout its duration."
  segments: [SegmentObject]
  "A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments)."
  tatums: [TimeIntervalObject]
}

type query_get_audio_analysis_meta {
  "The version of the Analyzer used to analyze this track."
  analyzer_version: String
  "The platform used to read the track's audio data."
  platform: String
  "A detailed status code for this track. If analysis data is missing, this code may explain why."
  detailed_status: String
  "The return code of the analyzer process. 0 if successful, 1 if any errors occurred."
  status_code: Int
  "The Unix timestamp (in seconds) at which this track was analyzed."
  timestamp: Int
  "The amount of time taken to analyze this track."
  analysis_time: Float
  "The method used to read the track's audio data."
  input_process: String
}

type query_get_audio_analysis_track {
  "The exact number of audio samples analyzed from this track. See also \`analysis_sample_rate\`."
  num_samples: Int
  "Length of the track in seconds."
  duration: Float
  "This field will always contain the empty string."
  sample_md5: String
  "An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)"
  offset_seconds: Int
  "The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)"
  window_seconds: Int
  "The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify."
  analysis_sample_rate: Int
  "The number of channels used for analysis. If 1, all channels are summed together to mono before analysis."
  analysis_channels: Int
  "The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0."
  end_of_fade_in: Float
  "The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length."
  start_of_fade_out: Float
  "The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db."
  loudness: Float
  "The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration."
  tempo: Float
  "The confidence, from 0.0 to 1.0, of the reliability of the \`tempo\`."
  tempo_confidence: NonNegativeFloat
  "An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \\"3/4\\", to \\"7/4\\"."
  time_signature: PositiveInt
  "The confidence, from 0.0 to 1.0, of the reliability of the \`time_signature\`."
  time_signature_confidence: NonNegativeFloat
  "The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1."
  key: Int
  "The confidence, from 0.0 to 1.0, of the reliability of the \`key\`."
  key_confidence: NonNegativeFloat
  "Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0."
  mode: Int
  "The confidence, from 0.0 to 1.0, of the reliability of the \`mode\`."
  mode_confidence: NonNegativeFloat
  "An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track."
  codestring: String
  "A version number for the Echo Nest Musical Fingerprint format used in the codestring field."
  code_version: Float
  "An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track."
  echoprintstring: String
  "A version number for the EchoPrint format used in the echoprintstring field."
  echoprint_version: Float
  "A [Synchstring](https://github.com/echonest/synchdata) for this track."
  synchstring: String
  "A version number for the Synchstring used in the synchstring field."
  synch_version: Float
  "A Rhythmstring for this track. The format of this string is similar to the Synchstring."
  rhythmstring: String
  "A version number for the Rhythmstring used in the rhythmstring field."
  rhythm_version: Float
}

"Floats that will have a value of 0 or more."
scalar NonNegativeFloat

type TimeIntervalObject {
  "The starting point (in seconds) of the time interval."
  start: Float
  "The duration (in seconds) of the time interval."
  duration: Float
  "The confidence, from 0.0 to 1.0, of the reliability of the interval."
  confidence: NonNegativeFloat
}

type SectionObject {
  "The starting point (in seconds) of the section."
  start: Float
  "The duration (in seconds) of the section."
  duration: Float
  "The confidence, from 0.0 to 1.0, of the reliability of the section's \\"designation\\"."
  confidence: NonNegativeFloat
  "The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks."
  loudness: Float
  "The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration."
  tempo: Float
  "The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field."
  tempo_confidence: NonNegativeFloat
  "The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1."
  key: Int
  "The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field."
  key_confidence: NonNegativeFloat
  mode: query_get_audio_analysis_sections_items_mode
  "The confidence, from 0.0 to 1.0, of the reliability of the \`mode\`."
  mode_confidence: NonNegativeFloat
  "An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \\"3/4\\", to \\"7/4\\"."
  time_signature: PositiveInt
  "The confidence, from 0.0 to 1.0, of the reliability of the \`time_signature\`. Sections with time signature changes may correspond to low values in this field."
  time_signature_confidence: NonNegativeFloat
}

"Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \\"minor\\", a 1 for \\"major\\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches."
enum query_get_audio_analysis_sections_items_mode {
  NEGATIVE_1 @enum(value: "-1")
  _0 @enum(value: "0")
  _1 @enum(value: "1")
}

type SegmentObject {
  "The starting point (in seconds) of the segment."
  start: Float
  "The duration (in seconds) of the segment."
  duration: Float
  "The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field."
  confidence: NonNegativeFloat
  "The onset loudness of the segment in decibels (dB). Combined with \`loudness_max\` and \`loudness_max_time\`, these components can be used to describe the \\"attack\\" of the segment."
  loudness_start: Float
  "The peak loudness of the segment in decibels (dB). Combined with \`loudness_start\` and \`loudness_max_time\`, these components can be used to describe the \\"attack\\" of the segment."
  loudness_max: Float
  "The segment-relative offset of the segment peak loudness in seconds. Combined with \`loudness_start\` and \`loudness_max\`, these components can be used to desctibe the \\"attack\\" of the segment."
  loudness_max_time: Float
  "The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment."
  loudness_end: Float
  "Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).\\n\\nVectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.\\nAs can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.\\n![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)"
  pitches: [NonNegativeFloat]
  "Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.\\n\\nFor completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).\\n![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)\\n\\nThe actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other."
  timbre: [Float]
}

"A set of recommendations"
type RecommendationsObject {
  "An array of recommendation seed objects."
  seeds: [RecommendationSeedObject]!
  "An array of track object (simplified) ordered according to the parameters supplied."
  tracks: [TrackObject]!
}

type RecommendationSeedObject {
  "The number of tracks available after min\\\\_\\\\* and max\\\\_\\\\* filters have been applied."
  afterFilteringSize: Int
  "The number of tracks available after relinking for regional availability."
  afterRelinkingSize: Int
  "A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be \`null\`."
  href: String
  "The id used to select this seed. This will be the same as the string used in the \`seed_artists\`, \`seed_tracks\` or \`seed_genres\` parameter."
  id: String
  "The number of recommended tracks available for this seed."
  initialPoolSize: Int
  "The entity type of this seed. One of \`artist\`, \`track\` or \`genre\`."
  type: String
}

"A set of genres"
type ManyGenres_response {
  genres: [String]!
}

union get_information_about_the_users_current_playback_response @statusCodeTypeName(statusCode: 200, typeName: "CurrentlyPlayingContextObject") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = CurrentlyPlayingContextObject | Void_container

"Information about playback"
type CurrentlyPlayingContextObject {
  device: DeviceObject
  "off, track, context"
  repeat_state: String
  "If shuffle is on or off."
  shuffle_state: Boolean
  context: ContextObject
  "Unix Millisecond Timestamp when data was fetched."
  timestamp: Int
  "Progress into the currently playing track or episode. Can be \`null\`."
  progress_ms: Int
  "If something is currently playing, return \`true\`."
  is_playing: Boolean
  item: query_get_information_about_the_users_current_playback_oneOf_0_item
  "The object type of the currently playing item. Can be one of \`track\`, \`episode\`, \`ad\` or \`unknown\`."
  currently_playing_type: String
  actions: DisallowsObject
}

type DeviceObject {
  "The device ID."
  id: String
  "If this device is the currently active device."
  is_active: Boolean
  "If this device is currently in a private session."
  is_private_session: Boolean
  "Whether controlling this device is restricted. At present if this is \\"true\\" then no Web API commands will be accepted by this device."
  is_restricted: Boolean
  "A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\\\\"Loudest speaker\\\\\\") and some devices have a generic name associated with the manufacturer or device model."
  name: String
  "Device type, such as \\"computer\\", \\"smartphone\\" or \\"speaker\\"."
  type: String
  "The current volume in percent."
  volume_percent: NonNegativeInt
}

type ContextObject {
  "The object type, e.g. \\"artist\\", \\"playlist\\", \\"album\\", \\"show\\"."
  type: String
  "A link to the Web API endpoint providing full details of the track."
  href: String
  external_urls: ExternalUrlObject
  "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context."
  uri: String
}

"The currently playing track or episode. Can be \`null\`."
union query_get_information_about_the_users_current_playback_oneOf_0_item @discriminator(field: "type") = TrackObject | EpisodeObject

type DisallowsObject {
  "Interrupting playback. Optional field."
  interrupting_playback: Boolean
  "Pausing. Optional field."
  pausing: Boolean
  "Resuming. Optional field."
  resuming: Boolean
  "Seeking playback location. Optional field."
  seeking: Boolean
  "Skipping to the next context. Optional field."
  skipping_next: Boolean
  "Skipping to the previous context. Optional field."
  skipping_prev: Boolean
  "Toggling repeat context flag. Optional field."
  toggling_repeat_context: Boolean
  "Toggling shuffle flag. Optional field."
  toggling_shuffle: Boolean
  "Toggling repeat track flag. Optional field."
  toggling_repeat_track: Boolean
  "Transfering playback between devices. Optional field."
  transferring_playback: Boolean
}

type Void_container {
  Void: Void @resolveRoot
}

"Represents empty values"
scalar Void

"A set of devices"
type ManyDevices_response {
  devices: [DeviceObject]!
}

"A paged set of tracks"
type CursorPagingPlayHistoryObject {
  "A link to the Web API endpoint returning the full result of the request."
  href: String
  "The maximum number of items in the response (as set in the query or by default)."
  limit: Int
  "URL to the next page of items. ( \`null\` if none)"
  next: String
  cursors: CursorObject
  "The total number of items available to return."
  total: Int
  items: [PlayHistoryObject]
}

type PlayHistoryObject {
  track: TrackObject
  "The date and time the track was played."
  played_at: DateTime
  context: ContextObject
}

"Information about the queue"
type QueueObject {
  currently_playing: query_get_queue_currently_playing
  "The tracks or episodes in the queue. Can be empty."
  queue: [query_get_queue_queue_items]
}

"The currently playing track or episode. Can be \`null\`."
union query_get_queue_currently_playing @discriminator(field: "type") = TrackObject | EpisodeObject

union query_get_queue_queue_items @discriminator(field: "type") = TrackObject | EpisodeObject

type get_available_markets_200_response {
  markets: [String]
}

type Mutation {
  "Save one or more audiobooks to the current Spotify user's library.\\n"
  save_audiobooks_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ\`. Maximum: 50 IDs."
    ids: String!
  ): JSON @httpOperation(path: "/me/audiobooks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Remove one or more audiobooks from the Spotify user's library.\\n"
  remove_audiobooks_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=18yVqkdbdRvS24c0Ilj2ci,1HGw3J3NxZO1TP1BTtVhpZ\`. Maximum: 50 IDs."
    ids: String!
  ): JSON @httpOperation(path: "/me/audiobooks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Change a playlist's name and public/private state. (The user must, of\\ncourse, own the playlist.)\\n"
  change_playlist_details(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    input: change_playlist_details_request_Input
  ): JSON @httpOperation(path: "/playlists/{args.playlist_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "Add one or more items to a user's playlist.\\n"
  add_tracks_to_playlist(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    "The position to insert the items, a zero-based index. For example, to insert the items in the first position: \`position=0\`; to insert the items in the third position: \`position=2\`. If omitted, the items will be appended to the playlist. Items are added in the order they are listed in the query string or request body."
    position: Int
    "A comma-separated list of [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add, can be track or episode URIs. For example:<br/>\`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ\`<br/>A maximum of 100 items can be added in one request. <br/>\\n_**Note**: it is likely that passing a large number of item URIs as a query parameter will exceed the maximum length of the request URI. When adding a large number of items, it is recommended to pass them in the request body, see below._"
    uris: URL
    input: add_tracks_to_playlist_request_Input
  ): PlaylistSnapshotId_response @httpOperation(path: "/playlists/{args.playlist_id}/tracks", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"position\\":\\"position\\",\\"uris\\":\\"uris\\"}")
  "Either reorder or replace items in a playlist depending on the request's parameters.\\nTo reorder items, include \`range_start\`, \`insert_before\`, \`range_length\` and \`snapshot_id\` in the request's body.\\nTo replace items, include \`uris\` as either a query parameter or in the request's body.\\nReplacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.\\n<br/>\\n**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.\\nThese operations can't be applied together in a single request.\\n"
  reorder_or_replace_playlists_tracks(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    "A comma-separated list of [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to set, can be track or episode URIs. For example: \`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ\`<br/>A maximum of 100 items can be set in one request."
    uris: String
    input: reorder_or_replace_playlists_tracks_request_Input
  ): PlaylistSnapshotId_response @httpOperation(path: "/playlists/{args.playlist_id}/tracks", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"uris\\":\\"uris\\"}")
  "Remove one or more items from a user's playlist.\\n"
  remove_tracks_playlist(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    input: remove_tracks_playlist_request_Input
  ): PlaylistSnapshotId_response @httpOperation(path: "/playlists/{args.playlist_id}/tracks", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "Save one or more albums to the current user's 'Your Music' library.\\n"
  save_albums_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs."
    ids: String!
    input: save_albums_user_request_Input
  ): JSON @httpOperation(path: "/me/albums", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Remove one or more albums from the current user's 'Your Music' library.\\n"
  remove_albums_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs."
    ids: String!
    input: remove_albums_user_request_Input
  ): JSON @httpOperation(path: "/me/albums", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Save one or more tracks to the current user's 'Your Music' library.\\n"
  save_tracks_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M\`. Maximum: 50 IDs."
    ids: String!
    input: save_tracks_user_request_Input
  ): JSON @httpOperation(path: "/me/tracks", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Remove one or more tracks from the current user's 'Your Music' library.\\n"
  remove_tracks_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M\`. Maximum: 50 IDs."
    ids: String!
    input: remove_tracks_user_request_Input
  ): JSON @httpOperation(path: "/me/tracks", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Save one or more episodes to the current user's library.<br/>\\nThis API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).\\n"
  save_episodes_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). Maximum: 50 IDs."
    ids: String!
    input: save_episodes_user_request_Input
  ): JSON @httpOperation(path: "/me/episodes", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Remove one or more episodes from the current user's library.<br/>\\nThis API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).\\n"
  remove_episodes_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M\`. Maximum: 50 IDs."
    ids: String!
    input: remove_episodes_user_request_Input
  ): JSON @httpOperation(path: "/me/episodes", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Save one or more shows to current Spotify user's library.\\n"
  save_shows_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs."
    ids: String!
  ): JSON @httpOperation(path: "/me/shows", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"ids\\":\\"ids\\"}")
  "Delete one or more shows from current Spotify user's library.\\n"
  remove_shows_user(
    "A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the shows. Maximum: 50 IDs."
    ids: String!
    "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\\n  If a country code is specified, only content that is available in that market will be returned.<br/>\\n  If a valid user access token is specified in the request header, the country associated with\\n  the user account will take priority over this parameter.<br/>\\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/)."
    market: String
  ): JSON @httpOperation(path: "/me/shows", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"ids\\":\\"ids\\",\\"market\\":\\"market\\"}")
  "Create a playlist for a Spotify user. (The playlist will be empty until\\nyou [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)\\n"
  create_playlist(
    "The user's [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids)."
    user_id: String!
    input: create_playlist_request_Input
  ): PlaylistObject @httpOperation(path: "/users/{args.user_id}/playlists", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "Add the current user as a follower of a playlist.\\n"
  follow_playlist(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
    input: follow_playlist_request_Input
  ): JSON @httpOperation(path: "/playlists/{args.playlist_id}/followers", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "Remove the current user as a follower of a playlist.\\n"
  unfollow_playlist(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
  ): JSON @httpOperation(path: "/playlists/{args.playlist_id}/followers", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "Replace the image used to represent a specific playlist.\\n"
  upload_custom_playlist_cover(
    "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist."
    playlist_id: String!
  ): JSON @httpOperation(path: "/playlists/{args.playlist_id}/images", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "Add the current user as a follower of one or more artists or other Spotify users.\\n"
  follow_artists_users(
    type: mutationInput_follow_artists_users_type!
    "A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).\\nA maximum of 50 IDs can be sent in one request."
    ids: String!
    input: follow_artists_users_request_Input
  ): Void @httpOperation(path: "/me/following", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"type\\":\\"type\\",\\"ids\\":\\"ids\\"}")
  "Remove the current user as a follower of one or more artists or other Spotify users.\\n"
  unfollow_artists_users(
    type: mutationInput_unfollow_artists_users_type!
    "A comma-separated list of the artist or the user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q\`. A maximum of 50 IDs can be sent in one request."
    ids: String!
    input: unfollow_artists_users_request_Input
  ): JSON @httpOperation(path: "/me/following", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"type\\":\\"type\\",\\"ids\\":\\"ids\\"}")
  "Transfer playback to a new device and determine if it should start playing.\\n"
  transfer_a_users_playback(input: transfer_a_users_playback_request_Input): Void @httpOperation(path: "/me/player", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "Start a new context or resume current playback on the user's active device.\\n"
  start_a_users_playback(
    "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
    device_id: String
    input: start_a_users_playback_request_Input
  ): Void @httpOperation(path: "/me/player/play", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"device_id\\":\\"device_id\\"}")
  "Pause playback on the user's account.\\n"
  pause_a_users_playback(
    "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/pause", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"device_id\\":\\"device_id\\"}")
  "Skips to next track in the user’s queue.\\n"
  skip_users_playback_to_next_track(
    "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/next", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"device_id\\":\\"device_id\\"}")
  "Skips to previous track in the user’s queue.\\n"
  skip_users_playback_to_previous_track(
    "The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/previous", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"device_id\\":\\"device_id\\"}")
  "Seeks to the given position in the user’s currently playing track.\\n"
  seek_to_position_in_currently_playing_track(
    "The position in milliseconds to seek to. Must be a\\npositive number. Passing in a position that is greater than the length of\\nthe track will cause the player to start playing the next song."
    position_ms: Int!
    "The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/seek", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"position_ms\\":\\"position_ms\\",\\"device_id\\":\\"device_id\\"}")
  "Set the repeat mode for the user's playback. Options are repeat-track,\\nrepeat-context, and off.\\n"
  set_repeat_mode_on_users_playback(
    "**track**, **context** or **off**.<br/>\\n**track** will repeat the current track.<br/>\\n**context** will repeat the current context.<br/>\\n**off** will turn repeat off."
    state: String!
    "The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/repeat", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"state\\":\\"state\\",\\"device_id\\":\\"device_id\\"}")
  "Set the volume for the user’s current playback device.\\n"
  set_volume_for_users_playback(
    "The volume to set. Must be a value from 0 to 100 inclusive."
    volume_percent: Int!
    "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/volume", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"volume_percent\\":\\"volume_percent\\",\\"device_id\\":\\"device_id\\"}")
  "Toggle shuffle on or off for user’s playback.\\n"
  toggle_shuffle_for_users_playback(
    "**true** : Shuffle user's playback.<br/>\\n**false** : Do not shuffle user's playback."
    state: Boolean!
    "The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/shuffle", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"state\\":\\"state\\",\\"device_id\\":\\"device_id\\"}")
  "Add an item to the end of the user's current playback queue.\\n"
  add_to_queue(
    "The uri of the item to add to the queue. Must be a track or an episode uri."
    uri: URL!
    "The id of the device this command is targeting. If\\nnot supplied, the user's currently active device is the target."
    device_id: String
  ): Void @httpOperation(path: "/me/player/queue", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"uri\\":\\"uri\\",\\"device_id\\":\\"device_id\\"}")
}

input change_playlist_details_request_Input {
  "The new name for the playlist, for example \`\\"My New Playlist Title\\"\`"
  name: String
  "If \`true\` the playlist will be public, if \`false\` it will be private."
  public: Boolean
  "If \`true\`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/>\\n_**Note**: You can only set \`collaborative\` to \`true\` on non-public playlists._"
  collaborative: Boolean
  "Value for playlist description as displayed in Spotify Clients and in the Web API."
  description: String
}

"A snapshot ID for the playlist"
type PlaylistSnapshotId_response {
  snapshot_id: String
}

input add_tracks_to_playlist_request_Input {
  "A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: \`{\\"uris\\": [\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\",\\"spotify:track:1301WleyT98MSxVHPZCA6M\\", \\"spotify:episode:512ojhOuo1ktJprKbVcKyQ\\"]}\`<br/>A maximum of 100 items can be added in one request. _**Note**: if the \`uris\` parameter is present in the query string, any URIs listed here in the body will be ignored._"
  uris: [String]
  "The position to insert the items, a zero-based index. For example, to insert the items in the first position: \`position=0\` ; to insert the items in the third position: \`position=2\`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: \`{\\"uris\\": [\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\",\\"spotify:track:1301WleyT98MSxVHPZCA6M\\"], \\"position\\": 3}\`"
  position: Int
}

input reorder_or_replace_playlists_tracks_request_Input {
  uris: [String]
  "The position of the first item to be reordered."
  range_start: Int
  "The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0."
  insert_before: Int
  "The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2."
  range_length: Int
  "The playlist's snapshot ID against which you want to make the changes."
  snapshot_id: String
}

input remove_tracks_playlist_request_Input {
  "An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.\\nFor example: \`{ \\"tracks\\": [{ \\"uri\\": \\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\" },{ \\"uri\\": \\"spotify:track:1301WleyT98MSxVHPZCA6M\\" }] }\`. A maximum of 100 objects can be sent at once."
  tracks: [mutationInput_remove_tracks_playlist_input_tracks_items_Input]!
  "The playlist's snapshot ID against which you want to make the changes.\\nThe API will validate that the specified items exist and in the specified positions and make the changes,\\neven if more recent changes have been made to the playlist."
  snapshot_id: String
}

input mutationInput_remove_tracks_playlist_input_tracks_items_Input {
  "Spotify URI"
  uri: String
}

input save_albums_user_request_Input {
  "A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`[\\"4iV5W9uYEdYUVa79Axb7Rh\\", \\"1301WleyT98MSxVHPZCA6M\\"]\`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]
}

input remove_albums_user_request_Input {
  "A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`[\\"4iV5W9uYEdYUVa79Axb7Rh\\", \\"1301WleyT98MSxVHPZCA6M\\"]\`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]
}

input save_tracks_user_request_Input {
  "A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`[\\"4iV5W9uYEdYUVa79Axb7Rh\\", \\"1301WleyT98MSxVHPZCA6M\\"]\`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]
}

input remove_tracks_user_request_Input {
  "A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`[\\"4iV5W9uYEdYUVa79Axb7Rh\\", \\"1301WleyT98MSxVHPZCA6M\\"]\`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]
}

input save_episodes_user_request_Input {
  "A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]
}

input remove_episodes_user_request_Input {
  "A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]
}

input create_playlist_request_Input {
  "The name for the new playlist, for example \`\\"Your Coolest Playlist\\"\`. This name does not need to be unique; a user may have several playlists with the same name."
  name: String!
  "Defaults to \`true\`. If \`true\` the playlist will be public, if \`false\` it will be private. To be able to create private playlists, the user must have granted the \`playlist-modify-private\` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)"
  public: Boolean
  "Defaults to \`false\`. If \`true\` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set \`public\` to \`false\`. To create collaborative playlists you must have granted \`playlist-modify-private\` and \`playlist-modify-public\` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._"
  collaborative: Boolean
  "value for playlist description as displayed in Spotify Clients and in the Web API."
  description: String
}

input follow_playlist_request_Input {
  "Defaults to \`true\`. If \`true\` the playlist will be included in user's public playlists, if \`false\` it will remain private."
  public: Boolean
}

"The ID type."
enum mutationInput_follow_artists_users_type {
  artist
  user
}

input follow_artists_users_request_Input {
  "A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).\\nFor example: \`{ids:[\\"74ASZWbe4lXaubB36ztrGX\\", \\"08td7MxkoHQkXnWAYD8d6Q\\"]}\`. A maximum of 50 IDs can be sent in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]!
}

"The ID type: either \`artist\` or \`user\`."
enum mutationInput_unfollow_artists_users_type {
  artist
  user
}

input unfollow_artists_users_request_Input {
  "A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: \`{ids:[\\"74ASZWbe4lXaubB36ztrGX\\", \\"08td7MxkoHQkXnWAYD8d6Q\\"]}\`. A maximum of 50 IDs can be sent in one request. _**Note**: if the \`ids\` parameter is present in the query string, any IDs listed here in the body will be ignored._"
  ids: [String]
}

input transfer_a_users_playback_request_Input {
  "A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:\`{device_ids:[\\"74ASZWbe4lXaubB36ztrGX\\"]}\`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return \`400 Bad Request\`_"
  device_ids: [String]!
  "**true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state."
  play: Boolean
}

input start_a_users_playback_request_Input {
  "Optional. Spotify URI of the context to play.\\nValid contexts are albums, artists & playlists.\\n\`{context_uri:\\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\\"}\`"
  context_uri: String
  "Optional. A JSON array of the Spotify track URIs to play.\\nFor example: \`{\\"uris\\": [\\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\\", \\"spotify:track:1301WleyT98MSxVHPZCA6M\\"]}\`"
  uris: [String]
  "Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object\\n\\"position\\" is zero based and can’t be negative. Example: \`\\"offset\\": {\\"position\\": 5}\`\\n\\"uri\\" is a string representing the uri of the item to start at. Example: \`\\"offset\\": {\\"uri\\": \\"spotify:track:1301WleyT98MSxVHPZCA6M\\"}\`"
  offset: JSON
  "integer"
  position_ms: Int
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}"
`;
