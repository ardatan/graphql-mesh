// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Looker.4.0.oas should generate correct schema: Looker.4.0.oas-schema 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

directive @enum(value: String) on ENUM_VALUE

directive @typescript(type: String) on SCALAR | ENUM

directive @example(value: ObjMap) repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @oneOf on OBJECT | INTERFACE | INPUT_OBJECT

directive @resolveRoot on FIELD_DEFINITION

directive @statusCodeTypeName(typeName: String, statusCode: ID) repeatable on UNION

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

type Query @globalOptions(sourceName: "test", endpoint: "http://dummy") {
  "### Fetch results of multiple async queries\\n\\nReturns the results of multiple async queries in one request.\\n\\nFor Query Tasks that are not completed, the response will include the execution status of the Query Task but will not include query results.\\nQuery Tasks whose results have expired will have a status of 'expired'.\\nIf the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of 'missing'\\n"
  query_task_multi_results(
    "List of Query Task IDs"
    query_task_ids: [String]!
  ): JSON @httpOperation(path: "/query_tasks/multi_results", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"query_task_ids\\":\\"query_task_ids\\"}", queryStringOptionsByParam: "{\\"query_task_ids\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "### Get Query Task details\\n\\nUse this function to check the status of an async query task. After the status\\nreaches \\"Complete\\", you can call [query_task_results(query_task_id)](#!/Query/query_task_results) to\\nretrieve the results of the query.\\n\\nUse [create_query_task()](#!/Query/create_query_task) to create an async query task.\\n"
  query_task(
    "ID of the Query Task"
    query_task_id: String!
    "Requested fields."
    fields: String
  ): QueryTask @httpOperation(path: "/query_tasks/{args.query_task_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get Async Query Results\\n\\nReturns the results of an async query task if the query has completed.\\n\\nIf the query task is still running or waiting to run, this function returns 204 No Content.\\n\\nIf the query task ID is invalid or the cached results of the query task have expired, this function returns 404 Not Found.\\n\\nUse [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task\\nCall query_task_results only after the query task status reaches \\"Complete\\".\\n\\nYou can also use [query_task_multi_results()](#!/Query/query_task_multi_results) retrieve the\\nresults of multiple async query tasks at the same time.\\n\\n#### SQL Error Handling:\\nIf the query fails due to a SQL db error, how this is communicated depends on the result_format you requested in \`create_query_task()\`.\\n\\nFor \`json_detail\` result_format: \`query_task_results()\` will respond with HTTP status '200 OK' and db SQL error info\\nwill be in the \`errors\` property of the response object. The 'data' property will be empty.\\n\\nFor all other result formats: \`query_task_results()\` will respond with HTTP status \`400 Bad Request\` and some db SQL error info\\nwill be in the message of the 400 error response, but not as detailed as expressed in \`json_detail.errors\`.\\nThese data formats can only carry row data, and error info is not row data.\\n"
  query_task_results(
    "ID of the Query Task"
    query_task_id: String!
  ): String_container @httpOperation(path: "/query_tasks/{args.query_task_id}/results", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get a previously created query by id.\\n\\nA Looker query object includes the various parameters that define a database query that has been run or\\ncould be run in the future. These parameters include: model, view, fields, filters, pivots, etc.\\nQuery *results* are not part of the query object.\\n\\nQuery objects are unique and immutable. Query objects are created automatically in Looker as users explore data.\\nLooker does not delete them; they become part of the query history. When asked to create a query for\\nany given set of parameters, Looker will first try to find an existing query object with matching\\nparameters and will only create a new object when an appropriate object can not be found.\\n\\nThis 'get' method is used to get the details about a query for a given id. See the other methods here\\nto 'create' and 'run' queries.\\n\\nNote that some fields like 'filter_config' and 'vis_config' etc are specific to how the Looker UI\\nbuilds queries and visualizations and are not generally useful for API use. They are not required when\\ncreating new queries and can usually just be ignored.\\n\\n"
  query(
    "Id of query"
    query_id: String!
    "Requested fields."
    fields: String
  ): Query_ @httpOperation(path: "/queries/{args.query_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the query for a given query slug.\\n\\nThis returns the query for the 'slug' in a query share URL.\\n\\nThe 'slug' is a randomly chosen short string that is used as an alternative to the query's id value\\nfor use in URLs etc. This method exists as a convenience to help you use the API to 'find' queries that\\nhave been created using the Looker UI.\\n\\nYou can use the Looker explore page to build a query and then choose the 'Share' option to\\nshow the share url for the query. Share urls generally look something like 'https://looker.yourcompany/x/vwGSbfc'.\\nThe trailing 'vwGSbfc' is the share slug. You can pass that string to this api method to get details about the query.\\nThose details include the 'id' that you can use to run the query. Or, you can copy the query body\\n(perhaps with your own modification) and use that as the basis to make/run new queries.\\n\\nThis will also work with slugs from Looker explore urls like\\n'https://looker.yourcompany/explore/ecommerce/orders?qid=aogBgL6o3cKK1jN3RoZl5s'. In this case\\n'aogBgL6o3cKK1jN3RoZl5s' is the slug.\\n"
  query_for_slug(
    "Slug of query"
    slug: String!
    "Requested fields."
    fields: String
  ): Query_ @httpOperation(path: "/queries/slug/{args.slug}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Run a saved query.\\n\\nThis runs a previously saved query. You can use this on a query that was generated in the Looker UI\\nor one that you have explicitly created using the API. You can also use a query 'id' from a saved 'Look'.\\n\\nThe 'result_format' parameter specifies the desired structure and format of the response.\\n\\nSupported formats:\\n\\n| result_format | Description\\n| :-----------: | :--- |\\n| json | Plain json\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| md | Simple markdown\\n| xlsx | MS Excel spreadsheet\\n| sql | Returns the generated SQL rather than running the query\\n| png | A PNG image of the visualization of the query\\n| jpg | A JPG image of the visualization of the query\\n\\n\\n"
  run_query(
    "Id of query"
    query_id: String!
    "Format of result"
    result_format: String!
    "Row limit (may override the limit in the saved query)."
    limit: BigInt
    "Apply model-specified formatting to each result."
    apply_formatting: Boolean
    "Apply visualization options to results."
    apply_vis: Boolean
    "Get results from cache if available."
    cache: Boolean
    "Render width for image formats."
    image_width: BigInt
    "Render height for image formats."
    image_height: BigInt
    "Generate drill links (only applicable to 'json_detail' format."
    generate_drill_links: Boolean
    "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used."
    force_production: Boolean
    "Retrieve any results from cache even if the results have expired."
    cache_only: Boolean
    "Prefix to use for drill links (url encoded)."
    path_prefix: String
    "Rebuild PDTS used in query."
    rebuild_pdts: Boolean
    "Perform table calculations on query results"
    server_table_calcs: Boolean
    "Specifies the source of this call."
    source: String
  ): String @httpOperation(path: "/queries/{args.query_id}/run/{args.result_format}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"apply_formatting\\":\\"apply_formatting\\",\\"apply_vis\\":\\"apply_vis\\",\\"cache\\":\\"cache\\",\\"image_width\\":\\"image_width\\",\\"image_height\\":\\"image_height\\",\\"generate_drill_links\\":\\"generate_drill_links\\",\\"force_production\\":\\"force_production\\",\\"cache_only\\":\\"cache_only\\",\\"path_prefix\\":\\"path_prefix\\",\\"rebuild_pdts\\":\\"rebuild_pdts\\",\\"server_table_calcs\\":\\"server_table_calcs\\",\\"source\\":\\"source\\"}")
  "### Run an URL encoded query.\\n\\nThis requires the caller to encode the specifiers for the query into the URL query part using\\nLooker-specific syntax as explained below.\\n\\nGenerally, you would want to use one of the methods that takes the parameters as json in the POST body\\nfor creating and/or running queries. This method exists for cases where one really needs to encode the\\nparameters into the URL of a single 'GET' request. This matches the way that the Looker UI formats\\n'explore' URLs etc.\\n\\nThe parameters here are very similar to the json body formatting except that the filter syntax is\\ntricky. Unfortunately, this format makes this method not currently callable via the 'Try it out!' button\\nin this documentation page. But, this is callable when creating URLs manually or when using the Looker SDK.\\n\\nHere is an example inline query URL:\\n\\n\`\`\`\\nhttps://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields=category.name,inventory_items.days_in_inventory_tier,products.count&f[category.name]=socks&sorts=products.count+desc+0&limit=500&query_timezone=America/Los_Angeles\\n\`\`\`\\n\\nWhen invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:\\n\\n\`\`\`ruby\\nquery_params =\\n{\\n  fields: \\"category.name,inventory_items.days_in_inventory_tier,products.count\\",\\n  :\\"f[category.name]\\" => \\"socks\\",\\n  sorts: \\"products.count desc 0\\",\\n  limit: \\"500\\",\\n  query_timezone: \\"America/Los_Angeles\\"\\n}\\nresponse = ruby_sdk.run_url_encoded_query('thelook','inventory_items','json', query_params)\\n\\n\`\`\`\\n\\nAgain, it is generally easier to use the variant of this method that passes the full query in the POST body.\\nThis method is available for cases where other alternatives won't fit the need.\\n\\nSupported formats:\\n\\n| result_format | Description\\n| :-----------: | :--- |\\n| json | Plain json\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| md | Simple markdown\\n| xlsx | MS Excel spreadsheet\\n| sql | Returns the generated SQL rather than running the query\\n| png | A PNG image of the visualization of the query\\n| jpg | A JPG image of the visualization of the query\\n\\n\\n"
  run_url_encoded_query(
    "Model name"
    model_name: String!
    "View name"
    view_name: String!
    "Format of result"
    result_format: String!
  ): String @httpOperation(path: "/queries/models/{args.model_name}/views/{args.view_name}/run/{args.result_format}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Search Alerts\\n"
  search_alerts(
    "(Optional) Number of results to return (used with \`offset\`)."
    limit: BigInt
    "(Optional) Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "(Optional) Dimension by which to order the results(\`dashboard\` | \`owner\`)"
    group_by: String
    "(Optional) Requested fields."
    fields: String
    "(Optional) Filter on returning only enabled or disabled alerts."
    disabled: Boolean
    "(Optional) Filter on alert frequency, such as: monthly, weekly, daily, hourly, minutes"
    frequency: String
    "(Optional) Filter on whether the alert has met its condition when it last executed"
    condition_met: Boolean
    "(Optional) Filter on the start range of the last time the alerts were run. Example: 2021-01-01T01:01:01-08:00."
    last_run_start: String
    "(Optional) Filter on the start range of the last time the alerts were run. Example: 2021-01-01T01:01:01-08:00."
    last_run_end: String
    "(Admin only) (Optional) Filter for all owners."
    all_owners: Boolean
  ): [Alert] @httpOperation(path: "/alerts/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"group_by\\":\\"group_by\\",\\"fields\\":\\"fields\\",\\"disabled\\":\\"disabled\\",\\"frequency\\":\\"frequency\\",\\"condition_met\\":\\"condition_met\\",\\"last_run_start\\":\\"last_run_start\\",\\"last_run_end\\":\\"last_run_end\\",\\"all_owners\\":\\"all_owners\\"}")
  "### Get an alert by a given alert ID\\n"
  get_alert(
    "ID of an alert"
    alert_id: String!
  ): Alert @httpOperation(path: "/alerts/{args.alert_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "# Alert Notifications.\\n  The endpoint returns all the alert notifications received by the user on email in the past 7 days. It also returns whether the notifications have been read by the user.\\n\\n"
  alert_notifications(
    "(Optional) Number of results to return (used with \`offset\`)."
    limit: BigInt
    "(Optional) Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
  ): [AlertNotifications] @httpOperation(path: "/alert_notifications", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get the maximum configured size of the entire artifact store, and the currently used storage in bytes.\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  artifact_usage(
    "Comma-delimited names of fields to return in responses. Omit for all fields"
    fields: String
  ): ArtifactUsage @httpOperation(path: "/artifact/usage", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "Get all artifact namespaces and the count of artifacts in each namespace\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  artifact_namespaces(
    "Comma-delimited names of fields to return in responses. Omit for all fields"
    fields: String
    "Number of results to return. (used with offset)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit)"
    offset: BigInt
  ): [ArtifactNamespace] @httpOperation(path: "/artifact/namespaces", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "### Return the value of an artifact\\n\\nThe MIME type for the API response is set to the \`content_type\` of the value\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  artifact_value(
    "Artifact storage namespace"
    namespace: String!
    "Artifact storage key. Namespace + Key must be unique"
    key: String
  ): String @httpOperation(path: "/artifact/{args.namespace}/value", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"key\\":\\"key\\"}")
  "### Search all key/value pairs in a namespace for matching criteria.\\n\\nReturns an array of artifacts matching the specified search criteria.\\n\\nKey search patterns use case-insensitive matching and can contain \`%\` and \`_\` as SQL LIKE pattern match wildcard expressions.\\n\\nThe parameters \`min_size\` and \`max_size\` can be used individually or together.\\n\\n- \`min_size\` finds artifacts with sizes greater than or equal to its value\\n- \`max_size\` finds artifacts with sizes less than or equal to its value\\n- using both parameters restricts the minimum and maximum size range for artifacts\\n\\n**NOTE**: Artifacts are always returned in alphanumeric order by key.\\n\\nGet a **single artifact** by namespace and key with [\`artifact\`](#!/Artifact/artifact)\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  search_artifacts(
    "Artifact storage namespace"
    namespace: String!
    "Comma-delimited names of fields to return in responses. Omit for all fields"
    fields: String
    "Key pattern to match"
    key: String
    "Ids of users who created or updated the artifact (comma-delimited list)"
    user_ids: String
    "Minimum storage size of the artifact"
    min_size: BigInt
    "Maximum storage size of the artifact"
    max_size: BigInt
    "Number of results to return. (used with offset)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit)"
    offset: BigInt
  ): [Artifact] @httpOperation(path: "/artifact/{args.namespace}/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"key\\":\\"key\\",\\"user_ids\\":\\"user_ids\\",\\"min_size\\":\\"min_size\\",\\"max_size\\":\\"max_size\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "### Get one or more artifacts\\n\\nReturns an array of artifacts matching the specified key value(s).\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  artifact(
    "Artifact storage namespace"
    namespace: String!
    "Comma-delimited list of keys. Wildcards not allowed."
    key: String!
    "Comma-delimited names of fields to return in responses. Omit for all fields"
    fields: String
    "Number of results to return. (used with offset)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit)"
    offset: BigInt
  ): [Artifact] @httpOperation(path: "/artifact/{args.namespace}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"key\\":\\"key\\",\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "Get the current Cloud Storage Configuration.\\n"
  cloud_storage_configuration: BackupConfiguration @httpOperation(path: "/cloud_storage", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get an array of all existing Color Collections\\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\\n\\nGet all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\\n\\nGet all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\\n\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  all_color_collections(
    "Requested fields."
    fields: String
  ): [ColorCollection] @httpOperation(path: "/color_collections", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get an array of all existing **Custom** Color Collections\\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\\n\\nGet all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\\n\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  color_collections_custom(
    "Requested fields."
    fields: String
  ): [ColorCollection] @httpOperation(path: "/color_collections/custom", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get an array of all existing **Standard** Color Collections\\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\\n\\nGet all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\\n\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  color_collections_standard(
    "Requested fields."
    fields: String
  ): [ColorCollection] @httpOperation(path: "/color_collections/standard", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the default color collection\\n\\nUse this to retrieve the default Color Collection.\\n\\nSet the default color collection with [ColorCollection](#!/ColorCollection/set_default_color_collection)\\n"
  default_color_collection: ColorCollection @httpOperation(path: "/color_collections/default", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get a Color Collection by ID\\n\\nUse this to retrieve a specific Color Collection.\\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\\n\\nGet all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\\n\\nGet all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\\n\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  color_collection(
    "Id of Color Collection"
    collection_id: String!
    "Requested fields."
    fields: String
  ): ColorCollection @httpOperation(path: "/color_collections/{args.collection_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Search Favorite Content\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_content_favorites(
    "Match content favorite id(s)"
    id: String
    "Match user id(s).To create a list of multiple ids, use commas as separators"
    user_id: String
    "Match content metadata id(s).To create a list of multiple ids, use commas as separators"
    content_metadata_id: String
    "Match dashboard id(s).To create a list of multiple ids, use commas as separators"
    dashboard_id: String
    "Match look id(s).To create a list of multiple ids, use commas as separators"
    look_id: String
    "Match board id(s).To create a list of multiple ids, use commas as separators"
    board_id: String
    "Number of results to return. (used with offset)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Requested fields."
    fields: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
  ): [ContentFavorite] @httpOperation(path: "/content_favorite/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"id\\":\\"id\\",\\"user_id\\":\\"user_id\\",\\"content_metadata_id\\":\\"content_metadata_id\\",\\"dashboard_id\\":\\"dashboard_id\\",\\"look_id\\":\\"look_id\\",\\"board_id\\":\\"board_id\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"fields\\":\\"fields\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get favorite content by its id"
  content_favorite(
    "Id of favorite content"
    content_favorite_id: String!
    "Requested fields."
    fields: String
  ): ContentFavorite @httpOperation(path: "/content_favorite/{args.content_favorite_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all content metadata in a space.\\n"
  all_content_metadatas(
    "Parent space of content."
    parent_id: String!
    "Requested fields."
    fields: String
  ): [ContentMeta] @httpOperation(path: "/content_metadata", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"parent_id\\":\\"parent_id\\",\\"fields\\":\\"fields\\"}")
  "### Get information about an individual content metadata record.\\n"
  content_metadata(
    "Id of content metadata"
    content_metadata_id: String!
    "Requested fields."
    fields: String
  ): ContentMeta @httpOperation(path: "/content_metadata/{args.content_metadata_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### All content metadata access records for a content metadata item.\\n"
  all_content_metadata_accesses(
    "Id of content metadata"
    content_metadata_id: String!
    "Requested fields."
    fields: String
  ): [ContentMetaGroupUser] @httpOperation(path: "/content_metadata_access", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"content_metadata_id\\":\\"content_metadata_id\\",\\"fields\\":\\"fields\\"}")
  "### Search across looks, dashboards, and lookml dashboards. The terms field will be matched against the\\ntitle and description of the content and the closest results are returned. Content that has been frequently\\nviewed and those pieces of content stored in public folders will be ranked more highly in the results.\\n\\nThis endpoint does not return a full description of these content types. For more specific information\\nabout each type please refer to the individual content specific API endpoints.\\n\\nGet the **full details** of a specific dashboard (or lookml dashboard) by id with [dashboard()](#!/Dashboard/dashboard)\\nGet the **full details** of a specific look by id with [look()](#!/Look/look)\\n"
  search_content(
    "Search terms"
    terms: String!
    "Requested fields."
    fields: String
    "Content types requested (dashboard, look, lookml_dashboard)."
    types: String
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Requested page."
    page: BigInt
    "Results per page."
    per_page: BigInt
  ): [ContentSearch] @httpOperation(path: "/content/{args.terms}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"types\\":\\"types\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\"}")
  "### Get an image representing the contents of a dashboard or look.\\n\\nThe returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\\nreflect the actual data displayed in the respective visualizations.\\n"
  content_thumbnail(
    "Either dashboard or look"
    type: String!
    "ID of the dashboard or look to render"
    resource_id: String!
    "Whether or not to refresh the rendered image with the latest content"
    reload: String
    "Light or dark background. Default is \\"light\\""
    theme: String
    "A value of png produces a thumbnail in PNG format instead of SVG (default)"
    format: String
    "The width of the image if format is supplied"
    width: BigInt
    "The height of the image if format is supplied"
    height: BigInt
  ): String_container @httpOperation(path: "/content_thumbnail/{args.type}/{args.resource_id}", operationSpecificHeaders: "{\\"accept\\":\\"image/svg+xml\\"}", httpMethod: GET, queryParamArgMap: "{\\"reload\\":\\"reload\\",\\"theme\\":\\"theme\\",\\"format\\":\\"format\\",\\"width\\":\\"width\\",\\"height\\":\\"height\\"}")
  "### Validate All Content\\n\\nPerforms validation of all looks and dashboards\\nReturns a list of errors found as well as metadata about the content validation run.\\n"
  content_validation(
    "Requested fields."
    fields: String
  ): ContentValidation @httpOperation(path: "/content_validation", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Search Content Views\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_content_views(
    "Match view count"
    view_count: String
    "Match Group Id"
    group_id: String
    "Match look_id"
    look_id: String
    "Match dashboard_id"
    dashboard_id: String
    "Match content metadata id"
    content_metadata_id: String
    "Match start of week date (format is \\"YYYY-MM-DD\\")"
    start_of_week_date: String
    "True if only all time view records should be returned"
    all_time: Boolean
    "Match user id"
    user_id: String
    "Requested fields"
    fields: String
    "Number of results to return. Use with \`offset\` to manage pagination of results"
    limit: BigInt
    "Number of results to skip before returning data"
    offset: BigInt
    "Fields to sort by"
    sorts: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
  ): [ContentView] @httpOperation(path: "/content_view/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"view_count\\":\\"view_count\\",\\"group_id\\":\\"group_id\\",\\"look_id\\":\\"look_id\\",\\"dashboard_id\\":\\"dashboard_id\\",\\"content_metadata_id\\":\\"content_metadata_id\\",\\"start_of_week_date\\":\\"start_of_week_date\\",\\"all_time\\":\\"all_time\\",\\"user_id\\":\\"user_id\\",\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Search email credentials\\n\\nReturns all credentials_email records that match the given search criteria.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  search_credentials_email(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Match credentials_email id."
    id: String
    "Match credentials_email email."
    email: String
    "Find credentials_email that match given emails."
    emails: String
    "Combine given search criteria in a boolean OR expression."
    filter_or: Boolean
  ): [CredentialsEmailSearch] @httpOperation(path: "/credentials_email/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"id\\":\\"id\\",\\"email\\":\\"email\\",\\"emails\\":\\"emails\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get the current status and content of custom welcome emails\\n"
  custom_welcome_email: CustomWelcomeEmail @httpOperation(path: "/custom_welcome_email", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all active dashboards.\\n\\nReturns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.\\n\\nGet the **full details** of a specific dashboard by id with [dashboard()](#!/Dashboard/dashboard)\\n\\nFind **deleted dashboards** with [search_dashboards()](#!/Dashboard/search_dashboards)\\n"
  all_dashboards(
    "Requested fields."
    fields: String
  ): [DashboardBase] @httpOperation(path: "/dashboards", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Search Dashboards\\n\\nReturns an array of **user-defined dashboard** objects that match the specified search criteria.\\nNote, [search_dashboards()](#!/Dashboard/search_dashboards) does not return LookML dashboard objects.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n\\nThe parameters \`limit\`, and \`offset\` are recommended for fetching results in page-size chunks.\\n\\nGet a **single dashboard** by id with [dashboard()](#!/Dashboard/dashboard)\\n"
  search_dashboards(
    "Match dashboard id."
    id: String
    "Match dashboard slug."
    slug: String
    "Match Dashboard title."
    title: String
    "Match Dashboard description."
    description: String
    "Filter on a content favorite id."
    content_favorite_id: String
    "Filter on a particular space."
    folder_id: String
    "Filter on dashboards deleted status."
    deleted: String
    "Filter on dashboards created by a particular user."
    user_id: String
    "Filter on a particular value of view_count"
    view_count: String
    "Filter on a content favorite id."
    content_metadata_id: String
    "Exclude items that exist only in personal spaces other than the users"
    curate: Boolean
    "Select dashboards based on when they were last viewed"
    last_viewed_at: String
    "Requested fields."
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at]"
    sorts: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
  ): [Dashboard] @httpOperation(path: "/dashboards/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"id\\":\\"id\\",\\"slug\\":\\"slug\\",\\"title\\":\\"title\\",\\"description\\":\\"description\\",\\"content_favorite_id\\":\\"content_favorite_id\\",\\"folder_id\\":\\"folder_id\\",\\"deleted\\":\\"deleted\\",\\"user_id\\":\\"user_id\\",\\"view_count\\":\\"view_count\\",\\"content_metadata_id\\":\\"content_metadata_id\\",\\"curate\\":\\"curate\\",\\"last_viewed_at\\":\\"last_viewed_at\\",\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get information about a dashboard\\n\\nReturns the full details of the identified dashboard object\\n\\nGet a **summary list** of all active dashboards with [all_dashboards()](#!/Dashboard/all_dashboards)\\n\\nYou can **Search** for dashboards with [search_dashboards()](#!/Dashboard/search_dashboards)\\n"
  dashboard(
    "Id of dashboard"
    dashboard_id: String!
    "Requested fields."
    fields: String
  ): Dashboard @httpOperation(path: "/dashboards/{args.dashboard_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get Aggregate Table LookML for Each Query on a Dahboard\\n\\nReturns a JSON object that contains the dashboard id and Aggregate Table lookml\\n\\n"
  dashboard_aggregate_table_lookml(
    "Id of dashboard"
    dashboard_id: String!
  ): DashboardAggregateTableLookml @httpOperation(path: "/dashboards/aggregate_table_lookml/{args.dashboard_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get lookml of a UDD\\n\\nReturns a JSON object that contains the dashboard id and the full lookml\\n\\n"
  dashboard_lookml(
    "Id of dashboard"
    dashboard_id: String!
  ): DashboardLookml @httpOperation(path: "/dashboards/lookml/{args.dashboard_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Search Dashboard Elements\\n\\nReturns an **array of DashboardElement objects** that match the specified search criteria.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_dashboard_elements(
    "Select elements that refer to a given dashboard id"
    dashboard_id: String
    "Select elements that refer to a given look id"
    look_id: String
    "Match the title of element"
    title: String
    "Select soft-deleted dashboard elements"
    deleted: Boolean
    "Requested fields."
    fields: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
    "Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]"
    sorts: String
  ): [DashboardElement] @httpOperation(path: "/dashboard_elements/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"dashboard_id\\":\\"dashboard_id\\",\\"look_id\\":\\"look_id\\",\\"title\\":\\"title\\",\\"deleted\\":\\"deleted\\",\\"fields\\":\\"fields\\",\\"filter_or\\":\\"filter_or\\",\\"sorts\\":\\"sorts\\"}")
  "### Get information about the dashboard element with a specific id."
  dashboard_element(
    "Id of dashboard element"
    dashboard_element_id: String!
    "Requested fields."
    fields: String
  ): DashboardElement @httpOperation(path: "/dashboard_elements/{args.dashboard_element_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all the dashboard elements on a dashboard with a specific id."
  dashboard_dashboard_elements(
    "Id of dashboard"
    dashboard_id: String!
    "Requested fields."
    fields: String
  ): [DashboardElement] @httpOperation(path: "/dashboards/{args.dashboard_id}/dashboard_elements", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about the dashboard filters with a specific id."
  dashboard_filter(
    "Id of dashboard filters"
    dashboard_filter_id: String!
    "Requested fields."
    fields: String
  ): DashboardFilter @httpOperation(path: "/dashboard_filters/{args.dashboard_filter_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all the dashboard filters on a dashboard with a specific id."
  dashboard_dashboard_filters(
    "Id of dashboard"
    dashboard_id: String!
    "Requested fields."
    fields: String
  ): [DashboardFilter] @httpOperation(path: "/dashboards/{args.dashboard_id}/dashboard_filters", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about the dashboard elements with a specific id."
  dashboard_layout_component(
    "Id of dashboard layout component"
    dashboard_layout_component_id: String!
    "Requested fields."
    fields: String
  ): DashboardLayoutComponent @httpOperation(path: "/dashboard_layout_components/{args.dashboard_layout_component_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all the dashboard layout components for a dashboard layout with a specific id."
  dashboard_layout_dashboard_layout_components(
    "Id of dashboard layout component"
    dashboard_layout_id: String!
    "Requested fields."
    fields: String
  ): [DashboardLayoutComponent] @httpOperation(path: "/dashboard_layouts/{args.dashboard_layout_id}/dashboard_layout_components", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about the dashboard layouts with a specific id."
  dashboard_layout(
    "Id of dashboard layouts"
    dashboard_layout_id: String!
    "Requested fields."
    fields: String
  ): DashboardLayout @httpOperation(path: "/dashboard_layouts/{args.dashboard_layout_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all the dashboard elements on a dashboard with a specific id."
  dashboard_dashboard_layouts(
    "Id of dashboard"
    dashboard_id: String!
    "Requested fields."
    fields: String
  ): [DashboardLayout] @httpOperation(path: "/dashboards/{args.dashboard_id}/dashboard_layouts", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all datagroups.\\n"
  all_datagroups: [Datagroup] @httpOperation(path: "/datagroups", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about a datagroup.\\n"
  datagroup(
    "ID of datagroup."
    datagroup_id: String!
  ): Datagroup @httpOperation(path: "/datagroups/{args.datagroup_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all connections.\\n"
  all_connections(
    "Requested fields."
    fields: String
  ): [DBConnection] @httpOperation(path: "/connections", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about a connection.\\n"
  connection(
    "Name of connection"
    connection_name: String!
    "Requested fields."
    fields: String
  ): DBConnection @httpOperation(path: "/connections/{args.connection_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Discover information about derived tables\\n"
  graph_derived_tables_for_model(
    "The name of the Lookml model."
    model: String!
    "The format of the graph. Valid values are [dot]. Default is \`dot\`"
    format: String
    "Color denoting the build status of the graph. Grey = not built, green = built, yellow = building, red = error."
    color: String
  ): DependencyGraph @httpOperation(path: "/derived_table/graph/model/{args.model}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"format\\":\\"format\\",\\"color\\":\\"color\\"}")
  "### Get the subgraph representing this derived table and its dependencies.\\n"
  graph_derived_tables_for_view(
    "The derived table's view name."
    view: String!
    "The models where this derived table is defined."
    models: String
    "The model directory to look in, either \`dev\` or \`production\`."
    workspace: String
  ): DependencyGraph @httpOperation(path: "/derived_table/graph/view/{args.view}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"models\\":\\"models\\",\\"workspace\\":\\"workspace\\"}")
  "Enqueue materialization for a PDT with the given model name and view name"
  start_pdt_build(
    "The model of the PDT to start building."
    model_name: String!
    "The view name of the PDT to start building."
    view_name: String!
    "Force rebuild of required dependent PDTs, even if they are already materialized."
    force_rebuild: String
    "Force involved incremental PDTs to fully re-materialize."
    force_full_incremental: String
    "Workspace in which to materialize selected PDT ('dev' or default 'production')."
    workspace: String
    "The source of this request."
    source: String
  ): MaterializePDT @httpOperation(path: "/derived_table/{args.model_name}/{args.view_name}/start", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"force_rebuild\\":\\"force_rebuild\\",\\"force_full_incremental\\":\\"force_full_incremental\\",\\"workspace\\":\\"workspace\\",\\"source\\":\\"source\\"}")
  "Check status of PDT materialization"
  check_pdt_build(
    "The materialization id to check status for."
    materialization_id: String!
  ): MaterializePDT @httpOperation(path: "/derived_table/{args.materialization_id}/status", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Stop a PDT materialization"
  stop_pdt_build(
    "The materialization id to stop."
    materialization_id: String!
    "The source of this request."
    source: String
  ): MaterializePDT @httpOperation(path: "/derived_table/{args.materialization_id}/stop", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"source\\":\\"source\\"}")
  "### Get information about all dialects.\\n"
  all_dialect_infos(
    "Requested fields."
    fields: String
  ): [DialectInfo] @httpOperation(path: "/dialect_info", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Retrieve the value for whether or not digest emails is enabled\\n"
  digest_emails_enabled: DigestEmails @httpOperation(path: "/digest_emails_enabled", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get Egress IP Addresses\\n\\nReturns the list of public egress IP Addresses for a hosted customer's instance\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  public_egress_ip_addresses: EgressIpAddresses @httpOperation(path: "/public_egress_ip_addresses", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get all External OAuth Applications.\\n\\nThis is an OAuth Application which Looker uses to access external systems.\\n"
  all_external_oauth_applications(
    "Application name"
    name: String
    "Application Client ID"
    client_id: String
  ): [ExternalOauthApplication] @httpOperation(path: "/external_oauth_applications", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"name\\":\\"name\\",\\"client_id\\":\\"client_id\\"}")
  "### Get All Git Branches\\n\\nReturns a list of git branches in the project repository\\n"
  all_git_branches(
    "Project Id"
    project_id: String!
  ): [GitBranch] @httpOperation(path: "/projects/{args.project_id}/git_branches", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get the Current Git Branch\\n\\nReturns the git branch currently checked out in the given project repository\\n"
  git_branch(
    "Project Id"
    project_id: String!
  ): GitBranch @httpOperation(path: "/projects/{args.project_id}/git_branch", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get the specified Git Branch\\n\\nReturns the git branch specified in branch_name path param if it exists in the given project repository\\n"
  find_git_branch(
    "Project Id"
    project_id: String!
    "Branch Name"
    branch_name: String!
  ): GitBranch @httpOperation(path: "/projects/{args.project_id}/git_branch/{args.branch_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all groups.\\n"
  all_groups(
    "Requested fields."
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Optional of ids to get specific groups."
    ids: [String]
    "Id of content metadata to which groups must have access."
    content_metadata_id: String
    "Select only groups that either can/cannot be given access to content."
    can_add_to_content_metadata: Boolean
  ): [Group] @httpOperation(path: "/groups", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"ids\\":\\"ids\\",\\"content_metadata_id\\":\\"content_metadata_id\\",\\"can_add_to_content_metadata\\":\\"can_add_to_content_metadata\\"}", queryStringOptionsByParam: "{\\"ids\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "### Search groups\\n\\nReturns all group records that match the given search criteria.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_groups(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
    "Match group id."
    id: String
    "Match group name."
    name: String
    "Match group external_group_id."
    external_group_id: String
    "Match group externally_managed."
    externally_managed: Boolean
    "Match group externally_orphaned."
    externally_orphaned: Boolean
  ): [Group] @httpOperation(path: "/groups/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"filter_or\\":\\"filter_or\\",\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"external_group_id\\":\\"external_group_id\\",\\"externally_managed\\":\\"externally_managed\\",\\"externally_orphaned\\":\\"externally_orphaned\\"}")
  "### Search groups include roles\\n\\nReturns all group records that match the given search criteria, and attaches any associated roles.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_groups_with_roles(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
    "Match group id."
    id: String
    "Match group name."
    name: String
    "Match group external_group_id."
    external_group_id: String
    "Match group externally_managed."
    externally_managed: Boolean
    "Match group externally_orphaned."
    externally_orphaned: Boolean
  ): [GroupSearch] @httpOperation(path: "/groups/search/with_roles", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"filter_or\\":\\"filter_or\\",\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"external_group_id\\":\\"external_group_id\\",\\"externally_managed\\":\\"externally_managed\\",\\"externally_orphaned\\":\\"externally_orphaned\\"}")
  "### Search groups include hierarchy\\n\\nReturns all group records that match the given search criteria, and attaches\\nassociated role_ids and parent group_ids.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_groups_with_hierarchy(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
    "Match group id."
    id: String
    "Match group name."
    name: String
    "Match group external_group_id."
    external_group_id: String
    "Match group externally_managed."
    externally_managed: Boolean
    "Match group externally_orphaned."
    externally_orphaned: Boolean
  ): [GroupHierarchy] @httpOperation(path: "/groups/search/with_hierarchy", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"filter_or\\":\\"filter_or\\",\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"external_group_id\\":\\"external_group_id\\",\\"externally_managed\\":\\"externally_managed\\",\\"externally_orphaned\\":\\"externally_orphaned\\"}")
  "### Get information about a group.\\n"
  group(
    "Id of group"
    group_id: String!
    "Requested fields."
    fields: String
  ): Group @httpOperation(path: "/groups/{args.group_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all the groups in a group\\n"
  all_group_groups(
    "Id of group"
    group_id: String!
    "Requested fields."
    fields: String
  ): [Group] @httpOperation(path: "/groups/{args.group_id}/groups", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all the users directly included in a group.\\n"
  all_group_users(
    "Id of group"
    group_id: String!
    "Requested fields."
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
  ): [User] @httpOperation(path: "/groups/{args.group_id}/users", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\"}")
  "### Get information about all boards.\\n"
  all_boards(
    "Requested fields."
    fields: String
  ): [Board] @httpOperation(path: "/boards", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Search Boards\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_boards(
    "Matches board title."
    title: String
    "Matches the timestamp for when the board was created."
    created_at: String
    "The first name of the user who created this board."
    first_name: String
    "The last name of the user who created this board."
    last_name: String
    "Requested fields."
    fields: String
    "Return favorited boards when true."
    favorited: Boolean
    "Filter on boards created by a particular user."
    creator_id: String
    "The fields to sort the results by"
    sorts: String
    "The page to return. DEPRECATED. Use offset instead."
    page: BigInt
    "The number of items in the returned page. DEPRECATED. Use limit instead."
    per_page: BigInt
    "The number of items to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "The maximum number of items to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
    "Filter results based on permission, either show (default) or update"
    permission: String
  ): [Board] @httpOperation(path: "/boards/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"title\\":\\"title\\",\\"created_at\\":\\"created_at\\",\\"first_name\\":\\"first_name\\",\\"last_name\\":\\"last_name\\",\\"fields\\":\\"fields\\",\\"favorited\\":\\"favorited\\",\\"creator_id\\":\\"creator_id\\",\\"sorts\\":\\"sorts\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"offset\\":\\"offset\\",\\"limit\\":\\"limit\\",\\"filter_or\\":\\"filter_or\\",\\"permission\\":\\"permission\\"}")
  "### Get information about a board.\\n"
  board(
    "Id of board"
    board_id: String!
    "Requested fields."
    fields: String
  ): Board @httpOperation(path: "/boards/{args.board_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all board items.\\n"
  all_board_items(
    "Requested fields."
    fields: String
    "Fields to sort by."
    sorts: String
    "Filter to a specific board section"
    board_section_id: String
  ): [BoardItem] @httpOperation(path: "/board_items", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"sorts\\":\\"sorts\\",\\"board_section_id\\":\\"board_section_id\\"}")
  "### Get information about a board item.\\n"
  board_item(
    "Id of board item"
    board_item_id: String!
    "Requested fields."
    fields: String
  ): BoardItem @httpOperation(path: "/board_items/{args.board_item_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about the primary homepage's sections.\\n"
  all_primary_homepage_sections(
    "Requested fields."
    fields: String
  ): [HomepageSection] @httpOperation(path: "/primary_homepage_sections", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all board sections.\\n"
  all_board_sections(
    "Requested fields."
    fields: String
    "Fields to sort by."
    sorts: String
  ): [BoardSection] @httpOperation(path: "/board_sections", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"sorts\\":\\"sorts\\"}")
  "### Get information about a board section.\\n"
  board_section(
    "Id of board section"
    board_section_id: String!
    "Requested fields."
    fields: String
  ): BoardSection @httpOperation(path: "/board_sections/{args.board_section_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all Integration Hubs.\\n"
  all_integration_hubs(
    "Requested fields."
    fields: String
  ): [IntegrationHub] @httpOperation(path: "/integration_hubs", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about a Integration Hub.\\n"
  integration_hub(
    "Id of integration_hub"
    integration_hub_id: String!
    "Requested fields."
    fields: String
  ): IntegrationHub @httpOperation(path: "/integration_hubs/{args.integration_hub_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all Integrations.\\n"
  all_integrations(
    "Requested fields."
    fields: String
    "Filter to a specific provider"
    integration_hub_id: String
  ): [Integration] @httpOperation(path: "/integrations", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"integration_hub_id\\":\\"integration_hub_id\\"}")
  "### Get information about a Integration.\\n"
  integration(
    "Id of integration"
    integration_id: String!
    "Requested fields."
    fields: String
  ): Integration @httpOperation(path: "/integrations/{args.integration_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Set the menu item name and content for internal help resources\\n"
  internal_help_resources_content: InternalHelpResourcesContent @httpOperation(path: "/internal_help_resources_content", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get and set the options for internal help resources\\n"
  internal_help_resources: InternalHelpResources @httpOperation(path: "/internal_help_resources_enabled", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get the LDAP configuration.\\n\\nLooker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server.\\nLDAP setup requires coordination with an administrator of that directory server.\\n\\nOnly Looker administrators can read and update the LDAP configuration.\\n\\nConfiguring LDAP impacts authentication for all users. This configuration should be done carefully.\\n\\nLooker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\\n\\nLDAP is enabled or disabled for Looker using the **enabled** field.\\n\\nLooker will never return an **auth_password** field. That value can be set, but never retrieved.\\n\\nSee the [Looker LDAP docs](https://cloud.google.com/looker/docs/r/api/ldap_setup) for additional information.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  ldap_config: LDAPConfig @httpOperation(path: "/ldap_config", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get all legacy features.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  all_legacy_features: [LegacyFeature] @httpOperation(path: "/legacy_features", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about the legacy feature with a specific id.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  legacy_feature(
    "id of legacy feature"
    legacy_feature_id: String!
  ): LegacyFeature @httpOperation(path: "/legacy_features/{args.legacy_feature_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get a list of locales that Looker supports.\\n"
  all_locales: [Locale] @httpOperation(path: "/locales", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all active Looks\\n\\nReturns an array of **abbreviated Look objects** describing all the looks that the caller has access to. Soft-deleted Looks are **not** included.\\n\\nGet the **full details** of a specific look by id with [look(id)](#!/Look/look)\\n\\nFind **soft-deleted looks** with [search_looks()](#!/Look/search_looks)\\n"
  all_looks(
    "Requested fields."
    fields: String
  ): [Look] @httpOperation(path: "/looks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Search Looks\\n\\nReturns an **array of Look objects** that match the specified search criteria.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n\\nGet a **single look** by id with [look(id)](#!/Look/look)\\n"
  search_looks(
    "Match look id."
    id: String
    "Match Look title."
    title: String
    "Match Look description."
    description: String
    "Select looks with a particular content favorite id"
    content_favorite_id: String
    "Select looks in a particular folder."
    folder_id: String
    "Select looks created by a particular user."
    user_id: String
    "Select looks with particular view_count value"
    view_count: String
    "Select soft-deleted looks"
    deleted: Boolean
    "Select looks that reference a particular query by query_id"
    query_id: String
    "Exclude items that exist only in personal spaces other than the users"
    curate: Boolean
    "Select looks based on when they were last viewed"
    last_viewed_at: String
    "Requested fields."
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at, :query_id]"
    sorts: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
  ): [Look] @httpOperation(path: "/looks/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"id\\":\\"id\\",\\"title\\":\\"title\\",\\"description\\":\\"description\\",\\"content_favorite_id\\":\\"content_favorite_id\\",\\"folder_id\\":\\"folder_id\\",\\"user_id\\":\\"user_id\\",\\"view_count\\":\\"view_count\\",\\"deleted\\":\\"deleted\\",\\"query_id\\":\\"query_id\\",\\"curate\\":\\"curate\\",\\"last_viewed_at\\":\\"last_viewed_at\\",\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get a Look.\\n\\nReturns detailed information about a Look and its associated Query.\\n\\n"
  look(
    "Id of look"
    look_id: String!
    "Requested fields."
    fields: String
  ): LookWithQuery @httpOperation(path: "/looks/{args.look_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Run a Look\\n\\nRuns a given look's query and returns the results in the requested format.\\n\\nSupported formats:\\n\\n| result_format | Description\\n| :-----------: | :--- |\\n| json | Plain json\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| md | Simple markdown\\n| xlsx | MS Excel spreadsheet\\n| sql | Returns the generated SQL rather than running the query\\n| png | A PNG image of the visualization of the query\\n| jpg | A JPG image of the visualization of the query\\n\\n\\n"
  run_look(
    "Id of look"
    look_id: String!
    "Format of result"
    result_format: String!
    "Row limit (may override the limit in the saved query)."
    limit: BigInt
    "Apply model-specified formatting to each result."
    apply_formatting: Boolean
    "Apply visualization options to results."
    apply_vis: Boolean
    "Get results from cache if available."
    cache: Boolean
    "Render width for image formats."
    image_width: BigInt
    "Render height for image formats."
    image_height: BigInt
    "Generate drill links (only applicable to 'json_detail' format."
    generate_drill_links: Boolean
    "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used."
    force_production: Boolean
    "Retrieve any results from cache even if the results have expired."
    cache_only: Boolean
    "Prefix to use for drill links (url encoded)."
    path_prefix: String
    "Rebuild PDTS used in query."
    rebuild_pdts: Boolean
    "Perform table calculations on query results"
    server_table_calcs: Boolean
  ): String @httpOperation(path: "/looks/{args.look_id}/run/{args.result_format}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"apply_formatting\\":\\"apply_formatting\\",\\"apply_vis\\":\\"apply_vis\\",\\"cache\\":\\"cache\\",\\"image_width\\":\\"image_width\\",\\"image_height\\":\\"image_height\\",\\"generate_drill_links\\":\\"generate_drill_links\\",\\"force_production\\":\\"force_production\\",\\"cache_only\\":\\"cache_only\\",\\"path_prefix\\":\\"path_prefix\\",\\"rebuild_pdts\\":\\"rebuild_pdts\\",\\"server_table_calcs\\":\\"server_table_calcs\\"}")
  "### Get information about all lookml models.\\n"
  all_lookml_models(
    "Requested fields."
    fields: String
    "Number of results to return. (can be used with offset)"
    limit: BigInt
    "Number of results to skip before returning any. (Defaults to 0 if not set when limit is used)"
    offset: BigInt
  ): [LookmlModel] @httpOperation(path: "/lookml_models", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\"}")
  "### Get information about a lookml model.\\n"
  lookml_model(
    "Name of lookml model."
    lookml_model_name: String!
    "Requested fields."
    fields: String
  ): LookmlModel @httpOperation(path: "/lookml_models/{args.lookml_model_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about a lookml model explore.\\n"
  lookml_model_explore(
    "Name of lookml model."
    lookml_model_name: String!
    "Name of explore."
    explore_name: String!
    "Requested fields."
    fields: String
  ): LookmlModelExplore @httpOperation(path: "/lookml_models/{args.lookml_model_name}/explores/{args.explore_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get Merge Query\\n\\nReturns a merge query object given its id.\\n"
  merge_query(
    "Merge Query Id"
    merge_query_id: String!
    "Requested fields"
    fields: String
  ): MergeQuery @httpOperation(path: "/merge_queries/{args.merge_query_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Field name suggestions for a model and view\\n\\n\`filters\` is a string hash of values, with the key as the field name and the string value as the filter expression:\\n\\n\`\`\`ruby\\n{'users.age': '>=60'}\\n\`\`\`\\n\\nor\\n\\n\`\`\`ruby\\n{'users.age': '<30'}\\n\`\`\`\\n\\nor\\n\\n\`\`\`ruby\\n{'users.age': '=50'}\\n\`\`\`\\n"
  model_fieldname_suggestions(
    "Name of model"
    model_name: String!
    "Name of view"
    view_name: String!
    "Name of field to use for suggestions"
    field_name: String!
    "Search term pattern (evaluated as as \`%term%\`)"
    term: String
    filters: JSON
  ): ModelFieldSuggestions @httpOperation(path: "/models/{args.model_name}/views/{args.view_name}/fields/{args.field_name}/suggestions", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"term\\":\\"term\\",\\"filters\\":\\"filters\\"}")
  "### Get a single model\\n\\n"
  get_model(
    "Name of model"
    model_name: String!
  ): Model @httpOperation(path: "/models/{args.model_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### List databases available to this connection\\n\\nCertain dialects can support multiple databases per single connection.\\nIf this connection supports multiple databases, the database names will be returned in an array.\\n\\nConnections using dialects that do not support multiple databases will return an empty array.\\n\\n**Note**: [Connection Features](#!/Metadata/connection_features) can be used to determine if a connection supports\\nmultiple databases.\\n"
  connection_databases(
    "Name of connection"
    connection_name: String!
  ): [String] @httpOperation(path: "/connections/{args.connection_name}/databases", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Retrieve metadata features for this connection\\n\\nReturns a list of feature names with \`true\` (available) or \`false\` (not available)\\n\\n"
  connection_features(
    "Name of connection"
    connection_name: String!
    "Requested fields."
    fields: String
  ): ConnectionFeatures @httpOperation(path: "/connections/{args.connection_name}/features", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the list of schemas and tables for a connection\\n\\n"
  connection_schemas(
    "Name of connection"
    connection_name: String!
    "For dialects that support multiple databases, optionally identify which to use"
    database: String
    "True to use fetch from cache, false to load fresh"
    cache: Boolean
    "Requested fields."
    fields: String
  ): [Schema] @httpOperation(path: "/connections/{args.connection_name}/schemas", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"database\\":\\"database\\",\\"cache\\":\\"cache\\",\\"fields\\":\\"fields\\"}")
  "### Get the list of tables for a schema\\n\\nFor dialects that support multiple databases, optionally identify which to use. If not provided, the default\\ndatabase for the connection will be used.\\n\\nFor dialects that do **not** support multiple databases, **do not use** the database parameter\\n"
  connection_tables(
    "Name of connection"
    connection_name: String!
    "Optional. Name of database to use for the query, only if applicable"
    database: String
    "Optional. Return only tables for this schema"
    schema_name: String
    "True to fetch from cache, false to load fresh"
    cache: Boolean
    "Requested fields."
    fields: String
    "Optional. Return tables with names that contain this value"
    table_filter: String
    "Optional. Return tables up to the table_limit"
    table_limit: BigInt
  ): [SchemaTables] @httpOperation(path: "/connections/{args.connection_name}/tables", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"database\\":\\"database\\",\\"schema_name\\":\\"schema_name\\",\\"cache\\":\\"cache\\",\\"fields\\":\\"fields\\",\\"table_filter\\":\\"table_filter\\",\\"table_limit\\":\\"table_limit\\"}")
  "### Get the columns (and therefore also the tables) in a specific schema\\n\\n"
  connection_columns(
    "Name of connection"
    connection_name: String!
    "For dialects that support multiple databases, optionally identify which to use"
    database: String
    "Name of schema to use."
    schema_name: String
    "True to fetch from cache, false to load fresh"
    cache: Boolean
    "limits the tables per schema returned"
    table_limit: BigInt
    "only fetch columns for a given (comma-separated) list of tables"
    table_names: String
    "Requested fields."
    fields: String
  ): [SchemaColumns] @httpOperation(path: "/connections/{args.connection_name}/columns", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"database\\":\\"database\\",\\"schema_name\\":\\"schema_name\\",\\"cache\\":\\"cache\\",\\"table_limit\\":\\"table_limit\\",\\"table_names\\":\\"table_names\\",\\"fields\\":\\"fields\\"}")
  "### Search a connection for columns matching the specified name\\n\\n**Note**: \`column_name\` must be a valid column name. It is not a search pattern.\\n"
  connection_search_columns(
    "Name of connection"
    connection_name: String!
    "Column name to find"
    column_name: String
    "Requested fields."
    fields: String
  ): [ColumnSearch] @httpOperation(path: "/connections/{args.connection_name}/search_columns", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"column_name\\":\\"column_name\\",\\"fields\\":\\"fields\\"}")
  "### Get all mobile settings.\\n"
  mobile_settings: MobileSettings @httpOperation(path: "/mobile/settings", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Search model sets\\nReturns all model set records that match the given search criteria.\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_model_sets(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Match model set id."
    id: String
    "Match model set name."
    name: String
    "Match model sets by all_access status."
    all_access: Boolean
    "Match model sets by built_in status."
    built_in: Boolean
    "Combine given search criteria in a boolean OR expression."
    filter_or: Boolean
  ): [ModelSet] @httpOperation(path: "/model_sets/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"all_access\\":\\"all_access\\",\\"built_in\\":\\"built_in\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get information about the model set with a specific id.\\n"
  model_set(
    "Id of model set"
    model_set_id: String!
    "Requested fields."
    fields: String
  ): ModelSet @httpOperation(path: "/model_sets/{args.model_set_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all model sets.\\n"
  all_model_sets(
    "Requested fields."
    fields: String
  ): [ModelSet] @httpOperation(path: "/model_sets", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### List All OAuth Client Apps\\n\\nLists all applications registered to use OAuth2 login with this Looker instance, including\\nenabled and disabled apps.\\n\\nResults are filtered to include only the apps that the caller (current user)\\nhas permission to see.\\n"
  all_oauth_client_apps(
    "Requested fields."
    fields: String
  ): [OauthClientApp] @httpOperation(path: "/oauth_client_apps", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get Oauth Client App\\n\\nReturns the registered app client with matching client_guid.\\n"
  oauth_client_app(
    "The unique id of this application"
    client_guid: String!
    "Requested fields."
    fields: String
  ): OauthClientApp @httpOperation(path: "/oauth_client_apps/{args.client_guid}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the OIDC configuration.\\n\\nLooker can be optionally configured to authenticate users against an OpenID Connect (OIDC)\\nauthentication server. OIDC setup requires coordination with an administrator of that server.\\n\\nOnly Looker administrators can read and update the OIDC configuration.\\n\\nConfiguring OIDC impacts authentication for all users. This configuration should be done carefully.\\n\\nLooker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\\n\\nOIDC is enabled or disabled for Looker using the **enabled** field.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  oidc_config: OIDCConfig @httpOperation(path: "/oidc_config", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get a OIDC test configuration by test_slug.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  oidc_test_config(
    "Slug of test config"
    test_slug: String!
  ): OIDCConfig @httpOperation(path: "/oidc_test_configs/{args.test_slug}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get password config.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  password_config: PasswordConfig @httpOperation(path: "/password_config", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get all supported permissions.\\n"
  all_permissions: [Permission] @httpOperation(path: "/permissions", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Search permission sets\\nReturns all permission set records that match the given search criteria.\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_permission_sets(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Match permission set id."
    id: String
    "Match permission set name."
    name: String
    "Match permission sets by all_access status."
    all_access: Boolean
    "Match permission sets by built_in status."
    built_in: Boolean
    "Combine given search criteria in a boolean OR expression."
    filter_or: Boolean
  ): [PermissionSet] @httpOperation(path: "/permission_sets/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"all_access\\":\\"all_access\\",\\"built_in\\":\\"built_in\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get information about the permission set with a specific id.\\n"
  permission_set(
    "Id of permission set"
    permission_set_id: String!
    "Requested fields."
    fields: String
  ): PermissionSet @httpOperation(path: "/permission_sets/{args.permission_set_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all permission sets.\\n"
  all_permission_sets(
    "Requested fields."
    fields: String
  ): [PermissionSet] @httpOperation(path: "/permission_sets", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get All Projects\\n\\nReturns all projects visible to the current user\\n"
  all_projects(
    "Requested fields"
    fields: String
  ): [Project] @httpOperation(path: "/projects", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get A Project\\n\\nReturns the project with the given project id\\n"
  project(
    "Project Id"
    project_id: String!
    "Requested fields"
    fields: String
  ): Project @httpOperation(path: "/projects/{args.project_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get A Projects Manifest object\\n\\nReturns the project with the given project id\\n"
  manifest(
    "Project Id"
    project_id: String!
  ): Manifest @httpOperation(path: "/projects/{args.project_id}/manifest", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Git Deploy Key\\n\\nReturns the ssh public key previously created for a project's git repository.\\n"
  git_deploy_key(
    "Project Id"
    project_id: String!
  ): String @httpOperation(path: "/projects/{args.project_id}/git/deploy_key", operationSpecificHeaders: "{\\"accept\\":\\"text/plain\\"}", httpMethod: GET)
  "### Get Cached Project Validation Results\\n\\nReturns the cached results of a previous project validation calculation, if any.\\nReturns http status 204 No Content if no validation results exist.\\n\\nValidating the content of all the files in a project can be computationally intensive\\nfor large projects. Use this API to simply fetch the results of the most recent\\nproject validation rather than revalidating the entire project from scratch.\\n\\nA value of \`\\"stale\\": true\` in the response indicates that the project has changed since\\nthe cached validation results were computed. The cached validation results may no longer\\nreflect the current state of the project.\\n"
  project_validation_results(
    "Project Id"
    project_id: String!
    "Requested fields"
    fields: String
  ): project_validation_results_response @httpOperation(path: "/projects/{args.project_id}/validate", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get Project Workspace\\n\\nReturns information about the state of the project files in the currently selected workspace\\n"
  project_workspace(
    "Project Id"
    project_id: String!
    "Requested fields"
    fields: String
  ): ProjectWorkspace @httpOperation(path: "/projects/{args.project_id}/current_workspace", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get All Project Files\\n\\nReturns a list of the files in the project\\n"
  all_project_files(
    "Project Id"
    project_id: String!
    "Requested fields"
    fields: String
  ): [ProjectFile] @httpOperation(path: "/projects/{args.project_id}/files", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get Project File Info\\n\\nReturns information about a file in the project\\n"
  project_file(
    "Project Id"
    project_id: String!
    "File Id"
    file_id: String!
    "Requested fields"
    fields: String
  ): ProjectFile @httpOperation(path: "/projects/{args.project_id}/files/file", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"file_id\\":\\"file_id\\",\\"fields\\":\\"fields\\"}")
  "### Get All Git Connection Tests\\n\\ndev mode required.\\n  - Call \`update_session\` to select the 'dev' workspace.\\n\\nReturns a list of tests which can be run against a project's (or the dependency project for the provided remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test) to execute each test in sequence.\\n\\nTests are ordered by increasing specificity. Tests should be run in the order returned because later tests require functionality tested by tests earlier in the test list.\\n\\nFor example, a late-stage test for write access is meaningless if connecting to the git server (an early test) is failing.\\n"
  all_git_connection_tests(
    "Project Id"
    project_id: String!
    "(Optional: leave blank for root project) The remote url for remote dependency to test."
    remote_url: String
  ): [GitConnectionTest] @httpOperation(path: "/projects/{args.project_id}/git_connection_tests", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"remote_url\\":\\"remote_url\\"}")
  "### Run a git connection test\\n\\nRun the named test on the git service used by this project (or the dependency project for the provided remote_url) and return the result. This\\nis intended to help debug git connections when things do not work properly, to give\\nmore helpful information about why a git url is not working with Looker.\\n\\nTests should be run in the order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).\\n"
  run_git_connection_test(
    "Project Id"
    project_id: String!
    "Test Id"
    test_id: String!
    "(Optional: leave blank for root project) The remote url for remote dependency to test."
    remote_url: String
    "(Optional: leave blank for dev credentials) Whether to use git production credentials."
    use_production: String
  ): GitConnectionTestResult @httpOperation(path: "/projects/{args.project_id}/git_connection_tests/{args.test_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"remote_url\\":\\"remote_url\\",\\"use_production\\":\\"use_production\\"}")
  "### Get All LookML Tests\\n\\nReturns a list of tests which can be run to validate a project's LookML code and/or the underlying data,\\noptionally filtered by the file id.\\nCall [Run LookML Test](#!/Project/run_lookml_test) to execute tests.\\n"
  all_lookml_tests(
    "Project Id"
    project_id: String!
    "File Id"
    file_id: String
  ): [LookmlTest] @httpOperation(path: "/projects/{args.project_id}/lookml_tests", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"file_id\\":\\"file_id\\"}")
  "### Run LookML Tests\\n\\nRuns all tests in the project, optionally filtered by file, test, and/or model.\\n"
  run_lookml_test(
    "Project Id"
    project_id: String!
    "File Name"
    file_id: String
    "Test Name"
    test: String
    "Model Name"
    model: String
  ): [LookmlTestResult] @httpOperation(path: "/projects/{args.project_id}/lookml_tests/run", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"file_id\\":\\"file_id\\",\\"test\\":\\"test\\",\\"model\\":\\"model\\"}")
  "### Get information about a render task.\\n\\nReturns a render task object.\\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\\n\\n"
  render_task(
    "Id of render task"
    render_task_id: String!
    "Requested fields."
    fields: String
  ): RenderTask @httpOperation(path: "/render_tasks/{args.render_task_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the document or image produced by a completed render task.\\n\\nNote that the PDF or image result will be a binary blob in the HTTP response, as indicated by the\\nContent-Type in the response headers. This may require specialized (or at least different) handling than text\\nresponses such as JSON. You may need to tell your HTTP client that the response is binary so that it does not\\nattempt to parse the binary data as text.\\n\\nIf the render task exists but has not finished rendering the results, the response HTTP status will be\\n**202 Accepted**, the response body will be empty, and the response will have a Retry-After header indicating\\nthat the caller should repeat the request at a later time.\\n\\nReturns 404 if the render task cannot be found, if the cached result has expired, or if the caller\\ndoes not have permission to view the results.\\n\\nFor detailed information about the status of the render task, use [Render Task](#!/RenderTask/render_task).\\nPolling loops waiting for completion of a render task would be better served by polling **render_task(id)** until\\nthe task status reaches completion (or error) instead of polling **render_task_results(id)** alone.\\n"
  render_task_results(
    "Id of render task"
    render_task_id: String!
  ): String_container @httpOperation(path: "/render_tasks/{args.render_task_id}/results", operationSpecificHeaders: "{\\"accept\\":\\"image/jpeg\\"}", httpMethod: GET)
  "### Get all Repository Credentials for a project\\n\\n\`root_project_id\` is required.\\n"
  get_all_repository_credentials(
    "Root Project Id"
    root_project_id: String!
  ): [RepositoryCredential] @httpOperation(path: "/projects/{args.root_project_id}/credentials", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all roles.\\n"
  all_roles(
    "Requested fields."
    fields: String
    "Optional list of ids to get specific roles."
    ids: [String]
  ): [Role] @httpOperation(path: "/roles", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"ids\\":\\"ids\\"}", queryStringOptionsByParam: "{\\"ids\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "### Search roles\\n\\nReturns all role records that match the given search criteria.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_roles(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Match role id."
    id: String
    "Match role name."
    name: String
    "Match roles by built_in status."
    built_in: Boolean
    "Combine given search criteria in a boolean OR expression."
    filter_or: Boolean
  ): [Role] @httpOperation(path: "/roles/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"built_in\\":\\"built_in\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Search roles include user count\\n\\nReturns all role records that match the given search criteria, and attaches\\nassociated user counts.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n"
  search_roles_with_user_count(
    "Requested fields."
    fields: String
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Match role id."
    id: String
    "Match role name."
    name: String
    "Match roles by built_in status."
    built_in: Boolean
    "Combine given search criteria in a boolean OR expression."
    filter_or: Boolean
  ): [RoleSearch] @httpOperation(path: "/roles/search/with_user_count", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"built_in\\":\\"built_in\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get information about the role with a specific id.\\n"
  role(
    "id of role"
    role_id: String!
  ): Role @httpOperation(path: "/roles/{args.role_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all the groups with the role that has a specific id.\\n"
  role_groups(
    "id of role"
    role_id: String!
    "Requested fields."
    fields: String
  ): [Group] @httpOperation(path: "/roles/{args.role_id}/groups", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all the users with the role that has a specific id.\\n"
  role_users(
    "id of role"
    role_id: String!
    "Requested fields."
    fields: String
    "Get only users associated directly with the role: exclude those only associated through groups."
    direct_association_only: Boolean
  ): [User] @httpOperation(path: "/roles/{args.role_id}/users", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"direct_association_only\\":\\"direct_association_only\\"}")
  "Get information about all running queries.\\n"
  all_running_queries: [RunningQueries] @httpOperation(path: "/running_queries", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get the SAML configuration.\\n\\nLooker can be optionally configured to authenticate users against a SAML authentication server.\\nSAML setup requires coordination with an administrator of that server.\\n\\nOnly Looker administrators can read and update the SAML configuration.\\n\\nConfiguring SAML impacts authentication for all users. This configuration should be done carefully.\\n\\nLooker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\\n\\nSAML is enabled or disabled for Looker using the **enabled** field.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  saml_config: SamlConfig @httpOperation(path: "/saml_config", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get a SAML test configuration by test_slug.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  saml_test_config(
    "Slug of test config"
    test_slug: String!
  ): SamlConfig @httpOperation(path: "/saml_test_configs/{args.test_slug}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get Scheduled Plans for a Space\\n\\nReturns scheduled plans owned by the caller for a given space id.\\n"
  scheduled_plans_for_space(
    "Space Id"
    space_id: String!
    "Requested fields."
    fields: String
  ): [ScheduledPlan] @httpOperation(path: "/scheduled_plans/space/{args.space_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get Information About a Scheduled Plan\\n\\nAdmins can fetch information about other users' Scheduled Plans.\\n"
  scheduled_plan(
    "Scheduled Plan Id"
    scheduled_plan_id: String!
    "Requested fields."
    fields: String
  ): ScheduledPlan @httpOperation(path: "/scheduled_plans/{args.scheduled_plan_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### List All Scheduled Plans\\n\\nReturns all scheduled plans which belong to the caller or given user.\\n\\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\\n\\n\\nTo list all schedules for all users, pass \`all_users=true\`.\\n\\n\\nThe caller must have \`see_schedules\` permission to see other users' scheduled plans.\\n\\n\\n"
  all_scheduled_plans(
    "Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller."
    user_id: String
    "Comma delimited list of field names. If provided, only the fields specified will be included in the response"
    fields: String
    "Return scheduled plans belonging to all users (caller needs see_schedules permission)"
    all_users: Boolean
  ): [ScheduledPlan] @httpOperation(path: "/scheduled_plans", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"user_id\\":\\"user_id\\",\\"fields\\":\\"fields\\",\\"all_users\\":\\"all_users\\"}")
  "### Get Scheduled Plans for a Look\\n\\nReturns all scheduled plans for a look which belong to the caller or given user.\\n\\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\\n\\n\\nTo list all schedules for all users, pass \`all_users=true\`.\\n\\n\\nThe caller must have \`see_schedules\` permission to see other users' scheduled plans.\\n\\n\\n"
  scheduled_plans_for_look(
    "Look Id"
    look_id: String!
    "User Id (default is requesting user if not specified)"
    user_id: String
    "Requested fields."
    fields: String
    "Return scheduled plans belonging to all users for the look"
    all_users: Boolean
  ): [ScheduledPlan] @httpOperation(path: "/scheduled_plans/look/{args.look_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"user_id\\":\\"user_id\\",\\"fields\\":\\"fields\\",\\"all_users\\":\\"all_users\\"}")
  "### Get Scheduled Plans for a Dashboard\\n\\nReturns all scheduled plans for a dashboard which belong to the caller or given user.\\n\\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\\n\\n\\nTo list all schedules for all users, pass \`all_users=true\`.\\n\\n\\nThe caller must have \`see_schedules\` permission to see other users' scheduled plans.\\n\\n\\n"
  scheduled_plans_for_dashboard(
    "Dashboard Id"
    dashboard_id: String!
    "User Id (default is requesting user if not specified)"
    user_id: String
    "Return scheduled plans belonging to all users for the dashboard"
    all_users: Boolean
    "Requested fields."
    fields: String
  ): [ScheduledPlan] @httpOperation(path: "/scheduled_plans/dashboard/{args.dashboard_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"user_id\\":\\"user_id\\",\\"all_users\\":\\"all_users\\",\\"fields\\":\\"fields\\"}")
  "### Get Scheduled Plans for a LookML Dashboard\\n\\nReturns all scheduled plans for a LookML Dashboard which belong to the caller or given user.\\n\\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\\n\\n\\nTo list all schedules for all users, pass \`all_users=true\`.\\n\\n\\nThe caller must have \`see_schedules\` permission to see other users' scheduled plans.\\n\\n\\n"
  scheduled_plans_for_lookml_dashboard(
    "LookML Dashboard Id"
    lookml_dashboard_id: String!
    "User Id (default is requesting user if not specified)"
    user_id: String
    "Requested fields."
    fields: String
    "Return scheduled plans belonging to all users for the dashboard"
    all_users: Boolean
  ): [ScheduledPlan] @httpOperation(path: "/scheduled_plans/lookml_dashboard/{args.lookml_dashboard_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"user_id\\":\\"user_id\\",\\"fields\\":\\"fields\\",\\"all_users\\":\\"all_users\\"}")
  "### Get session config.\\n"
  session_config: SessionConfig @httpOperation(path: "/session_config", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get API Session\\n\\nReturns information about the current API session, such as which workspace is selected for the session.\\n"
  session: ApiSession @httpOperation(path: "/session", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get Looker Settings\\n\\nAvailable settings are:\\n - allow_user_timezones\\n - custom_welcome_email\\n - data_connector_default_enabled\\n - extension_framework_enabled\\n - extension_load_url_enabled\\n - marketplace_auto_install_enabled\\n - marketplace_enabled\\n - onboarding_enabled\\n - privatelabel_configuration\\n - timezone\\n - host_url\\n - email_domain_allowlist\\n - embed_cookieless_v2\\n\\n"
  get_setting(
    "Requested fields"
    fields: String
  ): Setting @httpOperation(path: "/setting", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get current SMTP status.\\n"
  smtp_status(
    "Include only these fields in the response"
    fields: String
  ): SmtpStatus @httpOperation(path: "/smtp_status", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "Search for folders by creator id, parent id, name, etc"
  search_folders(
    "Requested fields."
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Match Space title."
    name: String
    "Match Space id"
    id: String
    "Filter on a children of a particular folder."
    parent_id: String
    "Filter on folder created by a particular user."
    creator_id: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
    "Match is shared root"
    is_shared_root: Boolean
  ): [Folder] @httpOperation(path: "/folders/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"name\\":\\"name\\",\\"id\\":\\"id\\",\\"parent_id\\":\\"parent_id\\",\\"creator_id\\":\\"creator_id\\",\\"filter_or\\":\\"filter_or\\",\\"is_shared_root\\":\\"is_shared_root\\"}")
  "### Get information about the folder with a specific id."
  folder(
    "Id of folder"
    folder_id: String!
    "Requested fields."
    fields: String
  ): Folder @httpOperation(path: "/folders/{args.folder_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all folders.\\n\\nIn API 3.x, this will not return empty personal folders, unless they belong to the calling user,\\nor if they contain soft-deleted content.\\n\\nIn API 4.0+, all personal folders will be returned.\\n\\n"
  all_folders(
    "Requested fields."
    fields: String
  ): [Folder] @httpOperation(path: "/folders", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the children of a folder."
  folder_children(
    "Id of folder"
    folder_id: String!
    "Requested fields."
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
  ): [Folder] @httpOperation(path: "/folders/{args.folder_id}/children", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\"}")
  "### Search the children of a folder"
  folder_children_search(
    "Id of folder"
    folder_id: String!
    "Requested fields."
    fields: String
    "Fields to sort by."
    sorts: String
    "Match folder name."
    name: String
  ): [Folder] @httpOperation(path: "/folders/{args.folder_id}/children/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"sorts\\":\\"sorts\\",\\"name\\":\\"name\\"}")
  "### Get the parent of a folder"
  folder_parent(
    "Id of folder"
    folder_id: String!
    "Requested fields."
    fields: String
  ): Folder @httpOperation(path: "/folders/{args.folder_id}/parent", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the ancestors of a folder"
  folder_ancestors(
    "Id of folder"
    folder_id: String!
    "Requested fields."
    fields: String
  ): [Folder] @httpOperation(path: "/folders/{args.folder_id}/ancestors", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get all looks in a folder.\\nIn API 3.x, this will return all looks in a folder, including looks in the trash.\\nIn API 4.0+, all looks in a folder will be returned, excluding looks in the trash.\\n"
  folder_looks(
    "Id of folder"
    folder_id: String!
    "Requested fields."
    fields: String
  ): [LookWithQuery] @httpOperation(path: "/folders/{args.folder_id}/looks", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get the dashboards in a folder"
  folder_dashboards(
    "Id of folder"
    folder_id: String!
    "Requested fields."
    fields: String
  ): [Dashboard] @httpOperation(path: "/folders/{args.folder_id}/dashboards", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "Get a SQL Runner query."
  sql_query(
    "slug of query"
    slug: String!
  ): SqlQuery @httpOperation(path: "/sql_queries/{args.slug}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get Support Access Allowlist Users\\n\\nReturns the users that have been added to the Support Access Allowlist\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  get_support_access_allowlist_entries(
    "Requested fields."
    fields: String
  ): [SupportAccessAllowlistEntry] @httpOperation(path: "/support_access/allowlist", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Support Access Status\\n\\nReturns the current Support Access Status\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  support_access_status: SupportAccessStatus @httpOperation(path: "/support_access/status", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get an array of all existing themes\\n\\nGet a **single theme** by id with [Theme](#!/Theme/theme)\\n\\nThis method returns an array of all existing themes. The active time for the theme is not considered.\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  all_themes(
    "Requested fields."
    fields: String
  ): [Theme] @httpOperation(path: "/themes", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Search all themes for matching criteria.\\n\\nReturns an **array of theme objects** that match the specified search criteria.\\n\\n| Search Parameters | Description\\n| :-------------------: | :------ |\\n| \`begin_at\` only | Find themes active at or after \`begin_at\`\\n| \`end_at\` only | Find themes active at or before \`end_at\`\\n| both set | Find themes with an active inclusive period between \`begin_at\` and \`end_at\`\\n\\nNote: Range matching requires boolean AND logic.\\nWhen using \`begin_at\` and \`end_at\` together, do not use \`filter_or\`=TRUE\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n\\nGet a **single theme** by id with [Theme](#!/Theme/theme)\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  search_themes(
    "Match theme id."
    id: String
    "Match theme name."
    name: String
    "Timestamp for activation."
    begin_at: DateTime
    "Timestamp for expiration."
    end_at: DateTime
    "Number of results to return (used with \`offset\`)."
    limit: BigInt
    "Number of results to skip before returning any (used with \`limit\`)."
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Requested fields."
    fields: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
  ): [Theme] @httpOperation(path: "/themes/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"id\\":\\"id\\",\\"name\\":\\"name\\",\\"begin_at\\":\\"begin_at\\",\\"end_at\\":\\"end_at\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"fields\\":\\"fields\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get the default theme\\n\\nReturns the active theme object set as the default.\\n\\nThe **default** theme name can be set in the UI on the Admin|Theme UI page\\n\\nThe optional \`ts\` parameter can specify a different timestamp than \\"now.\\" If specified, it returns the default theme at the time indicated.\\n"
  default_theme(
    "Timestamp representing the target datetime for the active period. Defaults to 'now'"
    ts: DateTime
  ): Theme @httpOperation(path: "/themes/default", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"ts\\":\\"ts\\"}")
  "### Get active themes\\n\\nReturns an array of active themes.\\n\\nIf the \`name\` parameter is specified, it will return an array with one theme if it's active and found.\\n\\nThe optional \`ts\` parameter can specify a different timestamp than \\"now.\\"\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n\\n"
  active_themes(
    "Name of theme"
    name: String
    "Timestamp representing the target datetime for the active period. Defaults to 'now'"
    ts: DateTime
    "Requested fields."
    fields: String
  ): [Theme] @httpOperation(path: "/themes/active", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"name\\":\\"name\\",\\"ts\\":\\"ts\\",\\"fields\\":\\"fields\\"}")
  "### Get the named theme if it's active. Otherwise, return the default theme\\n\\nThe optional \`ts\` parameter can specify a different timestamp than \\"now.\\"\\nNote: API users with \`show\` ability can call this function\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  theme_or_default(
    "Name of theme"
    name: String!
    "Timestamp representing the target datetime for the active period. Defaults to 'now'"
    ts: DateTime
  ): Theme @httpOperation(path: "/themes/theme_or_default", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"name\\":\\"name\\",\\"ts\\":\\"ts\\"}")
  "### Get a theme by ID\\n\\nUse this to retrieve a specific theme, whether or not it's currently active.\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  theme(
    "Id of theme"
    theme_id: String!
    "Requested fields."
    fields: String
  ): Theme @httpOperation(path: "/themes/{args.theme_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks).\\n"
  all_timezones: [Timezone] @httpOperation(path: "/timezones", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all SSH Servers.\\n"
  all_ssh_servers(
    "Requested fields."
    fields: String
  ): [SshServer] @httpOperation(path: "/ssh_servers", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about an SSH Server.\\n"
  ssh_server(
    "Id of SSH Server"
    ssh_server_id: String!
  ): SshServer @httpOperation(path: "/ssh_server/{args.ssh_server_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Test the SSH Server\\n"
  test_ssh_server(
    "Id of SSH Server"
    ssh_server_id: String!
  ): SshServer @httpOperation(path: "/ssh_server/{args.ssh_server_id}/test", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all SSH Tunnels.\\n"
  all_ssh_tunnels(
    "Requested fields."
    fields: String
  ): [SshTunnel] @httpOperation(path: "/ssh_tunnels", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about an SSH Tunnel.\\n"
  ssh_tunnel(
    "Id of SSH Tunnel"
    ssh_tunnel_id: String!
  ): SshTunnel @httpOperation(path: "/ssh_tunnel/{args.ssh_tunnel_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Test the SSH Tunnel\\n"
  test_ssh_tunnel(
    "Id of SSH Tunnel"
    ssh_tunnel_id: String!
  ): SshTunnel @httpOperation(path: "/ssh_tunnel/{args.ssh_tunnel_id}/test", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get the SSH public key\\n\\nGet the public key created for this instance to identify itself to a remote SSH server.\\n"
  ssh_public_key: SshPublicKey @httpOperation(path: "/ssh_public_key", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get information about all user attributes.\\n"
  all_user_attributes(
    "Requested fields."
    fields: String
    "Fields to order the results by. Sortable fields include: name, label"
    sorts: String
  ): [UserAttribute] @httpOperation(path: "/user_attributes", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"sorts\\":\\"sorts\\"}")
  "### Get information about a user attribute.\\n"
  user_attribute(
    "Id of user attribute"
    user_attribute_id: String!
    "Requested fields."
    fields: String
  ): UserAttribute @httpOperation(path: "/user_attributes/{args.user_attribute_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Returns all values of a user attribute defined by user groups, in precedence order.\\n\\nA user may be a member of multiple groups which define different values for a given user attribute.\\nThe order of group-values in the response determines precedence for selecting which group-value applies\\nto a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\\n\\nResults will only include groups that the caller's user account has permission to see.\\n"
  all_user_attribute_group_values(
    "Id of user attribute"
    user_attribute_id: String!
    "Requested fields."
    fields: String
  ): [UserAttributeGroupValue] @httpOperation(path: "/user_attributes/{args.user_attribute_id}/group_values", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get currently locked-out users.\\n"
  all_user_login_lockouts(
    "Include only these fields in the response"
    fields: String
  ): [UserLoginLockout] @httpOperation(path: "/user_login_lockouts", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Search currently locked-out users.\\n"
  search_user_login_lockouts(
    "Include only these fields in the response"
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Auth type user is locked out for (email, ldap, totp, api)"
    auth_type: String
    "Match name"
    full_name: String
    "Match email"
    email: String
    "Match remote LDAP ID"
    remote_id: String
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
  ): [UserLoginLockout] @httpOperation(path: "/user_login_lockouts/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"auth_type\\":\\"auth_type\\",\\"full_name\\":\\"full_name\\",\\"email\\":\\"email\\",\\"remote_id\\":\\"remote_id\\",\\"filter_or\\":\\"filter_or\\"}")
  "### Get information about the current user; i.e. the user account currently calling the API.\\n"
  me(
    "Requested fields."
    fields: String
  ): User @httpOperation(path: "/user", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about all users.\\n"
  all_users(
    "Requested fields."
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Optional list of ids to get specific users."
    ids: [String]
  ): [User] @httpOperation(path: "/users", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"ids\\":\\"ids\\"}", queryStringOptionsByParam: "{\\"ids\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "### Search users\\n\\nReturns all<sup>*</sup> user records that match the given search criteria.\\n\\nIf multiple search params are given and \`filter_or\` is FALSE or not specified,\\nsearch params are combined in a logical AND operation.\\nOnly rows that match *all* search param criteria will be returned.\\n\\nIf \`filter_or\` is TRUE, multiple search params are combined in a logical OR operation.\\nResults will include rows that match **any** of the search criteria.\\n\\nString search params use case-insensitive matching.\\nString search params can contain \`%\` and '_' as SQL LIKE pattern match wildcard expressions.\\nexample=\\"dan%\\" will match \\"danger\\" and \\"Danzig\\" but not \\"David\\"\\nexample=\\"D_m%\\" will match \\"Damage\\" and \\"dump\\"\\n\\nInteger search params can accept a single value or a comma separated list of values. The multiple\\nvalues will be combined under a logical OR operation - results will match at least one of\\nthe given values.\\n\\nMost search params can accept \\"IS NULL\\" and \\"NOT NULL\\" as special expressions to match\\nor exclude (respectively) rows where the column is null.\\n\\nBoolean search params accept only \\"true\\" and \\"false\\" as values.\\n\\n\\n(<sup>*</sup>) Results are always filtered to the level of information the caller is permitted to view.\\nLooker admins can see all user details; normal users in an open system can see\\nnames of other users but no details; normal users in a closed system can only see\\nnames of other users who are members of the same group as the user.\\n\\n"
  search_users(
    "Include only these fields in the response"
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by."
    sorts: String
    "Match User Id."
    id: String
    "Match First name."
    first_name: String
    "Match Last name."
    last_name: String
    "Search for user accounts associated with Looker employees"
    verified_looker_employee: Boolean
    "Search for only embed users"
    embed_user: Boolean
    "Search for the user with this email address"
    email: String
    "Search for disabled user accounts"
    is_disabled: Boolean
    "Combine given search criteria in a boolean OR expression"
    filter_or: Boolean
    "Search for users who have access to this content_metadata item"
    content_metadata_id: String
    "Search for users who are direct members of this group"
    group_id: String
  ): [User] @httpOperation(path: "/users/search", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"id\\":\\"id\\",\\"first_name\\":\\"first_name\\",\\"last_name\\":\\"last_name\\",\\"verified_looker_employee\\":\\"verified_looker_employee\\",\\"embed_user\\":\\"embed_user\\",\\"email\\":\\"email\\",\\"is_disabled\\":\\"is_disabled\\",\\"filter_or\\":\\"filter_or\\",\\"content_metadata_id\\":\\"content_metadata_id\\",\\"group_id\\":\\"group_id\\"}")
  "### Search for user accounts by name\\n\\nReturns all user accounts where \`first_name\` OR \`last_name\` OR \`email\` field values match a pattern.\\nThe pattern can contain \`%\` and \`_\` wildcards as in SQL LIKE expressions.\\n\\nAny additional search params will be combined into a logical AND expression.\\n"
  search_users_names(
    "Pattern to match"
    pattern: String!
    "Include only these fields in the response"
    fields: String
    "DEPRECATED. Use limit and offset instead. Return only page N of paginated results"
    page: BigInt
    "DEPRECATED. Use limit and offset instead. Return N rows of data per page"
    per_page: BigInt
    "Number of results to return. (used with offset and takes priority over page and per_page)"
    limit: BigInt
    "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)"
    offset: BigInt
    "Fields to sort by"
    sorts: String
    "Match User Id"
    id: String
    "Match First name"
    first_name: String
    "Match Last name"
    last_name: String
    "Match Verified Looker employee"
    verified_looker_employee: Boolean
    "Match Email Address"
    email: String
    "Include or exclude disabled accounts in the results"
    is_disabled: Boolean
  ): [User] @httpOperation(path: "/users/search/names/{args.pattern}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"page\\":\\"page\\",\\"per_page\\":\\"per_page\\",\\"limit\\":\\"limit\\",\\"offset\\":\\"offset\\",\\"sorts\\":\\"sorts\\",\\"id\\":\\"id\\",\\"first_name\\":\\"first_name\\",\\"last_name\\":\\"last_name\\",\\"verified_looker_employee\\":\\"verified_looker_employee\\",\\"email\\":\\"email\\",\\"is_disabled\\":\\"is_disabled\\"}")
  "### Get information about the user with a specific id.\\n\\nIf the caller is an admin or the caller is the user being specified, then full user information will\\nbe returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains\\nThe user name and avatar url, but no sensitive information.\\n"
  user(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): User @httpOperation(path: "/users/{args.user_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about the user with a credential of given type with specific id.\\n\\nThis is used to do things like find users by their embed external_user_id. Or, find the user with\\na given api3 client_id, etc. The 'credential_type' matches the 'type' name of the various credential\\ntypes. It must be one of the values listed in the table below. The 'credential_id' is your unique Id\\nfor the user and is specific to each type of credential.\\n\\nAn example using the Ruby sdk might look like:\\n\\n\`sdk.user_for_credential('embed', 'customer-4959425')\`\\n\\nThis table shows the supported 'Credential Type' strings. The right column is for reference; it shows\\nwhich field in the given credential type is actually searched when finding a user with the supplied\\n'credential_id'.\\n\\n| Credential Types | Id Field Matched |\\n| ---------------- | ---------------- |\\n| email            | email            |\\n| google           | google_user_id   |\\n| saml             | saml_user_id     |\\n| oidc             | oidc_user_id     |\\n| ldap             | ldap_id          |\\n| api              | token            |\\n| api3             | client_id        |\\n| embed            | external_user_id |\\n| looker_openid    | email            |\\n\\n**NOTE**: The 'api' credential type was only used with the legacy Looker query API and is no longer supported. The credential type for API you are currently looking at is 'api3'.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  user_for_credential(
    "Type name of credential"
    credential_type: String!
    "Id of credential"
    credential_id: String!
    "Requested fields."
    fields: String
  ): User @httpOperation(path: "/users/credential/{args.credential_type}/{args.credential_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Email/password login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_email(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsEmail @httpOperation(path: "/users/{args.user_id}/credentials_email", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Two-factor login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_totp(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsTotp @httpOperation(path: "/users/{args.user_id}/credentials_totp", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### LDAP login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_ldap(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsLDAP @httpOperation(path: "/users/{args.user_id}/credentials_ldap", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Google authentication login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_google(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsGoogle @httpOperation(path: "/users/{args.user_id}/credentials_google", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Saml authentication login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_saml(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsSaml @httpOperation(path: "/users/{args.user_id}/credentials_saml", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### OpenID Connect (OIDC) authentication login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_oidc(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsOIDC @httpOperation(path: "/users/{args.user_id}/credentials_oidc", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### API login information for the specified user. This is for the newer API keys that can be added for any user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_api3(
    "Id of user"
    user_id: String!
    "Id of API Credential"
    credentials_api3_id: String!
    "Requested fields."
    fields: String
  ): CredentialsApi3 @httpOperation(path: "/users/{args.user_id}/credentials_api3/{args.credentials_api3_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### API login information for the specified user. This is for the newer API keys that can be added for any user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  all_user_credentials_api3s(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): [CredentialsApi3] @httpOperation(path: "/users/{args.user_id}/credentials_api3", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Embed login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_embed(
    "Id of user"
    user_id: String!
    "Id of Embedding Credential"
    credentials_embed_id: String!
    "Requested fields."
    fields: String
  ): CredentialsEmbed @httpOperation(path: "/users/{args.user_id}/credentials_embed/{args.credentials_embed_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Embed login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  all_user_credentials_embeds(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): [CredentialsEmbed] @httpOperation(path: "/users/{args.user_id}/credentials_embed", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Looker Openid login information for the specified user. Used by Looker Analysts.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_credentials_looker_openid(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsLookerOpenid @httpOperation(path: "/users/{args.user_id}/credentials_looker_openid", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Web login session for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  user_session(
    "Id of user"
    user_id: String!
    "Id of Web Login Session"
    session_id: String!
    "Requested fields."
    fields: String
  ): Session @httpOperation(path: "/users/{args.user_id}/sessions/{args.session_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Web login session for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  all_user_sessions(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): [Session] @httpOperation(path: "/users/{args.user_id}/sessions", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get information about roles of a given user\\n"
  user_roles(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    "Get only roles associated directly with the user: exclude those only associated through groups."
    direct_association_only: Boolean
  ): [Role] @httpOperation(path: "/users/{args.user_id}/roles", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"direct_association_only\\":\\"direct_association_only\\"}")
  "### Get user attribute values for a given user.\\n\\nReturns the values of specified user attributes (or all user attributes) for a certain user.\\n\\nA value for each user attribute is searched for in the following locations, in this order:\\n\\n1. in the user's account information\\n1. in groups that the user is a member of\\n1. the default value of the user attribute\\n\\nIf more than one group has a value defined for a user attribute, the group with the lowest rank wins.\\n\\nThe response will only include user attributes for which values were found. Use \`include_unset=true\` to include\\nempty records for user attributes with no value.\\n\\nThe value of all hidden user attributes will be blank.\\n"
  user_attribute_user_values(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    "Specific user attributes to request. Omit or leave blank to request all user attributes."
    user_attribute_ids: [String]
    "If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence."
    all_values: Boolean
    "If true, returns an empty record for each requested attribute that has no user, group, or default value."
    include_unset: Boolean
  ): [UserAttributeWithValue] @httpOperation(path: "/users/{args.user_id}/attribute_values", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"user_attribute_ids\\":\\"user_attribute_ids\\",\\"all_values\\":\\"all_values\\",\\"include_unset\\":\\"include_unset\\"}", queryStringOptionsByParam: "{\\"user_attribute_ids\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "### Get a vector image representing the contents of a dashboard or look.\\n\\n# DEPRECATED:  Use [content_thumbnail()](#!/Content/content_thumbnail)\\n\\nThe returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\\nreflect the actual data displayed in the respective visualizations.\\n"
  vector_thumbnail(
    "Either dashboard or look"
    type: String!
    "ID of the dashboard or look to render"
    resource_id: String!
    "Whether or not to refresh the rendered image with the latest content"
    reload: String
  ): String @httpOperation(path: "/vector_thumbnail/{args.type}/{args.resource_id}", operationSpecificHeaders: "{\\"accept\\":\\"image/svg+xml\\"}", httpMethod: GET, queryParamArgMap: "{\\"reload\\":\\"reload\\"}")
  "### Get information about all API versions supported by this Looker instance.\\n"
  versions(
    "Requested fields."
    fields: String
  ): ApiVersion @httpOperation(path: "/versions", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get an API specification for this Looker instance.\\n\\nThe specification is returned as a JSON document in Swagger 2.x format\\n"
  api_spec(
    "API version"
    api_version: String!
    "Specification name. Typically, this is \\"swagger.json\\""
    specification: String!
  ): JSON @httpOperation(path: "/api_spec/{args.api_version}/{args.specification}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### This feature is enabled only by special license.\\n### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc.\\n"
  whitelabel_configuration(
    "Requested fields."
    fields: String
  ): WhitelabelConfiguration @httpOperation(path: "/whitelabel_configuration", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Get All Workspaces\\n\\nReturns all workspaces available to the calling user.\\n"
  all_workspaces: [Workspace] @httpOperation(path: "/workspaces", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "### Get A Workspace\\n\\nReturns information about a workspace such as the git status and selected branches\\nof all projects available to the caller's user account.\\n\\nA workspace defines which versions of project files will be used to evaluate expressions\\nand operations that use model definitions - operations such as running queries or rendering dashboards.\\nEach project has its own git repository, and each project in a workspace may be configured to reference\\nparticular branch or revision within their respective repositories.\\n\\nThere are two predefined workspaces available: \\"production\\" and \\"dev\\".\\n\\nThe production workspace is shared across all Looker users. Models in the production workspace are read-only.\\nChanging files in production is accomplished by modifying files in a git branch and using Pull Requests\\nto merge the changes from the dev branch into the production branch, and then telling\\nLooker to sync with production.\\n\\nThe dev workspace is local to each Looker user. Changes made to project/model files in the dev workspace only affect\\nthat user, and only when the dev workspace is selected as the active workspace for the API session.\\n(See set_session_workspace()).\\n\\nThe dev workspace is NOT unique to an API session. Two applications accessing the Looker API using\\nthe same user account will see the same files in the dev workspace. To avoid collisions between\\nAPI clients it's best to have each client login with API credentials for a different user account.\\n\\nChanges made to files in a dev workspace are persistent across API sessions. It's a good\\nidea to commit any changes you've made to the git repository, but not strictly required. Your modified files\\nreside in a special user-specific directory on the Looker server and will still be there when you login in again\\nlater and use update_session(workspace_id: \\"dev\\") to select the dev workspace for the new API session.\\n"
  workspace(
    "Id of the workspace"
    workspace_id: String!
  ): Workspace @httpOperation(path: "/workspaces/{args.workspace_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
}

"The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type QueryTask {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Id of query"
  query_id: String
  query: Query_
  "whether or not to generate links in the query response."
  generate_links: Boolean!
  "Use production models to run query (even is user is in dev mode)."
  force_production: Boolean!
  "Prefix to use for drill links."
  path_prefix: String
  "Whether or not to use the cache"
  cache: Boolean!
  "Whether or not to run table calculations on the server"
  server_table_calcs: Boolean!
  "Retrieve any results from cache even if the results have expired."
  cache_only: Boolean!
  "cache key used to cache query."
  cache_key: String
  "Status of query task."
  status: String
  "Source of query task."
  source: String
  "Runtime of prior queries."
  runtime: Float
  "Rebuild PDTS used in query."
  rebuild_pdts: Boolean!
  "Source of the results of the query."
  result_source: String
  "Id of look associated with query."
  look_id: String
  "Id of dashboard associated with query."
  dashboard_id: String
  "The data format of the query results."
  result_format: String
}

type Query_ {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Model"
  model: String!
  "Explore Name"
  view: String!
  "Fields"
  fields: [String]
  "Pivots"
  pivots: [String]
  "Fill Fields"
  fill_fields: [String]
  "Filters"
  filters: JSON
  "Filter Expression"
  filter_expression: String
  "Sorting for the query results. Use the format \`[\\"view.field\\", ...]\` to sort on fields in ascending order. Use the format \`[\\"view.field desc\\", ...]\` to sort on fields in descending order. Use \`[\\"__UNSORTED__\\"]\` (2 underscores before and after) to disable sorting entirely. Empty sorts \`[]\` will trigger a default sort."
  sorts: [String]
  "Limit"
  limit: String
  "Column Limit"
  column_limit: String
  "Total"
  total: Boolean
  "Raw Total"
  row_total: String
  "Fields on which to run subtotals"
  subtotals: [String]
  "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \\"type\\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties."
  vis_config: JSON
  "The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over \\"filters\\". When creating a query or modifying an existing query, \\"filter_config\\" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque."
  filter_config: JSON
  "Visible UI Sections"
  visible_ui_sections: String
  "Slug"
  slug: String
  "Dynamic Fields"
  dynamic_fields: String
  "Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated."
  client_id: String
  "Share Url"
  share_url: String
  "Expanded Share Url"
  expanded_share_url: String
  "Expanded Url"
  url: String
  "Query Timezone"
  query_timezone: String
  "Has Table Calculations"
  has_table_calculations: Boolean!
}

type String_container {
  String: String @resolveRoot
}

"The \`BigInt\` scalar type represents non-fractional signed whole numeric values."
scalar BigInt

type Alert {
  "Filters coming from the dashboard that are applied. Example \`[{ \\"filter_title\\": \\"Name\\", \\"field_name\\": \\"distribution_centers.name\\", \\"filter_value\\": \\"Los Angeles CA\\" }]\`"
  applied_dashboard_filters: [AlertAppliedDashboardFilter]
  comparison_type: mutation_update_alert_field_comparison_type!
  "Vixie-Style crontab specification when to run. At minumum, it has to be longer than 15 minute intervals"
  cron: String!
  "Domain for the custom url selected by the alert creator from the admin defined domain allowlist"
  custom_url_base: String
  "Parameters and path for the custom url defined by the alert creator"
  custom_url_params: String
  "Label for the custom url defined by the alert creator"
  custom_url_label: String
  "Boolean to determine if the custom url should be used"
  show_custom_url: Boolean!
  "An optional, user-defined title for the alert"
  custom_title: String
  "ID of the dashboard element associated with the alert. Refer to [dashboard_element()](#!/Dashboard/DashboardElement)"
  dashboard_element_id: String
  "An optional description for the alert. This supplements the title"
  description: String
  "Array of destinations to send alerts to. Must be the same type of destination. Example \`[{ \\"destination_type\\": \\"EMAIL\\", \\"email_address\\": \\"test@test.com\\" }]\`"
  destinations: [AlertDestination]
  field: AlertField!
  "Whether or not the user follows this alert."
  followed: Boolean!
  "Whether or not the alert is followable"
  followable: Boolean!
  "ID of the alert"
  id: String!
  "Whether or not the alert is disabled"
  is_disabled: Boolean!
  "Reason for disabling alert"
  disabled_reason: String
  "Whether or not the alert is public"
  is_public: Boolean!
  investigative_content_type: dashboard_const
  "The ID of the investigative content. For dashboards, this will be the dashboard ID"
  investigative_content_id: String
  "The title of the investigative content."
  investigative_content_title: String
  "ID of the LookML dashboard associated with the alert"
  lookml_dashboard_id: String
  "ID of the LookML dashboard element associated with the alert"
  lookml_link_id: String
  "User id of alert owner"
  owner_id: String!
  "Alert owner's display name"
  owner_display_name: String
  "Value of the alert threshold"
  threshold: Float!
  time_series_condition_state: AlertConditionState
}

type AlertAppliedDashboardFilter {
  "Field Title. Refer to \`DashboardFilter.title\` in [DashboardFilter](#!/types/DashboardFilter). Example \`Name\`"
  filter_title: String
  "Field Name. Refer to \`DashboardFilter.dimension\` in [DashboardFilter](#!/types/DashboardFilter). Example \`distribution_centers.name\`"
  field_name: String!
  "Field Value. [Filter Expressions](https://cloud.google.com/looker/docs/reference/filter-expressions). Example \`Los Angeles CA\`"
  filter_value: String!
  "Human Readable Filter Description. This may be null or auto-generated. Example \`is Los Angeles CA\`"
  filter_description: String
}

"This property informs the check what kind of comparison we are performing. Only certain condition types are valid for time series alerts. For details, refer to [Setting Alert Conditions](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts#setting_alert_conditions) Valid values are: \\"EQUAL_TO\\", \\"GREATER_THAN\\", \\"GREATER_THAN_OR_EQUAL_TO\\", \\"LESS_THAN\\", \\"LESS_THAN_OR_EQUAL_TO\\", \\"INCREASES_BY\\", \\"DECREASES_BY\\", \\"CHANGES_BY\\"."
enum mutation_update_alert_field_comparison_type {
  EQUAL_TO
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  INCREASES_BY
  DECREASES_BY
  CHANGES_BY
}

type AlertDestination {
  destination_type: mutation_update_alert_field_destinations_items_destination_type!
  "Email address for the 'email' type"
  email_address: String
  "Action hub integration id for the 'action_hub' type. [Integration](#!/types/Integration)"
  action_hub_integration_id: String
  "Action hub form params json for the 'action_hub' type [IntegrationParam](#!/types/IntegrationParam)"
  action_hub_form_params_json: String
}

"Type of destination that the alert will be sent to Valid values are: \\"EMAIL\\", \\"ACTION_HUB\\"."
enum mutation_update_alert_field_destinations_items_destination_type {
  EMAIL
  ACTION_HUB
}

type AlertField {
  "Field's title. Usually auto-generated to reflect field name and its filters"
  title: String!
  "Field's name. Has the format \`<view>.<field>\` Refer to [docs](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts) for more details"
  name: String!
  "(Optional / Advance Use) List of fields filter. This further restricts the alert to certain dashboard element's field values. This can be used on top of dashboard filters \`applied_dashboard_filters\`. To keep thing simple, it's suggested to just use dashboard filters. Example: \`{ 'title': '12 Number on Hand', 'name': 'inventory_items.number_on_hand', 'filter': [{ 'field_name': 'inventory_items.id', 'field_value': 12, 'filter_value': null }] }\`"
  filter: [AlertFieldFilter]
}

type AlertFieldFilter {
  "Field Name. Has format \`<view>.<field>\`"
  field_name: String!
  "Field Value. Depends on the type of field - numeric or string. For [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type, it's a list of floats. Example \`[1.0, 56.0]\`"
  field_value: JSON!
  "Filter Value. Usually null except for [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type. It'll be a string of lat,long ie \`'1.0,56.0'\`"
  filter_value: String
}

enum dashboard_const @typescript(type: "\\"dashboard\\"") @example(value: "\\"dashboard\\"") {
  dashboard @enum(value: "\\"dashboard\\"")
}

type AlertConditionState {
  "(Write-Only) The second latest time string the alert has seen."
  previous_time_series_id: String
  "(Write-Only) Latest time string the alert has seen."
  latest_time_series_id: String
}

type AlertNotifications {
  "ID of the notification"
  notification_id: String!
  "ID of the alert"
  alert_condition_id: String!
  "ID of the user"
  user_id: String!
  "Read state of the notification"
  is_read: Boolean!
  "The value of the field on which the alert condition is set"
  field_value: Float
  "The value of the threshold which triggers the alert notification"
  threshold_value: Float
  "The time at which the alert query ran"
  ran_at: String!
  alert: MobilePayload
}

type MobilePayload {
  "Title of the alert"
  title: String
  "ID of the alert"
  alert_id: String!
  "ID of the investigative content"
  investigative_content_id: String
  "Name of the dashboard on which the alert has been set"
  dashboard_name: String
  "ID of the dashboard on which the alert has been set"
  dashboard_id: String!
  "Slug of the query which runs the alert queries."
  query_slug: String!
}

type ArtifactUsage {
  "The configured maximum size in bytes of the entire artifact store."
  max_size: BigInt!
  "The currently used storage size in bytes of the entire artifact store."
  usage: BigInt!
}

type ArtifactNamespace {
  "Artifact storage namespace."
  namespace: String!
  "The number of artifacts stored in the namespace."
  count: BigInt!
}

type Artifact {
  "Key of value to store. Namespace + Key must be unique."
  key: String!
  "Value to store."
  value: String!
  "MIME type of content. This can only be used to override content that is detected as text/plain. Needed to set application/json content types, which are analyzed as plain text."
  content_type: String
  "Version number of the stored value. The version must be provided for any updates to an existing artifact."
  version: BigInt!
  "Artifact storage namespace."
  namespace: String!
  "Timestamp when this artifact was created."
  created_at: DateTime!
  "Timestamp when this artifact was updated."
  updated_at: DateTime!
  "Size (in bytes) of the stored value."
  value_size: BigInt!
  "User id of the artifact creator."
  created_by_userid: String!
  "User id of the artifact updater."
  updated_by_userid: String!
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

type BackupConfiguration {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Type of backup: looker-s3 or custom-s3"
  type: String
  "Name of bucket for custom-s3 backups"
  custom_s3_bucket: String
  "Name of region where the bucket is located"
  custom_s3_bucket_region: String
  "(Write-Only) AWS S3 key used for custom-s3 backups"
  custom_s3_key: String
  "(Write-Only) AWS S3 secret used for custom-s3 backups"
  custom_s3_secret: String
  "Link to get this item"
  url: UriReference
}

"Represents uri-reference values"
scalar UriReference

type ColorCollection {
  "Unique Id"
  id: String!
  "Label of color collection"
  label: String!
  "Array of categorical palette definitions"
  categoricalPalettes: [DiscretePalette]!
  "Array of discrete palette definitions"
  sequentialPalettes: [ContinuousPalette]!
  "Array of diverging palette definitions"
  divergingPalettes: [ContinuousPalette]!
}

type DiscretePalette {
  "Unique identity string"
  id: String!
  "Label for palette"
  label: String
  "Type of palette"
  type: String!
  "Array of colors in the palette"
  colors: [String]!
}

type ContinuousPalette {
  "Unique identity string"
  id: String!
  "Label for palette"
  label: String
  "Type of palette"
  type: String!
  "Array of ColorStops in the palette"
  stops: [ColorStop]!
}

type ColorStop {
  "CSS color string"
  color: String!
  "Offset in continuous palette (0 to 100)"
  offset: BigInt!
}

type ContentFavorite {
  "Unique Id"
  id: String!
  "User Id which owns this ContentFavorite"
  user_id: String!
  "Content Metadata Id associated with this ContentFavorite"
  content_metadata_id: String!
  "Id of a look"
  look_id: String
  "Id of a dashboard"
  dashboard_id: String
  look: LookBasic
  dashboard: DashboardBase
  "Id of a board"
  board_id: String
}

type LookBasic {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Id of content metadata"
  content_metadata_id: String
  "Unique Id"
  id: String!
  "Look Title"
  title: String
  "User Id"
  user_id: String
}

type DashboardBase {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Content Favorite Id"
  content_favorite_id: String
  "Id of content metadata"
  content_metadata_id: String
  "Description"
  description: String
  "Is Hidden"
  hidden: Boolean!
  "Unique Id"
  id: String!
  model: LookModel
  "Timezone in which the Dashboard will run by default."
  query_timezone: String
  "Is Read-only"
  readonly: Boolean!
  "Refresh Interval, as a time duration phrase like \\"2 hours 30 minutes\\". A number with no time units will be interpreted as whole seconds."
  refresh_interval: String
  "Refresh Interval in milliseconds"
  refresh_interval_to_i: BigInt
  folder: FolderBase
  "Dashboard Title"
  title: String
  "Id of User"
  user_id: String
  "Content Metadata Slug"
  slug: String
  "The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)"
  preferred_viewer: String
}

type LookModel {
  "Model Id"
  id: String!
  "Model Label"
  label: String
}

type FolderBase {
  "Unique Name"
  name: String!
  "Id of Parent. If the parent id is null, this is a root-level entry"
  parent_id: String
  "Unique Id"
  id: String!
  "Id of content metadata"
  content_metadata_id: String
  "Time the folder was created"
  created_at: DateTime
  "User Id of Creator"
  creator_id: String
  "Children Count"
  child_count: BigInt
  "Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login"
  external_id: String
  "Folder is an embed folder"
  is_embed: Boolean!
  "Folder is the root embed shared folder"
  is_embed_shared_root: Boolean!
  "Folder is the root embed users folder"
  is_embed_users_root: Boolean!
  "Folder is a user's personal folder"
  is_personal: Boolean!
  "Folder is descendant of a user's personal folder"
  is_personal_descendant: Boolean!
  "Folder is the root shared folder"
  is_shared_root: Boolean!
  "Folder is the root user folder"
  is_users_root: Boolean!
  "Operations the current user is able to perform on this object"
  can: JSON!
}

type ContentMeta {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Name or title of underlying content"
  name: String
  "Id of Parent Content"
  parent_id: String
  "Id of associated dashboard when content_type is \\"dashboard\\""
  dashboard_id: String
  "Id of associated look when content_type is \\"look\\""
  look_id: String
  "Id of associated folder when content_type is \\"space\\""
  folder_id: String
  "Content Type (\\"dashboard\\", \\"look\\", or \\"folder\\")"
  content_type: String
  "Whether content inherits its access levels from parent"
  inherits: Boolean!
  "Id of Inherited Content"
  inheriting_id: String
  "Content Slug"
  slug: String
}

type ContentMetaGroupUser {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Id of associated Content Metadata"
  content_metadata_id: String
  permission_type: mutation_create_content_metadata_access_permission_type
  "ID of associated group"
  group_id: String
  "ID of associated user"
  user_id: String
}

"Type of permission: \\"view\\" or \\"edit\\" Valid values are: \\"view\\", \\"edit\\"."
enum mutation_create_content_metadata_access_permission_type {
  view
  edit
}

type ContentSearch {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Primary id associated with the content"
  content_id: String
  "Type of content"
  type: String
  "Content title"
  title: String
  "Content description"
  description: String
  "Id of the folder where the content is saved"
  folder_id: String
  "Name of the folder where the content is saved"
  folder_name: String
  "Number of times the content has been viewed"
  view_count: BigInt
  "Preferred way of viewing the content (only applies to dashboards)"
  preferred_viewer: String
}

type ContentValidation {
  "A list of content errors"
  content_with_errors: [ContentValidatorError]
  "Duration of content validation in seconds"
  computation_time: Float
  "The number of looks validated"
  total_looks_validated: BigInt
  "The number of dashboard elements validated"
  total_dashboard_elements_validated: BigInt
  "The number of dashboard filters validated"
  total_dashboard_filters_validated: BigInt
  "The number of scheduled plans validated"
  total_scheduled_plans_validated: BigInt
  "The number of alerts validated"
  total_alerts_validated: BigInt
  "The number of explores used across all content validated"
  total_explores_validated: BigInt
}

type ContentValidatorError {
  look: ContentValidationLook
  dashboard: ContentValidationDashboard
  dashboard_element: ContentValidationDashboardElement
  dashboard_filter: ContentValidationDashboardFilter
  scheduled_plan: ContentValidationScheduledPlan
  alert: ContentValidationAlert
  lookml_dashboard: ContentValidationLookMLDashboard
  lookml_dashboard_element: ContentValidationLookMLDashboardElement
  "A list of errors found for this piece of content"
  errors: [ContentValidationError]
  "An id unique to this piece of content for this validation run"
  id: String!
}

type ContentValidationLook {
  "Unique Id"
  id: String!
  "Look Title"
  title: String
  "Short Url"
  short_url: String
  folder: ContentValidationFolder
}

type ContentValidationFolder {
  "Unique Name"
  name: String!
  "Unique Id"
  id: String!
}

type ContentValidationDashboard {
  "Description"
  description: String
  "Unique Id"
  id: String!
  folder: ContentValidationFolder
  "Dashboard Title"
  title: String
  "Relative URL of the dashboard"
  url: String
}

type ContentValidationDashboardElement {
  "Text tile body text"
  body_text: String
  "Id of Dashboard"
  dashboard_id: String
  "Unique Id"
  id: String!
  "Id Of Look"
  look_id: String
  "Note Display"
  note_display: String
  "Note State"
  note_state: String
  "Note Text"
  note_text: String
  "Note Text as Html"
  note_text_as_html: String
  "Id Of Query"
  query_id: String
  "Text tile subtitle text"
  subtitle_text: String
  "Title of dashboard element"
  title: String
  "Whether title is hidden"
  title_hidden: Boolean!
  "Text tile title"
  title_text: String
  "Type"
  type: String
  "JSON with all the properties required for rich editor and buttons elements"
  rich_content_json: String
  "Extension ID"
  extension_id: String
}

type ContentValidationDashboardFilter {
  "Unique Id"
  id: String!
  "Id of Dashboard"
  dashboard_id: String
  "Name of filter"
  name: String
  "Title of filter"
  title: String
  "Type of filter: one of date, number, string, or field"
  type: String
  "Default value of filter"
  default_value: String
  "Model of filter (required if type = field)"
  model: String
  "Explore of filter (required if type = field)"
  explore: String
  "Dimension of filter (required if type = field)"
  dimension: String
}

type ContentValidationScheduledPlan {
  "Name of this scheduled plan"
  name: String
  "Id of a look"
  look_id: String
  "Unique Id"
  id: String!
}

type ContentValidationAlert {
  "ID of the alert"
  id: String!
  "ID of the LookML dashboard associated with the alert"
  lookml_dashboard_id: String
  "ID of the LookML dashboard element associated with the alert"
  lookml_link_id: String
  "Domain for the custom url selected by the alert creator from the admin defined domain allowlist"
  custom_url_base: String
  "Parameters and path for the custom url defined by the alert creator"
  custom_url_params: String
  "Label for the custom url defined by the alert creator"
  custom_url_label: String
  "Boolean to determine if the custom url should be used"
  show_custom_url: Boolean!
  "An optional, user-defined title for the alert"
  custom_title: String
}

type ContentValidationLookMLDashboard {
  "ID of the LookML Dashboard"
  id: String!
  "Title of the LookML Dashboard"
  title: String
  "ID of Space"
  space_id: String
}

type ContentValidationLookMLDashboardElement {
  "Link ID of the LookML Dashboard Element"
  lookml_link_id: String
  "Title of the LookML Dashboard Element"
  title: String
}

type ContentValidationError {
  "Error message"
  message: String
  "Name of the field involved in the error"
  field_name: String
  "Name of the model involved in the error"
  model_name: String
  "Name of the explore involved in the error"
  explore_name: String
  "Whether this validation error is removable"
  removable: Boolean!
}

type ContentView {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Id of viewed Look"
  look_id: String
  "Id of the viewed Dashboard"
  dashboard_id: String
  "Name or title of underlying content"
  title: String
  "Content metadata id of the Look or Dashboard"
  content_metadata_id: String
  "Id of user content was viewed by"
  user_id: String
  "Id of group content was viewed by"
  group_id: String
  "Number of times piece of content was viewed"
  view_count: BigInt
  "Number of times piece of content was favorited"
  favorite_count: BigInt
  "Date the piece of content was last viewed"
  last_viewed_at: String
  "Week start date for the view and favorite count during that given week"
  start_of_week_date: String
}

type CredentialsEmailSearch {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address used for user login"
  email: String
  "Force the user to change their password upon their next login"
  forced_password_reset_at_next_login: Boolean!
  "Unique Id of the user"
  user_id: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Url with one-time use secret token that the user can use to reset password"
  password_reset_url: String
  "Url with one-time use secret token that the user can use to setup account"
  account_setup_url: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
  "Link to get this user"
  user_url: UriReference
}

type CustomWelcomeEmail {
  "If true, custom email content will replace the default body of welcome emails"
  enabled: Boolean!
  "The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed."
  content: String
  "The text to appear in the email subject line. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled."
  subject: String
  "The text to appear in the header line of the email body. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled."
  header: String
}

type Dashboard {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Content Favorite Id"
  content_favorite_id: String
  "Id of content metadata"
  content_metadata_id: String
  "Description"
  description: String
  "Is Hidden"
  hidden: Boolean!
  "Unique Id"
  id: String!
  model: LookModel
  "Timezone in which the Dashboard will run by default."
  query_timezone: String
  "Is Read-only"
  readonly: Boolean!
  "Refresh Interval, as a time duration phrase like \\"2 hours 30 minutes\\". A number with no time units will be interpreted as whole seconds."
  refresh_interval: String
  "Refresh Interval in milliseconds"
  refresh_interval_to_i: BigInt
  folder: FolderBase
  "Dashboard Title"
  title: String
  "Id of User"
  user_id: String
  "Content Metadata Slug"
  slug: String
  "The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)"
  preferred_viewer: String
  "Enables alerts to keep in sync with dashboard filter changes"
  alert_sync_with_dashboard_filter_enabled: Boolean!
  "Background color"
  background_color: String
  "Time that the Dashboard was created."
  created_at: DateTime
  "Enables crossfiltering in dashboards - only available in dashboards-next (beta)"
  crossfilter_enabled: Boolean!
  "Elements"
  dashboard_elements: [DashboardElement]
  "Filters"
  dashboard_filters: [DashboardFilter]
  "Layouts"
  dashboard_layouts: [DashboardLayout]
  "Whether or not a dashboard is 'soft' deleted."
  deleted: Boolean!
  "Time that the Dashboard was 'soft' deleted."
  deleted_at: DateTime
  "Id of User that 'soft' deleted the dashboard."
  deleter_id: String
  "Relative path of URI of LookML file to edit the dashboard (LookML dashboard only)."
  edit_uri: UriReference
  "Allow visualizations to be viewed in full screen mode"
  enable_viz_full_screen: Boolean!
  "Number of times favorited"
  favorite_count: BigInt
  "Sets the default state of the filters bar to collapsed or open"
  filters_bar_collapsed: Boolean!
  "Sets the default state of the filters location to top(true) or right(false)"
  filters_location_top: Boolean!
  "Time the dashboard was last accessed"
  last_accessed_at: DateTime
  "Time last viewed in the Looker web UI"
  last_viewed_at: DateTime
  "Time that the Dashboard was most recently updated."
  updated_at: DateTime
  "Id of User that most recently updated the dashboard."
  last_updater_id: String
  "Name of User that most recently updated the dashboard."
  last_updater_name: String
  "Name of User that created the dashboard."
  user_name: String
  "configuration option that governs how dashboard loading will happen."
  load_configuration: String
  "Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match."
  lookml_link_id: String
  "Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://cloud.google.com/looker/docs/r/api/control-access)"
  show_filters_bar: Boolean
  "Show title"
  show_title: Boolean
  "Id of folder"
  folder_id: String
  "Color of text on text tiles"
  text_tile_text_color: String
  "Tile background color"
  tile_background_color: String
  "Tile text color"
  tile_text_color: String
  "Title color"
  title_color: String
  "Number of times viewed in the Looker web UI"
  view_count: BigInt
  appearance: DashboardAppearance
  "Relative URL of the dashboard"
  url: String
}

type DashboardElement {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Text tile body text"
  body_text: String
  "Text tile body text as Html"
  body_text_as_html: String
  "Id of Dashboard"
  dashboard_id: String
  "Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only)."
  edit_uri: UriReference
  "Unique Id"
  id: String!
  look: LookWithQuery
  "Id Of Look"
  look_id: String
  "LookML link ID"
  lookml_link_id: String
  "ID of merge result"
  merge_result_id: String
  "Note Display"
  note_display: String
  "Note State"
  note_state: String
  "Note Text"
  note_text: String
  "Note Text as Html"
  note_text_as_html: String
  query: Query_
  "Id Of Query"
  query_id: String
  "Refresh Interval"
  refresh_interval: String
  "Refresh Interval as integer"
  refresh_interval_to_i: BigInt
  result_maker: ResultMakerWithIdVisConfigAndDynamicFields
  "ID of the ResultMakerLookup entry."
  result_maker_id: String
  "Text tile subtitle text"
  subtitle_text: String
  "Title of dashboard element"
  title: String
  "Whether title is hidden"
  title_hidden: Boolean!
  "Text tile title"
  title_text: String
  "Type"
  type: String
  "Count of Alerts associated to a dashboard element"
  alert_count: BigInt
  "JSON with all the properties required for rich editor and buttons elements"
  rich_content_json: String
  "Text tile title text as Html"
  title_text_as_html: String
  "Text tile subtitle text as Html"
  subtitle_text_as_html: String
  "Extension ID"
  extension_id: String
}

type LookWithQuery {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Id of content metadata"
  content_metadata_id: String
  "Unique Id"
  id: String!
  "Look Title"
  title: String
  "User Id"
  user_id: String
  "Content Favorite Id"
  content_favorite_id: String
  "Time that the Look was created."
  created_at: DateTime
  "Whether or not a look is 'soft' deleted."
  deleted: Boolean!
  "Time that the Look was deleted."
  deleted_at: DateTime
  "Id of User that deleted the look."
  deleter_id: String
  "Description"
  description: String
  "Embed Url"
  embed_url: String
  "Excel File Url"
  excel_file_url: String
  "Number of times favorited"
  favorite_count: BigInt
  "Google Spreadsheet Formula"
  google_spreadsheet_formula: String
  "Image Embed Url"
  image_embed_url: String
  "auto-run query when Look viewed"
  is_run_on_load: Boolean!
  "Time that the Look was last accessed by any user"
  last_accessed_at: DateTime
  "Id of User that last updated the look."
  last_updater_id: String
  "Time last viewed in the Looker web UI"
  last_viewed_at: DateTime
  model: LookModel
  "Is Public"
  public: Boolean!
  "Public Slug"
  public_slug: String
  "Public Url"
  public_url: String
  "Query Id"
  query_id: String
  "Short Url"
  short_url: String
  folder: FolderBase
  "Folder Id"
  folder_id: String
  "Time that the Look was updated."
  updated_at: DateTime
  "Number of times viewed in the Looker web UI"
  view_count: BigInt
  query: Query_
  "Url"
  url: String
}

type ResultMakerWithIdVisConfigAndDynamicFields {
  "Unique Id."
  id: String!
  "JSON string of dynamic field information."
  dynamic_fields: String
  "array of items that can be filtered and information about them."
  filterables: [ResultMakerFilterables]
  "Sorts of the constituent Look, Query, or Merge Query"
  sorts: [String]
  "ID of merge result if this is a merge_result."
  merge_result_id: String
  "Total of the constituent Look, Query, or Merge Query"
  total: Boolean!
  "ID of query if this is a query."
  query_id: String
  "ID of SQL Query if this is a SQL Runner Query"
  sql_query_id: String
  query: Query_
  "Vis config of the constituent Query, or Merge Query."
  vis_config: JSON
}

type ResultMakerFilterables {
  "The model this filterable comes from (used for field suggestions)."
  model: String
  "The view this filterable comes from (used for field suggestions)."
  view: String
  "The name of the filterable thing (Query or Merged Results)."
  name: String
  "array of dashboard_filter_name: and field: objects."
  listen: [ResultMakerFilterablesListen]
}

type ResultMakerFilterablesListen {
  "The name of a dashboard filter to listen to."
  dashboard_filter_name: String
  "The name of the field in the filterable to filter with the value of the dashboard filter."
  field: String
}

type DashboardFilter {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Id of Dashboard"
  dashboard_id: String
  "Name of filter"
  name: String
  "Title of filter"
  title: String
  "Type of filter: one of date, number, string, or field"
  type: String
  "Default value of filter"
  default_value: String
  "Model of filter (required if type = field)"
  model: String
  "Explore of filter (required if type = field)"
  explore: String
  "Dimension of filter (required if type = field)"
  dimension: String
  "Field information"
  field: JSON
  "Display order of this filter relative to other filters"
  row: BigInt
  "Array of listeners for faceted filters"
  listens_to_filters: [String]
  "Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)"
  allow_multiple_values: Boolean!
  "Whether the filter requires a value to run the dashboard"
  required: Boolean!
  "The visual configuration for this filter. Used to set up how the UI for this filter should appear."
  ui_config: JSON
}

type DashboardLayout {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Id of Dashboard"
  dashboard_id: String
  "Type"
  type: String
  "Is Active"
  active: Boolean!
  "Column Width"
  column_width: BigInt
  "Width"
  width: BigInt
  "Whether or not the dashboard layout is deleted."
  deleted: Boolean!
  "Title extracted from the dashboard this layout represents."
  dashboard_title: String
  "Components"
  dashboard_layout_components: [DashboardLayoutComponent]
}

type DashboardLayoutComponent {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Id of Dashboard Layout"
  dashboard_layout_id: String
  "Id Of Dashboard Element"
  dashboard_element_id: String
  "Row"
  row: BigInt
  "Column"
  column: BigInt
  "Width"
  width: BigInt
  "Height"
  height: BigInt
  "Whether or not the dashboard layout component is deleted"
  deleted: Boolean!
  "Dashboard element title, extracted from the Dashboard Element."
  element_title: String
  "Whether or not the dashboard element title is displayed."
  element_title_hidden: Boolean!
  "Visualization type, extracted from a query's vis_config"
  vis_type: String
}

type DashboardAppearance {
  "Page margin (side) width"
  page_side_margins: BigInt
  "Background color for the dashboard"
  page_background_color: String
  "Title alignment on dashboard tiles"
  tile_title_alignment: String
  "Space between tiles"
  tile_space_between: BigInt
  "Background color for tiles"
  tile_background_color: String
  "Tile shadow on/off"
  tile_shadow: Boolean
  "Key color"
  key_color: String
}

type DashboardAggregateTableLookml {
  "Dashboard Id"
  dashboard_id: String
  "Aggregate Table LookML"
  aggregate_table_lookml: String
}

type DashboardLookml {
  "Id of Dashboard"
  dashboard_id: String
  "(Write-Only) Id of the folder"
  folder_id: String
  "lookml of UDD"
  lookml: String
}

type Datagroup {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "UNIX timestamp at which this entry was created."
  created_at: BigInt
  "Unique ID of the datagroup"
  id: String!
  "Name of the model containing the datagroup. Unique when combined with name."
  model_name: String
  "Name of the datagroup. Unique when combined with model_name."
  name: String
  "UNIX timestamp before which cache entries are considered stale. Cannot be in the future."
  stale_before: BigInt
  "UNIX timestamp at which this entry trigger was last checked."
  trigger_check_at: BigInt
  "The message returned with the error of the last trigger check."
  trigger_error: String
  "The value of the trigger when last checked."
  trigger_value: String
  "UNIX timestamp at which this entry became triggered. Cannot be in the future."
  triggered_at: BigInt
}

type DBConnection {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Name of the connection. Also used as the unique identifier"
  name: String!
  dialect: Dialect
  "SQL Runner snippets for this connection"
  snippets: [Snippet]!
  "True if PDTs are enabled on this connection"
  pdts_enabled: Boolean!
  "Host name/address of server; or the string 'localhost' in case of a connection over an SSH tunnel."
  host: String
  "Port number on server. If the connection is over an SSH tunnel, then the local port associated with the SSH tunnel."
  port: String
  "Username for server authentication"
  username: String
  "(Write-Only) Password for server authentication"
  password: String
  "Whether the connection uses OAuth for authentication."
  uses_oauth: Boolean!
  "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect)."
  certificate: String
  "(Write-Only) Certificate keyfile type - .json or .p12"
  file_type: String
  "Database name"
  database: String
  "Time zone of database"
  db_timezone: String
  "Timezone to use in queries"
  query_timezone: String
  "Schema name"
  schema: String
  "Maximum number of concurrent connection to use"
  max_connections: BigInt
  "Maximum size of query in GBs (BigQuery only, can be a user_attribute name)"
  max_billing_gigabytes: String
  "Use SSL/TLS when connecting to server"
  ssl: Boolean!
  "Verify the SSL"
  verify_ssl: Boolean!
  "Name of temporary database (if used)"
  tmp_db_name: String
  "Additional params to add to JDBC connection string"
  jdbc_additional_params: String
  "Connection Pool Timeout, in seconds"
  pool_timeout: BigInt
  "(Read/Write) SQL Dialect name"
  dialect_name: String
  "Database connection has the ability to support open data studio from explore"
  supports_data_studio_link: Boolean!
  "Creation date for this connection"
  created_at: String
  "Id of user who last modified this connection configuration"
  user_id: String
  "Is this an example connection?"
  example: Boolean!
  "(Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password"
  user_db_credentials: Boolean
  "Fields whose values map to user attribute names"
  user_attribute_fields: [String]
  "Cron string specifying when maintenance such as PDT trigger checks and drops should be performed"
  maintenance_cron: String
  "Unix timestamp at start of last completed PDT trigger check process"
  last_regen_at: String
  "Unix timestamp at start of last completed PDT reap process"
  last_reap_at: String
  "Precache tables in the SQL Runner"
  sql_runner_precache_tables: Boolean!
  "Fetch Information Schema For SQL Writing"
  sql_writing_with_info_schema: Boolean!
  "SQL statements (semicolon separated) to issue after connecting to the database. Requires \`custom_after_connect_statements\` license feature"
  after_connect_statements: String
  pdt_context_override: DBConnectionOverride
  "Is this connection created and managed by Looker"
  managed: Boolean!
  "This field is only applicable to connections over an SSH Tunnel. The value of this field would be the local port associated with the SSH tunnel if configured manually. Otherwise either enter NULL or exclude this field."
  custom_local_port: BigInt
  "The Id of the ssh tunnel this connection uses"
  tunnel_id: String
  "Enable Transparent Network Substrate (TNS) connections"
  uses_tns: Boolean
  "Maximum number of threads to use to build PDTs in parallel"
  pdt_concurrency: BigInt
  "When disable_context_comment is true comment will not be added to SQL"
  disable_context_comment: Boolean
  "An External OAuth Application to use for authenticating to the database"
  oauth_application_id: String
  "When true, error PDTs will be retried every regenerator cycle"
  always_retry_failed_builds: Boolean
  "When true, query cost estimate will be displayed in explore."
  cost_estimate_enabled: Boolean
  "PDT builds on this connection can be kicked off and cancelled via API."
  pdt_api_control_enabled: Boolean
}

type Dialect {
  "The name of the dialect"
  name: String!
  "The human-readable label of the connection"
  label: String!
  "Whether the dialect supports query cost estimates"
  supports_cost_estimate: Boolean!
  "How the dialect handles cost estimation"
  cost_estimate_style: String
  "PDT index columns"
  persistent_table_indexes: String!
  "PDT sortkey columns"
  persistent_table_sortkeys: String!
  "PDT distkey column"
  persistent_table_distkey: String!
  "Suports streaming results"
  supports_streaming: Boolean!
  "Should SQL Runner snippets automatically be run"
  automatically_run_sql_runner_snippets: Boolean!
  "Array of names of the tests that can be run on a connection using this dialect"
  connection_tests: [String]!
  "Is supported with the inducer (i.e. generate from sql)"
  supports_inducer: Boolean!
  "Can multiple databases be accessed from a connection using this dialect"
  supports_multiple_databases: Boolean!
  "Whether the dialect supports allowing Looker to build persistent derived tables"
  supports_persistent_derived_tables: Boolean!
  "Does the database have client SSL support settable through the JDBC string explicitly?"
  has_ssl_support: Boolean!
}

type Snippet {
  "Name of the snippet"
  name: String!
  "Label of the snippet"
  label: String!
  "SQL text of the snippet"
  sql: String!
}

type DBConnectionOverride {
  "Context in which to override (\`pdt\` is the only allowed value)"
  context: String!
  "Host name/address of server"
  host: String
  "Port number on server"
  port: String
  "Username for server authentication"
  username: String
  "(Write-Only) Password for server authentication"
  password: String
  "Whether or not the password is overridden in this context"
  has_password: Boolean!
  "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect)."
  certificate: String
  "(Write-Only) Certificate keyfile type - .json or .p12"
  file_type: String
  "Database name"
  database: String
  "Schema name"
  schema: String
  "Additional params to add to JDBC connection string"
  jdbc_additional_params: String
  "SQL statements (semicolon separated) to issue after connecting to the database. Requires \`custom_after_connect_statements\` license feature"
  after_connect_statements: String
}

type DependencyGraph {
  "The graph structure in the dot language that can be rendered into an image."
  graph_text: String!
}

type MaterializePDT {
  "The ID of the enqueued materialization task"
  materialization_id: String!
  "Detailed response in text format"
  resp_text: String
}

type DialectInfo {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Default number max connections"
  default_max_connections: String
  "Default port number"
  default_port: String
  "Is the supporting driver installed"
  installed: Boolean!
  "The human-readable label of the connection"
  label: String
  "What the dialect calls the equivalent of a normal SQL table"
  label_for_database_equivalent: String
  "The name of the dialect"
  name: String
  supported_options: DialectInfoOptions
}

type DialectInfoOptions {
  "Has additional params support"
  additional_params: Boolean!
  "Has support for issuing statements after connecting to the database"
  after_connect_statements: Boolean!
  "Has analytical view support"
  analytical_view_dataset: Boolean!
  "Has auth support"
  auth: Boolean!
  "Has configurable cost estimation"
  cost_estimate: Boolean!
  "Can disable query context comments"
  disable_context_comment: Boolean!
  "Host is required"
  host: Boolean!
  "Instance name is required"
  instance_name: Boolean!
  "Has max billing gigabytes support"
  max_billing_gigabytes: Boolean!
  "Has support for a service account"
  oauth_credentials: Boolean!
  "Has OAuth for PDT support"
  pdts_for_oauth: Boolean!
  "Port can be specified"
  port: Boolean!
  "Has project name support"
  project_name: Boolean!
  "Schema can be specified"
  schema: Boolean!
  "Has support for a service account"
  service_account_credentials: Boolean!
  "Has TLS/SSL support"
  ssl: Boolean!
  "Has timezone support"
  timezone: Boolean!
  "Has tmp table support"
  tmp_table: Boolean!
  "Has Oracle TNS support"
  tns: Boolean!
  "Username can be specified"
  username: Boolean!
  "Username is required"
  username_required: Boolean!
}

type DigestEmails {
  "Whether or not digest emails are enabled"
  is_enabled: Boolean!
}

type EgressIpAddresses {
  "Egress IP addresses"
  egress_ip_addresses: [String]
}

type ExternalOauthApplication {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "ID of this OAuth Application"
  id: String!
  "The name of this application.  For Snowflake connections, this should be the name of the host database."
  name: String!
  "The OAuth Client ID for this application"
  client_id: String!
  "(Write-Only) The OAuth Client Secret for this application"
  client_secret: String!
  "The database dialect for this application."
  dialect_name: String
  "Creation time for this application"
  created_at: DateTime!
}

type GitBranch {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "The short name on the local. Updating \`name\` results in \`git checkout <new_name>\`"
  name: String
  "The name of the remote"
  remote: String
  "The short name on the remote"
  remote_name: String
  "Name of error"
  error: String
  "Message describing an error if present"
  message: String
  "Name of the owner of a personal branch"
  owner_name: String
  "Whether or not this branch is readonly"
  readonly: Boolean!
  "Whether or not this branch is a personal branch - readonly for all developers except the owner"
  personal: Boolean!
  "Whether or not a local ref exists for the branch"
  is_local: Boolean!
  "Whether or not a remote ref exists for the branch"
  is_remote: Boolean!
  "Whether or not this is the production branch"
  is_production: Boolean!
  "Number of commits the local branch is ahead of the remote"
  ahead_count: BigInt
  "Number of commits the local branch is behind the remote"
  behind_count: BigInt
  "UNIX timestamp at which this branch was last committed."
  commit_at: BigInt
  "The resolved ref of this branch. Updating \`ref\` results in \`git reset --hard <new_ref>\`\`."
  ref: String
  "The resolved ref of this branch remote."
  remote_ref: String
}

type Group {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Group can be used in content access controls"
  can_add_to_content_metadata: Boolean!
  "Currently logged in user is group member"
  contains_current_user: Boolean!
  "External Id group if embed group"
  external_group_id: String
  "Group membership controlled outside of Looker"
  externally_managed: Boolean!
  "Unique Id"
  id: String!
  "New users are added to this group by default"
  include_by_default: Boolean!
  "Name of group"
  name: String
  "Number of users included in this group"
  user_count: BigInt
}

type GroupSearch {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Group can be used in content access controls"
  can_add_to_content_metadata: Boolean!
  "Currently logged in user is group member"
  contains_current_user: Boolean!
  "External Id group if embed group"
  external_group_id: String
  "Group membership controlled outside of Looker"
  externally_managed: Boolean!
  "Unique Id"
  id: String!
  "New users are added to this group by default"
  include_by_default: Boolean!
  "Name of group"
  name: String
  "Number of users included in this group"
  user_count: BigInt
  "Roles assigned to group"
  roles: [Role]
}

type Role {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Name of Role"
  name: String
  permission_set: PermissionSet
  "(Write-Only) Id of permission set"
  permission_set_id: String
  model_set: ModelSet
  "(Write-Only) Id of model set"
  model_set_id: String
  "Link to get this item"
  url: UriReference
  "Link to get list of users with this role"
  users_url: UriReference
}

type PermissionSet {
  "Operations the current user is able to perform on this object"
  can: JSON!
  all_access: Boolean!
  built_in: Boolean!
  "Unique Id"
  id: String!
  "Name of PermissionSet"
  name: String
  permissions: [String]
  "Link to get this item"
  url: UriReference
}

type ModelSet {
  "Operations the current user is able to perform on this object"
  can: JSON!
  all_access: Boolean!
  built_in: Boolean!
  "Unique Id"
  id: String!
  models: [String]
  "Name of ModelSet"
  name: String
  "Link to get this item"
  url: UriReference
}

type GroupHierarchy {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Group can be used in content access controls"
  can_add_to_content_metadata: Boolean!
  "Currently logged in user is group member"
  contains_current_user: Boolean!
  "External Id group if embed group"
  external_group_id: String
  "Group membership controlled outside of Looker"
  externally_managed: Boolean!
  "Unique Id"
  id: String!
  "New users are added to this group by default"
  include_by_default: Boolean!
  "Name of group"
  name: String
  "Number of users included in this group"
  user_count: BigInt
  "IDs of parents of this group"
  parent_group_ids: [String]
  "Role IDs assigned to group"
  role_ids: [String]
}

type User {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "URL for the avatar image (may be generic)"
  avatar_url: UriReference
  "URL for the avatar image (may be generic), does not specify size"
  avatar_url_without_sizing: UriReference
  "API credentials"
  credentials_api3: [CredentialsApi3]
  credentials_email: CredentialsEmail
  "Embed credentials"
  credentials_embed: [CredentialsEmbed]
  credentials_google: CredentialsGoogle
  credentials_ldap: CredentialsLDAP
  credentials_looker_openid: CredentialsLookerOpenid
  credentials_oidc: CredentialsOIDC
  credentials_saml: CredentialsSaml
  credentials_totp: CredentialsTotp
  "Full name for display (available only if both first_name and last_name are set)"
  display_name: String
  "EMail address"
  email: String
  "(DEPRECATED) (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login"
  embed_group_space_id: String
  "First name"
  first_name: String
  "Array of ids of the groups for this user"
  group_ids: [String]
  "ID string for user's home folder"
  home_folder_id: String
  "Unique Id"
  id: String!
  "Account has been disabled"
  is_disabled: Boolean!
  "Last name"
  last_name: String
  "User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example."
  locale: String
  "Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')"
  looker_versions: [String]
  "User's dev workspace has been checked for presence of applicable production projects"
  models_dir_validated: Boolean
  "ID of user's personal folder"
  personal_folder_id: String
  "User is identified as an employee of Looker"
  presumed_looker_employee: Boolean!
  "Array of ids of the roles for this user"
  role_ids: [String]
  "Active sessions"
  sessions: [Session]
  "Per user dictionary of undocumented state information owned by the Looker UI."
  ui_state: JSON
  "User is identified as an employee of Looker who has been verified via Looker corporate authentication"
  verified_looker_employee: Boolean!
  "User's roles are managed by an external directory like SAML or LDAP and can not be changed directly."
  roles_externally_managed: Boolean!
  "User can be directly assigned a role."
  allow_direct_roles: Boolean!
  "User can be a direct member of a normal Looker group."
  allow_normal_group_membership: Boolean!
  "User can inherit roles from a normal Looker group."
  allow_roles_from_normal_groups: Boolean!
  "(Embed only) ID of user's group folder based on the external_group_id optionally specified during embed user login"
  embed_group_folder_id: String
  "User is an IAM Admin - only available in Looker (Google Cloud core)"
  is_iam_admin: Boolean!
  "Link to get this item"
  url: UriReference
}

type CredentialsApi3 {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "API key client_id"
  client_id: String
  "Timestamp for the creation of this credential"
  created_at: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

type CredentialsEmail {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address used for user login"
  email: String
  "Force the user to change their password upon their next login"
  forced_password_reset_at_next_login: Boolean!
  "Unique Id of the user"
  user_id: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Url with one-time use secret token that the user can use to reset password"
  password_reset_url: String
  "Url with one-time use secret token that the user can use to setup account"
  account_setup_url: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
  "Link to get this user"
  user_url: UriReference
}

type CredentialsEmbed {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "Embedder's id for a group to which this user was added during the most recent login"
  external_group_id: String
  "Embedder's unique id for the user"
  external_user_id: String
  "Unique Id"
  id: String!
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

type CredentialsGoogle {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "Google domain"
  domain: String
  "EMail address"
  email: String
  "Google's Unique ID for this user"
  google_user_id: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

type CredentialsLDAP {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "LDAP Distinguished name for this user (as-of the last login)"
  ldap_dn: String
  "LDAP Unique ID for this user"
  ldap_id: String
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

type CredentialsLookerOpenid {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address used for user login"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "IP address of client for most recent login using credential"
  logged_in_ip: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
  "Link to get this user"
  user_url: UriReference
}

type CredentialsOIDC {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "OIDC OP's Unique ID for this user"
  oidc_user_id: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

type CredentialsSaml {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Saml IdP's Unique ID for this user"
  saml_user_id: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

type CredentialsTotp {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for the creation of this credential"
  created_at: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Short name for the type of this kind of credential"
  type: String
  "User has verified"
  verified: Boolean!
  "Link to get this item"
  url: UriReference
}

type Session {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "IP address of user when this session was initiated"
  ip_address: String
  "User's browser type"
  browser: String
  "User's Operating System"
  operating_system: String
  "City component of user location (derived from IP address)"
  city: String
  "State component of user location (derived from IP address)"
  state: String
  "Country component of user location (derived from IP address)"
  country: String
  "Type of credentials used for logging in this session"
  credentials_type: String
  "Time when this session was last extended by the user"
  extended_at: String
  "Number of times this session was extended"
  extended_count: BigInt
  "Actual user in the case when this session represents one user sudo'ing as another"
  sudo_user_id: String
  "Time when this session was initiated"
  created_at: String
  "Time when this session will expire"
  expires_at: String
  "Link to get this item"
  url: UriReference
}

type Board {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Id of associated content_metadata record"
  content_metadata_id: String
  "Date of board creation"
  created_at: DateTime
  "Date of board deletion"
  deleted_at: DateTime
  "Description of the board"
  description: String
  "Sections of the board"
  board_sections: [BoardSection]
  "Unique Id"
  id: String!
  "ids of the board sections in the order they should be displayed"
  section_order: [String]
  "Title of the board"
  title: String
  "Date of last board update"
  updated_at: DateTime
  "User id of board creator"
  user_id: String
  "Whether the board is the primary homepage or not"
  primary_homepage: Boolean!
}

type BoardSection {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Time at which this section was created."
  created_at: DateTime
  "Time at which this section was deleted."
  deleted_at: DateTime
  "Description of the content found in this section."
  description: String
  "Id reference to parent board"
  board_id: String
  "Items in the board section"
  board_items: [BoardItem]
  "Unique Id"
  id: String!
  "ids of the board items in the order they should be displayed"
  item_order: [String]
  "ids of the homepage items the user can see in the order they should be displayed"
  visible_item_order: [String]
  "Name of row"
  title: String
  "Time at which this section was last updated."
  updated_at: DateTime
}

type BoardItem {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Name of user who created the content this item is based on"
  content_created_by: String
  "Content favorite id associated with the item this content is based on"
  content_favorite_id: String
  "Content metadata id associated with the item this content is based on"
  content_metadata_id: String
  "Last time the content that this item is based on was updated"
  content_updated_at: String
  "Custom description entered by the user, if present"
  custom_description: String
  "Custom title entered by the user, if present"
  custom_title: String
  "Custom url entered by the user, if present"
  custom_url: String
  "Dashboard to base this item on"
  dashboard_id: String
  "The actual description for display"
  description: String
  "Number of times content has been favorited, if present"
  favorite_count: BigInt
  "Associated Board Section"
  board_section_id: String
  "Unique Id"
  id: String!
  "The actual image_url for display"
  image_url: String
  "The container folder name of the content"
  location: String
  "Look to base this item on"
  look_id: String
  "LookML Dashboard to base this item on"
  lookml_dashboard_id: String
  "An arbitrary integer representing the sort order within the section"
  order: BigInt
  "The actual title for display"
  title: String
  "Relative url for the associated content"
  url: String!
  "Whether the custom description should be used instead of the content description, if the item is associated with content"
  use_custom_description: Boolean!
  "Whether the custom title should be used instead of the content title, if the item is associated with content"
  use_custom_title: Boolean!
  "Whether the custom url should be used instead of the content url, if the item is associated with content"
  use_custom_url: Boolean!
  "Number of times content has been viewed, if present"
  view_count: BigInt
  "(Write-Only) base64 encoded image data"
  custom_image_data_base64: String
  "Custom image_url entered by the user, if present"
  custom_image_url: String
  "Whether the custom image should be used instead of the content image, if the item is associated with content"
  use_custom_image: Boolean!
}

type HomepageSection {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Time at which this section was created."
  created_at: DateTime
  "Time at which this section was deleted."
  deleted_at: DateTime
  "A URL pointing to a page showing further information about the content in the section."
  detail_url: String
  "Id reference to parent homepage"
  homepage_id: String
  "Items in the homepage section"
  homepage_items: [HomepageItem]
  "Unique Id"
  id: String!
  "Is this a header section (has no items)"
  is_header: Boolean!
  "ids of the homepage items in the order they should be displayed"
  item_order: [String]
  "Name of row"
  title: String
  "Time at which this section was last updated."
  updated_at: DateTime
  "Description of the content found in this section."
  description: String
  "ids of the homepage items the user can see in the order they should be displayed"
  visible_item_order: [String]
}

type HomepageItem {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Name of user who created the content this item is based on"
  content_created_by: String
  "Content favorite id associated with the item this content is based on"
  content_favorite_id: String
  "Content metadata id associated with the item this content is based on"
  content_metadata_id: String
  "Last time the content that this item is based on was updated"
  content_updated_at: String
  "Custom description entered by the user, if present"
  custom_description: String
  "(Write-Only) base64 encoded image data"
  custom_image_data_base64: String
  "Custom image_url entered by the user, if present"
  custom_image_url: String
  "Custom title entered by the user, if present"
  custom_title: String
  "Custom url entered by the user, if present"
  custom_url: String
  "Dashboard to base this item on"
  dashboard_id: String
  "The actual description for display"
  description: String
  "Number of times content has been favorited, if present"
  favorite_count: BigInt
  "Associated Homepage Section"
  homepage_section_id: String
  "Unique Id"
  id: String!
  "The actual image_url for display"
  image_url: String
  "The container folder name of the content"
  location: String
  "Look to base this item on"
  look_id: String
  "LookML Dashboard to base this item on"
  lookml_dashboard_id: String
  "An arbitrary integer representing the sort order within the section"
  order: BigInt
  "Number of seconds it took to fetch the section this item is in"
  section_fetch_time: Float
  "The actual title for display"
  title: String
  "The actual url for display"
  url: String
  "Whether the custom description should be used instead of the content description, if the item is associated with content"
  use_custom_description: Boolean!
  "Whether the custom image should be used instead of the content image, if the item is associated with content"
  use_custom_image: Boolean!
  "Whether the custom title should be used instead of the content title, if the item is associated with content"
  use_custom_title: Boolean!
  "Whether the custom url should be used instead of the content url, if the item is associated with content"
  use_custom_url: Boolean!
  "Number of times content has been viewed, if present"
  view_count: BigInt
}

type IntegrationHub {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "ID of the hub."
  id: String!
  "URL of the hub."
  url: String!
  "Label of the hub."
  label: String!
  "Whether this hub is a first-party integration hub operated by Looker."
  official: Boolean!
  "An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable."
  fetch_error_message: String
  "(Write-Only) An authorization key that will be sent to the integration hub on every request."
  authorization_token: String
  "Whether the authorization_token is set for the hub."
  has_authorization_token: Boolean!
  "Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true."
  legal_agreement_signed: Boolean!
  "Whether the legal terms for the integration hub are required before use."
  legal_agreement_required: Boolean!
  "The legal agreement text for this integration hub."
  legal_agreement_text: String
}

type Integration {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "ID of the integration."
  id: String!
  "ID of the integration hub."
  integration_hub_id: String!
  "Label for the integration."
  label: String!
  "Description of the integration."
  description: String
  "Whether the integration is available to users."
  enabled: Boolean!
  "Array of params for the integration."
  params: [IntegrationParam]!
  "A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: \\"txt\\", \\"csv\\", \\"inline_json\\", \\"json\\", \\"json_label\\", \\"json_detail\\", \\"json_detail_lite_stream\\", \\"xlsx\\", \\"html\\", \\"wysiwyg_pdf\\", \\"assembled_pdf\\", \\"wysiwyg_png\\", \\"csv_zip\\"."
  supported_formats: [String]!
  "A list of action types the integration supports. Valid values are: \\"cell\\", \\"query\\", \\"dashboard\\", \\"none\\"."
  supported_action_types: [String]!
  "A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \\"formatted\\", \\"unformatted\\"."
  supported_formattings: [String]!
  "A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \\"apply\\", \\"noapply\\"."
  supported_visualization_formattings: [String]!
  "A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: \\"push\\", \\"url\\"."
  supported_download_settings: [String]!
  "URL to an icon for the integration."
  icon_url: String
  "Whether the integration uses oauth."
  uses_oauth: Boolean
  "A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required."
  required_fields: [IntegrationRequiredField]!
  "Link to privacy policy for destination"
  privacy_link: String
  "Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker."
  delegate_oauth: Boolean
  "Whether the integration is available to users."
  installed_delegate_oauth_targets: [String]!
}

type IntegrationParam {
  "Name of the parameter."
  name: String
  "Label of the parameter."
  label: String
  "Short description of the parameter."
  description: String
  "Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false."
  required: Boolean!
  "Whether the parameter has a value set."
  has_value: Boolean!
  "The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it."
  value: String
  "When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'."
  user_attribute_name: String
  "Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true."
  sensitive: Boolean
  "When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow."
  per_user: Boolean!
  "When present, the param represents the oauth url the user will be taken to."
  delegate_oauth_url: String
}

type IntegrationRequiredField {
  "Matches a field that has this tag."
  tag: String
  "If present, supercedes 'tag' and matches a field that has any of the provided tags."
  any_tag: [String]
  "If present, supercedes 'tag' and matches a field that has all of the provided tags."
  all_tags: [String]
}

type InternalHelpResourcesContent {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Text to display in the help menu item which will display the internal help resources"
  organization_name: String
  "Content to be displayed in the internal help resources page/modal"
  markdown_content: String
}

type InternalHelpResources {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker"
  enabled: Boolean!
}

type LDAPConfig {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled."
  alternate_email_login_allowed: Boolean!
  "(Write-Only)  Password for the LDAP account used to access the LDAP server"
  auth_password: String
  "Users will not be allowed to login at all unless a role for them is found in LDAP if set to true"
  auth_requires_role: Boolean!
  "Distinguished name of LDAP account used to access the LDAP server"
  auth_username: String
  "LDAP server hostname"
  connection_host: String
  "LDAP host port"
  connection_port: String
  "Use Transport Layer Security"
  connection_tls: Boolean!
  "Do not verify peer when using TLS"
  connection_tls_no_verify: Boolean!
  "(Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP"
  default_new_user_group_ids: [String]
  "(Read-only) Groups that will be applied to new users the first time they login via LDAP"
  default_new_user_groups: [Group]
  "(Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP"
  default_new_user_role_ids: [String]
  "(Read-only) Roles that will be applied to new users the first time they login via LDAP"
  default_new_user_roles: [Role]
  "Enable/Disable LDAP authentication for the server"
  enabled: Boolean!
  "Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it."
  force_no_page: Boolean!
  "(Read-only) Array of mappings between LDAP Groups and Looker Roles"
  groups: [LDAPGroupRead]
  "Base dn for finding groups in LDAP searches"
  groups_base_dn: String
  "Identifier for a strategy for how Looker will search for groups in the LDAP server"
  groups_finder_type: String
  "LDAP Group attribute that signifies the members of the groups. Most commonly 'member'"
  groups_member_attribute: String
  "Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches"
  groups_objectclasses: String
  "LDAP Group attribute that signifies the user in a group. Most commonly 'dn'"
  groups_user_attribute: String
  "(Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids"
  groups_with_role_ids: [LDAPGroupWrite]
  "(Read-only) Has the password been set for the LDAP account used to access the LDAP server"
  has_auth_password: Boolean!
  "Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user."
  merge_new_users_by_email: Boolean!
  "When this config was last modified"
  modified_at: String
  "User id of user who last modified this config"
  modified_by: String
  "Set user roles in Looker based on groups from LDAP"
  set_roles_from_groups: Boolean!
  "(Write-Only)  Test LDAP user password. For ldap tests only."
  test_ldap_password: String
  "(Write-Only)  Test LDAP user login id. For ldap tests only."
  test_ldap_user: String
  "Name of user record attributes used to indicate email address field"
  user_attribute_map_email: String
  "Name of user record attributes used to indicate first name"
  user_attribute_map_first_name: String
  "Name of user record attributes used to indicate last name"
  user_attribute_map_last_name: String
  "Name of user record attributes used to indicate unique record id"
  user_attribute_map_ldap_id: String
  "(Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes"
  user_attributes: [LDAPUserAttributeRead]
  "(Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids"
  user_attributes_with_ids: [LDAPUserAttributeWrite]
  "Distinguished name of LDAP node used as the base for user searches"
  user_bind_base_dn: String
  "(Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses."
  user_custom_filter: String
  "Name(s) of user record attributes used for matching user login id (comma separated list)"
  user_id_attribute_names: String
  "(Optional) Name of user record objectclass used for finding user during login id"
  user_objectclass: String
  "Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login."
  allow_normal_group_membership: Boolean!
  "LDAP auth'd users will be able to inherit roles from non-reflected Looker groups."
  allow_roles_from_normal_groups: Boolean!
  "Allows roles to be directly assigned to LDAP auth'd users."
  allow_direct_roles: Boolean!
  "Link to get this item"
  url: UriReference
}

type LDAPGroupRead {
  "Unique Id"
  id: String!
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in LDAP"
  name: String
  "Looker Roles"
  roles: [Role]
  "Link to ldap config"
  url: UriReference
}

type LDAPGroupWrite {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in LDAP"
  name: String
  "Looker Role Ids"
  role_ids: [String]
  "Link to ldap config"
  url: UriReference
}

type LDAPUserAttributeRead {
  "Name of User Attribute in LDAP"
  name: String
  "Required to be in LDAP assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attributes"
  user_attributes: [UserAttribute]
  "Link to ldap config"
  url: UriReference
}

type UserAttribute {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Name of user attribute"
  name: String
  "Human-friendly label for user attribute"
  label: String
  "Type of user attribute (\\"string\\", \\"number\\", \\"datetime\\", \\"yesno\\", \\"zipcode\\")"
  type: String
  "Default value for when no value is set on the user"
  default_value: String
  "Attribute is a system default"
  is_system: Boolean!
  "Attribute is permanent and cannot be deleted"
  is_permanent: Boolean!
  "If true, users will not be able to view values of this attribute"
  value_is_hidden: Boolean!
  "Non-admin users can see the values of their attributes and use them in filters"
  user_can_view: Boolean!
  "Users can change the value of this attribute for themselves"
  user_can_edit: Boolean!
  "Destinations to which a hidden attribute may be sent. Once set, cannot be edited."
  hidden_value_domain_whitelist: String
}

type LDAPUserAttributeWrite {
  "Name of User Attribute in LDAP"
  name: String
  "Required to be in LDAP assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attribute Ids"
  user_attribute_ids: [String]
  "Link to ldap config"
  url: UriReference
}

type LegacyFeature {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Name"
  name: String
  "Description"
  description: String
  "Whether this feature has been enabled by a user"
  enabled_locally: Boolean!
  "Whether this feature is currently enabled"
  enabled: Boolean!
  "Looker version where this feature became a legacy feature"
  disallowed_as_of_version: String
  "Looker version where this feature will be automatically disabled"
  disable_on_upgrade_to_version: String
  "Future Looker version where this feature will be removed"
  end_of_life_version: String
  "URL for documentation about this feature"
  documentation_url: String
  "Approximate date that this feature will be automatically disabled."
  approximate_disable_date: DateTime
  "Approximate date that this feature will be removed."
  approximate_end_of_life_date: DateTime
  "Whether this legacy feature may have been automatically disabled when upgrading to the current version."
  has_disabled_on_upgrade: Boolean!
}

type Locale {
  "Code for Locale"
  code: String
  "Name of Locale in its own language"
  native_name: String
  "Name of Locale in English"
  english_name: String
}

type Look {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Id of content metadata"
  content_metadata_id: String
  "Unique Id"
  id: String!
  "Look Title"
  title: String
  "User Id"
  user_id: String
  "Content Favorite Id"
  content_favorite_id: String
  "Time that the Look was created."
  created_at: DateTime
  "Whether or not a look is 'soft' deleted."
  deleted: Boolean!
  "Time that the Look was deleted."
  deleted_at: DateTime
  "Id of User that deleted the look."
  deleter_id: String
  "Description"
  description: String
  "Embed Url"
  embed_url: String
  "Excel File Url"
  excel_file_url: String
  "Number of times favorited"
  favorite_count: BigInt
  "Google Spreadsheet Formula"
  google_spreadsheet_formula: String
  "Image Embed Url"
  image_embed_url: String
  "auto-run query when Look viewed"
  is_run_on_load: Boolean!
  "Time that the Look was last accessed by any user"
  last_accessed_at: DateTime
  "Id of User that last updated the look."
  last_updater_id: String
  "Time last viewed in the Looker web UI"
  last_viewed_at: DateTime
  model: LookModel
  "Is Public"
  public: Boolean!
  "Public Slug"
  public_slug: String
  "Public Url"
  public_url: String
  "Query Id"
  query_id: String
  "Short Url"
  short_url: String
  folder: FolderBase
  "Folder Id"
  folder_id: String
  "Time that the Look was updated."
  updated_at: DateTime
  "Number of times viewed in the Looker web UI"
  view_count: BigInt
}

type LookmlModel {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Array of names of connections this model is allowed to use"
  allowed_db_connection_names: [String]
  "Array of explores (if has_content)"
  explores: [LookmlModelNavExplore]
  "Does this model declaration have have lookml content?"
  has_content: Boolean!
  "UI-friendly name for this model"
  label: String
  "Name of the model. Also used as the unique identifier"
  name: String
  "Name of project containing the model"
  project_name: String
  "Is this model allowed to use all current and future connections"
  unlimited_db_connections: Boolean!
}

type LookmlModelNavExplore {
  "Name of the explore"
  name: String
  "Description for the explore"
  description: String
  "Label for the explore"
  label: String
  "Is this explore marked as hidden"
  hidden: Boolean!
  "Label used to group explores in the navigation menus"
  group_label: String
}

type LookmlModelExplore {
  "Fully qualified explore name (model name plus explore name)"
  id: String!
  "Explore name"
  name: String
  "Description"
  description: String
  "Label"
  label: String
  "Explore title"
  title: String
  "Scopes"
  scopes: [String]
  "Can Total"
  can_total: Boolean!
  "Can Develop LookML"
  can_develop: Boolean!
  "Can See LookML"
  can_see_lookml: Boolean!
  "A URL linking to the definition of this explore in the LookML IDE."
  lookml_link: String
  "Can Save"
  can_save: Boolean!
  "Can Explain"
  can_explain: Boolean!
  "Can pivot in the DB"
  can_pivot_in_db: Boolean!
  "Can use subtotals"
  can_subtotal: Boolean!
  "Has timezone support"
  has_timezone_support: Boolean!
  "Cost estimates supported"
  supports_cost_estimate: Boolean!
  "Connection name"
  connection_name: String
  "How nulls are sorted, possible values are \\"low\\", \\"high\\", \\"first\\" and \\"last\\""
  null_sort_treatment: String
  "List of model source files"
  files: [String]
  "Primary source_file file"
  source_file: String
  "Name of project"
  project_name: String
  "Name of model"
  model_name: String
  "Name of view"
  view_name: String
  "Is hidden"
  hidden: Boolean!
  "A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \\"prod_orders2 AS orders\\" in a view named orders."
  sql_table_name: String
  "(DEPRECATED) Array of access filter field names"
  access_filter_fields: [String]
  "Access filters"
  access_filters: [LookmlModelExploreAccessFilter]
  "Aliases"
  aliases: [LookmlModelExploreAlias]
  "Always filter"
  always_filter: [LookmlModelExploreAlwaysFilter]
  "Conditionally filter"
  conditionally_filter: [LookmlModelExploreConditionallyFilter]
  "Array of index fields"
  index_fields: [String]
  "Sets"
  sets: [LookmlModelExploreSet]
  "An array of arbitrary string tags provided in the model for this explore."
  tags: [String]
  "Errors"
  errors: [LookmlModelExploreError]
  fields: LookmlModelExploreFieldset
  "Views joined into this explore"
  joins: [LookmlModelExploreJoins]
  "Label used to group explores in the navigation menus"
  group_label: String
  "An array of items describing which custom measure types are supported for creating a custom measure 'based_on' each possible dimension type."
  supported_measure_types: [LookmlModelExploreSupportedMeasureType]!
  "An array of joins that will always be included in the SQL for this explore, even if the user has not selected a field from the joined view."
  always_join: [String]
}

type LookmlModelExploreAccessFilter {
  "Field to be filtered"
  field: String
  "User attribute name"
  user_attribute: String
}

type LookmlModelExploreAlias {
  "Name"
  name: String
  "Value"
  value: String
}

type LookmlModelExploreAlwaysFilter {
  "Name"
  name: String
  "Value"
  value: String
}

type LookmlModelExploreConditionallyFilter {
  "Name"
  name: String
  "Value"
  value: String
}

type LookmlModelExploreSet {
  "Name"
  name: String
  "Value set"
  value: [String]
}

type LookmlModelExploreError {
  "Error Message"
  message: String
  "Details"
  details: JSON
  "Error source location"
  error_pos: String
  "Is this a field error"
  field_error: Boolean!
}

type LookmlModelExploreFieldset {
  "Array of dimensions"
  dimensions: [LookmlModelExploreField]
  "Array of measures"
  measures: [LookmlModelExploreField]
  "Array of filters"
  filters: [LookmlModelExploreField]
  "Array of parameters"
  parameters: [LookmlModelExploreField]
}

type LookmlModelExploreField {
  align: query_lookml_model_explore_fields_dimensions_items_align!
  "Whether it's possible to filter on this field."
  can_filter: Boolean!
  category: query_lookml_model_explore_fields_dimensions_items_category
  "The default value that this field uses when filtering. Null if there is no default value."
  default_filter_value: String
  "Description"
  description: String
  "Dimension group if this field is part of a dimension group. If not, this will be null."
  dimension_group: String
  "An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain."
  enumerations: [LookmlModelExploreFieldEnumeration]
  "An error message indicating a problem with the definition of this field. If there are no errors, this will be null."
  error: String
  "A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI."
  field_group_label: String
  "When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context."
  field_group_variant: String
  fill_style: query_lookml_model_explore_fields_dimensions_items_fill_style
  "An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to."
  fiscal_month_offset: BigInt!
  "Whether this field has a set of allowed_values specified in LookML."
  has_allowed_values: Boolean!
  "Whether this field should be hidden from the user interface."
  hidden: Boolean!
  "Whether this field is a filter."
  is_filter: Boolean!
  "Whether this field represents a fiscal time value."
  is_fiscal: Boolean!
  "Whether this field is of a type that represents a numeric value."
  is_numeric: Boolean!
  "Whether this field is of a type that represents a time value."
  is_timeframe: Boolean!
  "Whether this field can be time filtered."
  can_time_filter: Boolean!
  time_interval: LookmlModelExploreFieldTimeInterval
  "Fully-qualified human-readable label of the field."
  label: String!
  "The name of the parameter that will provide a parameterized label for this field, if available in the current context."
  label_from_parameter: String
  "The human-readable label of the field, without the view label."
  label_short: String!
  "A URL linking to the definition of this field in the LookML IDE."
  lookml_link: String
  map_layer: LookmlModelExploreFieldMapLayer
  "Whether this field is a measure."
  measure: Boolean!
  "Fully-qualified name of the field."
  name: String!
  "If yes, the field will not be localized with the user attribute number_format. Defaults to no"
  strict_value_format: Boolean!
  "Whether this field is a parameter."
  parameter: Boolean!
  "Whether this field can be removed from a query."
  permanent: Boolean
  "Whether or not the field represents a primary key."
  primary_key: Boolean!
  "The name of the project this field is defined in."
  project_name: String
  "When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort."
  requires_refresh_on_sort: Boolean!
  "The LookML scope this field belongs to. The scope is typically the field's view."
  scope: String!
  "Whether this field can be sorted."
  sortable: Boolean!
  "The path portion of source_file_path."
  source_file: String!
  "The fully-qualified path of the project file this field is defined in."
  source_file_path: String!
  "SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model."
  sql: String
  "An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model."
  sql_case: [LookmlModelExploreFieldSqlCase]
  "Array of filter conditions defined for the measure in LookML."
  filters: [LookmlModelExploreFieldMeasureFilters]
  "The name of the dimension to base suggest queries from."
  suggest_dimension: String!
  "The name of the explore to base suggest queries from."
  suggest_explore: String!
  "Whether or not suggestions are possible for this field."
  suggestable: Boolean!
  "If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values."
  suggestions: [String]
  "An array of arbitrary string tags provided in the model for this field."
  tags: [String]!
  "The LookML type of the field."
  type: String!
  "An array of user attribute types that are allowed to be used in filters on this field. Valid values are: \\"advanced_filter_string\\", \\"advanced_filter_number\\", \\"advanced_filter_datetime\\", \\"string\\", \\"number\\", \\"datetime\\", \\"relative_url\\", \\"yesno\\", \\"zipcode\\"."
  user_attribute_filter_types: [String]!
  "If specified, the LookML value format string for formatting values of this field."
  value_format: String
  "The name of the view this field belongs to."
  view: String!
  "The human-readable label of the view the field belongs to."
  view_label: String!
  "Whether this field was specified in \\"dynamic_fields\\" and is not part of the model."
  dynamic: Boolean!
  week_start_day: query_lookml_model_explore_fields_dimensions_items_week_start_day!
  "The number of times this field has been used in queries"
  times_used: BigInt!
  "The name of the view this field is defined in. This will be different than \\"view\\" when the view has been joined via a different name using the \\"from\\" parameter."
  original_view: String!
}

"The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: \\"left\\", \\"right\\"."
enum query_lookml_model_explore_fields_dimensions_items_align {
  left
  right
}

"Field category Valid values are: \\"parameter\\", \\"filter\\", \\"measure\\", \\"dimension\\"."
enum query_lookml_model_explore_fields_dimensions_items_category {
  parameter
  filter
  measure
  dimension
}

type LookmlModelExploreFieldEnumeration {
  "Label"
  label: String
  "Value"
  value: JSON
}

"The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: \\"enumeration\\", \\"range\\"."
enum query_lookml_model_explore_fields_dimensions_items_fill_style {
  enumeration
  range
}

type LookmlModelExploreFieldTimeInterval {
  name: query_lookml_model_explore_fields_dimensions_items_time_interval_name!
  "The number of intervals this field represents a grouping of."
  count: BigInt!
}

"The type of time interval this field represents a grouping of. Valid values are: \\"day\\", \\"hour\\", \\"minute\\", \\"second\\", \\"millisecond\\", \\"microsecond\\", \\"week\\", \\"month\\", \\"quarter\\", \\"year\\"."
enum query_lookml_model_explore_fields_dimensions_items_time_interval_name {
  day
  hour
  minute
  second
  millisecond
  microsecond
  week
  month
  quarter
  year
}

type LookmlModelExploreFieldMapLayer {
  "URL to the map layer resource."
  url: String!
  "Name of the map layer, as defined in LookML."
  name: String!
  "Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object.."
  feature_key: String
  "Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used."
  property_key: String
  "Which property from the TopoJSON data to use to label the region. When null, property_key should be used."
  property_label_key: String
  "The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections."
  projection: String
  format: query_lookml_model_explore_fields_dimensions_items_map_layer_format!
  "Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key."
  extents_json_url: String
  "The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming."
  max_zoom_level: BigInt
  "The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming."
  min_zoom_level: BigInt
}

"Specifies the data format of the region information. Valid values are: \\"topojson\\", \\"vector_tile_region\\"."
enum query_lookml_model_explore_fields_dimensions_items_map_layer_format {
  topojson
  vector_tile_region
}

type LookmlModelExploreFieldSqlCase {
  "SQL Case label value"
  value: String
  "SQL Case condition expression"
  condition: String
}

type LookmlModelExploreFieldMeasureFilters {
  "Filter field name"
  field: String
  "Filter condition value"
  condition: String
}

"The name of the starting day of the week. Valid values are: \\"monday\\", \\"tuesday\\", \\"wednesday\\", \\"thursday\\", \\"friday\\", \\"saturday\\", \\"sunday\\"."
enum query_lookml_model_explore_fields_dimensions_items_week_start_day {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

type LookmlModelExploreJoins {
  "Name of this join (and name of the view to join)"
  name: String
  "Fields referenced by the join"
  dependent_fields: [String]
  "Fields of the joined view to pull into this explore"
  fields: [String]
  "Name of the dimension in this explore whose value is in the primary key of the joined view"
  foreign_key: String
  "Name of view to join"
  from: String
  "Specifies whether all queries must use an outer join"
  outer_only: Boolean
  "many_to_one, one_to_one, one_to_many, many_to_many"
  relationship: String
  "Names of joins that must always be included in SQL queries"
  required_joins: [String]
  "SQL expression that produces a foreign key"
  sql_foreign_key: String
  "SQL ON expression describing the join condition"
  sql_on: String
  "SQL table name to join"
  sql_table_name: String
  "The join type: left_outer, full_outer, inner, or cross"
  type: String
  "Label to display in UI selectors"
  view_label: String
}

type LookmlModelExploreSupportedMeasureType {
  dimension_type: String
  measure_types: [String]
}

type MergeQuery {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Column Limit"
  column_limit: String
  "Dynamic Fields"
  dynamic_fields: String
  "Unique Id"
  id: String!
  "Pivots"
  pivots: [String]
  "Unique to get results"
  result_maker_id: String
  "Sorts"
  sorts: [String]
  "Source Queries defining the results to be merged."
  source_queries: [MergeQuerySourceQuery]
  "Total"
  total: Boolean!
  "Visualization Config"
  vis_config: JSON
}

type MergeQuerySourceQuery {
  "An array defining which fields of the source query are mapped onto fields of the merge query"
  merge_fields: [MergeFields]
  "Display name"
  name: String
  "Id of the query to merge"
  query_id: String
}

type MergeFields {
  "Field name to map onto in the merged results"
  field_name: String
  "Field name from the source query"
  source_field_name: String
}

type ModelFieldSuggestions {
  "List of suggestions"
  suggestions: [String]!
  "Error message"
  error: String
  "True if result came from the cache"
  from_cache: Boolean!
  "True if this was a hit limit"
  hit_limit: Boolean!
  "True if calcite was used"
  used_calcite_materialization: Boolean!
}

type Model {
  connection: String
  name: String!
  "Array of named value formats"
  value_formats: [ModelNamedValueFormats]
}

type ModelNamedValueFormats {
  format_string: String!
  label: String!
  name: String!
  strict_value_format: Boolean!
}

type ConnectionFeatures {
  "Name of the dialect for this connection"
  dialect_name: String!
  "True for cost estimating support"
  cost_estimate: Boolean!
  "True for multiple database support"
  multiple_databases: Boolean!
  "True for cost estimating support"
  column_search: Boolean!
  "True for secondary index support"
  persistent_table_indexes: Boolean!
  "True for persistent derived table support"
  persistent_derived_tables: Boolean!
  "True for turtles support"
  turtles: Boolean!
  "True for percentile support"
  percentile: Boolean!
  "True for distinct percentile support"
  distinct_percentile: Boolean!
  "True for stable views support"
  stable_views: Boolean!
  "True for millisecond support"
  milliseconds: Boolean!
  "True for microsecond support"
  microseconds: Boolean!
  "True for subtotal support"
  subtotals: Boolean!
  "True for geographic location support"
  location: Boolean!
  "True for timezone conversion in query support"
  timezone: Boolean!
  "True for connection pooling support"
  connection_pooling: Boolean!
}

type Schema {
  "Schema name"
  name: String!
  "True if this is the default schema"
  is_default: Boolean!
}

type SchemaTables {
  "Schema name"
  name: String!
  "True if this is the default schema"
  is_default: Boolean!
  "Tables for this schema"
  tables: [SchemaTable]!
  "True if the table limit was hit while retrieving tables in this schema"
  table_limit_hit: Boolean!
}

type SchemaTable {
  "Schema item name"
  name: String
  "Full name of item"
  sql_escaped_name: String
  "Name of schema"
  schema_name: String
  "Number of data rows"
  rows: BigInt
  "External reference???"
  external: String
  "SQL Runner snippets for connection"
  snippets: [Snippet]!
}

type SchemaColumns {
  "Schema item name"
  name: String
  "Full name of item"
  sql_escaped_name: String
  "Name of schema"
  schema_name: String
  "Columns for this schema"
  columns: [SchemaColumn]!
}

type SchemaColumn {
  "Schema item name"
  name: String
  "Full name of item"
  sql_escaped_name: String
  "Name of schema"
  schema_name: String
  "SQL dialect data type"
  data_type_database: String!
  "Data type"
  data_type: String!
  "Looker data type"
  data_type_looker: String!
  "SQL data type"
  description: String
  "Column data size"
  column_size: BigInt
  "SQL Runner snippets for this connection"
  snippets: [Snippet]!
}

type ColumnSearch {
  "Name of schema containing the table"
  schema_name: String
  "Name of table containing the column"
  table_name: String
  "Name of column"
  column_name: String
  "Column data type"
  data_type: String
}

type MobileSettings {
  "Specifies whether the force authentication option is enabled for mobile"
  mobile_force_authentication: Boolean!
  "Specifies whether mobile access for this instance is enabled."
  mobile_app_integration: Boolean!
  "Specifies feature flag and state relevant to mobile."
  mobile_feature_flags: [MobileFeatureFlags]
}

type MobileFeatureFlags {
  "Specifies the name of feature flag."
  feature_flag_name: String
  "Specifies the state of feature flag"
  feature_flag_state: Boolean!
}

type OauthClientApp {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "The globally unique id of this application"
  client_guid: String!
  "The uri with which this application will receive an auth code by browser redirect."
  redirect_uri: String!
  "The application's display name"
  display_name: String!
  "A description of the application that will be displayed to users"
  description: String!
  "When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused. Setting disabled invalidates existing tokens."
  enabled: Boolean!
  "If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance"
  group_id: String
  "All auth codes, access tokens, and refresh tokens issued for this application prior to this date-time for ALL USERS will be invalid."
  tokens_invalid_before: DateTime!
  "All users who have been activated to use this app"
  activated_users: [UserPublic]!
}

type UserPublic {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "First Name"
  first_name: String!
  "Last Name"
  last_name: String!
  "Full name for display (available only if both first_name and last_name are set)"
  display_name: String
  "URL for the avatar image (may be generic)"
  avatar_url: UriReference!
  "Link to get this item"
  url: UriReference
}

type OIDCConfig {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled."
  alternate_email_login_allowed: Boolean!
  "OpenID Provider Audience"
  audience: String
  "Users will not be allowed to login at all unless a role for them is found in OIDC if set to true"
  auth_requires_role: Boolean!
  "OpenID Provider Authorization Url"
  authorization_endpoint: UriReference
  "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC"
  default_new_user_group_ids: [String]
  "(Read-only) Groups that will be applied to new users the first time they login via OIDC"
  default_new_user_groups: [Group]
  "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC"
  default_new_user_role_ids: [String]
  "(Read-only) Roles that will be applied to new users the first time they login via OIDC"
  default_new_user_roles: [Role]
  "Enable/Disable OIDC authentication for the server"
  enabled: Boolean!
  "(Read-only) Array of mappings between OIDC Groups and Looker Roles"
  groups: [OIDCGroupRead]
  "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'"
  groups_attribute: String
  "(Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids"
  groups_with_role_ids: [OIDCGroupWrite]
  "Relying Party Identifier (provided by OpenID Provider)"
  identifier: String
  "OpenID Provider Issuer"
  issuer: String
  "When this config was last modified"
  modified_at: DateTime
  "User id of user who last modified this config"
  modified_by: String
  "Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'"
  new_user_migration_types: String
  "Array of scopes to request."
  scopes: [String]
  "(Write-Only) Relying Party Secret (provided by OpenID Provider)"
  secret: String
  "Set user roles in Looker based on groups from OIDC"
  set_roles_from_groups: Boolean!
  "Slug to identify configurations that are created in order to run a OIDC config test"
  test_slug: String
  "OpenID Provider Token Url"
  token_endpoint: String
  "Name of user record attributes used to indicate email address field"
  user_attribute_map_email: String
  "Name of user record attributes used to indicate first name"
  user_attribute_map_first_name: String
  "Name of user record attributes used to indicate last name"
  user_attribute_map_last_name: String
  "(Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes"
  user_attributes: [OIDCUserAttributeRead]
  "(Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids"
  user_attributes_with_ids: [OIDCUserAttributeWrite]
  "OpenID Provider User Information Url"
  userinfo_endpoint: UriReference
  "Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login."
  allow_normal_group_membership: Boolean!
  "OIDC auth'd users will inherit roles from non-reflected Looker groups."
  allow_roles_from_normal_groups: Boolean!
  "Allows roles to be directly assigned to OIDC auth'd users."
  allow_direct_roles: Boolean!
  "Link to get this item"
  url: UriReference
}

type OIDCGroupRead {
  "Unique Id"
  id: String!
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in OIDC"
  name: String
  "Looker Roles"
  roles: [Role]
}

type OIDCGroupWrite {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in OIDC"
  name: String
  "Looker Role Ids"
  role_ids: [String]
}

type OIDCUserAttributeRead {
  "Name of User Attribute in OIDC"
  name: String
  "Required to be in OIDC assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attributes"
  user_attributes: [UserAttribute]
}

type OIDCUserAttributeWrite {
  "Name of User Attribute in OIDC"
  name: String
  "Required to be in OIDC assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attribute Ids"
  user_attribute_ids: [String]
}

type PasswordConfig {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Minimum number of characters required for a new password.  Must be between 7 and 100"
  min_length: BigInt
  "Require at least one numeric character"
  require_numeric: Boolean!
  "Require at least one uppercase and one lowercase letter"
  require_upperlower: Boolean!
  "Require at least one special character"
  require_special: Boolean!
}

type Permission {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Permission symbol"
  permission: String
  "Dependency parent symbol"
  parent: String
  "Description"
  description: String
}

type Project {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Project Id"
  id: String!
  "Project display name"
  name: String!
  "If true the project is configured with a git repository"
  uses_git: Boolean!
  "Git remote repository url"
  git_remote_url: String
  "Git username for HTTPS authentication. (For production only, if using user attributes.)"
  git_username: String
  "(Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)"
  git_password: String
  "Git production branch name. Defaults to master. Supported only in Looker 21.0 and higher."
  git_production_branch_name: String!
  "If true, the project uses a git cookie for authentication."
  use_git_cookie_auth: Boolean!
  "User attribute name for username in per-user HTTPS authentication."
  git_username_user_attribute: String
  "User attribute name for password in per-user HTTPS authentication."
  git_password_user_attribute: String
  "Name of the git service provider"
  git_service_name: String
  "Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)"
  git_application_server_http_port: BigInt
  "Scheme that is running on application server (for PRs, file browsing, etc.)"
  git_application_server_http_scheme: String
  "(Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated."
  deploy_secret: String
  "(Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint."
  unset_deploy_secret: Boolean!
  pull_request_mode: mutation_create_project_pull_request_mode!
  "Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository"
  validation_required: Boolean!
  "If true, advanced git release management is enabled for this project"
  git_release_mgmt_enabled: Boolean!
  "Validation policy: If true, the project can be committed with warnings when \`validation_required\` is true. (\`allow_warnings\` does nothing if \`validation_required\` is false)."
  allow_warnings: Boolean!
  "If true the project is an example project and cannot be modified"
  is_example: Boolean!
  "Status of dependencies in your manifest & lockfile"
  dependency_status: String
}

"The git pull request policy for this project. Valid values are: \\"off\\", \\"links\\", \\"recommended\\", \\"required\\"."
enum mutation_create_project_pull_request_mode {
  off
  links
  recommended
  required
}

type Manifest {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Manifest project name"
  name: String
  "Imports for a project"
  imports: [ImportedProject]
  localization_settings: LocalizationSettings
}

type ImportedProject {
  "Dependency name"
  name: String
  "Url for a remote dependency"
  url: String
  "Ref for a remote dependency"
  ref: String
  "Flag signifying if a dependency is remote or local"
  is_remote: Boolean!
}

type LocalizationSettings {
  "Default locale for localization"
  default_locale: String
  "Localization level - strict or permissive"
  localization_level: String
}

union project_validation_results_response @statusCodeTypeName(statusCode: 200, typeName: "ProjectValidationCache") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = ProjectValidationCache | Void_container

type ProjectValidationCache {
  "A list of project errors"
  errors: [ProjectError]
  "A hash value computed from the project's current state"
  project_digest: String
  "A list of models which were not fully validated"
  models_not_validated: [ModelsNotValidated]
  "Duration of project validation in seconds"
  computation_time: Float
  "If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated"
  stale: Boolean!
}

type ProjectError {
  "A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a \\"File not found\\" error will have the same error code regardless of the filename in question or the user's display language"
  code: String
  "Severity: fatal, error, warning, info, success"
  severity: String
  "Error classification: syntax, deprecation, model_configuration, etc"
  kind: String
  "Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker"
  message: String
  "The field associated with this error"
  field_name: String
  "Name of the file containing this error"
  file_path: String
  "Line number in the file of this error"
  line_number: BigInt
  "The model associated with this error"
  model_id: String
  "The explore associated with this error"
  explore: String
  "A link to Looker documentation about this error"
  help_url: String
  "Error parameters"
  params: JSON
  "A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display \\"(?)\\" where sensitive information would appear in the corresponding non-sanitized message"
  sanitized_message: String
}

type ModelsNotValidated {
  "Model name"
  name: String
  "Project file"
  project_file_id: String
}

type Void_container {
  Void: Void @resolveRoot
}

"Represents empty values"
scalar Void

type ProjectWorkspace {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "The id of the project"
  project_id: String
  "The id of the local workspace containing the project files"
  workspace_id: String
  "The status of the local git directory"
  git_status: String
  "Git head revision name"
  git_head: String
  dependency_status: query_project_workspace_dependency_status
  git_branch: GitBranch
  "The lookml syntax used by all files in this project"
  lookml_type: String
}

"Status of the dependencies in your project. Valid values are: \\"lock_optional\\", \\"lock_required\\", \\"lock_error\\", \\"install_none\\"."
enum query_project_workspace_dependency_status {
  lock_optional
  lock_required
  lock_error
  install_none
}

type ProjectFile {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases"
  id: String!
  "Path, file name, and extension of the file relative to the project root directory"
  path: String
  "Display name"
  title: String
  "File type: model, view, etc"
  type: String
  "The extension of the file: .view.lkml, .model.lkml, etc"
  extension: String
  "File mime type"
  mime_type: String
  "State of editability for the file."
  editable: Boolean!
  git_status: GitStatus
}

type GitStatus {
  "Git action: add, delete, etc"
  action: String
  "When true, changes to the local file conflict with the remote repository"
  conflict: Boolean!
  "When true, the file can be reverted to an earlier state"
  revertable: Boolean!
  "Git description of the action"
  text: String
}

type GitConnectionTest {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Human readable string describing the test"
  description: String
  "A short string, uniquely naming this test"
  id: String!
}

type GitConnectionTestResult {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "A short string, uniquely naming this test"
  id: String!
  "Additional data from the test"
  message: String
  "Either 'pass' or 'fail'"
  status: String
}

type LookmlTest {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Name of model containing this test."
  model_name: String!
  "Name of this test."
  name: String!
  "Name of the explore this test runs a query against"
  explore_name: String!
  "The url parameters that can be used to reproduce this test's query on an explore."
  query_url_params: String!
  "Name of the LookML file containing this test."
  file: String!
  "Line number of this test in LookML."
  line: BigInt
}

type LookmlTestResult {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Name of model containing this test."
  model_name: String!
  "Name of this test."
  test_name: String!
  "Number of assertions in this test"
  assertions_count: BigInt!
  "Number of assertions passed in this test"
  assertions_failed: BigInt!
  "A list of any errors encountered by the test."
  errors: [ProjectError]
  "A list of any warnings encountered by the test."
  warnings: [ProjectError]
  "True if this test passsed without errors."
  success: Boolean!
}

type RenderTask {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Date/Time render task was created"
  created_at: String
  "Filter values to apply to the dashboard queries, in URL query format"
  dashboard_filters: String
  "Id of dashboard to render"
  dashboard_id: String
  "Dashboard layout style: single_column or tiled"
  dashboard_style: String
  "Date/Time render task was completed"
  finalized_at: String
  "Output height in pixels. Flowed layouts may ignore this value."
  height: BigInt
  "Id of this render task"
  id: String!
  "Id of look to render"
  look_id: String
  "Id of lookml dashboard to render"
  lookml_dashboard_id: String
  "Id of query to render"
  query_id: String
  "Id of dashboard element to render: UDD dashboard element would be numeric and LookML dashboard element would be model_name::dashboard_title::lookml_link_id"
  dashboard_element_id: String
  "Number of seconds elapsed running queries"
  query_runtime: Float
  "Number of seconds elapsed rendering data"
  render_runtime: Float
  "Output format: pdf, png, or jpg"
  result_format: String
  "Total seconds elapsed for render task"
  runtime: Float
  "Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure"
  status: String
  "Additional information about the current status"
  status_detail: String
  "The user account permissions in which the render task will execute"
  user_id: String
  "Output width in pixels"
  width: BigInt
}

type RepositoryCredential {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Root project Id"
  root_project_id: String!
  "Git remote repository url"
  remote_url: String!
  "Git username for HTTPS authentication."
  git_username: String
  "(Write-Only) Git password for HTTPS authentication."
  git_password: String
  "Public deploy key for SSH authentication."
  ssh_public_key: String
  "Whether the credentials have been configured for the Git Repository."
  is_configured: Boolean!
}

type RoleSearch {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "Name of Role"
  name: String
  permission_set: PermissionSet
  "(Write-Only) Id of permission set"
  permission_set_id: String
  model_set: ModelSet
  "(Write-Only) Id of model set"
  model_set_id: String
  "Count of users with this role"
  user_count: BigInt
  "Link to get this item"
  url: UriReference
  "Link to get list of users with this role"
  users_url: UriReference
}

type RunningQueries {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  user: UserPublic
  query: Query_
  sql_query: SqlQuery
  look: LookBasic
  "Date/Time Query was initiated"
  created_at: String
  "Date/Time Query was completed"
  completed_at: String
  "Query Id"
  query_id: String
  "Source (look, dashboard, queryrunner, explore, etc.)"
  source: String
  "Node Id"
  node_id: String
  "Slug"
  slug: String
  "ID of a Query Task"
  query_task_id: String
  "Cache Key"
  cache_key: String
  "Connection"
  connection_name: String
  "Dialect"
  dialect: String
  "Connection ID"
  connection_id: String
  "Additional Information(Error message or verbose status)"
  message: String
  "Status description"
  status: String
  "Number of seconds elapsed running the Query"
  runtime: Float
  "SQL text of the query as run"
  sql: String
}

type SqlQuery {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "The identifier of the SQL query"
  slug: String!
  "Number of seconds this query took to run the most recent time it was run"
  last_runtime: Float
  "Number of times this query has been run"
  run_count: BigInt!
  "Maximum number of rows this query will display on the SQL Runner page"
  browser_limit: BigInt!
  "SQL query text"
  sql: String!
  "The most recent time this query was run"
  last_run_at: String
  connection: DBConnectionBase
  "Model name this query uses"
  model_name: String
  creator: UserPublic
  "Explore page URL for this SQL query"
  explore_url: String
  "Should this query be rendered as plain text"
  plaintext: Boolean!
  "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \\"type\\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties."
  vis_config: JSON
  "ID of the ResultMakerLookup entry."
  result_maker_id: String
}

type DBConnectionBase {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Name of the connection. Also used as the unique identifier"
  name: String!
  dialect: Dialect
  "SQL Runner snippets for this connection"
  snippets: [Snippet]!
  "True if PDTs are enabled on this connection"
  pdts_enabled: Boolean!
}

type SamlConfig {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Enable/Disable Saml authentication for the server"
  enabled: Boolean!
  "Identity Provider Certificate (provided by IdP)"
  idp_cert: String
  "Identity Provider Url (provided by IdP)"
  idp_url: String
  "Identity Provider Issuer (provided by IdP)"
  idp_issuer: String
  "Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP."
  idp_audience: String
  "Count of seconds of clock drift to allow when validating timestamps of assertions."
  allowed_clock_drift: BigInt
  "Name of user record attributes used to indicate email address field"
  user_attribute_map_email: String
  "Name of user record attributes used to indicate first name"
  user_attribute_map_first_name: String
  "Name of user record attributes used to indicate last name"
  user_attribute_map_last_name: String
  "Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'"
  new_user_migration_types: String
  "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled."
  alternate_email_login_allowed: Boolean!
  "Slug to identify configurations that are created in order to run a Saml config test"
  test_slug: String
  "When this config was last modified"
  modified_at: String
  "User id of user who last modified this config"
  modified_by: String
  "(Read-only) Roles that will be applied to new users the first time they login via Saml"
  default_new_user_roles: [Role]
  "(Read-only) Groups that will be applied to new users the first time they login via Saml"
  default_new_user_groups: [Group]
  "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml"
  default_new_user_role_ids: [String]
  "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml"
  default_new_user_group_ids: [String]
  "Set user roles in Looker based on groups from Saml"
  set_roles_from_groups: Boolean!
  "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'"
  groups_attribute: String
  "(Read-only) Array of mappings between Saml Groups and Looker Roles"
  groups: [SamlGroupRead]
  "(Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids"
  groups_with_role_ids: [SamlGroupWrite]
  "Users will not be allowed to login at all unless a role for them is found in Saml if set to true"
  auth_requires_role: Boolean!
  "(Read-only) Array of mappings between Saml User Attributes and Looker User Attributes"
  user_attributes: [SamlUserAttributeRead]
  "(Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids"
  user_attributes_with_ids: [SamlUserAttributeWrite]
  "Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']"
  groups_finder_type: String
  "Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'"
  groups_member_value: String
  "Bypass the login page when user authentication is required. Redirect to IdP immediately instead."
  bypass_login_page: Boolean!
  "Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login."
  allow_normal_group_membership: Boolean!
  "SAML auth'd users will inherit roles from non-reflected Looker groups."
  allow_roles_from_normal_groups: Boolean!
  "Allows roles to be directly assigned to SAML auth'd users."
  allow_direct_roles: Boolean!
  "Link to get this item"
  url: UriReference
}

type SamlGroupRead {
  "Unique Id"
  id: String!
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in Saml"
  name: String
  "Looker Roles"
  roles: [Role]
  "Link to saml config"
  url: UriReference
}

type SamlGroupWrite {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in Saml"
  name: String
  "Looker Role Ids"
  role_ids: [String]
  "Link to saml config"
  url: UriReference
}

type SamlUserAttributeRead {
  "Name of User Attribute in Saml"
  name: String
  "Required to be in Saml assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attributes"
  user_attributes: [UserAttribute]
  "Link to saml config"
  url: UriReference
}

type SamlUserAttributeWrite {
  "Name of User Attribute in Saml"
  name: String
  "Required to be in Saml assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attribute Ids"
  user_attribute_ids: [String]
  "Link to saml config"
  url: UriReference
}

type ScheduledPlan {
  "Name of this scheduled plan"
  name: String
  "User Id which owns this scheduled plan"
  user_id: String
  "Whether schedule is run as recipient (only applicable for email recipients)"
  run_as_recipient: Boolean!
  "Whether the ScheduledPlan is enabled"
  enabled: Boolean!
  "Id of a look"
  look_id: String
  "Id of a dashboard"
  dashboard_id: String
  "Id of a LookML dashboard"
  lookml_dashboard_id: String
  "Query string to run look or dashboard with"
  filters_string: String
  "(DEPRECATED) Alias for filters_string field"
  dashboard_filters: String
  "Delivery should occur if running the dashboard or look returns results"
  require_results: Boolean!
  "Delivery should occur if the dashboard look does not return results"
  require_no_results: Boolean!
  "Delivery should occur if data have changed since the last run"
  require_change: Boolean!
  "Will run an unlimited query and send all results."
  send_all_results: Boolean!
  "Vixie-Style crontab specification when to run"
  crontab: String
  "Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)"
  datagroup: String
  "Timezone for interpreting the specified crontab (default is Looker instance timezone)"
  timezone: String
  "Query id"
  query_id: String
  "Scheduled plan destinations"
  scheduled_plan_destination: [ScheduledPlanDestination]
  "Whether the plan in question should only be run once (usually for testing)"
  run_once: Boolean!
  "Whether links back to Looker should be included in this ScheduledPlan"
  include_links: Boolean!
  "Custom url domain for the scheduled entity"
  custom_url_base: String
  "Custom url path and parameters for the scheduled entity"
  custom_url_params: String
  "Custom url label for the scheduled entity"
  custom_url_label: String
  "Whether to show custom link back instead of standard looker link"
  show_custom_url: Boolean!
  "The size of paper the PDF should be formatted to fit. Valid values are: \\"letter\\", \\"legal\\", \\"tabloid\\", \\"a0\\", \\"a1\\", \\"a2\\", \\"a3\\", \\"a4\\", \\"a5\\"."
  pdf_paper_size: String
  "Whether the PDF should be formatted for landscape orientation"
  pdf_landscape: Boolean!
  "Whether this schedule is in an embed context or not"
  embed: Boolean!
  "Color scheme of the dashboard if applicable"
  color_theme: String
  "Whether or not to expand table vis to full length"
  long_tables: Boolean!
  "The pixel width at which we render the inline table visualizations"
  inline_table_width: BigInt
  "Unique Id"
  id: String!
  "Date and time when ScheduledPlan was created"
  created_at: DateTime
  "Date and time when ScheduledPlan was last updated"
  updated_at: DateTime
  "Title"
  title: String
  user: UserPublic
  "When the ScheduledPlan will next run (null if running once)"
  next_run_at: DateTime
  "When the ScheduledPlan was last run"
  last_run_at: DateTime
  "Operations the current user is able to perform on this object"
  can: JSON!
}

type ScheduledPlanDestination {
  "Unique Id"
  id: String!
  "Id of a scheduled plan you own"
  scheduled_plan_id: String
  "The data format to send to the given destination. Supported formats vary by destination, but include: \\"txt\\", \\"csv\\", \\"inline_json\\", \\"json\\", \\"json_detail\\", \\"xlsx\\", \\"html\\", \\"wysiwyg_pdf\\", \\"assembled_pdf\\", \\"wysiwyg_png\\""
  format: String
  "Are values formatted? (containing currency symbols, digit separators, etc."
  apply_formatting: Boolean!
  "Whether visualization options are applied to the results."
  apply_vis: Boolean!
  "Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'."
  address: String
  "Whether the recipient is a Looker user on the current instance (only applicable for email recipients)"
  looker_recipient: Boolean!
  "Type of the address ('email', 'webhook', 's3', or 'sftp')"
  type: String
  "JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username."
  parameters: String
  "(Write-Only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password."
  secret_parameters: String
  "Optional message to be included in scheduled emails"
  message: String
}

type SessionConfig {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Allow users to have persistent sessions when they login"
  allow_persistent_sessions: Boolean!
  "Number of minutes for user sessions.  Must be between 5 and 43200"
  session_minutes: BigInt
  "Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time)."
  unlimited_sessions_per_user: Boolean!
  "Enforce session logout for sessions that are inactive for 15 minutes."
  use_inactivity_based_logout: Boolean!
  "Track location of session when user logs in."
  track_session_location: Boolean!
}

type ApiSession {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "The id of active workspace for this session"
  workspace_id: String
  "The id of the actual user in the case when this session represents one user sudo'ing as another"
  sudo_user_id: String
}

type Setting {
  "Toggle extension framework on or off"
  extension_framework_enabled: Boolean!
  "(DEPRECATED) Toggle extension extension load url on or off. Do not use. This is temporary setting that will eventually become a noop and subsequently deleted."
  extension_load_url_enabled: Boolean!
  "Toggle marketplace auto install on or off. Note that auto install only runs if marketplace is enabled."
  marketplace_auto_install_enabled: Boolean!
  "Toggle marketplace on or off"
  marketplace_enabled: Boolean!
  privatelabel_configuration: PrivatelabelConfiguration
  custom_welcome_email: CustomWelcomeEmail
  "Toggle onboarding on or off"
  onboarding_enabled: Boolean!
  "Change instance-wide default timezone"
  timezone: String!
  "Toggle user-specific timezones on or off"
  allow_user_timezones: Boolean!
  "Toggle default future connectors on or off"
  data_connector_default_enabled: Boolean!
  "Change the base portion of your Looker instance URL setting"
  host_url: String!
  "(Write-Only) If warnings are preventing a host URL change, this parameter allows for overriding warnings to force update the setting. Does not directly change any Looker settings."
  override_warnings: Boolean!
  "An array of Email Domain Allowlist of type string for Scheduled Content"
  email_domain_allowlist: [String]!
  "Toggle cookieless embed setting"
  embed_cookieless_v2: Boolean!
}

type PrivatelabelConfiguration {
  "Customer logo image. Expected base64 encoded data (write-only)"
  logo_file: String
  "Logo image url (read-only)"
  logo_url: String
  "Custom favicon image. Expected base64 encoded data (write-only)"
  favicon_file: String
  "Favicon image url (read-only)"
  favicon_url: String
  "Default page title"
  default_title: String
  "Boolean to toggle showing help menus"
  show_help_menu: Boolean!
  "Boolean to toggle showing docs"
  show_docs: Boolean!
  "Boolean to toggle showing email subscription options."
  show_email_sub_options: Boolean!
  "Boolean to toggle mentions of Looker in emails"
  allow_looker_mentions: Boolean!
  "Boolean to toggle links to Looker in emails"
  allow_looker_links: Boolean!
  "Allow subject line and email heading customization in customized emails”"
  custom_welcome_email_advanced: Boolean!
  "Remove the word Looker from appearing in the account setup page"
  setup_mentions: Boolean!
  "Remove Looker logo from Alerts"
  alerts_logo: Boolean!
  "Remove Looker links from Alerts"
  alerts_links: Boolean!
  "Remove Looker mentions in home folder page when you don’t have any items saved"
  folders_mentions: Boolean!
}

type SmtpStatus {
  "Overall SMTP status of cluster"
  is_valid: Boolean!
  "Total number of nodes in cluster"
  node_count: BigInt
  "array of each node's status containing is_valid, message, hostname"
  node_status: [SmtpNodeStatus]
}

type SmtpNodeStatus {
  "SMTP status of node"
  is_valid: Boolean!
  "Error message for node"
  message: String
  "Host name of node"
  hostname: String
}

type Folder {
  "Unique Name"
  name: String!
  "Id of Parent. If the parent id is null, this is a root-level entry"
  parent_id: String
  "Unique Id"
  id: String!
  "Id of content metadata"
  content_metadata_id: String
  "Time the space was created"
  created_at: DateTime
  "User Id of Creator"
  creator_id: String
  "Children Count"
  child_count: BigInt
  "Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login"
  external_id: String
  "Folder is an embed folder"
  is_embed: Boolean!
  "Folder is the root embed shared folder"
  is_embed_shared_root: Boolean!
  "Folder is the root embed users folder"
  is_embed_users_root: Boolean!
  "Folder is a user's personal folder"
  is_personal: Boolean!
  "Folder is descendant of a user's personal folder"
  is_personal_descendant: Boolean!
  "Folder is the root shared folder"
  is_shared_root: Boolean!
  "Folder is the root user folder"
  is_users_root: Boolean!
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Dashboards"
  dashboards: [DashboardBase]
  "Looks"
  looks: [LookWithDashboards]
}

type LookWithDashboards {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Id of content metadata"
  content_metadata_id: String
  "Unique Id"
  id: String!
  "Look Title"
  title: String
  "User Id"
  user_id: String
  "Content Favorite Id"
  content_favorite_id: String
  "Time that the Look was created."
  created_at: DateTime
  "Whether or not a look is 'soft' deleted."
  deleted: Boolean!
  "Time that the Look was deleted."
  deleted_at: DateTime
  "Id of User that deleted the look."
  deleter_id: String
  "Description"
  description: String
  "Embed Url"
  embed_url: String
  "Excel File Url"
  excel_file_url: String
  "Number of times favorited"
  favorite_count: BigInt
  "Google Spreadsheet Formula"
  google_spreadsheet_formula: String
  "Image Embed Url"
  image_embed_url: String
  "auto-run query when Look viewed"
  is_run_on_load: Boolean!
  "Time that the Look was last accessed by any user"
  last_accessed_at: DateTime
  "Id of User that last updated the look."
  last_updater_id: String
  "Time last viewed in the Looker web UI"
  last_viewed_at: DateTime
  model: LookModel
  "Is Public"
  public: Boolean!
  "Public Slug"
  public_slug: String
  "Public Url"
  public_url: String
  "Query Id"
  query_id: String
  "Short Url"
  short_url: String
  folder: FolderBase
  "Folder Id"
  folder_id: String
  "Time that the Look was updated."
  updated_at: DateTime
  "Number of times viewed in the Looker web UI"
  view_count: BigInt
  "Dashboards"
  dashboards: [DashboardBase]
}

type SupportAccessAllowlistEntry {
  "Unique ID"
  id: String!
  "Email address"
  email: String
  "Full name of allowlisted user"
  full_name: String
  "Reason the Email is included in the Allowlist"
  reason: String
  "Date the Email was added to the Allowlist"
  created_date: DateTime
}

type SupportAccessStatus {
  "Whether or not Support Access is open"
  open: Boolean!
  "Time that Support Access will expire"
  open_until: DateTime
}

type Theme {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Timestamp for when this theme becomes active. Null=always"
  begin_at: DateTime
  "Timestamp for when this theme expires. Null=never"
  end_at: DateTime
  "Unique Id"
  id: String!
  "Name of theme. Can only be alphanumeric and underscores."
  name: String!
  settings: ThemeSettings
}

type ThemeSettings {
  "Default background color"
  background_color: String!
  "Base font size for scaling fonts (only supported by legacy dashboards)"
  base_font_size: String
  "Optional. ID of color collection to use with the theme. Use an empty string for none."
  color_collection_id: String!
  "Default font color"
  font_color: String
  "Primary font family"
  font_family: String!
  "Source specification for font"
  font_source: String
  "(DEPRECATED) Info button color"
  info_button_color: String!
  "Primary button color"
  primary_button_color: String!
  "Toggle to show filters. Defaults to true."
  show_filters_bar: Boolean!
  "Toggle to show the title. Defaults to true."
  show_title: Boolean!
  "Text color for text tiles"
  text_tile_text_color: String!
  "Background color for tiles"
  tile_background_color: String!
  "Background color for text tiles"
  text_tile_background_color: String!
  "Text color for tiles"
  tile_text_color: String!
  "Color for titles"
  title_color: String!
  "(DEPRECATED) Warning button color"
  warn_button_color: String!
  "The text alignment of tile titles (New Dashboards)"
  tile_title_alignment: String!
  "Toggles the tile shadow (not supported)"
  tile_shadow: Boolean!
  "Toggle to show the dashboard last updated indicator. Defaults to true."
  show_last_updated_indicator: Boolean!
  "Toggle to show reload data icon/button. Defaults to true."
  show_reload_data_icon: Boolean!
  "Toggle to show the dashboard actions menu. Defaults to true."
  show_dashboard_menu: Boolean!
  "Toggle to show the filters icon/toggle. Defaults to true."
  show_filters_toggle: Boolean!
  "Toggle to show the dashboard header. Defaults to true."
  show_dashboard_header: Boolean!
  "Toggle to center the dashboard title. Defaults to false."
  center_dashboard_title: Boolean!
  "Dashboard title font size."
  dashboard_title_font_size: String!
  "Default box shadow."
  box_shadow: String!
}

type Timezone {
  "Timezone"
  value: String
  "Description of timezone"
  label: String
  "Timezone group (e.g Common, Other, etc.)"
  group: String
}

type SshServer {
  "A unique id used to identify this SSH Server"
  ssh_server_id: String!
  "The name to identify this SSH Server"
  ssh_server_name: String!
  "The hostname or ip address of the SSH Server"
  ssh_server_host: String!
  "The port to connect to on the SSH Server"
  ssh_server_port: BigInt!
  "The username used to connect to the SSH Server"
  ssh_server_user: String!
  "The md5 fingerprint used to identify the SSH Server"
  finger_print: String!
  "The SHA fingerprint used to identify the SSH Server"
  sha_finger_print: String!
  "The SSH public key created for this instance"
  public_key: String!
  "The current connection status to this SSH Server"
  status: String!
}

type SshTunnel {
  "Unique ID for the tunnel"
  tunnel_id: String!
  "SSH Server ID"
  ssh_server_id: String!
  "SSH Server name"
  ssh_server_name: String!
  "SSH Server Hostname or IP Address"
  ssh_server_host: String!
  "SSH Server port"
  ssh_server_port: BigInt!
  "Username used to connect to the SSH Server"
  ssh_server_user: String!
  "Time of last connect attempt"
  last_attempt: String!
  "Localhost Port used by the Looker instance to connect to the remote DB"
  local_host_port: BigInt!
  "Hostname or IP Address of the Database Server"
  database_host: String!
  "Port that the Database Server is listening on"
  database_port: BigInt!
  "Current connection status for this Tunnel"
  status: String!
}

type SshPublicKey {
  "The SSH public key created for this instance"
  public_key: String!
}

type UserAttributeGroupValue {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id of this group-attribute relation"
  id: String!
  "Id of group"
  group_id: String
  "Id of user attribute"
  user_attribute_id: String
  "If true, the \\"value\\" field will be null, because the attribute settings block access to this value"
  value_is_hidden: Boolean!
  "Precedence for resolving value for user"
  rank: BigInt
  "Value of user attribute for group"
  value: String
}

type UserLoginLockout {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Hash of user's client id"
  key: String
  "Authentication method for login failures"
  auth_type: String
  "IP address of most recent failed attempt"
  ip: String
  "User ID"
  user_id: String
  "Remote ID of user if using LDAP"
  remote_id: String
  "User's name"
  full_name: String
  "Email address associated with the user's account"
  email: String
  "Number of failures that triggered the lockout"
  fail_count: BigInt
  "Time when lockout was triggered"
  lockout_at: DateTime
}

type UserAttributeWithValue {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Name of user attribute"
  name: String
  "Human-friendly label for user attribute"
  label: String
  "Precedence for setting value on user (lowest wins)"
  rank: BigInt
  "Value of attribute for user"
  value: String
  "Id of User"
  user_id: String
  "Can the user set this value"
  user_can_edit: Boolean!
  "If true, the \\"value\\" field will be null, because the attribute settings block access to this value"
  value_is_hidden: Boolean!
  "Id of User Attribute"
  user_attribute_id: String
  "How user got this value for this attribute"
  source: String
  "If this user attribute is hidden, allowed list of destinations to which it may be sent."
  hidden_value_domain_whitelist: String
}

type ApiVersion {
  "Current Looker release version number"
  looker_release_version: String!
  current_version: ApiVersionElement
  "Array of versions supported by this Looker instance"
  supported_versions: [ApiVersionElement]!
  "API server base url"
  api_server_url: String!
  "Web server base url"
  web_server_url: String!
}

type ApiVersionElement {
  "Version number as it appears in '/api/xxx/' urls"
  version: String
  "Full version number including minor version"
  full_version: String
  "Status of this version"
  status: String
  "Url for swagger.json for this version"
  swagger_url: UriReference
}

type WhitelabelConfiguration {
  "Unique Id"
  id: String!
  "Customer logo image. Expected base64 encoded data (write-only)"
  logo_file: String
  "Logo image url (read-only)"
  logo_url: String
  "Custom favicon image. Expected base64 encoded data (write-only)"
  favicon_file: String
  "Favicon image url (read-only)"
  favicon_url: String
  "Default page title"
  default_title: String
  "Boolean to toggle showing help menus"
  show_help_menu: Boolean!
  "Boolean to toggle showing docs"
  show_docs: Boolean!
  "Boolean to toggle showing email subscription options."
  show_email_sub_options: Boolean!
  "Boolean to toggle mentions of Looker in emails"
  allow_looker_mentions: Boolean!
  "Boolean to toggle links to Looker in emails"
  allow_looker_links: Boolean!
  "Allow subject line and email heading customization in customized emails”"
  custom_welcome_email_advanced: Boolean!
  "Remove the word Looker from appearing in the account setup page"
  setup_mentions: Boolean!
  "Remove Looker logo from Alerts"
  alerts_logo: Boolean!
  "Remove Looker links from Alerts"
  alerts_links: Boolean!
  "Remove Looker mentions in home folder page when you don’t have any items saved"
  folders_mentions: Boolean!
}

type Workspace {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "The unique id of this user workspace. Predefined workspace ids include \\"production\\" and \\"dev\\""
  id: String!
  "The local state of each project in the workspace"
  projects: [Project]
}

type Mutation {
  "### Create an async query task\\n\\nCreates a query task (job) to run a previously created query asynchronously. Returns a Query Task ID.\\n\\nUse [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task.\\nAfter the query task status reaches \\"Complete\\", use [query_task_results(query_task_id)](#!/Query/query_task_results) to fetch the results of the query.\\n"
  create_query_task(
    "Row limit (may override the limit in the saved query)."
    limit: BigInt
    "Apply model-specified formatting to each result."
    apply_formatting: Boolean
    "Apply visualization options to results."
    apply_vis: Boolean
    "Get results from cache if available."
    cache: Boolean
    "Generate drill links (only applicable to 'json_detail' format."
    generate_drill_links: Boolean
    "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used."
    force_production: Boolean
    "Retrieve any results from cache even if the results have expired."
    cache_only: Boolean
    "Prefix to use for drill links (url encoded)."
    path_prefix: String
    "Rebuild PDTS used in query."
    rebuild_pdts: Boolean
    "Perform table calculations on query results"
    server_table_calcs: Boolean
    "DEPRECATED. Render width for image formats. Note that this parameter is always ignored by this method."
    image_width: BigInt
    "DEPRECATED. Render height for image formats. Note that this parameter is always ignored by this method."
    image_height: BigInt
    "Requested fields"
    fields: String
    input: CreateQueryTask_Input
  ): QueryTask @httpOperation(path: "/query_tasks", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"apply_formatting\\":\\"apply_formatting\\",\\"apply_vis\\":\\"apply_vis\\",\\"cache\\":\\"cache\\",\\"generate_drill_links\\":\\"generate_drill_links\\",\\"force_production\\":\\"force_production\\",\\"cache_only\\":\\"cache_only\\",\\"path_prefix\\":\\"path_prefix\\",\\"rebuild_pdts\\":\\"rebuild_pdts\\",\\"server_table_calcs\\":\\"server_table_calcs\\",\\"image_width\\":\\"image_width\\",\\"image_height\\":\\"image_height\\",\\"fields\\":\\"fields\\"}")
  "### Create a query.\\n\\nThis allows you to create a new query that you can later run. Looker queries are immutable once created\\nand are not deleted. If you create a query that is exactly like an existing query then the existing query\\nwill be returned and no new query will be created. Whether a new query is created or not, you can use\\nthe 'id' in the returned query with the 'run' method.\\n\\nThe query parameters are passed as json in the body of the request.\\n\\n"
  create_query(
    "Requested fields."
    fields: String
    input: Query__Input
  ): Query_ @httpOperation(path: "/queries", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Run the query that is specified inline in the posted body.\\n\\nThis allows running a query as defined in json in the posted body. This combines\\nthe two actions of posting & running a query into one step.\\n\\nHere is an example body in json:\\n\`\`\`\\n{\\n  \\"model\\":\\"thelook\\",\\n  \\"view\\":\\"inventory_items\\",\\n  \\"fields\\":[\\"category.name\\",\\"inventory_items.days_in_inventory_tier\\",\\"products.count\\"],\\n  \\"filters\\":{\\"category.name\\":\\"socks\\"},\\n  \\"sorts\\":[\\"products.count desc 0\\"],\\n  \\"limit\\":\\"500\\",\\n  \\"query_timezone\\":\\"America/Los_Angeles\\"\\n}\\n\`\`\`\\n\\nWhen using the Ruby SDK this would be passed as a Ruby hash like:\\n\`\`\`\\n{\\n :model=>\\"thelook\\",\\n :view=>\\"inventory_items\\",\\n :fields=>\\n  [\\"category.name\\",\\n   \\"inventory_items.days_in_inventory_tier\\",\\n   \\"products.count\\"],\\n :filters=>{:\\"category.name\\"=>\\"socks\\"},\\n :sorts=>[\\"products.count desc 0\\"],\\n :limit=>\\"500\\",\\n :query_timezone=>\\"America/Los_Angeles\\",\\n}\\n\`\`\`\\n\\nThis will return the result of running the query in the format specified by the 'result_format' parameter.\\n\\nSupported formats:\\n\\n| result_format | Description\\n| :-----------: | :--- |\\n| json | Plain json\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| md | Simple markdown\\n| xlsx | MS Excel spreadsheet\\n| sql | Returns the generated SQL rather than running the query\\n| png | A PNG image of the visualization of the query\\n| jpg | A JPG image of the visualization of the query\\n\\n\\n"
  run_inline_query(
    "Format of result"
    result_format: String!
    "Row limit (may override the limit in the saved query)."
    limit: BigInt
    "Apply model-specified formatting to each result."
    apply_formatting: Boolean
    "Apply visualization options to results."
    apply_vis: Boolean
    "Get results from cache if available."
    cache: Boolean
    "Render width for image formats."
    image_width: BigInt
    "Render height for image formats."
    image_height: BigInt
    "Generate drill links (only applicable to 'json_detail' format."
    generate_drill_links: Boolean
    "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used."
    force_production: Boolean
    "Retrieve any results from cache even if the results have expired."
    cache_only: Boolean
    "Prefix to use for drill links (url encoded)."
    path_prefix: String
    "Rebuild PDTS used in query."
    rebuild_pdts: Boolean
    "Perform table calculations on query results"
    server_table_calcs: Boolean
    input: Query__Input
  ): String @httpOperation(path: "/queries/run/{args.result_format}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"limit\\":\\"limit\\",\\"apply_formatting\\":\\"apply_formatting\\",\\"apply_vis\\":\\"apply_vis\\",\\"cache\\":\\"cache\\",\\"image_width\\":\\"image_width\\",\\"image_height\\":\\"image_height\\",\\"generate_drill_links\\":\\"generate_drill_links\\",\\"force_production\\":\\"force_production\\",\\"cache_only\\":\\"cache_only\\",\\"path_prefix\\":\\"path_prefix\\",\\"rebuild_pdts\\":\\"rebuild_pdts\\",\\"server_table_calcs\\":\\"server_table_calcs\\"}")
  "### Present client credentials to obtain an authorization token\\n\\nLooker API implements the OAuth2 [Resource Owner Password Credentials Grant](https://cloud.google.com/looker/docs/r/api/outh2_resource_owner_pc) pattern.\\nThe client credentials required for this login must be obtained by creating an API key on a user account\\nin the Looker Admin console. The API key consists of a public \`client_id\` and a private \`client_secret\`.\\n\\nThe access token returned by \`login\` must be used in the HTTP Authorization header of subsequent\\nAPI requests, like this:\\n\`\`\`\\nAuthorization: token 4QDkCyCtZzYgj4C2p2cj3csJH7zqS5RzKs2kTnG4\\n\`\`\`\\nReplace \\"4QDkCy...\\" with the \`access_token\` value returned by \`login\`.\\nThe word \`token\` is a string literal and must be included exactly as shown.\\n\\nThis function can accept \`client_id\` and \`client_secret\` parameters as URL query params or as www-form-urlencoded params in the body of the HTTP request. Since there is a small risk that URL parameters may be visible to intermediate nodes on the network route (proxies, routers, etc), passing credentials in the body of the request is considered more secure than URL params.\\n\\nExample of passing credentials in the HTTP request body:\\n\`\`\`\`\\nPOST HTTP /login\\nContent-Type: application/x-www-form-urlencoded\\n\\nclient_id=CGc9B7v7J48dQSJvxxx&client_secret=nNVS9cSS3xNpSC9JdsBvvvvv\\n\`\`\`\`\\n\\n### Best Practice:\\nAlways pass credentials in body params. Pass credentials in URL query params **only** when you cannot pass body params due to application, tool, or other limitations.\\n\\nFor more information and detailed examples of Looker API authorization, see [How to Authenticate to Looker API](https://github.com/looker/looker-sdk-ruby/blob/master/authentication.md).\\n"
  login(
    "client_id part of API Key."
    client_id: String
    "client_secret part of API Key."
    client_secret: String
  ): AccessToken @httpOperation(path: "/login", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"client_id\\":\\"client_id\\",\\"client_secret\\":\\"client_secret\\"}")
  "### Create an access token that runs as a given user.\\n\\nThis can only be called by an authenticated admin user. It allows that admin to generate a new\\nauthentication token for the user with the given user id. That token can then be used for subsequent\\nAPI calls - which are then performed *as* that target user.\\n\\nThe target user does *not* need to have a pre-existing API client_id/client_secret pair. And, no such\\ncredentials are created by this call.\\n\\nThis allows for building systems where api user authentication for an arbitrary number of users is done\\noutside of Looker and funneled through a single 'service account' with admin permissions. Note that a\\nnew access token is generated on each call. If target users are going to be making numerous API\\ncalls in a short period then it is wise to cache this authentication token rather than call this before\\neach of those API calls.\\n\\nSee 'login' for more detail on the access token and how to use it.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  login_user(
    "Id of user."
    user_id: String!
    "When true (default), API calls using the returned access_token are attributed to the admin user who created the access_token. When false, API activity is attributed to the user the access_token runs as. False requires a looker license."
    associative: Boolean
  ): AccessToken @httpOperation(path: "/login/{args.user_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"associative\\":\\"associative\\"}")
  "### Logout of the API and invalidate the current access token.\\n"
  logout: String @httpOperation(path: "/logout", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "Follow an alert."
  follow_alert(
    "ID of an alert"
    alert_id: String!
  ): Void @httpOperation(path: "/alerts/{args.alert_id}/follow", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "Unfollow an alert."
  unfollow_alert(
    "ID of an alert"
    alert_id: String!
  ): Void @httpOperation(path: "/alerts/{args.alert_id}/follow", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update select alert fields\\n# Available fields: \`owner_id\`, \`is_disabled\`, \`disabled_reason\`, \`is_public\`, \`threshold\`\\n#\\n"
  update_alert_field(
    "ID of an alert"
    alert_id: String!
    input: AlertPatch_Input
  ): Alert @httpOperation(path: "/alerts/{args.alert_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Update an alert\\n# Required fields: \`owner_id\`, \`field\`, \`destinations\`, \`comparison_type\`, \`threshold\`, \`cron\`\\n#\\n"
  update_alert(
    "ID of an alert"
    alert_id: String!
    input: Alert_Input
  ): Alert @httpOperation(path: "/alerts/{args.alert_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Delete an alert by a given alert ID\\n"
  delete_alert(
    "ID of an alert"
    alert_id: String!
  ): Void @httpOperation(path: "/alerts/{args.alert_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a new alert and return details of the newly created object\\n\\nRequired fields: \`field\`, \`destinations\`, \`comparison_type\`, \`threshold\`, \`cron\`\\n\\nExample Request:\\nRun alert on dashboard element '103' at 5am every day. Send an email to 'test@test.com' if inventory for Los Angeles (using dashboard filter \`Warehouse Name\`) is lower than 1,000\\n\`\`\`\\n{\\n  \\"cron\\": \\"0 5 * * *\\",\\n  \\"custom_title\\": \\"Alert when LA inventory is low\\",\\n  \\"dashboard_element_id\\": 103,\\n  \\"applied_dashboard_filters\\": [\\n    {\\n      \\"filter_title\\": \\"Warehouse Name\\",\\n      \\"field_name\\": \\"distribution_centers.name\\",\\n      \\"filter_value\\": \\"Los Angeles CA\\",\\n      \\"filter_description\\": \\"is Los Angeles CA\\"\\n    }\\n  ],\\n  \\"comparison_type\\": \\"LESS_THAN\\",\\n  \\"destinations\\": [\\n    {\\n      \\"destination_type\\": \\"EMAIL\\",\\n      \\"email_address\\": \\"test@test.com\\"\\n    }\\n  ],\\n  \\"field\\": {\\n    \\"title\\": \\"Number on Hand\\",\\n    \\"name\\": \\"inventory_items.number_on_hand\\"\\n  },\\n  \\"is_disabled\\": false,\\n  \\"is_public\\": true,\\n  \\"threshold\\": 1000\\n}\\n\`\`\`\\n"
  create_alert(input: Alert_Input): Alert @httpOperation(path: "/alerts", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Enqueue an Alert by ID\\n"
  enqueue_alert(
    "ID of an alert"
    alert_id: String!
    "Whether to enqueue an alert again if its already running."
    force: Boolean
  ): Void @httpOperation(path: "/alerts/{args.alert_id}/enqueue", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"force\\":\\"force\\"}")
  "# Reads a Notification\\n  The endpoint marks a given alert notification as read by the user, in case it wasn't already read. The AlertNotification model is updated for this purpose. It returns the notification as a response.\\n"
  read_alert_notification(
    "ID of a notification"
    alert_notification_id: String!
  ): AlertNotifications @httpOperation(path: "/alert_notifications/{args.alert_notification_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "Remove *all* artifacts from a namespace. Purged artifacts are permanently deleted\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  purge_artifacts(
    "Artifact storage namespace"
    namespace: String!
  ): Void @httpOperation(path: "/artifact/{args.namespace}/purge", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Delete one or more artifacts\\n\\nTo avoid rate limiting on deletion requests, multiple artifacts can be deleted at the same time by using a comma-delimited list of artifact keys.\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  delete_artifact(
    "Artifact storage namespace"
    namespace: String!
    "Comma-delimited list of keys. Wildcards not allowed."
    key: String!
  ): Void @httpOperation(path: "/artifact/{args.namespace}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"key\\":\\"key\\"}")
  "### Create or update one or more artifacts\\n\\nOnly \`key\` and \`value\` are required to _create_ an artifact.\\nTo _update_ an artifact, its current \`version\` value must be provided.\\n\\nIn the following example \`body\` payload, \`one\` and \`two\` are existing artifacts, and \`three\` is new:\\n\\n\`\`\`json\\n[\\n  { \\"key\\": \\"one\\", \\"value\\": \\"[ \\\\\\"updating\\\\\\", \\\\\\"existing\\\\\\", \\\\\\"one\\\\\\" ]\\", \\"version\\": 10, \\"content_type\\": \\"application/json\\" },\\n  { \\"key\\": \\"two\\", \\"value\\": \\"updating existing two\\", \\"version\\": 20 },\\n  { \\"key\\": \\"three\\", \\"value\\": \\"creating new three\\" },\\n]\\n\`\`\`\\n\\nNotes for this body:\\n\\n- The \`value\` for \`key\` **one** is a JSON payload, so a \`content_type\` override is needed. This override must be done **every** time a JSON value is set.\\n- The \`version\` values for **one** and **two** mean they have been saved 10 and 20 times, respectively.\\n- If \`version\` is **not** provided for an existing artifact, the entire request will be refused and a \`Bad Request\` response will be sent.\\n- If \`version\` is provided for an artifact, it is only used for helping to prevent inadvertent data overwrites. It cannot be used to **set** the version of an artifact. The Looker server controls \`version\`.\\n- We suggest encoding binary values as base64. Because the MIME content type for base64 is detected as plain text, also provide \`content_type\` to correctly indicate the value's type for retrieval and client-side processing.\\n\\nBecause artifacts are stored encrypted, the same value can be written multiple times (provided the correct \`version\` number is used). Looker does not examine any values stored in the artifact store, and only decrypts when sending artifacts back in an API response.\\n\\n**Note**: The artifact storage API can only be used by Looker-built extensions.\\n\\n"
  update_artifacts(
    "Artifact storage namespace"
    namespace: String!
    "Comma-delimited names of fields to return in responses. Omit for all fields"
    fields: String
    input: [UpdateArtifact_Input]
  ): [Artifact] @httpOperation(path: "/artifacts/{args.namespace}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "Update the current Cloud Storage Configuration.\\n"
  update_cloud_storage_configuration(input: BackupConfiguration_Input): BackupConfiguration @httpOperation(path: "/cloud_storage", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create a custom color collection with the specified information\\n\\nCreates a new custom color collection object, returning the details, including the created id.\\n\\n**Update** an existing color collection with [Update Color Collection](#!/ColorCollection/update_color_collection)\\n\\n**Permanently delete** an existing custom color collection with [Delete Color Collection](#!/ColorCollection/delete_color_collection)\\n\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  create_color_collection(input: ColorCollection_Input): ColorCollection @httpOperation(path: "/color_collections", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Set the global default Color Collection by ID\\n\\nReturns the new specified default Color Collection object.\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  set_default_color_collection(
    "ID of color collection to set as default"
    collection_id: String!
  ): ColorCollection @httpOperation(path: "/color_collections/default", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"collection_id\\":\\"collection_id\\"}")
  "### Update a custom color collection by id.\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  update_color_collection(
    "Id of Custom Color Collection"
    collection_id: String!
    input: ColorCollection_Input
  ): ColorCollection @httpOperation(path: "/color_collections/{args.collection_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete a custom color collection by id\\n\\nThis operation permanently deletes the identified **Custom** color collection.\\n\\n**Standard** color collections cannot be deleted\\n\\nBecause multiple color collections can have the same label, they must be deleted by ID, not name.\\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return \`Not Found\` (404) errors.\\n\\n"
  delete_color_collection(
    "Id of Color Collection"
    collection_id: String!
  ): String @httpOperation(path: "/color_collections/{args.collection_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Delete favorite content"
  delete_content_favorite(
    "Id of favorite content"
    content_favorite_id: String!
  ): String @httpOperation(path: "/content_favorite/{args.content_favorite_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create favorite content"
  create_content_favorite(input: ContentFavorite_Input): ContentFavorite @httpOperation(path: "/content_favorite", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Move a piece of content.\\n"
  update_content_metadata(
    "Id of content metadata"
    content_metadata_id: String!
    input: ContentMeta_Input
  ): ContentMeta @httpOperation(path: "/content_metadata/{args.content_metadata_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create content metadata access.\\n"
  create_content_metadata_access(
    "Optionally sends notification email when granting access to a board."
    send_boards_notification_email: Boolean
    input: ContentMetaGroupUser_Input
  ): ContentMetaGroupUser @httpOperation(path: "/content_metadata_access", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"send_boards_notification_email\\":\\"send_boards_notification_email\\"}")
  "### Update type of access for content metadata.\\n"
  update_content_metadata_access(
    "Id of content metadata access"
    content_metadata_access_id: String!
    input: ContentMetaGroupUser_Input
  ): ContentMetaGroupUser @httpOperation(path: "/content_metadata_access/{args.content_metadata_access_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Remove content metadata access.\\n"
  delete_content_metadata_access(
    "Id of content metadata access"
    content_metadata_access_id: String!
  ): String @httpOperation(path: "/content_metadata_access/{args.content_metadata_access_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "Update custom welcome email setting and values. Optionally send a test email with the new content to the currently logged in user.\\n"
  update_custom_welcome_email(
    "If true a test email with the content from the request will be sent to the current user after saving"
    send_test_welcome_email: Boolean
    input: CustomWelcomeEmail_Input
  ): CustomWelcomeEmail @httpOperation(path: "/custom_welcome_email", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"send_test_welcome_email\\":\\"send_test_welcome_email\\"}")
  "Requests to this endpoint will send a welcome email with the custom content provided in the body to the currently logged in user.\\n"
  update_custom_welcome_email_test(input: WelcomeEmailTest_Input): WelcomeEmailTest @httpOperation(path: "/custom_welcome_email_test", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Create a new dashboard\\n\\nCreates a new dashboard object and returns the details of the newly created dashboard.\\n\\n\`Title\` and \`space_id\` are required fields.\\n\`Space_id\` must contain the id of an existing space.\\nA dashboard's \`title\` must be unique within the space in which it resides.\\n\\nIf you receive a 422 error response when creating a dashboard, be sure to look at the\\nresponse body for information about exactly which fields are missing or contain invalid data.\\n\\nYou can **update** an existing dashboard with [update_dashboard()](#!/Dashboard/update_dashboard)\\n\\nYou can **permanently delete** an existing dashboard with [delete_dashboard()](#!/Dashboard/delete_dashboard)\\n"
  create_dashboard(input: Dashboard_Input): Dashboard @httpOperation(path: "/dashboards", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Import a LookML dashboard to a space as a UDD\\nCreates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard\\nand places it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.\\n\\nTo give the imported dashboard specify a (e.g. title: \\"my title\\") in the body of your request, otherwise the imported\\ndashboard will have the same title as the original LookML dashboard.\\n\\nFor this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to\\ncreate content in the space the dashboard is being imported to.\\n\\n**Sync** a linked UDD with [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard)\\n**Unlink** a linked UDD by setting lookml_link_id to null with [update_dashboard()](#!/Dashboard/update_dashboard)\\n"
  import_lookml_dashboard(
    "Id of LookML dashboard"
    lookml_dashboard_id: String!
    "Id of space to import the dashboard to"
    space_id: String!
    "If true, and this dashboard is localized, export it with the raw keys, not localized."
    raw_locale: Boolean
    input: Dashboard_Input
  ): Dashboard @httpOperation(path: "/dashboards/{args.lookml_dashboard_id}/import/{args.space_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"raw_locale\\":\\"raw_locale\\"}")
  "### Update all linked dashboards to match the specified LookML dashboard.\\n\\nAny UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a \`lookml_link_id\`\\nproperty value referring to a LookML dashboard's id (model::dashboardname) will be updated so that it matches the current state of the LookML dashboard.\\n\\nFor this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards\\nthat the user has permission to update will be synced.\\n\\nTo **link** or **unlink** a UDD set the \`lookml_link_id\` property with [update_dashboard()](#!/Dashboard/update_dashboard)\\n"
  sync_lookml_dashboard(
    "Id of LookML dashboard, in the form 'model::dashboardname'"
    lookml_dashboard_id: String!
    "If true, and this dashboard is localized, export it with the raw keys, not localized."
    raw_locale: Boolean
    input: Dashboard_Input
  ): [BigInt] @httpOperation(path: "/dashboards/{args.lookml_dashboard_id}/sync", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"raw_locale\\":\\"raw_locale\\"}")
  "### Delete the dashboard with the specified id\\n\\nPermanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)\\n\\n\\"Soft\\" delete or hide a dashboard by setting its \`deleted\` status to \`True\` with [update_dashboard()](#!/Dashboard/update_dashboard).\\n\\nNote: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.\\n"
  delete_dashboard(
    "Id of dashboard"
    dashboard_id: String!
  ): String @httpOperation(path: "/dashboards/{args.dashboard_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update a dashboard\\n\\nYou can use this function to change the string and integer properties of\\na dashboard. Nested objects such as filters, dashboard elements, or dashboard layout components\\ncannot be modified by this function - use the update functions for the respective\\nnested object types (like [update_dashboard_filter()](#!/3.1/Dashboard/update_dashboard_filter) to change a filter)\\nto modify nested objects referenced by a dashboard.\\n\\nIf you receive a 422 error response when updating a dashboard, be sure to look at the\\nresponse body for information about exactly which fields are missing or contain invalid data.\\n"
  update_dashboard(
    "Id of dashboard"
    dashboard_id: String!
    input: Dashboard_Input
  ): Dashboard @httpOperation(path: "/dashboards/{args.dashboard_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Move an existing dashboard\\n\\nMoves a dashboard to a specified folder, and returns the moved dashboard.\\n\\n\`dashboard_id\` and \`folder_id\` are required.\\n\`dashboard_id\` and \`folder_id\` must already exist, and \`folder_id\` must be different from the current \`folder_id\` of the dashboard.\\n"
  move_dashboard(
    "Dashboard id to move."
    dashboard_id: String!
    "Folder id to move to."
    folder_id: String!
  ): Dashboard @httpOperation(path: "/dashboards/{args.dashboard_id}/move", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"folder_id\\":\\"folder_id\\"}")
  "### Creates a dashboard object based on LookML Dashboard YAML, and returns the details of the newly created dashboard.\\n\\nIf a dashboard exists with the YAML-defined \\"preferred_slug\\", the new dashboard will overwrite it. Otherwise, a new\\ndashboard will be created. Note that when a dashboard is overwritten, alerts will not be maintained.\\n\\nIf a folder_id is specified: new dashboards will be placed in that folder, and overwritten dashboards will be moved to it\\nIf the folder_id isn't specified: new dashboards will be placed in the caller's personal folder, and overwritten dashboards\\nwill remain where they were\\n\\nLookML must contain valid LookML YAML code. It's recommended to use the LookML format returned\\nfrom [dashboard_lookml()](#!/Dashboard/dashboard_lookml) as the input LookML (newlines replaced with \\n).\\n\\nNote that the created dashboard is not linked to any LookML Dashboard,\\ni.e. [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard) will not update dashboards created by this method.\\n"
  import_dashboard_from_lookml(input: DashboardLookml_Input): Dashboard @httpOperation(path: "/dashboards/lookml", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "# DEPRECATED:  Use [import_dashboard_from_lookml()](#!/Dashboard/import_dashboard_from_lookml)\\n"
  create_dashboard_from_lookml(input: DashboardLookml_Input): Dashboard @httpOperation(path: "/dashboards/from_lookml", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Copy an existing dashboard\\n\\nCreates a copy of an existing dashboard, in a specified folder, and returns the copied dashboard.\\n\\n\`dashboard_id\` is required, \`dashboard_id\` and \`folder_id\` must already exist if specified.\\n\`folder_id\` will default to the existing folder.\\n\\nIf a dashboard with the same title already exists in the target folder, the copy will have '(copy)'\\n  or '(copy <# of copies>)' appended.\\n"
  copy_dashboard(
    "Dashboard id to copy."
    dashboard_id: String!
    "Folder id to copy to."
    folder_id: String
  ): Dashboard @httpOperation(path: "/dashboards/{args.dashboard_id}/copy", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"folder_id\\":\\"folder_id\\"}")
  "### Delete a dashboard element with a specific id."
  delete_dashboard_element(
    "Id of dashboard element"
    dashboard_element_id: String!
  ): String @httpOperation(path: "/dashboard_elements/{args.dashboard_element_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update the dashboard element with a specific id."
  update_dashboard_element(
    "Id of dashboard element"
    dashboard_element_id: String!
    "Requested fields."
    fields: String
    input: DashboardElement_Input
  ): DashboardElement @httpOperation(path: "/dashboard_elements/{args.dashboard_element_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Create a dashboard element on the dashboard with a specific id."
  create_dashboard_element(
    "Requested fields."
    fields: String
    "Apply relevant filters on dashboard to this tile"
    apply_filters: Boolean
    input: DashboardElement_Input
  ): DashboardElement @httpOperation(path: "/dashboard_elements", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\",\\"apply_filters\\":\\"apply_filters\\"}")
  "### Delete a dashboard filter with a specific id."
  delete_dashboard_filter(
    "Id of dashboard filter"
    dashboard_filter_id: String!
  ): String @httpOperation(path: "/dashboard_filters/{args.dashboard_filter_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update the dashboard filter with a specific id."
  update_dashboard_filter(
    "Id of dashboard filter"
    dashboard_filter_id: String!
    "Requested fields."
    fields: String
    input: DashboardFilter_Input
  ): DashboardFilter @httpOperation(path: "/dashboard_filters/{args.dashboard_filter_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Create a dashboard filter on the dashboard with a specific id."
  create_dashboard_filter(
    "Requested fields"
    fields: String
    input: CreateDashboardFilter_Input
  ): DashboardFilter @httpOperation(path: "/dashboard_filters", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update the dashboard element with a specific id."
  update_dashboard_layout_component(
    "Id of dashboard layout component"
    dashboard_layout_component_id: String!
    "Requested fields."
    fields: String
    input: DashboardLayoutComponent_Input
  ): DashboardLayoutComponent @httpOperation(path: "/dashboard_layout_components/{args.dashboard_layout_component_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Delete a dashboard layout with a specific id."
  delete_dashboard_layout(
    "Id of dashboard layout"
    dashboard_layout_id: String!
  ): String @httpOperation(path: "/dashboard_layouts/{args.dashboard_layout_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update the dashboard layout with a specific id."
  update_dashboard_layout(
    "Id of dashboard layout"
    dashboard_layout_id: String!
    "Requested fields."
    fields: String
    input: DashboardLayout_Input
  ): DashboardLayout @httpOperation(path: "/dashboard_layouts/{args.dashboard_layout_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Create a dashboard layout on the dashboard with a specific id."
  create_dashboard_layout(
    "Requested fields."
    fields: String
    input: DashboardLayout_Input
  ): DashboardLayout @httpOperation(path: "/dashboard_layouts", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "Perform a data action. The data action object can be obtained from query results, and used to perform an arbitrary action."
  perform_data_action(input: DataActionRequest_Input): DataActionResponse @httpOperation(path: "/data_actions", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "For some data actions, the remote server may supply a form requesting further user input. This endpoint takes a data action, asks the remote server to generate a form for it, and returns that form to you for presentation to the user."
  fetch_remote_data_action_form(input: JSON): DataActionForm @httpOperation(path: "/data_actions/form", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update a datagroup using the specified params.\\n"
  update_datagroup(
    "ID of datagroup."
    datagroup_id: String!
    input: Datagroup_Input
  ): Datagroup @httpOperation(path: "/datagroups/{args.datagroup_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create a connection using the specified configuration.\\n"
  create_connection(input: DBConnection_Input): DBConnection @httpOperation(path: "/connections", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update a connection using the specified configuration.\\n"
  update_connection(
    "Name of connection"
    connection_name: String!
    input: DBConnection_Input
  ): DBConnection @httpOperation(path: "/connections/{args.connection_name}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete a connection.\\n"
  delete_connection(
    "Name of connection"
    connection_name: String!
  ): String @httpOperation(path: "/connections/{args.connection_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Delete a connection override.\\n"
  delete_connection_override(
    "Name of connection"
    connection_name: String!
    "Context of connection override"
    override_context: String!
  ): String @httpOperation(path: "/connections/{args.connection_name}/connection_override/{args.override_context}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Test an existing connection.\\n\\nNote that a connection's 'dialect' property has a 'connection_tests' property that lists the\\nspecific types of tests that the connection supports.\\n\\nThis API is rate limited.\\n\\nUnsupported tests in the request will be ignored.\\n"
  test_connection(
    "Name of connection"
    connection_name: String!
    "Array of names of tests to run"
    tests: [String]
  ): [DBConnectionTestResult] @httpOperation(path: "/connections/{args.connection_name}/test", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"tests\\":\\"tests\\"}", queryStringOptionsByParam: "{\\"tests\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "### Test a connection configuration.\\n\\nNote that a connection's 'dialect' property has a 'connection_tests' property that lists the\\nspecific types of tests that the connection supports.\\n\\nThis API is rate limited.\\n\\nUnsupported tests in the request will be ignored.\\n"
  test_connection_config(
    "Array of names of tests to run"
    tests: [String]
    input: DBConnection_Input
  ): [DBConnectionTestResult] @httpOperation(path: "/connections/test", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"tests\\":\\"tests\\"}", queryStringOptionsByParam: "{\\"tests\\":{\\"arrayFormat\\":\\"comma\\"}}")
  "      ### Generate Lockfile for All LookML Dependencies\\n\\n      Git must have been configured, must be in dev mode and deploy permission required\\n\\n      Install_all is a two step process\\n      1. For each remote_dependency in a project the dependency manager will resolve any ambiguous ref.\\n      2. The project will then write out a lockfile including each remote_dependency with its resolved ref.\\n\\n"
  lock_all(
    "Id of project"
    project_id: String!
    "Requested fields"
    fields: String
  ): lock_all_response @httpOperation(path: "/projects/{args.project_id}/manifest/lock_all", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update the setting for enabling/disabling digest emails\\n"
  update_digest_emails_enabled(input: DigestEmails_Input): DigestEmails @httpOperation(path: "/digest_emails_enabled", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Trigger the generation of digest email records and send them to Looker's internal system. This does not send\\nany actual emails, it generates records containing content which may be of interest for users who have become inactive.\\nEmails will be sent at a later time from Looker's internal system if the Digest Emails feature is enabled in settings."
  create_digest_email_send: DigestEmailSend @httpOperation(path: "/digest_email_send", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Create an embed secret using the specified information.\\n\\nThe value of the \`secret\` field will be set by Looker and returned.\\n"
  create_embed_secret(input: EmbedSecret_Input): EmbedSecret @httpOperation(path: "/embed_config/secrets", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Delete an embed secret.\\n"
  delete_embed_secret(
    "Id of Embed Secret"
    embed_secret_id: String!
  ): String @httpOperation(path: "/embed_config/secrets/{args.embed_secret_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create SSO Embed URL\\n\\nCreates an SSO embed URL and cryptographically signs it with an embed secret.\\nThis signed URL can then be used to instantiate a Looker embed session in a PBL web application.\\nDo not make any modifications to this URL - any change may invalidate the signature and\\ncause the URL to fail to load a Looker embed session.\\n\\nA signed SSO embed URL can only be used once. After it has been used to request a page from the\\nLooker server, the URL is invalid. Future requests using the same URL will fail. This is to prevent\\n'replay attacks'.\\n\\nThe \`target_url\` property must be a complete URL of a Looker UI page - scheme, hostname, path and query params.\\nTo load a dashboard with id 56 and with a filter of \`Date=1 years\`, the looker URL would look like \`https:/myname.looker.com/dashboards/56?Date=1%20years\`.\\nThe best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\\ncopy the URL shown in the browser address bar and paste it into the \`target_url\` property as a quoted string value in this API request.\\n\\nPermissions for the embed user are defined by the groups in which the embed user is a member (group_ids property)\\nand the lists of models and permissions assigned to the embed user.\\nAt a minimum, you must provide values for either the group_ids property, or both the models and permissions properties.\\nThese properties are additive; an embed user can be a member of certain groups AND be granted access to models and permissions.\\n\\nThe embed user's access is the union of permissions granted by the group_ids, models, and permissions properties.\\n\\nThis function does not strictly require all group_ids, user attribute names, or model names to exist at the moment the\\nSSO embed url is created. Unknown group_id, user attribute names or model names will be passed through to the output URL.\\nTo diagnose potential problems with an SSO embed URL, you can copy the signed URL into the Embed URI Validator text box in \`<your looker instance>/admin/embed\`.\\n\\nThe \`secret_id\` parameter is optional. If specified, its value must be the id of an active secret defined in the Looker instance.\\nif not specified, the URL will be signed using the newest active secret defined in the Looker instance.\\n\\n#### Security Note\\nProtect this signed URL as you would an access token or password credentials - do not write\\nit to disk, do not pass it to a third party, and only pass it through a secure HTTPS\\nencrypted transport.\\n"
  create_sso_embed_url(input: EmbedSsoParams_Input): EmbedUrlResponse @httpOperation(path: "/embed/sso_url", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Create an Embed URL\\n\\nCreates an embed URL that runs as the Looker user making this API call. (\\"Embed as me\\")\\nThis embed URL can then be used to instantiate a Looker embed session in a\\n\\"Powered by Looker\\" (PBL) web application.\\n\\nThis is similar to Private Embedding (https://cloud.google.com/looker/docs/r/admin/embed/private-embed). Instead of\\nof logging into the Web UI to authenticate, the user has already authenticated against the API to be able to\\nmake this call. However, unlike Private Embed where the user has access to any other part of the Looker UI,\\nthe embed web session created by requesting the EmbedUrlResponse.url in a browser only has access to\\ncontent visible under the \`/embed\` context.\\n\\nAn embed URL can only be used once, and must be used within 5 minutes of being created. After it\\nhas been used to request a page from the Looker server, the URL is invalid. Future requests using\\nthe same URL will fail. This is to prevent 'replay attacks'.\\n\\nThe \`target_url\` property must be a complete URL of a Looker Embedded UI page - scheme, hostname, path starting with \\"/embed\\" and query params.\\nTo load a dashboard with id 56 and with a filter of \`Date=1 years\`, the looker Embed URL would look like \`https://myname.looker.com/embed/dashboards/56?Date=1%20years\`.\\nThe best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\\ncopy the URL shown in the browser address bar, insert \\"/embed\\" after the host/port, and paste it into the \`target_url\` property as a quoted string value in this API request.\\n\\n#### Security Note\\nProtect this embed URL as you would an access token or password credentials - do not write\\nit to disk, do not pass it to a third party, and only pass it through a secure HTTPS\\nencrypted transport.\\n"
  create_embed_url_as_me(input: EmbedParams_Input): EmbedUrlResponse @httpOperation(path: "/embed/token_url/me", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Acquire a cookieless embed session.\\n\\nThe acquire session endpoint negates the need for signing the embed url and passing it as a parameter\\nto the embed login. This endpoint accepts an embed user definition and creates or updates it. This is\\nsimilar behavior to the embed SSO login as they both can create and update embed user data.\\n\\nThe endpoint also accepts an optional \`session_reference_token\`. If present and the session has not expired\\nand the credentials match the credentials for the embed session, a new authentication token will be\\ngenerated. This allows the embed session to attach a new embedded IFRAME to the embed session. Note that\\nthe session is NOT extended in this scenario. In other words the session_length parameter is ignored.\\n\\n**IMPORTANT:** If the \`session_reference_token\` is provided and the session has NOT expired, the embed user\\nis NOT updated. This is done for performance reasons and to support the embed SSO usecase where the\\nfirst IFRAME created on a page uses a signed url and subsequently created IFRAMEs do not.\\n\\nIf the \`session_reference_token\` is provided but the session has expired, the token will be ignored and a\\nnew embed session will be created. Note that the embed user definition will be updated in this scenario.\\n\\nIf the credentials do not match the credentials associated with an exisiting session_reference_token, a\\n404 will be returned.\\n\\nThe endpoint returns the following:\\n- Authentication token - a token that is passed to \`/embed/login\` endpoint that creates or attaches to the\\n  embed session. This token can be used once and has a lifetime of 30 seconds.\\n- Session reference token - a token that lives for the length of the session. This token is used to\\n  generate new api and navigation tokens OR create new embed IFRAMEs.\\n- Api token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into the\\n  iframe.\\n- Navigation token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into\\n  the iframe.\\n"
  acquire_embed_cookieless_session(input: EmbedCookielessSessionAcquire_Input): EmbedCookielessSessionAcquireResponse @httpOperation(path: "/embed/cookieless_session/acquire", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Delete cookieless embed session\\n\\nThis will delete the session associated with the given session reference token. Calling this endpoint will result\\nin the session and session reference data being cleared from the system. This endpoint can be used to log an embed\\nuser out of the Looker instance.\\n"
  delete_embed_cookieless_session(
    "Embed session reference token"
    session_reference_token: String!
  ): String @httpOperation(path: "/embed/cookieless_session/{args.session_reference_token}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Generate api and navigation tokens for a cookieless embed session\\n\\nThe generate tokens endpoint is used to create new tokens of type:\\n- Api token.\\n- Navigation token.\\nThe generate tokens endpoint should be called every time the Looker client asks for a token (except for the\\nfirst time when the tokens returned by the acquire_session endpoint should be used).\\n"
  generate_tokens_for_cookieless_session(input: EmbedCookielessSessionGenerateTokens_Input): EmbedCookielessSessionGenerateTokensResponse @httpOperation(path: "/embed/cookieless_session/generate_tokens", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Create an OAuth Application using the specified configuration.\\n\\nThis is an OAuth Application which Looker uses to access external systems.\\n"
  create_external_oauth_application(input: ExternalOauthApplication_Input): ExternalOauthApplication @httpOperation(path: "/external_oauth_applications", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Create OAuth User state.\\n"
  create_oauth_application_user_state(input: CreateOAuthApplicationUserStateRequest_Input): CreateOAuthApplicationUserStateResponse @httpOperation(path: "/external_oauth_applications/user_state", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Create and Checkout a Git Branch\\n\\nCreates and checks out a new branch in the given project repository\\nOnly allowed in development mode\\n  - Call \`update_session\` to select the 'dev' workspace.\\n\\nOptionally specify a branch name, tag name or commit SHA as the start point in the ref field.\\n  If no ref is specified, HEAD of the current branch will be used as the start point for the new branch.\\n\\n"
  create_git_branch(
    "Project Id"
    project_id: String!
    input: GitBranch_Input
  ): GitBranch @httpOperation(path: "/projects/{args.project_id}/git_branch", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Checkout and/or reset --hard an existing Git Branch\\n\\nOnly allowed in development mode\\n  - Call \`update_session\` to select the 'dev' workspace.\\n\\nCheckout an existing branch if name field is different from the name of the currently checked out branch.\\n\\nOptionally specify a branch name, tag name or commit SHA to which the branch should be reset.\\n  **DANGER** hard reset will be force pushed to the remote. Unsaved changes and commits may be permanently lost.\\n\\n"
  update_git_branch(
    "Project Id"
    project_id: String!
    input: GitBranch_Input
  ): GitBranch @httpOperation(path: "/projects/{args.project_id}/git_branch", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Delete the specified Git Branch\\n\\nDelete git branch specified in branch_name path param from local and remote of specified project repository\\n"
  delete_git_branch(
    "Project Id"
    project_id: String!
    "Branch Name"
    branch_name: String!
  ): String @httpOperation(path: "/projects/{args.project_id}/git_branch/{args.branch_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Creates a new group (admin only).\\n"
  create_group(
    "Requested fields."
    fields: String
    input: Group_Input
  ): Group @httpOperation(path: "/groups", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Updates the a group (admin only)."
  update_group(
    "Id of group"
    group_id: String!
    "Requested fields."
    fields: String
    input: Group_Input
  ): Group @httpOperation(path: "/groups/{args.group_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Deletes a group (admin only).\\n"
  delete_group(
    "Id of group"
    group_id: String!
  ): String @httpOperation(path: "/groups/{args.group_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Adds a new group to a group.\\n"
  add_group_group(
    "Id of group"
    group_id: String!
    input: GroupIdForGroupInclusion_Input
  ): Group @httpOperation(path: "/groups/{args.group_id}/groups", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Adds a new user to a group.\\n"
  add_group_user(
    "Id of group"
    group_id: String!
    input: GroupIdForGroupUserInclusion_Input
  ): User @httpOperation(path: "/groups/{args.group_id}/users", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Removes a user from a group.\\n"
  delete_group_user(
    "Id of group"
    group_id: String!
    "Id of user to remove from group"
    user_id: String!
  ): Void @httpOperation(path: "/groups/{args.group_id}/users/{args.user_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Removes a group from a group.\\n"
  delete_group_from_group(
    "Id of group"
    group_id: String!
    "Id of group to delete"
    deleting_group_id: String!
  ): Void @httpOperation(path: "/groups/{args.group_id}/groups/{args.deleting_group_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Set the value of a user attribute for a group.\\n\\nFor information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\\n"
  update_user_attribute_group_value(
    "Id of group"
    group_id: String!
    "Id of user attribute"
    user_attribute_id: String!
    input: UserAttributeGroupValue_Input
  ): UserAttributeGroupValue @httpOperation(path: "/groups/{args.group_id}/attribute_values/{args.user_attribute_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Remove a user attribute value from a group.\\n"
  delete_user_attribute_group_value(
    "Id of group"
    group_id: String!
    "Id of user attribute"
    user_attribute_id: String!
  ): Void @httpOperation(path: "/groups/{args.group_id}/attribute_values/{args.user_attribute_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a new board.\\n"
  create_board(
    "Requested fields."
    fields: String
    input: Board_Input
  ): Board @httpOperation(path: "/boards", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update a board definition.\\n"
  update_board(
    "Id of board"
    board_id: String!
    "Requested fields."
    fields: String
    input: Board_Input
  ): Board @httpOperation(path: "/boards/{args.board_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Delete a board.\\n"
  delete_board(
    "Id of board"
    board_id: String!
  ): String @httpOperation(path: "/boards/{args.board_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a new board item.\\n"
  create_board_item(
    "Requested fields."
    fields: String
    input: BoardItem_Input
  ): BoardItem @httpOperation(path: "/board_items", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update a board item definition.\\n"
  update_board_item(
    "Id of board item"
    board_item_id: String!
    "Requested fields."
    fields: String
    input: BoardItem_Input
  ): BoardItem @httpOperation(path: "/board_items/{args.board_item_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Delete a board item.\\n"
  delete_board_item(
    "Id of board item"
    board_item_id: String!
  ): String @httpOperation(path: "/board_items/{args.board_item_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a new board section.\\n"
  create_board_section(
    "Requested fields."
    fields: String
    input: BoardSection_Input
  ): BoardSection @httpOperation(path: "/board_sections", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update a board section definition.\\n"
  update_board_section(
    "Id of board section"
    board_section_id: String!
    "Requested fields."
    fields: String
    input: BoardSection_Input
  ): BoardSection @httpOperation(path: "/board_sections/{args.board_section_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Delete a board section.\\n"
  delete_board_section(
    "Id of board section"
    board_section_id: String!
  ): String @httpOperation(path: "/board_sections/{args.board_section_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a new Integration Hub.\\n\\nThis API is rate limited to prevent it from being used for SSRF attacks\\n"
  create_integration_hub(
    "Requested fields."
    fields: String
    input: IntegrationHub_Input
  ): IntegrationHub @httpOperation(path: "/integration_hubs", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update a Integration Hub definition.\\n\\nThis API is rate limited to prevent it from being used for SSRF attacks\\n"
  update_integration_hub(
    "Id of integration_hub"
    integration_hub_id: String!
    "Requested fields."
    fields: String
    input: IntegrationHub_Input
  ): IntegrationHub @httpOperation(path: "/integration_hubs/{args.integration_hub_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Delete a Integration Hub.\\n"
  delete_integration_hub(
    "Id of integration_hub"
    integration_hub_id: String!
  ): String @httpOperation(path: "/integration_hubs/{args.integration_hub_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false."
  accept_integration_hub_legal_agreement(
    "Id of integration_hub"
    integration_hub_id: String!
  ): IntegrationHub @httpOperation(path: "/integration_hubs/{args.integration_hub_id}/accept_legal_agreement", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update parameters on a Integration.\\n"
  update_integration(
    "Id of integration"
    integration_id: String!
    "Requested fields."
    fields: String
    input: Integration_Input
  ): Integration @httpOperation(path: "/integrations/{args.integration_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "Returns the Integration form for presentation to the user."
  fetch_integration_form(
    "Id of integration"
    integration_id: String!
    input: JSON
  ): DataActionForm @httpOperation(path: "/integrations/{args.integration_id}/form", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "Tests the integration to make sure all the settings are working."
  test_integration(
    "Id of integration"
    integration_id: String!
  ): IntegrationTestResult @httpOperation(path: "/integrations/{args.integration_id}/test", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "Update internal help resources content\\n"
  update_internal_help_resources_content(input: InternalHelpResourcesContent_Input): InternalHelpResourcesContent @httpOperation(path: "/internal_help_resources_content", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "Update internal help resources settings\\n"
  update_internal_help_resources(input: InternalHelpResources_Input): InternalHelpResources @httpOperation(path: "/internal_help_resources", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Update the LDAP configuration.\\n\\nConfiguring LDAP impacts authentication for all users. This configuration should be done carefully.\\n\\nOnly Looker administrators can read and update the LDAP configuration.\\n\\nLDAP is enabled or disabled for Looker using the **enabled** field.\\n\\nIt is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.\\n\\nSee the [Looker LDAP docs](https://cloud.google.com/looker/docs/r/api/ldap_setup) for additional information.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  update_ldap_config(input: LDAPConfig_Input): LDAPConfig @httpOperation(path: "/ldap_config", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Test the connection settings for an LDAP configuration.\\n\\nThis tests that the connection is possible given a connection_host and connection_port.\\n\\n**connection_host** and **connection_port** are required. **connection_tls** is optional.\\n\\nExample:\\n\`\`\`json\\n{\\n  \\"connection_host\\": \\"ldap.example.com\\",\\n  \\"connection_port\\": \\"636\\",\\n  \\"connection_tls\\": true\\n}\\n\`\`\`\\n\\nNo authentication to the LDAP server is attempted.\\n\\nThe active LDAP settings are not modified.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  test_ldap_config_connection(input: LDAPConfig_Input): LDAPConfigTestResult @httpOperation(path: "/ldap_config/test_connection", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Test the connection authentication settings for an LDAP configuration.\\n\\nThis tests that the connection is possible and that a 'server' account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.\\n\\n**connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.\\n\\nExample:\\n\`\`\`json\\n{\\n  \\"connection_host\\": \\"ldap.example.com\\",\\n  \\"connection_port\\": \\"636\\",\\n  \\"connection_tls\\": true,\\n  \\"auth_username\\": \\"cn=looker,dc=example,dc=com\\",\\n  \\"auth_password\\": \\"secret\\"\\n}\\n\`\`\`\\n\\nLooker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\\n\\nThe active LDAP settings are not modified.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  test_ldap_config_auth(input: LDAPConfig_Input): LDAPConfigTestResult @httpOperation(path: "/ldap_config/test_auth", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Test the user authentication settings for an LDAP configuration without authenticating the user.\\n\\nThis test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.\\n\\nThis test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.\\n\\n**test_ldap_user** is required.\\n\\nThe active LDAP settings are not modified.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  test_ldap_config_user_info(input: LDAPConfig_Input): LDAPConfigTestResult @httpOperation(path: "/ldap_config/test_user_info", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Test the user authentication settings for an LDAP configuration.\\n\\nThis test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.\\n\\nLooker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\\n\\n**test_ldap_user** and **test_ldap_password** are required.\\n\\nThe active LDAP settings are not modified.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  test_ldap_config_user_auth(input: LDAPConfig_Input): LDAPConfigTestResult @httpOperation(path: "/ldap_config/test_user_auth", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Update information about the legacy feature with a specific id.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  update_legacy_feature(
    "id of legacy feature"
    legacy_feature_id: String!
    input: LegacyFeature_Input
  ): LegacyFeature @httpOperation(path: "/legacy_features/{args.legacy_feature_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create a Look\\n\\nTo create a look to display query data, first create the query with [create_query()](#!/Query/create_query)\\nthen assign the query's id to the \`query_id\` property in the call to \`create_look()\`.\\n\\nTo place the look into a particular space, assign the space's id to the \`space_id\` property\\nin the call to \`create_look()\`.\\n"
  create_look(
    "Requested fields."
    fields: String
    input: LookWithQuery_Input
  ): LookWithQuery @httpOperation(path: "/looks", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Modify a Look\\n\\nUse this function to modify parts of a look. Property values given in a call to \`update_look\` are\\napplied to the existing look, so there's no need to include properties whose values are not changing.\\nIt's best to specify only the properties you want to change and leave everything else out\\nof your \`update_look\` call. **Look properties marked 'read-only' will be ignored.**\\n\\nWhen a user deletes a look in the Looker UI, the look data remains in the database but is\\nmarked with a deleted flag (\\"soft-deleted\\"). Soft-deleted looks can be undeleted (by an admin)\\nif the delete was in error.\\n\\nTo soft-delete a look via the API, use [update_look()](#!/Look/update_look) to change the look's \`deleted\` property to \`true\`.\\nYou can undelete a look by calling \`update_look\` to change the look's \`deleted\` property to \`false\`.\\n\\nSoft-deleted looks are excluded from the results of [all_looks()](#!/Look/all_looks) and [search_looks()](#!/Look/search_looks), so they\\nessentially disappear from view even though they still reside in the db.\\nIn API 3.1 and later, you can pass \`deleted: true\` as a parameter to [search_looks()](#!/3.1/Look/search_looks) to list soft-deleted looks.\\n\\nNOTE: [delete_look()](#!/Look/delete_look) performs a \\"hard delete\\" - the look data is removed from the Looker\\ndatabase and destroyed. There is no \\"undo\\" for \`delete_look()\`.\\n"
  update_look(
    "Id of look"
    look_id: String!
    "Requested fields."
    fields: String
    input: LookWithQuery_Input
  ): LookWithQuery @httpOperation(path: "/looks/{args.look_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Permanently Delete a Look\\n\\nThis operation **permanently** removes a look from the Looker database.\\n\\nNOTE: There is no \\"undo\\" for this kind of delete.\\n\\nFor information about soft-delete (which can be undone) see [update_look()](#!/Look/update_look).\\n"
  delete_look(
    "Id of look"
    look_id: String!
  ): String @httpOperation(path: "/looks/{args.look_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Copy an existing look\\n\\nCreates a copy of an existing look, in a specified folder, and returns the copied look.\\n\\n\`look_id\` and \`folder_id\` are required.\\n\\n\`look_id\` and \`folder_id\` must already exist, and \`folder_id\` must be different from the current \`folder_id\` of the dashboard.\\n"
  copy_look(
    "Look id to copy."
    look_id: String!
    "Folder id to copy to."
    folder_id: String
  ): copy_look_response @httpOperation(path: "/looks/{args.look_id}/copy", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"folder_id\\":\\"folder_id\\"}")
  "### Move an existing look\\n\\nMoves a look to a specified folder, and returns the moved look.\\n\\n\`look_id\` and \`folder_id\` are required.\\n\`look_id\` and \`folder_id\` must already exist, and \`folder_id\` must be different from the current \`folder_id\` of the dashboard.\\n"
  move_look(
    "Look id to move."
    look_id: String!
    "Folder id to move to."
    folder_id: String!
  ): move_look_response @httpOperation(path: "/looks/{args.look_id}/move", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"folder_id\\":\\"folder_id\\"}")
  "### Create a lookml model using the specified configuration.\\n"
  create_lookml_model(input: LookmlModel_Input): LookmlModel @httpOperation(path: "/lookml_models", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update a lookml model using the specified configuration.\\n"
  update_lookml_model(
    "Name of lookml model."
    lookml_model_name: String!
    input: LookmlModel_Input
  ): LookmlModel @httpOperation(path: "/lookml_models/{args.lookml_model_name}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete a lookml model.\\n"
  delete_lookml_model(
    "Name of lookml model."
    lookml_model_name: String!
  ): String @httpOperation(path: "/lookml_models/{args.lookml_model_name}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create Merge Query\\n\\nCreates a new merge query object.\\n\\nA merge query takes the results of one or more queries and combines (merges) the results\\naccording to field mapping definitions. The result is similar to a SQL left outer join.\\n\\nA merge query can merge results of queries from different SQL databases.\\n\\nThe order that queries are defined in the source_queries array property is significant. The\\nfirst query in the array defines the primary key into which the results of subsequent\\nqueries will be merged.\\n\\nLike model/view query objects, merge queries are immutable and have structural identity - if\\nyou make a request to create a new merge query that is identical to an existing merge query,\\nthe existing merge query will be returned instead of creating a duplicate. Conversely, any\\nchange to the contents of a merge query will produce a new object with a new id.\\n"
  create_merge_query(
    "Requested fields"
    fields: String
    input: MergeQuery_Input
  ): MergeQuery @httpOperation(path: "/merge_queries", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Connection cost estimating\\n\\nAssign a \`sql\` statement to the body of the request. e.g., for Ruby, \`{sql: 'select * from users'}\`\\n\\n**Note**: If the connection's dialect has no support for cost estimates, an error will be returned\\n"
  connection_cost_estimate(
    "Name of connection"
    connection_name: String!
    "Requested fields."
    fields: String
    input: CreateCostEstimate_Input
  ): CostEstimate @httpOperation(path: "/connections/{args.connection_name}/cost_estimate", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Registers a mobile device.\\n# Required fields: [:device_token, :device_type]\\n"
  register_mobile_device(input: MobileToken_Input): MobileToken @httpOperation(path: "/mobile/device", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Updates the mobile device registration\\n"
  update_mobile_device_registration(
    "Unique id of the device."
    device_id: String!
  ): MobileToken @httpOperation(path: "/mobile/device/{args.device_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Deregister a mobile device.\\n"
  deregister_mobile_device(
    "Unique id of the device."
    device_id: String!
  ): Void @httpOperation(path: "/mobile/device/{args.device_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Delete the model set with a specific id.\\n"
  delete_model_set(
    "id of model set"
    model_set_id: String!
  ): String @httpOperation(path: "/model_sets/{args.model_set_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update information about the model set with a specific id.\\n"
  update_model_set(
    "id of model set"
    model_set_id: String!
    input: ModelSet_Input
  ): ModelSet @httpOperation(path: "/model_sets/{args.model_set_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create a model set with the specified information. Model sets are used by Roles.\\n"
  create_model_set(input: ModelSet_Input): ModelSet @httpOperation(path: "/model_sets", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Delete OAuth Client App\\n\\nDeletes the registration info of the app with the matching client_guid.\\nAll active sessions and tokens issued for this app will immediately become invalid.\\n\\nAs with most REST DELETE operations, this endpoint does not return an error if the\\nindicated resource does not exist.\\n\\n### Note: this deletion cannot be undone.\\n"
  delete_oauth_client_app(
    "The unique id of this application"
    client_guid: String!
  ): String @httpOperation(path: "/oauth_client_apps/{args.client_guid}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Register an OAuth2 Client App\\n\\nRegisters details identifying an external web app or native app as an OAuth2 login client of the Looker instance.\\nThe app registration must provide a unique client_guid and redirect_uri that the app will present\\nin OAuth login requests. If the client_guid and redirect_uri parameters in the login request do not match\\nthe app details registered with the Looker instance, the request is assumed to be a forgery and is rejected.\\n"
  register_oauth_client_app(
    "The unique id of this application"
    client_guid: String!
    "Requested fields."
    fields: String
    input: OauthClientApp_Input
  ): OauthClientApp @httpOperation(path: "/oauth_client_apps/{args.client_guid}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update OAuth2 Client App Details\\n\\nModifies the details a previously registered OAuth2 login client app.\\n"
  update_oauth_client_app(
    "The unique id of this application"
    client_guid: String!
    "Requested fields."
    fields: String
    input: OauthClientApp_Input
  ): OauthClientApp @httpOperation(path: "/oauth_client_apps/{args.client_guid}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Invalidate All Issued Tokens\\n\\nImmediately invalidates all auth codes, sessions, access tokens and refresh tokens issued for\\nthis app for ALL USERS of this app.\\n"
  invalidate_tokens(
    "The unique id of the application"
    client_guid: String!
  ): String @httpOperation(path: "/oauth_client_apps/{args.client_guid}/tokens", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Activate an app for a user\\n\\nActivates a user for a given oauth client app. This indicates the user has been informed that\\nthe app will have access to the user's looker data, and that the user has accepted and allowed\\nthe app to use their Looker account.\\n\\nActivating a user for an app that the user is already activated with returns a success response.\\n"
  activate_app_user(
    "The unique id of this application"
    client_guid: String!
    "The id of the user to enable use of this app"
    user_id: String!
    "Requested fields."
    fields: String
  ): activate_app_user_response @httpOperation(path: "/oauth_client_apps/{args.client_guid}/users/{args.user_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Deactivate an app for a user\\n\\nDeactivate a user for a given oauth client app. All tokens issued to the app for\\nthis user will be invalid immediately. Before the user can use the app with their\\nLooker account, the user will have to read and accept an account use disclosure statement for the app.\\n\\nAdmin users can deactivate other users, but non-admin users can only deactivate themselves.\\n\\nAs with most REST DELETE operations, this endpoint does not return an error if the indicated\\nresource (app or user) does not exist or has already been deactivated.\\n"
  deactivate_app_user(
    "The unique id of this application"
    client_guid: String!
    "The id of the user to enable use of this app"
    user_id: String!
    "Requested fields."
    fields: String
  ): String @httpOperation(path: "/oauth_client_apps/{args.client_guid}/users/{args.user_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update the OIDC configuration.\\n\\nConfiguring OIDC impacts authentication for all users. This configuration should be done carefully.\\n\\nOnly Looker administrators can read and update the OIDC configuration.\\n\\nOIDC is enabled or disabled for Looker using the **enabled** field.\\n\\nIt is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  update_oidc_config(input: OIDCConfig_Input): OIDCConfig @httpOperation(path: "/oidc_config", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete a OIDC test configuration.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  delete_oidc_test_config(
    "Slug of test config"
    test_slug: String!
  ): String @httpOperation(path: "/oidc_test_configs/{args.test_slug}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a OIDC test configuration.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  create_oidc_test_config(input: OIDCConfig_Input): OIDCConfig @httpOperation(path: "/oidc_test_configs", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update password config.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  update_password_config(input: PasswordConfig_Input): PasswordConfig @httpOperation(path: "/password_config", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Force all credentials_email users to reset their login passwords upon their next login.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  force_password_reset_at_next_login_for_all_users: String @httpOperation(path: "/password_config/force_password_reset_at_next_login_for_all_users", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Delete the permission set with a specific id.\\n"
  delete_permission_set(
    "Id of permission set"
    permission_set_id: String!
  ): String @httpOperation(path: "/permission_sets/{args.permission_set_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update information about the permission set with a specific id.\\n"
  update_permission_set(
    "Id of permission set"
    permission_set_id: String!
    input: PermissionSet_Input
  ): PermissionSet @httpOperation(path: "/permission_sets/{args.permission_set_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create a permission set with the specified information. Permission sets are used by Roles.\\n"
  create_permission_set(input: PermissionSet_Input): PermissionSet @httpOperation(path: "/permission_sets", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Deploy a Remote Branch or Ref to Production\\n\\nGit must have been configured and deploy permission required.\\n\\nDeploy is a one/two step process\\n1. If this is the first deploy of this project, create the production project with git repository.\\n2. Pull the branch or ref into the production project.\\n\\nCan only specify either a branch or a ref.\\n\\n"
  deploy_ref_to_production(
    "Id of project"
    project_id: String!
    "Branch to deploy to production"
    branch: String
    "Ref to deploy to production"
    ref: String
  ): deploy_ref_to_production_response @httpOperation(path: "/projects/{args.project_id}/deploy_ref_to_production", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"branch\\":\\"branch\\",\\"ref\\":\\"ref\\"}")
  "### Deploy LookML from this Development Mode Project to Production\\n\\nGit must have been configured, must be in dev mode and deploy permission required\\n\\nDeploy is a two / three step process:\\n\\n1. Push commits in current branch of dev mode project to the production branch (origin/master).\\n   Note a. This step is skipped in read-only projects.\\n   Note b. If this step is unsuccessful for any reason (e.g. rejected non-fastforward because production branch has\\n             commits not in current branch), subsequent steps will be skipped.\\n2. If this is the first deploy of this project, create the production project with git repository.\\n3. Pull the production branch into the production project.\\n\\n"
  deploy_to_production(
    "Id of project"
    project_id: String!
  ): deploy_to_production_response @httpOperation(path: "/projects/{args.project_id}/deploy_to_production", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Reset a project to the revision of the project that is in production.\\n\\n**DANGER** this will delete any changes that have not been pushed to a remote repository.\\n"
  reset_project_to_production(
    "Id of project"
    project_id: String!
  ): reset_project_to_production_response @httpOperation(path: "/projects/{args.project_id}/reset_to_production", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Reset a project development branch to the revision of the project that is on the remote.\\n\\n**DANGER** this will delete any changes that have not been pushed to a remote repository.\\n"
  reset_project_to_remote(
    "Id of project"
    project_id: String!
  ): reset_project_to_remote_response @httpOperation(path: "/projects/{args.project_id}/reset_to_remote", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Create A Project\\n\\ndev mode required.\\n- Call \`update_session\` to select the 'dev' workspace.\\n\\n\`name\` is required.\\n\`git_remote_url\` is not allowed. To configure Git for the newly created project, follow the instructions in \`update_project\`.\\n\\n"
  create_project(input: Project_Input): Project @httpOperation(path: "/projects", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update Project Configuration\\n\\nApply changes to a project's configuration.\\n\\n\\n#### Configuring Git for a Project\\n\\nTo set up a Looker project with a remote git repository, follow these steps:\\n\\n1. Call \`update_session\` to select the 'dev' workspace.\\n1. Call \`create_git_deploy_key\` to create a new deploy key for the project\\n1. Copy the deploy key text into the remote git repository's ssh key configuration\\n1. Call \`update_project\` to set project's \`git_remote_url\` ()and \`git_service_name\`, if necessary).\\n\\nWhen you modify a project's \`git_remote_url\`, Looker connects to the remote repository to fetch\\nmetadata. The remote git repository MUST be configured with the Looker-generated deploy\\nkey for this project prior to setting the project's \`git_remote_url\`.\\n\\nTo set up a Looker project with a git repository residing on the Looker server (a 'bare' git repo):\\n\\n1. Call \`update_session\` to select the 'dev' workspace.\\n1. Call \`update_project\` setting \`git_remote_url\` to null and \`git_service_name\` to \\"bare\\".\\n\\n"
  update_project(
    "Project Id"
    project_id: String!
    "Requested fields"
    fields: String
    input: Project_Input
  ): Project @httpOperation(path: "/projects/{args.project_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Create Git Deploy Key\\n\\nCreate a public/private key pair for authenticating ssh git requests from Looker to a remote git repository\\nfor a particular Looker project.\\n\\nReturns the public key of the generated ssh key pair.\\n\\nCopy this public key to your remote git repository's ssh keys configuration so that the remote git service can\\nvalidate and accept git requests from the Looker server.\\n"
  create_git_deploy_key(
    "Project Id"
    project_id: String!
  ): String @httpOperation(path: "/projects/{args.project_id}/git/deploy_key", operationSpecificHeaders: "{\\"accept\\":\\"text/plain\\"}", httpMethod: POST)
  "### Validate Project\\n\\nPerforms lint validation of all lookml files in the project.\\nReturns a list of errors found, if any.\\n\\nValidating the content of all the files in a project can be computationally intensive\\nfor large projects. For best performance, call \`validate_project(project_id)\` only\\nwhen you really want to recompute project validation. To quickly display the results of\\nthe most recent project validation (without recomputing), use \`project_validation_results(project_id)\`\\n"
  validate_project(
    "Project Id"
    project_id: String!
    "Requested fields"
    fields: String
  ): ProjectValidation @httpOperation(path: "/projects/{args.project_id}/validate", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Creates a tag for the most recent commit, or a specific ref is a SHA is provided\\n\\nThis is an internal-only, undocumented route.\\n"
  tag_ref(
    "Project Id"
    project_id: String!
    "(Optional): Commit Sha to Tag"
    commit_sha: String
    "Tag Name"
    tag_name: String
    "(Optional): Tag Message"
    tag_message: String
    input: Project_Input
  ): tag_ref_response @httpOperation(path: "/projects/{args.project_id}/tag", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"commit_sha\\":\\"commit_sha\\",\\"tag_name\\":\\"tag_name\\",\\"tag_message\\":\\"tag_message\\"}")
  "### Create a new task to render a look to an image.\\n\\nReturns a render task object.\\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\\n\\n"
  create_look_render_task(
    "Id of look to render"
    look_id: String!
    "Output type: png, or jpg"
    result_format: String!
    "Output width in pixels"
    width: BigInt!
    "Output height in pixels"
    height: BigInt!
    "Requested fields."
    fields: String
  ): RenderTask @httpOperation(path: "/render_tasks/looks/{args.look_id}/{args.result_format}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"width\\":\\"width\\",\\"height\\":\\"height\\",\\"fields\\":\\"fields\\"}")
  "### Create a new task to render an existing query to an image.\\n\\nReturns a render task object.\\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\\n\\n"
  create_query_render_task(
    "Id of the query to render"
    query_id: String!
    "Output type: png or jpg"
    result_format: String!
    "Output width in pixels"
    width: BigInt!
    "Output height in pixels"
    height: BigInt!
    "Requested fields."
    fields: String
  ): RenderTask @httpOperation(path: "/render_tasks/queries/{args.query_id}/{args.result_format}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"width\\":\\"width\\",\\"height\\":\\"height\\",\\"fields\\":\\"fields\\"}")
  "### Create a new task to render a dashboard to a document or image.\\n\\nReturns a render task object.\\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\\n\\n"
  create_dashboard_render_task(
    "Id of dashboard to render. The ID can be a LookML dashboard also."
    dashboard_id: String!
    "Output type: pdf, png, or jpg"
    result_format: String!
    "Output width in pixels"
    width: BigInt!
    "Output height in pixels"
    height: BigInt!
    "Requested fields."
    fields: String
    "Paper size for pdf. Value can be one of: [\\"letter\\",\\"legal\\",\\"tabloid\\",\\"a0\\",\\"a1\\",\\"a2\\",\\"a3\\",\\"a4\\",\\"a5\\"]"
    pdf_paper_size: String
    "Whether to render pdf in landscape paper orientation"
    pdf_landscape: Boolean
    "Whether or not to expand table vis to full length"
    long_tables: Boolean
    input: CreateDashboardRenderTask_Input
  ): RenderTask @httpOperation(path: "/render_tasks/dashboards/{args.dashboard_id}/{args.result_format}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"width\\":\\"width\\",\\"height\\":\\"height\\",\\"fields\\":\\"fields\\",\\"pdf_paper_size\\":\\"pdf_paper_size\\",\\"pdf_landscape\\":\\"pdf_landscape\\",\\"long_tables\\":\\"long_tables\\"}")
  "### Create a new task to render a dashboard element to an image.\\n\\nReturns a render task object.\\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\\n\\n"
  create_dashboard_element_render_task(
    "Id of dashboard element to render: UDD dashboard element would be numeric and LookML dashboard element would be model_name::dashboard_title::lookml_link_id"
    dashboard_element_id: String!
    "Output type: png or jpg"
    result_format: String!
    "Output width in pixels"
    width: BigInt!
    "Output height in pixels"
    height: BigInt!
    "Requested fields."
    fields: String
  ): RenderTask @httpOperation(path: "/render_tasks/dashboard_elements/{args.dashboard_element_id}/{args.result_format}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"width\\":\\"width\\",\\"height\\":\\"height\\",\\"fields\\":\\"fields\\"}")
  "### Configure Repository Credential for a remote dependency\\n\\nAdmin required.\\n\\n\`root_project_id\` is required.\\n\`credential_id\` is required.\\n\\n"
  update_repository_credential(
    "Root Project Id"
    root_project_id: String!
    "Credential Id"
    credential_id: String!
    input: RepositoryCredential_Input
  ): RepositoryCredential @httpOperation(path: "/projects/{args.root_project_id}/credential/{args.credential_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Repository Credential for a remote dependency\\n\\nAdmin required.\\n\\n\`root_project_id\` is required.\\n\`credential_id\` is required.\\n"
  delete_repository_credential(
    "Root Project Id"
    root_project_id: String!
    "Credential Id"
    credential_id: String!
  ): String @httpOperation(path: "/projects/{args.root_project_id}/credential/{args.credential_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a role with the specified information.\\n"
  create_role(input: Role_Input): Role @httpOperation(path: "/roles", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Delete the role with a specific id.\\n"
  delete_role(
    "id of role"
    role_id: String!
  ): String @httpOperation(path: "/roles/{args.role_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update information about the role with a specific id.\\n"
  update_role(
    "id of role"
    role_id: String!
    input: Role_Input
  ): Role @httpOperation(path: "/roles/{args.role_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Set all groups for a role, removing all existing group associations from that role.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  set_role_groups(
    "id of role"
    role_id: String!
    input: [String]
  ): [Group] @httpOperation(path: "/roles/{args.role_id}/groups", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Set all the users of the role with a specific id.\\n"
  set_role_users(
    "id of role"
    role_id: String!
    input: [String]
  ): [User] @httpOperation(path: "/roles/{args.role_id}/users", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "Kill a query with a specific query_task_id.\\n"
  kill_query(
    "Query task id."
    query_task_id: String!
  ): String @httpOperation(path: "/running_queries/{args.query_task_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update the SAML configuration.\\n\\nConfiguring SAML impacts authentication for all users. This configuration should be done carefully.\\n\\nOnly Looker administrators can read and update the SAML configuration.\\n\\nSAML is enabled or disabled for Looker using the **enabled** field.\\n\\nIt is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  update_saml_config(input: SamlConfig_Input): SamlConfig @httpOperation(path: "/saml_config", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete a SAML test configuration.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  delete_saml_test_config(
    "Slug of test config"
    test_slug: String!
  ): String @httpOperation(path: "/saml_test_configs/{args.test_slug}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a SAML test configuration.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  create_saml_test_config(input: SamlConfig_Input): SamlConfig @httpOperation(path: "/saml_test_configs", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Parse the given xml as a SAML IdP metadata document and return the result.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  parse_saml_idp_metadata(input: String): SamlMetadataParseResult @httpOperation(path: "/parse_saml_idp_metadata", operationSpecificHeaders: "{\\"Content-Type\\":\\"text/plain\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Fetch the given url and parse it as a SAML IdP metadata document and return the result.\\nNote that this requires that the url be public or at least at a location where the Looker instance\\ncan fetch it without requiring any special authentication.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  fetch_and_parse_saml_idp_metadata(input: String): SamlMetadataParseResult @httpOperation(path: "/fetch_and_parse_saml_idp_metadata", operationSpecificHeaders: "{\\"Content-Type\\":\\"text/plain\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Delete a Scheduled Plan\\n\\nNormal users can only delete their own scheduled plans.\\nAdmins can delete other users' scheduled plans.\\nThis delete cannot be undone.\\n"
  delete_scheduled_plan(
    "Scheduled Plan Id"
    scheduled_plan_id: String!
  ): String @httpOperation(path: "/scheduled_plans/{args.scheduled_plan_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update a Scheduled Plan\\n\\nAdmins can update other users' Scheduled Plans.\\n\\nNote: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations\\ncurrently defined for the scheduled plan.\\n\\nFor Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan\\nspecifying only B in the destinations, then destinations A and C will be deleted by the update.\\n\\nUpdating a scheduled plan to assign null or an empty array to the scheduled_plan_destinations property is an error, as a scheduled plan must always have at least one destination.\\n\\nIf you omit the scheduled_plan_destinations property from the object passed to update, then the destinations\\ndefined on the original scheduled plan will remain unchanged.\\n\\n#### Email Permissions:\\n\\nFor details about permissions required to schedule delivery to email and the safeguards\\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\\n\\n\\n#### Scheduled Plan Destination Formats\\n\\nScheduled plan destinations must specify the data format to produce and send to the destination.\\n\\nFormats:\\n\\n| format | Description\\n| :-----------: | :--- |\\n| json | A JSON object containing a \`data\` property which contains an array of JSON objects, one per row. No metadata.\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| inline_json | Same as the JSON format, except that the \`data\` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| xlsx | MS Excel spreadsheet\\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\\n||\\n\\nValid formats vary by destination type and source object. \`wysiwyg_pdf\` is only valid for dashboards, for example.\\n\\n\\n"
  update_scheduled_plan(
    "Scheduled Plan Id"
    scheduled_plan_id: String!
    input: ScheduledPlan_Input
  ): ScheduledPlan @httpOperation(path: "/scheduled_plans/{args.scheduled_plan_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create a Scheduled Plan\\n\\nCreate a scheduled plan to render a Look or Dashboard on a recurring schedule.\\n\\nTo create a scheduled plan, you MUST provide values for the following fields:\\n\`name\`\\nand\\n\`look_id\`, \`dashboard_id\`, \`lookml_dashboard_id\`, or \`query_id\`\\nand\\n\`cron_tab\` or \`datagroup\`\\nand\\nat least one scheduled_plan_destination\\n\\nA scheduled plan MUST have at least one scheduled_plan_destination defined.\\n\\nWhen \`look_id\` is set, \`require_no_results\`, \`require_results\`, and \`require_change\` are all required.\\n\\nIf \`create_scheduled_plan\` fails with a 422 error, be sure to look at the error messages in the response which will explain exactly what fields are missing or values that are incompatible.\\n\\nThe queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.\\n\\nWhen \`run_as_recipient\` is \`false\` or not specified, the queries that provide the data for the\\nlook or dashboard are run in the context of user account that owns the scheduled plan.\\n\\nWhen \`run_as_recipient\` is \`true\` and all the email recipients are Looker user accounts, the\\nqueries are run in the context of each recipient, so different recipients may see different\\ndata from the same scheduled render of a look or dashboard. For more details, see [Run As Recipient](https://cloud.google.com/looker/docs/r/admin/run-as-recipient).\\n\\nAdmins can create and modify scheduled plans on behalf of other users by specifying a user id.\\nNon-admin users may not create or modify scheduled plans by or for other users.\\n\\n#### Email Permissions:\\n\\nFor details about permissions required to schedule delivery to email and the safeguards\\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\\n\\n\\n#### Scheduled Plan Destination Formats\\n\\nScheduled plan destinations must specify the data format to produce and send to the destination.\\n\\nFormats:\\n\\n| format | Description\\n| :-----------: | :--- |\\n| json | A JSON object containing a \`data\` property which contains an array of JSON objects, one per row. No metadata.\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| inline_json | Same as the JSON format, except that the \`data\` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| xlsx | MS Excel spreadsheet\\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\\n||\\n\\nValid formats vary by destination type and source object. \`wysiwyg_pdf\` is only valid for dashboards, for example.\\n\\n\\n"
  create_scheduled_plan(input: ScheduledPlan_Input): ScheduledPlan @httpOperation(path: "/scheduled_plans", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Run a Scheduled Plan Immediately\\n\\nCreate a scheduled plan that runs only once, and immediately.\\n\\nThis can be useful for testing a Scheduled Plan before committing to a production schedule.\\n\\nAdmins can create scheduled plans on behalf of other users by specifying a user id.\\n\\nThis API is rate limited to prevent it from being used for relay spam or DoS attacks\\n\\n#### Email Permissions:\\n\\nFor details about permissions required to schedule delivery to email and the safeguards\\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\\n\\n\\n#### Scheduled Plan Destination Formats\\n\\nScheduled plan destinations must specify the data format to produce and send to the destination.\\n\\nFormats:\\n\\n| format | Description\\n| :-----------: | :--- |\\n| json | A JSON object containing a \`data\` property which contains an array of JSON objects, one per row. No metadata.\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| inline_json | Same as the JSON format, except that the \`data\` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| xlsx | MS Excel spreadsheet\\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\\n||\\n\\nValid formats vary by destination type and source object. \`wysiwyg_pdf\` is only valid for dashboards, for example.\\n\\n\\n"
  scheduled_plan_run_once(input: ScheduledPlan_Input): ScheduledPlan @httpOperation(path: "/scheduled_plans/run_once", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Run a Scheduled Plan By Id Immediately\\nThis function creates a run-once schedule plan based on an existing scheduled plan,\\napplies modifications (if any) to the new scheduled plan, and runs the new schedule plan immediately.\\nThis can be useful for testing modifications to an existing scheduled plan before committing to a production schedule.\\n\\nThis function internally performs the following operations:\\n\\n1. Copies the properties of the existing scheduled plan into a new scheduled plan\\n2. Copies any properties passed in the JSON body of this request into the new scheduled plan (replacing the original values)\\n3. Creates the new scheduled plan\\n4. Runs the new scheduled plan\\n\\nThe original scheduled plan is not modified by this operation.\\nAdmins can create, modify, and run scheduled plans on behalf of other users by specifying a user id.\\nNon-admins can only create, modify, and run their own scheduled plans.\\n\\n#### Email Permissions:\\n\\nFor details about permissions required to schedule delivery to email and the safeguards\\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\\n\\n\\n#### Scheduled Plan Destination Formats\\n\\nScheduled plan destinations must specify the data format to produce and send to the destination.\\n\\nFormats:\\n\\n| format | Description\\n| :-----------: | :--- |\\n| json | A JSON object containing a \`data\` property which contains an array of JSON objects, one per row. No metadata.\\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\\n| inline_json | Same as the JSON format, except that the \`data\` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\\n| csv | Comma separated values with a header\\n| txt | Tab separated values with a header\\n| html | Simple html\\n| xlsx | MS Excel spreadsheet\\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\\n||\\n\\nValid formats vary by destination type and source object. \`wysiwyg_pdf\` is only valid for dashboards, for example.\\n\\n\\n\\nThis API is rate limited to prevent it from being used for relay spam or DoS attacks\\n\\n"
  scheduled_plan_run_once_by_id(
    "Id of schedule plan to copy and run"
    scheduled_plan_id: String!
    input: WriteScheduledPlan_Input
  ): ScheduledPlan @httpOperation(path: "/scheduled_plans/{args.scheduled_plan_id}/run_once", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update session config.\\n"
  update_session_config(input: SessionConfig_Input): SessionConfig @httpOperation(path: "/session_config", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Update API Session\\n\\n#### API Session Workspace\\n\\nYou can use this endpoint to change the active workspace for the current API session.\\n\\nOnly one workspace can be active in a session. The active workspace can be changed\\nany number of times in a session.\\n\\nThe default workspace for API sessions is the \\"production\\" workspace.\\n\\nAll Looker APIs that use projects or lookml models (such as running queries) will\\nuse the version of project and model files defined by this workspace for the lifetime of the\\ncurrent API session or until the session workspace is changed again.\\n\\nAn API session has the same lifetime as the access_token used to authenticate API requests. Each successful\\nAPI login generates a new access_token and a new API session.\\n\\nIf your Looker API client application needs to work in a dev workspace across multiple\\nAPI sessions, be sure to select the dev workspace after each login.\\n"
  update_session(input: ApiSession_Input): ApiSession @httpOperation(path: "/session", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Configure Looker Settings\\n\\nAvailable settings are:\\n - allow_user_timezones\\n - custom_welcome_email\\n - data_connector_default_enabled\\n - extension_framework_enabled\\n - extension_load_url_enabled\\n - marketplace_auto_install_enabled\\n - marketplace_enabled\\n - onboarding_enabled\\n - privatelabel_configuration\\n - timezone\\n - host_url\\n - email_domain_allowlist\\n - embed_cookieless_v2\\n\\nSee the \`Setting\` type for more information on the specific values that can be configured.\\n"
  set_setting(
    "Requested fields"
    fields: String
    input: Setting_Input
  ): Setting @httpOperation(path: "/setting", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Configure SMTP Settings\\n  This API allows users to configure the SMTP settings on the Looker instance.\\n  Only admin users are authorised to call this API.\\n"
  set_smtp_settings(input: SmtpSettings_Input): Void @httpOperation(path: "/smtp_settings", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Delete the folder with a specific id including any children folders.\\n**DANGER** this will delete all looks and dashboards in the folder.\\n"
  delete_folder(
    "Id of folder"
    folder_id: String!
  ): String @httpOperation(path: "/folders/{args.folder_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Update the folder with a specific id."
  update_folder(
    "Id of folder"
    folder_id: String!
    input: UpdateFolder_Input
  ): Folder @httpOperation(path: "/folders/{args.folder_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Create a folder with specified information.\\n\\nCaller must have permission to edit the parent folder and to create folders, otherwise the request\\nreturns 404 Not Found.\\n"
  create_folder(input: CreateFolder_Input): Folder @httpOperation(path: "/folders", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Create a SQL Runner Query\\n\\nEither the \`connection_name\` or \`model_name\` parameter MUST be provided.\\n"
  create_sql_query(input: SqlQueryCreate_Input): SqlQuery @httpOperation(path: "/sql_queries", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "Execute a SQL Runner query in a given result_format."
  run_sql_query(
    "slug of query"
    slug: String!
    "Format of result, options are: [\\"inline_json\\", \\"json\\", \\"json_detail\\", \\"json_fe\\", \\"csv\\", \\"html\\", \\"md\\", \\"txt\\", \\"xlsx\\", \\"gsxml\\", \\"json_label\\"]"
    result_format: String!
    "Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content."
    download: String
  ): String @httpOperation(path: "/sql_queries/{args.slug}/run/{args.result_format}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"download\\":\\"download\\"}")
  "### Add Support Access Allowlist Users\\n\\nAdds a list of emails to the Allowlist, using the provided reason\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  add_support_access_allowlist_entries(input: SupportAccessAddEntries_Input): [SupportAccessAllowlistEntry] @httpOperation(path: "/support_access/allowlist", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Delete Support Access Allowlist User\\n\\nDeletes the specified Allowlist Entry Id\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  delete_support_access_allowlist_entry(
    "Id of Allowlist Entry"
    entry_id: String!
  ): String @httpOperation(path: "/support_access/allowlist/{args.entry_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Enable Support Access\\n\\nEnables Support Access for the provided duration\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  enable_support_access(input: SupportAccessEnable_Input): SupportAccessStatus @httpOperation(path: "/support_access/enable", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Disable Support Access\\n\\nDisables Support Access immediately\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  disable_support_access: SupportAccessStatus @httpOperation(path: "/support_access/disable", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
  "### Create a theme\\n\\nCreates a new theme object, returning the theme details, including the created id.\\n\\nIf \`settings\` are not specified, the default theme settings will be copied into the new theme.\\n\\nThe theme \`name\` can only contain alphanumeric characters or underscores. Theme names should not contain any confidential information, such as customer names.\\n\\n**Update** an existing theme with [Update Theme](#!/Theme/update_theme)\\n\\n**Permanently delete** an existing theme with [Delete Theme](#!/Theme/delete_theme)\\n\\nFor more information, see [Creating and Applying Themes](https://cloud.google.com/looker/docs/r/admin/themes).\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  create_theme(input: Theme_Input): Theme @httpOperation(path: "/themes", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Set the global default theme by theme name\\n\\nOnly Admin users can call this function.\\n\\nOnly an active theme with no expiration (\`end_at\` not set) can be assigned as the default theme. As long as a theme has an active record with no expiration, it can be set as the default.\\n\\n[Create Theme](#!/Theme/create) has detailed information on rules for default and active themes\\n\\nReturns the new specified default theme object.\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  set_default_theme(
    "Name of theme to set as default"
    name: String!
  ): Theme @httpOperation(path: "/themes/default", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"name\\":\\"name\\"}")
  "### Validate a theme with the specified information\\n\\nValidates all values set for the theme, returning any errors encountered, or 200 OK if valid\\n\\nSee [Create Theme](#!/Theme/create_theme) for constraints\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  validate_theme(input: Theme_Input): validate_theme_response @httpOperation(path: "/themes/validate", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update the theme by id.\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  update_theme(
    "Id of theme"
    theme_id: String!
    input: Theme_Input
  ): Theme @httpOperation(path: "/themes/{args.theme_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete a specific theme by id\\n\\nThis operation permanently deletes the identified theme from the database.\\n\\nBecause multiple themes can have the same name (with different activation time spans) themes can only be deleted by ID.\\n\\nAll IDs associated with a theme name can be retrieved by searching for the theme name with [Theme Search](#!/Theme/search).\\n\\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\\n\\n"
  delete_theme(
    "Id of theme"
    theme_id: String!
  ): String @httpOperation(path: "/themes/{args.theme_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create an SSH Server.\\n"
  create_ssh_server(input: SshServer_Input): SshServer @httpOperation(path: "/ssh_servers", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update an SSH Server.\\n"
  update_ssh_server(
    "Id of SSH Server"
    ssh_server_id: String!
    input: SshServer_Input
  ): SshServer @httpOperation(path: "/ssh_server/{args.ssh_server_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete an SSH Server.\\n"
  delete_ssh_server(
    "Id of SSH Server"
    ssh_server_id: String!
  ): String @httpOperation(path: "/ssh_server/{args.ssh_server_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create an SSH Tunnel\\n"
  create_ssh_tunnel(input: SshTunnel_Input): SshTunnel @httpOperation(path: "/ssh_tunnels", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update an SSH Tunnel\\n"
  update_ssh_tunnel(
    "Id of SSH Tunnel"
    ssh_tunnel_id: String!
    input: SshTunnel_Input
  ): SshTunnel @httpOperation(path: "/ssh_tunnel/{args.ssh_tunnel_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete an SSH Tunnel\\n"
  delete_ssh_tunnel(
    "Id of SSH Tunnel"
    ssh_tunnel_id: String!
  ): String @httpOperation(path: "/ssh_tunnel/{args.ssh_tunnel_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a new user attribute\\n\\nPermission information for a user attribute is conveyed through the \`can\` and \`user_can_edit\` fields.\\nThe \`user_can_edit\` field indicates whether an attribute is user-editable _anywhere_ in the application.\\nThe \`can\` field gives more granular access information, with the \`set_value\` child field indicating whether\\nan attribute's value can be set by [Setting the User Attribute User Value](#!/User/set_user_attribute_user_value).\\n\\nNote: \`name\` and \`label\` fields must be unique across all user attributes in the Looker instance.\\nAttempting to create a new user attribute with a name or label that duplicates an existing\\nuser attribute will fail with a 422 error.\\n"
  create_user_attribute(
    "Requested fields."
    fields: String
    input: UserAttribute_Input
  ): UserAttribute @httpOperation(path: "/user_attributes", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update a user attribute definition.\\n"
  update_user_attribute(
    "Id of user attribute"
    user_attribute_id: String!
    "Requested fields."
    fields: String
    input: UserAttribute_Input
  ): UserAttribute @httpOperation(path: "/user_attributes/{args.user_attribute_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Delete a user attribute (admin only).\\n"
  delete_user_attribute(
    "Id of user attribute"
    user_attribute_id: String!
  ): String @httpOperation(path: "/user_attributes/{args.user_attribute_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Define values for a user attribute across a set of groups, in priority order.\\n\\nThis function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting\\nall users in the system. This function replaces any existing group value definitions for the indicated user attribute.\\n\\nThe value of a user attribute for a given user is determined by searching the following locations, in this order:\\n\\n1. the user's account settings\\n2. the groups that the user is a member of\\n3. the default value of the user attribute, if any\\n\\nThe user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter\\ndetermines which group takes priority for that user. Lowest array index wins.\\n\\nAn alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each\\ngroup-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a\\nrank value to every group-value object in the array.\\n\\n  To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).\\nTo set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value).\\n"
  set_user_attribute_group_values(
    "Id of user attribute"
    user_attribute_id: String!
    input: [UserAttributeGroupValue_Input]
  ): [UserAttributeGroupValue] @httpOperation(path: "/user_attributes/{args.user_attribute_id}/group_values", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Removes login lockout for the associated user.\\n"
  delete_user_login_lockout(
    "The key associated with the locked user"
    key: String!
  ): String @httpOperation(path: "/user_login_lockout/{args.key}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a user with the specified information.\\n"
  create_user(
    "Requested fields."
    fields: String
    input: User_Input
  ): User @httpOperation(path: "/users", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Update information about the user with a specific id.\\n"
  update_user(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    input: User_Input
  ): User @httpOperation(path: "/users/{args.user_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Delete the user with a specific id.\\n\\n**DANGER** this will delete the user and all looks and other information owned by the user.\\n"
  delete_user(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Email/password login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  create_user_credentials_email(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    input: CredentialsEmail_Input
  ): CredentialsEmail @httpOperation(path: "/users/{args.user_id}/credentials_email", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Email/password login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  update_user_credentials_email(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    input: CredentialsEmail_Input
  ): CredentialsEmail @httpOperation(path: "/users/{args.user_id}/credentials_email", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Email/password login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_email(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_email", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Two-factor login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  create_user_credentials_totp(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    input: CredentialsTotp_Input
  ): CredentialsTotp @httpOperation(path: "/users/{args.user_id}/credentials_totp", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Two-factor login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_totp(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_totp", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### LDAP login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_ldap(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_ldap", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Google authentication login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_google(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_google", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Saml authentication login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_saml(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_saml", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### OpenID Connect (OIDC) authentication login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_oidc(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_oidc", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### API login information for the specified user. This is for the newer API keys that can be added for any user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_api3(
    "Id of user"
    user_id: String!
    "Id of API Credential"
    credentials_api3_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_api3/{args.credentials_api3_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### API login information for the specified user. This is for the newer API keys that can be added for any user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  create_user_credentials_api3(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CreateCredentialsApi3 @httpOperation(path: "/users/{args.user_id}/credentials_api3", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Embed login information for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_embed(
    "Id of user"
    user_id: String!
    "Id of Embedding Credential"
    credentials_embed_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_embed/{args.credentials_embed_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Looker Openid login information for the specified user. Used by Looker Analysts.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_credentials_looker_openid(
    "Id of user"
    user_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/credentials_looker_openid", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Web login session for the specified user.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview)."
  delete_user_session(
    "Id of user"
    user_id: String!
    "Id of Web Login Session"
    session_id: String!
  ): String @httpOperation(path: "/users/{args.user_id}/sessions/{args.session_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Create a password reset token.\\nThis will create a cryptographically secure random password reset token for the user.\\nIf the user already has a password reset token then this invalidates the old token and creates a new one.\\nThe token is expressed as the 'password_reset_url' of the user's email/password credential object.\\nThis takes an optional 'expires' param to indicate if the new token should be an expiring token.\\nTokens that expire are typically used for self-service password resets for existing users.\\nInvitation emails for new users typically are not set to expire.\\nThe expire period is always 60 minutes when expires is enabled.\\nThis method can be called with an empty body.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  create_user_credentials_email_password_reset(
    "Id of user"
    user_id: String!
    "Expiring token."
    expires: Boolean
    "Requested fields."
    fields: String
  ): CredentialsEmail @httpOperation(path: "/users/{args.user_id}/credentials_email/password_reset", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"expires\\":\\"expires\\",\\"fields\\":\\"fields\\"}")
  "### Set roles of the user with a specific id.\\n"
  set_user_roles(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    input: [String]
  ): [Role] @httpOperation(path: "/users/{args.user_id}/roles", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Store a custom value for a user attribute in a user's account settings.\\n\\nPer-user user attribute values take precedence over group or default values.\\n"
  set_user_attribute_user_value(
    "Id of user"
    user_id: String!
    "Id of user attribute"
    user_attribute_id: String!
    input: UserAttributeWithValue_Input
  ): UserAttributeWithValue @httpOperation(path: "/users/{args.user_id}/attribute_values/{args.user_attribute_id}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PATCH)
  "### Delete a user attribute value from a user's account settings.\\n\\nAfter the user attribute value is deleted from the user's account settings, subsequent requests\\nfor the user attribute value for this user will draw from the user's groups or the default\\nvalue of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more\\ninformation about how user attribute values are resolved.\\n"
  delete_user_attribute_user_value(
    "Id of user"
    user_id: String!
    "Id of user attribute"
    user_attribute_id: String!
  ): Void @httpOperation(path: "/users/{args.user_id}/attribute_values/{args.user_attribute_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: DELETE)
  "### Send a password reset token.\\nThis will send a password reset email to the user. If a password reset token does not already exist\\nfor this user, it will create one and then send it.\\nIf the user has not yet set up their account, it will send a setup email to the user.\\nThe URL sent in the email is expressed as the 'password_reset_url' of the user's email/password credential object.\\nPassword reset URLs will expire in 60 minutes.\\nThis method can be called with an empty body.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  send_user_credentials_email_password_reset(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
  ): CredentialsEmail @httpOperation(path: "/users/{args.user_id}/credentials_email/send_password_reset", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "### Change a disabled user's email addresses\\n\\nAllows the admin to change the email addresses for all the user's\\nassociated credentials.  Will overwrite all associated email addresses with\\nthe value supplied in the 'email' body param.\\nThe user's 'is_disabled' status must be true.\\n\\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\\n"
  wipeout_user_emails(
    "Id of user"
    user_id: String!
    "Requested fields."
    fields: String
    input: UserEmailOnly_Input
  ): User @httpOperation(path: "/users/{args.user_id}/update_emails", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"fields\\":\\"fields\\"}")
  "Create an embed user from an external user ID\\n"
  create_embed_user(input: CreateEmbedUserRequest_Input): UserPublic @httpOperation(path: "/users/embed_user", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "### Update the whitelabel configuration\\n"
  update_whitelabel_configuration(input: WhitelabelConfiguration_Input): WhitelabelConfiguration @httpOperation(path: "/whitelabel_configuration", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: PUT)
}

input CreateQueryTask_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Id of query to run"
  query_id: String
  result_format: mutationInput_create_query_task_input_result_format
  "Source of query task"
  source: String
  "Create the task but defer execution"
  deferred: Boolean!
  "Id of look associated with query."
  look_id: String
  "Id of dashboard associated with query."
  dashboard_id: String
}

"Desired async query result format. Valid values are: \\"inline_json\\", \\"json\\", \\"json_detail\\", \\"json_fe\\", \\"csv\\", \\"html\\", \\"md\\", \\"txt\\", \\"xlsx\\", \\"gsxml\\"."
enum mutationInput_create_query_task_input_result_format {
  inline_json
  json
  json_detail
  json_fe
  csv
  html
  md
  txt
  xlsx
  gsxml
}

input Query__Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Model"
  model: String!
  "Explore Name"
  view: String!
  "Fields"
  fields: [String]
  "Pivots"
  pivots: [String]
  "Fill Fields"
  fill_fields: [String]
  "Filters"
  filters: JSON
  "Filter Expression"
  filter_expression: String
  "Sorting for the query results. Use the format \`[\\"view.field\\", ...]\` to sort on fields in ascending order. Use the format \`[\\"view.field desc\\", ...]\` to sort on fields in descending order. Use \`[\\"__UNSORTED__\\"]\` (2 underscores before and after) to disable sorting entirely. Empty sorts \`[]\` will trigger a default sort."
  sorts: [String]
  "Limit"
  limit: String
  "Column Limit"
  column_limit: String
  "Total"
  total: Boolean
  "Raw Total"
  row_total: String
  "Fields on which to run subtotals"
  subtotals: [String]
  "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \\"type\\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties."
  vis_config: JSON
  "The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over \\"filters\\". When creating a query or modifying an existing query, \\"filter_config\\" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque."
  filter_config: JSON
  "Visible UI Sections"
  visible_ui_sections: String
  "Slug"
  slug: String
  "Dynamic Fields"
  dynamic_fields: String
  "Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated."
  client_id: String
  "Share Url"
  share_url: String
  "Expanded Share Url"
  expanded_share_url: String
  "Expanded Url"
  url: String
  "Query Timezone"
  query_timezone: String
  "Has Table Calculations"
  has_table_calculations: Boolean
}

type AccessToken {
  "Access Token used for API calls"
  access_token: String!
  "Type of Token"
  token_type: String!
  "Number of seconds before the token expires"
  expires_in: BigInt!
  "Refresh token which can be used to obtain a new access token"
  refresh_token: String
}

input AlertPatch_Input {
  "New owner ID of the alert"
  owner_id: String
  "Set alert enabled or disabled"
  is_disabled: Boolean
  "The reason this alert is disabled"
  disabled_reason: String
  "Set alert public or private"
  is_public: Boolean
  "New threshold value"
  threshold: Float
}

input Alert_Input {
  "Filters coming from the dashboard that are applied. Example \`[{ \\"filter_title\\": \\"Name\\", \\"field_name\\": \\"distribution_centers.name\\", \\"filter_value\\": \\"Los Angeles CA\\" }]\`"
  applied_dashboard_filters: [AlertAppliedDashboardFilter_Input]
  comparison_type: mutation_update_alert_field_comparison_type!
  "Vixie-Style crontab specification when to run. At minumum, it has to be longer than 15 minute intervals"
  cron: String!
  "Domain for the custom url selected by the alert creator from the admin defined domain allowlist"
  custom_url_base: String
  "Parameters and path for the custom url defined by the alert creator"
  custom_url_params: String
  "Label for the custom url defined by the alert creator"
  custom_url_label: String
  "Boolean to determine if the custom url should be used"
  show_custom_url: Boolean!
  "An optional, user-defined title for the alert"
  custom_title: String
  "ID of the dashboard element associated with the alert. Refer to [dashboard_element()](#!/Dashboard/DashboardElement)"
  dashboard_element_id: String
  "An optional description for the alert. This supplements the title"
  description: String
  "Array of destinations to send alerts to. Must be the same type of destination. Example \`[{ \\"destination_type\\": \\"EMAIL\\", \\"email_address\\": \\"test@test.com\\" }]\`"
  destinations: [AlertDestination_Input]
  field: AlertField_Input!
  "Whether or not the user follows this alert."
  followed: Boolean
  "Whether or not the alert is followable"
  followable: Boolean
  "ID of the alert"
  id: String
  "Whether or not the alert is disabled"
  is_disabled: Boolean!
  "Reason for disabling alert"
  disabled_reason: String
  "Whether or not the alert is public"
  is_public: Boolean!
  investigative_content_type: dashboard_const
  "The ID of the investigative content. For dashboards, this will be the dashboard ID"
  investigative_content_id: String
  "The title of the investigative content."
  investigative_content_title: String
  "ID of the LookML dashboard associated with the alert"
  lookml_dashboard_id: String
  "ID of the LookML dashboard element associated with the alert"
  lookml_link_id: String
  "User id of alert owner"
  owner_id: String!
  "Alert owner's display name"
  owner_display_name: String
  "Value of the alert threshold"
  threshold: Float!
  time_series_condition_state: AlertConditionState_Input
}

input AlertAppliedDashboardFilter_Input {
  "Field Title. Refer to \`DashboardFilter.title\` in [DashboardFilter](#!/types/DashboardFilter). Example \`Name\`"
  filter_title: String
  "Field Name. Refer to \`DashboardFilter.dimension\` in [DashboardFilter](#!/types/DashboardFilter). Example \`distribution_centers.name\`"
  field_name: String!
  "Field Value. [Filter Expressions](https://cloud.google.com/looker/docs/reference/filter-expressions). Example \`Los Angeles CA\`"
  filter_value: String!
  "Human Readable Filter Description. This may be null or auto-generated. Example \`is Los Angeles CA\`"
  filter_description: String
}

input AlertDestination_Input {
  destination_type: mutation_update_alert_field_destinations_items_destination_type!
  "Email address for the 'email' type"
  email_address: String
  "Action hub integration id for the 'action_hub' type. [Integration](#!/types/Integration)"
  action_hub_integration_id: String
  "Action hub form params json for the 'action_hub' type [IntegrationParam](#!/types/IntegrationParam)"
  action_hub_form_params_json: String
}

input AlertField_Input {
  "Field's title. Usually auto-generated to reflect field name and its filters"
  title: String!
  "Field's name. Has the format \`<view>.<field>\` Refer to [docs](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts) for more details"
  name: String!
  "(Optional / Advance Use) List of fields filter. This further restricts the alert to certain dashboard element's field values. This can be used on top of dashboard filters \`applied_dashboard_filters\`. To keep thing simple, it's suggested to just use dashboard filters. Example: \`{ 'title': '12 Number on Hand', 'name': 'inventory_items.number_on_hand', 'filter': [{ 'field_name': 'inventory_items.id', 'field_value': 12, 'filter_value': null }] }\`"
  filter: [AlertFieldFilter_Input]
}

input AlertFieldFilter_Input {
  "Field Name. Has format \`<view>.<field>\`"
  field_name: String!
  "Field Value. Depends on the type of field - numeric or string. For [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type, it's a list of floats. Example \`[1.0, 56.0]\`"
  field_value: JSON!
  "Filter Value. Usually null except for [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type. It'll be a string of lat,long ie \`'1.0,56.0'\`"
  filter_value: String
}

input AlertConditionState_Input {
  "(Write-Only) The second latest time string the alert has seen."
  previous_time_series_id: String
  "(Write-Only) Latest time string the alert has seen."
  latest_time_series_id: String
}

input UpdateArtifact_Input {
  "Key of value to store. Namespace + Key must be unique."
  key: String!
  "Value to store."
  value: String!
  "MIME type of content. This can only be used to override content that is detected as text/plain. Needed to set application/json content types, which are analyzed as plain text."
  content_type: String
  "Version number of the stored value. The version must be provided for any updates to an existing artifact."
  version: BigInt
}

input BackupConfiguration_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Type of backup: looker-s3 or custom-s3"
  type: String
  "Name of bucket for custom-s3 backups"
  custom_s3_bucket: String
  "Name of region where the bucket is located"
  custom_s3_bucket_region: String
  "(Write-Only) AWS S3 key used for custom-s3 backups"
  custom_s3_key: String
  "(Write-Only) AWS S3 secret used for custom-s3 backups"
  custom_s3_secret: String
  "Link to get this item"
  url: UriReference
}

input ColorCollection_Input {
  "Unique Id"
  id: String
  "Label of color collection"
  label: String!
  "Array of categorical palette definitions"
  categoricalPalettes: [DiscretePalette_Input]!
  "Array of discrete palette definitions"
  sequentialPalettes: [ContinuousPalette_Input]!
  "Array of diverging palette definitions"
  divergingPalettes: [ContinuousPalette_Input]!
}

input DiscretePalette_Input {
  "Unique identity string"
  id: String
  "Label for palette"
  label: String
  "Type of palette"
  type: String!
  "Array of colors in the palette"
  colors: [String]!
}

input ContinuousPalette_Input {
  "Unique identity string"
  id: String
  "Label for palette"
  label: String
  "Type of palette"
  type: String!
  "Array of ColorStops in the palette"
  stops: [ColorStop_Input]!
}

input ColorStop_Input {
  "CSS color string"
  color: String!
  "Offset in continuous palette (0 to 100)"
  offset: BigInt!
}

input ContentFavorite_Input {
  "Unique Id"
  id: String
  "User Id which owns this ContentFavorite"
  user_id: String!
  "Content Metadata Id associated with this ContentFavorite"
  content_metadata_id: String!
  "Id of a look"
  look_id: String
  "Id of a dashboard"
  dashboard_id: String
  look: LookBasic_Input
  dashboard: DashboardBase_Input
  "Id of a board"
  board_id: String
}

input LookBasic_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Id of content metadata"
  content_metadata_id: String
  "Unique Id"
  id: String
  "Look Title"
  title: String
  "User Id"
  user_id: String
}

input DashboardBase_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Content Favorite Id"
  content_favorite_id: String
  "Id of content metadata"
  content_metadata_id: String
  "Description"
  description: String
  "Is Hidden"
  hidden: Boolean
  "Unique Id"
  id: String
  model: LookModel_Input
  "Timezone in which the Dashboard will run by default."
  query_timezone: String
  "Is Read-only"
  readonly: Boolean
  "Refresh Interval, as a time duration phrase like \\"2 hours 30 minutes\\". A number with no time units will be interpreted as whole seconds."
  refresh_interval: String
  "Refresh Interval in milliseconds"
  refresh_interval_to_i: BigInt
  folder: FolderBase_Input
  "Dashboard Title"
  title: String
  "Id of User"
  user_id: String
  "Content Metadata Slug"
  slug: String
  "The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)"
  preferred_viewer: String
}

input LookModel_Input {
  "Model Id"
  id: String
  "Model Label"
  label: String
}

input FolderBase_Input {
  "Unique Name"
  name: String!
  "Id of Parent. If the parent id is null, this is a root-level entry"
  parent_id: String
  "Unique Id"
  id: String
  "Id of content metadata"
  content_metadata_id: String
  "Time the folder was created"
  created_at: DateTime
  "User Id of Creator"
  creator_id: String
  "Children Count"
  child_count: BigInt
  "Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login"
  external_id: String
  "Folder is an embed folder"
  is_embed: Boolean
  "Folder is the root embed shared folder"
  is_embed_shared_root: Boolean
  "Folder is the root embed users folder"
  is_embed_users_root: Boolean
  "Folder is a user's personal folder"
  is_personal: Boolean
  "Folder is descendant of a user's personal folder"
  is_personal_descendant: Boolean
  "Folder is the root shared folder"
  is_shared_root: Boolean
  "Folder is the root user folder"
  is_users_root: Boolean
  "Operations the current user is able to perform on this object"
  can: JSON
}

input ContentMeta_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Name or title of underlying content"
  name: String
  "Id of Parent Content"
  parent_id: String
  "Id of associated dashboard when content_type is \\"dashboard\\""
  dashboard_id: String
  "Id of associated look when content_type is \\"look\\""
  look_id: String
  "Id of associated folder when content_type is \\"space\\""
  folder_id: String
  "Content Type (\\"dashboard\\", \\"look\\", or \\"folder\\")"
  content_type: String
  "Whether content inherits its access levels from parent"
  inherits: Boolean!
  "Id of Inherited Content"
  inheriting_id: String
  "Content Slug"
  slug: String
}

input ContentMetaGroupUser_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Id of associated Content Metadata"
  content_metadata_id: String
  permission_type: mutation_create_content_metadata_access_permission_type
  "ID of associated group"
  group_id: String
  "ID of associated user"
  user_id: String
}

input CustomWelcomeEmail_Input {
  "If true, custom email content will replace the default body of welcome emails"
  enabled: Boolean!
  "The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed."
  content: String
  "The text to appear in the email subject line. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled."
  subject: String
  "The text to appear in the header line of the email body. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled."
  header: String
}

type WelcomeEmailTest {
  "The content that would be sent in the body of a custom welcome email"
  content: String
  "The subject that would be sent for the custom welcome email"
  subject: String
  "The header that would be sent in the body of a custom welcome email"
  header: String
}

input WelcomeEmailTest_Input {
  "The content that would be sent in the body of a custom welcome email"
  content: String
  "The subject that would be sent for the custom welcome email"
  subject: String
  "The header that would be sent in the body of a custom welcome email"
  header: String
}

input Dashboard_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Content Favorite Id"
  content_favorite_id: String
  "Id of content metadata"
  content_metadata_id: String
  "Description"
  description: String
  "Is Hidden"
  hidden: Boolean!
  "Unique Id"
  id: String
  model: LookModel_Input
  "Timezone in which the Dashboard will run by default."
  query_timezone: String
  "Is Read-only"
  readonly: Boolean
  "Refresh Interval, as a time duration phrase like \\"2 hours 30 minutes\\". A number with no time units will be interpreted as whole seconds."
  refresh_interval: String
  "Refresh Interval in milliseconds"
  refresh_interval_to_i: BigInt
  folder: FolderBase_Input
  "Dashboard Title"
  title: String
  "Id of User"
  user_id: String
  "Content Metadata Slug"
  slug: String
  "The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)"
  preferred_viewer: String
  "Enables alerts to keep in sync with dashboard filter changes"
  alert_sync_with_dashboard_filter_enabled: Boolean!
  "Background color"
  background_color: String
  "Time that the Dashboard was created."
  created_at: DateTime
  "Enables crossfiltering in dashboards - only available in dashboards-next (beta)"
  crossfilter_enabled: Boolean!
  "Elements"
  dashboard_elements: [DashboardElement_Input]
  "Filters"
  dashboard_filters: [DashboardFilter_Input]
  "Layouts"
  dashboard_layouts: [DashboardLayout_Input]
  "Whether or not a dashboard is 'soft' deleted."
  deleted: Boolean!
  "Time that the Dashboard was 'soft' deleted."
  deleted_at: DateTime
  "Id of User that 'soft' deleted the dashboard."
  deleter_id: String
  "Relative path of URI of LookML file to edit the dashboard (LookML dashboard only)."
  edit_uri: UriReference
  "Allow visualizations to be viewed in full screen mode"
  enable_viz_full_screen: Boolean!
  "Number of times favorited"
  favorite_count: BigInt
  "Sets the default state of the filters bar to collapsed or open"
  filters_bar_collapsed: Boolean!
  "Sets the default state of the filters location to top(true) or right(false)"
  filters_location_top: Boolean!
  "Time the dashboard was last accessed"
  last_accessed_at: DateTime
  "Time last viewed in the Looker web UI"
  last_viewed_at: DateTime
  "Time that the Dashboard was most recently updated."
  updated_at: DateTime
  "Id of User that most recently updated the dashboard."
  last_updater_id: String
  "Name of User that most recently updated the dashboard."
  last_updater_name: String
  "Name of User that created the dashboard."
  user_name: String
  "configuration option that governs how dashboard loading will happen."
  load_configuration: String
  "Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match."
  lookml_link_id: String
  "Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://cloud.google.com/looker/docs/r/api/control-access)"
  show_filters_bar: Boolean
  "Show title"
  show_title: Boolean
  "Id of folder"
  folder_id: String
  "Color of text on text tiles"
  text_tile_text_color: String
  "Tile background color"
  tile_background_color: String
  "Tile text color"
  tile_text_color: String
  "Title color"
  title_color: String
  "Number of times viewed in the Looker web UI"
  view_count: BigInt
  appearance: DashboardAppearance_Input
  "Relative URL of the dashboard"
  url: String
}

input DashboardElement_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Text tile body text"
  body_text: String
  "Text tile body text as Html"
  body_text_as_html: String
  "Id of Dashboard"
  dashboard_id: String
  "Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only)."
  edit_uri: UriReference
  "Unique Id"
  id: String
  look: LookWithQuery_Input
  "Id Of Look"
  look_id: String
  "LookML link ID"
  lookml_link_id: String
  "ID of merge result"
  merge_result_id: String
  "Note Display"
  note_display: String
  "Note State"
  note_state: String
  "Note Text"
  note_text: String
  "Note Text as Html"
  note_text_as_html: String
  query: Query__Input
  "Id Of Query"
  query_id: String
  "Refresh Interval"
  refresh_interval: String
  "Refresh Interval as integer"
  refresh_interval_to_i: BigInt
  result_maker: ResultMakerWithIdVisConfigAndDynamicFields_Input
  "ID of the ResultMakerLookup entry."
  result_maker_id: String
  "Text tile subtitle text"
  subtitle_text: String
  "Title of dashboard element"
  title: String
  "Whether title is hidden"
  title_hidden: Boolean!
  "Text tile title"
  title_text: String
  "Type"
  type: String
  "Count of Alerts associated to a dashboard element"
  alert_count: BigInt
  "JSON with all the properties required for rich editor and buttons elements"
  rich_content_json: String
  "Text tile title text as Html"
  title_text_as_html: String
  "Text tile subtitle text as Html"
  subtitle_text_as_html: String
  "Extension ID"
  extension_id: String
}

input LookWithQuery_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Id of content metadata"
  content_metadata_id: String
  "Unique Id"
  id: String
  "Look Title"
  title: String
  "User Id"
  user_id: String
  "Content Favorite Id"
  content_favorite_id: String
  "Time that the Look was created."
  created_at: DateTime
  "Whether or not a look is 'soft' deleted."
  deleted: Boolean!
  "Time that the Look was deleted."
  deleted_at: DateTime
  "Id of User that deleted the look."
  deleter_id: String
  "Description"
  description: String
  "Embed Url"
  embed_url: String
  "Excel File Url"
  excel_file_url: String
  "Number of times favorited"
  favorite_count: BigInt
  "Google Spreadsheet Formula"
  google_spreadsheet_formula: String
  "Image Embed Url"
  image_embed_url: String
  "auto-run query when Look viewed"
  is_run_on_load: Boolean!
  "Time that the Look was last accessed by any user"
  last_accessed_at: DateTime
  "Id of User that last updated the look."
  last_updater_id: String
  "Time last viewed in the Looker web UI"
  last_viewed_at: DateTime
  model: LookModel_Input
  "Is Public"
  public: Boolean!
  "Public Slug"
  public_slug: String
  "Public Url"
  public_url: String
  "Query Id"
  query_id: String
  "Short Url"
  short_url: String
  folder: FolderBase_Input
  "Folder Id"
  folder_id: String
  "Time that the Look was updated."
  updated_at: DateTime
  "Number of times viewed in the Looker web UI"
  view_count: BigInt
  query: Query__Input
  "Url"
  url: String
}

input ResultMakerWithIdVisConfigAndDynamicFields_Input {
  "Unique Id."
  id: String
  "JSON string of dynamic field information."
  dynamic_fields: String
  "array of items that can be filtered and information about them."
  filterables: [ResultMakerFilterables_Input]
  "Sorts of the constituent Look, Query, or Merge Query"
  sorts: [String]
  "ID of merge result if this is a merge_result."
  merge_result_id: String
  "Total of the constituent Look, Query, or Merge Query"
  total: Boolean
  "ID of query if this is a query."
  query_id: String
  "ID of SQL Query if this is a SQL Runner Query"
  sql_query_id: String
  query: Query__Input
  "Vis config of the constituent Query, or Merge Query."
  vis_config: JSON
}

input ResultMakerFilterables_Input {
  "The model this filterable comes from (used for field suggestions)."
  model: String
  "The view this filterable comes from (used for field suggestions)."
  view: String
  "The name of the filterable thing (Query or Merged Results)."
  name: String
  "array of dashboard_filter_name: and field: objects."
  listen: [ResultMakerFilterablesListen_Input]
}

input ResultMakerFilterablesListen_Input {
  "The name of a dashboard filter to listen to."
  dashboard_filter_name: String
  "The name of the field in the filterable to filter with the value of the dashboard filter."
  field: String
}

input DashboardFilter_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Id of Dashboard"
  dashboard_id: String
  "Name of filter"
  name: String
  "Title of filter"
  title: String
  "Type of filter: one of date, number, string, or field"
  type: String
  "Default value of filter"
  default_value: String
  "Model of filter (required if type = field)"
  model: String
  "Explore of filter (required if type = field)"
  explore: String
  "Dimension of filter (required if type = field)"
  dimension: String
  "Field information"
  field: JSON
  "Display order of this filter relative to other filters"
  row: BigInt
  "Array of listeners for faceted filters"
  listens_to_filters: [String]
  "Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)"
  allow_multiple_values: Boolean!
  "Whether the filter requires a value to run the dashboard"
  required: Boolean!
  "The visual configuration for this filter. Used to set up how the UI for this filter should appear."
  ui_config: JSON
}

input DashboardLayout_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Id of Dashboard"
  dashboard_id: String
  "Type"
  type: String
  "Is Active"
  active: Boolean!
  "Column Width"
  column_width: BigInt
  "Width"
  width: BigInt
  "Whether or not the dashboard layout is deleted."
  deleted: Boolean
  "Title extracted from the dashboard this layout represents."
  dashboard_title: String
  "Components"
  dashboard_layout_components: [DashboardLayoutComponent_Input]
}

input DashboardLayoutComponent_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Id of Dashboard Layout"
  dashboard_layout_id: String
  "Id Of Dashboard Element"
  dashboard_element_id: String
  "Row"
  row: BigInt
  "Column"
  column: BigInt
  "Width"
  width: BigInt
  "Height"
  height: BigInt
  "Whether or not the dashboard layout component is deleted"
  deleted: Boolean
  "Dashboard element title, extracted from the Dashboard Element."
  element_title: String
  "Whether or not the dashboard element title is displayed."
  element_title_hidden: Boolean
  "Visualization type, extracted from a query's vis_config"
  vis_type: String
}

input DashboardAppearance_Input {
  "Page margin (side) width"
  page_side_margins: BigInt
  "Background color for the dashboard"
  page_background_color: String
  "Title alignment on dashboard tiles"
  tile_title_alignment: String
  "Space between tiles"
  tile_space_between: BigInt
  "Background color for tiles"
  tile_background_color: String
  "Tile shadow on/off"
  tile_shadow: Boolean
  "Key color"
  key_color: String
}

input DashboardLookml_Input {
  "Id of Dashboard"
  dashboard_id: String
  "(Write-Only) Id of the folder"
  folder_id: String
  "lookml of UDD"
  lookml: String
}

input CreateDashboardFilter_Input {
  "Unique Id"
  id: String
  "Id of Dashboard"
  dashboard_id: String
  "Name of filter"
  name: String
  "Title of filter"
  title: String
  "Type of filter: one of date, number, string, or field"
  type: String
  "Default value of filter"
  default_value: String
  "Model of filter (required if type = field)"
  model: String
  "Explore of filter (required if type = field)"
  explore: String
  "Dimension of filter (required if type = field)"
  dimension: String
  "Field information"
  field: JSON
  "Display order of this filter relative to other filters"
  row: BigInt
  "Array of listeners for faceted filters"
  listens_to_filters: [String]
  "Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)"
  allow_multiple_values: Boolean!
  "Whether the filter requires a value to run the dashboard"
  required: Boolean!
  "The visual configuration for this filter. Used to set up how the UI for this filter should appear."
  ui_config: JSON
}

type DataActionResponse {
  "ID of the webhook event that sent this data action. In some error conditions, this may be null."
  webhook_id: String
  "Whether the data action was successful."
  success: Boolean!
  "When true, indicates that the client should refresh (rerun) the source query because the data may have been changed by the action."
  refresh_query: Boolean!
  validation_errors: ValidationError
  "Optional message returned by the data action server describing the state of the action that took place. This can be used to implement custom failure messages. If a failure is related to a particular form field, the server should send back a validation error instead. The Looker web UI does not currently display any message if the action indicates 'success', but may do so in the future."
  message: String
}

type ValidationError {
  "Error details"
  message: String
  "Error detail array"
  errors: [ValidationErrorDetail]
  "Documentation link"
  documentation_url: UriReference
}

type ValidationErrorDetail {
  "Field with error"
  field: String
  "Error code"
  code: String
  "Error info message"
  message: String
  "Documentation link"
  documentation_url: UriReference
}

input DataActionRequest_Input {
  "The JSON describing the data action. This JSON should be considered opaque and should be passed through unmodified from the query result it came from."
  action: JSON
  "User input for any form values the data action might use."
  form_values: JSON
}

type DataActionForm {
  state: DataActionUserState
  "Array of form fields."
  fields: [DataActionFormField]
}

type DataActionUserState {
  "User state data"
  data: String
  "Time in seconds until the state needs to be refreshed"
  refresh_time: BigInt
}

type DataActionFormField {
  "Name"
  name: String
  "Human-readable label"
  label: String
  "Description of field"
  description: String
  "Type of field."
  type: String
  "Default value of the field."
  default: String
  "The URL for an oauth link, if type is 'oauth_link'."
  oauth_url: String
  "Whether or not a field supports interactive forms."
  interactive: Boolean!
  "Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation."
  required: Boolean!
  "If the form type is 'select', a list of options to be selected from."
  options: [DataActionFormSelectOption]
}

type DataActionFormSelectOption {
  "Name"
  name: String
  "Human-readable label"
  label: String
}

input Datagroup_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "UNIX timestamp at which this entry was created."
  created_at: BigInt
  "Unique ID of the datagroup"
  id: String
  "Name of the model containing the datagroup. Unique when combined with name."
  model_name: String
  "Name of the datagroup. Unique when combined with model_name."
  name: String
  "UNIX timestamp before which cache entries are considered stale. Cannot be in the future."
  stale_before: BigInt
  "UNIX timestamp at which this entry trigger was last checked."
  trigger_check_at: BigInt
  "The message returned with the error of the last trigger check."
  trigger_error: String
  "The value of the trigger when last checked."
  trigger_value: String
  "UNIX timestamp at which this entry became triggered. Cannot be in the future."
  triggered_at: BigInt
}

input DBConnection_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Name of the connection. Also used as the unique identifier"
  name: String!
  dialect: Dialect_Input
  "SQL Runner snippets for this connection"
  snippets: [Snippet_Input]
  "True if PDTs are enabled on this connection"
  pdts_enabled: Boolean
  "Host name/address of server; or the string 'localhost' in case of a connection over an SSH tunnel."
  host: String
  "Port number on server. If the connection is over an SSH tunnel, then the local port associated with the SSH tunnel."
  port: String
  "Username for server authentication"
  username: String
  "(Write-Only) Password for server authentication"
  password: String
  "Whether the connection uses OAuth for authentication."
  uses_oauth: Boolean
  "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect)."
  certificate: String
  "(Write-Only) Certificate keyfile type - .json or .p12"
  file_type: String
  "Database name"
  database: String
  "Time zone of database"
  db_timezone: String
  "Timezone to use in queries"
  query_timezone: String
  "Schema name"
  schema: String
  "Maximum number of concurrent connection to use"
  max_connections: BigInt
  "Maximum size of query in GBs (BigQuery only, can be a user_attribute name)"
  max_billing_gigabytes: String
  "Use SSL/TLS when connecting to server"
  ssl: Boolean!
  "Verify the SSL"
  verify_ssl: Boolean!
  "Name of temporary database (if used)"
  tmp_db_name: String
  "Additional params to add to JDBC connection string"
  jdbc_additional_params: String
  "Connection Pool Timeout, in seconds"
  pool_timeout: BigInt
  "(Read/Write) SQL Dialect name"
  dialect_name: String
  "Database connection has the ability to support open data studio from explore"
  supports_data_studio_link: Boolean
  "Creation date for this connection"
  created_at: String
  "Id of user who last modified this connection configuration"
  user_id: String
  "Is this an example connection?"
  example: Boolean
  "(Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password"
  user_db_credentials: Boolean
  "Fields whose values map to user attribute names"
  user_attribute_fields: [String]
  "Cron string specifying when maintenance such as PDT trigger checks and drops should be performed"
  maintenance_cron: String
  "Unix timestamp at start of last completed PDT trigger check process"
  last_regen_at: String
  "Unix timestamp at start of last completed PDT reap process"
  last_reap_at: String
  "Precache tables in the SQL Runner"
  sql_runner_precache_tables: Boolean!
  "Fetch Information Schema For SQL Writing"
  sql_writing_with_info_schema: Boolean!
  "SQL statements (semicolon separated) to issue after connecting to the database. Requires \`custom_after_connect_statements\` license feature"
  after_connect_statements: String
  pdt_context_override: DBConnectionOverride_Input
  "Is this connection created and managed by Looker"
  managed: Boolean
  "This field is only applicable to connections over an SSH Tunnel. The value of this field would be the local port associated with the SSH tunnel if configured manually. Otherwise either enter NULL or exclude this field."
  custom_local_port: BigInt
  "The Id of the ssh tunnel this connection uses"
  tunnel_id: String
  "Enable Transparent Network Substrate (TNS) connections"
  uses_tns: Boolean
  "Maximum number of threads to use to build PDTs in parallel"
  pdt_concurrency: BigInt
  "When disable_context_comment is true comment will not be added to SQL"
  disable_context_comment: Boolean
  "An External OAuth Application to use for authenticating to the database"
  oauth_application_id: String
  "When true, error PDTs will be retried every regenerator cycle"
  always_retry_failed_builds: Boolean
  "When true, query cost estimate will be displayed in explore."
  cost_estimate_enabled: Boolean
  "PDT builds on this connection can be kicked off and cancelled via API."
  pdt_api_control_enabled: Boolean
}

input Dialect_Input {
  "The name of the dialect"
  name: String
  "The human-readable label of the connection"
  label: String
  "Whether the dialect supports query cost estimates"
  supports_cost_estimate: Boolean
  "How the dialect handles cost estimation"
  cost_estimate_style: String
  "PDT index columns"
  persistent_table_indexes: String
  "PDT sortkey columns"
  persistent_table_sortkeys: String
  "PDT distkey column"
  persistent_table_distkey: String
  "Suports streaming results"
  supports_streaming: Boolean
  "Should SQL Runner snippets automatically be run"
  automatically_run_sql_runner_snippets: Boolean
  "Array of names of the tests that can be run on a connection using this dialect"
  connection_tests: [String]
  "Is supported with the inducer (i.e. generate from sql)"
  supports_inducer: Boolean
  "Can multiple databases be accessed from a connection using this dialect"
  supports_multiple_databases: Boolean
  "Whether the dialect supports allowing Looker to build persistent derived tables"
  supports_persistent_derived_tables: Boolean
  "Does the database have client SSL support settable through the JDBC string explicitly?"
  has_ssl_support: Boolean
}

input Snippet_Input {
  "Name of the snippet"
  name: String
  "Label of the snippet"
  label: String
  "SQL text of the snippet"
  sql: String
}

input DBConnectionOverride_Input {
  "Context in which to override (\`pdt\` is the only allowed value)"
  context: String!
  "Host name/address of server"
  host: String
  "Port number on server"
  port: String
  "Username for server authentication"
  username: String
  "(Write-Only) Password for server authentication"
  password: String
  "Whether or not the password is overridden in this context"
  has_password: Boolean
  "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect)."
  certificate: String
  "(Write-Only) Certificate keyfile type - .json or .p12"
  file_type: String
  "Database name"
  database: String
  "Schema name"
  schema: String
  "Additional params to add to JDBC connection string"
  jdbc_additional_params: String
  "SQL statements (semicolon separated) to issue after connecting to the database. Requires \`custom_after_connect_statements\` license feature"
  after_connect_statements: String
}

type DBConnectionTestResult {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "JDBC connection string. (only populated in the 'connect' test)"
  connection_string: String
  "Result message of test"
  message: String
  "Name of test"
  name: String
  "Result code of test"
  status: String
}

union lock_all_response @statusCodeTypeName(statusCode: 200, typeName: "String_container") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = String_container | Void_container

input DigestEmails_Input {
  "Whether or not digest emails are enabled"
  is_enabled: Boolean!
}

type DigestEmailSend {
  "True if content was successfully generated and delivered"
  configuration_delivered: Boolean!
}

type EmbedSecret {
  "Signing algorithm to use with this secret. Either \`hmac/sha-256\`(default) or \`hmac/sha-1\`"
  algorithm: String
  "When secret was created"
  created_at: String
  "Is this secret currently enabled"
  enabled: Boolean!
  "Unique Id"
  id: String!
  "Secret for use with SSO embedding"
  secret: String
  "Id of user who created this secret"
  user_id: String
  secret_type: mutation_create_embed_secret_secret_type!
}

"Field to distinguish between SSO secrets and JWT secrets Valid values are: \\"SSO\\", \\"JWT\\"."
enum mutation_create_embed_secret_secret_type {
  SSO
  JWT
}

input EmbedSecret_Input {
  "Signing algorithm to use with this secret. Either \`hmac/sha-256\`(default) or \`hmac/sha-1\`"
  algorithm: String
  "When secret was created"
  created_at: String
  "Is this secret currently enabled"
  enabled: Boolean!
  "Unique Id"
  id: String
  "Secret for use with SSO embedding"
  secret: String
  "Id of user who created this secret"
  user_id: String
  secret_type: mutation_create_embed_secret_secret_type!
}

type EmbedUrlResponse {
  "The embed URL. Any modification to this string will make the URL unusable."
  url: String!
}

input EmbedSsoParams_Input {
  "The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, \`target_url\` would look like: \`https://mycompany.looker.com:9999/dashboards/34\`. \`target_uri\` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, \`target_uri\` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance."
  target_url: UriReference!
  "Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days)."
  session_length: BigInt
  "When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true."
  force_logout_login: Boolean!
  "A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions."
  external_user_id: String
  "First name of the embed user. Defaults to 'Embed' if not specified"
  first_name: String
  "Last name of the embed user. Defaults to 'User' if not specified"
  last_name: String
  "Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of \`null\` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page."
  user_timezone: String
  "List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions."
  permissions: [String]
  "List of model names that the embed user may access"
  models: [String]
  "List of Looker group ids in which to enroll the embed user"
  group_ids: [String]
  "A unique value identifying an embed-exclusive group. Multiple embed users using the same \`external_group_id\` value will be able to share Looker content with each other. Content and embed users associated with the \`external_group_id\` will not be accessible to normal Looker users or embed users not associated with this \`external_group_id\`."
  external_group_id: String
  "A dictionary of name-value pairs associating a Looker user attribute name with a value."
  user_attributes: JSON
  "Id of the embed secret to use to sign this SSO url. If specified, the value must be an id of a valid (active) secret defined in the Looker instance. If not specified, the URL will be signed with the newest active embed secret defined in the Looker instance."
  secret_id: String
}

input EmbedParams_Input {
  "The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, \`target_url\` would look like: \`https://mycompany.looker.com:9999/dashboards/34\`. \`target_uri\` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, \`target_uri\` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance."
  target_url: UriReference!
  "Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days)."
  session_length: BigInt
  "When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true."
  force_logout_login: Boolean!
}

type EmbedCookielessSessionAcquireResponse {
  "One time token used to create or to attach to an embedded session in the Looker application server."
  authentication_token: String
  "Authentication token time to live in seconds."
  authentication_token_ttl: BigInt
  "Token used to load and navigate between Looker pages."
  navigation_token: String
  "Navigation token time to live in seconds."
  navigation_token_ttl: BigInt
  "Token to used to call Looker APIs."
  api_token: String
  "Api token time to live in seconds."
  api_token_ttl: BigInt
  "Token referencing the actual embed session. It is used to generate new api, navigation and authentication tokens. api and navigation tokens are short lived and must be refreshed regularly. A new authentication token must be acquired for each IFRAME that is created. The session_reference_token should be kept secure, ideally in the embed hosts application server."
  session_reference_token: String
  "Session reference token time to live in seconds. Note that this is the same as actual session."
  session_reference_token_ttl: BigInt
}

input EmbedCookielessSessionAcquire_Input {
  "Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days)."
  session_length: BigInt
  "When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true."
  force_logout_login: Boolean!
  "A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions."
  external_user_id: String
  "First name of the embed user. Defaults to 'Embed' if not specified"
  first_name: String
  "Last name of the embed user. Defaults to 'User' if not specified"
  last_name: String
  "Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of \`null\` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page."
  user_timezone: String
  "List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions."
  permissions: [String]
  "List of model names that the embed user may access"
  models: [String]
  "List of Looker group ids in which to enroll the embed user"
  group_ids: [String]
  "A unique value identifying an embed-exclusive group. Multiple embed users using the same \`external_group_id\` value will be able to share Looker content with each other. Content and embed users associated with the \`external_group_id\` will not be accessible to normal Looker users or embed users not associated with this \`external_group_id\`."
  external_group_id: String
  "A dictionary of name-value pairs associating a Looker user attribute name with a value."
  user_attributes: JSON
  "Token referencing the embed session and is used to generate new authentication, navigation and api tokens."
  session_reference_token: String
  "The domain of the server embedding the Looker IFRAME. This is an alternative to specifying the domain in the embedded domain allow list in the Looker embed admin page."
  embed_domain: String
}

type EmbedCookielessSessionGenerateTokensResponse {
  "Token used to load and navigate between Looker pages."
  navigation_token: String
  "Navigation token time to live in seconds."
  navigation_token_ttl: BigInt
  "Token to used to call Looker APIs."
  api_token: String
  "Api token time to live in seconds."
  api_token_ttl: BigInt
  "Token referencing the embed session and is used to generate new authentication, navigation and api tokens."
  session_reference_token: String!
  "Session reference token time to live in seconds. Note that this is the same as actual session."
  session_reference_token_ttl: BigInt
}

input EmbedCookielessSessionGenerateTokens_Input {
  "Token referencing the embed session and is used to generate new authentication, navigation and api tokens."
  session_reference_token: String!
  "Token used to load and navigate between Looker pages."
  navigation_token: String
  "Token to used to call Looker APIs."
  api_token: String
}

input ExternalOauthApplication_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "ID of this OAuth Application"
  id: String
  "The name of this application.  For Snowflake connections, this should be the name of the host database."
  name: String!
  "The OAuth Client ID for this application"
  client_id: String!
  "(Write-Only) The OAuth Client Secret for this application"
  client_secret: String!
  "The database dialect for this application."
  dialect_name: String
  "Creation time for this application"
  created_at: DateTime
}

type CreateOAuthApplicationUserStateResponse {
  "User Id"
  user_id: String!
  "OAuth Application ID"
  oauth_application_id: String!
}

input CreateOAuthApplicationUserStateRequest_Input {
  user_id: String!
  oauth_application_id: String!
  access_token: String!
  access_token_expires_at: DateTime!
  refresh_token: String
  refresh_token_expires_at: DateTime
}

input GitBranch_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "The short name on the local. Updating \`name\` results in \`git checkout <new_name>\`"
  name: String
  "The name of the remote"
  remote: String
  "The short name on the remote"
  remote_name: String
  "Name of error"
  error: String
  "Message describing an error if present"
  message: String
  "Name of the owner of a personal branch"
  owner_name: String
  "Whether or not this branch is readonly"
  readonly: Boolean
  "Whether or not this branch is a personal branch - readonly for all developers except the owner"
  personal: Boolean
  "Whether or not a local ref exists for the branch"
  is_local: Boolean
  "Whether or not a remote ref exists for the branch"
  is_remote: Boolean
  "Whether or not this is the production branch"
  is_production: Boolean
  "Number of commits the local branch is ahead of the remote"
  ahead_count: BigInt
  "Number of commits the local branch is behind the remote"
  behind_count: BigInt
  "UNIX timestamp at which this branch was last committed."
  commit_at: BigInt
  "The resolved ref of this branch. Updating \`ref\` results in \`git reset --hard <new_ref>\`\`."
  ref: String
  "The resolved ref of this branch remote."
  remote_ref: String
}

input Group_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Group can be used in content access controls"
  can_add_to_content_metadata: Boolean!
  "Currently logged in user is group member"
  contains_current_user: Boolean
  "External Id group if embed group"
  external_group_id: String
  "Group membership controlled outside of Looker"
  externally_managed: Boolean
  "Unique Id"
  id: String
  "New users are added to this group by default"
  include_by_default: Boolean
  "Name of group"
  name: String
  "Number of users included in this group"
  user_count: BigInt
}

input GroupIdForGroupInclusion_Input {
  "Id of group"
  group_id: String
}

input GroupIdForGroupUserInclusion_Input {
  "Id of user"
  user_id: String
}

input UserAttributeGroupValue_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id of this group-attribute relation"
  id: String
  "Id of group"
  group_id: String
  "Id of user attribute"
  user_attribute_id: String
  "If true, the \\"value\\" field will be null, because the attribute settings block access to this value"
  value_is_hidden: Boolean
  "Precedence for resolving value for user"
  rank: BigInt
  "Value of user attribute for group"
  value: String
}

input Board_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Id of associated content_metadata record"
  content_metadata_id: String
  "Date of board creation"
  created_at: DateTime
  "Date of board deletion"
  deleted_at: DateTime
  "Description of the board"
  description: String
  "Sections of the board"
  board_sections: [BoardSection_Input]
  "Unique Id"
  id: String
  "ids of the board sections in the order they should be displayed"
  section_order: [String]
  "Title of the board"
  title: String
  "Date of last board update"
  updated_at: DateTime
  "User id of board creator"
  user_id: String
  "Whether the board is the primary homepage or not"
  primary_homepage: Boolean
}

input BoardSection_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Time at which this section was created."
  created_at: DateTime
  "Time at which this section was deleted."
  deleted_at: DateTime
  "Description of the content found in this section."
  description: String
  "Id reference to parent board"
  board_id: String
  "Items in the board section"
  board_items: [BoardItem_Input]
  "Unique Id"
  id: String
  "ids of the board items in the order they should be displayed"
  item_order: [String]
  "ids of the homepage items the user can see in the order they should be displayed"
  visible_item_order: [String]
  "Name of row"
  title: String
  "Time at which this section was last updated."
  updated_at: DateTime
}

input BoardItem_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Name of user who created the content this item is based on"
  content_created_by: String
  "Content favorite id associated with the item this content is based on"
  content_favorite_id: String
  "Content metadata id associated with the item this content is based on"
  content_metadata_id: String
  "Last time the content that this item is based on was updated"
  content_updated_at: String
  "Custom description entered by the user, if present"
  custom_description: String
  "Custom title entered by the user, if present"
  custom_title: String
  "Custom url entered by the user, if present"
  custom_url: String
  "Dashboard to base this item on"
  dashboard_id: String
  "The actual description for display"
  description: String
  "Number of times content has been favorited, if present"
  favorite_count: BigInt
  "Associated Board Section"
  board_section_id: String
  "Unique Id"
  id: String
  "The actual image_url for display"
  image_url: String
  "The container folder name of the content"
  location: String
  "Look to base this item on"
  look_id: String
  "LookML Dashboard to base this item on"
  lookml_dashboard_id: String
  "An arbitrary integer representing the sort order within the section"
  order: BigInt
  "The actual title for display"
  title: String
  "Relative url for the associated content"
  url: String
  "Whether the custom description should be used instead of the content description, if the item is associated with content"
  use_custom_description: Boolean!
  "Whether the custom title should be used instead of the content title, if the item is associated with content"
  use_custom_title: Boolean!
  "Whether the custom url should be used instead of the content url, if the item is associated with content"
  use_custom_url: Boolean!
  "Number of times content has been viewed, if present"
  view_count: BigInt
  "(Write-Only) base64 encoded image data"
  custom_image_data_base64: String
  "Custom image_url entered by the user, if present"
  custom_image_url: String
  "Whether the custom image should be used instead of the content image, if the item is associated with content"
  use_custom_image: Boolean!
}

input IntegrationHub_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "ID of the hub."
  id: String
  "URL of the hub."
  url: String!
  "Label of the hub."
  label: String
  "Whether this hub is a first-party integration hub operated by Looker."
  official: Boolean
  "An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable."
  fetch_error_message: String
  "(Write-Only) An authorization key that will be sent to the integration hub on every request."
  authorization_token: String
  "Whether the authorization_token is set for the hub."
  has_authorization_token: Boolean
  "Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true."
  legal_agreement_signed: Boolean
  "Whether the legal terms for the integration hub are required before use."
  legal_agreement_required: Boolean
  "The legal agreement text for this integration hub."
  legal_agreement_text: String
}

input Integration_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "ID of the integration."
  id: String
  "ID of the integration hub."
  integration_hub_id: String
  "Label for the integration."
  label: String
  "Description of the integration."
  description: String
  "Whether the integration is available to users."
  enabled: Boolean!
  "Array of params for the integration."
  params: [IntegrationParam_Input]!
  "A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: \\"txt\\", \\"csv\\", \\"inline_json\\", \\"json\\", \\"json_label\\", \\"json_detail\\", \\"json_detail_lite_stream\\", \\"xlsx\\", \\"html\\", \\"wysiwyg_pdf\\", \\"assembled_pdf\\", \\"wysiwyg_png\\", \\"csv_zip\\"."
  supported_formats: [String]
  "A list of action types the integration supports. Valid values are: \\"cell\\", \\"query\\", \\"dashboard\\", \\"none\\"."
  supported_action_types: [String]
  "A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \\"formatted\\", \\"unformatted\\"."
  supported_formattings: [String]
  "A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \\"apply\\", \\"noapply\\"."
  supported_visualization_formattings: [String]
  "A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: \\"push\\", \\"url\\"."
  supported_download_settings: [String]
  "URL to an icon for the integration."
  icon_url: String
  "Whether the integration uses oauth."
  uses_oauth: Boolean
  "A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required."
  required_fields: [IntegrationRequiredField_Input]
  "Link to privacy policy for destination"
  privacy_link: String
  "Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker."
  delegate_oauth: Boolean
  "Whether the integration is available to users."
  installed_delegate_oauth_targets: [String]!
}

input IntegrationParam_Input {
  "Name of the parameter."
  name: String
  "Label of the parameter."
  label: String
  "Short description of the parameter."
  description: String
  "Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false."
  required: Boolean
  "Whether the parameter has a value set."
  has_value: Boolean
  "The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it."
  value: String
  "When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'."
  user_attribute_name: String
  "Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true."
  sensitive: Boolean
  "When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow."
  per_user: Boolean
  "When present, the param represents the oauth url the user will be taken to."
  delegate_oauth_url: String
}

input IntegrationRequiredField_Input {
  "Matches a field that has this tag."
  tag: String
  "If present, supercedes 'tag' and matches a field that has any of the provided tags."
  any_tag: [String]
  "If present, supercedes 'tag' and matches a field that has all of the provided tags."
  all_tags: [String]
}

type IntegrationTestResult {
  "Whether or not the test was successful"
  success: Boolean!
  "A message representing the results of the test."
  message: String
  "An array of connection test result for delegate oauth actions."
  delegate_oauth_result: [DelegateOauthTest]
}

type DelegateOauthTest {
  "Delegate Oauth Connection Name"
  name: String!
  "The ID of the installation target. For Slack, this would be workspace id."
  installation_target_id: String!
  "Installation ID"
  installation_id: String!
  "Whether or not the test was successful"
  success: Boolean!
}

input InternalHelpResourcesContent_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Text to display in the help menu item which will display the internal help resources"
  organization_name: String
  "Content to be displayed in the internal help resources page/modal"
  markdown_content: String
}

input InternalHelpResources_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker"
  enabled: Boolean!
}

input LDAPConfig_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled."
  alternate_email_login_allowed: Boolean!
  "(Write-Only)  Password for the LDAP account used to access the LDAP server"
  auth_password: String
  "Users will not be allowed to login at all unless a role for them is found in LDAP if set to true"
  auth_requires_role: Boolean!
  "Distinguished name of LDAP account used to access the LDAP server"
  auth_username: String
  "LDAP server hostname"
  connection_host: String
  "LDAP host port"
  connection_port: String
  "Use Transport Layer Security"
  connection_tls: Boolean!
  "Do not verify peer when using TLS"
  connection_tls_no_verify: Boolean!
  "(Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP"
  default_new_user_group_ids: [String]
  "(Read-only) Groups that will be applied to new users the first time they login via LDAP"
  default_new_user_groups: [Group_Input]
  "(Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP"
  default_new_user_role_ids: [String]
  "(Read-only) Roles that will be applied to new users the first time they login via LDAP"
  default_new_user_roles: [Role_Input]
  "Enable/Disable LDAP authentication for the server"
  enabled: Boolean!
  "Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it."
  force_no_page: Boolean!
  "(Read-only) Array of mappings between LDAP Groups and Looker Roles"
  groups: [LDAPGroupRead_Input]
  "Base dn for finding groups in LDAP searches"
  groups_base_dn: String
  "Identifier for a strategy for how Looker will search for groups in the LDAP server"
  groups_finder_type: String
  "LDAP Group attribute that signifies the members of the groups. Most commonly 'member'"
  groups_member_attribute: String
  "Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches"
  groups_objectclasses: String
  "LDAP Group attribute that signifies the user in a group. Most commonly 'dn'"
  groups_user_attribute: String
  "(Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids"
  groups_with_role_ids: [LDAPGroupWrite_Input]
  "(Read-only) Has the password been set for the LDAP account used to access the LDAP server"
  has_auth_password: Boolean
  "Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user."
  merge_new_users_by_email: Boolean!
  "When this config was last modified"
  modified_at: String
  "User id of user who last modified this config"
  modified_by: String
  "Set user roles in Looker based on groups from LDAP"
  set_roles_from_groups: Boolean!
  "(Write-Only)  Test LDAP user password. For ldap tests only."
  test_ldap_password: String
  "(Write-Only)  Test LDAP user login id. For ldap tests only."
  test_ldap_user: String
  "Name of user record attributes used to indicate email address field"
  user_attribute_map_email: String
  "Name of user record attributes used to indicate first name"
  user_attribute_map_first_name: String
  "Name of user record attributes used to indicate last name"
  user_attribute_map_last_name: String
  "Name of user record attributes used to indicate unique record id"
  user_attribute_map_ldap_id: String
  "(Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes"
  user_attributes: [LDAPUserAttributeRead_Input]
  "(Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids"
  user_attributes_with_ids: [LDAPUserAttributeWrite_Input]
  "Distinguished name of LDAP node used as the base for user searches"
  user_bind_base_dn: String
  "(Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses."
  user_custom_filter: String
  "Name(s) of user record attributes used for matching user login id (comma separated list)"
  user_id_attribute_names: String
  "(Optional) Name of user record objectclass used for finding user during login id"
  user_objectclass: String
  "Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login."
  allow_normal_group_membership: Boolean!
  "LDAP auth'd users will be able to inherit roles from non-reflected Looker groups."
  allow_roles_from_normal_groups: Boolean!
  "Allows roles to be directly assigned to LDAP auth'd users."
  allow_direct_roles: Boolean!
  "Link to get this item"
  url: UriReference
}

input Role_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Name of Role"
  name: String
  permission_set: PermissionSet_Input
  "(Write-Only) Id of permission set"
  permission_set_id: String
  model_set: ModelSet_Input
  "(Write-Only) Id of model set"
  model_set_id: String
  "Link to get this item"
  url: UriReference
  "Link to get list of users with this role"
  users_url: UriReference
}

input PermissionSet_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  all_access: Boolean
  built_in: Boolean
  "Unique Id"
  id: String
  "Name of PermissionSet"
  name: String
  permissions: [String]
  "Link to get this item"
  url: UriReference
}

input ModelSet_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  all_access: Boolean
  built_in: Boolean
  "Unique Id"
  id: String
  models: [String]
  "Name of ModelSet"
  name: String
  "Link to get this item"
  url: UriReference
}

input LDAPGroupRead_Input {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in LDAP"
  name: String
  "Looker Roles"
  roles: [Role_Input]
  "Link to ldap config"
  url: UriReference
}

input LDAPGroupWrite_Input {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in LDAP"
  name: String
  "Looker Role Ids"
  role_ids: [String]
  "Link to ldap config"
  url: UriReference
}

input LDAPUserAttributeRead_Input {
  "Name of User Attribute in LDAP"
  name: String
  "Required to be in LDAP assertion for login to be allowed to succeed"
  required: Boolean
  "Looker User Attributes"
  user_attributes: [UserAttribute_Input]
  "Link to ldap config"
  url: UriReference
}

input UserAttribute_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Name of user attribute"
  name: String
  "Human-friendly label for user attribute"
  label: String
  "Type of user attribute (\\"string\\", \\"number\\", \\"datetime\\", \\"yesno\\", \\"zipcode\\")"
  type: String
  "Default value for when no value is set on the user"
  default_value: String
  "Attribute is a system default"
  is_system: Boolean
  "Attribute is permanent and cannot be deleted"
  is_permanent: Boolean
  "If true, users will not be able to view values of this attribute"
  value_is_hidden: Boolean!
  "Non-admin users can see the values of their attributes and use them in filters"
  user_can_view: Boolean!
  "Users can change the value of this attribute for themselves"
  user_can_edit: Boolean!
  "Destinations to which a hidden attribute may be sent. Once set, cannot be edited."
  hidden_value_domain_whitelist: String
}

input LDAPUserAttributeWrite_Input {
  "Name of User Attribute in LDAP"
  name: String
  "Required to be in LDAP assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attribute Ids"
  user_attribute_ids: [String]
  "Link to ldap config"
  url: UriReference
}

type LDAPConfigTestResult {
  "Additional details for error cases"
  details: String
  "Array of issues/considerations about the result"
  issues: [LDAPConfigTestIssue]
  "Short human readable test about the result"
  message: String
  "Test status code: always 'success' or 'error'"
  status: String
  "A more detailed trace of incremental results during auth tests"
  trace: String
  user: LDAPUser
  "Link to ldap config"
  url: UriReference
}

type LDAPConfigTestIssue {
  "Severity of the issue. Error or Warning"
  severity: String
  "Message describing the issue"
  message: String
}

type LDAPUser {
  "Array of user's email addresses and aliases for use in migration"
  all_emails: [String]
  "Dictionary of user's attributes (name/value)"
  attributes: JSON
  "Primary email address"
  email: String
  "First name"
  first_name: String
  "Array of user's groups (group names only)"
  groups: [String]
  "Last Name"
  last_name: String
  "LDAP's distinguished name for the user record"
  ldap_dn: String
  "LDAP's Unique ID for the user"
  ldap_id: String
  "Array of user's roles (role names only)"
  roles: [String]
  "Link to ldap config"
  url: UriReference
}

input LegacyFeature_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Name"
  name: String
  "Description"
  description: String
  "Whether this feature has been enabled by a user"
  enabled_locally: Boolean!
  "Whether this feature is currently enabled"
  enabled: Boolean
  "Looker version where this feature became a legacy feature"
  disallowed_as_of_version: String
  "Looker version where this feature will be automatically disabled"
  disable_on_upgrade_to_version: String
  "Future Looker version where this feature will be removed"
  end_of_life_version: String
  "URL for documentation about this feature"
  documentation_url: String
  "Approximate date that this feature will be automatically disabled."
  approximate_disable_date: DateTime
  "Approximate date that this feature will be removed."
  approximate_end_of_life_date: DateTime
  "Whether this legacy feature may have been automatically disabled when upgrading to the current version."
  has_disabled_on_upgrade: Boolean
}

union copy_look_response @statusCodeTypeName(statusCode: 200, typeName: "LookWithQuery") @statusCodeTypeName(statusCode: 201, typeName: "Look") = LookWithQuery | Look

union move_look_response @statusCodeTypeName(statusCode: 200, typeName: "LookWithQuery") @statusCodeTypeName(statusCode: 201, typeName: "Look") = LookWithQuery | Look

input LookmlModel_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Array of names of connections this model is allowed to use"
  allowed_db_connection_names: [String]
  "Array of explores (if has_content)"
  explores: [LookmlModelNavExplore_Input]
  "Does this model declaration have have lookml content?"
  has_content: Boolean
  "UI-friendly name for this model"
  label: String
  "Name of the model. Also used as the unique identifier"
  name: String
  "Name of project containing the model"
  project_name: String
  "Is this model allowed to use all current and future connections"
  unlimited_db_connections: Boolean!
}

input LookmlModelNavExplore_Input {
  "Name of the explore"
  name: String
  "Description for the explore"
  description: String
  "Label for the explore"
  label: String
  "Is this explore marked as hidden"
  hidden: Boolean
  "Label used to group explores in the navigation menus"
  group_label: String
}

input MergeQuery_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Column Limit"
  column_limit: String
  "Dynamic Fields"
  dynamic_fields: String
  "Unique Id"
  id: String
  "Pivots"
  pivots: [String]
  "Unique to get results"
  result_maker_id: String
  "Sorts"
  sorts: [String]
  "Source Queries defining the results to be merged."
  source_queries: [MergeQuerySourceQuery_Input]
  "Total"
  total: Boolean!
  "Visualization Config"
  vis_config: JSON
}

input MergeQuerySourceQuery_Input {
  "An array defining which fields of the source query are mapped onto fields of the merge query"
  merge_fields: [MergeFields_Input]
  "Display name"
  name: String
  "Id of the query to merge"
  query_id: String
}

input MergeFields_Input {
  "Field name to map onto in the merged results"
  field_name: String
  "Field name from the source query"
  source_field_name: String
}

type CostEstimate {
  "Cost of SQL statement"
  cost: BigInt!
  "Does the result come from the cache?"
  cache_hit: Boolean!
  "Cost measurement size"
  cost_unit: String!
  "Human-friendly message"
  message: String!
}

input CreateCostEstimate_Input {
  "SQL statement to estimate"
  sql: String
}

type MobileToken {
  "Unique ID."
  id: String!
  "Specifies the device token"
  device_token: String!
  device_type: mutation_register_mobile_device_device_type!
}

"Specifies type of device. Valid values are: \\"android\\", \\"ios\\"."
enum mutation_register_mobile_device_device_type {
  android
  ios
}

input MobileToken_Input {
  "Unique ID."
  id: String
  "Specifies the device token"
  device_token: String!
  device_type: mutation_register_mobile_device_device_type!
}

input OauthClientApp_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "The globally unique id of this application"
  client_guid: String
  "The uri with which this application will receive an auth code by browser redirect."
  redirect_uri: String!
  "The application's display name"
  display_name: String!
  "A description of the application that will be displayed to users"
  description: String!
  "When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused. Setting disabled invalidates existing tokens."
  enabled: Boolean!
  "If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance"
  group_id: String
  "All auth codes, access tokens, and refresh tokens issued for this application prior to this date-time for ALL USERS will be invalid."
  tokens_invalid_before: DateTime
  "All users who have been activated to use this app"
  activated_users: [UserPublic_Input]
}

input UserPublic_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "First Name"
  first_name: String
  "Last Name"
  last_name: String
  "Full name for display (available only if both first_name and last_name are set)"
  display_name: String
  "URL for the avatar image (may be generic)"
  avatar_url: UriReference
  "Link to get this item"
  url: UriReference
}

union activate_app_user_response @statusCodeTypeName(statusCode: 200, typeName: "String_container") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = String_container | Void_container

input OIDCConfig_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled."
  alternate_email_login_allowed: Boolean!
  "OpenID Provider Audience"
  audience: String
  "Users will not be allowed to login at all unless a role for them is found in OIDC if set to true"
  auth_requires_role: Boolean!
  "OpenID Provider Authorization Url"
  authorization_endpoint: UriReference
  "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC"
  default_new_user_group_ids: [String]
  "(Read-only) Groups that will be applied to new users the first time they login via OIDC"
  default_new_user_groups: [Group_Input]
  "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC"
  default_new_user_role_ids: [String]
  "(Read-only) Roles that will be applied to new users the first time they login via OIDC"
  default_new_user_roles: [Role_Input]
  "Enable/Disable OIDC authentication for the server"
  enabled: Boolean!
  "(Read-only) Array of mappings between OIDC Groups and Looker Roles"
  groups: [OIDCGroupRead_Input]
  "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'"
  groups_attribute: String
  "(Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids"
  groups_with_role_ids: [OIDCGroupWrite_Input]
  "Relying Party Identifier (provided by OpenID Provider)"
  identifier: String
  "OpenID Provider Issuer"
  issuer: String
  "When this config was last modified"
  modified_at: DateTime
  "User id of user who last modified this config"
  modified_by: String
  "Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'"
  new_user_migration_types: String
  "Array of scopes to request."
  scopes: [String]
  "(Write-Only) Relying Party Secret (provided by OpenID Provider)"
  secret: String
  "Set user roles in Looker based on groups from OIDC"
  set_roles_from_groups: Boolean!
  "Slug to identify configurations that are created in order to run a OIDC config test"
  test_slug: String
  "OpenID Provider Token Url"
  token_endpoint: String
  "Name of user record attributes used to indicate email address field"
  user_attribute_map_email: String
  "Name of user record attributes used to indicate first name"
  user_attribute_map_first_name: String
  "Name of user record attributes used to indicate last name"
  user_attribute_map_last_name: String
  "(Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes"
  user_attributes: [OIDCUserAttributeRead_Input]
  "(Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids"
  user_attributes_with_ids: [OIDCUserAttributeWrite_Input]
  "OpenID Provider User Information Url"
  userinfo_endpoint: UriReference
  "Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login."
  allow_normal_group_membership: Boolean!
  "OIDC auth'd users will inherit roles from non-reflected Looker groups."
  allow_roles_from_normal_groups: Boolean!
  "Allows roles to be directly assigned to OIDC auth'd users."
  allow_direct_roles: Boolean!
  "Link to get this item"
  url: UriReference
}

input OIDCGroupRead_Input {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in OIDC"
  name: String
  "Looker Roles"
  roles: [Role_Input]
}

input OIDCGroupWrite_Input {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in OIDC"
  name: String
  "Looker Role Ids"
  role_ids: [String]
}

input OIDCUserAttributeRead_Input {
  "Name of User Attribute in OIDC"
  name: String
  "Required to be in OIDC assertion for login to be allowed to succeed"
  required: Boolean
  "Looker User Attributes"
  user_attributes: [UserAttribute_Input]
}

input OIDCUserAttributeWrite_Input {
  "Name of User Attribute in OIDC"
  name: String
  "Required to be in OIDC assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attribute Ids"
  user_attribute_ids: [String]
}

input PasswordConfig_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Minimum number of characters required for a new password.  Must be between 7 and 100"
  min_length: BigInt
  "Require at least one numeric character"
  require_numeric: Boolean!
  "Require at least one uppercase and one lowercase letter"
  require_upperlower: Boolean!
  "Require at least one special character"
  require_special: Boolean!
}

union deploy_ref_to_production_response @statusCodeTypeName(statusCode: 200, typeName: "String_container") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = String_container | Void_container

union deploy_to_production_response @statusCodeTypeName(statusCode: 200, typeName: "String_container") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = String_container | Void_container

union reset_project_to_production_response @statusCodeTypeName(statusCode: 200, typeName: "String_container") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = String_container | Void_container

union reset_project_to_remote_response @statusCodeTypeName(statusCode: 200, typeName: "String_container") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = String_container | Void_container

input Project_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Project Id"
  id: String
  "Project display name"
  name: String!
  "If true the project is configured with a git repository"
  uses_git: Boolean
  "Git remote repository url"
  git_remote_url: String
  "Git username for HTTPS authentication. (For production only, if using user attributes.)"
  git_username: String
  "(Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)"
  git_password: String
  "Git production branch name. Defaults to master. Supported only in Looker 21.0 and higher."
  git_production_branch_name: String!
  "If true, the project uses a git cookie for authentication."
  use_git_cookie_auth: Boolean!
  "User attribute name for username in per-user HTTPS authentication."
  git_username_user_attribute: String
  "User attribute name for password in per-user HTTPS authentication."
  git_password_user_attribute: String
  "Name of the git service provider"
  git_service_name: String
  "Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)"
  git_application_server_http_port: BigInt
  "Scheme that is running on application server (for PRs, file browsing, etc.)"
  git_application_server_http_scheme: String
  "(Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated."
  deploy_secret: String
  "(Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint."
  unset_deploy_secret: Boolean!
  pull_request_mode: mutation_create_project_pull_request_mode!
  "Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository"
  validation_required: Boolean!
  "If true, advanced git release management is enabled for this project"
  git_release_mgmt_enabled: Boolean!
  "Validation policy: If true, the project can be committed with warnings when \`validation_required\` is true. (\`allow_warnings\` does nothing if \`validation_required\` is false)."
  allow_warnings: Boolean!
  "If true the project is an example project and cannot be modified"
  is_example: Boolean
  "Status of dependencies in your manifest & lockfile"
  dependency_status: String
}

type ProjectValidation {
  "A list of project errors"
  errors: [ProjectError]
  "A hash value computed from the project's current state"
  project_digest: String
  "A list of models which were not fully validated"
  models_not_validated: [ModelsNotValidated]
  "Duration of project validation in seconds"
  computation_time: Float
}

union tag_ref_response @statusCodeTypeName(statusCode: 200, typeName: "Project") @statusCodeTypeName(statusCode: 204, typeName: "Void_container") = Project | Void_container

input CreateDashboardRenderTask_Input {
  "Filter values to apply to the dashboard queries, in URL query format"
  dashboard_filters: String
  "Dashboard layout style: single_column or tiled"
  dashboard_style: String
}

input RepositoryCredential_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "Root project Id"
  root_project_id: String
  "Git remote repository url"
  remote_url: String
  "Git username for HTTPS authentication."
  git_username: String
  "(Write-Only) Git password for HTTPS authentication."
  git_password: String
  "Public deploy key for SSH authentication."
  ssh_public_key: String
  "Whether the credentials have been configured for the Git Repository."
  is_configured: Boolean
}

input SamlConfig_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Enable/Disable Saml authentication for the server"
  enabled: Boolean!
  "Identity Provider Certificate (provided by IdP)"
  idp_cert: String
  "Identity Provider Url (provided by IdP)"
  idp_url: String
  "Identity Provider Issuer (provided by IdP)"
  idp_issuer: String
  "Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP."
  idp_audience: String
  "Count of seconds of clock drift to allow when validating timestamps of assertions."
  allowed_clock_drift: BigInt
  "Name of user record attributes used to indicate email address field"
  user_attribute_map_email: String
  "Name of user record attributes used to indicate first name"
  user_attribute_map_first_name: String
  "Name of user record attributes used to indicate last name"
  user_attribute_map_last_name: String
  "Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'"
  new_user_migration_types: String
  "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled."
  alternate_email_login_allowed: Boolean!
  "Slug to identify configurations that are created in order to run a Saml config test"
  test_slug: String
  "When this config was last modified"
  modified_at: String
  "User id of user who last modified this config"
  modified_by: String
  "(Read-only) Roles that will be applied to new users the first time they login via Saml"
  default_new_user_roles: [Role_Input]
  "(Read-only) Groups that will be applied to new users the first time they login via Saml"
  default_new_user_groups: [Group_Input]
  "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml"
  default_new_user_role_ids: [String]
  "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml"
  default_new_user_group_ids: [String]
  "Set user roles in Looker based on groups from Saml"
  set_roles_from_groups: Boolean!
  "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'"
  groups_attribute: String
  "(Read-only) Array of mappings between Saml Groups and Looker Roles"
  groups: [SamlGroupRead_Input]
  "(Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids"
  groups_with_role_ids: [SamlGroupWrite_Input]
  "Users will not be allowed to login at all unless a role for them is found in Saml if set to true"
  auth_requires_role: Boolean!
  "(Read-only) Array of mappings between Saml User Attributes and Looker User Attributes"
  user_attributes: [SamlUserAttributeRead_Input]
  "(Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids"
  user_attributes_with_ids: [SamlUserAttributeWrite_Input]
  "Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']"
  groups_finder_type: String
  "Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'"
  groups_member_value: String
  "Bypass the login page when user authentication is required. Redirect to IdP immediately instead."
  bypass_login_page: Boolean!
  "Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login."
  allow_normal_group_membership: Boolean!
  "SAML auth'd users will inherit roles from non-reflected Looker groups."
  allow_roles_from_normal_groups: Boolean!
  "Allows roles to be directly assigned to SAML auth'd users."
  allow_direct_roles: Boolean!
  "Link to get this item"
  url: UriReference
}

input SamlGroupRead_Input {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in Saml"
  name: String
  "Looker Roles"
  roles: [Role_Input]
  "Link to saml config"
  url: UriReference
}

input SamlGroupWrite_Input {
  "Unique Id"
  id: String
  "Unique Id of group in Looker"
  looker_group_id: String
  "Name of group in Looker"
  looker_group_name: String
  "Name of group in Saml"
  name: String
  "Looker Role Ids"
  role_ids: [String]
  "Link to saml config"
  url: UriReference
}

input SamlUserAttributeRead_Input {
  "Name of User Attribute in Saml"
  name: String
  "Required to be in Saml assertion for login to be allowed to succeed"
  required: Boolean
  "Looker User Attributes"
  user_attributes: [UserAttribute_Input]
  "Link to saml config"
  url: UriReference
}

input SamlUserAttributeWrite_Input {
  "Name of User Attribute in Saml"
  name: String
  "Required to be in Saml assertion for login to be allowed to succeed"
  required: Boolean!
  "Looker User Attribute Ids"
  user_attribute_ids: [String]
  "Link to saml config"
  url: UriReference
}

type SamlMetadataParseResult {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Identify Provider Issuer"
  idp_issuer: String
  "Identify Provider Url"
  idp_url: String
  "Identify Provider Certificate"
  idp_cert: String
}

input ScheduledPlan_Input {
  "Name of this scheduled plan"
  name: String
  "User Id which owns this scheduled plan"
  user_id: String
  "Whether schedule is run as recipient (only applicable for email recipients)"
  run_as_recipient: Boolean!
  "Whether the ScheduledPlan is enabled"
  enabled: Boolean!
  "Id of a look"
  look_id: String
  "Id of a dashboard"
  dashboard_id: String
  "Id of a LookML dashboard"
  lookml_dashboard_id: String
  "Query string to run look or dashboard with"
  filters_string: String
  "(DEPRECATED) Alias for filters_string field"
  dashboard_filters: String
  "Delivery should occur if running the dashboard or look returns results"
  require_results: Boolean!
  "Delivery should occur if the dashboard look does not return results"
  require_no_results: Boolean!
  "Delivery should occur if data have changed since the last run"
  require_change: Boolean!
  "Will run an unlimited query and send all results."
  send_all_results: Boolean!
  "Vixie-Style crontab specification when to run"
  crontab: String
  "Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)"
  datagroup: String
  "Timezone for interpreting the specified crontab (default is Looker instance timezone)"
  timezone: String
  "Query id"
  query_id: String
  "Scheduled plan destinations"
  scheduled_plan_destination: [ScheduledPlanDestination_Input]
  "Whether the plan in question should only be run once (usually for testing)"
  run_once: Boolean!
  "Whether links back to Looker should be included in this ScheduledPlan"
  include_links: Boolean!
  "Custom url domain for the scheduled entity"
  custom_url_base: String
  "Custom url path and parameters for the scheduled entity"
  custom_url_params: String
  "Custom url label for the scheduled entity"
  custom_url_label: String
  "Whether to show custom link back instead of standard looker link"
  show_custom_url: Boolean!
  "The size of paper the PDF should be formatted to fit. Valid values are: \\"letter\\", \\"legal\\", \\"tabloid\\", \\"a0\\", \\"a1\\", \\"a2\\", \\"a3\\", \\"a4\\", \\"a5\\"."
  pdf_paper_size: String
  "Whether the PDF should be formatted for landscape orientation"
  pdf_landscape: Boolean!
  "Whether this schedule is in an embed context or not"
  embed: Boolean!
  "Color scheme of the dashboard if applicable"
  color_theme: String
  "Whether or not to expand table vis to full length"
  long_tables: Boolean!
  "The pixel width at which we render the inline table visualizations"
  inline_table_width: BigInt
  "Unique Id"
  id: String
  "Date and time when ScheduledPlan was created"
  created_at: DateTime
  "Date and time when ScheduledPlan was last updated"
  updated_at: DateTime
  "Title"
  title: String
  user: UserPublic_Input
  "When the ScheduledPlan will next run (null if running once)"
  next_run_at: DateTime
  "When the ScheduledPlan was last run"
  last_run_at: DateTime
  "Operations the current user is able to perform on this object"
  can: JSON
}

input ScheduledPlanDestination_Input {
  "Unique Id"
  id: String
  "Id of a scheduled plan you own"
  scheduled_plan_id: String
  "The data format to send to the given destination. Supported formats vary by destination, but include: \\"txt\\", \\"csv\\", \\"inline_json\\", \\"json\\", \\"json_detail\\", \\"xlsx\\", \\"html\\", \\"wysiwyg_pdf\\", \\"assembled_pdf\\", \\"wysiwyg_png\\""
  format: String
  "Are values formatted? (containing currency symbols, digit separators, etc."
  apply_formatting: Boolean!
  "Whether visualization options are applied to the results."
  apply_vis: Boolean!
  "Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'."
  address: String
  "Whether the recipient is a Looker user on the current instance (only applicable for email recipients)"
  looker_recipient: Boolean
  "Type of the address ('email', 'webhook', 's3', or 'sftp')"
  type: String
  "JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username."
  parameters: String
  "(Write-Only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password."
  secret_parameters: String
  "Optional message to be included in scheduled emails"
  message: String
}

input WriteScheduledPlan_Input {
  "Name of this scheduled plan"
  name: String
  "User Id which owns this scheduled plan"
  user_id: String
  "Whether schedule is run as recipient (only applicable for email recipients)"
  run_as_recipient: Boolean!
  "Whether the ScheduledPlan is enabled"
  enabled: Boolean!
  "Id of a look"
  look_id: String
  "Id of a dashboard"
  dashboard_id: String
  "Id of a LookML dashboard"
  lookml_dashboard_id: String
  "Query string to run look or dashboard with"
  filters_string: String
  "(DEPRECATED) Alias for filters_string field"
  dashboard_filters: String
  "Delivery should occur if running the dashboard or look returns results"
  require_results: Boolean!
  "Delivery should occur if the dashboard look does not return results"
  require_no_results: Boolean!
  "Delivery should occur if data have changed since the last run"
  require_change: Boolean!
  "Will run an unlimited query and send all results."
  send_all_results: Boolean!
  "Vixie-Style crontab specification when to run"
  crontab: String
  "Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)"
  datagroup: String
  "Timezone for interpreting the specified crontab (default is Looker instance timezone)"
  timezone: String
  "Query id"
  query_id: String
  "Scheduled plan destinations"
  scheduled_plan_destination: [ScheduledPlanDestination_Input]
  "Whether the plan in question should only be run once (usually for testing)"
  run_once: Boolean!
  "Whether links back to Looker should be included in this ScheduledPlan"
  include_links: Boolean!
  "Custom url domain for the scheduled entity"
  custom_url_base: String
  "Custom url path and parameters for the scheduled entity"
  custom_url_params: String
  "Custom url label for the scheduled entity"
  custom_url_label: String
  "Whether to show custom link back instead of standard looker link"
  show_custom_url: Boolean!
  "The size of paper the PDF should be formatted to fit. Valid values are: \\"letter\\", \\"legal\\", \\"tabloid\\", \\"a0\\", \\"a1\\", \\"a2\\", \\"a3\\", \\"a4\\", \\"a5\\"."
  pdf_paper_size: String
  "Whether the PDF should be formatted for landscape orientation"
  pdf_landscape: Boolean!
  "Whether this schedule is in an embed context or not"
  embed: Boolean!
  "Color scheme of the dashboard if applicable"
  color_theme: String
  "Whether or not to expand table vis to full length"
  long_tables: Boolean!
  "The pixel width at which we render the inline table visualizations"
  inline_table_width: BigInt
}

input SessionConfig_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Allow users to have persistent sessions when they login"
  allow_persistent_sessions: Boolean!
  "Number of minutes for user sessions.  Must be between 5 and 43200"
  session_minutes: BigInt
  "Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time)."
  unlimited_sessions_per_user: Boolean!
  "Enforce session logout for sessions that are inactive for 15 minutes."
  use_inactivity_based_logout: Boolean!
  "Track location of session when user logs in."
  track_session_location: Boolean!
}

input ApiSession_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "The id of active workspace for this session"
  workspace_id: String
  "The id of the actual user in the case when this session represents one user sudo'ing as another"
  sudo_user_id: String
}

input Setting_Input {
  "Toggle extension framework on or off"
  extension_framework_enabled: Boolean!
  "(DEPRECATED) Toggle extension extension load url on or off. Do not use. This is temporary setting that will eventually become a noop and subsequently deleted."
  extension_load_url_enabled: Boolean!
  "Toggle marketplace auto install on or off. Note that auto install only runs if marketplace is enabled."
  marketplace_auto_install_enabled: Boolean!
  "Toggle marketplace on or off"
  marketplace_enabled: Boolean!
  privatelabel_configuration: PrivatelabelConfiguration_Input
  custom_welcome_email: CustomWelcomeEmail_Input
  "Toggle onboarding on or off"
  onboarding_enabled: Boolean!
  "Change instance-wide default timezone"
  timezone: String!
  "Toggle user-specific timezones on or off"
  allow_user_timezones: Boolean!
  "Toggle default future connectors on or off"
  data_connector_default_enabled: Boolean!
  "Change the base portion of your Looker instance URL setting"
  host_url: String!
  "(Write-Only) If warnings are preventing a host URL change, this parameter allows for overriding warnings to force update the setting. Does not directly change any Looker settings."
  override_warnings: Boolean!
  "An array of Email Domain Allowlist of type string for Scheduled Content"
  email_domain_allowlist: [String]!
  "Toggle cookieless embed setting"
  embed_cookieless_v2: Boolean!
}

input PrivatelabelConfiguration_Input {
  "Customer logo image. Expected base64 encoded data (write-only)"
  logo_file: String
  "Logo image url (read-only)"
  logo_url: String
  "Custom favicon image. Expected base64 encoded data (write-only)"
  favicon_file: String
  "Favicon image url (read-only)"
  favicon_url: String
  "Default page title"
  default_title: String
  "Boolean to toggle showing help menus"
  show_help_menu: Boolean!
  "Boolean to toggle showing docs"
  show_docs: Boolean!
  "Boolean to toggle showing email subscription options."
  show_email_sub_options: Boolean!
  "Boolean to toggle mentions of Looker in emails"
  allow_looker_mentions: Boolean!
  "Boolean to toggle links to Looker in emails"
  allow_looker_links: Boolean!
  "Allow subject line and email heading customization in customized emails”"
  custom_welcome_email_advanced: Boolean!
  "Remove the word Looker from appearing in the account setup page"
  setup_mentions: Boolean!
  "Remove Looker logo from Alerts"
  alerts_logo: Boolean!
  "Remove Looker links from Alerts"
  alerts_links: Boolean!
  "Remove Looker mentions in home folder page when you don’t have any items saved"
  folders_mentions: Boolean!
}

input SmtpSettings_Input {
  "SMTP Server url"
  address: String!
  "From e-mail address"
  from: String!
  "User name"
  user_name: String!
  "Password"
  password: String!
  "SMTP Server's port"
  port: BigInt!
  "Is TLS encryption enabled?"
  enable_starttls_auto: Boolean!
  ssl_version: mutationInput_set_smtp_settings_input_ssl_version
  "Whether to enable built-in Looker SMTP"
  default_smtp: Boolean
}

"TLS version selected Valid values are: \\"TLSv1_1\\", \\"SSLv23\\", \\"TLSv1_2\\"."
enum mutationInput_set_smtp_settings_input_ssl_version {
  TLSv1_1
  SSLv23
  TLSv1_2
}

input UpdateFolder_Input {
  "Unique Name"
  name: String!
  "Id of Parent. If the parent id is null, this is a root-level entry"
  parent_id: String!
}

input CreateFolder_Input {
  "Unique Name"
  name: String!
  "Id of Parent. If the parent id is null, this is a root-level entry"
  parent_id: String!
}

input SqlQueryCreate_Input {
  "Name of the db connection on which to run this query"
  connection_name: String
  "(DEPRECATED) Use \`connection_name\` instead"
  connection_id: String
  "Name of LookML Model (this or \`connection_id\` required)"
  model_name: String
  "SQL query"
  sql: String
  "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \\"type\\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties."
  vis_config: JSON
}

input SupportAccessAddEntries_Input {
  "An array of emails to add to the Allowlist"
  emails: [String]
  "Reason for adding emails to the Allowlist"
  reason: String
}

input SupportAccessEnable_Input {
  "Duration Support Access will remain enabled"
  duration_in_seconds: BigInt
}

input Theme_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for when this theme becomes active. Null=always"
  begin_at: DateTime
  "Timestamp for when this theme expires. Null=never"
  end_at: DateTime
  "Unique Id"
  id: String
  "Name of theme. Can only be alphanumeric and underscores."
  name: String!
  settings: ThemeSettings_Input
}

input ThemeSettings_Input {
  "Default background color"
  background_color: String!
  "Base font size for scaling fonts (only supported by legacy dashboards)"
  base_font_size: String
  "Optional. ID of color collection to use with the theme. Use an empty string for none."
  color_collection_id: String!
  "Default font color"
  font_color: String
  "Primary font family"
  font_family: String!
  "Source specification for font"
  font_source: String
  "(DEPRECATED) Info button color"
  info_button_color: String!
  "Primary button color"
  primary_button_color: String!
  "Toggle to show filters. Defaults to true."
  show_filters_bar: Boolean!
  "Toggle to show the title. Defaults to true."
  show_title: Boolean!
  "Text color for text tiles"
  text_tile_text_color: String!
  "Background color for tiles"
  tile_background_color: String!
  "Background color for text tiles"
  text_tile_background_color: String!
  "Text color for tiles"
  tile_text_color: String!
  "Color for titles"
  title_color: String!
  "(DEPRECATED) Warning button color"
  warn_button_color: String!
  "The text alignment of tile titles (New Dashboards)"
  tile_title_alignment: String!
  "Toggles the tile shadow (not supported)"
  tile_shadow: Boolean!
  "Toggle to show the dashboard last updated indicator. Defaults to true."
  show_last_updated_indicator: Boolean!
  "Toggle to show reload data icon/button. Defaults to true."
  show_reload_data_icon: Boolean!
  "Toggle to show the dashboard actions menu. Defaults to true."
  show_dashboard_menu: Boolean!
  "Toggle to show the filters icon/toggle. Defaults to true."
  show_filters_toggle: Boolean!
  "Toggle to show the dashboard header. Defaults to true."
  show_dashboard_header: Boolean!
  "Toggle to center the dashboard title. Defaults to false."
  center_dashboard_title: Boolean!
  "Dashboard title font size."
  dashboard_title_font_size: String!
  "Default box shadow."
  box_shadow: String!
}

union validate_theme_response @statusCodeTypeName(statusCode: 200, typeName: "ValidationError") @statusCodeTypeName(statusCode: 204, typeName: "String_container") = ValidationError | String_container

input SshServer_Input {
  "A unique id used to identify this SSH Server"
  ssh_server_id: String
  "The name to identify this SSH Server"
  ssh_server_name: String!
  "The hostname or ip address of the SSH Server"
  ssh_server_host: String!
  "The port to connect to on the SSH Server"
  ssh_server_port: BigInt!
  "The username used to connect to the SSH Server"
  ssh_server_user: String!
  "The md5 fingerprint used to identify the SSH Server"
  finger_print: String
  "The SHA fingerprint used to identify the SSH Server"
  sha_finger_print: String
  "The SSH public key created for this instance"
  public_key: String
  "The current connection status to this SSH Server"
  status: String
}

input SshTunnel_Input {
  "Unique ID for the tunnel"
  tunnel_id: String
  "SSH Server ID"
  ssh_server_id: String!
  "SSH Server name"
  ssh_server_name: String
  "SSH Server Hostname or IP Address"
  ssh_server_host: String
  "SSH Server port"
  ssh_server_port: BigInt
  "Username used to connect to the SSH Server"
  ssh_server_user: String
  "Time of last connect attempt"
  last_attempt: String
  "Localhost Port used by the Looker instance to connect to the remote DB"
  local_host_port: BigInt!
  "Hostname or IP Address of the Database Server"
  database_host: String!
  "Port that the Database Server is listening on"
  database_port: BigInt!
  "Current connection status for this Tunnel"
  status: String
}

input User_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "URL for the avatar image (may be generic)"
  avatar_url: UriReference
  "URL for the avatar image (may be generic), does not specify size"
  avatar_url_without_sizing: UriReference
  "API credentials"
  credentials_api3: [CredentialsApi3_Input]
  credentials_email: CredentialsEmail_Input
  "Embed credentials"
  credentials_embed: [CredentialsEmbed_Input]
  credentials_google: CredentialsGoogle_Input
  credentials_ldap: CredentialsLDAP_Input
  credentials_looker_openid: CredentialsLookerOpenid_Input
  credentials_oidc: CredentialsOIDC_Input
  credentials_saml: CredentialsSaml_Input
  credentials_totp: CredentialsTotp_Input
  "Full name for display (available only if both first_name and last_name are set)"
  display_name: String
  "EMail address"
  email: String
  "(DEPRECATED) (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login"
  embed_group_space_id: String
  "First name"
  first_name: String
  "Array of ids of the groups for this user"
  group_ids: [String]
  "ID string for user's home folder"
  home_folder_id: String
  "Unique Id"
  id: String
  "Account has been disabled"
  is_disabled: Boolean!
  "Last name"
  last_name: String
  "User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example."
  locale: String
  "Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')"
  looker_versions: [String]
  "User's dev workspace has been checked for presence of applicable production projects"
  models_dir_validated: Boolean
  "ID of user's personal folder"
  personal_folder_id: String
  "User is identified as an employee of Looker"
  presumed_looker_employee: Boolean
  "Array of ids of the roles for this user"
  role_ids: [String]
  "Active sessions"
  sessions: [Session_Input]
  "Per user dictionary of undocumented state information owned by the Looker UI."
  ui_state: JSON
  "User is identified as an employee of Looker who has been verified via Looker corporate authentication"
  verified_looker_employee: Boolean
  "User's roles are managed by an external directory like SAML or LDAP and can not be changed directly."
  roles_externally_managed: Boolean
  "User can be directly assigned a role."
  allow_direct_roles: Boolean
  "User can be a direct member of a normal Looker group."
  allow_normal_group_membership: Boolean
  "User can inherit roles from a normal Looker group."
  allow_roles_from_normal_groups: Boolean
  "(Embed only) ID of user's group folder based on the external_group_id optionally specified during embed user login"
  embed_group_folder_id: String
  "User is an IAM Admin - only available in Looker (Google Cloud core)"
  is_iam_admin: Boolean
  "Link to get this item"
  url: UriReference
}

input CredentialsApi3_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "API key client_id"
  client_id: String
  "Timestamp for the creation of this credential"
  created_at: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

input CredentialsEmail_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address used for user login"
  email: String
  "Force the user to change their password upon their next login"
  forced_password_reset_at_next_login: Boolean!
  "Unique Id of the user"
  user_id: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Url with one-time use secret token that the user can use to reset password"
  password_reset_url: String
  "Url with one-time use secret token that the user can use to setup account"
  account_setup_url: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
  "Link to get this user"
  user_url: UriReference
}

input CredentialsEmbed_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "Embedder's id for a group to which this user was added during the most recent login"
  external_group_id: String
  "Embedder's unique id for the user"
  external_user_id: String
  "Unique Id"
  id: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

input CredentialsGoogle_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "Google domain"
  domain: String
  "EMail address"
  email: String
  "Google's Unique ID for this user"
  google_user_id: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

input CredentialsLDAP_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "LDAP Distinguished name for this user (as-of the last login)"
  ldap_dn: String
  "LDAP Unique ID for this user"
  ldap_id: String
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

input CredentialsLookerOpenid_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address used for user login"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "IP address of client for most recent login using credential"
  logged_in_ip: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
  "Link to get this user"
  user_url: UriReference
}

input CredentialsOIDC_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "OIDC OP's Unique ID for this user"
  oidc_user_id: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

input CredentialsSaml_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "EMail address"
  email: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Timestamp for most recent login using credential"
  logged_in_at: String
  "Saml IdP's Unique ID for this user"
  saml_user_id: String
  "Short name for the type of this kind of credential"
  type: String
  "Link to get this item"
  url: UriReference
}

input CredentialsTotp_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Timestamp for the creation of this credential"
  created_at: String
  "Has this credential been disabled?"
  is_disabled: Boolean
  "Short name for the type of this kind of credential"
  type: String
  "User has verified"
  verified: Boolean
  "Link to get this item"
  url: UriReference
}

input Session_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Unique Id"
  id: String
  "IP address of user when this session was initiated"
  ip_address: String
  "User's browser type"
  browser: String
  "User's Operating System"
  operating_system: String
  "City component of user location (derived from IP address)"
  city: String
  "State component of user location (derived from IP address)"
  state: String
  "Country component of user location (derived from IP address)"
  country: String
  "Type of credentials used for logging in this session"
  credentials_type: String
  "Time when this session was last extended by the user"
  extended_at: String
  "Number of times this session was extended"
  extended_count: BigInt
  "Actual user in the case when this session represents one user sudo'ing as another"
  sudo_user_id: String
  "Time when this session was initiated"
  created_at: String
  "Time when this session will expire"
  expires_at: String
  "Link to get this item"
  url: UriReference
}

type CreateCredentialsApi3 {
  "Operations the current user is able to perform on this object"
  can: JSON!
  "Unique Id"
  id: String!
  "API key client_id"
  client_id: String
  "Timestamp for the creation of this credential"
  created_at: String
  "Has this credential been disabled?"
  is_disabled: Boolean!
  "Short name for the type of this kind of credential"
  type: String
  "API key client_secret"
  client_secret: String
  "Link to get this item"
  url: UriReference
}

input UserAttributeWithValue_Input {
  "Operations the current user is able to perform on this object"
  can: JSON
  "Name of user attribute"
  name: String
  "Human-friendly label for user attribute"
  label: String
  "Precedence for setting value on user (lowest wins)"
  rank: BigInt
  "Value of attribute for user"
  value: String
  "Id of User"
  user_id: String
  "Can the user set this value"
  user_can_edit: Boolean
  "If true, the \\"value\\" field will be null, because the attribute settings block access to this value"
  value_is_hidden: Boolean
  "Id of User Attribute"
  user_attribute_id: String
  "How user got this value for this attribute"
  source: String
  "If this user attribute is hidden, allowed list of destinations to which it may be sent."
  hidden_value_domain_whitelist: String
}

input UserEmailOnly_Input {
  "Email Address"
  email: String!
}

input CreateEmbedUserRequest_Input {
  external_user_id: String!
}

input WhitelabelConfiguration_Input {
  "Unique Id"
  id: String
  "Customer logo image. Expected base64 encoded data (write-only)"
  logo_file: String
  "Logo image url (read-only)"
  logo_url: String
  "Custom favicon image. Expected base64 encoded data (write-only)"
  favicon_file: String
  "Favicon image url (read-only)"
  favicon_url: String
  "Default page title"
  default_title: String
  "Boolean to toggle showing help menus"
  show_help_menu: Boolean!
  "Boolean to toggle showing docs"
  show_docs: Boolean!
  "Boolean to toggle showing email subscription options."
  show_email_sub_options: Boolean!
  "Boolean to toggle mentions of Looker in emails"
  allow_looker_mentions: Boolean!
  "Boolean to toggle links to Looker in emails"
  allow_looker_links: Boolean!
  "Allow subject line and email heading customization in customized emails”"
  custom_welcome_email_advanced: Boolean!
  "Remove the word Looker from appearing in the account setup page"
  setup_mentions: Boolean!
  "Remove Looker logo from Alerts"
  alerts_logo: Boolean!
  "Remove Looker links from Alerts"
  alerts_links: Boolean!
  "Remove Looker mentions in home folder page when you don’t have any items saved"
  folders_mentions: Boolean!
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}"
`;
