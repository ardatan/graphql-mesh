// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OpenAPI loader: IBM language translator should generate the schema correctly 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

directive @oneOf on INPUT_OBJECT | FIELD_DEFINITION

type Query {
  \\"Lists available standard and custom models by source or target language\\"
  listModels(
    \\"Filter models by source language.\\"
    source: String
    \\"Filter models by target language.\\"
    target: String
    \\"Valid values are leaving it unset, \`true\`, and \`false\`. When \`true\`, it filters models to return the default model or models. When \`false\`, it returns the non-default model or models. If not set, it returns all models, default and non-default.\\"
    default: Boolean
  ): listModels_response
  \\"Returns the training status of the translation model\\"
  getModel(
    \\"Model ID to use\\"
    model_id: String!
  ): getModel_response
  \\"Translates the input text from the source language to the target language\\"
  translateGet(
    \\"The unique model_id of the translation model that is used to translate text. The model_id inherently specifies source language, target language, and domain. If the model_id is specified, there is no need for the source and target parameters, and the values are ignored.\\"
    model_id: String
    \\"Used in combination with target as an alternative way to select the model for translation. When target and source are set, and model_id is not set, the system chooses a default model with the right language pair to translate (usually the model based on the news domain).\\"
    source: String
    \\"Used in combination with source as an alternative way to select which model is used for translation. When target and source are set, and model_id is not set, the system chooses a default model with the right language pair to translate (usually the model based on the news domain).\\"
    target: String
    \\"Input text in UTF-8 encoding. Multiple text query parameters indicate multiple input paragraphs, and a single string is valid input.\\"
    text: String!
  ): translateGet_response
  \\"Lists all languages that the service can identify. Returns the two-letter code (for example, \`en\` for English or \`es\` for Spanish) and name of each language.\\"
  listIdentifiableLanguages: listIdentifiableLanguages_response
  \\"Identifies the language of the input text.\\"
  identifyGet(
    \\"Input text in UTF-8 format.\\"
    text: String!
  ): identifyGet_response
}

union listModels_response = TranslationModels | ErrorResponse

\\"The response type for listing existing translation models.\\"
type TranslationModels {
  \\"An array of available models.\\"
  models: [TranslationModel]
}

\\"Response payload for models.\\"
type TranslationModel {
  \\"A globally unique string that identifies the underlying model that is used for translation. This string contains all the information about source language, target language, domain, and various other related configurations.\\"
  model_id: String
  \\"If a model is trained by a user, there might be an optional â€œnameâ€\\\\u009D parameter attached during training to help the user identify the model.\\"
  name: String
  \\"Source language in two letter language code. Use the five letter code when clarifying between multiple supported languages. When model_id is used directly, it will override the source-target language combination. Also, when a two letter language code is used, but no suitable default is found, it returns an error.\\"
  source: String
  \\"Target language in two letter language code.\\"
  target: String
  \\"If this model is a custom model, this returns the base model that it is trained on. For a base model, this response value is empty.\\"
  base_model_id: String
  \\"The domain of the translation model.\\"
  domain: String
  \\"Whether this model can be used as a base for customization. Customized models are not further customizable, and we don't allow the customization of certain base models.\\"
  customizable: Boolean
  \\"Whether this model is considered a default model and is used when the source and target languages are specified without the model_id.\\"
  default_model: Boolean
  \\"Returns the Bluemix ID of the instance that created the model, or an empty string if it is a model that is trained by IBM.\\"
  owner: String
  status: query_listModels_oneOf_0_models_items_status
}

\\"Availability of a model.\\"
enum query_listModels_oneOf_0_models_items_status {
  uploading
  uploaded
  dispatching
  queued
  training
  trained
  publishing
  available
  deleted
  error
}

type ErrorResponse {
  \\"A short identifier for the error.\\"
  error_code: String!
  \\"A more detailed description of the error.\\"
  error_message: String!
}

union getModel_response = TranslationModel | ErrorResponse

union translateGet_response = Translation | ErrorResponse

type Translation {
  \\"Number of words of the complete input text.\\"
  word_count: Int!
  \\"Number of characters of the complete input text.\\"
  character_count: Int!
  \\"List of translation output in UTF-8, corresponding to the list of input text.\\"
  translations: [TranslationText]!
}

type TranslationText {
  \\"Translation output in UTF-8.\\"
  translation: String!
}

union listIdentifiableLanguages_response = SupportedLanguages | ErrorResponse

type SupportedLanguages {
  \\"A list of all languages that the service can identify.\\"
  languages: [IdentifiableLanguage]!
}

type IdentifiableLanguage {
  \\"The code for an identifiable language.\\"
  language: String!
  \\"The name of the identifiable language.\\"
  name: String!
}

union identifyGet_response = Languages | ErrorResponse

type Languages {
  \\"A ranking of identified languages with confidence scores.\\"
  languages: [IdentifiedLanguage]!
  \\"Translates the text with the highest language identified with the highest confidence.\\"
  translation: translateGet_response
}

type IdentifiedLanguage {
  \\"The code for an identified language.\\"
  language: String!
  \\"The confidence score for the identified language.\\"
  confidence: Float!
}

type Mutation {
  \\"Uploads a TMX glossary file on top of a domain to customize a translation model\\"
  createModel(
    \\"Specifies the domain model that is used as the base for the training. To see current supported domain models, use the GET /v2/models parameter.\\"
    base_model_id: String!
    \\"The model name. Valid characters are letters, numbers, -, and _. No spaces.\\"
    name: String
    input: String
  ): createModel_response
  \\"Deletes a custom translation model\\"
  deleteModel(
    \\"The model identifier.\\"
    model_id: String!
  ): deleteModel_response
  \\"Translates the input text from the source language to the target language\\"
  translate(input: TranslateRequest_Input): translate_response
  \\"Identifies the language of the input text.\\"
  identify(input: String): identify_response
}

union createModel_response = TranslationModel | ErrorResponse

union deleteModel_response = DeleteModelResult | ErrorResponse

type DeleteModelResult {
  \\"\\\\\\"OK\\\\\\" indicates that the model was successfully deleted.\\"
  status: String!
}

union translate_response = Translation | ErrorResponse

input TranslateRequest_Input {
  \\"The unique model_id of the translation model being used to translate text. The model_id inherently specifies source language, target language, and domain. If the model_id is specified, there is no need for the source and target parameters and the values are ignored.\\"
  model_id: String
  \\"Used in combination with target as an alternative way to select the model for translation. When target and source are set, and model_id is not set, the system chooses a default model with the right language pair to translate (usually the model based on the news domain).\\"
  source: String
  \\"Used in combination with source as an alternative way to select the model for translation. When target and source are set, and model_id is not set, the system chooses a default model with the right language pair to translate (usually the model based on the news domain).\\"
  target: String
  \\"Input text in UTF-8 encoding. It is a list so that multiple sentences/paragraphs can be submitted. Also accept a single string, instead of an array, as valid input.\\"
  text: [String]!
}

union identify_response = Languages | ErrorResponse"
`;
