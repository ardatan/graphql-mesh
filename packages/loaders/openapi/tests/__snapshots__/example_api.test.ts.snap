// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`example_api should generate the schema correctly 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

directive @oneOf on INPUT_OBJECT | FIELD_DEFINITION

type Query {
  \\"Return a list of users.\\"
  getUsers(input: getUsers_request_Input!): [user]
  \\"Returns a user from the system.\\"
  getUserByUsername(username: String!): user
  \\"Returns a car to test nesting of sub operations\\"
  getUserCar(username: String!): car
  \\"Returns a user's friends to test pagination\\"
  getUserFriends(username: String!): [user]
  \\"Returns all company assets\\"
  getAllAssets(companyId: String!): [query_getAllAssets_items]
  \\"Returns information about all employee cars\\"
  getAllCars: [car]
  \\"Returns the profile of a company with the given ID.\\"
  getCompanyById(id: String!): company
  \\"Used to test cookies.\\"
  getCookie(cookie_type: String!, cookie_size: String!): String
  \\"Used to find the nearest coffee machine based on the user's coordinates. Used to test the content field in parameter objects.\\"
  getNearestCoffeeMachine(input: getNearestCoffeeMachine_request_Input): coordinates
  \\"Used to test link parameters with variables\\"
  getCopier(input: getCopier_request_Input): getCopier_200_response
  \\"Used to test generation of object types with matching schema.\\"
  getNumberOfCleanDesks: String
  \\"Used to test generation of object types with matching schema.\\"
  getNumberOfDirtyDesks: String
  \\"Used to test empty responses\\"
  getBonuses: Void
  \\"Return an office.\\"
  getOffice(accept: String, id: Int!): office
  \\"Return a list of papers. Endpoint to test 2XX status code.\\"
  getPapers: [paper]
  \\"Another endpoint to test unsanitized parameters and data.\\"
  get_product_with_id(input: get_product_with_id_request_Input!, product_id: String!): product_with_id
  \\"Obtain reviews for a product.\\"
  getProductReviews(input: getProductReviews_request_Input!, id: String!): [query_getProductReviews_items]
  \\"An endpoint to test authentication.\\"
  get_patent_with_id(patent_id: String!): patent_with_id
  \\"Another endpoint to test authentication.\\"
  get_project_with_id(project_id: Int!): project_with_id
  \\"Used to test link parameters with variables\\"
  getScanner(input: getCopier_request_Input): getCopier_200_response
  \\"Endpoint to test sending of headers.\\"
  getSnack(snack_type: String!, snack_size: String!): String
  \\"Endpoint to test sending of options.\\"
  get_Status(input: get_Status_request_Input!): String
  \\"Used to test OAuth token being present in header.\\"
  getSecure: String
  \\"Returns the (contents of a) trashcan from a specific office\\"
  getAllTrashCans: [trashcan]
  \\"Returns the (contents of a) trashcan from a specific owner\\"
  getOfficeTrashCan(username: String!): trashcan
  \\"It could be anything!\\"
  mystery: mystery_200_response
}

\\"A user represents a natural person\\"
type user {
  \\"The identifier of a user\\"
  username: String
  \\"The legal name of a user\\"
  name: String!
  address: address!
  address2: address
  \\"The identifier of the company a user works for\\"
  employerId: String!
  \\"The hobbies of this user\\"
  hobbies: [String]!
  status: query_getUsers_items_status
  nomenclature: query_getUsers_items_nomenclature
  \\"Allows to fetch the user's employer company.\\"
  employerCompany: company
  \\"Allows to fetch the user's friends.\\"
  friends: [user]
}

\\"The legal address of a user\\"
type address {
  \\"The street a user lives in\\"
  street: String
  \\"The city a user lives in\\"
  city: String
}

enum query_getUsers_items_status {
  staff
  contractor
  alumni
}

type query_getUsers_items_nomenclature {
  species: String
  suborder: String
  family: String!
  familyCircular: familyObject
  genus: String
}

type familyObject {
  family: String!
  familyCircular: familyObject
}

\\"A company is the employer of many users\\"
type company {
  \\"The identifier of a company\\"
  id: String
  \\"The legal name of a company\\"
  name: String
  \\"The legal form of a company\\"
  legalForm: String
  \\"The identifier of the user who is CEO of the company\\"
  ceoUsername: String
  \\"The offices of a company\\"
  offices: [address]
  \\"Allows to fetch the company's CEO user.\\"
  ceoUser: user
}

input getUsers_request_Input {
  \\"Limit of the number of users to return.\\"
  limit: Int!
}

\\"A car\\"
type car {
  \\"The model of the car.\\"
  model: String
  \\"The color of the car.\\"
  color: String
  features: query_getUserCar_features
  tags: Tags
  kind: query_getUserCar_kind
  rating: query_getUserCar_rating
}

type query_getUserCar_features {
  additionalProperties: JSON
}

\\"The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\\"
scalar JSON @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")

\\"Arbitrary (string) tags describing an entity.\\"
type Tags {
  additionalProperties: JSON
}

enum query_getUserCar_kind {
  SEDAN
  SUV
  MINIVAN
  LIMOSINE
  RACE_CAR
}

\\"The rating of the car.\\"
enum query_getUserCar_rating {
  _100
  _101
  _200
}

union query_getAllAssets_items = car | user | trashcan

type trashcan {
  brand: query_getAllAssets_items_oneOf_2_brand
  contents: [query_getAllAssets_items_oneOf_2_brand]
}

scalar query_getAllAssets_items_oneOf_2_brand

type coordinates {
  lat: Float!
  long: Float!
}

input getNearestCoffeeMachine_request_Input {
  lat: Float
  long: Float
}

type getCopier_200_response {
  body: String
  \\"Used to test link parameters with variables\\"
  basicLink: getCopier_200_response
  \\"Used to test link parameters with variables\\"
  constantLink: getCopier_200_response
  \\"Used to test link parameters with variables\\"
  variableLink: getCopier_200_response
  \\"Used to test link parameters with variables\\"
  everythingLink: getCopier_200_response
  \\"Used to test link parameters with variables\\"
  everythingLink2: getCopier_200_response
}

input getCopier_request_Input {
  query: String
}

\\"Represents empty values\\"
scalar Void

\\"An office\\"
type office {
  \\"The owner ID of the office\\"
  employeeId: String
  \\"The room number of the office\\"
  room_number: Int
  \\"The identifier of the company a user works for\\"
  employerId: String
  \\"Allows to fetch the user who invented a product.\\"
  owner: user
  \\"Allows to fetch the user's employer company.\\"
  company: company
}

\\"A research paper\\"
type paper {
  \\"The name of the paper\\"
  name: String
  \\"Whether the paper is published\\"
  published: Boolean
}

\\"A product\\"
type product_with_id {
  \\"The name of the product\\"
  product_name: String
  \\"The id of the product\\"
  product_id: String
  \\"A tag associated with the product\\"
  product_tag: String
  \\"Obtain reviews for a product.\\"
  reviews: [query_getProductReviews_items]
  \\"Obtain reviews for a product.\\"
  reviewsWithOperationRef: [query_getProductReviews_items]
}

type query_getProductReviews_items {
  text: String
  timestamp: BigInt
}

\\"The \`BigInt\` scalar type represents non-fractional signed whole numeric values.\\"
scalar BigInt

input get_product_with_id_request_Input {
  product_tag: String!
}

input getProductReviews_request_Input {
  product_tag: String!
}

\\"A patent\\"
type patent_with_id {
  \\"The id of the patent\\"
  patent_id: String!
  \\"The id of the inventor\\"
  inventor_id: String
  \\"Allows to fetch the user who invented a product.\\"
  inventor: user
}

\\"A project\\"
type project_with_id {
  \\"The id of the project\\"
  project_id: Int
  \\"The id of the lead\\"
  lead_id: String
  \\"Whether the project is active\\"
  active: Boolean
  \\"The patent associated with a project if applicable\\"
  patentId: String
  \\"Allows to fetch the user leading a project.\\"
  projectLead: user
  \\"Allows to fetch a patent.\\"
  patent: patent_with_id
  \\"Allows to fetch the user leading a project.\\"
  ProjectLead: user
}

input get_Status_request_Input {
  globalquery: String!
  limit: Int!
}

union mystery_200_response = query_mystery_oneOf_0 | query_mystery_oneOf_1

type query_mystery_oneOf_0 {
  common_attribute: String
}

type query_mystery_oneOf_1 {
  different_attribute: String
}

type Mutation {
  \\"Create a new user in the system.\\"
  postUser(input: user_Input!): user
  \\"Create a new paper in the system. Endpoint to test non-application/json request and response bodies.\\"
  postPaper(input: String): String
  \\"Endpoint to test unsanitized parameters and data.\\"
  post_product_with_id(input: product_with_id_Input): product_with_id
  \\"An endpoint to test authenticated POST requests.\\"
  post_project_with_id(input: project_with_id_Input): project_with_id
  \\"Used to test link parameters with variables\\"
  postScanner(input: String, path: String!, query: String): getCopier_200_response
  \\"Endpoint to test placeholder objects to wrap response objects.\\"
  post_status(input: paths_status_post_requestBody_content_application_json_schema_Input, globalquery: String!): String
  \\"Add new contents to the trashcan of a specific owner\\"
  postOfficeTrashCan(input: paths_trashcans__LEFT_CURLY_BRACE_username_RIGHT_CURLY_BRACE__post_requestBody_content_application_json_schema_Input, username: String!): trashcan
}

\\"A user represents a natural person\\"
input user_Input {
  \\"The identifier of a user\\"
  username: String
  \\"The legal name of a user\\"
  name: String!
  address: address_Input!
  address2: address_Input
  \\"The identifier of the company a user works for\\"
  employerId: String!
  \\"The hobbies of this user\\"
  hobbies: [String]!
  status: query_getUsers_items_status
  nomenclature: query_getUsers_items_nomenclature_Input
}

\\"The legal address of a user\\"
input address_Input {
  \\"The street a user lives in\\"
  street: String
  \\"The city a user lives in\\"
  city: String
}

input query_getUsers_items_nomenclature_Input {
  species: String
  suborder: String
  family: String!
  familyCircular: familyObject_Input
  genus: String
}

input familyObject_Input {
  family: String!
  familyCircular: familyObject_Input
}

\\"A product\\"
input product_with_id_Input {
  \\"The name of the product\\"
  product_name: String
  \\"The id of the product\\"
  product_id: String
  \\"A tag associated with the product\\"
  product_tag: String
}

\\"A project\\"
input project_with_id_Input {
  \\"The id of the project\\"
  project_id: Int
  \\"The id of the lead\\"
  lead_id: String
  \\"Whether the project is active\\"
  active: Boolean
  \\"The patent associated with a project if applicable\\"
  patentId: String
}

input paths_status_post_requestBody_content_application_json_schema_Input {
  hello: String
}

scalar paths_trashcans__LEFT_CURLY_BRACE_username_RIGHT_CURLY_BRACE__post_requestBody_content_application_json_schema_Input"
`;
