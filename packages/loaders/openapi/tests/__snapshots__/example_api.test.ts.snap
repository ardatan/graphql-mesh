// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`example_api should generate the schema correctly 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

directive @enum(value: String) on ENUM_VALUE

directive @oneOf on OBJECT | INTERFACE

directive @resolveRootField(field: String) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

directive @linkResolver(linkResolverMap: ObjMap) on FIELD_DEFINITION

directive @link(defaultRootType: String, defaultField: String) on FIELD_DEFINITION

type Query @globalOptions(sourceName: "example_api", endpoint: "http://localhost:3000/api") {
  "Return a list of users."
  getUsers(
    "Limit of the number of users to return."
    limit: Int!
  ): [user] @httpOperation(path: "/users", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"limit\\":\\"limit\\"}")
  "Returns a user from the system."
  getUserByUsername(
    "Identifier of a user."
    username: String!
  ): user @httpOperation(path: "/users/{args.username}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET) @linkResolver(linkResolverMap: "{\\"employerCompany\\":{\\"linkObjArgs\\":{\\"id\\":\\"{root.$response.body#/employerId}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCompanyById\\"},\\"friends\\":{\\"linkObjArgs\\":{\\"username\\":\\"{root.$request.path.username}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getUserFriends\\"}}")
  "Returns a car to test nesting of sub operations"
  getUserCar(
    "Identifier of a user."
    username: String!
  ): car @httpOperation(path: "/users/{args.username}/car", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Returns a user's friends to test pagination"
  getUserFriends(
    "Identifier of a user."
    username: String!
  ): [user] @httpOperation(path: "/users/{args.username}/friends", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Returns all company assets"
  getAllAssets(companyId: String!): [query_getAllAssets_items] @httpOperation(path: "/assets/{args.companyId}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Returns information about all employee cars"
  getAllCars: [car] @httpOperation(path: "/cars", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Returns the profile of a company with the given ID."
  getCompanyById(id: String!): company @httpOperation(path: "/companies/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET) @linkResolver(linkResolverMap: "{\\"ceoUser\\":{\\"linkObjArgs\\":{\\"username\\":\\"{root.$response.body#/ceoUsername}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getUserByUsername\\"}}")
  "Used to test cookies."
  getCookie(cookie_type: queryInput_getCookie_cookie_type!, cookie_size: queryInput_getCookie_cookie_size!): String @httpOperation(path: "/cookie", operationSpecificHeaders: "{\\"cookie\\":\\"cookie_type={args.cookie_type}; cookie_size={args.cookie_size};\\",\\"accept\\":\\"text/plain\\"}", httpMethod: GET)
  "Used to find the nearest coffee machine based on the user's coordinates. Used to test the content field in parameter objects."
  getNearestCoffeeMachine(lat: Float, long: Float): coordinates @httpOperation(path: "/coffeeLocation", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"lat\\":\\"lat\\",\\"long\\":\\"long\\"}")
  "Used to test link parameters with variables"
  getCopier(query: String): getCopier_200_response @httpOperation(path: "/copier", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"query\\":\\"query\\"}") @linkResolver(linkResolverMap: "{\\"basicLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"{root.$request.query.query}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"constantLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"123\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"variableLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"_{root.$request.query.query}_{root.$request.query.query}{root.$request.query.query}abc{root.$request.query.query}123\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"everythingLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.query.query}_{root.$request.header.accept}_{root.$response.header.connection}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"}}")
  "Used to test generation of object types with matching schema."
  getNumberOfCleanDesks: String @httpOperation(path: "/cleanDesks", operationSpecificHeaders: "{\\"accept\\":\\"text/plain\\"}", httpMethod: GET)
  "Used to test generation of object types with matching schema."
  getNumberOfDirtyDesks: String @httpOperation(path: "/dirtyDesks", operationSpecificHeaders: "{\\"accept\\":\\"text/plain\\"}", httpMethod: GET)
  "Used to test empty responses"
  getBonuses: Void @httpOperation(path: "/bonuses", httpMethod: GET)
  "Used to test query parameters with form style and explode"
  returnAllOffices(parameters: queryInput_returnAllOffices_parameters_Input!): [office] @httpOperation(path: "/offices", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"parameters\\":\\"parameters\\"}", queryStringOptionsByParam: "{\\"parameters\\":{\\"arrayFormat\\":\\"repeat\\",\\"destructObject\\":true}}")
  "Return an office."
  getOffice(
    "Office ID"
    id: Int!
  ): office @httpOperation(path: "/offices/{args.id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET) @linkResolver(linkResolverMap: "{\\"owner\\":{\\"linkObjArgs\\":{\\"username\\":\\"{root.$response.body#/employeeId}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getUserByUsername\\"},\\"company\\":{\\"linkObjArgs\\":{\\"id\\":\\"{root.$response.body#/employerId}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCompanyById\\"}}")
  "Return a list of papers. Endpoint to test 2XX status code."
  getPapers: [paper] @httpOperation(path: "/papers", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Another endpoint to test unsanitized parameters and data."
  get_product_with_id(product_id: String!, product_tag: String!): product_with_id @httpOperation(path: "/products/{args.product_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"product-tag\\":\\"product_tag\\"}") @linkResolver(linkResolverMap: "{\\"reviews\\":{\\"linkObjArgs\\":{\\"id\\":\\"{root.$request.path.product-id}\\",\\"product_tag\\":\\"{root.$request.query.product-tag}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getProductReviews\\"},\\"reviewsWithOperationRef\\":{\\"linkObjArgs\\":{\\"id\\":\\"{root.$request.path.product-id}\\",\\"product_tag\\":\\"{root.$request.query.product-tag}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getProductReviews\\"}}")
  "Obtain reviews for a product."
  getProductReviews(id: String!, product_tag: String! = "sport"): [query_getProductReviews_items] @httpOperation(path: "/products/{args.id}/reviews", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"product-tag\\":\\"product_tag\\"}")
  "An endpoint to test authentication."
  get_patent_with_id(patent_id: String!): patent_with_id @httpOperation(path: "/patents/{args.patent_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET) @linkResolver(linkResolverMap: "{\\"inventor\\":{\\"linkObjArgs\\":{\\"username\\":\\"{root.$response.body#/inventorId}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getUserByUsername\\"}}")
  "Another endpoint to test authentication."
  get_project_with_id(project_id: Int!): project_with_id @httpOperation(path: "/projects/{args.project_id}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET) @linkResolver(linkResolverMap: "{\\"projectLead\\":{\\"linkObjArgs\\":{\\"username\\":\\"{root.$response.body#/leadId}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getUserByUsername\\"},\\"patent\\":{\\"linkObjArgs\\":{\\"patent_id\\":\\"{root.$response.body#/patentId}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"get_patent_with_id\\"}}")
  "Used to test link parameters with variables"
  getScanner(query: String): getScanner_200_response @httpOperation(path: "/scanner", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET, queryParamArgMap: "{\\"query\\":\\"query\\"}") @linkResolver(linkResolverMap: "{\\"basicLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"{root.$request.query.query}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"constantLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"123\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"variableLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"_{root.$request.query.query}_{root.$request.query.query}{root.$request.query.query}abc{root.$request.query.query}123\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"everythingLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.query.query}_{root.$request.header.accept}_{root.$response.header.connection}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"}}")
  "Endpoint to test sending of headers."
  getSnack(snack_type: queryInput_getSnack_snack_type! = soda, snack_size: queryInput_getSnack_snack_size! = small): String @httpOperation(path: "/snack", operationSpecificHeaders: "{\\"snack_type\\":\\"{args.snack_type:soda}\\",\\"snack_size\\":\\"{args.snack_size:small}\\",\\"accept\\":\\"text/plain\\"}", httpMethod: GET)
  "Endpoint to test sending of options."
  get_Status(globalquery: String!, limit: Int!): String @httpOperation(path: "/status", operationSpecificHeaders: "{\\"accept\\":\\"text/plain\\"}", httpMethod: GET, queryParamArgMap: "{\\"globalquery\\":\\"globalquery\\",\\"limit\\":\\"limit\\"}")
  "Used to test OAuth token being present in header."
  getSecure: String @httpOperation(path: "/secure", operationSpecificHeaders: "{\\"accept\\":\\"text/plain\\"}", httpMethod: GET)
  "Returns the (contents of a) trashcan from a specific office"
  getAllTrashCans: [trashcan] @httpOperation(path: "/trashcans", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Returns the (contents of a) trashcan from a specific owner"
  getOfficeTrashCan(
    "Identifier of a user."
    username: String!
  ): trashcan @httpOperation(path: "/trashcans/{args.username}", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "It could be anything!"
  mystery: mystery_200_response @httpOperation(path: "/mystery", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Returns an arbitrary JSON object"
  random: JSON @httpOperation(path: "/random", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
}

"A user represents a natural person"
type user {
  "The identifier of a user"
  username: String
  "The legal name of a user"
  name: String!
  address: address!
  address2: address
  "The identifier of the company a user works for"
  employerId: String!
  "The hobbies of this user"
  hobbies: [String]!
  status: query_getUsers_items_status
  nomenclature: query_getUsers_items_nomenclature
  "Allows to fetch the user's employer company."
  employerCompany: company @link(defaultRootType: "Query", defaultField: "getUserByUsername")
  "Allows to fetch the user's friends."
  friends: [user] @link(defaultRootType: "Query", defaultField: "getUserByUsername")
}

"The legal address of a user"
type address {
  "The street a user lives in"
  street: String
  "The city a user lives in"
  city: String
}

enum query_getUsers_items_status {
  staff
  contractor
  alumni
}

type query_getUsers_items_nomenclature {
  suborder: String
  family: String!
  familyCircular: familyObject
  genus: String
  species: String
}

type familyObject {
  family: String!
  familyCircular: familyObject
}

"A company is the employer of many users"
type company {
  "The identifier of a company"
  id: UUID
  "The legal name of a company"
  name: String
  "The legal form of a company"
  legalForm: String
  "The identifier of the user who is CEO of the company"
  ceoUsername: String
  "The offices of a company"
  offices: [address]
  "Allows to fetch the company's CEO user."
  ceoUser: user @link(defaultRootType: "Query", defaultField: "getCompanyById")
}

"A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier."
scalar UUID

"A car"
type car {
  "The model of the car."
  model: String
  "The color of the car."
  color: String
  features: JSON
  "Arbitrary (string) tags describing an entity."
  tags: JSON
  kind: query_getUserCar_kind
  rating: query_getUserCar_rating
}

"The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum query_getUserCar_kind {
  SEDAN
  SUV
  MINIVAN
  LIMOSINE
  RACE_CAR
}

"The rating of the car."
enum query_getUserCar_rating {
  _100 @enum(value: "100")
  _101 @enum(value: "101")
  _200 @enum(value: "200")
}

union query_getAllAssets_items = car | user | trashcan

type trashcan {
  brand: JSON
  contents: [JSON]
}

enum queryInput_getCookie_cookie_type {
  chocolate_chip @enum(value: "\\"chocolate chip\\"")
  oatmeal_raisin @enum(value: "\\"oatmeal raisin\\"")
  sugar
}

enum queryInput_getCookie_cookie_size {
  bite_sized @enum(value: "\\"bite-sized\\"")
  regular
  mega_sized @enum(value: "\\"mega-sized\\"")
}

type coordinates {
  lat: Float!
  long: Float!
}

type getCopier_200_response {
  body: String
  "Used to test link parameters with variables"
  basicLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getCopier")
  "Used to test link parameters with variables"
  constantLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getCopier")
  "Used to test link parameters with variables"
  variableLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getCopier")
  "Used to test link parameters with variables"
  everythingLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getCopier")
}

"Represents empty values"
scalar Void

"An office"
type office {
  "The owner ID of the office"
  employeeId: String
  "The room number of the office"
  room_number: Int @resolveRootField(field: "room number")
  "The identifier of the company a user works for"
  employerId: String
  "Allows to fetch the user who invented a product."
  owner: user @link(defaultRootType: "Query", defaultField: "getOffice")
  "Allows to fetch the user's employer company."
  company: company @link(defaultRootType: "Query", defaultField: "getOffice")
}

input queryInput_returnAllOffices_parameters_Input {
  limit: Int
  offset: Int
}

"A research paper"
type paper {
  "The name of the paper"
  name: String
  "Whether the paper is published"
  published: Boolean
}

"A product"
type product_with_id {
  "The name of the product"
  product_name: String @resolveRootField(field: "product-name")
  "The id of the product"
  product_id: String @resolveRootField(field: "product-id")
  "A tag associated with the product"
  product_tag: String @resolveRootField(field: "product-tag")
  "Obtain reviews for a product."
  reviews: [query_getProductReviews_items] @link(defaultRootType: "Query", defaultField: "get_product_with_id")
  "Obtain reviews for a product."
  reviewsWithOperationRef: [query_getProductReviews_items] @link(defaultRootType: "Query", defaultField: "get_product_with_id")
}

type query_getProductReviews_items {
  text: String
  timestamp: BigInt
}

"The \`BigInt\` scalar type represents non-fractional signed whole numeric values."
scalar BigInt

"A patent"
type patent_with_id {
  "The id of the patent"
  patent_id: String! @resolveRootField(field: "patent-id")
  "The id of the inventor"
  inventor_id: String @resolveRootField(field: "inventor-id")
  "Allows to fetch the user who invented a product."
  inventor: user @link(defaultRootType: "Query", defaultField: "get_patent_with_id")
}

"A project"
type project_with_id {
  "The id of the project"
  project_id: Int @resolveRootField(field: "project-id")
  "The id of the lead"
  lead_id: String @resolveRootField(field: "lead-id")
  "Whether the project is active"
  active: Boolean
  "The patent associated with a project if applicable"
  patentId: String
  "Allows to fetch the user leading a project."
  ProjectLead: user @link(defaultRootType: "Mutation", defaultField: "post_project_with_id")
  "Allows to fetch the user leading a project."
  projectLead: user @link(defaultRootType: "Query", defaultField: "get_project_with_id")
  "Allows to fetch a patent."
  patent: patent_with_id @link(defaultRootType: "Query", defaultField: "get_project_with_id")
}

type getScanner_200_response {
  body: String
  "Used to test link parameters with variables"
  basicLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getScanner")
  "Used to test link parameters with variables"
  constantLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getScanner")
  "Used to test link parameters with variables"
  variableLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getScanner")
  "Used to test link parameters with variables"
  everythingLink: getCopier_200_response @link(defaultRootType: "Query", defaultField: "getScanner")
}

enum queryInput_getSnack_snack_type {
  chips
  soda
}

enum queryInput_getSnack_snack_size {
  large
  small
}

union mystery_200_response = query_mystery_oneOf_0 | query_mystery_oneOf_1

type query_mystery_oneOf_0 {
  common_attribute: String
}

type query_mystery_oneOf_1 {
  different_attribute: String
}

type Mutation {
  "Create a new user in the system."
  postUser(input: user_Input): user @httpOperation(path: "/users", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "Create a new paper in the system. Endpoint to test non-application/json request and response bodies."
  postPaper(input: String): String @httpOperation(path: "/papers", operationSpecificHeaders: "{\\"Content-Type\\":\\"text/plain\\",\\"accept\\":\\"text/plain\\"}", httpMethod: POST)
  "Endpoint to test unsanitized parameters and data."
  post_product_with_id(input: product_with_id_Input): product_with_id @httpOperation(path: "/products", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
  "An endpoint to test authenticated POST requests."
  post_project_with_id(input: project_with_id_Input): project_with_id @httpOperation(path: "/projects", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST) @linkResolver(linkResolverMap: "{\\"ProjectLead\\":{\\"linkObjArgs\\":{\\"username\\":\\"{root.$response.body#/leadId}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getUserByUsername\\"}}")
  "Used to test link parameters with variables"
  postScanner(path: String!, query: String, input: String): postScanner_200_response @httpOperation(path: "/scanner/{args.path}", operationSpecificHeaders: "{\\"Content-Type\\":\\"text/plain\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST, queryParamArgMap: "{\\"query\\":\\"query\\"}") @linkResolver(linkResolverMap: "{\\"basicLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"{root.$request.query.query}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"constantLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"123\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"variableLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"_{root.$request.query.query}_{root.$request.query.query}{root.$request.query.query}abc{root.$request.query.query}123\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"everythingLink\\":{\\"linkObjArgs\\":{\\"query\\":\\"{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.query.query}_{root.$request.header.accept}_{root.$response.header.connection}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"},\\"everythingLink2\\":{\\"linkObjArgs\\":{\\"query\\":\\"{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.body}_{root.$request.query.query}_{root.$request.path.path}_{root.$request.header.accept}_{root.$response.body#/body}_{root.$response.query.query}_{root.$response.path.path}_{root.$response.header.connection}\\"},\\"targetTypeName\\":\\"Query\\",\\"targetFieldName\\":\\"getCopier\\"}}")
  "Endpoint to test placeholder objects to wrap response objects."
  post_status(globalquery: String!, input: post_status_request_Input): String @httpOperation(path: "/status", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"text/plain\\"}", httpMethod: POST, queryParamArgMap: "{\\"globalquery\\":\\"globalquery\\"}")
  "Add new contents to the trashcan of a specific owner"
  postOfficeTrashCan(
    "Identifier of a user."
    username: String!
    input: JSON
  ): trashcan @httpOperation(path: "/trashcans/{args.username}", operationSpecificHeaders: "{\\"Content-Type\\":\\"application/json\\",\\"accept\\":\\"application/json\\"}", httpMethod: POST)
}

"A user represents a natural person"
input user_Input {
  "The identifier of a user"
  username: String
  "The legal name of a user"
  name: String!
  address: address_Input!
  address2: address_Input
  "The identifier of the company a user works for"
  employerId: String!
  "The hobbies of this user"
  hobbies: [String]!
  status: query_getUsers_items_status
  nomenclature: query_getUsers_items_nomenclature_Input
}

"The legal address of a user"
input address_Input {
  "The street a user lives in"
  street: String
  "The city a user lives in"
  city: String
}

input query_getUsers_items_nomenclature_Input {
  suborder: String
  family: String!
  familyCircular: familyObject_Input
  genus: String
  species: String
}

input familyObject_Input {
  family: String!
  familyCircular: familyObject_Input
}

"A product"
input product_with_id_Input {
  "The name of the product"
  product_name: String @resolveRootField(field: "product-name")
  "The id of the product"
  product_id: String @resolveRootField(field: "product-id")
  "A tag associated with the product"
  product_tag: String @resolveRootField(field: "product-tag")
}

"A project"
input project_with_id_Input {
  "The id of the project"
  project_id: Int @resolveRootField(field: "project-id")
  "The id of the lead"
  lead_id: String @resolveRootField(field: "lead-id")
  "Whether the project is active"
  active: Boolean
  "The patent associated with a project if applicable"
  patentId: String
}

type postScanner_200_response {
  body: String
  "Used to test link parameters with variables"
  basicLink: getCopier_200_response @link(defaultRootType: "Mutation", defaultField: "postScanner")
  "Used to test link parameters with variables"
  constantLink: getCopier_200_response @link(defaultRootType: "Mutation", defaultField: "postScanner")
  "Used to test link parameters with variables"
  variableLink: getCopier_200_response @link(defaultRootType: "Mutation", defaultField: "postScanner")
  "Used to test link parameters with variables"
  everythingLink: getCopier_200_response @link(defaultRootType: "Mutation", defaultField: "postScanner")
  "Used to test link parameters with variables"
  everythingLink2: getCopier_200_response @link(defaultRootType: "Mutation", defaultField: "postScanner")
}

input post_status_request_Input {
  hello: String
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}"
`;
