// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`example_api should generate the bundle correctly 1`] = `
{
  "baseUrl": "http://localhost:{args.port:3001}/{args.basePath:api}",
  "name": "example_api",
  "operationHeaders": {},
  "operations": [
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "limit": {
          "description": "Limit of the number of users to return.",
          "name": "limit",
          "nullable": false,
          "type": "integer",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Return a list of users.",
      "field": "getUsers",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/users",
      "queryParamArgMap": {
        "limit": "limit",
      },
      "responseByStatusCode": {
        "202": {
          "responseSchema": {
            "items": {
              "$resolvedRef": "/components/schemas/user",
              "description": "A user represents a natural person",
              "properties": {
                "address": {
                  "$ref": "#/definitions/address",
                },
                "address2": {
                  "$ref": "#/definitions/address",
                },
                "employerId": {
                  "description": "The identifier of the company a user works for",
                  "type": "string",
                },
                "hobbies": {
                  "description": "The hobbies of this user",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "name": {
                  "description": "The legal name of a user",
                  "type": "string",
                },
                "nomenclature": {
                  "$ref": "#/definitions/query_getUsers_items_nomenclature",
                },
                "status": {
                  "$ref": "#/definitions/query_getUsers_items_status",
                },
                "username": {
                  "description": "The identifier of a user",
                  "type": "string",
                },
              },
              "required": [
                "name",
                "address",
                "employerId",
                "hobbies",
              ],
              "title": "user",
              "type": "object",
            },
            "title": "getUsers_202_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Create a new user in the system.",
      "field": "postUser",
      "headers": {
        "Content-Type": "application/json",
        "accept": "application/json",
      },
      "method": "POST",
      "operationHeaders": undefined,
      "path": "/users",
      "requestSchema": {
        "$resolvedRef": "/components/schemas/user",
        "description": "A user represents a natural person",
        "properties": {
          "address": {
            "$ref": "#/definitions/address",
          },
          "address2": {
            "$ref": "#/definitions/address",
          },
          "employerId": {
            "description": "The identifier of the company a user works for",
            "type": "string",
          },
          "hobbies": {
            "description": "The hobbies of this user",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "name": {
            "description": "The legal name of a user",
            "type": "string",
          },
          "nomenclature": {
            "$ref": "#/definitions/query_getUsers_items_nomenclature",
          },
          "status": {
            "$ref": "#/definitions/query_getUsers_items_status",
          },
          "username": {
            "description": "The identifier of a user",
            "type": "string",
          },
        },
        "required": [
          "name",
          "address",
          "employerId",
          "hobbies",
        ],
        "title": "user",
        "type": "object",
      },
      "responseByStatusCode": {
        "201": {
          "responseSchema": {
            "$resolvedRef": "/components/schemas/user",
            "description": "A user represents a natural person",
            "properties": {
              "address": {
                "$ref": "#/definitions/address",
              },
              "address2": {
                "$ref": "#/definitions/address",
              },
              "employerId": {
                "description": "The identifier of the company a user works for",
                "type": "string",
              },
              "hobbies": {
                "description": "The hobbies of this user",
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
              "name": {
                "description": "The legal name of a user",
                "type": "string",
              },
              "nomenclature": {
                "$ref": "#/definitions/query_getUsers_items_nomenclature",
              },
              "status": {
                "$ref": "#/definitions/query_getUsers_items_status",
              },
              "username": {
                "description": "The identifier of a user",
                "type": "string",
              },
            },
            "required": [
              "name",
              "address",
              "employerId",
              "hobbies",
            ],
            "title": "user",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "mutation",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "username": {
          "description": "Identifier of a user.",
          "name": "username",
          "nullable": false,
          "type": "string",
        },
      },
      "description": "Returns a user from the system.",
      "field": "getUserByUsername",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/users/{args.username}",
      "responseByStatusCode": {
        "200": {
          "links": {
            "employerCompany": {
              "args": {
                "id": "{root.$response.body#/employerId}",
              },
              "description": "Allows to fetch the user's employer company.",
              "fieldName": "getCompanyById",
            },
            "friends": {
              "args": {
                "username": "{root.$request.path.username}",
              },
              "description": "Allows to fetch the user's friends.",
              "fieldName": "getUserFriends",
            },
          },
          "responseSchema": {
            "$resolvedRef": "/components/schemas/user",
            "description": "A user represents a natural person",
            "properties": {
              "address": {
                "$ref": "#/definitions/address",
              },
              "address2": {
                "$ref": "#/definitions/address",
              },
              "employerId": {
                "description": "The identifier of the company a user works for",
                "type": "string",
              },
              "hobbies": {
                "description": "The hobbies of this user",
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
              "name": {
                "description": "The legal name of a user",
                "type": "string",
              },
              "nomenclature": {
                "$ref": "#/definitions/query_getUsers_items_nomenclature",
              },
              "status": {
                "$ref": "#/definitions/query_getUsers_items_status",
              },
              "username": {
                "description": "The identifier of a user",
                "type": "string",
              },
            },
            "required": [
              "name",
              "address",
              "employerId",
              "hobbies",
            ],
            "title": "user",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "username": {
          "description": "Identifier of a user.",
          "name": "username",
          "nullable": false,
          "type": "string",
        },
      },
      "description": "Returns a car to test nesting of sub operations",
      "field": "getUserCar",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/users/{args.username}/car",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "$resolvedRef": "/components/schemas/car",
            "description": "A car",
            "properties": {
              "color": {
                "description": "The color of the car.",
                "type": "string",
              },
              "features": {
                "$ref": "#/definitions/query_getUserCar_features",
              },
              "kind": {
                "$ref": "#/definitions/query_getUserCar_kind",
              },
              "model": {
                "description": "The model of the car.",
                "type": "string",
              },
              "rating": {
                "$ref": "#/definitions/query_getUserCar_rating",
              },
              "tags": {
                "$ref": "#/definitions/Tags",
              },
            },
            "title": "car",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "username": {
          "description": "Identifier of a user.",
          "name": "username",
          "nullable": false,
          "type": "string",
        },
      },
      "description": "Returns a user's friends to test pagination",
      "field": "getUserFriends",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/users/{args.username}/friends",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "items": {
              "$resolvedRef": "/components/schemas/user",
              "description": "A user represents a natural person",
              "properties": {
                "address": {
                  "$ref": "#/definitions/address",
                },
                "address2": {
                  "$ref": "#/definitions/address",
                },
                "employerId": {
                  "description": "The identifier of the company a user works for",
                  "type": "string",
                },
                "hobbies": {
                  "description": "The hobbies of this user",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "name": {
                  "description": "The legal name of a user",
                  "type": "string",
                },
                "nomenclature": {
                  "$ref": "#/definitions/query_getUsers_items_nomenclature",
                },
                "status": {
                  "$ref": "#/definitions/query_getUsers_items_status",
                },
                "username": {
                  "description": "The identifier of a user",
                  "type": "string",
                },
              },
              "required": [
                "name",
                "address",
                "employerId",
                "hobbies",
              ],
              "title": "user",
              "type": "object",
            },
            "title": "getUserFriends_200_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "companyId": {
          "description": undefined,
          "name": "companyId",
          "nullable": false,
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Returns all company assets",
      "field": "getAllAssets",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/assets/{args.companyId}",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/car",
                },
                {
                  "$ref": "#/definitions/user",
                },
                {
                  "$ref": "#/definitions/trashcan",
                },
              ],
              "title": "query_getAllAssets_items",
              "type": "object",
            },
            "title": "getAllAssets_200_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Returns information about all employee cars",
      "field": "getAllCars",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/cars",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "items": {
              "$resolvedRef": "/components/schemas/car",
              "description": "A car",
              "properties": {
                "color": {
                  "description": "The color of the car.",
                  "type": "string",
                },
                "features": {
                  "$ref": "#/definitions/query_getUserCar_features",
                },
                "kind": {
                  "$ref": "#/definitions/query_getUserCar_kind",
                },
                "model": {
                  "description": "The model of the car.",
                  "type": "string",
                },
                "rating": {
                  "$ref": "#/definitions/query_getUserCar_rating",
                },
                "tags": {
                  "$ref": "#/definitions/Tags",
                },
              },
              "title": "car",
              "type": "object",
            },
            "title": "getAllCars_200_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "id": {
          "description": undefined,
          "name": "id",
          "nullable": false,
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Returns the profile of a company with the given ID.",
      "field": "getCompanyById",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/companies/{args.id}",
      "responseByStatusCode": {
        "200": {
          "links": {
            "ceoUser": {
              "args": {
                "username": "{root.$response.body#/ceoUsername}",
              },
              "description": "Allows to fetch the company's CEO user.",
              "fieldName": "getUserByUsername",
            },
          },
          "responseSchema": {
            "$resolvedRef": "/components/schemas/company",
            "description": "A company is the employer of many users",
            "properties": {
              "ceoUsername": {
                "description": "The identifier of the user who is CEO of the company",
                "type": "string",
              },
              "id": {
                "description": "The identifier of a company",
                "format": "uuid",
                "type": "string",
              },
              "legalForm": {
                "description": "The legal form of a company",
                "type": "string",
              },
              "name": {
                "description": "The legal name of a company",
                "type": "string",
              },
              "offices": {
                "description": "The offices of a company",
                "items": {
                  "$ref": "#/definitions/address",
                },
                "type": "array",
              },
            },
            "title": "company",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "cookie_size": {
          "description": undefined,
          "enum": [
            "bite-sized",
            "regular",
            "mega-sized",
          ],
          "name": "cookie_size",
          "nullable": false,
          "title": "queryInput_getCookie_cookie_size",
          "type": "string",
        },
        "cookie_type": {
          "description": undefined,
          "enum": [
            "chocolate chip",
            "oatmeal raisin",
            "sugar",
          ],
          "name": "cookie_type",
          "nullable": false,
          "title": "queryInput_getCookie_cookie_type",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Used to test cookies.",
      "field": "getCookie",
      "headers": {
        "accept": "text/plain",
        "cookie": "cookie_type={args.cookie_type}; cookie_size={args.cookie_size};",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/cookie",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "description": "Used to test generation of object types with matching schema.",
            "title": "getCookie_200_response",
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "lat": {
          "description": undefined,
          "name": "lat",
          "type": "number",
        },
        "long": {
          "description": undefined,
          "name": "long",
          "type": "number",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Used to find the nearest coffee machine based on the user's coordinates. Used to test the content field in parameter objects.",
      "field": "getNearestCoffeeMachine",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/coffeeLocation",
      "queryParamArgMap": {
        "lat": "lat",
        "long": "long",
      },
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "$resolvedRef": "/components/schemas/coordinates",
            "properties": {
              "lat": {
                "type": "number",
              },
              "long": {
                "type": "number",
              },
            },
            "required": [
              "lat",
              "long",
            ],
            "title": "coordinates",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "query": {
          "description": undefined,
          "name": "query",
          "type": "string",
        },
      },
      "description": "Used to test link parameters with variables",
      "field": "getCopier",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/copier",
      "queryParamArgMap": {
        "query": "query",
      },
      "responseByStatusCode": {
        "200": {
          "links": {
            "basicLink": {
              "args": {
                "query": "{root.$request.query.query}",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "constantLink": {
              "args": {
                "query": "123",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "everythingLink": {
              "args": {
                "query": "{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.query.query}_{root.$request.header.accept}_{root.$response.header.connection}",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "variableLink": {
              "args": {
                "query": "_{root.$request.query.query}_{root.$request.query.query}{root.$request.query.query}abc{root.$request.query.query}123",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
          },
          "responseSchema": {
            "properties": {
              "body": {
                "type": "string",
              },
            },
            "title": "getCopier_200_response",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Used to test generation of object types with matching schema.",
      "field": "getNumberOfCleanDesks",
      "headers": {
        "accept": "text/plain",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/cleanDesks",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Used to test generation of object types with matching schema.",
      "field": "getNumberOfDirtyDesks",
      "headers": {
        "accept": "text/plain",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/dirtyDesks",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Used to test empty responses",
      "field": "getBonuses",
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/bonuses",
      "responseByStatusCode": {
        "204": {
          "responseSchema": {
            "description": "Used to test empty responses",
            "title": "getBonuses_204_response",
            "type": "null",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "parameters": {
          "description": undefined,
          "name": "parameters",
          "nullable": false,
          "properties": {
            "limit": {
              "type": "integer",
            },
            "offset": {
              "type": "integer",
            },
          },
          "title": "queryInput_returnAllOffices_parameters",
          "type": "object",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Used to test query parameters with form style and explode",
      "field": "returnAllOffices",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/offices",
      "queryParamArgMap": {
        "parameters": "parameters",
      },
      "queryStringOptionsByParam": {
        "parameters": {
          "arrayFormat": "repeat",
          "destructObject": true,
        },
      },
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "items": {
              "$resolvedRef": "/components/schemas/office",
              "description": "An office",
              "properties": {
                "employeeId": {
                  "description": "The owner ID of the office",
                  "type": "string",
                },
                "employerId": {
                  "description": "The identifier of the company a user works for",
                  "type": "string",
                },
                "room number": {
                  "description": "The room number of the office",
                  "type": "integer",
                },
              },
              "title": "office",
              "type": "object",
            },
            "title": "returnAllOffices_200_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "accept": {
          "default": "text/plain",
          "description": "Describes the format of the return values. By default, the return type is \`text/plain\` and the return value is the two-letter language code for the identified language, for example, \`en\` for English or \`es\` for Spanish. To retrieve a JSON object that contains a ranking of identified languages with confidence scores, set the accept header parameter to \`application/json\`.",
          "enum": [
            "application/json",
            "text/plain",
          ],
          "name": "accept",
          "type": "string",
        },
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "id": {
          "description": "Office ID",
          "name": "id",
          "nullable": false,
          "type": "integer",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Return an office.",
      "field": "getOffice",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/offices/{args.id}",
      "responseByStatusCode": {
        "200": {
          "links": {
            "company": {
              "args": {
                "id": "{root.$response.body#/employerId}",
              },
              "description": "Allows to fetch the user's employer company.",
              "fieldName": "getCompanyById",
            },
            "owner": {
              "args": {
                "username": "{root.$response.body#/employeeId}",
              },
              "description": "Allows to fetch the user who invented a product.",
              "fieldName": "getUserByUsername",
            },
          },
          "responseSchema": {
            "$resolvedRef": "/components/schemas/office",
            "description": "An office",
            "properties": {
              "employeeId": {
                "description": "The owner ID of the office",
                "type": "string",
              },
              "employerId": {
                "description": "The identifier of the company a user works for",
                "type": "string",
              },
              "room number": {
                "description": "The room number of the office",
                "type": "integer",
              },
            },
            "title": "office",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Return a list of papers. Endpoint to test 2XX status code.",
      "field": "getPapers",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/papers",
      "responseByStatusCode": {
        "2XX": {
          "responseSchema": {
            "items": {
              "$resolvedRef": "/components/schemas/paper",
              "description": "A research paper",
              "properties": {
                "name": {
                  "description": "The name of the paper",
                  "type": "string",
                },
                "published": {
                  "description": "Whether the paper is published",
                  "type": "boolean",
                },
              },
              "title": "paper",
              "type": "object",
            },
            "title": "getPapers_2XX_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Create a new paper in the system. Endpoint to test non-application/json request and response bodies.",
      "field": "postPaper",
      "headers": {
        "Content-Type": "text/plain",
        "accept": "text/plain",
      },
      "method": "POST",
      "operationHeaders": undefined,
      "path": "/papers",
      "requestSchema": {
        "type": "string",
      },
      "responseByStatusCode": {
        "201": {
          "responseSchema": {
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "mutation",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Endpoint to test unsanitized parameters and data.",
      "field": "post_product_with_id",
      "headers": {
        "Content-Type": "application/json",
        "accept": "application/json",
      },
      "method": "POST",
      "operationHeaders": undefined,
      "path": "/products",
      "requestSchema": {
        "$resolvedRef": "/components/schemas/product-with-id",
        "description": "A product",
        "properties": {
          "product-id": {
            "description": "The id of the product",
            "type": "string",
          },
          "product-name": {
            "description": "The name of the product",
            "type": "string",
          },
          "product-tag": {
            "description": "A tag associated with the product",
            "type": "string",
          },
        },
        "title": "product-with-id",
        "type": "object",
      },
      "responseByStatusCode": {
        "201": {
          "responseSchema": {
            "$resolvedRef": "/components/schemas/product-with-id",
            "description": "A product",
            "properties": {
              "product-id": {
                "description": "The id of the product",
                "type": "string",
              },
              "product-name": {
                "description": "The name of the product",
                "type": "string",
              },
              "product-tag": {
                "description": "A tag associated with the product",
                "type": "string",
              },
            },
            "title": "product-with-id",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "mutation",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "product_id": {
          "description": undefined,
          "name": "product-id",
          "nullable": false,
          "type": "string",
        },
        "product_tag": {
          "description": undefined,
          "name": "product-tag",
          "nullable": false,
          "type": "string",
        },
      },
      "description": "Another endpoint to test unsanitized parameters and data.",
      "field": "get_product_with_id",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/products/{args.product_id}",
      "queryParamArgMap": {
        "product-tag": "product_tag",
      },
      "responseByStatusCode": {
        "200": {
          "links": {
            "reviews": {
              "args": {
                "id": "{root.$request.path.product-id}",
                "product_tag": "{root.$request.query.product-tag}",
              },
              "description": undefined,
              "fieldName": "getProductReviews",
            },
            "reviewsWithOperationRef": {
              "args": {
                "id": "{root.$request.path.product-id}",
                "product_tag": "{root.$request.query.product-tag}",
              },
              "description": undefined,
              "fieldName": "getProductReviews",
            },
          },
          "responseSchema": {
            "$resolvedRef": "/components/schemas/product-with-id",
            "description": "A product",
            "properties": {
              "product-id": {
                "description": "The id of the product",
                "type": "string",
              },
              "product-name": {
                "description": "The name of the product",
                "type": "string",
              },
              "product-tag": {
                "description": "A tag associated with the product",
                "type": "string",
              },
            },
            "title": "product-with-id",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "id": {
          "description": undefined,
          "name": "id",
          "nullable": false,
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "product_tag": {
          "default": "sport",
          "description": undefined,
          "name": "product-tag",
          "nullable": false,
          "type": "string",
        },
      },
      "description": "Obtain reviews for a product.",
      "field": "getProductReviews",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/products/{args.id}/reviews",
      "queryParamArgMap": {
        "product-tag": "product_tag",
      },
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "items": {
              "properties": {
                "text": {
                  "type": "string",
                },
                "timestamp": {
                  "format": "int64",
                  "type": "integer",
                },
              },
              "title": "query_getProductReviews_items",
              "type": "object",
            },
            "title": "getProductReviews_200_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "patent_id": {
          "description": undefined,
          "name": "patent-id",
          "nullable": false,
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "An endpoint to test authentication.",
      "field": "get_patent_with_id",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/patents/{args.patent_id}",
      "responseByStatusCode": {
        "200": {
          "links": {
            "inventor": {
              "args": {
                "username": "{root.$response.body#/inventorId}",
              },
              "description": "Allows to fetch the user who invented a product.",
              "fieldName": "getUserByUsername",
            },
          },
          "responseSchema": {
            "$resolvedRef": "/components/schemas/patent-with-id",
            "description": "A patent",
            "properties": {
              "inventor-id": {
                "description": "The id of the inventor",
                "type": "string",
              },
              "patent-id": {
                "description": "The id of the patent",
                "type": "string",
              },
            },
            "required": [
              "patent-name",
              "patent-id",
            ],
            "title": "patent-with-id",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "An endpoint to test authenticated POST requests.",
      "field": "post_project_with_id",
      "headers": {
        "Content-Type": "application/json",
        "accept": "application/json",
      },
      "method": "POST",
      "operationHeaders": undefined,
      "path": "/projects",
      "requestSchema": {
        "$resolvedRef": "/components/schemas/project-with-id",
        "description": "A project",
        "properties": {
          "active": {
            "description": "Whether the project is active",
            "type": "boolean",
          },
          "lead-id": {
            "description": "The id of the lead",
            "type": "string",
          },
          "patentId": {
            "description": "The patent associated with a project if applicable",
            "type": "string",
          },
          "project-id": {
            "description": "The id of the project",
            "type": "integer",
          },
        },
        "title": "project-with-id",
        "type": "object",
      },
      "responseByStatusCode": {
        "201": {
          "links": {
            "ProjectLead": {
              "args": {
                "username": "{root.$response.body#/leadId}",
              },
              "description": "Allows to fetch the user leading a project.",
              "fieldName": "getUserByUsername",
            },
          },
          "responseSchema": {
            "$resolvedRef": "/components/schemas/project-with-id",
            "description": "A project",
            "properties": {
              "active": {
                "description": "Whether the project is active",
                "type": "boolean",
              },
              "lead-id": {
                "description": "The id of the lead",
                "type": "string",
              },
              "patentId": {
                "description": "The patent associated with a project if applicable",
                "type": "string",
              },
              "project-id": {
                "description": "The id of the project",
                "type": "integer",
              },
            },
            "title": "project-with-id",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "mutation",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "project_id": {
          "description": undefined,
          "name": "project-id",
          "nullable": false,
          "type": "integer",
        },
      },
      "description": "Another endpoint to test authentication.",
      "field": "get_project_with_id",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/projects/{args.project_id}",
      "responseByStatusCode": {
        "200": {
          "links": {
            "patent": {
              "args": {
                "patent_id": "{root.$response.body#/patentId}",
              },
              "description": "Allows to fetch a patent.",
              "fieldName": "get_patent_with_id",
            },
            "projectLead": {
              "args": {
                "username": "{root.$response.body#/leadId}",
              },
              "description": "Allows to fetch the user leading a project.",
              "fieldName": "getUserByUsername",
            },
          },
          "responseSchema": {
            "$resolvedRef": "/components/schemas/project-with-id",
            "description": "A project",
            "properties": {
              "active": {
                "description": "Whether the project is active",
                "type": "boolean",
              },
              "lead-id": {
                "description": "The id of the lead",
                "type": "string",
              },
              "patentId": {
                "description": "The patent associated with a project if applicable",
                "type": "string",
              },
              "project-id": {
                "description": "The id of the project",
                "type": "integer",
              },
            },
            "title": "project-with-id",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "query": {
          "description": undefined,
          "name": "query",
          "type": "string",
        },
      },
      "description": "Used to test link parameters with variables",
      "field": "getScanner",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/scanner",
      "queryParamArgMap": {
        "query": "query",
      },
      "responseByStatusCode": {
        "200": {
          "links": {
            "basicLink": {
              "args": {
                "query": "{root.$request.query.query}",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "constantLink": {
              "args": {
                "query": "123",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "everythingLink": {
              "args": {
                "query": "{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.query.query}_{root.$request.header.accept}_{root.$response.header.connection}",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "variableLink": {
              "args": {
                "query": "_{root.$request.query.query}_{root.$request.query.query}{root.$request.query.query}abc{root.$request.query.query}123",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
          },
          "responseSchema": {
            "properties": {
              "body": {
                "type": "string",
              },
            },
            "title": "getScanner_200_response",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "path": {
          "description": undefined,
          "name": "path",
          "nullable": false,
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "query": {
          "description": undefined,
          "name": "query",
          "type": "string",
        },
      },
      "description": "Used to test link parameters with variables",
      "field": "postScanner",
      "headers": {
        "Content-Type": "text/plain",
        "accept": "application/json",
      },
      "method": "POST",
      "operationHeaders": undefined,
      "path": "/scanner/{args.path}",
      "queryParamArgMap": {
        "query": "query",
      },
      "requestSchema": {
        "type": "string",
      },
      "responseByStatusCode": {
        "200": {
          "links": {
            "basicLink": {
              "args": {
                "query": "{root.$request.query.query}",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "constantLink": {
              "args": {
                "query": "123",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "everythingLink": {
              "args": {
                "query": "{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.query.query}_{root.$request.header.accept}_{root.$response.header.connection}",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "everythingLink2": {
              "args": {
                "query": "{root.$url}_{root.$method}_{root.$statusCode}_{root.$request.body}_{root.$request.query.query}_{root.$request.path.path}_{root.$request.header.accept}_{root.$response.body#/body}_{root.$response.query.query}_{root.$response.path.path}_{root.$response.header.connection}",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
            "variableLink": {
              "args": {
                "query": "_{root.$request.query.query}_{root.$request.query.query}{root.$request.query.query}abc{root.$request.query.query}123",
              },
              "description": undefined,
              "fieldName": "getCopier",
            },
          },
          "responseSchema": {
            "properties": {
              "body": {
                "type": "string",
              },
            },
            "title": "postScanner_200_response",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "mutation",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "snack_size": {
          "description": undefined,
          "enum": [
            "large",
            "small",
          ],
          "name": "snack_size",
          "nullable": false,
          "title": "queryInput_getSnack_snack_size",
          "type": "string",
        },
        "snack_type": {
          "description": undefined,
          "enum": [
            "chips",
            "soda",
          ],
          "name": "snack_type",
          "nullable": false,
          "title": "queryInput_getSnack_snack_type",
          "type": "string",
        },
      },
      "description": "Endpoint to test sending of headers.",
      "field": "getSnack",
      "headers": {
        "accept": "text/plain",
        "snack_size": "{args.snack_size}",
        "snack_type": "{args.snack_type}",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/snack",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "description": "What snack is offered.",
            "title": "getSnack_200_response",
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "globalquery": {
          "description": undefined,
          "name": "globalquery",
          "nullable": false,
          "type": "string",
        },
        "limit": {
          "description": undefined,
          "name": "limit",
          "nullable": false,
          "type": "integer",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Endpoint to test sending of options.",
      "field": "get_Status",
      "headers": {
        "accept": "text/plain",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/status",
      "queryParamArgMap": {
        "globalquery": "globalquery",
        "limit": "limit",
      },
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "description": "What the status is.",
            "title": "get_Status_200_response",
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "globalquery": {
          "description": undefined,
          "name": "globalquery",
          "nullable": false,
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Endpoint to test placeholder objects to wrap response objects.",
      "field": "post_status",
      "headers": {
        "Content-Type": "application/json",
        "accept": "text/plain",
      },
      "method": "POST",
      "operationHeaders": undefined,
      "path": "/status",
      "queryParamArgMap": {
        "globalquery": "globalquery",
      },
      "requestSchema": {
        "properties": {
          "hello": {
            "type": "string",
          },
        },
        "title": "post_status_request",
        "type": "object",
      },
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "mutation",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Used to test OAuth token being present in header.",
      "field": "getSecure",
      "headers": {
        "accept": "text/plain",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/secure",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "description": "A secure message.",
            "title": "getSecure_200_response",
            "type": "string",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Returns the (contents of a) trashcan from a specific office",
      "field": "getAllTrashCans",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/trashcans",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "items": {
              "$resolvedRef": "/components/schemas/trashcan",
              "properties": {
                "brand": {
                  "type": "object",
                },
                "contents": {
                  "items": {
                    "type": "object",
                  },
                  "type": "array",
                },
              },
              "title": "trashcan",
              "type": "object",
            },
            "title": "getAllTrashCans_200_response",
            "type": "array",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "username": {
          "description": "Identifier of a user.",
          "name": "username",
          "nullable": false,
          "type": "string",
        },
      },
      "description": "Returns the (contents of a) trashcan from a specific owner",
      "field": "getOfficeTrashCan",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/trashcans/{args.username}",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "$resolvedRef": "/components/schemas/trashcan",
            "properties": {
              "brand": {
                "type": "object",
              },
              "contents": {
                "items": {
                  "type": "object",
                },
                "type": "array",
              },
            },
            "title": "trashcan",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
        "username": {
          "description": "Identifier of a user.",
          "name": "username",
          "nullable": false,
          "type": "string",
        },
      },
      "description": "Add new contents to the trashcan of a specific owner",
      "field": "postOfficeTrashCan",
      "headers": {
        "Content-Type": "application/json",
        "accept": "application/json",
      },
      "method": "POST",
      "operationHeaders": undefined,
      "path": "/trashcans/{args.username}",
      "requestSchema": {
        "title": "mutationInput_postOfficeTrashCan_input",
        "type": "object",
      },
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "$resolvedRef": "/components/schemas/trashcan",
            "properties": {
              "brand": {
                "type": "object",
              },
              "contents": {
                "items": {
                  "type": "object",
                },
                "type": "array",
              },
            },
            "title": "trashcan",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "mutation",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "It could be anything!",
      "field": "mystery",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/mystery",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "oneOf": [
              {
                "$ref": "#/definitions/query_mystery_oneOf_0",
              },
              {
                "$ref": "#/definitions/query_mystery_oneOf_1",
              },
            ],
            "title": "mystery_200_response",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
    {
      "argTypeMap": {
        "basePath": {
          "default": "api",
          "type": "string",
        },
        "port": {
          "default": "3001",
          "type": "string",
        },
      },
      "description": "Returns an arbitrary JSON object",
      "field": "random",
      "headers": {
        "accept": "application/json",
      },
      "method": "GET",
      "operationHeaders": undefined,
      "path": "/random",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "title": "query_random",
            "type": "object",
          },
        },
      },
      "schemaHeaders": undefined,
      "type": "query",
    },
  ],
  "referencedSchema": {
    "$ref": "#/definitions/_schema",
    "definitions": {
      "Mutation": {
        "properties": {
          "postOfficeTrashCan": {
            "$ref": "#/definitions/trashcan",
          },
          "postPaper": {
            "type": "string",
          },
          "postScanner": {
            "$ref": "#/definitions/postScanner_200_response",
          },
          "postUser": {
            "$ref": "#/definitions/user",
          },
          "post_product_with_id": {
            "$ref": "#/definitions/product-with-id",
          },
          "post_project_with_id": {
            "$ref": "#/definitions/project-with-id",
          },
          "post_status": {
            "type": "string",
          },
        },
        "readOnly": true,
        "title": "Mutation",
        "type": "object",
      },
      "MutationInput": {
        "properties": {
          "postOfficeTrashCan": {
            "$ref": "#/definitions/mutationInput_postOfficeTrashCan",
          },
          "postPaper": {
            "$ref": "#/definitions/mutationInput_postPaper",
          },
          "postScanner": {
            "$ref": "#/definitions/mutationInput_postScanner",
          },
          "postUser": {
            "$ref": "#/definitions/mutationInput_postUser",
          },
          "post_product_with_id": {
            "$ref": "#/definitions/mutationInput_post_product_with_id",
          },
          "post_project_with_id": {
            "$ref": "#/definitions/mutationInput_post_project_with_id",
          },
          "post_status": {
            "$ref": "#/definitions/mutationInput_post_status",
          },
        },
        "title": "MutationInput",
        "type": "object",
        "writeOnly": true,
      },
      "Query": {
        "properties": {
          "getAllAssets": {
            "$ref": "#/definitions/getAllAssets_200_response",
          },
          "getAllCars": {
            "$ref": "#/definitions/getAllCars_200_response",
          },
          "getAllTrashCans": {
            "$ref": "#/definitions/getAllTrashCans_200_response",
          },
          "getBonuses": {
            "$ref": "#/definitions/getBonuses_204_response",
          },
          "getCompanyById": {
            "$ref": "#/definitions/company",
          },
          "getCookie": {
            "$ref": "#/definitions/getCookie_200_response",
          },
          "getCopier": {
            "$ref": "#/definitions/getCopier_200_response",
          },
          "getNearestCoffeeMachine": {
            "$ref": "#/definitions/coordinates",
          },
          "getNumberOfCleanDesks": {
            "type": "string",
          },
          "getNumberOfDirtyDesks": {
            "type": "string",
          },
          "getOffice": {
            "$ref": "#/definitions/office",
          },
          "getOfficeTrashCan": {
            "$ref": "#/definitions/trashcan",
          },
          "getPapers": {
            "$ref": "#/definitions/getPapers_2XX_response",
          },
          "getProductReviews": {
            "$ref": "#/definitions/getProductReviews_200_response",
          },
          "getScanner": {
            "$ref": "#/definitions/getScanner_200_response",
          },
          "getSecure": {
            "$ref": "#/definitions/getSecure_200_response",
          },
          "getSnack": {
            "$ref": "#/definitions/getSnack_200_response",
          },
          "getUserByUsername": {
            "$ref": "#/definitions/user",
          },
          "getUserCar": {
            "$ref": "#/definitions/car",
          },
          "getUserFriends": {
            "$ref": "#/definitions/getUserFriends_200_response",
          },
          "getUsers": {
            "$ref": "#/definitions/getUsers_202_response",
          },
          "get_Status": {
            "$ref": "#/definitions/get_Status_200_response",
          },
          "get_patent_with_id": {
            "$ref": "#/definitions/patent-with-id",
          },
          "get_product_with_id": {
            "$ref": "#/definitions/product-with-id",
          },
          "get_project_with_id": {
            "$ref": "#/definitions/project-with-id",
          },
          "mystery": {
            "$ref": "#/definitions/mystery_200_response",
          },
          "random": {
            "$ref": "#/definitions/query_random",
          },
          "returnAllOffices": {
            "$ref": "#/definitions/returnAllOffices_200_response",
          },
        },
        "readOnly": true,
        "title": "Query",
        "type": "object",
      },
      "QueryInput": {
        "properties": {
          "getAllAssets": {
            "$ref": "#/definitions/queryInput_getAllAssets",
          },
          "getAllCars": {
            "$ref": "#/definitions/queryInput_getAllCars",
          },
          "getAllTrashCans": {
            "$ref": "#/definitions/queryInput_getAllTrashCans",
          },
          "getBonuses": {
            "$ref": "#/definitions/queryInput_getBonuses",
          },
          "getCompanyById": {
            "$ref": "#/definitions/queryInput_getCompanyById",
          },
          "getCookie": {
            "$ref": "#/definitions/queryInput_getCookie",
          },
          "getCopier": {
            "$ref": "#/definitions/queryInput_getCopier",
          },
          "getNearestCoffeeMachine": {
            "$ref": "#/definitions/queryInput_getNearestCoffeeMachine",
          },
          "getNumberOfCleanDesks": {
            "$ref": "#/definitions/queryInput_getNumberOfCleanDesks",
          },
          "getNumberOfDirtyDesks": {
            "$ref": "#/definitions/queryInput_getNumberOfDirtyDesks",
          },
          "getOffice": {
            "$ref": "#/definitions/queryInput_getOffice",
          },
          "getOfficeTrashCan": {
            "$ref": "#/definitions/queryInput_getOfficeTrashCan",
          },
          "getPapers": {
            "$ref": "#/definitions/queryInput_getPapers",
          },
          "getProductReviews": {
            "$ref": "#/definitions/queryInput_getProductReviews",
          },
          "getScanner": {
            "$ref": "#/definitions/queryInput_getScanner",
          },
          "getSecure": {
            "$ref": "#/definitions/queryInput_getSecure",
          },
          "getSnack": {
            "$ref": "#/definitions/queryInput_getSnack",
          },
          "getUserByUsername": {
            "$ref": "#/definitions/queryInput_getUserByUsername",
          },
          "getUserCar": {
            "$ref": "#/definitions/queryInput_getUserCar",
          },
          "getUserFriends": {
            "$ref": "#/definitions/queryInput_getUserFriends",
          },
          "getUsers": {
            "$ref": "#/definitions/queryInput_getUsers",
          },
          "get_Status": {
            "$ref": "#/definitions/queryInput_get_Status",
          },
          "get_patent_with_id": {
            "$ref": "#/definitions/queryInput_get_patent_with_id",
          },
          "get_product_with_id": {
            "$ref": "#/definitions/queryInput_get_product_with_id",
          },
          "get_project_with_id": {
            "$ref": "#/definitions/queryInput_get_project_with_id",
          },
          "mystery": {
            "$ref": "#/definitions/queryInput_mystery",
          },
          "random": {
            "$ref": "#/definitions/queryInput_random",
          },
          "returnAllOffices": {
            "$ref": "#/definitions/queryInput_returnAllOffices",
          },
        },
        "title": "QueryInput",
        "type": "object",
        "writeOnly": true,
      },
      "Tags": {
        "$resolvedRef": "/components/schemas/tags",
        "additionalProperties": true,
        "description": "Arbitrary (string) tags describing an entity.",
        "title": "Tags",
        "type": "object",
      },
      "_schema": {
        "properties": {
          "mutation": {
            "$ref": "#/definitions/Mutation",
          },
          "mutationInput": {
            "$ref": "#/definitions/MutationInput",
          },
          "query": {
            "$ref": "#/definitions/Query",
          },
          "queryInput": {
            "$ref": "#/definitions/QueryInput",
          },
        },
        "required": [
          "query",
        ],
        "title": "_schema",
        "type": "object",
      },
      "address": {
        "$resolvedRef": "/components/schemas/address",
        "description": "The legal address of a user",
        "properties": {
          "city": {
            "description": "The city a user lives in",
            "type": "string",
          },
          "street": {
            "description": "The street a user lives in",
            "type": "string",
          },
        },
        "title": "address",
        "type": "object",
      },
      "car": {
        "$resolvedRef": "/components/schemas/car",
        "description": "A car",
        "properties": {
          "color": {
            "description": "The color of the car.",
            "type": "string",
          },
          "features": {
            "$ref": "#/definitions/query_getUserCar_features",
          },
          "kind": {
            "$ref": "#/definitions/query_getUserCar_kind",
          },
          "model": {
            "description": "The model of the car.",
            "type": "string",
          },
          "rating": {
            "$ref": "#/definitions/query_getUserCar_rating",
          },
          "tags": {
            "$ref": "#/definitions/Tags",
          },
        },
        "title": "car",
        "type": "object",
      },
      "company": {
        "$resolvedRef": "/components/schemas/company",
        "description": "A company is the employer of many users",
        "properties": {
          "ceoUsername": {
            "description": "The identifier of the user who is CEO of the company",
            "type": "string",
          },
          "id": {
            "description": "The identifier of a company",
            "format": "uuid",
            "type": "string",
          },
          "legalForm": {
            "description": "The legal form of a company",
            "type": "string",
          },
          "name": {
            "description": "The legal name of a company",
            "type": "string",
          },
          "offices": {
            "description": "The offices of a company",
            "items": {
              "$ref": "#/definitions/address",
            },
            "type": "array",
          },
        },
        "title": "company",
        "type": "object",
      },
      "coordinates": {
        "$resolvedRef": "/components/schemas/coordinates",
        "properties": {
          "lat": {
            "type": "number",
          },
          "long": {
            "type": "number",
          },
        },
        "required": [
          "lat",
          "long",
        ],
        "title": "coordinates",
        "type": "object",
      },
      "familyObject": {
        "$resolvedRef": "/components/schemas/familyObject",
        "allOf": [
          {
            "$ref": "#/definitions/query_getUsers_items_nomenclature_allOf_1_allOf_0",
          },
          {
            "$ref": "#/definitions/query_getUsers_items_nomenclature_allOf_1_allOf_1",
          },
        ],
        "title": "familyObject",
        "type": "object",
      },
      "familyString": {
        "$resolvedRef": "/components/schemas/familyString",
        "title": "familyString",
        "type": "string",
      },
      "getAllAssets_200_response": {
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/car",
            },
            {
              "$ref": "#/definitions/user",
            },
            {
              "$ref": "#/definitions/trashcan",
            },
          ],
          "title": "query_getAllAssets_items",
          "type": "object",
        },
        "title": "getAllAssets_200_response",
        "type": "array",
      },
      "getAllCars_200_response": {
        "items": {
          "$resolvedRef": "/components/schemas/car",
          "description": "A car",
          "properties": {
            "color": {
              "description": "The color of the car.",
              "type": "string",
            },
            "features": {
              "$ref": "#/definitions/query_getUserCar_features",
            },
            "kind": {
              "$ref": "#/definitions/query_getUserCar_kind",
            },
            "model": {
              "description": "The model of the car.",
              "type": "string",
            },
            "rating": {
              "$ref": "#/definitions/query_getUserCar_rating",
            },
            "tags": {
              "$ref": "#/definitions/Tags",
            },
          },
          "title": "car",
          "type": "object",
        },
        "title": "getAllCars_200_response",
        "type": "array",
      },
      "getAllTrashCans_200_response": {
        "items": {
          "$resolvedRef": "/components/schemas/trashcan",
          "properties": {
            "brand": {
              "type": "object",
            },
            "contents": {
              "items": {
                "type": "object",
              },
              "type": "array",
            },
          },
          "title": "trashcan",
          "type": "object",
        },
        "title": "getAllTrashCans_200_response",
        "type": "array",
      },
      "getBonuses_204_response": {
        "description": "Used to test empty responses",
        "title": "getBonuses_204_response",
        "type": "null",
      },
      "getCookie_200_response": {
        "description": "Used to test generation of object types with matching schema.",
        "title": "getCookie_200_response",
        "type": "string",
      },
      "getCopier_200_response": {
        "properties": {
          "body": {
            "type": "string",
          },
        },
        "title": "getCopier_200_response",
        "type": "object",
      },
      "getPapers_2XX_response": {
        "items": {
          "$resolvedRef": "/components/schemas/paper",
          "description": "A research paper",
          "properties": {
            "name": {
              "description": "The name of the paper",
              "type": "string",
            },
            "published": {
              "description": "Whether the paper is published",
              "type": "boolean",
            },
          },
          "title": "paper",
          "type": "object",
        },
        "title": "getPapers_2XX_response",
        "type": "array",
      },
      "getProductReviews_200_response": {
        "items": {
          "properties": {
            "text": {
              "type": "string",
            },
            "timestamp": {
              "format": "int64",
              "type": "integer",
            },
          },
          "title": "query_getProductReviews_items",
          "type": "object",
        },
        "title": "getProductReviews_200_response",
        "type": "array",
      },
      "getScanner_200_response": {
        "properties": {
          "body": {
            "type": "string",
          },
        },
        "title": "getScanner_200_response",
        "type": "object",
      },
      "getSecure_200_response": {
        "description": "A secure message.",
        "title": "getSecure_200_response",
        "type": "string",
      },
      "getSnack_200_response": {
        "description": "What snack is offered.",
        "title": "getSnack_200_response",
        "type": "string",
      },
      "getUserFriends_200_response": {
        "items": {
          "$resolvedRef": "/components/schemas/user",
          "description": "A user represents a natural person",
          "properties": {
            "address": {
              "$ref": "#/definitions/address",
            },
            "address2": {
              "$ref": "#/definitions/address",
            },
            "employerId": {
              "description": "The identifier of the company a user works for",
              "type": "string",
            },
            "hobbies": {
              "description": "The hobbies of this user",
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "name": {
              "description": "The legal name of a user",
              "type": "string",
            },
            "nomenclature": {
              "$ref": "#/definitions/query_getUsers_items_nomenclature",
            },
            "status": {
              "$ref": "#/definitions/query_getUsers_items_status",
            },
            "username": {
              "description": "The identifier of a user",
              "type": "string",
            },
          },
          "required": [
            "name",
            "address",
            "employerId",
            "hobbies",
          ],
          "title": "user",
          "type": "object",
        },
        "title": "getUserFriends_200_response",
        "type": "array",
      },
      "getUsers_202_response": {
        "items": {
          "$resolvedRef": "/components/schemas/user",
          "description": "A user represents a natural person",
          "properties": {
            "address": {
              "$ref": "#/definitions/address",
            },
            "address2": {
              "$ref": "#/definitions/address",
            },
            "employerId": {
              "description": "The identifier of the company a user works for",
              "type": "string",
            },
            "hobbies": {
              "description": "The hobbies of this user",
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "name": {
              "description": "The legal name of a user",
              "type": "string",
            },
            "nomenclature": {
              "$ref": "#/definitions/query_getUsers_items_nomenclature",
            },
            "status": {
              "$ref": "#/definitions/query_getUsers_items_status",
            },
            "username": {
              "description": "The identifier of a user",
              "type": "string",
            },
          },
          "required": [
            "name",
            "address",
            "employerId",
            "hobbies",
          ],
          "title": "user",
          "type": "object",
        },
        "title": "getUsers_202_response",
        "type": "array",
      },
      "get_Status_200_response": {
        "description": "What the status is.",
        "title": "get_Status_200_response",
        "type": "string",
      },
      "mutationInput_postOfficeTrashCan": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "input": {
            "$ref": "#/definitions/mutationInput_postOfficeTrashCan_input",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "username": {
            "description": "Identifier of a user.",
            "name": "username",
            "nullable": false,
            "type": "string",
          },
        },
        "title": "mutationInput_postOfficeTrashCan",
        "type": "object",
      },
      "mutationInput_postOfficeTrashCan_input": {
        "title": "mutationInput_postOfficeTrashCan_input",
        "type": "object",
      },
      "mutationInput_postPaper": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "input": {
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "mutationInput_postPaper",
        "type": "object",
      },
      "mutationInput_postScanner": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "input": {
            "type": "string",
          },
          "path": {
            "description": undefined,
            "name": "path",
            "nullable": false,
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "query": {
            "description": undefined,
            "name": "query",
            "type": "string",
          },
        },
        "title": "mutationInput_postScanner",
        "type": "object",
      },
      "mutationInput_postUser": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "input": {
            "$ref": "#/definitions/user",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "mutationInput_postUser",
        "type": "object",
      },
      "mutationInput_post_product_with_id": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "input": {
            "$ref": "#/definitions/product-with-id",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "mutationInput_post_product_with_id",
        "type": "object",
      },
      "mutationInput_post_project_with_id": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "input": {
            "$ref": "#/definitions/project-with-id",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "mutationInput_post_project_with_id",
        "type": "object",
      },
      "mutationInput_post_status": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "globalquery": {
            "description": undefined,
            "name": "globalquery",
            "nullable": false,
            "type": "string",
          },
          "input": {
            "$ref": "#/definitions/post_status_request",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "mutationInput_post_status",
        "type": "object",
      },
      "mystery_200_response": {
        "oneOf": [
          {
            "$ref": "#/definitions/query_mystery_oneOf_0",
          },
          {
            "$ref": "#/definitions/query_mystery_oneOf_1",
          },
        ],
        "title": "mystery_200_response",
      },
      "office": {
        "$resolvedRef": "/components/schemas/office",
        "description": "An office",
        "properties": {
          "employeeId": {
            "description": "The owner ID of the office",
            "type": "string",
          },
          "employerId": {
            "description": "The identifier of the company a user works for",
            "type": "string",
          },
          "room number": {
            "description": "The room number of the office",
            "type": "integer",
          },
        },
        "title": "office",
        "type": "object",
      },
      "paper": {
        "$resolvedRef": "/components/schemas/paper",
        "description": "A research paper",
        "properties": {
          "name": {
            "description": "The name of the paper",
            "type": "string",
          },
          "published": {
            "description": "Whether the paper is published",
            "type": "boolean",
          },
        },
        "title": "paper",
        "type": "object",
      },
      "patent-with-id": {
        "$resolvedRef": "/components/schemas/patent-with-id",
        "description": "A patent",
        "properties": {
          "inventor-id": {
            "description": "The id of the inventor",
            "type": "string",
          },
          "patent-id": {
            "description": "The id of the patent",
            "type": "string",
          },
        },
        "required": [
          "patent-name",
          "patent-id",
        ],
        "title": "patent-with-id",
        "type": "object",
      },
      "postScanner_200_response": {
        "properties": {
          "body": {
            "type": "string",
          },
        },
        "title": "postScanner_200_response",
        "type": "object",
      },
      "post_status_request": {
        "properties": {
          "hello": {
            "type": "string",
          },
        },
        "title": "post_status_request",
        "type": "object",
      },
      "product-with-id": {
        "$resolvedRef": "/components/schemas/product-with-id",
        "description": "A product",
        "properties": {
          "product-id": {
            "description": "The id of the product",
            "type": "string",
          },
          "product-name": {
            "description": "The name of the product",
            "type": "string",
          },
          "product-tag": {
            "description": "A tag associated with the product",
            "type": "string",
          },
        },
        "title": "product-with-id",
        "type": "object",
      },
      "project-with-id": {
        "$resolvedRef": "/components/schemas/project-with-id",
        "description": "A project",
        "properties": {
          "active": {
            "description": "Whether the project is active",
            "type": "boolean",
          },
          "lead-id": {
            "description": "The id of the lead",
            "type": "string",
          },
          "patentId": {
            "description": "The patent associated with a project if applicable",
            "type": "string",
          },
          "project-id": {
            "description": "The id of the project",
            "type": "integer",
          },
        },
        "title": "project-with-id",
        "type": "object",
      },
      "queryInput_getAllAssets": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "companyId": {
            "description": undefined,
            "name": "companyId",
            "nullable": false,
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getAllAssets",
        "type": "object",
      },
      "queryInput_getAllCars": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getAllCars",
        "type": "object",
      },
      "queryInput_getAllTrashCans": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getAllTrashCans",
        "type": "object",
      },
      "queryInput_getBonuses": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getBonuses",
        "type": "object",
      },
      "queryInput_getCompanyById": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "id": {
            "description": undefined,
            "name": "id",
            "nullable": false,
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getCompanyById",
        "type": "object",
      },
      "queryInput_getCookie": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "cookie_size": {
            "$ref": "#/definitions/queryInput_getCookie_cookie_size",
          },
          "cookie_type": {
            "$ref": "#/definitions/queryInput_getCookie_cookie_type",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getCookie",
        "type": "object",
      },
      "queryInput_getCookie_cookie_size": {
        "description": undefined,
        "enum": [
          "bite-sized",
          "regular",
          "mega-sized",
        ],
        "name": "cookie_size",
        "nullable": false,
        "title": "queryInput_getCookie_cookie_size",
        "type": "string",
      },
      "queryInput_getCookie_cookie_type": {
        "description": undefined,
        "enum": [
          "chocolate chip",
          "oatmeal raisin",
          "sugar",
        ],
        "name": "cookie_type",
        "nullable": false,
        "title": "queryInput_getCookie_cookie_type",
        "type": "string",
      },
      "queryInput_getCopier": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "query": {
            "description": undefined,
            "name": "query",
            "type": "string",
          },
        },
        "title": "queryInput_getCopier",
        "type": "object",
      },
      "queryInput_getNearestCoffeeMachine": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "lat": {
            "description": undefined,
            "name": "lat",
            "type": "number",
          },
          "long": {
            "description": undefined,
            "name": "long",
            "type": "number",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getNearestCoffeeMachine",
        "type": "object",
      },
      "queryInput_getNumberOfCleanDesks": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getNumberOfCleanDesks",
        "type": "object",
      },
      "queryInput_getNumberOfDirtyDesks": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getNumberOfDirtyDesks",
        "type": "object",
      },
      "queryInput_getOffice": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "id": {
            "description": "Office ID",
            "name": "id",
            "nullable": false,
            "type": "integer",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getOffice",
        "type": "object",
      },
      "queryInput_getOfficeTrashCan": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "username": {
            "description": "Identifier of a user.",
            "name": "username",
            "nullable": false,
            "type": "string",
          },
        },
        "title": "queryInput_getOfficeTrashCan",
        "type": "object",
      },
      "queryInput_getPapers": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getPapers",
        "type": "object",
      },
      "queryInput_getProductReviews": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "id": {
            "description": undefined,
            "name": "id",
            "nullable": false,
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "product_tag": {
            "default": "sport",
            "description": undefined,
            "name": "product-tag",
            "nullable": false,
            "type": "string",
          },
        },
        "title": "queryInput_getProductReviews",
        "type": "object",
      },
      "queryInput_getScanner": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "query": {
            "description": undefined,
            "name": "query",
            "type": "string",
          },
        },
        "title": "queryInput_getScanner",
        "type": "object",
      },
      "queryInput_getSecure": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getSecure",
        "type": "object",
      },
      "queryInput_getSnack": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "snack_size": {
            "$ref": "#/definitions/queryInput_getSnack_snack_size",
          },
          "snack_type": {
            "$ref": "#/definitions/queryInput_getSnack_snack_type",
          },
        },
        "title": "queryInput_getSnack",
        "type": "object",
      },
      "queryInput_getSnack_snack_size": {
        "description": undefined,
        "enum": [
          "large",
          "small",
        ],
        "name": "snack_size",
        "nullable": false,
        "title": "queryInput_getSnack_snack_size",
        "type": "string",
      },
      "queryInput_getSnack_snack_type": {
        "description": undefined,
        "enum": [
          "chips",
          "soda",
        ],
        "name": "snack_type",
        "nullable": false,
        "title": "queryInput_getSnack_snack_type",
        "type": "string",
      },
      "queryInput_getUserByUsername": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "username": {
            "description": "Identifier of a user.",
            "name": "username",
            "nullable": false,
            "type": "string",
          },
        },
        "title": "queryInput_getUserByUsername",
        "type": "object",
      },
      "queryInput_getUserCar": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "username": {
            "description": "Identifier of a user.",
            "name": "username",
            "nullable": false,
            "type": "string",
          },
        },
        "title": "queryInput_getUserCar",
        "type": "object",
      },
      "queryInput_getUserFriends": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "username": {
            "description": "Identifier of a user.",
            "name": "username",
            "nullable": false,
            "type": "string",
          },
        },
        "title": "queryInput_getUserFriends",
        "type": "object",
      },
      "queryInput_getUsers": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "limit": {
            "description": "Limit of the number of users to return.",
            "name": "limit",
            "nullable": false,
            "type": "integer",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_getUsers",
        "type": "object",
      },
      "queryInput_get_Status": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "globalquery": {
            "description": undefined,
            "name": "globalquery",
            "nullable": false,
            "type": "string",
          },
          "limit": {
            "description": undefined,
            "name": "limit",
            "nullable": false,
            "type": "integer",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_get_Status",
        "type": "object",
      },
      "queryInput_get_patent_with_id": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "patent_id": {
            "description": undefined,
            "name": "patent-id",
            "nullable": false,
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_get_patent_with_id",
        "type": "object",
      },
      "queryInput_get_product_with_id": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "product_id": {
            "description": undefined,
            "name": "product-id",
            "nullable": false,
            "type": "string",
          },
          "product_tag": {
            "description": undefined,
            "name": "product-tag",
            "nullable": false,
            "type": "string",
          },
        },
        "title": "queryInput_get_product_with_id",
        "type": "object",
      },
      "queryInput_get_project_with_id": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
          "project_id": {
            "description": undefined,
            "name": "project-id",
            "nullable": false,
            "type": "integer",
          },
        },
        "title": "queryInput_get_project_with_id",
        "type": "object",
      },
      "queryInput_mystery": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_mystery",
        "type": "object",
      },
      "queryInput_random": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_random",
        "type": "object",
      },
      "queryInput_returnAllOffices": {
        "properties": {
          "basePath": {
            "default": "api",
            "type": "string",
          },
          "parameters": {
            "$ref": "#/definitions/queryInput_returnAllOffices_parameters",
          },
          "port": {
            "default": "3001",
            "type": "string",
          },
        },
        "title": "queryInput_returnAllOffices",
        "type": "object",
      },
      "queryInput_returnAllOffices_parameters": {
        "description": undefined,
        "name": "parameters",
        "nullable": false,
        "properties": {
          "limit": {
            "type": "integer",
          },
          "offset": {
            "type": "integer",
          },
        },
        "title": "queryInput_returnAllOffices_parameters",
        "type": "object",
      },
      "query_getAllAssets_items": {
        "oneOf": [
          {
            "$ref": "#/definitions/car",
          },
          {
            "$ref": "#/definitions/user",
          },
          {
            "$ref": "#/definitions/trashcan",
          },
        ],
        "title": "query_getAllAssets_items",
        "type": "object",
      },
      "query_getProductReviews_items": {
        "properties": {
          "text": {
            "type": "string",
          },
          "timestamp": {
            "format": "int64",
            "type": "integer",
          },
        },
        "title": "query_getProductReviews_items",
        "type": "object",
      },
      "query_getUserCar_features": {
        "additionalProperties": true,
        "title": "query_getUserCar_features",
        "type": "object",
      },
      "query_getUserCar_kind": {
        "enum": [
          "SEDAN",
          "SUV",
          "MINIVAN",
          "LIMOSINE",
          "RACE_CAR",
        ],
        "title": "query_getUserCar_kind",
        "type": "string",
      },
      "query_getUserCar_rating": {
        "description": "The rating of the car.",
        "enum": [
          100,
          101,
          200,
        ],
        "title": "query_getUserCar_rating",
        "type": "number",
      },
      "query_getUsers_items_nomenclature": {
        "allOf": [
          {
            "$ref": "#/definitions/suborderObject",
          },
          {
            "$ref": "#/definitions/familyObject",
          },
          {
            "$ref": "#/definitions/query_getUsers_items_nomenclature_allOf_2",
          },
        ],
        "properties": {
          "species": {
            "type": "string",
          },
        },
        "title": "query_getUsers_items_nomenclature",
        "type": "object",
      },
      "query_getUsers_items_nomenclature_allOf_1_allOf_0": {
        "properties": {
          "family": {
            "$ref": "#/definitions/familyString",
          },
        },
        "required": [
          "family",
        ],
        "title": "query_getUsers_items_nomenclature_allOf_1_allOf_0",
        "type": "object",
      },
      "query_getUsers_items_nomenclature_allOf_1_allOf_1": {
        "properties": {
          "familyCircular": {
            "$ref": "#/definitions/familyObject",
          },
        },
        "title": "query_getUsers_items_nomenclature_allOf_1_allOf_1",
        "type": "object",
      },
      "query_getUsers_items_nomenclature_allOf_2": {
        "properties": {
          "genus": {
            "type": "string",
          },
        },
        "title": "query_getUsers_items_nomenclature_allOf_2",
        "type": "object",
      },
      "query_getUsers_items_status": {
        "enum": [
          "staff",
          "contractor",
          "alumni",
        ],
        "title": "query_getUsers_items_status",
      },
      "query_mystery_oneOf_0": {
        "properties": {
          "common_attribute": {
            "type": "string",
          },
        },
        "title": "query_mystery_oneOf_0",
        "type": "object",
      },
      "query_mystery_oneOf_1": {
        "properties": {
          "different_attribute": {
            "type": "string",
          },
        },
        "title": "query_mystery_oneOf_1",
        "type": "object",
      },
      "query_random": {
        "title": "query_random",
        "type": "object",
      },
      "returnAllOffices_200_response": {
        "items": {
          "$resolvedRef": "/components/schemas/office",
          "description": "An office",
          "properties": {
            "employeeId": {
              "description": "The owner ID of the office",
              "type": "string",
            },
            "employerId": {
              "description": "The identifier of the company a user works for",
              "type": "string",
            },
            "room number": {
              "description": "The room number of the office",
              "type": "integer",
            },
          },
          "title": "office",
          "type": "object",
        },
        "title": "returnAllOffices_200_response",
        "type": "array",
      },
      "suborderObject": {
        "$resolvedRef": "/components/schemas/suborderObject",
        "properties": {
          "suborder": {
            "type": "string",
          },
        },
        "title": "suborderObject",
        "type": "object",
      },
      "trashcan": {
        "$resolvedRef": "/components/schemas/trashcan",
        "properties": {
          "brand": {
            "type": "object",
          },
          "contents": {
            "items": {
              "type": "object",
            },
            "type": "array",
          },
        },
        "title": "trashcan",
        "type": "object",
      },
      "user": {
        "$resolvedRef": "/components/schemas/user",
        "description": "A user represents a natural person",
        "properties": {
          "address": {
            "$ref": "#/definitions/address",
          },
          "address2": {
            "$ref": "#/definitions/address",
          },
          "employerId": {
            "description": "The identifier of the company a user works for",
            "type": "string",
          },
          "hobbies": {
            "description": "The hobbies of this user",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "name": {
            "description": "The legal name of a user",
            "type": "string",
          },
          "nomenclature": {
            "$ref": "#/definitions/query_getUsers_items_nomenclature",
          },
          "status": {
            "$ref": "#/definitions/query_getUsers_items_status",
          },
          "username": {
            "description": "The identifier of a user",
            "type": "string",
          },
        },
        "required": [
          "name",
          "address",
          "employerId",
          "hobbies",
        ],
        "title": "user",
        "type": "object",
      },
    },
  },
}
`;

exports[`example_api should generate the schema correctly 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

directive @oneOf on INPUT_OBJECT | FIELD_DEFINITION

type Query {
  "Return a list of users."
  getUsers(
    "Limit of the number of users to return."
    limit: Int!
  ): [user]
  "Returns a user from the system."
  getUserByUsername(
    "Identifier of a user."
    username: String!
  ): user
  "Returns a car to test nesting of sub operations"
  getUserCar(
    "Identifier of a user."
    username: String!
  ): car
  "Returns a user's friends to test pagination"
  getUserFriends(
    "Identifier of a user."
    username: String!
  ): [user]
  "Returns all company assets"
  getAllAssets(companyId: String!): [query_getAllAssets_items]
  "Returns information about all employee cars"
  getAllCars: [car]
  "Returns the profile of a company with the given ID."
  getCompanyById(id: String!): company
  "Used to test cookies."
  getCookie(cookie_type: queryInput_getCookie_cookie_type!, cookie_size: queryInput_getCookie_cookie_size!): String
  "Used to find the nearest coffee machine based on the user's coordinates. Used to test the content field in parameter objects."
  getNearestCoffeeMachine(lat: Float, long: Float): coordinates
  "Used to test link parameters with variables"
  getCopier(query: String): getCopier_200_response
  "Used to test generation of object types with matching schema."
  getNumberOfCleanDesks: String
  "Used to test generation of object types with matching schema."
  getNumberOfDirtyDesks: String
  "Used to test empty responses"
  getBonuses: Void
  "Used to test query parameters with form style and explode"
  returnAllOffices(parameters: queryInput_returnAllOffices_parameters_Input!): [office]
  "Return an office."
  getOffice(
    "Office ID"
    id: Int!
  ): office
  "Return a list of papers. Endpoint to test 2XX status code."
  getPapers: [paper]
  "Another endpoint to test unsanitized parameters and data."
  get_product_with_id(product_id: String!, product_tag: String!): product_with_id
  "Obtain reviews for a product."
  getProductReviews(id: String!, product_tag: String! = "sport"): [query_getProductReviews_items]
  "An endpoint to test authentication."
  get_patent_with_id(patent_id: String!): patent_with_id
  "Another endpoint to test authentication."
  get_project_with_id(project_id: Int!): project_with_id
  "Used to test link parameters with variables"
  getScanner(query: String): getScanner_200_response
  "Endpoint to test sending of headers."
  getSnack(snack_type: queryInput_getSnack_snack_type!, snack_size: queryInput_getSnack_snack_size!): String
  "Endpoint to test sending of options."
  get_Status(globalquery: String!, limit: Int!): String
  "Used to test OAuth token being present in header."
  getSecure: String
  "Returns the (contents of a) trashcan from a specific office"
  getAllTrashCans: [trashcan]
  "Returns the (contents of a) trashcan from a specific owner"
  getOfficeTrashCan(
    "Identifier of a user."
    username: String!
  ): trashcan
  "It could be anything!"
  mystery: mystery_200_response
  "Returns an arbitrary JSON object"
  random: JSON
}

"A user represents a natural person"
type user {
  "The identifier of a user"
  username: String
  "The legal name of a user"
  name: String!
  address: address!
  address2: address
  "The identifier of the company a user works for"
  employerId: String!
  "The hobbies of this user"
  hobbies: [String]!
  status: query_getUsers_items_status
  nomenclature: query_getUsers_items_nomenclature
  "Allows to fetch the user's employer company."
  employerCompany: company
  "Allows to fetch the user's friends."
  friends: [user]
}

"The legal address of a user"
type address {
  "The street a user lives in"
  street: String
  "The city a user lives in"
  city: String
}

enum query_getUsers_items_status {
  staff
  contractor
  alumni
}

type query_getUsers_items_nomenclature {
  suborder: String
  family: String!
  familyCircular: familyObject
  genus: String
  species: String
}

type familyObject {
  family: String!
  familyCircular: familyObject
}

"A company is the employer of many users"
type company {
  "The identifier of a company"
  id: UUID
  "The legal name of a company"
  name: String
  "The legal form of a company"
  legalForm: String
  "The identifier of the user who is CEO of the company"
  ceoUsername: String
  "The offices of a company"
  offices: [address]
  "Allows to fetch the company's CEO user."
  ceoUser: user
}

"A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier."
scalar UUID

"A car"
type car {
  "The model of the car."
  model: String
  "The color of the car."
  color: String
  features: JSON
  "Arbitrary (string) tags describing an entity."
  tags: JSON
  kind: query_getUserCar_kind
  rating: query_getUserCar_rating
}

"The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum query_getUserCar_kind {
  SEDAN
  SUV
  MINIVAN
  LIMOSINE
  RACE_CAR
}

"The rating of the car."
enum query_getUserCar_rating {
  _100
  _101
  _200
}

union query_getAllAssets_items = car | user | trashcan

type trashcan {
  brand: JSON
  contents: [JSON]
}

enum queryInput_getCookie_cookie_type {
  chocolate_chip
  oatmeal_raisin
  sugar
}

enum queryInput_getCookie_cookie_size {
  bite_sized
  regular
  mega_sized
}

type coordinates {
  lat: Float!
  long: Float!
}

type getCopier_200_response {
  body: String
  "Used to test link parameters with variables"
  basicLink: getCopier_200_response
  "Used to test link parameters with variables"
  constantLink: getCopier_200_response
  "Used to test link parameters with variables"
  variableLink: getCopier_200_response
  "Used to test link parameters with variables"
  everythingLink: getCopier_200_response
}

"Represents empty values"
scalar Void

"An office"
type office {
  "The owner ID of the office"
  employeeId: String
  "The room number of the office"
  room_number: Int
  "The identifier of the company a user works for"
  employerId: String
  "Allows to fetch the user who invented a product."
  owner: user
  "Allows to fetch the user's employer company."
  company: company
}

input queryInput_returnAllOffices_parameters_Input {
  limit: Int
  offset: Int
}

"A research paper"
type paper {
  "The name of the paper"
  name: String
  "Whether the paper is published"
  published: Boolean
}

"A product"
type product_with_id {
  "The name of the product"
  product_name: String
  "The id of the product"
  product_id: String
  "A tag associated with the product"
  product_tag: String
  "Obtain reviews for a product."
  reviews: [query_getProductReviews_items]
  "Obtain reviews for a product."
  reviewsWithOperationRef: [query_getProductReviews_items]
}

type query_getProductReviews_items {
  text: String
  timestamp: BigInt
}

"The \`BigInt\` scalar type represents non-fractional signed whole numeric values."
scalar BigInt

"A patent"
type patent_with_id {
  "The id of the patent"
  patent_id: String!
  "The id of the inventor"
  inventor_id: String
  "Allows to fetch the user who invented a product."
  inventor: user
}

"A project"
type project_with_id {
  "The id of the project"
  project_id: Int
  "The id of the lead"
  lead_id: String
  "Whether the project is active"
  active: Boolean
  "The patent associated with a project if applicable"
  patentId: String
  "Allows to fetch the user leading a project."
  ProjectLead: user
  "Allows to fetch the user leading a project."
  projectLead: user
  "Allows to fetch a patent."
  patent: patent_with_id
}

type getScanner_200_response {
  body: String
  "Used to test link parameters with variables"
  basicLink: getCopier_200_response
  "Used to test link parameters with variables"
  constantLink: getCopier_200_response
  "Used to test link parameters with variables"
  variableLink: getCopier_200_response
  "Used to test link parameters with variables"
  everythingLink: getCopier_200_response
}

enum queryInput_getSnack_snack_type {
  chips
  soda
}

enum queryInput_getSnack_snack_size {
  large
  small
}

union mystery_200_response = query_mystery_oneOf_0 | query_mystery_oneOf_1

type query_mystery_oneOf_0 {
  common_attribute: String
}

type query_mystery_oneOf_1 {
  different_attribute: String
}

type Mutation {
  "Create a new user in the system."
  postUser(input: user_Input): user
  "Create a new paper in the system. Endpoint to test non-application/json request and response bodies."
  postPaper(input: String): String
  "Endpoint to test unsanitized parameters and data."
  post_product_with_id(input: product_with_id_Input): product_with_id
  "An endpoint to test authenticated POST requests."
  post_project_with_id(input: project_with_id_Input): project_with_id
  "Used to test link parameters with variables"
  postScanner(path: String!, query: String, input: String): postScanner_200_response
  "Endpoint to test placeholder objects to wrap response objects."
  post_status(globalquery: String!, input: post_status_request_Input): String
  "Add new contents to the trashcan of a specific owner"
  postOfficeTrashCan(
    "Identifier of a user."
    username: String!
    input: JSON
  ): trashcan
}

"A user represents a natural person"
input user_Input {
  "The identifier of a user"
  username: String
  "The legal name of a user"
  name: String!
  address: address_Input!
  address2: address_Input
  "The identifier of the company a user works for"
  employerId: String!
  "The hobbies of this user"
  hobbies: [String]!
  status: query_getUsers_items_status
  nomenclature: query_getUsers_items_nomenclature_Input
}

"The legal address of a user"
input address_Input {
  "The street a user lives in"
  street: String
  "The city a user lives in"
  city: String
}

input query_getUsers_items_nomenclature_Input {
  suborder: String
  family: String!
  familyCircular: familyObject_Input
  genus: String
  species: String
}

input familyObject_Input {
  family: String!
  familyCircular: familyObject_Input
}

"A product"
input product_with_id_Input {
  "The name of the product"
  product_name: String
  "The id of the product"
  product_id: String
  "A tag associated with the product"
  product_tag: String
}

"A project"
input project_with_id_Input {
  "The id of the project"
  project_id: Int
  "The id of the lead"
  lead_id: String
  "Whether the project is active"
  active: Boolean
  "The patent associated with a project if applicable"
  patentId: String
}

type postScanner_200_response {
  body: String
  "Used to test link parameters with variables"
  basicLink: getCopier_200_response
  "Used to test link parameters with variables"
  constantLink: getCopier_200_response
  "Used to test link parameters with variables"
  variableLink: getCopier_200_response
  "Used to test link parameters with variables"
  everythingLink: getCopier_200_response
  "Used to test link parameters with variables"
  everythingLink2: getCopier_200_response
}

input post_status_request_Input {
  hello: String
}"
`;
