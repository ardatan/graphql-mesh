// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Multiple Responses Swagger should create correct response types with 204 empty response: schema 1`] = `
"schema @transport(subgraph: "test", kind: "rest", location: "https://api.example.com/v1") {
  query: Query
  mutation: Mutation
}

directive @statusCodeTypeName(subgraph: String, typeName: String, statusCode: ID) repeatable on UNION

directive @resolveRoot(subgraph: String) on FIELD_DEFINITION

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Query {
  """Optional extended description in Markdown."""
  foo_by_id: foo_by_id_response @httpOperation(subgraph: "test", path: "/{id}", operationSpecificHeaders: [["Accept", "application/json"]], httpMethod: GET)
}

union foo_by_id_response @statusCodeTypeName(subgraph: "test", statusCode: 200, typeName: "Foo") @statusCodeTypeName(subgraph: "test", statusCode: 500, typeName: "Error") = Foo | Error

type Foo {
  id: String
}

type Error {
  message: String
  stack: String
}

type Mutation {
  """Optional extended description in Markdown."""
  post: post_response @httpOperation(subgraph: "test", path: "/", operationSpecificHeaders: [["Accept", "application/json"]], httpMethod: POST)
}

union post_response @statusCodeTypeName(subgraph: "test", statusCode: 204, typeName: "Void_container") @statusCodeTypeName(subgraph: "test", statusCode: 500, typeName: "Error") = Void_container | Error

type Void_container {
  Void: Void @resolveRoot(subgraph: "test")
}

"""Represents empty values"""
scalar Void

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

scalar ObjMap"
`;
