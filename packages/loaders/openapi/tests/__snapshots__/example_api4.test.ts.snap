// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OpenAPI loader: Handle anyOf and oneOf should generate the schema correctly 1`] = `
"schema {
  query: Query
}

directive @oneOf on OBJECT | INTERFACE | INPUT_OBJECT

directive @resolveRoot on FIELD_DEFINITION

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

type Query @globalOptions(sourceName: "test", endpoint: "http://localhost:8080/api") {
  "Basic oneOf test"
  oneOf: oneOf_200_response @httpOperation(path: "/oneOf", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "oneOf test with non-object type member schema"
  oneOf2: oneOf2_200_response @httpOperation(path: "/oneOf2", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "oneOf test with no object type member schemas"
  oneOf3: oneOf3_200_response @httpOperation(path: "/oneOf3", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "oneOf test with extraneous member schemas"
  oneOf4: Int @httpOperation(path: "/oneOf4", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Basic oneOf test with allOf"
  oneOf5: oneOf5_200_response @httpOperation(path: "/oneOf5", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "oneOf test with allOf, requiring oneOf collapse"
  oneOf6: oneOf6_200_response @httpOperation(path: "/oneOf6", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Basic anyOf test using the same member schemas"
  anyOf: anyOf_200_response @httpOperation(path: "/anyOf", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Basic anyOf test with different member schemas"
  anyOf2: anyOf2_200_response @httpOperation(path: "/anyOf2", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with the same nested member schemas"
  anyOf3: anyOf3_200_response @httpOperation(path: "/anyOf3", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with different nested member schemas"
  anyOf4: anyOf4_200_response @httpOperation(path: "/anyOf4", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with different nested member schemas, leading to conflict"
  anyOf5: anyOf5_200_response @httpOperation(path: "/anyOf5", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with incompatible member schema types"
  anyOf6: anyOf6_200_response @httpOperation(path: "/anyOf6", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with some extraneous member schemas"
  anyOf7: anyOf7_200_response @httpOperation(path: "/anyOf7", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with no object type member schemas"
  anyOf8: anyOf8_200_response @httpOperation(path: "/anyOf8", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with extraneous member schemas with external type"
  anyOf9: Int @httpOperation(path: "/anyOf9", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "Basic anyOf test with allOf"
  anyOf10: anyOf10_200_response @httpOperation(path: "/anyOf10", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  "anyOf test with allOf, requiring anyOf collapse"
  anyOf11: anyOf11_200_response @httpOperation(path: "/anyOf11", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  testLink: String @httpOperation(path: "/testLink", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
  oneOfWithAllOfsAndLink: OneOfWithAllOfsAndLink @httpOperation(path: "/oneOfWithAllOfsAndLink", operationSpecificHeaders: "{\\"accept\\":\\"application/json\\"}", httpMethod: GET)
}

union oneOf_200_response = commonAttributeObject | differentAttributeObject

type commonAttributeObject {
  commonAttribute: String
}

type differentAttributeObject {
  differentAttribute: String
}

union oneOf2_200_response = commonAttributeObject | Int_container

type Int_container {
  Int: Int @resolveRoot
}

union oneOf3_200_response = String_container | Int_container

type String_container {
  String: String @resolveRoot
}

union oneOf5_200_response = commonAttributeObject | differentAttributeObject

union oneOf6_200_response = commonAttributeObject | differentAttributeObject | anotherAttributeObject

type anotherAttributeObject {
  anotherAttribute: String
}

type anyOf_200_response {
  commonAttribute: String
}

type anyOf2_200_response {
  commonAttribute: String
  differentAttribute: String
}

type anyOf3_200_response {
  commonAttribute: commonAttributeObject
}

type anyOf4_200_response {
  commonAttribute: commonAttributeObject
  differentAttribute: commonAttributeObject
}

type anyOf5_200_response {
  commonAttribute: JSON
}

"The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type anyOf6_200_response {
  commonAttribute: String
  String: String @resolveRoot
}

type anyOf7_200_response {
  commonAttribute: String
  Float: Float @resolveRoot
}

type anyOf8_200_response {
  Int: Int @resolveRoot
  Float: Float @resolveRoot
}

type anyOf10_200_response {
  anotherAttribute: String
  commonAttribute: String
  differentAttribute: String
}

type anyOf11_200_response {
  anotherAttribute: String
  commonAttribute: String
  differentAttribute: String
}

union OneOfWithAllOfsAndLink = One | Two

type One {
  commonProp: String
  differentOneProp: String
  testLink: String @link(defaultRootType: "Query", defaultField: "oneOfWithAllOfsAndLink")
}

type Two {
  commonProp: String
  differentTwoProp: String
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}"
`;
