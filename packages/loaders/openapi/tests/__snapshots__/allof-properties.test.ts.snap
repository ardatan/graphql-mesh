// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Merge attributes correctly in allOfs should generate correct schema: allof-properties-schema 1`] = `
"schema @transport(subgraph: "test", kind: "rest") {
  query: Query
  mutation: Mutation
}

directive @discriminator(subgraph: String, field: String, mapping: [[String]]) on INTERFACE | UNION

directive @length(subgraph: String, min: Int, max: Int) on SCALAR

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Admin implements User {
  """The name"""
  name: query_getAdmin_allOf_0_name
  """The type"""
  type: String!
  """The admin"""
  admin: Boolean
}

interface User @discriminator(subgraph: "test", field: "type") {
  """The name"""
  name: query_getAdmin_allOf_0_name
  """The type"""
  type: String!
}

"""The name"""
scalar query_getAdmin_allOf_0_name @length(subgraph: "test", max: 100)

type Query {
  """Get admin"""
  getAdmin: Admin @httpOperation(subgraph: "test", path: "/admin", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
}

type Mutation {
  """Create users"""
  createUsers: Void @httpOperation(subgraph: "test", path: "/create", httpMethod: POST)
}

"""Represents empty values"""
scalar Void

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

scalar ObjMap"
`;
