type Cache {
  redis: RedisConfig
}

union RedisConfig @md = RedisConfigSentinel | RedisConfigSingle | RedisConfigCluster

type RedisConfigCluster @md {
  startupNodes: [RedisSentinelConfig!]!
  username: String
  password: String
  db: Int
  """
  Flag to indicate lazyConnect value for Redis client.

  @default: true
  """
  lazyConnect: Boolean
  """
  Needed for TLS connections to Redis Cluster (especially when using AWS Elasticache Clusters with TLS).

  @see https://github.com/redis/ioredis?tab=readme-ov-file#special-note-aws-elasticache-clusters-with-tls
  """
  dnsLookupAsIs: Boolean
  """
  Enable TLS for Redis Cluster connections. Required for AWS Elasticache Clusters with TLS.

  @see https://github.com/redis/ioredis?tab=readme-ov-file#special-note-aws-elasticache-clusters-with-tls
  """
  tls: Boolean
}

type RedisConfigSentinel @md {
  """
  identifies a group of Redis instances composed of a master and one or more slaves
  """
  name: String!
  """
  (optional) password for Sentinel instances.
  """
  sentinelPassword: String
  """
  A list of sentinels to connect to. The list does not need to enumerate all your sentinel instances, but a few so that if one is down the client will try the next one.
  """
  sentinels: [RedisSentinelConfig!]!
  """
  (optional) with a value of slave will return a random slave from the Sentinel group.
  """
  role: RedisSentinelRole
  """
  (optional) set to true if connecting to sentinel instances that are encrypted
  """
  enableTLSForSentinelMode: Boolean
  """
  Flag to indicate lazyConnect value for Redis client.

  @default: true
  """
  lazyConnect: Boolean
}

enum RedisSentinelRole {
  master
  slave
}

type RedisSentinelConfig @md {
  host: String!
  port: String!
  family: String
}

type RedisConfigSingle @md {
  host: String
  port: String
  username: String
  password: String
  db: Int
  url: String
  family: String
  """
  Flag to indicate lazyConnect value for Redis client.

  @default: true
  """
  lazyConnect: Boolean
}
