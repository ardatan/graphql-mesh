type Query {
  require: [String]
  """
  Defines the list of your external data sources for your API mesh
  """
  sources: [Source!]!
  """
  Transform to apply to the unified mesh schema
  """
  transforms: [Transform]
  """
  Additional type definitions, or type definitions overrides you wish to add to the schema mesh
  """
  additionalTypeDefs: Any
  """
  Additional resolvers, or resolvers overrides you wish to add to the schema mesh
  """
  additionalResolvers: [AdditionalResolver]
  """
  Backend cache
  """
  cache: Cache
  """
  Merge method
  """
  merger: String
  """
  PubSub Implementation
  """
  pubsub: PubSub
  """
  Live Query Invalidations
  """
  liveQueryInvalidations: [LiveQueryInvalidation]
}

scalar JSON

scalar Any

type Source {
  """
  The name you wish to set to your remote API, this will be used for building the GraphQL context
  """
  name: String!
  """
  Point to the handler you wish to use, it can either be a predefined handler, or a custom
  """
  handler: Handler!
  """
  List of transforms to apply to the current API source, before unifying it with the rest of the sources
  """
  transforms: [Transform]
}

type Transform @withAdditionalProperties
type Handler @withAdditionalProperties
type Cache @withAdditionalProperties

union AdditionalResolver = String | AdditionalStitchingResolverObject | AdditionalSubscriptionObject

type AdditionalStitchingResolverObject {
  type: String!
  field: String!
  requiredSelectionSet: String
  targetSource: String!
  targetMethod: String!
  args: JSON
  returnData: String
  resultSelectedFields: JSON
  resultSelectionSet: String
  resultDepth: Int
}

type AdditionalSubscriptionObject {
  type: String!
  field: String!
  pubsubTopic: String!
  returnData: String
  filterBy: String
}

union PubSub = String | PubSubConfig

type PubSubConfig {
  name: String!
  config: Any
}

type LiveQueryInvalidation {
  field: String!
  invalidate: [String!]!
}
