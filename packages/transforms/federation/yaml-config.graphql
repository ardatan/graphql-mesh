extend type Transform {
  federation: FederationTransform
}

type FederationTransform @md {
  types: [FederationTransformType!]
}

type FederationTransformType {
  name: String!
  config: FederationObjectConfig
}

type FederationObjectConfig {
  key: [FederationObjectKeyConfig]
  shareable: Boolean
  extends: Boolean
  fields: [FederationField!]
  resolveReference: ResolveReference
}

type FederationObjectKeyConfig {
  fields: String
}

union ResolveReference = String | ResolveReferenceObject

type ResolveReferenceObject {
  """
  Name of root field name that resolves the reference
  """
  queryFieldName: String!
  """
  You need configure the arguments for that field;
  ```yml
  args:
    someArg: "{root.someKeyValue}"
  ```
  """
  args: JSON
}

type FederationField {
  name: String!
  config: FederationFieldConfig!
}

type FederationFieldConfig {
  external: Boolean
  provides: FederationFieldProvidesConfig
  requires: FederationFieldRequiresConfig
  tag: FederationFieldTagConfig
  inaccessible: Boolean
  override: FederationFieldOverrideConfig
}

type FederationFieldProvidesConfig {
  fields: String
}

type FederationFieldRequiresConfig {
  fields: String
}

type FederationFieldTagConfig {
  name: String
}

type FederationFieldOverrideConfig {
  from: String
}
