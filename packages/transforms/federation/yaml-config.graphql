extend type Transform {
  federation: FederationTransform
}

type FederationTransform @md {
  types: [FederationTransformType!]
}

type FederationTransformType {
  name: String!
  config: FederationObjectConfig
}

type FederationObjectConfig {
  keyFields: [String!]
  extend: Boolean
  fields: [FederationField!]
  resolveReference: ResolveReference
}

union ResolveReference = String | ResolveReferenceObject

type ResolveReferenceObject {
  """
  Name of root field name that resolves the reference
  """
  queryFieldName: String!
  """
  If the root field name has multiple args,
  you need to define which argument should receive the key
  """
  keyArg: String
}

type FederationField {
  name: String!
  config: FederationFieldConfig!
}

type FederationFieldConfig {
  external: Boolean
  provides: String
  requires: String
}
