extend type Transform {
  """
  Mock configuration for your source
  """
  mock: MockingConfig
}

type MockingConfig @md {
  """
  If this expression is truthy, mocking would be enabled
  You can use environment variables expression, for example: `${MOCKING_ENABLED}`
  """
  if: Boolean
  """
  Do not mock any other resolvers other than defined in `mocks`.
  For example, you can enable this if you don't want to mock entire schema but partially.
  """
  preserveResolvers: Boolean
  """
  Mock configurations
  """
  mocks: [MockingFieldConfig]
  """
  The path to the code runs before the store is attached to the schema
  """
  initializeStore: Any
}

type MockingFieldConfig {
  """
  Resolver path
  Example: User.firstName
  """
  apply: String!
  """
  If this expression is truthy, mocking would be enabled
  You can use environment variables expression, for example: `${MOCKING_ENABLED}`
  """
  if: Boolean
  """
  Faker.js expression or function
  Read more (https://github.com/marak/Faker.js/#fakerfake)
  Example;
  faker: name.firstName
  faker: "{{ name.firstName }} {{ name.lastName }}"
  """
  faker: String
  """
  Custom mocking
  It can be a module or json file.
  Both "moduleName#exportName" or only "moduleName" would work
  """
  custom: String
  """
  Length of the mock list
  For the list types `[ObjectType]`, how many `ObjectType` you want to return?
  default: 2
  """
  length: Int
  """
  Get the data from the mock store
  """
  store: GetFromMockStoreConfig
  """
  Update the data on the mock store
  """
  updateStore: [UpdateMockStoreConfig]
}

type GetFromMockStoreConfig {
  type: String
  key: ID
  fieldName: String
}

type UpdateMockStoreConfig {
  type: String
  key: ID
  fieldName: String
  value: String
}
