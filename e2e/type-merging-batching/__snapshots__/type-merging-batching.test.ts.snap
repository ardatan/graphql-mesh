// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @transport(kind: "http", subgraph: "authors", location: "http://localhost:<authors_port>/graphql", options: {}) @transport(kind: "http", subgraph: "books", location: "http://localhost:<books_port>/graphql", options: {}) {
  query: Query
}

directive @merge(subgraph: String!, keyField: String!, keyArg: String!) on FIELD_DEFINITION

type Query {
  author(id: ID! @source(name: "id", type: "ID", subgraph: "authors") @source(name: "id", type: "ID", subgraph: "books")): Author @merge(subgraph: "authors", keyField: "id", keyArg: "id") @merge(subgraph: "books", keyField: "id", keyArg: "id") @source(name: "author", type: "Author", subgraph: "authors") @source(name: "authorWithBooks", type: "AuthorWithBooks", subgraph: "books")
  authors(ids: [ID] @source(name: "ids", type: "ID", subgraph: "authors")): [Author] @merge(subgraph: "authors", keyField: "id", keyArg: "ids") @source(name: "authors", type: "[Author]", subgraph: "authors")
  book(id: ID! @source(name: "id", type: "ID", subgraph: "books")): Book @source(name: "book", type: "Book", subgraph: "books") @merge(subgraph: "books", keyField: "id", keyArg: "id") @merge(subgraph: "books", keyField: "authorId", keyArg: "id")
  books(ids: [ID] @source(name: "ids", type: "ID", subgraph: "books")): [Book!]! @source(name: "books", type: "[Book!]!", subgraph: "books") @merge(subgraph: "books", keyField: "id", keyArg: "ids") @merge(subgraph: "books", keyField: "authorId", keyArg: "ids")
}

type Author @source(name: "Author", subgraph: "authors") @source(name: "AuthorWithBooks", subgraph: "books") {
  id: ID! @source(name: "id", type: "ID!", subgraph: "authors") @source(name: "id", type: "ID!", subgraph: "books")
  name: String! @source(name: "name", type: "String!", subgraph: "authors")
  books: [Book!]! @source(name: "books", type: "[Book!]!", subgraph: "books")
}

type Book @source(name: "Book", subgraph: "books") {
  id: ID! @source(name: "id", type: "ID!", subgraph: "books")
  title: String! @source(name: "title", type: "String!", subgraph: "books")
  authorId: ID! @source(name: "authorId", type: "ID!", subgraph: "books")
  author: Author @resolveTo(sourceName: "authors", sourceTypeName: "Query", sourceFieldName: "authors", keyField: "authorId", keysArg: "ids")
}
"
`;

exports[`should execute Author 1`] = `
{
  "data": {
    "author": {
      "books": [
        {
          "author": {
            "id": "1",
            "name": "Jane Doe",
          },
          "id": "0",
          "title": "Lorem Ipsum",
        },
      ],
      "id": "1",
      "name": "Jane Doe",
    },
  },
}
`;

exports[`should execute Authors 1`] = `
{
  "data": {
    "authors": [
      {
        "books": [
          {
            "author": {
              "id": "0",
              "name": "John Doe",
            },
            "id": "1",
            "title": "Dolor Sit Amet",
          },
        ],
        "id": "0",
        "name": "John Doe",
      },
      {
        "books": [
          {
            "author": {
              "id": "1",
              "name": "Jane Doe",
            },
            "id": "0",
            "title": "Lorem Ipsum",
          },
        ],
        "id": "1",
        "name": "Jane Doe",
      },
    ],
  },
}
`;

exports[`should execute Book 1`] = `
{
  "data": {
    "book": {
      "author": {
        "books": [
          {
            "id": "1",
            "title": "Dolor Sit Amet",
          },
        ],
        "id": "0",
        "name": "John Doe",
      },
      "id": "1",
      "title": "Dolor Sit Amet",
    },
  },
}
`;

exports[`should execute Books 1`] = `
{
  "data": {
    "books": [
      {
        "author": {
          "books": [
            {
              "id": "0",
              "title": "Lorem Ipsum",
            },
          ],
          "id": "1",
          "name": "Jane Doe",
        },
        "id": "0",
        "title": "Lorem Ipsum",
      },
      {
        "author": {
          "books": [
            {
              "id": "1",
              "title": "Dolor Sit Amet",
            },
          ],
          "id": "0",
          "name": "John Doe",
        },
        "id": "1",
        "title": "Dolor Sit Amet",
      },
    ],
  },
}
`;
