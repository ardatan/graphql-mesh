// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @transport(kind: "sqlite", subgraph: "chinook", location: "e2e/sqlite-chinook/chinook.db", options: {type: "db"}) {
  query: Query
  mutation: Mutation
}

directive @merge(subgraph: String!, keyField: String!, keyArg: String!) on FIELD_DEFINITION

type Query {
  albums(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Album] @source(name: "albums", type: "[Album]", subgraph: "chinook")
  album(
    albumId: Int @source(name: "albumId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Album @merge(subgraph: "chinook", keyField: "albumId", keyArg: "albumId") @source(name: "album", type: "Album", subgraph: "chinook")
  artists(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Artist] @source(name: "artists", type: "[Artist]", subgraph: "chinook")
  artist(
    artistId: Int @source(name: "artistId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Artist @merge(subgraph: "chinook", keyField: "artistId", keyArg: "artistId") @source(name: "artist", type: "Artist", subgraph: "chinook")
  customers(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Customer] @source(name: "customers", type: "[Customer]", subgraph: "chinook")
  customer(
    customerId: Int @source(name: "customerId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Customer @merge(subgraph: "chinook", keyField: "customerId", keyArg: "customerId") @source(name: "customer", type: "Customer", subgraph: "chinook")
  employees(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Employee] @source(name: "employees", type: "[Employee]", subgraph: "chinook")
  employee(
    employeeId: Int @source(name: "employeeId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Employee @merge(subgraph: "chinook", keyField: "employeeId", keyArg: "employeeId") @source(name: "employee", type: "Employee", subgraph: "chinook")
  genres(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Genre] @source(name: "genres", type: "[Genre]", subgraph: "chinook")
  genre(
    genreId: Int @source(name: "genreId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Genre @merge(subgraph: "chinook", keyField: "genreId", keyArg: "genreId") @source(name: "genre", type: "Genre", subgraph: "chinook")
  invoices(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Invoice] @source(name: "invoices", type: "[Invoice]", subgraph: "chinook")
  invoice(
    invoiceId: Int @source(name: "invoiceId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Invoice @merge(subgraph: "chinook", keyField: "invoiceId", keyArg: "invoiceId") @source(name: "invoice", type: "Invoice", subgraph: "chinook")
  invoiceItems(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [InvoiceItem] @source(name: "invoiceItems", type: "[InvoiceItem]", subgraph: "chinook")
  invoiceItem(
    invoiceLineId: Int @source(name: "invoiceLineId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): InvoiceItem @merge(subgraph: "chinook", keyField: "invoiceLineId", keyArg: "invoiceLineId") @source(name: "invoiceItem", type: "InvoiceItem", subgraph: "chinook")
  mediaTypes(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [MediaType] @source(name: "mediaTypes", type: "[MediaType]", subgraph: "chinook")
  mediaType(
    mediaTypeId: Int @source(name: "mediaTypeId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): MediaType @merge(subgraph: "chinook", keyField: "mediaTypeId", keyArg: "mediaTypeId") @source(name: "mediaType", type: "MediaType", subgraph: "chinook")
  playlists(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Playlist] @source(name: "playlists", type: "[Playlist]", subgraph: "chinook")
  playlist(
    playlistId: Int @source(name: "playlistId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Playlist @merge(subgraph: "chinook", keyField: "playlistId", keyArg: "playlistId") @source(name: "playlist", type: "Playlist", subgraph: "chinook")
  tracks(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Track] @source(name: "tracks", type: "[Track]", subgraph: "chinook")
  track(
    trackId: Int @source(name: "trackId", type: "Int", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
  ): Track @merge(subgraph: "chinook", keyField: "trackId", keyArg: "trackId") @source(name: "track", type: "Track", subgraph: "chinook")
}

type Album @source(name: "Album", subgraph: "chinook") {
  albumId: Int! @source(name: "albumId", type: "Int!", subgraph: "chinook")
  title: String! @source(name: "title", type: "String!", subgraph: "chinook")
  artistId: Int! @source(name: "artistId", type: "Int!", subgraph: "chinook")
  tracks(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Track] @source(name: "tracks", type: "[Track]", subgraph: "chinook")
  artist: Artist @source(name: "artist", type: "Artist", subgraph: "chinook")
}

type Track @source(name: "Track", subgraph: "chinook") {
  trackId: Int! @source(name: "trackId", type: "Int!", subgraph: "chinook")
  name: String! @source(name: "name", type: "String!", subgraph: "chinook")
  albumId: Int @source(name: "albumId", type: "Int", subgraph: "chinook")
  mediaTypeId: Int! @source(name: "mediaTypeId", type: "Int!", subgraph: "chinook")
  genreId: Int @source(name: "genreId", type: "Int", subgraph: "chinook")
  composer: String @source(name: "composer", type: "String", subgraph: "chinook")
  milliseconds: Int! @source(name: "milliseconds", type: "Int!", subgraph: "chinook")
  bytes: Int @source(name: "bytes", type: "Int", subgraph: "chinook")
  unitPrice: String! @source(name: "unitPrice", type: "String!", subgraph: "chinook")
  invoiceItems(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [InvoiceItem] @source(name: "invoiceItems", type: "[InvoiceItem]", subgraph: "chinook")
  mediaType: MediaType @source(name: "mediaType", type: "MediaType", subgraph: "chinook")
  genre: Genre @source(name: "genre", type: "Genre", subgraph: "chinook")
  album: Album @source(name: "album", type: "Album", subgraph: "chinook")
  playlists: [Playlist] @source(name: "playlists", type: "[Playlist]", subgraph: "chinook")
}

type InvoiceItem @source(name: "InvoiceItem", subgraph: "chinook") {
  invoiceLineId: Int! @source(name: "invoiceLineId", type: "Int!", subgraph: "chinook")
  invoiceId: Int! @source(name: "invoiceId", type: "Int!", subgraph: "chinook")
  trackId: Int! @source(name: "trackId", type: "Int!", subgraph: "chinook")
  unitPrice: String! @source(name: "unitPrice", type: "String!", subgraph: "chinook")
  quantity: Int! @source(name: "quantity", type: "Int!", subgraph: "chinook")
  track: Track @source(name: "track", type: "Track", subgraph: "chinook")
  invoice: Invoice @source(name: "invoice", type: "Invoice", subgraph: "chinook")
}

type Invoice @source(name: "Invoice", subgraph: "chinook") {
  invoiceId: Int! @source(name: "invoiceId", type: "Int!", subgraph: "chinook")
  customerId: Int! @source(name: "customerId", type: "Int!", subgraph: "chinook")
  invoiceDate: String! @source(name: "invoiceDate", type: "String!", subgraph: "chinook")
  billingAddress: String @source(name: "billingAddress", type: "String", subgraph: "chinook")
  billingCity: String @source(name: "billingCity", type: "String", subgraph: "chinook")
  billingState: String @source(name: "billingState", type: "String", subgraph: "chinook")
  billingCountry: String @source(name: "billingCountry", type: "String", subgraph: "chinook")
  billingPostalCode: String @source(name: "billingPostalCode", type: "String", subgraph: "chinook")
  total: String! @source(name: "total", type: "String!", subgraph: "chinook")
  invoiceItems(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [InvoiceItem] @source(name: "invoiceItems", type: "[InvoiceItem]", subgraph: "chinook")
  customer: Customer @source(name: "customer", type: "Customer", subgraph: "chinook")
}

"""The \`JSON\` scalar type represents raw JSON as values."""
scalar SequelizeJSON @source(name: "SequelizeJSON", subgraph: "chinook") @source(name: "SequelizeJSON", subgraph: "chinook")

type Customer @source(name: "Customer", subgraph: "chinook") {
  customerId: Int! @source(name: "customerId", type: "Int!", subgraph: "chinook")
  firstName: String! @source(name: "firstName", type: "String!", subgraph: "chinook")
  lastName: String! @source(name: "lastName", type: "String!", subgraph: "chinook")
  company: String @source(name: "company", type: "String", subgraph: "chinook")
  address: String @source(name: "address", type: "String", subgraph: "chinook")
  city: String @source(name: "city", type: "String", subgraph: "chinook")
  state: String @source(name: "state", type: "String", subgraph: "chinook")
  country: String @source(name: "country", type: "String", subgraph: "chinook")
  postalCode: String @source(name: "postalCode", type: "String", subgraph: "chinook")
  phone: String @source(name: "phone", type: "String", subgraph: "chinook")
  fax: String @source(name: "fax", type: "String", subgraph: "chinook")
  email: String! @source(name: "email", type: "String!", subgraph: "chinook")
  supportRepId: Int @source(name: "supportRepId", type: "Int", subgraph: "chinook")
  invoices(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Invoice] @source(name: "invoices", type: "[Invoice]", subgraph: "chinook")
  employee: Employee @source(name: "employee", type: "Employee", subgraph: "chinook")
}

type Employee @source(name: "Employee", subgraph: "chinook") {
  employeeId: Int! @source(name: "employeeId", type: "Int!", subgraph: "chinook")
  lastName: String! @source(name: "lastName", type: "String!", subgraph: "chinook")
  firstName: String! @source(name: "firstName", type: "String!", subgraph: "chinook")
  title: String @source(name: "title", type: "String", subgraph: "chinook")
  reportsTo: Int @source(name: "reportsTo", type: "Int", subgraph: "chinook")
  birthDate: String @source(name: "birthDate", type: "String", subgraph: "chinook")
  hireDate: String @source(name: "hireDate", type: "String", subgraph: "chinook")
  address: String @source(name: "address", type: "String", subgraph: "chinook")
  city: String @source(name: "city", type: "String", subgraph: "chinook")
  state: String @source(name: "state", type: "String", subgraph: "chinook")
  country: String @source(name: "country", type: "String", subgraph: "chinook")
  postalCode: String @source(name: "postalCode", type: "String", subgraph: "chinook")
  phone: String @source(name: "phone", type: "String", subgraph: "chinook")
  fax: String @source(name: "fax", type: "String", subgraph: "chinook")
  email: String @source(name: "email", type: "String", subgraph: "chinook")
  customers(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Customer] @source(name: "customers", type: "[Customer]", subgraph: "chinook")
  employees(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Employee] @source(name: "employees", type: "[Employee]", subgraph: "chinook")
  employee: Employee @source(name: "employee", type: "Employee", subgraph: "chinook")
}

type MediaType @source(name: "MediaType", subgraph: "chinook") {
  mediaTypeId: Int! @source(name: "mediaTypeId", type: "Int!", subgraph: "chinook")
  name: String @source(name: "name", type: "String", subgraph: "chinook")
  tracks(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Track] @source(name: "tracks", type: "[Track]", subgraph: "chinook")
}

type Genre @source(name: "Genre", subgraph: "chinook") {
  genreId: Int! @source(name: "genreId", type: "Int!", subgraph: "chinook")
  name: String @source(name: "name", type: "String", subgraph: "chinook")
  tracks(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Track] @source(name: "tracks", type: "[Track]", subgraph: "chinook")
}

type Playlist @source(name: "Playlist", subgraph: "chinook") {
  playlistId: Int! @source(name: "playlistId", type: "Int!", subgraph: "chinook")
  name: String @source(name: "name", type: "String", subgraph: "chinook")
  tracks: [Track] @source(name: "tracks", type: "[Track]", subgraph: "chinook")
}

type Artist @source(name: "Artist", subgraph: "chinook") {
  artistId: Int! @source(name: "artistId", type: "Int!", subgraph: "chinook")
  name: String @source(name: "name", type: "String", subgraph: "chinook")
  albums(
    limit: Int @source(name: "limit", type: "Int", subgraph: "chinook")
    order: String @source(name: "order", type: "String", subgraph: "chinook")
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON @source(name: "where", type: "SequelizeJSON", subgraph: "chinook")
    offset: Int @source(name: "offset", type: "Int", subgraph: "chinook")
  ): [Album] @source(name: "albums", type: "[Album]", subgraph: "chinook")
}

type Mutation {
  createAlbum(title: String! @source(name: "title", type: "String", subgraph: "chinook"), artistId: Int! @source(name: "artistId", type: "Int", subgraph: "chinook")): Album @source(name: "createAlbum", type: "Album", subgraph: "chinook")
  updateAlbum(albumId: Int @source(name: "albumId", type: "Int", subgraph: "chinook"), title: String @source(name: "title", type: "String", subgraph: "chinook"), artistId: Int @source(name: "artistId", type: "Int", subgraph: "chinook")): Album @source(name: "updateAlbum", type: "Album", subgraph: "chinook")
  deleteAlbum(albumId: Int! @source(name: "albumId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteAlbum", type: "GenericResponse", subgraph: "chinook")
  createArtist(name: String @source(name: "name", type: "String", subgraph: "chinook")): Artist @source(name: "createArtist", type: "Artist", subgraph: "chinook")
  updateArtist(artistId: Int @source(name: "artistId", type: "Int", subgraph: "chinook"), name: String @source(name: "name", type: "String", subgraph: "chinook")): Artist @source(name: "updateArtist", type: "Artist", subgraph: "chinook")
  deleteArtist(artistId: Int! @source(name: "artistId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteArtist", type: "GenericResponse", subgraph: "chinook")
  createCustomer(firstName: String! @source(name: "firstName", type: "String", subgraph: "chinook"), lastName: String! @source(name: "lastName", type: "String", subgraph: "chinook"), company: String @source(name: "company", type: "String", subgraph: "chinook"), address: String @source(name: "address", type: "String", subgraph: "chinook"), city: String @source(name: "city", type: "String", subgraph: "chinook"), state: String @source(name: "state", type: "String", subgraph: "chinook"), country: String @source(name: "country", type: "String", subgraph: "chinook"), postalCode: String @source(name: "postalCode", type: "String", subgraph: "chinook"), phone: String @source(name: "phone", type: "String", subgraph: "chinook"), fax: String @source(name: "fax", type: "String", subgraph: "chinook"), email: String! @source(name: "email", type: "String", subgraph: "chinook"), supportRepId: Int @source(name: "supportRepId", type: "Int", subgraph: "chinook")): Customer @source(name: "createCustomer", type: "Customer", subgraph: "chinook")
  updateCustomer(customerId: Int @source(name: "customerId", type: "Int", subgraph: "chinook"), firstName: String @source(name: "firstName", type: "String", subgraph: "chinook"), lastName: String @source(name: "lastName", type: "String", subgraph: "chinook"), company: String @source(name: "company", type: "String", subgraph: "chinook"), address: String @source(name: "address", type: "String", subgraph: "chinook"), city: String @source(name: "city", type: "String", subgraph: "chinook"), state: String @source(name: "state", type: "String", subgraph: "chinook"), country: String @source(name: "country", type: "String", subgraph: "chinook"), postalCode: String @source(name: "postalCode", type: "String", subgraph: "chinook"), phone: String @source(name: "phone", type: "String", subgraph: "chinook"), fax: String @source(name: "fax", type: "String", subgraph: "chinook"), email: String @source(name: "email", type: "String", subgraph: "chinook"), supportRepId: Int @source(name: "supportRepId", type: "Int", subgraph: "chinook")): Customer @source(name: "updateCustomer", type: "Customer", subgraph: "chinook")
  deleteCustomer(customerId: Int! @source(name: "customerId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteCustomer", type: "GenericResponse", subgraph: "chinook")
  createEmployee(lastName: String! @source(name: "lastName", type: "String", subgraph: "chinook"), firstName: String! @source(name: "firstName", type: "String", subgraph: "chinook"), title: String @source(name: "title", type: "String", subgraph: "chinook"), reportsTo: Int @source(name: "reportsTo", type: "Int", subgraph: "chinook"), birthDate: String @source(name: "birthDate", type: "String", subgraph: "chinook"), hireDate: String @source(name: "hireDate", type: "String", subgraph: "chinook"), address: String @source(name: "address", type: "String", subgraph: "chinook"), city: String @source(name: "city", type: "String", subgraph: "chinook"), state: String @source(name: "state", type: "String", subgraph: "chinook"), country: String @source(name: "country", type: "String", subgraph: "chinook"), postalCode: String @source(name: "postalCode", type: "String", subgraph: "chinook"), phone: String @source(name: "phone", type: "String", subgraph: "chinook"), fax: String @source(name: "fax", type: "String", subgraph: "chinook"), email: String @source(name: "email", type: "String", subgraph: "chinook")): Employee @source(name: "createEmployee", type: "Employee", subgraph: "chinook")
  updateEmployee(employeeId: Int @source(name: "employeeId", type: "Int", subgraph: "chinook"), lastName: String @source(name: "lastName", type: "String", subgraph: "chinook"), firstName: String @source(name: "firstName", type: "String", subgraph: "chinook"), title: String @source(name: "title", type: "String", subgraph: "chinook"), reportsTo: Int @source(name: "reportsTo", type: "Int", subgraph: "chinook"), birthDate: String @source(name: "birthDate", type: "String", subgraph: "chinook"), hireDate: String @source(name: "hireDate", type: "String", subgraph: "chinook"), address: String @source(name: "address", type: "String", subgraph: "chinook"), city: String @source(name: "city", type: "String", subgraph: "chinook"), state: String @source(name: "state", type: "String", subgraph: "chinook"), country: String @source(name: "country", type: "String", subgraph: "chinook"), postalCode: String @source(name: "postalCode", type: "String", subgraph: "chinook"), phone: String @source(name: "phone", type: "String", subgraph: "chinook"), fax: String @source(name: "fax", type: "String", subgraph: "chinook"), email: String @source(name: "email", type: "String", subgraph: "chinook")): Employee @source(name: "updateEmployee", type: "Employee", subgraph: "chinook")
  deleteEmployee(employeeId: Int! @source(name: "employeeId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteEmployee", type: "GenericResponse", subgraph: "chinook")
  createGenre(name: String @source(name: "name", type: "String", subgraph: "chinook")): Genre @source(name: "createGenre", type: "Genre", subgraph: "chinook")
  updateGenre(genreId: Int @source(name: "genreId", type: "Int", subgraph: "chinook"), name: String @source(name: "name", type: "String", subgraph: "chinook")): Genre @source(name: "updateGenre", type: "Genre", subgraph: "chinook")
  deleteGenre(genreId: Int! @source(name: "genreId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteGenre", type: "GenericResponse", subgraph: "chinook")
  createInvoice(customerId: Int! @source(name: "customerId", type: "Int", subgraph: "chinook"), invoiceDate: String! @source(name: "invoiceDate", type: "String", subgraph: "chinook"), billingAddress: String @source(name: "billingAddress", type: "String", subgraph: "chinook"), billingCity: String @source(name: "billingCity", type: "String", subgraph: "chinook"), billingState: String @source(name: "billingState", type: "String", subgraph: "chinook"), billingCountry: String @source(name: "billingCountry", type: "String", subgraph: "chinook"), billingPostalCode: String @source(name: "billingPostalCode", type: "String", subgraph: "chinook"), total: String! @source(name: "total", type: "String", subgraph: "chinook")): Invoice @source(name: "createInvoice", type: "Invoice", subgraph: "chinook")
  updateInvoice(invoiceId: Int @source(name: "invoiceId", type: "Int", subgraph: "chinook"), customerId: Int @source(name: "customerId", type: "Int", subgraph: "chinook"), invoiceDate: String @source(name: "invoiceDate", type: "String", subgraph: "chinook"), billingAddress: String @source(name: "billingAddress", type: "String", subgraph: "chinook"), billingCity: String @source(name: "billingCity", type: "String", subgraph: "chinook"), billingState: String @source(name: "billingState", type: "String", subgraph: "chinook"), billingCountry: String @source(name: "billingCountry", type: "String", subgraph: "chinook"), billingPostalCode: String @source(name: "billingPostalCode", type: "String", subgraph: "chinook"), total: String @source(name: "total", type: "String", subgraph: "chinook")): Invoice @source(name: "updateInvoice", type: "Invoice", subgraph: "chinook")
  deleteInvoice(invoiceId: Int! @source(name: "invoiceId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteInvoice", type: "GenericResponse", subgraph: "chinook")
  createInvoiceItem(invoiceId: Int! @source(name: "invoiceId", type: "Int", subgraph: "chinook"), trackId: Int! @source(name: "trackId", type: "Int", subgraph: "chinook"), unitPrice: String! @source(name: "unitPrice", type: "String", subgraph: "chinook"), quantity: Int! @source(name: "quantity", type: "Int", subgraph: "chinook")): InvoiceItem @source(name: "createInvoiceItem", type: "InvoiceItem", subgraph: "chinook")
  updateInvoiceItem(invoiceLineId: Int @source(name: "invoiceLineId", type: "Int", subgraph: "chinook"), invoiceId: Int @source(name: "invoiceId", type: "Int", subgraph: "chinook"), trackId: Int @source(name: "trackId", type: "Int", subgraph: "chinook"), unitPrice: String @source(name: "unitPrice", type: "String", subgraph: "chinook"), quantity: Int @source(name: "quantity", type: "Int", subgraph: "chinook")): InvoiceItem @source(name: "updateInvoiceItem", type: "InvoiceItem", subgraph: "chinook")
  deleteInvoiceItem(invoiceLineId: Int! @source(name: "invoiceLineId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteInvoiceItem", type: "GenericResponse", subgraph: "chinook")
  createMediaType(name: String @source(name: "name", type: "String", subgraph: "chinook")): MediaType @source(name: "createMediaType", type: "MediaType", subgraph: "chinook")
  updateMediaType(mediaTypeId: Int @source(name: "mediaTypeId", type: "Int", subgraph: "chinook"), name: String @source(name: "name", type: "String", subgraph: "chinook")): MediaType @source(name: "updateMediaType", type: "MediaType", subgraph: "chinook")
  deleteMediaType(mediaTypeId: Int! @source(name: "mediaTypeId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteMediaType", type: "GenericResponse", subgraph: "chinook")
  createPlaylist(name: String @source(name: "name", type: "String", subgraph: "chinook")): Playlist @source(name: "createPlaylist", type: "Playlist", subgraph: "chinook")
  updatePlaylist(playlistId: Int @source(name: "playlistId", type: "Int", subgraph: "chinook"), name: String @source(name: "name", type: "String", subgraph: "chinook")): Playlist @source(name: "updatePlaylist", type: "Playlist", subgraph: "chinook")
  deletePlaylist(playlistId: Int! @source(name: "playlistId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deletePlaylist", type: "GenericResponse", subgraph: "chinook")
  addPlaylistToTrack(playlistId: Int! @source(name: "playlistId", type: "Int", subgraph: "chinook"), trackId: Int! @source(name: "trackId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "addPlaylistToTrack", type: "GenericResponse", subgraph: "chinook")
  removePlaylistFromTrack(playlistId: Int! @source(name: "playlistId", type: "Int", subgraph: "chinook"), trackId: Int! @source(name: "trackId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "removePlaylistFromTrack", type: "GenericResponse", subgraph: "chinook")
  createTrack(name: String! @source(name: "name", type: "String", subgraph: "chinook"), albumId: Int @source(name: "albumId", type: "Int", subgraph: "chinook"), mediaTypeId: Int! @source(name: "mediaTypeId", type: "Int", subgraph: "chinook"), genreId: Int @source(name: "genreId", type: "Int", subgraph: "chinook"), composer: String @source(name: "composer", type: "String", subgraph: "chinook"), milliseconds: Int! @source(name: "milliseconds", type: "Int", subgraph: "chinook"), bytes: Int @source(name: "bytes", type: "Int", subgraph: "chinook"), unitPrice: String! @source(name: "unitPrice", type: "String", subgraph: "chinook")): Track @source(name: "createTrack", type: "Track", subgraph: "chinook")
  updateTrack(trackId: Int @source(name: "trackId", type: "Int", subgraph: "chinook"), name: String @source(name: "name", type: "String", subgraph: "chinook"), albumId: Int @source(name: "albumId", type: "Int", subgraph: "chinook"), mediaTypeId: Int @source(name: "mediaTypeId", type: "Int", subgraph: "chinook"), genreId: Int @source(name: "genreId", type: "Int", subgraph: "chinook"), composer: String @source(name: "composer", type: "String", subgraph: "chinook"), milliseconds: Int @source(name: "milliseconds", type: "Int", subgraph: "chinook"), bytes: Int @source(name: "bytes", type: "Int", subgraph: "chinook"), unitPrice: String @source(name: "unitPrice", type: "String", subgraph: "chinook")): Track @source(name: "updateTrack", type: "Track", subgraph: "chinook")
  deleteTrack(trackId: Int! @source(name: "trackId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "deleteTrack", type: "GenericResponse", subgraph: "chinook")
  addTrackToPlaylist(trackId: Int! @source(name: "trackId", type: "Int", subgraph: "chinook"), playlistId: Int! @source(name: "playlistId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "addTrackToPlaylist", type: "GenericResponse", subgraph: "chinook")
  removeTrackFromPlaylist(trackId: Int! @source(name: "trackId", type: "Int", subgraph: "chinook"), playlistId: Int! @source(name: "playlistId", type: "Int", subgraph: "chinook")): GenericResponse @source(name: "removeTrackFromPlaylist", type: "GenericResponse", subgraph: "chinook")
}

type GenericResponse @source(name: "GenericResponse", subgraph: "chinook") {
  success: Boolean @source(name: "success", type: "Boolean", subgraph: "chinook")
}
"
`;

exports[`should execute Albums 1`] = `
{
  "data": {
    "albums": [
      {
        "albumId": 1,
        "artist": {
          "name": "AC/DC",
        },
        "title": "For Those About To Rock We Salute You",
      },
      {
        "albumId": 2,
        "artist": {
          "name": "Accept",
        },
        "title": "Balls to the Wall",
      },
    ],
  },
}
`;
