// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @transport(kind: "sqlite", subgraph: "chinook", location: "e2e/sqlite-chinook/chinook.db", options: {type: "db"}) {
  query: Query
  mutation: Mutation
}

directive @merge(subgraph: String!, keyField: String!, keyArg: String!) on FIELD_DEFINITION

type Query {
  albums(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Album] @source(subgraph: "chinook", name: "albums", type: "[Album]")
  album(
    albumId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Album @source(subgraph: "chinook", name: "album", type: "Album") @merge(subgraph: "chinook", keyField: "albumId", keyArg: "albumId")
  artists(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Artist] @source(subgraph: "chinook", name: "artists", type: "[Artist]")
  artist(
    artistId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Artist @source(subgraph: "chinook", name: "artist", type: "Artist") @merge(subgraph: "chinook", keyField: "artistId", keyArg: "artistId")
  customers(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Customer] @source(subgraph: "chinook", name: "customers", type: "[Customer]")
  customer(
    customerId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Customer @source(subgraph: "chinook", name: "customer", type: "Customer") @merge(subgraph: "chinook", keyField: "customerId", keyArg: "customerId")
  employees(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Employee] @source(subgraph: "chinook", name: "employees", type: "[Employee]")
  employee(
    employeeId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Employee @source(subgraph: "chinook", name: "employee", type: "Employee") @merge(subgraph: "chinook", keyField: "employeeId", keyArg: "employeeId")
  genres(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Genre] @source(subgraph: "chinook", name: "genres", type: "[Genre]")
  genre(
    genreId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Genre @source(subgraph: "chinook", name: "genre", type: "Genre") @merge(subgraph: "chinook", keyField: "genreId", keyArg: "genreId")
  invoices(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Invoice] @source(subgraph: "chinook", name: "invoices", type: "[Invoice]")
  invoice(
    invoiceId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Invoice @source(subgraph: "chinook", name: "invoice", type: "Invoice") @merge(subgraph: "chinook", keyField: "invoiceId", keyArg: "invoiceId")
  invoiceItems(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [InvoiceItem] @source(subgraph: "chinook", name: "invoiceItems", type: "[InvoiceItem]")
  invoiceItem(
    invoiceLineId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): InvoiceItem @source(subgraph: "chinook", name: "invoiceItem", type: "InvoiceItem") @merge(subgraph: "chinook", keyField: "invoiceLineId", keyArg: "invoiceLineId")
  mediaTypes(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [MediaType] @source(subgraph: "chinook", name: "mediaTypes", type: "[MediaType]")
  mediaType(
    mediaTypeId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): MediaType @source(subgraph: "chinook", name: "mediaType", type: "MediaType") @merge(subgraph: "chinook", keyField: "mediaTypeId", keyArg: "mediaTypeId")
  playlists(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Playlist] @source(subgraph: "chinook", name: "playlists", type: "[Playlist]")
  playlist(
    playlistId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Playlist @source(subgraph: "chinook", name: "playlist", type: "Playlist") @merge(subgraph: "chinook", keyField: "playlistId", keyArg: "playlistId")
  tracks(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Track] @source(subgraph: "chinook", name: "tracks", type: "[Track]")
  track(
    trackId: Int
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
  ): Track @source(subgraph: "chinook", name: "track", type: "Track") @merge(subgraph: "chinook", keyField: "trackId", keyArg: "trackId")
}

type Album @source(subgraph: "chinook", name: "Album") {
  albumId: Int! @source(subgraph: "chinook", name: "albumId", type: "Int!")
  title: String! @source(subgraph: "chinook", name: "title", type: "String!")
  artistId: Int! @source(subgraph: "chinook", name: "artistId", type: "Int!")
  tracks(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Track] @source(subgraph: "chinook", name: "tracks", type: "[Track]")
  artist: Artist @source(subgraph: "chinook", name: "artist", type: "Artist")
}

type Track @source(subgraph: "chinook", name: "Track") {
  trackId: Int! @source(subgraph: "chinook", name: "trackId", type: "Int!")
  name: String! @source(subgraph: "chinook", name: "name", type: "String!")
  albumId: Int @source(subgraph: "chinook", name: "albumId", type: "Int")
  mediaTypeId: Int! @source(subgraph: "chinook", name: "mediaTypeId", type: "Int!")
  genreId: Int @source(subgraph: "chinook", name: "genreId", type: "Int")
  composer: String @source(subgraph: "chinook", name: "composer", type: "String")
  milliseconds: Int! @source(subgraph: "chinook", name: "milliseconds", type: "Int!")
  bytes: Int @source(subgraph: "chinook", name: "bytes", type: "Int")
  unitPrice: String! @source(subgraph: "chinook", name: "unitPrice", type: "String!")
  invoiceItems(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [InvoiceItem] @source(subgraph: "chinook", name: "invoiceItems", type: "[InvoiceItem]")
  mediaType: MediaType @source(subgraph: "chinook", name: "mediaType", type: "MediaType")
  genre: Genre @source(subgraph: "chinook", name: "genre", type: "Genre")
  album: Album @source(subgraph: "chinook", name: "album", type: "Album")
  playlists: [Playlist] @source(subgraph: "chinook", name: "playlists", type: "[Playlist]")
}

type InvoiceItem @source(subgraph: "chinook", name: "InvoiceItem") {
  invoiceLineId: Int! @source(subgraph: "chinook", name: "invoiceLineId", type: "Int!")
  invoiceId: Int! @source(subgraph: "chinook", name: "invoiceId", type: "Int!")
  trackId: Int! @source(subgraph: "chinook", name: "trackId", type: "Int!")
  unitPrice: String! @source(subgraph: "chinook", name: "unitPrice", type: "String!")
  quantity: Int! @source(subgraph: "chinook", name: "quantity", type: "Int!")
  track: Track @source(subgraph: "chinook", name: "track", type: "Track")
  invoice: Invoice @source(subgraph: "chinook", name: "invoice", type: "Invoice")
}

type Invoice @source(subgraph: "chinook", name: "Invoice") {
  invoiceId: Int! @source(subgraph: "chinook", name: "invoiceId", type: "Int!")
  customerId: Int! @source(subgraph: "chinook", name: "customerId", type: "Int!")
  invoiceDate: String! @source(subgraph: "chinook", name: "invoiceDate", type: "String!")
  billingAddress: String @source(subgraph: "chinook", name: "billingAddress", type: "String")
  billingCity: String @source(subgraph: "chinook", name: "billingCity", type: "String")
  billingState: String @source(subgraph: "chinook", name: "billingState", type: "String")
  billingCountry: String @source(subgraph: "chinook", name: "billingCountry", type: "String")
  billingPostalCode: String @source(subgraph: "chinook", name: "billingPostalCode", type: "String")
  total: String! @source(subgraph: "chinook", name: "total", type: "String!")
  invoiceItems(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [InvoiceItem] @source(subgraph: "chinook", name: "invoiceItems", type: "[InvoiceItem]")
  customer: Customer @source(subgraph: "chinook", name: "customer", type: "Customer")
}

"""The \`JSON\` scalar type represents raw JSON as values."""
scalar SequelizeJSON @source(subgraph: "chinook", name: "SequelizeJSON") @source(subgraph: "chinook", name: "SequelizeJSON")

type Customer @source(subgraph: "chinook", name: "Customer") {
  customerId: Int! @source(subgraph: "chinook", name: "customerId", type: "Int!")
  firstName: String! @source(subgraph: "chinook", name: "firstName", type: "String!")
  lastName: String! @source(subgraph: "chinook", name: "lastName", type: "String!")
  company: String @source(subgraph: "chinook", name: "company", type: "String")
  address: String @source(subgraph: "chinook", name: "address", type: "String")
  city: String @source(subgraph: "chinook", name: "city", type: "String")
  state: String @source(subgraph: "chinook", name: "state", type: "String")
  country: String @source(subgraph: "chinook", name: "country", type: "String")
  postalCode: String @source(subgraph: "chinook", name: "postalCode", type: "String")
  phone: String @source(subgraph: "chinook", name: "phone", type: "String")
  fax: String @source(subgraph: "chinook", name: "fax", type: "String")
  email: String! @source(subgraph: "chinook", name: "email", type: "String!")
  supportRepId: Int @source(subgraph: "chinook", name: "supportRepId", type: "Int")
  invoices(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Invoice] @source(subgraph: "chinook", name: "invoices", type: "[Invoice]")
  employee: Employee @source(subgraph: "chinook", name: "employee", type: "Employee")
}

type Employee @source(subgraph: "chinook", name: "Employee") {
  employeeId: Int! @source(subgraph: "chinook", name: "employeeId", type: "Int!")
  lastName: String! @source(subgraph: "chinook", name: "lastName", type: "String!")
  firstName: String! @source(subgraph: "chinook", name: "firstName", type: "String!")
  title: String @source(subgraph: "chinook", name: "title", type: "String")
  reportsTo: Int @source(subgraph: "chinook", name: "reportsTo", type: "Int")
  birthDate: String @source(subgraph: "chinook", name: "birthDate", type: "String")
  hireDate: String @source(subgraph: "chinook", name: "hireDate", type: "String")
  address: String @source(subgraph: "chinook", name: "address", type: "String")
  city: String @source(subgraph: "chinook", name: "city", type: "String")
  state: String @source(subgraph: "chinook", name: "state", type: "String")
  country: String @source(subgraph: "chinook", name: "country", type: "String")
  postalCode: String @source(subgraph: "chinook", name: "postalCode", type: "String")
  phone: String @source(subgraph: "chinook", name: "phone", type: "String")
  fax: String @source(subgraph: "chinook", name: "fax", type: "String")
  email: String @source(subgraph: "chinook", name: "email", type: "String")
  customers(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Customer] @source(subgraph: "chinook", name: "customers", type: "[Customer]")
  employees(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Employee] @source(subgraph: "chinook", name: "employees", type: "[Employee]")
  employee: Employee @source(subgraph: "chinook", name: "employee", type: "Employee")
}

type MediaType @source(subgraph: "chinook", name: "MediaType") {
  mediaTypeId: Int! @source(subgraph: "chinook", name: "mediaTypeId", type: "Int!")
  name: String @source(subgraph: "chinook", name: "name", type: "String")
  tracks(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Track] @source(subgraph: "chinook", name: "tracks", type: "[Track]")
}

type Genre @source(subgraph: "chinook", name: "Genre") {
  genreId: Int! @source(subgraph: "chinook", name: "genreId", type: "Int!")
  name: String @source(subgraph: "chinook", name: "name", type: "String")
  tracks(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Track] @source(subgraph: "chinook", name: "tracks", type: "[Track]")
}

type Playlist @source(subgraph: "chinook", name: "Playlist") {
  playlistId: Int! @source(subgraph: "chinook", name: "playlistId", type: "Int!")
  name: String @source(subgraph: "chinook", name: "name", type: "String")
  tracks: [Track] @source(subgraph: "chinook", name: "tracks", type: "[Track]")
}

type Artist @source(subgraph: "chinook", name: "Artist") {
  artistId: Int! @source(subgraph: "chinook", name: "artistId", type: "Int!")
  name: String @source(subgraph: "chinook", name: "name", type: "String")
  albums(
    limit: Int
    order: String
    """
    A JSON object conforming the the shape specified in http://docs.sequelizejs.com/en/latest/docs/querying/
    """
    where: SequelizeJSON
    offset: Int
  ): [Album] @source(subgraph: "chinook", name: "albums", type: "[Album]")
}

type Mutation {
  createAlbum(title: String!, artistId: Int!): Album @source(subgraph: "chinook", name: "createAlbum", type: "Album")
  updateAlbum(albumId: Int, title: String, artistId: Int): Album @source(subgraph: "chinook", name: "updateAlbum", type: "Album")
  deleteAlbum(albumId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteAlbum", type: "GenericResponse")
  createArtist(name: String): Artist @source(subgraph: "chinook", name: "createArtist", type: "Artist")
  updateArtist(artistId: Int, name: String): Artist @source(subgraph: "chinook", name: "updateArtist", type: "Artist")
  deleteArtist(artistId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteArtist", type: "GenericResponse")
  createCustomer(firstName: String!, lastName: String!, company: String, address: String, city: String, state: String, country: String, postalCode: String, phone: String, fax: String, email: String!, supportRepId: Int): Customer @source(subgraph: "chinook", name: "createCustomer", type: "Customer")
  updateCustomer(customerId: Int, firstName: String, lastName: String, company: String, address: String, city: String, state: String, country: String, postalCode: String, phone: String, fax: String, email: String, supportRepId: Int): Customer @source(subgraph: "chinook", name: "updateCustomer", type: "Customer")
  deleteCustomer(customerId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteCustomer", type: "GenericResponse")
  createEmployee(lastName: String!, firstName: String!, title: String, reportsTo: Int, birthDate: String, hireDate: String, address: String, city: String, state: String, country: String, postalCode: String, phone: String, fax: String, email: String): Employee @source(subgraph: "chinook", name: "createEmployee", type: "Employee")
  updateEmployee(employeeId: Int, lastName: String, firstName: String, title: String, reportsTo: Int, birthDate: String, hireDate: String, address: String, city: String, state: String, country: String, postalCode: String, phone: String, fax: String, email: String): Employee @source(subgraph: "chinook", name: "updateEmployee", type: "Employee")
  deleteEmployee(employeeId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteEmployee", type: "GenericResponse")
  createGenre(name: String): Genre @source(subgraph: "chinook", name: "createGenre", type: "Genre")
  updateGenre(genreId: Int, name: String): Genre @source(subgraph: "chinook", name: "updateGenre", type: "Genre")
  deleteGenre(genreId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteGenre", type: "GenericResponse")
  createInvoice(customerId: Int!, invoiceDate: String!, billingAddress: String, billingCity: String, billingState: String, billingCountry: String, billingPostalCode: String, total: String!): Invoice @source(subgraph: "chinook", name: "createInvoice", type: "Invoice")
  updateInvoice(invoiceId: Int, customerId: Int, invoiceDate: String, billingAddress: String, billingCity: String, billingState: String, billingCountry: String, billingPostalCode: String, total: String): Invoice @source(subgraph: "chinook", name: "updateInvoice", type: "Invoice")
  deleteInvoice(invoiceId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteInvoice", type: "GenericResponse")
  createInvoiceItem(invoiceId: Int!, trackId: Int!, unitPrice: String!, quantity: Int!): InvoiceItem @source(subgraph: "chinook", name: "createInvoiceItem", type: "InvoiceItem")
  updateInvoiceItem(invoiceLineId: Int, invoiceId: Int, trackId: Int, unitPrice: String, quantity: Int): InvoiceItem @source(subgraph: "chinook", name: "updateInvoiceItem", type: "InvoiceItem")
  deleteInvoiceItem(invoiceLineId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteInvoiceItem", type: "GenericResponse")
  createMediaType(name: String): MediaType @source(subgraph: "chinook", name: "createMediaType", type: "MediaType")
  updateMediaType(mediaTypeId: Int, name: String): MediaType @source(subgraph: "chinook", name: "updateMediaType", type: "MediaType")
  deleteMediaType(mediaTypeId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteMediaType", type: "GenericResponse")
  createPlaylist(name: String): Playlist @source(subgraph: "chinook", name: "createPlaylist", type: "Playlist")
  updatePlaylist(playlistId: Int, name: String): Playlist @source(subgraph: "chinook", name: "updatePlaylist", type: "Playlist")
  deletePlaylist(playlistId: Int!): GenericResponse @source(subgraph: "chinook", name: "deletePlaylist", type: "GenericResponse")
  addPlaylistToTrack(playlistId: Int!, trackId: Int!): GenericResponse @source(subgraph: "chinook", name: "addPlaylistToTrack", type: "GenericResponse")
  removePlaylistFromTrack(playlistId: Int!, trackId: Int!): GenericResponse @source(subgraph: "chinook", name: "removePlaylistFromTrack", type: "GenericResponse")
  createTrack(name: String!, albumId: Int, mediaTypeId: Int!, genreId: Int, composer: String, milliseconds: Int!, bytes: Int, unitPrice: String!): Track @source(subgraph: "chinook", name: "createTrack", type: "Track")
  updateTrack(trackId: Int, name: String, albumId: Int, mediaTypeId: Int, genreId: Int, composer: String, milliseconds: Int, bytes: Int, unitPrice: String): Track @source(subgraph: "chinook", name: "updateTrack", type: "Track")
  deleteTrack(trackId: Int!): GenericResponse @source(subgraph: "chinook", name: "deleteTrack", type: "GenericResponse")
  addTrackToPlaylist(trackId: Int!, playlistId: Int!): GenericResponse @source(subgraph: "chinook", name: "addTrackToPlaylist", type: "GenericResponse")
  removeTrackFromPlaylist(trackId: Int!, playlistId: Int!): GenericResponse @source(subgraph: "chinook", name: "removeTrackFromPlaylist", type: "GenericResponse")
}

type GenericResponse @source(subgraph: "chinook", name: "GenericResponse") {
  success: Boolean @source(subgraph: "chinook", name: "success", type: "Boolean")
}
"
`;

exports[`should execute Albums 1`] = `
{
  "data": {
    "albums": [
      {
        "albumId": 1,
        "artist": {
          "name": "AC/DC",
        },
        "title": "For Those About To Rock We Salute You",
      },
      {
        "albumId": 2,
        "artist": {
          "name": "Accept",
        },
        "title": "Balls to the Wall",
      },
    ],
  },
}
`;
