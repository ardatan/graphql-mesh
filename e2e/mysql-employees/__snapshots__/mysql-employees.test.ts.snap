// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@transport", "@mysqlSelect", "@mysqlInsert", "@mysqlUpdate", "@mysqlDelete", "@mysqlTableForeign", "@mysqlCount", "@extraSchemaDefinitionDirective"]
)
{
  query: Query
  mutation: Mutation
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    \`SECURITY\` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    \`EXECUTION\` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  EMPLOYEES @join__graph(name: "Employees", url: "mysql://root:passwd@0.0.0.0:<employees_port>/employees") 
}

directive @transport(subgraph: String, kind: String, location: String)  repeatable on SCHEMA

directive @mysqlSelect(table: String, columnMap: [[String]])  repeatable on FIELD_DEFINITION

directive @mysqlInsert(table: String, primaryKeys: [String])  repeatable on FIELD_DEFINITION

directive @mysqlUpdate(table: String, columnMap: [[String]])  repeatable on FIELD_DEFINITION

directive @mysqlDelete(table: String)  repeatable on FIELD_DEFINITION

directive @mysqlTableForeign(columnName: String)  repeatable on FIELD_DEFINITION

directive @mysqlCount(table: String)  repeatable on FIELD_DEFINITION

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date @join__type(graph: EMPLOYEES) 

scalar _DirectiveExtensions @join__type(graph: EMPLOYEES) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{subgraph: "Employees", kind: "mysql", location: "mysql://root:passwd@0.0.0.0:<employees_port>/employees"}]}
) @join__type(graph: EMPLOYEES)  {
  current_dept_emp(
    limit: Int
    offset: Int
    where: current_dept_emp_WhereInput
    orderBy: current_dept_emp_OrderByInput
  ): [current_dept_emp] @mysqlSelect(table: "current_dept_emp") 
  count_current_dept_emp(where: current_dept_emp_WhereInput) : Int @mysqlCount(table: "current_dept_emp") 
  departments(
    limit: Int
    offset: Int
    where: departments_WhereInput
    orderBy: departments_OrderByInput
  ): [departments] @mysqlSelect(table: "departments") 
  count_departments(where: departments_WhereInput) : Int @mysqlCount(table: "departments") 
  dept_emp(
    limit: Int
    offset: Int
    where: dept_emp_WhereInput
    orderBy: dept_emp_OrderByInput
  ): [dept_emp] @mysqlSelect(table: "dept_emp") 
  count_dept_emp(where: dept_emp_WhereInput) : Int @mysqlCount(table: "dept_emp") 
  dept_emp_latest_date(
    limit: Int
    offset: Int
    where: dept_emp_latest_date_WhereInput
    orderBy: dept_emp_latest_date_OrderByInput
  ): [dept_emp_latest_date] @mysqlSelect(table: "dept_emp_latest_date") 
  count_dept_emp_latest_date(where: dept_emp_latest_date_WhereInput) : Int @mysqlCount(table: "dept_emp_latest_date") 
  dept_manager(
    limit: Int
    offset: Int
    where: dept_manager_WhereInput
    orderBy: dept_manager_OrderByInput
  ): [dept_manager] @mysqlSelect(table: "dept_manager") 
  count_dept_manager(where: dept_manager_WhereInput) : Int @mysqlCount(table: "dept_manager") 
  employees(
    limit: Int
    offset: Int
    where: employees_WhereInput
    orderBy: employees_OrderByInput
  ): [employees] @mysqlSelect(table: "employees") 
  count_employees(where: employees_WhereInput) : Int @mysqlCount(table: "employees") 
  salaries(
    limit: Int
    offset: Int
    where: salaries_WhereInput
    orderBy: salaries_OrderByInput
  ): [salaries] @mysqlSelect(table: "salaries") 
  count_salaries(where: salaries_WhereInput) : Int @mysqlCount(table: "salaries") 
  titles(
    limit: Int
    offset: Int
    where: titles_WhereInput
    orderBy: titles_OrderByInput
  ): [titles] @mysqlSelect(table: "titles") 
  count_titles(where: titles_WhereInput) : Int @mysqlCount(table: "titles") 
  v_full_departments(
    limit: Int
    offset: Int
    where: v_full_departments_WhereInput
    orderBy: v_full_departments_OrderByInput
  ): [v_full_departments] @mysqlSelect(table: "v_full_departments") 
  count_v_full_departments(where: v_full_departments_WhereInput) : Int @mysqlCount(table: "v_full_departments") 
  v_full_employees(
    limit: Int
    offset: Int
    where: v_full_employees_WhereInput
    orderBy: v_full_employees_OrderByInput
  ): [v_full_employees] @mysqlSelect(table: "v_full_employees") 
  count_v_full_employees(where: v_full_employees_WhereInput) : Int @mysqlCount(table: "v_full_employees") 
}

"""
VIEW
"""
type current_dept_emp @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  dept_no: String!
  from_date: Date
  to_date: Date
}

type departments @join__type(graph: EMPLOYEES)  {
  dept_no: String!
  dept_name: String!
  dept_emp(
    limit: Int
    offset: Int
    where: dept_emp_WhereInput
    orderBy: dept_emp_OrderByInput
  ): [dept_emp] @mysqlSelect(table: "dept_emp", columnMap: [["dept_no", "dept_no"]]) 
  dept_manager(
    limit: Int
    offset: Int
    where: dept_manager_WhereInput
    orderBy: dept_manager_OrderByInput
  ): [dept_manager] @mysqlSelect(table: "dept_manager", columnMap: [["dept_no", "dept_no"]]) 
}

type dept_emp @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
  departments(
    where: departments_WhereInput
    orderBy: departments_OrderByInput
    limit: Int
    offset: Int
  ): [departments] @mysqlSelect(table: "departments", columnMap: [["dept_no", "dept_no"]])  @mysqlTableForeign(columnName: "dept_no") 
  employees(
    where: employees_WhereInput
    orderBy: employees_OrderByInput
    limit: Int
    offset: Int
  ): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]])  @mysqlTableForeign(columnName: "emp_no") 
}

type employees @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  birth_date: Date!
  first_name: String!
  last_name: String!
  gender: employees_gender!
  hire_date: Date!
  dept_emp(
    limit: Int
    offset: Int
    where: dept_emp_WhereInput
    orderBy: dept_emp_OrderByInput
  ): [dept_emp] @mysqlSelect(table: "dept_emp", columnMap: [["emp_no", "emp_no"]]) 
  dept_manager(
    limit: Int
    offset: Int
    where: dept_manager_WhereInput
    orderBy: dept_manager_OrderByInput
  ): [dept_manager] @mysqlSelect(table: "dept_manager", columnMap: [["emp_no", "emp_no"]]) 
  salaries(
    limit: Int
    offset: Int
    where: salaries_WhereInput
    orderBy: salaries_OrderByInput
  ): [salaries] @mysqlSelect(table: "salaries", columnMap: [["emp_no", "emp_no"]]) 
  titles(
    limit: Int
    offset: Int
    where: titles_WhereInput
    orderBy: titles_OrderByInput
  ): [titles] @mysqlSelect(table: "titles", columnMap: [["emp_no", "emp_no"]]) 
}

type dept_manager @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
  departments(
    where: departments_WhereInput
    orderBy: departments_OrderByInput
    limit: Int
    offset: Int
  ): [departments] @mysqlSelect(table: "departments", columnMap: [["dept_no", "dept_no"]])  @mysqlTableForeign(columnName: "dept_no") 
  employees(
    where: employees_WhereInput
    orderBy: employees_OrderByInput
    limit: Int
    offset: Int
  ): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]])  @mysqlTableForeign(columnName: "emp_no") 
}

type salaries @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  salary: Int!
  from_date: Date!
  to_date: Date!
  employees(
    where: employees_WhereInput
    orderBy: employees_OrderByInput
    limit: Int
    offset: Int
  ): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]])  @mysqlTableForeign(columnName: "emp_no") 
}

type titles @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  title: String!
  from_date: Date!
  to_date: Date
  employees(
    where: employees_WhereInput
    orderBy: employees_OrderByInput
    limit: Int
    offset: Int
  ): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]])  @mysqlTableForeign(columnName: "emp_no") 
}

"""
VIEW
"""
type dept_emp_latest_date @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  from_date: Date
  to_date: Date
}

"""
VIEW
"""
type v_full_departments @join__type(graph: EMPLOYEES)  {
  dept_no: String!
  dept_name: String!
  manager: String
}

"""
VIEW
"""
type v_full_employees @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  first_name: String!
  last_name: String!
  birth_date: Date!
  gender: v_full_employees_gender!
  hire_date: Date!
  department: String
}

type Mutation @join__type(graph: EMPLOYEES)  {
  insert_current_dept_emp(current_dept_emp: current_dept_emp_InsertInput!) : current_dept_emp @mysqlInsert(table: "current_dept_emp", primaryKeys: []) 
  update_current_dept_emp(
    current_dept_emp: current_dept_emp_UpdateInput!
    where: current_dept_emp_WhereInput
  ): current_dept_emp @mysqlUpdate(table: "current_dept_emp") 
  delete_current_dept_emp(where: current_dept_emp_WhereInput) : Boolean @mysqlDelete(table: "current_dept_emp") 
  insert_departments(departments: departments_InsertInput!) : departments @mysqlInsert(table: "departments", primaryKeys: ["dept_no"]) 
  update_departments(departments: departments_UpdateInput!, where: departments_WhereInput) : departments @mysqlUpdate(table: "departments") 
  delete_departments(where: departments_WhereInput) : Boolean @mysqlDelete(table: "departments") 
  insert_dept_emp(dept_emp: dept_emp_InsertInput!) : dept_emp @mysqlInsert(table: "dept_emp", primaryKeys: ["emp_no", "dept_no"]) 
  update_dept_emp(dept_emp: dept_emp_UpdateInput!, where: dept_emp_WhereInput) : dept_emp @mysqlUpdate(table: "dept_emp") 
  delete_dept_emp(where: dept_emp_WhereInput) : Boolean @mysqlDelete(table: "dept_emp") 
  insert_dept_emp_latest_date(dept_emp_latest_date: dept_emp_latest_date_InsertInput!) : dept_emp_latest_date @mysqlInsert(table: "dept_emp_latest_date", primaryKeys: []) 
  update_dept_emp_latest_date(
    dept_emp_latest_date: dept_emp_latest_date_UpdateInput!
    where: dept_emp_latest_date_WhereInput
  ): dept_emp_latest_date @mysqlUpdate(table: "dept_emp_latest_date") 
  delete_dept_emp_latest_date(where: dept_emp_latest_date_WhereInput) : Boolean @mysqlDelete(table: "dept_emp_latest_date") 
  insert_dept_manager(dept_manager: dept_manager_InsertInput!) : dept_manager @mysqlInsert(table: "dept_manager", primaryKeys: ["emp_no", "dept_no"]) 
  update_dept_manager(dept_manager: dept_manager_UpdateInput!, where: dept_manager_WhereInput) : dept_manager @mysqlUpdate(table: "dept_manager") 
  delete_dept_manager(where: dept_manager_WhereInput) : Boolean @mysqlDelete(table: "dept_manager") 
  insert_employees(employees: employees_InsertInput!) : employees @mysqlInsert(table: "employees", primaryKeys: ["emp_no"]) 
  update_employees(employees: employees_UpdateInput!, where: employees_WhereInput) : employees @mysqlUpdate(table: "employees") 
  delete_employees(where: employees_WhereInput) : Boolean @mysqlDelete(table: "employees") 
  insert_salaries(salaries: salaries_InsertInput!) : salaries @mysqlInsert(table: "salaries", primaryKeys: ["emp_no", "from_date"]) 
  update_salaries(salaries: salaries_UpdateInput!, where: salaries_WhereInput) : salaries @mysqlUpdate(table: "salaries") 
  delete_salaries(where: salaries_WhereInput) : Boolean @mysqlDelete(table: "salaries") 
  insert_titles(titles: titles_InsertInput!) : titles @mysqlInsert(table: "titles", primaryKeys: ["emp_no", "title", "from_date"]) 
  update_titles(titles: titles_UpdateInput!, where: titles_WhereInput) : titles @mysqlUpdate(table: "titles") 
  delete_titles(where: titles_WhereInput) : Boolean @mysqlDelete(table: "titles") 
  insert_v_full_departments(v_full_departments: v_full_departments_InsertInput!) : v_full_departments @mysqlInsert(table: "v_full_departments", primaryKeys: []) 
  update_v_full_departments(
    v_full_departments: v_full_departments_UpdateInput!
    where: v_full_departments_WhereInput
  ): v_full_departments @mysqlUpdate(table: "v_full_departments") 
  delete_v_full_departments(where: v_full_departments_WhereInput) : Boolean @mysqlDelete(table: "v_full_departments") 
  insert_v_full_employees(v_full_employees: v_full_employees_InsertInput!) : v_full_employees @mysqlInsert(table: "v_full_employees", primaryKeys: []) 
  update_v_full_employees(
    v_full_employees: v_full_employees_UpdateInput!
    where: v_full_employees_WhereInput
  ): v_full_employees @mysqlUpdate(table: "v_full_employees") 
  delete_v_full_employees(where: v_full_employees_WhereInput) : Boolean @mysqlDelete(table: "v_full_employees") 
}

enum OrderBy @join__type(graph: EMPLOYEES)  {
  asc @join__enumValue(graph: EMPLOYEES) 
  desc @join__enumValue(graph: EMPLOYEES) 
}

enum employees_gender @join__type(graph: EMPLOYEES)  {
  M @join__enumValue(graph: EMPLOYEES) 
  F @join__enumValue(graph: EMPLOYEES) 
}

enum v_full_employees_gender @join__type(graph: EMPLOYEES)  {
  M @join__enumValue(graph: EMPLOYEES) 
  F @join__enumValue(graph: EMPLOYEES) 
}

"""
VIEW
"""
input current_dept_emp_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  dept_no: String
  from_date: String
  to_date: String
}

"""
VIEW
"""
input current_dept_emp_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  dept_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

input departments_WhereInput @join__type(graph: EMPLOYEES)  {
  dept_no: String
  dept_name: String
}

input departments_OrderByInput @join__type(graph: EMPLOYEES)  {
  dept_no: OrderBy
  dept_name: OrderBy
}

input dept_emp_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  dept_no: String
  from_date: String
  to_date: String
}

input dept_emp_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  dept_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

input employees_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  birth_date: String
  first_name: String
  last_name: String
  gender: String
  hire_date: String
}

input employees_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  birth_date: OrderBy
  first_name: OrderBy
  last_name: OrderBy
  gender: OrderBy
  hire_date: OrderBy
}

input dept_manager_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  dept_no: String
  from_date: String
  to_date: String
}

input dept_manager_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  dept_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

input salaries_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  salary: String
  from_date: String
  to_date: String
}

input salaries_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  salary: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

input titles_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  title: String
  from_date: String
  to_date: String
}

input titles_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  title: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

"""
VIEW
"""
input dept_emp_latest_date_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  from_date: String
  to_date: String
}

"""
VIEW
"""
input dept_emp_latest_date_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

"""
VIEW
"""
input v_full_departments_WhereInput @join__type(graph: EMPLOYEES)  {
  dept_no: String
  dept_name: String
  manager: String
}

"""
VIEW
"""
input v_full_departments_OrderByInput @join__type(graph: EMPLOYEES)  {
  dept_no: OrderBy
  dept_name: OrderBy
  manager: OrderBy
}

"""
VIEW
"""
input v_full_employees_WhereInput @join__type(graph: EMPLOYEES)  {
  emp_no: String
  first_name: String
  last_name: String
  birth_date: String
  gender: String
  hire_date: String
  department: String
}

"""
VIEW
"""
input v_full_employees_OrderByInput @join__type(graph: EMPLOYEES)  {
  emp_no: OrderBy
  first_name: OrderBy
  last_name: OrderBy
  birth_date: OrderBy
  gender: OrderBy
  hire_date: OrderBy
  department: OrderBy
}

"""
VIEW
"""
input current_dept_emp_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  dept_no: String!
  from_date: Date
  to_date: Date
}

"""
VIEW
"""
input current_dept_emp_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  dept_no: String
  from_date: Date
  to_date: Date
}

input departments_InsertInput @join__type(graph: EMPLOYEES)  {
  dept_no: String!
  dept_name: String!
}

input departments_UpdateInput @join__type(graph: EMPLOYEES)  {
  dept_no: String
  dept_name: String
}

input dept_emp_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
}

input dept_emp_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  dept_no: String
  from_date: Date
  to_date: Date
}

"""
VIEW
"""
input dept_emp_latest_date_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  from_date: Date
  to_date: Date
}

"""
VIEW
"""
input dept_emp_latest_date_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  from_date: Date
  to_date: Date
}

input dept_manager_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
}

input dept_manager_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  dept_no: String
  from_date: Date
  to_date: Date
}

input employees_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  birth_date: Date!
  first_name: String!
  last_name: String!
  gender: employees_gender!
  hire_date: Date!
}

input employees_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  birth_date: Date
  first_name: String
  last_name: String
  gender: employees_gender
  hire_date: Date
}

input salaries_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  salary: Int!
  from_date: Date!
  to_date: Date!
}

input salaries_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  salary: Int
  from_date: Date
  to_date: Date
}

input titles_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  title: String!
  from_date: Date!
  to_date: Date
}

input titles_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  title: String
  from_date: Date
  to_date: Date
}

"""
VIEW
"""
input v_full_departments_InsertInput @join__type(graph: EMPLOYEES)  {
  dept_no: String!
  dept_name: String!
  manager: String
}

"""
VIEW
"""
input v_full_departments_UpdateInput @join__type(graph: EMPLOYEES)  {
  dept_no: String
  dept_name: String
  manager: String
}

"""
VIEW
"""
input v_full_employees_InsertInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int!
  first_name: String!
  last_name: String!
  birth_date: Date!
  gender: v_full_employees_gender!
  hire_date: Date!
  department: String
}

"""
VIEW
"""
input v_full_employees_UpdateInput @join__type(graph: EMPLOYEES)  {
  emp_no: Int
  first_name: String
  last_name: String
  birth_date: Date
  gender: v_full_employees_gender
  hire_date: Date
  department: String
}
    
"
`;

exports[`should execute GetSomeEmployees 1`] = `
{
  "data": {
    "employees": [
      {
        "__typename": "employees",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Development",
                "dept_no": "d005",
              },
            ],
            "dept_no": "d005",
            "emp_no": 10001,
          },
        ],
        "emp_no": 10001,
        "first_name": "Georgi",
        "gender": "M",
        "last_name": "Facello",
      },
      {
        "__typename": "employees",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Sales",
                "dept_no": "d007",
              },
            ],
            "dept_no": "d007",
            "emp_no": 10002,
          },
        ],
        "emp_no": 10002,
        "first_name": "Bezalel",
        "gender": "F",
        "last_name": "Simmel",
      },
      {
        "__typename": "employees",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Production",
                "dept_no": "d004",
              },
            ],
            "dept_no": "d004",
            "emp_no": 10003,
          },
        ],
        "emp_no": 10003,
        "first_name": "Parto",
        "gender": "M",
        "last_name": "Bamford",
      },
      {
        "__typename": "employees",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Production",
                "dept_no": "d004",
              },
            ],
            "dept_no": "d004",
            "emp_no": 10004,
          },
        ],
        "emp_no": 10004,
        "first_name": "Chirstian",
        "gender": "M",
        "last_name": "Koblick",
      },
      {
        "__typename": "employees",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Human Resources",
                "dept_no": "d003",
              },
            ],
            "dept_no": "d003",
            "emp_no": 10005,
          },
        ],
        "emp_no": 10005,
        "first_name": "Kyoichi",
        "gender": "M",
        "last_name": "Maliniak",
      },
    ],
  },
}
`;
