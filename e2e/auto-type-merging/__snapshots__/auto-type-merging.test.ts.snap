// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @transport(subgraph: "petstore", kind: "rest", location: "http://0.0.0.0:<petstore_port>/api/v3") @transport(subgraph: "vaccination", kind: "http", location: "http://0.0.0.0:<vaccination_port>/graphql") {
  query: Query
  mutation: Mutation
}

directive @enum(subgraph: String, value: String) on ENUM_VALUE

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @merge(subgraph: String!, keyField: String!, keyArg: String!) on FIELD_DEFINITION

type Query {
  """Multiple status values can be provided with comma separated strings"""
  findPetsByStatus(status: queryInput_findPetsByStatus_status = available @source(name: "status", type: "queryInput_findPetsByStatus_status", subgraph: "petstore")): [Pet] @httpOperation(subgraph: "petstore", path: "/pet/findByStatus", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"status\\\\\\":\\\\\\"status\\\\\\"}\\"", queryStringOptionsByParam: "\\"{\\\\\\"status\\\\\\":{\\\\\\"arrayFormat\\\\\\":\\\\\\"repeat\\\\\\",\\\\\\"destructObject\\\\\\":true}}\\"") @httpOperation(subgraph: "petstore", path: "/pet/findByStatus", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"status\\\\\\":\\\\\\"status\\\\\\"}\\"", queryStringOptionsByParam: "\\"{\\\\\\"status\\\\\\":{\\\\\\"arrayFormat\\\\\\":\\\\\\"repeat\\\\\\",\\\\\\"destructObject\\\\\\":true}}\\"") @httpOperation(subgraph: "petstore", path: "/pet/findByStatus", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"status\\\\\\":\\\\\\"status\\\\\\"}\\"", queryStringOptionsByParam: "\\"{\\\\\\"status\\\\\\":{\\\\\\"arrayFormat\\\\\\":\\\\\\"repeat\\\\\\",\\\\\\"destructObject\\\\\\":true}}\\"") @source(name: "findPetsByStatus", type: "[Pet]", subgraph: "petstore") @hidden
  """
  Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  """
  findPetsByTags(
    """Tags to filter by"""
    tags: [String] @source(name: "tags", type: "String", subgraph: "petstore")
  ): [Pet] @httpOperation(subgraph: "petstore", path: "/pet/findByTags", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"tags\\\\\\":\\\\\\"tags\\\\\\"}\\"", queryStringOptionsByParam: "\\"{\\\\\\"tags\\\\\\":{\\\\\\"arrayFormat\\\\\\":\\\\\\"repeat\\\\\\",\\\\\\"destructObject\\\\\\":true}}\\"") @httpOperation(subgraph: "petstore", path: "/pet/findByTags", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"tags\\\\\\":\\\\\\"tags\\\\\\"}\\"", queryStringOptionsByParam: "\\"{\\\\\\"tags\\\\\\":{\\\\\\"arrayFormat\\\\\\":\\\\\\"repeat\\\\\\",\\\\\\"destructObject\\\\\\":true}}\\"") @httpOperation(subgraph: "petstore", path: "/pet/findByTags", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"tags\\\\\\":\\\\\\"tags\\\\\\"}\\"", queryStringOptionsByParam: "\\"{\\\\\\"tags\\\\\\":{\\\\\\"arrayFormat\\\\\\":\\\\\\"repeat\\\\\\",\\\\\\"destructObject\\\\\\":true}}\\"") @source(name: "findPetsByTags", type: "[Pet]", subgraph: "petstore") @hidden
  """Returns a single pet"""
  getPetById(
    """ID of pet to return"""
    petId: BigInt! @source(name: "petId", type: "BigInt", subgraph: "petstore")
  ): Pet @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @source(name: "getPetById", type: "Pet", subgraph: "petstore") @merge(subgraph: "petstore", keyField: "id", keyArg: "petId")
  """Returns a map of status codes to quantities"""
  getInventory: JSON @httpOperation(subgraph: "petstore", path: "/store/inventory", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/store/inventory", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/store/inventory", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @source(name: "getInventory", type: "JSON", subgraph: "petstore") @hidden
  """
  For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
  """
  getOrderById(
    """ID of order that needs to be fetched"""
    orderId: BigInt! @source(name: "orderId", type: "BigInt", subgraph: "petstore")
  ): Order @httpOperation(subgraph: "petstore", path: "/store/order/{args.orderId}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/store/order/{args.orderId}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/store/order/{args.orderId}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @source(name: "getOrderById", type: "Order", subgraph: "petstore") @hidden @merge(subgraph: "petstore", keyField: "id", keyArg: "orderId")
  """Logs user into the system"""
  loginUser(
    """The user name for login"""
    username: String @source(name: "username", type: "String", subgraph: "petstore")
    """The password for login in clear text"""
    password: String @source(name: "password", type: "String", subgraph: "petstore")
  ): String @httpOperation(subgraph: "petstore", path: "/user/login", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"username\\\\\\":\\\\\\"username\\\\\\",\\\\\\"password\\\\\\":\\\\\\"password\\\\\\"}\\"") @httpOperation(subgraph: "petstore", path: "/user/login", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"username\\\\\\":\\\\\\"username\\\\\\",\\\\\\"password\\\\\\":\\\\\\"password\\\\\\"}\\"") @httpOperation(subgraph: "petstore", path: "/user/login", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET, queryParamArgMap: "\\"{\\\\\\"username\\\\\\":\\\\\\"username\\\\\\",\\\\\\"password\\\\\\":\\\\\\"password\\\\\\"}\\"") @source(name: "loginUser", type: "String", subgraph: "petstore") @hidden
  """Logs out current logged in user session"""
  logoutUser: JSON @httpOperation(subgraph: "petstore", path: "/user/logout", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/user/logout", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/user/logout", httpMethod: GET) @source(name: "logoutUser", type: "JSON", subgraph: "petstore") @hidden
  """Get user by user name"""
  getUserByName(
    """The name that needs to be fetched. Use user1 for testing."""
    username: String! @source(name: "username", type: "String", subgraph: "petstore")
  ): User @httpOperation(subgraph: "petstore", path: "/user/{args.username}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/user/{args.username}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @httpOperation(subgraph: "petstore", path: "/user/{args.username}", operationSpecificHeaders: "\\"{\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: GET) @source(name: "getUserByName", type: "User", subgraph: "petstore") @hidden
  petById(id: BigInt! @source(name: "id", type: "BigInt", subgraph: "vaccination")): Pet @source(name: "pet_by_id", type: "Pet", subgraph: "vaccination") @merge(subgraph: "vaccination", keyField: "id", keyArg: "id")
}

"""Pet object that needs to be added to the store"""
type Pet @source(name: "Pet", subgraph: "petstore") @source(name: "Pet", subgraph: "vaccination") {
  id: BigInt! @source(name: "id", type: "BigInt", subgraph: "petstore") @source(name: "id", type: "BigInt!", subgraph: "vaccination")
  name: String! @source(name: "name", type: "String!", subgraph: "petstore")
  category: Category @source(name: "category", type: "Category", subgraph: "petstore")
  photoUrls: [String]! @source(name: "photoUrls", type: "[String]!", subgraph: "petstore")
  tags: [Tag] @source(name: "tags", type: "[Tag]", subgraph: "petstore")
  status: mutation_updatePet_status @source(name: "status", type: "mutation_updatePet_status", subgraph: "petstore")
  vaccinated: Boolean! @source(name: "vaccinated", type: "Boolean!", subgraph: "vaccination")
}

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @source(name: "BigInt", subgraph: "vaccination") @source(name: "BigInt", subgraph: "petstore") @source(name: "BigInt", subgraph: "vaccination")

type Category @source(name: "Category", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  name: String @source(name: "name", type: "String", subgraph: "petstore")
}

type Tag @source(name: "Tag", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  name: String @source(name: "name", type: "String", subgraph: "petstore")
}

"""pet status in the store"""
enum mutation_updatePet_status @source(name: "mutation_updatePet_status", subgraph: "petstore") {
  available @source(name: "available", subgraph: "petstore")
  pending @source(name: "pending", subgraph: "petstore")
  sold @source(name: "sold", subgraph: "petstore")
}

"""Status values that need to be considered for filter"""
enum queryInput_findPetsByStatus_status @source(name: "queryInput_findPetsByStatus_status", subgraph: "petstore") {
  available @source(name: "available", subgraph: "petstore")
  pending @source(name: "pending", subgraph: "petstore")
  sold @source(name: "sold", subgraph: "petstore")
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf") @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf") @source(name: "JSON", subgraph: "petstore") @source(name: "JSON", subgraph: "petstore")

type Order @source(name: "Order", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  petId: BigInt @source(name: "petId", type: "BigInt", subgraph: "petstore")
  quantity: Int @source(name: "quantity", type: "Int", subgraph: "petstore")
  shipDate: DateTime @source(name: "shipDate", type: "DateTime", subgraph: "petstore")
  status: mutation_placeOrder_status @source(name: "status", type: "mutation_placeOrder_status", subgraph: "petstore")
  complete: Boolean @source(name: "complete", type: "Boolean", subgraph: "petstore")
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime @source(name: "DateTime", subgraph: "petstore") @source(name: "DateTime", subgraph: "petstore")

"""Order Status"""
enum mutation_placeOrder_status @source(name: "mutation_placeOrder_status", subgraph: "petstore") {
  placed @source(name: "placed", subgraph: "petstore")
  approved @source(name: "approved", subgraph: "petstore")
  delivered @source(name: "delivered", subgraph: "petstore")
}

type User @source(name: "User", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  username: String @source(name: "username", type: "String", subgraph: "petstore")
  firstName: String @source(name: "firstName", type: "String", subgraph: "petstore")
  lastName: String @source(name: "lastName", type: "String", subgraph: "petstore")
  email: EmailAddress @source(name: "email", type: "EmailAddress", subgraph: "petstore")
  password: String @source(name: "password", type: "String", subgraph: "petstore")
  phone: String @source(name: "phone", type: "String", subgraph: "petstore")
  """User Status"""
  userStatus: Int @source(name: "userStatus", type: "Int", subgraph: "petstore")
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address") @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address") @source(name: "EmailAddress", subgraph: "petstore") @source(name: "EmailAddress", subgraph: "petstore")

type Mutation {
  """Update an existing pet by Id"""
  updatePet(input: Pet_Input @source(name: "input", type: "Pet_Input", subgraph: "petstore")): Pet @httpOperation(subgraph: "petstore", path: "/pet", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: PUT) @httpOperation(subgraph: "petstore", path: "/pet", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: PUT) @httpOperation(subgraph: "petstore", path: "/pet", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: PUT) @source(name: "updatePet", type: "Pet", subgraph: "petstore") @hidden
  """Add a new pet to the store"""
  addPet(input: Pet_Input @source(name: "input", type: "Pet_Input", subgraph: "petstore")): Pet @httpOperation(subgraph: "petstore", path: "/pet", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/pet", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/pet", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @source(name: "addPet", type: "Pet", subgraph: "petstore") @hidden
  """Updates a pet in the store with form data"""
  updatePetWithForm(
    """ID of pet that needs to be updated"""
    petId: BigInt! @source(name: "petId", type: "BigInt", subgraph: "petstore")
    """Name of pet that needs to be updated"""
    name: String @source(name: "name", type: "String", subgraph: "petstore")
    """Status of pet that needs to be updated"""
    status: String @source(name: "status", type: "String", subgraph: "petstore")
  ): JSON @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", httpMethod: POST, queryParamArgMap: "\\"{\\\\\\"name\\\\\\":\\\\\\"name\\\\\\",\\\\\\"status\\\\\\":\\\\\\"status\\\\\\"}\\"") @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", httpMethod: POST, queryParamArgMap: "\\"{\\\\\\"name\\\\\\":\\\\\\"name\\\\\\",\\\\\\"status\\\\\\":\\\\\\"status\\\\\\"}\\"") @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", httpMethod: POST, queryParamArgMap: "\\"{\\\\\\"name\\\\\\":\\\\\\"name\\\\\\",\\\\\\"status\\\\\\":\\\\\\"status\\\\\\"}\\"") @source(name: "updatePetWithForm", type: "JSON", subgraph: "petstore") @hidden
  """Deletes a pet"""
  deletePet(
    api_key: String @source(name: "api_key", type: "String", subgraph: "petstore")
    """Pet id to delete"""
    petId: BigInt! @source(name: "petId", type: "BigInt", subgraph: "petstore")
  ): JSON @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", operationSpecificHeaders: "\\"{\\\\\\"api_key\\\\\\":\\\\\\"{args.api_key}\\\\\\"}\\"", httpMethod: DELETE) @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", operationSpecificHeaders: "\\"{\\\\\\"api_key\\\\\\":\\\\\\"{args.api_key}\\\\\\"}\\"", httpMethod: DELETE) @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}", operationSpecificHeaders: "\\"{\\\\\\"api_key\\\\\\":\\\\\\"{args.api_key}\\\\\\"}\\"", httpMethod: DELETE) @source(name: "deletePet", type: "JSON", subgraph: "petstore") @hidden
  """uploads an image"""
  uploadFile(
    """ID of pet to update"""
    petId: BigInt! @source(name: "petId", type: "BigInt", subgraph: "petstore")
    """Additional Metadata"""
    additionalMetadata: String @source(name: "additionalMetadata", type: "String", subgraph: "petstore")
    input: File @source(name: "input", type: "File", subgraph: "petstore")
  ): ApiResponse @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}/uploadImage", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/octet-stream\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST, queryParamArgMap: "\\"{\\\\\\"additionalMetadata\\\\\\":\\\\\\"additionalMetadata\\\\\\"}\\"") @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}/uploadImage", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/octet-stream\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST, queryParamArgMap: "\\"{\\\\\\"additionalMetadata\\\\\\":\\\\\\"additionalMetadata\\\\\\"}\\"") @httpOperation(subgraph: "petstore", path: "/pet/{args.petId}/uploadImage", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/octet-stream\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST, queryParamArgMap: "\\"{\\\\\\"additionalMetadata\\\\\\":\\\\\\"additionalMetadata\\\\\\"}\\"") @source(name: "uploadFile", type: "ApiResponse", subgraph: "petstore") @hidden
  """Place a new order in the store"""
  placeOrder(input: Order_Input @source(name: "input", type: "Order_Input", subgraph: "petstore")): Order @httpOperation(subgraph: "petstore", path: "/store/order", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/store/order", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/store/order", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @source(name: "placeOrder", type: "Order", subgraph: "petstore") @hidden
  """
  For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
  """
  deleteOrder(
    """ID of the order that needs to be deleted"""
    orderId: BigInt! @source(name: "orderId", type: "BigInt", subgraph: "petstore")
  ): JSON @httpOperation(subgraph: "petstore", path: "/store/order/{args.orderId}", httpMethod: DELETE) @httpOperation(subgraph: "petstore", path: "/store/order/{args.orderId}", httpMethod: DELETE) @httpOperation(subgraph: "petstore", path: "/store/order/{args.orderId}", httpMethod: DELETE) @source(name: "deleteOrder", type: "JSON", subgraph: "petstore") @hidden
  """This can only be done by the logged in user."""
  createUser(input: User_Input @source(name: "input", type: "User_Input", subgraph: "petstore")): User @httpOperation(subgraph: "petstore", path: "/user", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/user", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/user", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @source(name: "createUser", type: "User", subgraph: "petstore") @hidden
  """Creates list of users with given input array"""
  createUsersWithListInput(input: [User_Input] @source(name: "input", type: "User_Input", subgraph: "petstore")): User @httpOperation(subgraph: "petstore", path: "/user/createWithList", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/user/createWithList", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @httpOperation(subgraph: "petstore", path: "/user/createWithList", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\",\\\\\\"accept\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: POST) @source(name: "createUsersWithListInput", type: "User", subgraph: "petstore") @hidden
  """This can only be done by the logged in user."""
  updateUser(
    """name that need to be deleted"""
    username: String! @source(name: "username", type: "String", subgraph: "petstore")
    input: User_Input @source(name: "input", type: "User_Input", subgraph: "petstore")
  ): JSON @httpOperation(subgraph: "petstore", path: "/user/{args.username}", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: PUT) @httpOperation(subgraph: "petstore", path: "/user/{args.username}", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: PUT) @httpOperation(subgraph: "petstore", path: "/user/{args.username}", operationSpecificHeaders: "\\"{\\\\\\"Content-Type\\\\\\":\\\\\\"application/json\\\\\\"}\\"", httpMethod: PUT) @source(name: "updateUser", type: "JSON", subgraph: "petstore") @hidden
  """This can only be done by the logged in user."""
  deleteUser(
    """The name that needs to be deleted"""
    username: String! @source(name: "username", type: "String", subgraph: "petstore")
  ): JSON @httpOperation(subgraph: "petstore", path: "/user/{args.username}", httpMethod: DELETE) @httpOperation(subgraph: "petstore", path: "/user/{args.username}", httpMethod: DELETE) @httpOperation(subgraph: "petstore", path: "/user/{args.username}", httpMethod: DELETE) @source(name: "deleteUser", type: "JSON", subgraph: "petstore") @hidden
}

"""Pet object that needs to be added to the store"""
input Pet_Input @source(name: "Pet_Input", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  name: String! @source(name: "name", type: "String!", subgraph: "petstore")
  category: Category_Input @source(name: "category", type: "Category_Input", subgraph: "petstore")
  photoUrls: [String]! @source(name: "photoUrls", type: "[String]!", subgraph: "petstore")
  tags: [Tag_Input] @source(name: "tags", type: "[Tag_Input]", subgraph: "petstore")
  status: mutation_updatePet_status @source(name: "status", type: "mutation_updatePet_status", subgraph: "petstore")
}

input Category_Input @source(name: "Category_Input", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  name: String @source(name: "name", type: "String", subgraph: "petstore")
}

input Tag_Input @source(name: "Tag_Input", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  name: String @source(name: "name", type: "String", subgraph: "petstore")
}

type ApiResponse @source(name: "ApiResponse", subgraph: "petstore") {
  code: Int @source(name: "code", type: "Int", subgraph: "petstore")
  type: String @source(name: "type", type: "String", subgraph: "petstore")
  message: String @source(name: "message", type: "String", subgraph: "petstore")
}

"""The \`File\` scalar type represents a file upload."""
scalar File @source(name: "File", subgraph: "petstore") @source(name: "File", subgraph: "petstore")

input Order_Input @source(name: "Order_Input", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  petId: BigInt @source(name: "petId", type: "BigInt", subgraph: "petstore")
  quantity: Int @source(name: "quantity", type: "Int", subgraph: "petstore")
  shipDate: DateTime @source(name: "shipDate", type: "DateTime", subgraph: "petstore")
  status: mutation_placeOrder_status @source(name: "status", type: "mutation_placeOrder_status", subgraph: "petstore")
  complete: Boolean @source(name: "complete", type: "Boolean", subgraph: "petstore")
}

input User_Input @source(name: "User_Input", subgraph: "petstore") {
  id: BigInt @source(name: "id", type: "BigInt", subgraph: "petstore")
  username: String @source(name: "username", type: "String", subgraph: "petstore")
  firstName: String @source(name: "firstName", type: "String", subgraph: "petstore")
  lastName: String @source(name: "lastName", type: "String", subgraph: "petstore")
  email: EmailAddress @source(name: "email", type: "EmailAddress", subgraph: "petstore")
  password: String @source(name: "password", type: "String", subgraph: "petstore")
  phone: String @source(name: "phone", type: "String", subgraph: "petstore")
  """User Status"""
  userStatus: Int @source(name: "userStatus", type: "Int", subgraph: "petstore")
}

scalar ObjMap @source(name: "ObjMap", subgraph: "petstore") @source(name: "ObjMap", subgraph: "petstore")

enum HTTPMethod @source(name: "HTTPMethod", subgraph: "petstore") {
  GET @source(name: "GET", subgraph: "petstore")
  HEAD @source(name: "HEAD", subgraph: "petstore")
  POST @source(name: "POST", subgraph: "petstore")
  PUT @source(name: "PUT", subgraph: "petstore")
  DELETE @source(name: "DELETE", subgraph: "petstore")
  CONNECT @source(name: "CONNECT", subgraph: "petstore")
  OPTIONS @source(name: "OPTIONS", subgraph: "petstore")
  TRACE @source(name: "TRACE", subgraph: "petstore")
  PATCH @source(name: "PATCH", subgraph: "petstore")
}
"
`;

exports[`should execute GetPet 1`] = `
{
  "data": {
    "getPetById": {
      "__typename": "Pet",
      "id": 1,
      "name": "Cat 1",
      "vaccinated": false,
    },
  },
}
`;
