// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`executes a query 1`] = `
{
  "data": {
    "Me": {
      "AddressInfo": [
        {
          "Address": "P.O. Box 555",
          "City": {
            "CountryRegion": "United States",
            "Name": "Lander",
            "Region": "WY",
          },
        },
      ],
      "FavoriteFeature": "Feature1",
      "FirstName": "April",
      "Gender": "Female",
      "LastName": "Cline",
      "Trips": [
        {
          "Description": "Trip in US",
        },
      ],
      "UserName": "aprilcline",
    },
  },
}
`;

exports[`should compose the appropriate schema 1`] = `
"
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@entityInfo", "@abstractType", "@singularNav", "@pluralNav", "@navProp", "@unboundFunction", "@boundFunction", "@unboundAction", "@boundAction", "@singleton", "@entitySet", "@entitySetByIdentifier", "@entitySetCount", "@createEntitySet", "@deleteEntitySet", "@updateEntitySet", "@merge", "@extraSchemaDefinitionDirective"]
)
{
  query: Query
  mutation: Mutation
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    \`SECURITY\` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    \`EXECUTION\` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  TRIPPIN @join__graph(
    name: "Trippin"
    url: "https://services.odata.org/TripPinRESTierService/(S(qzsyox3345c15qeq305pblvw))/"
  )
}

directive @entityInfo(
  actualFields: [String]
  navigationFields: [String]
  identifierFieldName: String
  identifierFieldTypeRef: String
  isOpenType: Boolean
) on OBJECT | INTERFACE

directive @abstractType(
  entityTypeName: String
  isAbstract: Boolean
  aliasNamespaceMap: [[String]]
  multipleSchemas: Boolean
  namespaces: [String]
) on INTERFACE | OBJECT

directive @singularNav(navigationPropertyName: String)  on FIELD_DEFINITION

directive @pluralNav(navigationPropertyName: String)  on FIELD_DEFINITION

directive @navProp(navigationPropertyName: String)  on FIELD_DEFINITION

directive @unboundFunction(functionName: String)  on FIELD_DEFINITION

directive @boundFunction(functionRef: String)  on FIELD_DEFINITION

directive @unboundAction(actionName: String)  on FIELD_DEFINITION

directive @boundAction(actionRef: String)  on FIELD_DEFINITION

directive @singleton(singletonName: String)  on FIELD_DEFINITION

directive @entitySet(entitySetName: String)  on FIELD_DEFINITION

directive @entitySetByIdentifier(
  entitySetName: String
  identifierFieldName: String
  identifierFieldTypeRef: String
) on FIELD_DEFINITION

directive @entitySetCount(entitySetName: String)  on FIELD_DEFINITION

directive @createEntitySet(entitySetName: String)  on FIELD_DEFINITION

directive @deleteEntitySet(
  entitySetName: String
  identifierFieldName: String
  identifierFieldTypeRef: String
) on FIELD_DEFINITION

directive @updateEntitySet(
  entitySetName: String
  identifierFieldName: String
  identifierFieldTypeRef: String
) on FIELD_DEFINITION

directive @merge(
  subgraph: String
  argsExpr: String
  keyArg: String
  keyField: String
  key: [String!]
  additionalArgs: String
) repeatable on FIELD_DEFINITION

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @join__type(graph: TRIPPIN) 

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @join__type(graph: TRIPPIN)  @specifiedBy(
  url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
)

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar GUID @join__type(graph: TRIPPIN) 

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime @join__type(graph: TRIPPIN) 

"""

    A string representing a duration conforming to the ISO8601 standard,
    such as: P1W1DT13H23M34S
    P is the duration designator (for period) placed at the start of the duration representation.
    Y is the year designator that follows the value for the number of years.
    M is the month designator that follows the value for the number of months.
    W is the week designator that follows the value for the number of weeks.
    D is the day designator that follows the value for the number of days.
    T is the time designator that precedes the time components of the representation.
    H is the hour designator that follows the value for the number of hours.
    M is the minute designator that follows the value for the number of minutes.
    S is the second designator that follows the value for the number of seconds.

    Note the time designator, T, that precedes the time value.

    Matches moment.js, Luxon and DateFns implementations
    ,/. is valid for decimal places and +/- is a valid prefix
  
"""
scalar ISO8601Duration @join__type(graph: TRIPPIN) 

scalar _DirectiveExtensions @join__type(graph: TRIPPIN) 

type Person implements IPerson @entityInfo(
  actualFields: ["UserName", "FirstName", "LastName", "MiddleName", "Gender", "Age", "Emails", "AddressInfo", "HomeAddress", "FavoriteFeature", "Features"]
  navigationFields: ["Friends", "BestFriend", "Trips"]
  isOpenType: false
  identifierFieldName: "UserName"
  identifierFieldTypeRef: "Edm.String"
) @abstractType(
  entityTypeName: "Person"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "IPerson")  {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions) : [Person] @pluralNav(navigationPropertyName: "Friends") 
  FriendsById(id: ID) : Person @singularNav(navigationPropertyName: "Friends") 
  BestFriend: Person @navProp(navigationPropertyName: "BestFriend") 
  Trips(queryOptions: QueryOptions) : [Trip] @pluralNav(navigationPropertyName: "Trips") 
  TripsById(id: ID) : Trip @singularNav(navigationPropertyName: "Trips") 
  GetFavoriteAirline(person: PersonInput) : Airline @boundFunction(functionRef: "Trippin.GetFavoriteAirline") 
  GetFriendsTrips(person: PersonInput, userName: String!) : [Trip] @boundFunction(functionRef: "Trippin.GetFriendsTrips") 
  UpdateLastName(person: PersonInput, lastName: String!) : JSON @boundAction(actionRef: "Trippin.UpdateLastName") 
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!) : JSON @boundAction(actionRef: "Trippin.ShareTrip") 
}

type Airline @entityInfo(
  actualFields: ["AirlineCode", "Name"]
  navigationFields: []
  isOpenType: false
  identifierFieldName: "AirlineCode"
  identifierFieldTypeRef: "Edm.String"
) @join__type(graph: TRIPPIN, key: "AirlineCode")  {
  AirlineCode: String!
  Name: String
}

type Airport @entityInfo(
  actualFields: ["Name", "IcaoCode", "IataCode", "Location"]
  navigationFields: []
  isOpenType: false
  identifierFieldName: "IcaoCode"
  identifierFieldTypeRef: "Edm.String"
) @join__type(graph: TRIPPIN, key: "IcaoCode")  {
  IcaoCode: String!
  Name: String
  IataCode: String
  Location: AirportLocation
}

type Trip @entityInfo(
  actualFields: ["TripId", "ShareId", "Name", "Budget", "Description", "Tags", "StartsAt", "EndsAt"]
  navigationFields: ["PlanItems"]
  isOpenType: false
  identifierFieldName: "TripId"
  identifierFieldTypeRef: "Edm.Int32"
) @join__type(graph: TRIPPIN)  {
  TripId: Int!
  ShareId: GUID!
  Name: String
  Budget: Float!
  Description: String
  Tags: [String]
  StartsAt: DateTime!
  EndsAt: DateTime!
  PlanItems(queryOptions: QueryOptions) : [PlanItem] @pluralNav(navigationPropertyName: "PlanItems") 
  PlanItemsById(id: ID) : PlanItem @singularNav(navigationPropertyName: "PlanItems") 
  GetInvolvedPeople(trip: TripInput) : [Person] @boundFunction(functionRef: "Trippin.GetInvolvedPeople") 
}

type PlanItem implements IPlanItem @entityInfo(
  actualFields: ["PlanItemId", "ConfirmationCode", "StartsAt", "EndsAt", "Duration"]
  navigationFields: []
  isOpenType: false
  identifierFieldName: "PlanItemId"
  identifierFieldTypeRef: "Edm.Int32"
) @abstractType(
  entityTypeName: "PlanItem"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "IPlanItem")  {
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

type Event implements IPlanItem @entityInfo(
  actualFields: ["PlanItemId", "ConfirmationCode", "StartsAt", "EndsAt", "Duration", "OccursAt", "Description"]
  navigationFields: []
  isOpenType: false
  identifierFieldName: "PlanItemId"
  identifierFieldTypeRef: "Edm.Int32"
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "IPlanItem")  {
  OccursAt: EventLocation
  Description: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

type PublicTransportation implements IPublicTransportation & IPlanItem @entityInfo(
  actualFields: ["PlanItemId", "ConfirmationCode", "StartsAt", "EndsAt", "Duration", "SeatNumber"]
  navigationFields: []
  isOpenType: false
  identifierFieldName: "PlanItemId"
  identifierFieldTypeRef: "Edm.Int32"
) @abstractType(
  entityTypeName: "PublicTransportation"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "IPublicTransportation")  @join__implements(graph: TRIPPIN, interface: "IPlanItem")  {
  SeatNumber: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

type Flight implements IPublicTransportation @entityInfo(
  actualFields: ["PlanItemId", "ConfirmationCode", "StartsAt", "EndsAt", "Duration", "SeatNumber", "FlightNumber"]
  navigationFields: ["Airline", "From", "To"]
  isOpenType: false
  identifierFieldName: "PlanItemId"
  identifierFieldTypeRef: "Edm.Int32"
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "IPublicTransportation")  {
  FlightNumber: String
  Airline: Airline @navProp(navigationPropertyName: "Airline") 
  From: Airport @navProp(navigationPropertyName: "From") 
  To: Airport @navProp(navigationPropertyName: "To") 
  SeatNumber: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

type Employee implements IPerson @entityInfo(
  actualFields: ["UserName", "FirstName", "LastName", "MiddleName", "Gender", "Age", "Emails", "AddressInfo", "HomeAddress", "FavoriteFeature", "Features", "Cost"]
  navigationFields: ["Peers"]
  isOpenType: false
  identifierFieldName: "UserName"
  identifierFieldTypeRef: "Edm.String"
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "IPerson")  {
  Cost: BigInt!
  Peers(queryOptions: QueryOptions) : [Person] @pluralNav(navigationPropertyName: "Peers") 
  PeersById(id: ID) : Person @singularNav(navigationPropertyName: "Peers") 
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions) : [Person] @pluralNav(navigationPropertyName: "Friends") 
  FriendsById(id: ID) : Person @singularNav(navigationPropertyName: "Friends") 
  BestFriend: Person @navProp(navigationPropertyName: "BestFriend") 
  Trips(queryOptions: QueryOptions) : [Trip] @pluralNav(navigationPropertyName: "Trips") 
  TripsById(id: ID) : Trip @singularNav(navigationPropertyName: "Trips") 
  GetFavoriteAirline(person: PersonInput) : Airline @boundFunction(functionRef: "Trippin.GetFavoriteAirline") 
  GetFriendsTrips(person: PersonInput, userName: String!) : [Trip] @boundFunction(functionRef: "Trippin.GetFriendsTrips") 
  UpdateLastName(person: PersonInput, lastName: String!) : JSON @boundAction(actionRef: "Trippin.UpdateLastName") 
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!) : JSON @boundAction(actionRef: "Trippin.ShareTrip") 
}

type Manager implements IPerson @entityInfo(
  actualFields: ["UserName", "FirstName", "LastName", "MiddleName", "Gender", "Age", "Emails", "AddressInfo", "HomeAddress", "FavoriteFeature", "Features", "Budget", "BossOffice"]
  navigationFields: ["DirectReports"]
  isOpenType: false
  identifierFieldName: "UserName"
  identifierFieldTypeRef: "Edm.String"
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "IPerson")  {
  Budget: BigInt!
  BossOffice: Location
  DirectReports(queryOptions: QueryOptions) : [Person] @pluralNav(navigationPropertyName: "DirectReports") 
  DirectReportsById(id: ID) : Person @singularNav(navigationPropertyName: "DirectReports") 
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions) : [Person] @pluralNav(navigationPropertyName: "Friends") 
  FriendsById(id: ID) : Person @singularNav(navigationPropertyName: "Friends") 
  BestFriend: Person @navProp(navigationPropertyName: "BestFriend") 
  Trips(queryOptions: QueryOptions) : [Trip] @pluralNav(navigationPropertyName: "Trips") 
  TripsById(id: ID) : Trip @singularNav(navigationPropertyName: "Trips") 
  GetFavoriteAirline(person: PersonInput) : Airline @boundFunction(functionRef: "Trippin.GetFavoriteAirline") 
  GetFriendsTrips(person: PersonInput, userName: String!) : [Trip] @boundFunction(functionRef: "Trippin.GetFriendsTrips") 
  UpdateLastName(person: PersonInput, lastName: String!) : JSON @boundAction(actionRef: "Trippin.UpdateLastName") 
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!) : JSON @boundAction(actionRef: "Trippin.ShareTrip") 
}

type Location implements ILocation @entityInfo(actualFields: ["Address", "City"], navigationFields: [], isOpenType: false)  @abstractType(
  entityTypeName: "Location"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "ILocation")  {
  Address: String
  City: City
}

type City @entityInfo(
  actualFields: ["Name", "CountryRegion", "Region"]
  navigationFields: []
  isOpenType: false
) @join__type(graph: TRIPPIN)  {
  Name: String
  CountryRegion: String
  Region: String
}

type AirportLocation implements ILocation @entityInfo(
  actualFields: ["Address", "City", "Loc"]
  navigationFields: []
  isOpenType: false
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "ILocation")  {
  Loc: String
  Address: String
  City: City
}

type EventLocation implements ILocation @entityInfo(
  actualFields: ["Address", "City", "BuildingInfo"]
  navigationFields: []
  isOpenType: false
) @join__type(graph: TRIPPIN)  @join__implements(graph: TRIPPIN, interface: "ILocation")  {
  BuildingInfo: String
  Address: String
  City: City
}

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{kind: "odata", subgraph: "Trippin", location: "https://services.odata.org/TripPinRESTierService/(S(qzsyox3345c15qeq305pblvw))/", headers: [], options: {batch: "multipart", expandNavProps: true}}]}
) @join__type(graph: TRIPPIN)  {
  GetPersonWithMostFriends: Person @unboundFunction(functionName: "GetPersonWithMostFriends") 
  GetNearestAirport(lat: Float!, lon: Float!) : Airport @unboundFunction(functionName: "GetNearestAirport") 
  Me: Person @singleton(singletonName: "Me") 
  People(queryOptions: QueryOptions) : [IPerson] @entitySet(entitySetName: "People") 
  PeopleByUserName(UserName: String!) : IPerson @entitySetByIdentifier(
    entitySetName: "People"
    identifierFieldName: "UserName"
    identifierFieldTypeRef: "Edm.String"
  )
  PeopleCount(queryOptions: QueryOptions) : Int @entitySetCount(entitySetName: "People") 
  Airlines(queryOptions: QueryOptions) : [Airline] @entitySet(entitySetName: "Airlines") 
  AirlinesByAirlineCode(AirlineCode: String!) : Airline @entitySetByIdentifier(
    entitySetName: "Airlines"
    identifierFieldName: "AirlineCode"
    identifierFieldTypeRef: "Edm.String"
  ) @merge(subgraph: "Trippin", keyField: "AirlineCode", keyArg: "AirlineCode") 
  AirlinesCount(queryOptions: QueryOptions) : Int @entitySetCount(entitySetName: "Airlines") 
  Airports(queryOptions: QueryOptions) : [Airport] @entitySet(entitySetName: "Airports") 
  AirportsByIcaoCode(IcaoCode: String!) : Airport @entitySetByIdentifier(
    entitySetName: "Airports"
    identifierFieldName: "IcaoCode"
    identifierFieldTypeRef: "Edm.String"
  ) @merge(subgraph: "Trippin", keyField: "IcaoCode", keyArg: "IcaoCode") 
  AirportsCount(queryOptions: QueryOptions) : Int @entitySetCount(entitySetName: "Airports") 
}

type Mutation @join__type(graph: TRIPPIN)  {
  ResetDataSource: JSON @unboundAction(actionName: "ResetDataSource") 
  People(queryOptions: QueryOptions) : [IPerson] @entitySet(entitySetName: "People") 
  PeopleByUserName(UserName: String!) : IPerson @entitySetByIdentifier(
    entitySetName: "People"
    identifierFieldName: "UserName"
    identifierFieldTypeRef: "Edm.String"
  )
  createPeople(input: PersonInput) : IPerson @createEntitySet(entitySetName: "People") 
  deletePeopleByUserName(UserName: String!) : JSON @deleteEntitySet(
    entitySetName: "People"
    identifierFieldName: "UserName"
    identifierFieldTypeRef: "Edm.String"
  )
  updatePeopleByUserName(UserName: String!, input: PersonUpdateInput) : IPerson @updateEntitySet(
    entitySetName: "People"
    identifierFieldName: "UserName"
    identifierFieldTypeRef: "Edm.String"
  )
  Airlines(queryOptions: QueryOptions) : [Airline] @entitySet(entitySetName: "Airlines") 
  AirlinesByAirlineCode(AirlineCode: String!) : Airline @entitySetByIdentifier(
    entitySetName: "Airlines"
    identifierFieldName: "AirlineCode"
    identifierFieldTypeRef: "Edm.String"
  ) @merge(subgraph: "Trippin", keyField: "AirlineCode", keyArg: "AirlineCode") 
  createAirlines(input: AirlineInput) : Airline @createEntitySet(entitySetName: "Airlines") 
  deleteAirlinesByAirlineCode(AirlineCode: String!) : JSON @deleteEntitySet(
    entitySetName: "Airlines"
    identifierFieldName: "AirlineCode"
    identifierFieldTypeRef: "Edm.String"
  )
  updateAirlinesByAirlineCode(AirlineCode: String!, input: AirlineUpdateInput) : Airline @updateEntitySet(
    entitySetName: "Airlines"
    identifierFieldName: "AirlineCode"
    identifierFieldTypeRef: "Edm.String"
  )
  Airports(queryOptions: QueryOptions) : [Airport] @entitySet(entitySetName: "Airports") 
  AirportsByIcaoCode(IcaoCode: String!) : Airport @entitySetByIdentifier(
    entitySetName: "Airports"
    identifierFieldName: "IcaoCode"
    identifierFieldTypeRef: "Edm.String"
  ) @merge(subgraph: "Trippin", keyField: "IcaoCode", keyArg: "IcaoCode") 
  createAirports(input: AirportInput) : Airport @createEntitySet(entitySetName: "Airports") 
  deleteAirportsByIcaoCode(IcaoCode: String!) : JSON @deleteEntitySet(
    entitySetName: "Airports"
    identifierFieldName: "IcaoCode"
    identifierFieldTypeRef: "Edm.String"
  )
  updateAirportsByIcaoCode(IcaoCode: String!, input: AirportUpdateInput) : Airport @updateEntitySet(
    entitySetName: "Airports"
    identifierFieldName: "IcaoCode"
    identifierFieldTypeRef: "Edm.String"
  )
}

interface IPerson @entityInfo(
  actualFields: ["UserName", "FirstName", "LastName", "MiddleName", "Gender", "Age", "Emails", "AddressInfo", "HomeAddress", "FavoriteFeature", "Features"]
  navigationFields: ["Friends", "BestFriend", "Trips"]
  isOpenType: false
  identifierFieldName: "UserName"
  identifierFieldTypeRef: "Edm.String"
) @abstractType(
  entityTypeName: "Person"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [Location]
  HomeAddress: Location
  FavoriteFeature: Feature!
  Features: [Feature]!
  Friends(queryOptions: QueryOptions) : [Person] @pluralNav(navigationPropertyName: "Friends") 
  FriendsById(id: ID) : Person @singularNav(navigationPropertyName: "Friends") 
  BestFriend: Person @navProp(navigationPropertyName: "BestFriend") 
  Trips(queryOptions: QueryOptions) : [Trip] @pluralNav(navigationPropertyName: "Trips") 
  TripsById(id: ID) : Trip @singularNav(navigationPropertyName: "Trips") 
  GetFavoriteAirline(person: PersonInput) : Airline @boundFunction(functionRef: "Trippin.GetFavoriteAirline") 
  GetFriendsTrips(person: PersonInput, userName: String!) : [Trip] @boundFunction(functionRef: "Trippin.GetFriendsTrips") 
  UpdateLastName(person: PersonInput, lastName: String!) : JSON @boundAction(actionRef: "Trippin.UpdateLastName") 
  ShareTrip(personInstance: PersonInput, userName: String!, tripId: Int!) : JSON @boundAction(actionRef: "Trippin.ShareTrip") 
}

interface IPlanItem @entityInfo(
  actualFields: ["PlanItemId", "ConfirmationCode", "StartsAt", "EndsAt", "Duration"]
  navigationFields: []
  isOpenType: false
  identifierFieldName: "PlanItemId"
  identifierFieldTypeRef: "Edm.Int32"
) @abstractType(
  entityTypeName: "PlanItem"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  {
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

interface IPublicTransportation @entityInfo(
  actualFields: ["PlanItemId", "ConfirmationCode", "StartsAt", "EndsAt", "Duration", "SeatNumber"]
  navigationFields: []
  isOpenType: false
  identifierFieldName: "PlanItemId"
  identifierFieldTypeRef: "Edm.Int32"
) @abstractType(
  entityTypeName: "PublicTransportation"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  {
  SeatNumber: String
  PlanItemId: Int!
  ConfirmationCode: String
  StartsAt: DateTime!
  EndsAt: DateTime!
  Duration: ISO8601Duration!
}

interface ILocation @entityInfo(actualFields: ["Address", "City"], navigationFields: [], isOpenType: false)  @abstractType(
  entityTypeName: "Location"
  isAbstract: false
  aliasNamespaceMap: []
  multipleSchemas: false
  namespaces: ["Trippin"]
) @join__type(graph: TRIPPIN)  {
  Address: String
  City: City
}

enum PersonGender @join__type(graph: TRIPPIN)  {
  Male @join__enumValue(graph: TRIPPIN) 
  Female @join__enumValue(graph: TRIPPIN) 
  Unknown @join__enumValue(graph: TRIPPIN) 
}

enum Feature @join__type(graph: TRIPPIN)  {
  Feature1 @join__enumValue(graph: TRIPPIN) 
  Feature2 @join__enumValue(graph: TRIPPIN) 
  Feature3 @join__enumValue(graph: TRIPPIN) 
  Feature4 @join__enumValue(graph: TRIPPIN) 
}

enum InlineCount @join__type(graph: TRIPPIN)  {
  """
  The OData MUST include a count of the number of entities in the collection identified by the URI (after applying any $filter System Query Options present on the URI)
  """
  allpages @join__enumValue(graph: TRIPPIN) 
  """
  The OData service MUST NOT include a count in the response. This is equivalence to a URI that does not include a $inlinecount query string parameter.
  """
  none @join__enumValue(graph: TRIPPIN) 
}

input QueryOptions @join__type(graph: TRIPPIN)  {
  """
  A data service URI with a $orderby System Query Option specifies an expression for determining what values are used to order the collection of Entries identified by the Resource Path section of the URI. This query option is only supported when the resource path identifies a Collection of Entries.
  """
  orderby: String
  """
  A data service URI with a $top System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. This subset is formed by selecting only the first N items of the set, where N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed.
  """
  top: Int
  """
  A data service URI with a $skip System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. That subset is defined by seeking N Entries into the Collection and selecting only the remaining Entries (starting with Entry N+1). N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed.
  """
  skip: Int
  """
  A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option.
  """
  filter: String
  """
  A URI with a $inlinecount System Query Option specifies that the response to the request includes a count of the number of Entries in the Collection of Entries identified by the Resource Path section of the URI. The count must be calculated after applying any $filter System Query Options present in the URI. The set of valid values for the $inlinecount query option are shown in the table below. If a value other than one shown in Table 4 is specified the URI is considered malformed.
  """
  inlinecount: InlineCount
  count: Boolean
}

input PersonInput @join__type(graph: TRIPPIN)  {
  UserName: String!
  FirstName: String!
  LastName: String
  MiddleName: String
  Gender: PersonGender!
  Age: BigInt
  Emails: [String]
  AddressInfo: [LocationInput]
  HomeAddress: LocationInput
  FavoriteFeature: Feature!
  Features: [Feature]!
}

input LocationInput @join__type(graph: TRIPPIN)  {
  Address: String
  City: CityInput
}

input CityInput @join__type(graph: TRIPPIN)  {
  Name: String
  CountryRegion: String
  Region: String
}

input TripInput @join__type(graph: TRIPPIN)  {
  TripId: Int!
  ShareId: GUID!
  Name: String
  Budget: Float!
  Description: String
  Tags: [String]
  StartsAt: DateTime!
  EndsAt: DateTime!
}

input PersonUpdateInput @join__type(graph: TRIPPIN)  {
  UserName: String
  FirstName: String
  LastName: String
  MiddleName: String
  Gender: PersonGender
  Age: BigInt
  Emails: [String]
  AddressInfo: [LocationInput]
  HomeAddress: LocationInput
  FavoriteFeature: Feature
  Features: [Feature]
}

input AirlineInput @join__type(graph: TRIPPIN)  {
  AirlineCode: String!
  Name: String
}

input AirlineUpdateInput @join__type(graph: TRIPPIN)  {
  AirlineCode: String
  Name: String
}

input AirportInput @join__type(graph: TRIPPIN)  {
  Name: String
  IcaoCode: String!
  IataCode: String
  Location: AirportLocationInput
}

input AirportLocationInput @join__type(graph: TRIPPIN)  {
  Loc: String
  Address: String
  City: CityInput
}

input AirportUpdateInput @join__type(graph: TRIPPIN)  {
  Name: String
  IcaoCode: String
  IataCode: String
  Location: AirportLocationInput
}
    
"
`;
