// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@transport", "@mysqlSelect", "@mysqlInsert", "@mysqlUpdate", "@mysqlDelete", "@mysqlTableForeign", "@mysqlCount", "@extraSchemaDefinitionDirective"]
)
{
  query: Query
  mutation: Mutation
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    \`SECURITY\` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    \`EXECUTION\` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  RFAM @join__graph(name: "Rfam", url: "mysql://rfamro@mysql-rfam-public.ebi.ac.uk:4497/Rfam") 
}

directive @transport(subgraph: String, kind: String, location: String)  repeatable on SCHEMA

directive @mysqlSelect(subgraph: String, table: String, columnMap: [[String]])  repeatable on FIELD_DEFINITION

directive @mysqlInsert(subgraph: String, table: String, primaryKeys: [String])  repeatable on FIELD_DEFINITION

directive @mysqlUpdate(subgraph: String, table: String, columnMap: [[String]])  repeatable on FIELD_DEFINITION

directive @mysqlDelete(subgraph: String, table: String)  repeatable on FIELD_DEFINITION

directive @mysqlTableForeign(subgraph: String, columnName: String)  repeatable on FIELD_DEFINITION

directive @mysqlCount(subgraph: String, table: String)  repeatable on FIELD_DEFINITION

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @join__type(graph: RFAM) 

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime @join__type(graph: RFAM) 

"""
The javascript \`Date\` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp @join__type(graph: RFAM) 

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date @join__type(graph: RFAM) 

scalar _DirectiveExtensions @join__type(graph: RFAM) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{subgraph: "Rfam", kind: "mysql", location: "mysql://rfamro@mysql-rfam-public.ebi.ac.uk:4497/Rfam"}]}
) @join__type(graph: RFAM)  {
  _annotated_file(
    limit: Int
    offset: Int
    where: _annotated_file_WhereInput
    orderBy: _annotated_file_OrderByInput
  ): [_annotated_file] @mysqlSelect(subgraph: "Rfam", table: "_annotated_file") 
  count__annotated_file(where: _annotated_file_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "_annotated_file") 
  _family_file(
    limit: Int
    offset: Int
    where: _family_file_WhereInput
    orderBy: _family_file_OrderByInput
  ): [_family_file] @mysqlSelect(subgraph: "Rfam", table: "_family_file") 
  count__family_file(where: _family_file_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "_family_file") 
  _genome_data(
    limit: Int
    offset: Int
    where: _genome_data_WhereInput
    orderBy: _genome_data_OrderByInput
  ): [_genome_data] @mysqlSelect(subgraph: "Rfam", table: "_genome_data") 
  count__genome_data(where: _genome_data_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "_genome_data") 
  _lock(limit: Int, offset: Int, where: _lock_WhereInput, orderBy: _lock_OrderByInput) : [_lock] @mysqlSelect(subgraph: "Rfam", table: "_lock") 
  count__lock(where: _lock_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "_lock") 
  _overlap(
    limit: Int
    offset: Int
    where: _overlap_WhereInput
    orderBy: _overlap_OrderByInput
  ): [_overlap] @mysqlSelect(subgraph: "Rfam", table: "_overlap") 
  count__overlap(where: _overlap_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "_overlap") 
  _overlap_membership(
    limit: Int
    offset: Int
    where: _overlap_membership_WhereInput
    orderBy: _overlap_membership_OrderByInput
  ): [_overlap_membership] @mysqlSelect(subgraph: "Rfam", table: "_overlap_membership") 
  count__overlap_membership(where: _overlap_membership_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "_overlap_membership") 
  _post_process(
    limit: Int
    offset: Int
    where: _post_process_WhereInput
    orderBy: _post_process_OrderByInput
  ): [_post_process] @mysqlSelect(subgraph: "Rfam", table: "_post_process") 
  count__post_process(where: _post_process_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "_post_process") 
  alignment_and_tree(
    limit: Int
    offset: Int
    where: alignment_and_tree_WhereInput
    orderBy: alignment_and_tree_OrderByInput
  ): [alignment_and_tree] @mysqlSelect(subgraph: "Rfam", table: "alignment_and_tree") 
  count_alignment_and_tree(where: alignment_and_tree_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "alignment_and_tree") 
  author(
    limit: Int
    offset: Int
    where: author_WhereInput
    orderBy: author_OrderByInput
  ): [author] @mysqlSelect(subgraph: "Rfam", table: "author") 
  count_author(where: author_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "author") 
  clan(limit: Int, offset: Int, where: clan_WhereInput, orderBy: clan_OrderByInput) : [clan] @mysqlSelect(subgraph: "Rfam", table: "clan") 
  count_clan(where: clan_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "clan") 
  clan_database_link(
    limit: Int
    offset: Int
    where: clan_database_link_WhereInput
    orderBy: clan_database_link_OrderByInput
  ): [clan_database_link] @mysqlSelect(subgraph: "Rfam", table: "clan_database_link") 
  count_clan_database_link(where: clan_database_link_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "clan_database_link") 
  clan_literature_reference(
    limit: Int
    offset: Int
    where: clan_literature_reference_WhereInput
    orderBy: clan_literature_reference_OrderByInput
  ): [clan_literature_reference] @mysqlSelect(subgraph: "Rfam", table: "clan_literature_reference") 
  count_clan_literature_reference(where: clan_literature_reference_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "clan_literature_reference") 
  clan_membership(
    limit: Int
    offset: Int
    where: clan_membership_WhereInput
    orderBy: clan_membership_OrderByInput
  ): [clan_membership] @mysqlSelect(subgraph: "Rfam", table: "clan_membership") 
  count_clan_membership(where: clan_membership_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "clan_membership") 
  database_link(
    limit: Int
    offset: Int
    where: database_link_WhereInput
    orderBy: database_link_OrderByInput
  ): [database_link] @mysqlSelect(subgraph: "Rfam", table: "database_link") 
  count_database_link(where: database_link_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "database_link") 
  db_version(
    limit: Int
    offset: Int
    where: db_version_WhereInput
    orderBy: db_version_OrderByInput
  ): [db_version] @mysqlSelect(subgraph: "Rfam", table: "db_version") 
  count_db_version(where: db_version_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "db_version") 
  dead_clan(
    limit: Int
    offset: Int
    where: dead_clan_WhereInput
    orderBy: dead_clan_OrderByInput
  ): [dead_clan] @mysqlSelect(subgraph: "Rfam", table: "dead_clan") 
  count_dead_clan(where: dead_clan_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "dead_clan") 
  dead_family(
    limit: Int
    offset: Int
    where: dead_family_WhereInput
    orderBy: dead_family_OrderByInput
  ): [dead_family] @mysqlSelect(subgraph: "Rfam", table: "dead_family") 
  count_dead_family(where: dead_family_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "dead_family") 
  ensembl_names(
    limit: Int
    offset: Int
    where: ensembl_names_WhereInput
    orderBy: ensembl_names_OrderByInput
  ): [ensembl_names] @mysqlSelect(subgraph: "Rfam", table: "ensembl_names") 
  count_ensembl_names(where: ensembl_names_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "ensembl_names") 
  family(
    limit: Int
    offset: Int
    where: family_WhereInput
    orderBy: family_OrderByInput
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family") 
  count_family(where: family_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "family") 
  family_author(
    limit: Int
    offset: Int
    where: family_author_WhereInput
    orderBy: family_author_OrderByInput
  ): [family_author] @mysqlSelect(subgraph: "Rfam", table: "family_author") 
  count_family_author(where: family_author_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "family_author") 
  family_literature_reference(
    limit: Int
    offset: Int
    where: family_literature_reference_WhereInput
    orderBy: family_literature_reference_OrderByInput
  ): [family_literature_reference] @mysqlSelect(subgraph: "Rfam", table: "family_literature_reference") 
  count_family_literature_reference(where: family_literature_reference_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "family_literature_reference") 
  family_long(
    limit: Int
    offset: Int
    where: family_long_WhereInput
    orderBy: family_long_OrderByInput
  ): [family_long] @mysqlSelect(subgraph: "Rfam", table: "family_long") 
  count_family_long(where: family_long_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "family_long") 
  family_ncbi(
    limit: Int
    offset: Int
    where: family_ncbi_WhereInput
    orderBy: family_ncbi_OrderByInput
  ): [family_ncbi] @mysqlSelect(subgraph: "Rfam", table: "family_ncbi") 
  count_family_ncbi(where: family_ncbi_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "family_ncbi") 
  features(
    limit: Int
    offset: Int
    where: features_WhereInput
    orderBy: features_OrderByInput
  ): [features] @mysqlSelect(subgraph: "Rfam", table: "features") 
  count_features(where: features_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "features") 
  full_region(
    limit: Int
    offset: Int
    where: full_region_WhereInput
    orderBy: full_region_OrderByInput
  ): [full_region] @mysqlSelect(subgraph: "Rfam", table: "full_region") 
  count_full_region(where: full_region_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "full_region") 
  genome(
    limit: Int
    offset: Int
    where: genome_WhereInput
    orderBy: genome_OrderByInput
  ): [genome] @mysqlSelect(subgraph: "Rfam", table: "genome") 
  count_genome(where: genome_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "genome") 
  genome_temp(
    limit: Int
    offset: Int
    where: genome_temp_WhereInput
    orderBy: genome_temp_OrderByInput
  ): [genome_temp] @mysqlSelect(subgraph: "Rfam", table: "genome_temp") 
  count_genome_temp(where: genome_temp_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "genome_temp") 
  genseq(
    limit: Int
    offset: Int
    where: genseq_WhereInput
    orderBy: genseq_OrderByInput
  ): [genseq] @mysqlSelect(subgraph: "Rfam", table: "genseq") 
  count_genseq(where: genseq_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "genseq") 
  genseq_temp(
    limit: Int
    offset: Int
    where: genseq_temp_WhereInput
    orderBy: genseq_temp_OrderByInput
  ): [genseq_temp] @mysqlSelect(subgraph: "Rfam", table: "genseq_temp") 
  count_genseq_temp(where: genseq_temp_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "genseq_temp") 
  html_alignment(
    limit: Int
    offset: Int
    where: html_alignment_WhereInput
    orderBy: html_alignment_OrderByInput
  ): [html_alignment] @mysqlSelect(subgraph: "Rfam", table: "html_alignment") 
  count_html_alignment(where: html_alignment_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "html_alignment") 
  keywords(
    limit: Int
    offset: Int
    where: keywords_WhereInput
    orderBy: keywords_OrderByInput
  ): [keywords] @mysqlSelect(subgraph: "Rfam", table: "keywords") 
  count_keywords(where: keywords_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "keywords") 
  literature_reference(
    limit: Int
    offset: Int
    where: literature_reference_WhereInput
    orderBy: literature_reference_OrderByInput
  ): [literature_reference] @mysqlSelect(subgraph: "Rfam", table: "literature_reference") 
  count_literature_reference(where: literature_reference_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "literature_reference") 
  matches_and_fasta(
    limit: Int
    offset: Int
    where: matches_and_fasta_WhereInput
    orderBy: matches_and_fasta_OrderByInput
  ): [matches_and_fasta] @mysqlSelect(subgraph: "Rfam", table: "matches_and_fasta") 
  count_matches_and_fasta(where: matches_and_fasta_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "matches_and_fasta") 
  motif(limit: Int, offset: Int, where: motif_WhereInput, orderBy: motif_OrderByInput) : [motif] @mysqlSelect(subgraph: "Rfam", table: "motif") 
  count_motif(where: motif_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif") 
  motif_database_link(
    limit: Int
    offset: Int
    where: motif_database_link_WhereInput
    orderBy: motif_database_link_OrderByInput
  ): [motif_database_link] @mysqlSelect(subgraph: "Rfam", table: "motif_database_link") 
  count_motif_database_link(where: motif_database_link_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_database_link") 
  motif_family_stats(
    limit: Int
    offset: Int
    where: motif_family_stats_WhereInput
    orderBy: motif_family_stats_OrderByInput
  ): [motif_family_stats] @mysqlSelect(subgraph: "Rfam", table: "motif_family_stats") 
  count_motif_family_stats(where: motif_family_stats_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_family_stats") 
  motif_file(
    limit: Int
    offset: Int
    where: motif_file_WhereInput
    orderBy: motif_file_OrderByInput
  ): [motif_file] @mysqlSelect(subgraph: "Rfam", table: "motif_file") 
  count_motif_file(where: motif_file_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_file") 
  motif_literature(
    limit: Int
    offset: Int
    where: motif_literature_WhereInput
    orderBy: motif_literature_OrderByInput
  ): [motif_literature] @mysqlSelect(subgraph: "Rfam", table: "motif_literature") 
  count_motif_literature(where: motif_literature_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_literature") 
  motif_matches(
    limit: Int
    offset: Int
    where: motif_matches_WhereInput
    orderBy: motif_matches_OrderByInput
  ): [motif_matches] @mysqlSelect(subgraph: "Rfam", table: "motif_matches") 
  count_motif_matches(where: motif_matches_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_matches") 
  motif_old(
    limit: Int
    offset: Int
    where: motif_old_WhereInput
    orderBy: motif_old_OrderByInput
  ): [motif_old] @mysqlSelect(subgraph: "Rfam", table: "motif_old") 
  count_motif_old(where: motif_old_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_old") 
  motif_pdb(
    limit: Int
    offset: Int
    where: motif_pdb_WhereInput
    orderBy: motif_pdb_OrderByInput
  ): [motif_pdb] @mysqlSelect(subgraph: "Rfam", table: "motif_pdb") 
  count_motif_pdb(where: motif_pdb_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_pdb") 
  motif_ss_image(
    limit: Int
    offset: Int
    where: motif_ss_image_WhereInput
    orderBy: motif_ss_image_OrderByInput
  ): [motif_ss_image] @mysqlSelect(subgraph: "Rfam", table: "motif_ss_image") 
  count_motif_ss_image(where: motif_ss_image_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "motif_ss_image") 
  pdb(limit: Int, offset: Int, where: pdb_WhereInput, orderBy: pdb_OrderByInput) : [pdb] @mysqlSelect(subgraph: "Rfam", table: "pdb") 
  count_pdb(where: pdb_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "pdb") 
  pdb_full_region(
    limit: Int
    offset: Int
    where: pdb_full_region_WhereInput
    orderBy: pdb_full_region_OrderByInput
  ): [pdb_full_region] @mysqlSelect(subgraph: "Rfam", table: "pdb_full_region") 
  count_pdb_full_region(where: pdb_full_region_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "pdb_full_region") 
  pdb_full_region_old(
    limit: Int
    offset: Int
    where: pdb_full_region_old_WhereInput
    orderBy: pdb_full_region_old_OrderByInput
  ): [pdb_full_region_old] @mysqlSelect(subgraph: "Rfam", table: "pdb_full_region_old") 
  count_pdb_full_region_old(where: pdb_full_region_old_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "pdb_full_region_old") 
  pdb_rfam_reg(
    limit: Int
    offset: Int
    where: pdb_rfam_reg_WhereInput
    orderBy: pdb_rfam_reg_OrderByInput
  ): [pdb_rfam_reg] @mysqlSelect(subgraph: "Rfam", table: "pdb_rfam_reg") 
  count_pdb_rfam_reg(where: pdb_rfam_reg_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "pdb_rfam_reg") 
  pdb_sequence(
    limit: Int
    offset: Int
    where: pdb_sequence_WhereInput
    orderBy: pdb_sequence_OrderByInput
  ): [pdb_sequence] @mysqlSelect(subgraph: "Rfam", table: "pdb_sequence") 
  count_pdb_sequence(where: pdb_sequence_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "pdb_sequence") 
  processed_data(
    limit: Int
    offset: Int
    where: processed_data_WhereInput
    orderBy: processed_data_OrderByInput
  ): [processed_data] @mysqlSelect(subgraph: "Rfam", table: "processed_data") 
  count_processed_data(where: processed_data_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "processed_data") 
  pseudoknot(
    limit: Int
    offset: Int
    where: pseudoknot_WhereInput
    orderBy: pseudoknot_OrderByInput
  ): [pseudoknot] @mysqlSelect(subgraph: "Rfam", table: "pseudoknot") 
  count_pseudoknot(where: pseudoknot_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "pseudoknot") 
  refseq(
    limit: Int
    offset: Int
    where: refseq_WhereInput
    orderBy: refseq_OrderByInput
  ): [refseq] @mysqlSelect(subgraph: "Rfam", table: "refseq") 
  count_refseq(where: refseq_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "refseq") 
  refseq_full_region(
    limit: Int
    offset: Int
    where: refseq_full_region_WhereInput
    orderBy: refseq_full_region_OrderByInput
  ): [refseq_full_region] @mysqlSelect(subgraph: "Rfam", table: "refseq_full_region") 
  count_refseq_full_region(where: refseq_full_region_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "refseq_full_region") 
  rfamseq(
    limit: Int
    offset: Int
    where: rfamseq_WhereInput
    orderBy: rfamseq_OrderByInput
  ): [rfamseq] @mysqlSelect(subgraph: "Rfam", table: "rfamseq") 
  count_rfamseq(where: rfamseq_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "rfamseq") 
  rfamseq_temp(
    limit: Int
    offset: Int
    where: rfamseq_temp_WhereInput
    orderBy: rfamseq_temp_OrderByInput
  ): [rfamseq_temp] @mysqlSelect(subgraph: "Rfam", table: "rfamseq_temp") 
  count_rfamseq_temp(where: rfamseq_temp_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "rfamseq_temp") 
  rnacentral_matches(
    limit: Int
    offset: Int
    where: rnacentral_matches_WhereInput
    orderBy: rnacentral_matches_OrderByInput
  ): [rnacentral_matches] @mysqlSelect(subgraph: "Rfam", table: "rnacentral_matches") 
  count_rnacentral_matches(where: rnacentral_matches_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "rnacentral_matches") 
  rscape_annotations(
    limit: Int
    offset: Int
    where: rscape_annotations_WhereInput
    orderBy: rscape_annotations_OrderByInput
  ): [rscape_annotations] @mysqlSelect(subgraph: "Rfam", table: "rscape_annotations") 
  count_rscape_annotations(where: rscape_annotations_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "rscape_annotations") 
  secondary_structure_image(
    limit: Int
    offset: Int
    where: secondary_structure_image_WhereInput
    orderBy: secondary_structure_image_OrderByInput
  ): [secondary_structure_image] @mysqlSelect(subgraph: "Rfam", table: "secondary_structure_image") 
  count_secondary_structure_image(where: secondary_structure_image_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "secondary_structure_image") 
  seed_region(
    limit: Int
    offset: Int
    where: seed_region_WhereInput
    orderBy: seed_region_OrderByInput
  ): [seed_region] @mysqlSelect(subgraph: "Rfam", table: "seed_region") 
  count_seed_region(where: seed_region_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "seed_region") 
  sunburst(
    limit: Int
    offset: Int
    where: sunburst_WhereInput
    orderBy: sunburst_OrderByInput
  ): [sunburst] @mysqlSelect(subgraph: "Rfam", table: "sunburst") 
  count_sunburst(where: sunburst_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "sunburst") 
  taxonomic_tree(
    limit: Int
    offset: Int
    where: taxonomic_tree_WhereInput
    orderBy: taxonomic_tree_OrderByInput
  ): [taxonomic_tree] @mysqlSelect(subgraph: "Rfam", table: "taxonomic_tree") 
  count_taxonomic_tree(where: taxonomic_tree_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "taxonomic_tree") 
  taxonomy(
    limit: Int
    offset: Int
    where: taxonomy_WhereInput
    orderBy: taxonomy_OrderByInput
  ): [taxonomy] @mysqlSelect(subgraph: "Rfam", table: "taxonomy") 
  count_taxonomy(where: taxonomy_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "taxonomy") 
  taxonomy_websearch(
    limit: Int
    offset: Int
    where: taxonomy_websearch_WhereInput
    orderBy: taxonomy_websearch_OrderByInput
  ): [taxonomy_websearch] @mysqlSelect(subgraph: "Rfam", table: "taxonomy_websearch") 
  count_taxonomy_websearch(where: taxonomy_websearch_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "taxonomy_websearch") 
  version(
    limit: Int
    offset: Int
    where: version_WhereInput
    orderBy: version_OrderByInput
  ): [version] @mysqlSelect(subgraph: "Rfam", table: "version") 
  count_version(where: version_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "version") 
  wikitext(
    limit: Int
    offset: Int
    where: wikitext_WhereInput
    orderBy: wikitext_OrderByInput
  ): [wikitext] @mysqlSelect(subgraph: "Rfam", table: "wikitext") 
  count_wikitext(where: wikitext_WhereInput) : Int @mysqlCount(subgraph: "Rfam", table: "wikitext") 
}

type _annotated_file @join__type(graph: RFAM)  {
  rfam_acc: String!
  seed: String!
  cm: String!
  full: String
}

type _family_file @join__type(graph: RFAM)  {
  rfam_acc: String!
  seed: String!
  cm: String!
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type family @join__type(graph: RFAM)  {
  rfam_acc: String!
  rfam_id: String!
  auto_wiki: Int!
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  comment: String
  previous_id: String
  cmbuild: String
  cmcalibrate: String
  cmsearch: String
  num_seed: BigInt
  num_full: BigInt
  num_genome_seq: BigInt
  num_refseq: BigInt
  type: String
  structure_source: String
  number_of_species: BigInt
  number_3d_structures: Int
  num_pseudonokts: Int
  tax_seed: String
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  created: DateTime!
  updated: Timestamp!
  _family_file(
    limit: Int
    offset: Int
    where: _family_file_WhereInput
    orderBy: _family_file_OrderByInput
  ): [_family_file] @mysqlSelect(
    subgraph: "Rfam"
    table: "_family_file"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  _overlap_membership(
    limit: Int
    offset: Int
    where: _overlap_membership_WhereInput
    orderBy: _overlap_membership_OrderByInput
  ): [_overlap_membership] @mysqlSelect(
    subgraph: "Rfam"
    table: "_overlap_membership"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  _post_process(
    limit: Int
    offset: Int
    where: _post_process_WhereInput
    orderBy: _post_process_OrderByInput
  ): [_post_process] @mysqlSelect(
    subgraph: "Rfam"
    table: "_post_process"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  alignment_and_tree(
    limit: Int
    offset: Int
    where: alignment_and_tree_WhereInput
    orderBy: alignment_and_tree_OrderByInput
  ): [alignment_and_tree] @mysqlSelect(
    subgraph: "Rfam"
    table: "alignment_and_tree"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  clan_membership(
    limit: Int
    offset: Int
    where: clan_membership_WhereInput
    orderBy: clan_membership_OrderByInput
  ): [clan_membership] @mysqlSelect(
    subgraph: "Rfam"
    table: "clan_membership"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  database_link(
    limit: Int
    offset: Int
    where: database_link_WhereInput
    orderBy: database_link_OrderByInput
  ): [database_link] @mysqlSelect(
    subgraph: "Rfam"
    table: "database_link"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  wikitext(
    where: wikitext_WhereInput
    orderBy: wikitext_OrderByInput
    limit: Int
    offset: Int
  ): [wikitext] @mysqlSelect(subgraph: "Rfam", table: "wikitext", columnMap: [["auto_wiki", "auto_wiki"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "auto_wiki") 
  family_literature_reference(
    limit: Int
    offset: Int
    where: family_literature_reference_WhereInput
    orderBy: family_literature_reference_OrderByInput
  ): [family_literature_reference] @mysqlSelect(
    subgraph: "Rfam"
    table: "family_literature_reference"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  family_long(
    limit: Int
    offset: Int
    where: family_long_WhereInput
    orderBy: family_long_OrderByInput
  ): [family_long] @mysqlSelect(subgraph: "Rfam", table: "family_long", columnMap: [["rfam_acc", "rfam_acc"]]) 
  family_ncbi(
    limit: Int
    offset: Int
    where: family_ncbi_WhereInput
    orderBy: family_ncbi_OrderByInput
  ): [family_ncbi] @mysqlSelect(subgraph: "Rfam", table: "family_ncbi", columnMap: [["rfam_acc", "rfam_acc"]]) 
  full_region(
    limit: Int
    offset: Int
    where: full_region_WhereInput
    orderBy: full_region_OrderByInput
  ): [full_region] @mysqlSelect(subgraph: "Rfam", table: "full_region", columnMap: [["rfam_acc", "rfam_acc"]]) 
  html_alignment(
    limit: Int
    offset: Int
    where: html_alignment_WhereInput
    orderBy: html_alignment_OrderByInput
  ): [html_alignment] @mysqlSelect(
    subgraph: "Rfam"
    table: "html_alignment"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  matches_and_fasta(
    limit: Int
    offset: Int
    where: matches_and_fasta_WhereInput
    orderBy: matches_and_fasta_OrderByInput
  ): [matches_and_fasta] @mysqlSelect(
    subgraph: "Rfam"
    table: "matches_and_fasta"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  motif_family_stats(
    limit: Int
    offset: Int
    where: motif_family_stats_WhereInput
    orderBy: motif_family_stats_OrderByInput
  ): [motif_family_stats] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_family_stats"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  motif_matches(
    limit: Int
    offset: Int
    where: motif_matches_WhereInput
    orderBy: motif_matches_OrderByInput
  ): [motif_matches] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_matches"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  motif_ss_image(
    limit: Int
    offset: Int
    where: motif_ss_image_WhereInput
    orderBy: motif_ss_image_OrderByInput
  ): [motif_ss_image] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_ss_image"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  pdb_rfam_reg(
    limit: Int
    offset: Int
    where: pdb_rfam_reg_WhereInput
    orderBy: pdb_rfam_reg_OrderByInput
  ): [pdb_rfam_reg] @mysqlSelect(
    subgraph: "Rfam"
    table: "pdb_rfam_reg"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  processed_data(
    limit: Int
    offset: Int
    where: processed_data_WhereInput
    orderBy: processed_data_OrderByInput
  ): [processed_data] @mysqlSelect(
    subgraph: "Rfam"
    table: "processed_data"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  pseudoknot(
    limit: Int
    offset: Int
    where: pseudoknot_WhereInput
    orderBy: pseudoknot_OrderByInput
  ): [pseudoknot] @mysqlSelect(subgraph: "Rfam", table: "pseudoknot", columnMap: [["rfam_acc", "rfam_acc"]]) 
  refseq_full_region(
    limit: Int
    offset: Int
    where: refseq_full_region_WhereInput
    orderBy: refseq_full_region_OrderByInput
  ): [refseq_full_region] @mysqlSelect(
    subgraph: "Rfam"
    table: "refseq_full_region"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  secondary_structure_image(
    limit: Int
    offset: Int
    where: secondary_structure_image_WhereInput
    orderBy: secondary_structure_image_OrderByInput
  ): [secondary_structure_image] @mysqlSelect(
    subgraph: "Rfam"
    table: "secondary_structure_image"
    columnMap: [["rfam_acc", "rfam_acc"]]
  )
  seed_region(
    limit: Int
    offset: Int
    where: seed_region_WhereInput
    orderBy: seed_region_OrderByInput
  ): [seed_region] @mysqlSelect(subgraph: "Rfam", table: "seed_region", columnMap: [["rfam_acc", "rfam_acc"]]) 
  sunburst(
    limit: Int
    offset: Int
    where: sunburst_WhereInput
    orderBy: sunburst_OrderByInput
  ): [sunburst] @mysqlSelect(subgraph: "Rfam", table: "sunburst", columnMap: [["rfam_acc", "rfam_acc"]]) 
}

type _overlap_membership @join__type(graph: RFAM)  {
  rfam_acc: String!
  auto_overlap: Int!
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  _overlap(
    where: _overlap_WhereInput
    orderBy: _overlap_OrderByInput
    limit: Int
    offset: Int
  ): [_overlap] @mysqlSelect(
    subgraph: "Rfam"
    table: "_overlap"
    columnMap: [["auto_overlap", "auto_overlap"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "auto_overlap") 
}

type _overlap @join__type(graph: RFAM)  {
  auto_overlap: Int!
  id: String
  description: String
  author: String
  comment: String
  _overlap_membership(
    limit: Int
    offset: Int
    where: _overlap_membership_WhereInput
    orderBy: _overlap_membership_OrderByInput
  ): [_overlap_membership] @mysqlSelect(
    subgraph: "Rfam"
    table: "_overlap_membership"
    columnMap: [["auto_overlap", "auto_overlap"]]
  )
}

type _post_process @join__type(graph: RFAM)  {
  rfam_acc: String!
  author: String!
  uuid: String!
  status: _post_process_status!
  created: DateTime!
  opened: DateTime
  closed: DateTime
  message: String
  lsf_id: Int
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type alignment_and_tree @join__type(graph: RFAM)  {
  rfam_acc: String!
  type: alignment_and_tree_type!
  alignment: String
  tree: String
  treemethod: String
  average_length: Float
  percent_id: Float
  number_of_sequences: BigInt
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type clan_membership @join__type(graph: RFAM)  {
  clan_acc: String!
  rfam_acc: String!
  clan(where: clan_WhereInput, orderBy: clan_OrderByInput, limit: Int, offset: Int) : [clan] @mysqlSelect(subgraph: "Rfam", table: "clan", columnMap: [["clan_acc", "clan_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "clan_acc") 
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type clan @join__type(graph: RFAM)  {
  clan_acc: String!
  id: String
  previous_id: String
  description: String
  author: String
  comment: String
  created: DateTime!
  updated: Timestamp!
  clan_database_link(
    limit: Int
    offset: Int
    where: clan_database_link_WhereInput
    orderBy: clan_database_link_OrderByInput
  ): [clan_database_link] @mysqlSelect(
    subgraph: "Rfam"
    table: "clan_database_link"
    columnMap: [["clan_acc", "clan_acc"]]
  )
  clan_literature_reference(
    limit: Int
    offset: Int
    where: clan_literature_reference_WhereInput
    orderBy: clan_literature_reference_OrderByInput
  ): [clan_literature_reference] @mysqlSelect(
    subgraph: "Rfam"
    table: "clan_literature_reference"
    columnMap: [["clan_acc", "clan_acc"]]
  )
  clan_membership(
    limit: Int
    offset: Int
    where: clan_membership_WhereInput
    orderBy: clan_membership_OrderByInput
  ): [clan_membership] @mysqlSelect(
    subgraph: "Rfam"
    table: "clan_membership"
    columnMap: [["clan_acc", "clan_acc"]]
  )
}

type clan_database_link @join__type(graph: RFAM)  {
  clan_acc: String!
  db_id: String!
  comment: String
  db_link: String!
  other_params: String
  clan(where: clan_WhereInput, orderBy: clan_OrderByInput, limit: Int, offset: Int) : [clan] @mysqlSelect(subgraph: "Rfam", table: "clan", columnMap: [["clan_acc", "clan_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "clan_acc") 
}

type clan_literature_reference @join__type(graph: RFAM)  {
  clan_acc: String!
  pmid: Int!
  comment: String
  order_added: Int
  clan(where: clan_WhereInput, orderBy: clan_OrderByInput, limit: Int, offset: Int) : [clan] @mysqlSelect(subgraph: "Rfam", table: "clan", columnMap: [["clan_acc", "clan_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "clan_acc") 
  literature_reference(
    where: literature_reference_WhereInput
    orderBy: literature_reference_OrderByInput
    limit: Int
    offset: Int
  ): [literature_reference] @mysqlSelect(
    subgraph: "Rfam"
    table: "literature_reference"
    columnMap: [["pmid", "pmid"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "pmid") 
}

type literature_reference @join__type(graph: RFAM)  {
  pmid: Int!
  title: String
  author: String
  journal: String
  clan_literature_reference(
    limit: Int
    offset: Int
    where: clan_literature_reference_WhereInput
    orderBy: clan_literature_reference_OrderByInput
  ): [clan_literature_reference] @mysqlSelect(
    subgraph: "Rfam"
    table: "clan_literature_reference"
    columnMap: [["pmid", "pmid"]]
  )
  family_literature_reference(
    limit: Int
    offset: Int
    where: family_literature_reference_WhereInput
    orderBy: family_literature_reference_OrderByInput
  ): [family_literature_reference] @mysqlSelect(
    subgraph: "Rfam"
    table: "family_literature_reference"
    columnMap: [["pmid", "pmid"]]
  )
  motif_literature(
    limit: Int
    offset: Int
    where: motif_literature_WhereInput
    orderBy: motif_literature_OrderByInput
  ): [motif_literature] @mysqlSelect(subgraph: "Rfam", table: "motif_literature", columnMap: [["pmid", "pmid"]]) 
}

type family_literature_reference @join__type(graph: RFAM)  {
  rfam_acc: String!
  pmid: Int!
  comment: String
  order_added: Int
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  literature_reference(
    where: literature_reference_WhereInput
    orderBy: literature_reference_OrderByInput
    limit: Int
    offset: Int
  ): [literature_reference] @mysqlSelect(
    subgraph: "Rfam"
    table: "literature_reference"
    columnMap: [["pmid", "pmid"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "pmid") 
}

type motif_literature @join__type(graph: RFAM)  {
  motif_acc: String!
  pmid: Int!
  comment: String
  order_added: Int
  literature_reference(
    where: literature_reference_WhereInput
    orderBy: literature_reference_OrderByInput
    limit: Int
    offset: Int
  ): [literature_reference] @mysqlSelect(
    subgraph: "Rfam"
    table: "literature_reference"
    columnMap: [["pmid", "pmid"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "pmid") 
  motif_old(
    where: motif_old_WhereInput
    orderBy: motif_old_OrderByInput
    limit: Int
    offset: Int
  ): [motif_old] @mysqlSelect(subgraph: "Rfam", table: "motif_old", columnMap: [["motif_acc", "motif_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "motif_acc") 
}

type motif_old @join__type(graph: RFAM)  {
  motif_acc: String!
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  cmbuild: String
  cmcalibrate: String
  type: String
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  created: DateTime!
  updated: Timestamp!
  motif_family_stats(
    limit: Int
    offset: Int
    where: motif_family_stats_WhereInput
    orderBy: motif_family_stats_OrderByInput
  ): [motif_family_stats] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_family_stats"
    columnMap: [["motif_acc", "motif_acc"]]
  )
  motif_literature(
    limit: Int
    offset: Int
    where: motif_literature_WhereInput
    orderBy: motif_literature_OrderByInput
  ): [motif_literature] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_literature"
    columnMap: [["motif_acc", "motif_acc"]]
  )
  motif_matches(
    limit: Int
    offset: Int
    where: motif_matches_WhereInput
    orderBy: motif_matches_OrderByInput
  ): [motif_matches] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_matches"
    columnMap: [["motif_acc", "motif_acc"]]
  )
  motif_pdb(
    limit: Int
    offset: Int
    where: motif_pdb_WhereInput
    orderBy: motif_pdb_OrderByInput
  ): [motif_pdb] @mysqlSelect(subgraph: "Rfam", table: "motif_pdb", columnMap: [["motif_acc", "motif_acc"]]) 
  motif_ss_image(
    limit: Int
    offset: Int
    where: motif_ss_image_WhereInput
    orderBy: motif_ss_image_OrderByInput
  ): [motif_ss_image] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_ss_image"
    columnMap: [["motif_acc", "motif_acc"]]
  )
}

type motif_family_stats @join__type(graph: RFAM)  {
  rfam_acc: String!
  motif_acc: String!
  num_hits: Int
  frac_hits: Float
  sum_bits: Float
  avg_weight_bits: Float
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  motif_old(
    where: motif_old_WhereInput
    orderBy: motif_old_OrderByInput
    limit: Int
    offset: Int
  ): [motif_old] @mysqlSelect(subgraph: "Rfam", table: "motif_old", columnMap: [["motif_acc", "motif_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "motif_acc") 
}

type motif_matches @join__type(graph: RFAM)  {
  motif_acc: String!
  rfam_acc: String!
  rfamseq_acc: String
  rfamseq_start: BigInt
  rfamseq_stop: BigInt
  query_start: Int
  query_stop: Int
  motif_start: Int
  motif_stop: Int
  e_value: String
  bit_score: Float
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  motif_old(
    where: motif_old_WhereInput
    orderBy: motif_old_OrderByInput
    limit: Int
    offset: Int
  ): [motif_old] @mysqlSelect(subgraph: "Rfam", table: "motif_old", columnMap: [["motif_acc", "motif_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "motif_acc") 
  rfamseq(
    where: rfamseq_WhereInput
    orderBy: rfamseq_OrderByInput
    limit: Int
    offset: Int
  ): [rfamseq] @mysqlSelect(
    subgraph: "Rfam"
    table: "rfamseq"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "rfamseq_acc") 
}

type rfamseq @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String!
  accession: String!
  version: Int!
  ncbi_id: Int!
  mol_type: rfamseq_mol_type!
  length: Int
  description: String!
  previous_acc: String
  source: String!
  features(
    limit: Int
    offset: Int
    where: features_WhereInput
    orderBy: features_OrderByInput
  ): [features] @mysqlSelect(
    subgraph: "Rfam"
    table: "features"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  )
  full_region(
    limit: Int
    offset: Int
    where: full_region_WhereInput
    orderBy: full_region_OrderByInput
  ): [full_region] @mysqlSelect(
    subgraph: "Rfam"
    table: "full_region"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  )
  motif_matches(
    limit: Int
    offset: Int
    where: motif_matches_WhereInput
    orderBy: motif_matches_OrderByInput
  ): [motif_matches] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_matches"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  )
  pdb_rfam_reg(
    limit: Int
    offset: Int
    where: pdb_rfam_reg_WhereInput
    orderBy: pdb_rfam_reg_OrderByInput
  ): [pdb_rfam_reg] @mysqlSelect(
    subgraph: "Rfam"
    table: "pdb_rfam_reg"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  )
  taxonomy(
    where: taxonomy_WhereInput
    orderBy: taxonomy_OrderByInput
    limit: Int
    offset: Int
  ): [taxonomy] @mysqlSelect(subgraph: "Rfam", table: "taxonomy", columnMap: [["ncbi_id", "ncbi_id"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "ncbi_id") 
  seed_region(
    limit: Int
    offset: Int
    where: seed_region_WhereInput
    orderBy: seed_region_OrderByInput
  ): [seed_region] @mysqlSelect(
    subgraph: "Rfam"
    table: "seed_region"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  )
}

type features @join__type(graph: RFAM)  {
  rfamseq_acc: String
  database_id: String!
  primary_id: String!
  secondary_id: String
  feat_orient: Int!
  feat_start: BigInt!
  feat_end: BigInt!
  quaternary_id: String
  rfamseq(
    where: rfamseq_WhereInput
    orderBy: rfamseq_OrderByInput
    limit: Int
    offset: Int
  ): [rfamseq] @mysqlSelect(
    subgraph: "Rfam"
    table: "rfamseq"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "rfamseq_acc") 
}

type full_region @join__type(graph: RFAM)  {
  rfam_acc: String!
  rfamseq_acc: String!
  seq_start: BigInt!
  seq_end: BigInt!
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: Float!
  evalue_score: String!
  cm_start: Int!
  cm_end: Int!
  truncated: full_region_truncated!
  type: full_region_type!
  is_significant: Int!
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  rfamseq(
    where: rfamseq_WhereInput
    orderBy: rfamseq_OrderByInput
    limit: Int
    offset: Int
  ): [rfamseq] @mysqlSelect(
    subgraph: "Rfam"
    table: "rfamseq"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "rfamseq_acc") 
}

type pdb_rfam_reg @join__type(graph: RFAM)  {
  auto_pdb_reg: Int!
  rfam_acc: String!
  pdb_seq: String!
  pdb_id: String!
  chain: String
  pdb_res_start: Int
  pdb_res_end: Int
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt
  hex_colour: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  pdb(where: pdb_WhereInput, orderBy: pdb_OrderByInput, limit: Int, offset: Int) : [pdb] @mysqlSelect(subgraph: "Rfam", table: "pdb", columnMap: [["pdb_id", "pdb_id"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "pdb_id") 
  pdb_sequence(
    where: pdb_sequence_WhereInput
    orderBy: pdb_sequence_OrderByInput
    limit: Int
    offset: Int
  ): [pdb_sequence] @mysqlSelect(subgraph: "Rfam", table: "pdb_sequence", columnMap: [["pdb_seq", "pdb_seq"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "pdb_seq") 
  rfamseq(
    where: rfamseq_WhereInput
    orderBy: rfamseq_OrderByInput
    limit: Int
    offset: Int
  ): [rfamseq] @mysqlSelect(
    subgraph: "Rfam"
    table: "rfamseq"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "rfamseq_acc") 
}

type pdb @join__type(graph: RFAM)  {
  pdb_id: String!
  keywords: String
  title: String
  date: String
  resolution: Float
  method: String
  author: String
  pdb_rfam_reg(
    limit: Int
    offset: Int
    where: pdb_rfam_reg_WhereInput
    orderBy: pdb_rfam_reg_OrderByInput
  ): [pdb_rfam_reg] @mysqlSelect(subgraph: "Rfam", table: "pdb_rfam_reg", columnMap: [["pdb_id", "pdb_id"]]) 
  pdb_sequence(
    limit: Int
    offset: Int
    where: pdb_sequence_WhereInput
    orderBy: pdb_sequence_OrderByInput
  ): [pdb_sequence] @mysqlSelect(subgraph: "Rfam", table: "pdb_sequence", columnMap: [["pdb_id", "pdb_id"]]) 
}

type pdb_sequence @join__type(graph: RFAM)  {
  pdb_seq: String!
  pdb_id: String!
  chain: String
  pdb_rfam_reg(
    limit: Int
    offset: Int
    where: pdb_rfam_reg_WhereInput
    orderBy: pdb_rfam_reg_OrderByInput
  ): [pdb_rfam_reg] @mysqlSelect(subgraph: "Rfam", table: "pdb_rfam_reg", columnMap: [["pdb_seq", "pdb_seq"]]) 
  pdb(where: pdb_WhereInput, orderBy: pdb_OrderByInput, limit: Int, offset: Int) : [pdb] @mysqlSelect(subgraph: "Rfam", table: "pdb", columnMap: [["pdb_id", "pdb_id"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "pdb_id") 
}

type taxonomy @join__type(graph: RFAM)  {
  ncbi_id: Int!
  species: String!
  tax_string: String
  tree_display_name: String
  align_display_name: String
  family_ncbi(
    limit: Int
    offset: Int
    where: family_ncbi_WhereInput
    orderBy: family_ncbi_OrderByInput
  ): [family_ncbi] @mysqlSelect(subgraph: "Rfam", table: "family_ncbi", columnMap: [["ncbi_id", "ncbi_id"]]) 
  rfamseq(
    limit: Int
    offset: Int
    where: rfamseq_WhereInput
    orderBy: rfamseq_OrderByInput
  ): [rfamseq] @mysqlSelect(subgraph: "Rfam", table: "rfamseq", columnMap: [["ncbi_id", "ncbi_id"]]) 
}

type family_ncbi @join__type(graph: RFAM)  {
  ncbi_id: Int!
  """
  Is this really needed?
  """
  rfam_id: String
  rfam_acc: String!
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  taxonomy(
    where: taxonomy_WhereInput
    orderBy: taxonomy_OrderByInput
    limit: Int
    offset: Int
  ): [taxonomy] @mysqlSelect(subgraph: "Rfam", table: "taxonomy", columnMap: [["ncbi_id", "ncbi_id"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "ncbi_id") 
}

type seed_region @join__type(graph: RFAM)  {
  rfam_acc: String!
  rfamseq_acc: String
  seq_start: BigInt!
  seq_end: BigInt!
  md5: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  rfamseq(
    where: rfamseq_WhereInput
    orderBy: rfamseq_OrderByInput
    limit: Int
    offset: Int
  ): [rfamseq] @mysqlSelect(
    subgraph: "Rfam"
    table: "rfamseq"
    columnMap: [["rfamseq_acc", "rfamseq_acc"]]
  ) @mysqlTableForeign(subgraph: "Rfam", columnName: "rfamseq_acc") 
}

type motif_pdb @join__type(graph: RFAM)  {
  motif_acc: String!
  pdb_id: String!
  chain: String
  pdb_start: Int
  pdb_end: Int
  motif_old(
    where: motif_old_WhereInput
    orderBy: motif_old_OrderByInput
    limit: Int
    offset: Int
  ): [motif_old] @mysqlSelect(subgraph: "Rfam", table: "motif_old", columnMap: [["motif_acc", "motif_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "motif_acc") 
}

type motif_ss_image @join__type(graph: RFAM)  {
  rfam_acc: String!
  motif_acc: String!
  image: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  motif_old(
    where: motif_old_WhereInput
    orderBy: motif_old_OrderByInput
    limit: Int
    offset: Int
  ): [motif_old] @mysqlSelect(subgraph: "Rfam", table: "motif_old", columnMap: [["motif_acc", "motif_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "motif_acc") 
}

type database_link @join__type(graph: RFAM)  {
  rfam_acc: String!
  db_id: String!
  comment: String
  db_link: String!
  other_params: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type wikitext @join__type(graph: RFAM)  {
  auto_wiki: Int!
  title: String!
  family(
    limit: Int
    offset: Int
    where: family_WhereInput
    orderBy: family_OrderByInput
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["auto_wiki", "auto_wiki"]]) 
}

type family_long @join__type(graph: RFAM)  {
  rfam_acc: String!
  referenece_structure: String
  reference_sequence: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type html_alignment @join__type(graph: RFAM)  {
  rfam_acc: String!
  type: html_alignment_type!
  html: String
  block: Int!
  html_alignmentscol: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type matches_and_fasta @join__type(graph: RFAM)  {
  rfam_acc: String!
  match_list: String
  fasta: String
  type: matches_and_fasta_type!
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type processed_data @join__type(graph: RFAM)  {
  rfam_acc: String!
  cm: String
  ss_stats_pbp: String
  ss_stats_seq: String
  ss_stats_fam: String
  scores_graph: String
  genome_full: String
  genome_full_md5: String
  refseq_full: String
  refseq_full_md5: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type pseudoknot @join__type(graph: RFAM)  {
  rfam_acc: String!
  pseudoknot_id: String!
  source: pseudoknot_source!
  covariation: Int
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type refseq_full_region @join__type(graph: RFAM)  {
  rfam_acc: String!
  refseq_acc: String!
  seq_start: BigInt!
  seq_end: BigInt!
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: Float!
  evalue_score: String!
  cm_start: Int!
  cm_end: Int!
  truncated: refseq_full_region_truncated!
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
  refseq(
    where: refseq_WhereInput
    orderBy: refseq_OrderByInput
    limit: Int
    offset: Int
  ): [refseq] @mysqlSelect(subgraph: "Rfam", table: "refseq", columnMap: [["refseq_acc", "refseq_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "refseq_acc") 
}

type refseq @join__type(graph: RFAM)  {
  refseq_acc: String!
  description: String
  species: String
  ncbi_taxid: Int
  refseq_full_region(
    limit: Int
    offset: Int
    where: refseq_full_region_WhereInput
    orderBy: refseq_full_region_OrderByInput
  ): [refseq_full_region] @mysqlSelect(
    subgraph: "Rfam"
    table: "refseq_full_region"
    columnMap: [["refseq_acc", "refseq_acc"]]
  )
}

type secondary_structure_image @join__type(graph: RFAM)  {
  rfam_acc: String!
  type: secondary_structure_image_type
  image: String
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type sunburst @join__type(graph: RFAM)  {
  rfam_acc: String!
  data: String!
  type: sunburst_type!
  family(
    where: family_WhereInput
    orderBy: family_OrderByInput
    limit: Int
    offset: Int
  ): [family] @mysqlSelect(subgraph: "Rfam", table: "family", columnMap: [["rfam_acc", "rfam_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "rfam_acc") 
}

type _genome_data @join__type(graph: RFAM)  {
  data_file: String!
  author: String!
  uuid: String!
  status: _genome_data_status!
  created: DateTime!
  opened: DateTime
  closed: DateTime
  message: String
  lsf_id: Int
}

type _lock @join__type(graph: RFAM)  {
  locked: Int!
  locker: String!
  """
  Do you lock individual families? Do ever lock the whole database?
  """
  allowCommits: Int!
  alsoAllow: String
}

type author @join__type(graph: RFAM)  {
  author_id: Int!
  name: String!
  last_name: String
  initials: String
  orcid: String
  synonyms: String
}

type db_version @join__type(graph: RFAM)  {
  rfam_release: Float!
  rfam_release_date: DateTime!
  number_families: Int!
  embl_release: String!
  genome_collection_date: DateTime
  refseq_version: Int
  pdb_date: DateTime
  infernal_version: String
}

type dead_clan @join__type(graph: RFAM)  {
  clan_acc: String!
  """
  Added. Add author?
  """
  clan_id: String!
  comment: String
  forward_to: String
  user: String!
}

type dead_family @join__type(graph: RFAM)  {
  """
  record the author???
  """
  rfam_acc: String!
  rfam_id: String!
  comment: String
  forward_to: String
  """
  wikipedia page title
  
  """
  title: String
  user: String!
}

type ensembl_names @join__type(graph: RFAM)  {
  insdc: String!
  ensembl: String
}

type family_author @join__type(graph: RFAM)  {
  rfam_acc: String!
  author_id: Int!
  desc_order: Int!
}

type genome @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String!
  assembly_acc: String
  assembly_version: Int
  wgs_acc: String
  wgs_version: Int
  assembly_name: String
  assembly_level: genome_assembly_level
  study_ref: String
  description: String
  total_length: BigInt
  ungapped_length: BigInt
  circular: Int
  ncbi_id: Int!
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: Int
  num_families: Int
  is_reference: Int!
  is_representative: Int!
  created: DateTime!
  updated: Timestamp!
}

type genome_temp @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String!
  assembly_acc: String
  assembly_version: Int
  wgs_acc: String
  wgs_version: Int
  assembly_name: String
  assembly_level: genome_temp_assembly_level
  study_ref: String
  description: String
  total_length: BigInt
  ungapped_length: BigInt
  circular: Int
  ncbi_id: Int!
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: Int
  num_families: Int
  is_reference: Int!
  is_representative: Int!
  created: DateTime!
  updated: Timestamp!
}

type genseq @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String!
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

type genseq_temp @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String!
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

type keywords @join__type(graph: RFAM)  {
  rfam_acc: String!
  rfam_id: String
  description: String
  rfam_general: String
  literature: String
  wiki: String
  pdb_mappings: String
  clan_info: String
}

type motif @join__type(graph: RFAM)  {
  motif_acc: String!
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  cmbuild: String
  cmcalibrate: String
  type: String
  num_seed: BigInt
  average_id: Float
  average_sqlen: Float
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  wiki: String
  created: DateTime!
  updated: Timestamp!
  motif_database_link(
    limit: Int
    offset: Int
    where: motif_database_link_WhereInput
    orderBy: motif_database_link_OrderByInput
  ): [motif_database_link] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_database_link"
    columnMap: [["motif_acc", "motif_acc"]]
  )
  motif_file(
    limit: Int
    offset: Int
    where: motif_file_WhereInput
    orderBy: motif_file_OrderByInput
  ): [motif_file] @mysqlSelect(
    subgraph: "Rfam"
    table: "motif_file"
    columnMap: [["motif_acc", "motif_acc"]]
  )
}

type motif_database_link @join__type(graph: RFAM)  {
  motif_acc: String!
  db_id: String!
  comment: String
  db_link: String!
  other_params: String
  motif(where: motif_WhereInput, orderBy: motif_OrderByInput, limit: Int, offset: Int) : [motif] @mysqlSelect(subgraph: "Rfam", table: "motif", columnMap: [["motif_acc", "motif_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "motif_acc") 
}

type motif_file @join__type(graph: RFAM)  {
  motif_acc: String!
  seed: String!
  cm: String!
  motif(where: motif_WhereInput, orderBy: motif_OrderByInput, limit: Int, offset: Int) : [motif] @mysqlSelect(subgraph: "Rfam", table: "motif", columnMap: [["motif_acc", "motif_acc"]])  @mysqlTableForeign(subgraph: "Rfam", columnName: "motif_acc") 
}

type pdb_full_region @join__type(graph: RFAM)  {
  rfam_acc: String!
  pdb_id: String!
  chain: String
  pdb_start: Int!
  pdb_end: Int!
  bit_score: Float!
  evalue_score: String!
  cm_start: Int!
  cm_end: Int!
  hex_colour: String
  is_significant: Int!
}

type pdb_full_region_old @join__type(graph: RFAM)  {
  rfam_acc: String!
  pdb_id: String!
  chain: String
  pdb_start: Int!
  pdb_end: Int!
  bit_score: Float!
  evalue_score: String!
  cm_start: Int!
  cm_end: Int!
  hex_colour: String
  is_significant: Int!
}

type rfamseq_temp @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String!
  accession: String!
  version: Int!
  ncbi_id: Int!
  mol_type: rfamseq_temp_mol_type!
  length: Int
  description: String
  previous_acc: String
  source: String!
}

type rnacentral_matches @join__type(graph: RFAM)  {
  rfamseq_acc: String!
  seq_start: BigInt!
  seq_end: BigInt!
  md5: String!
  rnacentral_id: String
  type: rnacentral_matches_type
}

type rscape_annotations @join__type(graph: RFAM)  {
  rfam_acc: String!
  F: Float
  sensitivity: Float
  ppv: Float
  true: Int
  found: Int
  tp: Int
  avgid: Float
  alen: Int
  nseq: Int
}

type taxonomic_tree @join__type(graph: RFAM)  {
  ncbi_code: Int!
  species: String
  taxonomy: String
  lft: Int
  rgt: Int
  parent: String
  level: String
}

type taxonomy_websearch @join__type(graph: RFAM)  {
  ncbi_id: Int
  species: String
  rgt: Int
  taxonomy: String
  lft: Int
  parent: Int
  level: String
  minimal: Int!
  rank: String
}

type version @join__type(graph: RFAM)  {
  rfam_release: Float!
  rfam_release_date: Date!
  number_families: Int!
  embl_release: String!
}

type Mutation @join__type(graph: RFAM)  {
  insert__annotated_file(_annotated_file: _annotated_file_InsertInput!) : _annotated_file @mysqlInsert(subgraph: "Rfam", table: "_annotated_file", primaryKeys: ["rfam_acc"]) 
  update__annotated_file(
    _annotated_file: _annotated_file_UpdateInput!
    where: _annotated_file_WhereInput
  ): _annotated_file @mysqlUpdate(subgraph: "Rfam", table: "_annotated_file") 
  delete__annotated_file(where: _annotated_file_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "_annotated_file") 
  insert__family_file(_family_file: _family_file_InsertInput!) : _family_file @mysqlInsert(subgraph: "Rfam", table: "_family_file", primaryKeys: []) 
  update__family_file(_family_file: _family_file_UpdateInput!, where: _family_file_WhereInput) : _family_file @mysqlUpdate(subgraph: "Rfam", table: "_family_file") 
  delete__family_file(where: _family_file_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "_family_file") 
  insert__genome_data(_genome_data: _genome_data_InsertInput!) : _genome_data @mysqlInsert(subgraph: "Rfam", table: "_genome_data", primaryKeys: []) 
  update__genome_data(_genome_data: _genome_data_UpdateInput!, where: _genome_data_WhereInput) : _genome_data @mysqlUpdate(subgraph: "Rfam", table: "_genome_data") 
  delete__genome_data(where: _genome_data_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "_genome_data") 
  insert__lock(_lock: _lock_InsertInput!) : _lock @mysqlInsert(subgraph: "Rfam", table: "_lock", primaryKeys: []) 
  update__lock(_lock: _lock_UpdateInput!, where: _lock_WhereInput) : _lock @mysqlUpdate(subgraph: "Rfam", table: "_lock") 
  delete__lock(where: _lock_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "_lock") 
  insert__overlap(_overlap: _overlap_InsertInput!) : _overlap @mysqlInsert(subgraph: "Rfam", table: "_overlap", primaryKeys: ["auto_overlap"]) 
  update__overlap(_overlap: _overlap_UpdateInput!, where: _overlap_WhereInput) : _overlap @mysqlUpdate(subgraph: "Rfam", table: "_overlap") 
  delete__overlap(where: _overlap_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "_overlap") 
  insert__overlap_membership(_overlap_membership: _overlap_membership_InsertInput!) : _overlap_membership @mysqlInsert(subgraph: "Rfam", table: "_overlap_membership", primaryKeys: []) 
  update__overlap_membership(
    _overlap_membership: _overlap_membership_UpdateInput!
    where: _overlap_membership_WhereInput
  ): _overlap_membership @mysqlUpdate(subgraph: "Rfam", table: "_overlap_membership") 
  delete__overlap_membership(where: _overlap_membership_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "_overlap_membership") 
  insert__post_process(_post_process: _post_process_InsertInput!) : _post_process @mysqlInsert(subgraph: "Rfam", table: "_post_process", primaryKeys: []) 
  update__post_process(_post_process: _post_process_UpdateInput!, where: _post_process_WhereInput) : _post_process @mysqlUpdate(subgraph: "Rfam", table: "_post_process") 
  delete__post_process(where: _post_process_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "_post_process") 
  insert_alignment_and_tree(alignment_and_tree: alignment_and_tree_InsertInput!) : alignment_and_tree @mysqlInsert(subgraph: "Rfam", table: "alignment_and_tree", primaryKeys: []) 
  update_alignment_and_tree(
    alignment_and_tree: alignment_and_tree_UpdateInput!
    where: alignment_and_tree_WhereInput
  ): alignment_and_tree @mysqlUpdate(subgraph: "Rfam", table: "alignment_and_tree") 
  delete_alignment_and_tree(where: alignment_and_tree_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "alignment_and_tree") 
  insert_author(author: author_InsertInput!) : author @mysqlInsert(subgraph: "Rfam", table: "author", primaryKeys: ["author_id"]) 
  update_author(author: author_UpdateInput!, where: author_WhereInput) : author @mysqlUpdate(subgraph: "Rfam", table: "author") 
  delete_author(where: author_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "author") 
  insert_clan(clan: clan_InsertInput!) : clan @mysqlInsert(subgraph: "Rfam", table: "clan", primaryKeys: ["clan_acc"]) 
  update_clan(clan: clan_UpdateInput!, where: clan_WhereInput) : clan @mysqlUpdate(subgraph: "Rfam", table: "clan") 
  delete_clan(where: clan_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "clan") 
  insert_clan_database_link(clan_database_link: clan_database_link_InsertInput!) : clan_database_link @mysqlInsert(subgraph: "Rfam", table: "clan_database_link", primaryKeys: []) 
  update_clan_database_link(
    clan_database_link: clan_database_link_UpdateInput!
    where: clan_database_link_WhereInput
  ): clan_database_link @mysqlUpdate(subgraph: "Rfam", table: "clan_database_link") 
  delete_clan_database_link(where: clan_database_link_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "clan_database_link") 
  insert_clan_literature_reference(clan_literature_reference: clan_literature_reference_InsertInput!) : clan_literature_reference @mysqlInsert(subgraph: "Rfam", table: "clan_literature_reference", primaryKeys: []) 
  update_clan_literature_reference(
    clan_literature_reference: clan_literature_reference_UpdateInput!
    where: clan_literature_reference_WhereInput
  ): clan_literature_reference @mysqlUpdate(subgraph: "Rfam", table: "clan_literature_reference") 
  delete_clan_literature_reference(where: clan_literature_reference_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "clan_literature_reference") 
  insert_clan_membership(clan_membership: clan_membership_InsertInput!) : clan_membership @mysqlInsert(subgraph: "Rfam", table: "clan_membership", primaryKeys: ["rfam_acc"]) 
  update_clan_membership(
    clan_membership: clan_membership_UpdateInput!
    where: clan_membership_WhereInput
  ): clan_membership @mysqlUpdate(subgraph: "Rfam", table: "clan_membership") 
  delete_clan_membership(where: clan_membership_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "clan_membership") 
  insert_database_link(database_link: database_link_InsertInput!) : database_link @mysqlInsert(subgraph: "Rfam", table: "database_link", primaryKeys: []) 
  update_database_link(database_link: database_link_UpdateInput!, where: database_link_WhereInput) : database_link @mysqlUpdate(subgraph: "Rfam", table: "database_link") 
  delete_database_link(where: database_link_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "database_link") 
  insert_db_version(db_version: db_version_InsertInput!) : db_version @mysqlInsert(subgraph: "Rfam", table: "db_version", primaryKeys: ["rfam_release"]) 
  update_db_version(db_version: db_version_UpdateInput!, where: db_version_WhereInput) : db_version @mysqlUpdate(subgraph: "Rfam", table: "db_version") 
  delete_db_version(where: db_version_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "db_version") 
  insert_dead_clan(dead_clan: dead_clan_InsertInput!) : dead_clan @mysqlInsert(subgraph: "Rfam", table: "dead_clan", primaryKeys: ["clan_acc"]) 
  update_dead_clan(dead_clan: dead_clan_UpdateInput!, where: dead_clan_WhereInput) : dead_clan @mysqlUpdate(subgraph: "Rfam", table: "dead_clan") 
  delete_dead_clan(where: dead_clan_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "dead_clan") 
  insert_dead_family(dead_family: dead_family_InsertInput!) : dead_family @mysqlInsert(subgraph: "Rfam", table: "dead_family", primaryKeys: ["rfam_acc"]) 
  update_dead_family(dead_family: dead_family_UpdateInput!, where: dead_family_WhereInput) : dead_family @mysqlUpdate(subgraph: "Rfam", table: "dead_family") 
  delete_dead_family(where: dead_family_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "dead_family") 
  insert_ensembl_names(ensembl_names: ensembl_names_InsertInput!) : ensembl_names @mysqlInsert(subgraph: "Rfam", table: "ensembl_names", primaryKeys: ["insdc"]) 
  update_ensembl_names(ensembl_names: ensembl_names_UpdateInput!, where: ensembl_names_WhereInput) : ensembl_names @mysqlUpdate(subgraph: "Rfam", table: "ensembl_names") 
  delete_ensembl_names(where: ensembl_names_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "ensembl_names") 
  insert_family(family: family_InsertInput!) : family @mysqlInsert(subgraph: "Rfam", table: "family", primaryKeys: ["rfam_acc"]) 
  update_family(family: family_UpdateInput!, where: family_WhereInput) : family @mysqlUpdate(subgraph: "Rfam", table: "family") 
  delete_family(where: family_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "family") 
  insert_family_author(family_author: family_author_InsertInput!) : family_author @mysqlInsert(subgraph: "Rfam", table: "family_author", primaryKeys: []) 
  update_family_author(family_author: family_author_UpdateInput!, where: family_author_WhereInput) : family_author @mysqlUpdate(subgraph: "Rfam", table: "family_author") 
  delete_family_author(where: family_author_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "family_author") 
  insert_family_literature_reference(family_literature_reference: family_literature_reference_InsertInput!) : family_literature_reference @mysqlInsert(subgraph: "Rfam", table: "family_literature_reference", primaryKeys: []) 
  update_family_literature_reference(
    family_literature_reference: family_literature_reference_UpdateInput!
    where: family_literature_reference_WhereInput
  ): family_literature_reference @mysqlUpdate(subgraph: "Rfam", table: "family_literature_reference") 
  delete_family_literature_reference(where: family_literature_reference_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "family_literature_reference") 
  insert_family_long(family_long: family_long_InsertInput!) : family_long @mysqlInsert(subgraph: "Rfam", table: "family_long", primaryKeys: []) 
  update_family_long(family_long: family_long_UpdateInput!, where: family_long_WhereInput) : family_long @mysqlUpdate(subgraph: "Rfam", table: "family_long") 
  delete_family_long(where: family_long_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "family_long") 
  insert_family_ncbi(family_ncbi: family_ncbi_InsertInput!) : family_ncbi @mysqlInsert(subgraph: "Rfam", table: "family_ncbi", primaryKeys: []) 
  update_family_ncbi(family_ncbi: family_ncbi_UpdateInput!, where: family_ncbi_WhereInput) : family_ncbi @mysqlUpdate(subgraph: "Rfam", table: "family_ncbi") 
  delete_family_ncbi(where: family_ncbi_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "family_ncbi") 
  insert_features(features: features_InsertInput!) : features @mysqlInsert(subgraph: "Rfam", table: "features", primaryKeys: []) 
  update_features(features: features_UpdateInput!, where: features_WhereInput) : features @mysqlUpdate(subgraph: "Rfam", table: "features") 
  delete_features(where: features_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "features") 
  insert_full_region(full_region: full_region_InsertInput!) : full_region @mysqlInsert(subgraph: "Rfam", table: "full_region", primaryKeys: []) 
  update_full_region(full_region: full_region_UpdateInput!, where: full_region_WhereInput) : full_region @mysqlUpdate(subgraph: "Rfam", table: "full_region") 
  delete_full_region(where: full_region_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "full_region") 
  insert_genome(genome: genome_InsertInput!) : genome @mysqlInsert(subgraph: "Rfam", table: "genome", primaryKeys: ["upid"]) 
  update_genome(genome: genome_UpdateInput!, where: genome_WhereInput) : genome @mysqlUpdate(subgraph: "Rfam", table: "genome") 
  delete_genome(where: genome_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "genome") 
  insert_genome_temp(genome_temp: genome_temp_InsertInput!) : genome_temp @mysqlInsert(subgraph: "Rfam", table: "genome_temp", primaryKeys: ["upid"]) 
  update_genome_temp(genome_temp: genome_temp_UpdateInput!, where: genome_temp_WhereInput) : genome_temp @mysqlUpdate(subgraph: "Rfam", table: "genome_temp") 
  delete_genome_temp(where: genome_temp_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "genome_temp") 
  insert_genseq(genseq: genseq_InsertInput!) : genseq @mysqlInsert(subgraph: "Rfam", table: "genseq", primaryKeys: []) 
  update_genseq(genseq: genseq_UpdateInput!, where: genseq_WhereInput) : genseq @mysqlUpdate(subgraph: "Rfam", table: "genseq") 
  delete_genseq(where: genseq_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "genseq") 
  insert_genseq_temp(genseq_temp: genseq_temp_InsertInput!) : genseq_temp @mysqlInsert(subgraph: "Rfam", table: "genseq_temp", primaryKeys: []) 
  update_genseq_temp(genseq_temp: genseq_temp_UpdateInput!, where: genseq_temp_WhereInput) : genseq_temp @mysqlUpdate(subgraph: "Rfam", table: "genseq_temp") 
  delete_genseq_temp(where: genseq_temp_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "genseq_temp") 
  insert_html_alignment(html_alignment: html_alignment_InsertInput!) : html_alignment @mysqlInsert(subgraph: "Rfam", table: "html_alignment", primaryKeys: []) 
  update_html_alignment(html_alignment: html_alignment_UpdateInput!, where: html_alignment_WhereInput) : html_alignment @mysqlUpdate(subgraph: "Rfam", table: "html_alignment") 
  delete_html_alignment(where: html_alignment_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "html_alignment") 
  insert_keywords(keywords: keywords_InsertInput!) : keywords @mysqlInsert(subgraph: "Rfam", table: "keywords", primaryKeys: ["rfam_acc"]) 
  update_keywords(keywords: keywords_UpdateInput!, where: keywords_WhereInput) : keywords @mysqlUpdate(subgraph: "Rfam", table: "keywords") 
  delete_keywords(where: keywords_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "keywords") 
  insert_literature_reference(literature_reference: literature_reference_InsertInput!) : literature_reference @mysqlInsert(subgraph: "Rfam", table: "literature_reference", primaryKeys: ["pmid"]) 
  update_literature_reference(
    literature_reference: literature_reference_UpdateInput!
    where: literature_reference_WhereInput
  ): literature_reference @mysqlUpdate(subgraph: "Rfam", table: "literature_reference") 
  delete_literature_reference(where: literature_reference_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "literature_reference") 
  insert_matches_and_fasta(matches_and_fasta: matches_and_fasta_InsertInput!) : matches_and_fasta @mysqlInsert(subgraph: "Rfam", table: "matches_and_fasta", primaryKeys: []) 
  update_matches_and_fasta(
    matches_and_fasta: matches_and_fasta_UpdateInput!
    where: matches_and_fasta_WhereInput
  ): matches_and_fasta @mysqlUpdate(subgraph: "Rfam", table: "matches_and_fasta") 
  delete_matches_and_fasta(where: matches_and_fasta_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "matches_and_fasta") 
  insert_motif(motif: motif_InsertInput!) : motif @mysqlInsert(subgraph: "Rfam", table: "motif", primaryKeys: ["motif_acc"]) 
  update_motif(motif: motif_UpdateInput!, where: motif_WhereInput) : motif @mysqlUpdate(subgraph: "Rfam", table: "motif") 
  delete_motif(where: motif_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif") 
  insert_motif_database_link(motif_database_link: motif_database_link_InsertInput!) : motif_database_link @mysqlInsert(subgraph: "Rfam", table: "motif_database_link", primaryKeys: []) 
  update_motif_database_link(
    motif_database_link: motif_database_link_UpdateInput!
    where: motif_database_link_WhereInput
  ): motif_database_link @mysqlUpdate(subgraph: "Rfam", table: "motif_database_link") 
  delete_motif_database_link(where: motif_database_link_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_database_link") 
  insert_motif_family_stats(motif_family_stats: motif_family_stats_InsertInput!) : motif_family_stats @mysqlInsert(subgraph: "Rfam", table: "motif_family_stats", primaryKeys: []) 
  update_motif_family_stats(
    motif_family_stats: motif_family_stats_UpdateInput!
    where: motif_family_stats_WhereInput
  ): motif_family_stats @mysqlUpdate(subgraph: "Rfam", table: "motif_family_stats") 
  delete_motif_family_stats(where: motif_family_stats_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_family_stats") 
  insert_motif_file(motif_file: motif_file_InsertInput!) : motif_file @mysqlInsert(subgraph: "Rfam", table: "motif_file", primaryKeys: []) 
  update_motif_file(motif_file: motif_file_UpdateInput!, where: motif_file_WhereInput) : motif_file @mysqlUpdate(subgraph: "Rfam", table: "motif_file") 
  delete_motif_file(where: motif_file_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_file") 
  insert_motif_literature(motif_literature: motif_literature_InsertInput!) : motif_literature @mysqlInsert(subgraph: "Rfam", table: "motif_literature", primaryKeys: []) 
  update_motif_literature(
    motif_literature: motif_literature_UpdateInput!
    where: motif_literature_WhereInput
  ): motif_literature @mysqlUpdate(subgraph: "Rfam", table: "motif_literature") 
  delete_motif_literature(where: motif_literature_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_literature") 
  insert_motif_matches(motif_matches: motif_matches_InsertInput!) : motif_matches @mysqlInsert(subgraph: "Rfam", table: "motif_matches", primaryKeys: []) 
  update_motif_matches(motif_matches: motif_matches_UpdateInput!, where: motif_matches_WhereInput) : motif_matches @mysqlUpdate(subgraph: "Rfam", table: "motif_matches") 
  delete_motif_matches(where: motif_matches_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_matches") 
  insert_motif_old(motif_old: motif_old_InsertInput!) : motif_old @mysqlInsert(subgraph: "Rfam", table: "motif_old", primaryKeys: ["motif_acc"]) 
  update_motif_old(motif_old: motif_old_UpdateInput!, where: motif_old_WhereInput) : motif_old @mysqlUpdate(subgraph: "Rfam", table: "motif_old") 
  delete_motif_old(where: motif_old_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_old") 
  insert_motif_pdb(motif_pdb: motif_pdb_InsertInput!) : motif_pdb @mysqlInsert(subgraph: "Rfam", table: "motif_pdb", primaryKeys: []) 
  update_motif_pdb(motif_pdb: motif_pdb_UpdateInput!, where: motif_pdb_WhereInput) : motif_pdb @mysqlUpdate(subgraph: "Rfam", table: "motif_pdb") 
  delete_motif_pdb(where: motif_pdb_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_pdb") 
  insert_motif_ss_image(motif_ss_image: motif_ss_image_InsertInput!) : motif_ss_image @mysqlInsert(subgraph: "Rfam", table: "motif_ss_image", primaryKeys: []) 
  update_motif_ss_image(motif_ss_image: motif_ss_image_UpdateInput!, where: motif_ss_image_WhereInput) : motif_ss_image @mysqlUpdate(subgraph: "Rfam", table: "motif_ss_image") 
  delete_motif_ss_image(where: motif_ss_image_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "motif_ss_image") 
  insert_pdb(pdb: pdb_InsertInput!) : pdb @mysqlInsert(subgraph: "Rfam", table: "pdb", primaryKeys: ["pdb_id"]) 
  update_pdb(pdb: pdb_UpdateInput!, where: pdb_WhereInput) : pdb @mysqlUpdate(subgraph: "Rfam", table: "pdb") 
  delete_pdb(where: pdb_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "pdb") 
  insert_pdb_full_region(pdb_full_region: pdb_full_region_InsertInput!) : pdb_full_region @mysqlInsert(subgraph: "Rfam", table: "pdb_full_region", primaryKeys: []) 
  update_pdb_full_region(
    pdb_full_region: pdb_full_region_UpdateInput!
    where: pdb_full_region_WhereInput
  ): pdb_full_region @mysqlUpdate(subgraph: "Rfam", table: "pdb_full_region") 
  delete_pdb_full_region(where: pdb_full_region_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "pdb_full_region") 
  insert_pdb_full_region_old(pdb_full_region_old: pdb_full_region_old_InsertInput!) : pdb_full_region_old @mysqlInsert(subgraph: "Rfam", table: "pdb_full_region_old", primaryKeys: []) 
  update_pdb_full_region_old(
    pdb_full_region_old: pdb_full_region_old_UpdateInput!
    where: pdb_full_region_old_WhereInput
  ): pdb_full_region_old @mysqlUpdate(subgraph: "Rfam", table: "pdb_full_region_old") 
  delete_pdb_full_region_old(where: pdb_full_region_old_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "pdb_full_region_old") 
  insert_pdb_rfam_reg(pdb_rfam_reg: pdb_rfam_reg_InsertInput!) : pdb_rfam_reg @mysqlInsert(subgraph: "Rfam", table: "pdb_rfam_reg", primaryKeys: ["auto_pdb_reg"]) 
  update_pdb_rfam_reg(pdb_rfam_reg: pdb_rfam_reg_UpdateInput!, where: pdb_rfam_reg_WhereInput) : pdb_rfam_reg @mysqlUpdate(subgraph: "Rfam", table: "pdb_rfam_reg") 
  delete_pdb_rfam_reg(where: pdb_rfam_reg_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "pdb_rfam_reg") 
  insert_pdb_sequence(pdb_sequence: pdb_sequence_InsertInput!) : pdb_sequence @mysqlInsert(subgraph: "Rfam", table: "pdb_sequence", primaryKeys: ["pdb_seq"]) 
  update_pdb_sequence(pdb_sequence: pdb_sequence_UpdateInput!, where: pdb_sequence_WhereInput) : pdb_sequence @mysqlUpdate(subgraph: "Rfam", table: "pdb_sequence") 
  delete_pdb_sequence(where: pdb_sequence_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "pdb_sequence") 
  insert_processed_data(processed_data: processed_data_InsertInput!) : processed_data @mysqlInsert(subgraph: "Rfam", table: "processed_data", primaryKeys: []) 
  update_processed_data(processed_data: processed_data_UpdateInput!, where: processed_data_WhereInput) : processed_data @mysqlUpdate(subgraph: "Rfam", table: "processed_data") 
  delete_processed_data(where: processed_data_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "processed_data") 
  insert_pseudoknot(pseudoknot: pseudoknot_InsertInput!) : pseudoknot @mysqlInsert(subgraph: "Rfam", table: "pseudoknot", primaryKeys: []) 
  update_pseudoknot(pseudoknot: pseudoknot_UpdateInput!, where: pseudoknot_WhereInput) : pseudoknot @mysqlUpdate(subgraph: "Rfam", table: "pseudoknot") 
  delete_pseudoknot(where: pseudoknot_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "pseudoknot") 
  insert_refseq(refseq: refseq_InsertInput!) : refseq @mysqlInsert(subgraph: "Rfam", table: "refseq", primaryKeys: ["refseq_acc"]) 
  update_refseq(refseq: refseq_UpdateInput!, where: refseq_WhereInput) : refseq @mysqlUpdate(subgraph: "Rfam", table: "refseq") 
  delete_refseq(where: refseq_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "refseq") 
  insert_refseq_full_region(refseq_full_region: refseq_full_region_InsertInput!) : refseq_full_region @mysqlInsert(subgraph: "Rfam", table: "refseq_full_region", primaryKeys: []) 
  update_refseq_full_region(
    refseq_full_region: refseq_full_region_UpdateInput!
    where: refseq_full_region_WhereInput
  ): refseq_full_region @mysqlUpdate(subgraph: "Rfam", table: "refseq_full_region") 
  delete_refseq_full_region(where: refseq_full_region_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "refseq_full_region") 
  insert_rfamseq(rfamseq: rfamseq_InsertInput!) : rfamseq @mysqlInsert(subgraph: "Rfam", table: "rfamseq", primaryKeys: ["rfamseq_acc"]) 
  update_rfamseq(rfamseq: rfamseq_UpdateInput!, where: rfamseq_WhereInput) : rfamseq @mysqlUpdate(subgraph: "Rfam", table: "rfamseq") 
  delete_rfamseq(where: rfamseq_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "rfamseq") 
  insert_rfamseq_temp(rfamseq_temp: rfamseq_temp_InsertInput!) : rfamseq_temp @mysqlInsert(subgraph: "Rfam", table: "rfamseq_temp", primaryKeys: ["rfamseq_acc"]) 
  update_rfamseq_temp(rfamseq_temp: rfamseq_temp_UpdateInput!, where: rfamseq_temp_WhereInput) : rfamseq_temp @mysqlUpdate(subgraph: "Rfam", table: "rfamseq_temp") 
  delete_rfamseq_temp(where: rfamseq_temp_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "rfamseq_temp") 
  insert_rnacentral_matches(rnacentral_matches: rnacentral_matches_InsertInput!) : rnacentral_matches @mysqlInsert(subgraph: "Rfam", table: "rnacentral_matches", primaryKeys: []) 
  update_rnacentral_matches(
    rnacentral_matches: rnacentral_matches_UpdateInput!
    where: rnacentral_matches_WhereInput
  ): rnacentral_matches @mysqlUpdate(subgraph: "Rfam", table: "rnacentral_matches") 
  delete_rnacentral_matches(where: rnacentral_matches_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "rnacentral_matches") 
  insert_rscape_annotations(rscape_annotations: rscape_annotations_InsertInput!) : rscape_annotations @mysqlInsert(subgraph: "Rfam", table: "rscape_annotations", primaryKeys: ["rfam_acc"]) 
  update_rscape_annotations(
    rscape_annotations: rscape_annotations_UpdateInput!
    where: rscape_annotations_WhereInput
  ): rscape_annotations @mysqlUpdate(subgraph: "Rfam", table: "rscape_annotations") 
  delete_rscape_annotations(where: rscape_annotations_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "rscape_annotations") 
  insert_secondary_structure_image(secondary_structure_image: secondary_structure_image_InsertInput!) : secondary_structure_image @mysqlInsert(subgraph: "Rfam", table: "secondary_structure_image", primaryKeys: []) 
  update_secondary_structure_image(
    secondary_structure_image: secondary_structure_image_UpdateInput!
    where: secondary_structure_image_WhereInput
  ): secondary_structure_image @mysqlUpdate(subgraph: "Rfam", table: "secondary_structure_image") 
  delete_secondary_structure_image(where: secondary_structure_image_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "secondary_structure_image") 
  insert_seed_region(seed_region: seed_region_InsertInput!) : seed_region @mysqlInsert(subgraph: "Rfam", table: "seed_region", primaryKeys: []) 
  update_seed_region(seed_region: seed_region_UpdateInput!, where: seed_region_WhereInput) : seed_region @mysqlUpdate(subgraph: "Rfam", table: "seed_region") 
  delete_seed_region(where: seed_region_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "seed_region") 
  insert_sunburst(sunburst: sunburst_InsertInput!) : sunburst @mysqlInsert(subgraph: "Rfam", table: "sunburst", primaryKeys: []) 
  update_sunburst(sunburst: sunburst_UpdateInput!, where: sunburst_WhereInput) : sunburst @mysqlUpdate(subgraph: "Rfam", table: "sunburst") 
  delete_sunburst(where: sunburst_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "sunburst") 
  insert_taxonomic_tree(taxonomic_tree: taxonomic_tree_InsertInput!) : taxonomic_tree @mysqlInsert(subgraph: "Rfam", table: "taxonomic_tree", primaryKeys: ["ncbi_code"]) 
  update_taxonomic_tree(taxonomic_tree: taxonomic_tree_UpdateInput!, where: taxonomic_tree_WhereInput) : taxonomic_tree @mysqlUpdate(subgraph: "Rfam", table: "taxonomic_tree") 
  delete_taxonomic_tree(where: taxonomic_tree_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "taxonomic_tree") 
  insert_taxonomy(taxonomy: taxonomy_InsertInput!) : taxonomy @mysqlInsert(subgraph: "Rfam", table: "taxonomy", primaryKeys: ["ncbi_id"]) 
  update_taxonomy(taxonomy: taxonomy_UpdateInput!, where: taxonomy_WhereInput) : taxonomy @mysqlUpdate(subgraph: "Rfam", table: "taxonomy") 
  delete_taxonomy(where: taxonomy_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "taxonomy") 
  insert_taxonomy_websearch(taxonomy_websearch: taxonomy_websearch_InsertInput!) : taxonomy_websearch @mysqlInsert(subgraph: "Rfam", table: "taxonomy_websearch", primaryKeys: []) 
  update_taxonomy_websearch(
    taxonomy_websearch: taxonomy_websearch_UpdateInput!
    where: taxonomy_websearch_WhereInput
  ): taxonomy_websearch @mysqlUpdate(subgraph: "Rfam", table: "taxonomy_websearch") 
  delete_taxonomy_websearch(where: taxonomy_websearch_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "taxonomy_websearch") 
  insert_version(version: version_InsertInput!) : version @mysqlInsert(subgraph: "Rfam", table: "version", primaryKeys: ["rfam_release"]) 
  update_version(version: version_UpdateInput!, where: version_WhereInput) : version @mysqlUpdate(subgraph: "Rfam", table: "version") 
  delete_version(where: version_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "version") 
  insert_wikitext(wikitext: wikitext_InsertInput!) : wikitext @mysqlInsert(subgraph: "Rfam", table: "wikitext", primaryKeys: ["auto_wiki"]) 
  update_wikitext(wikitext: wikitext_UpdateInput!, where: wikitext_WhereInput) : wikitext @mysqlUpdate(subgraph: "Rfam", table: "wikitext") 
  delete_wikitext(where: wikitext_WhereInput) : Boolean @mysqlDelete(subgraph: "Rfam", table: "wikitext") 
}

enum OrderBy @join__type(graph: RFAM)  {
  asc @join__enumValue(graph: RFAM) 
  desc @join__enumValue(graph: RFAM) 
}

enum _post_process_status @join__type(graph: RFAM)  {
  DONE @join__enumValue(graph: RFAM) 
  PEND @join__enumValue(graph: RFAM) 
  RUN @join__enumValue(graph: RFAM) 
  FAIL @join__enumValue(graph: RFAM) 
  KILL @join__enumValue(graph: RFAM) 
}

enum alignment_and_tree_type @join__type(graph: RFAM)  {
  seed @join__enumValue(graph: RFAM) 
  seedTax @join__enumValue(graph: RFAM) 
  genome @join__enumValue(graph: RFAM) 
  genomeTax @join__enumValue(graph: RFAM) 
}

enum rfamseq_mol_type @join__type(graph: RFAM)  {
  protein @join__enumValue(graph: RFAM) 
  genomic_DNA @join__enumValue(graph: RFAM) 
  DNA @join__enumValue(graph: RFAM) 
  ss_DNA @join__enumValue(graph: RFAM) 
  RNA @join__enumValue(graph: RFAM) 
  genomic_RNA @join__enumValue(graph: RFAM) 
  ds_RNA @join__enumValue(graph: RFAM) 
  ss_cRNA @join__enumValue(graph: RFAM) 
  ss_RNA @join__enumValue(graph: RFAM) 
  mRNA @join__enumValue(graph: RFAM) 
  tRNA @join__enumValue(graph: RFAM) 
  rRNA @join__enumValue(graph: RFAM) 
  snoRNA @join__enumValue(graph: RFAM) 
  snRNA @join__enumValue(graph: RFAM) 
  scRNA @join__enumValue(graph: RFAM) 
  pre_RNA @join__enumValue(graph: RFAM) 
  other_RNA @join__enumValue(graph: RFAM) 
  other_DNA @join__enumValue(graph: RFAM) 
  unassigned_DNA @join__enumValue(graph: RFAM) 
  unassigned_RNA @join__enumValue(graph: RFAM) 
  viral_cRNA @join__enumValue(graph: RFAM) 
  cRNA @join__enumValue(graph: RFAM) 
  transcribed_RNA @join__enumValue(graph: RFAM) 
  ncRNA @join__enumValue(graph: RFAM) 
  ribozyme @join__enumValue(graph: RFAM) 
  antisense_RNA @join__enumValue(graph: RFAM) 
  other @join__enumValue(graph: RFAM) 
}

enum full_region_truncated @join__type(graph: RFAM)  {
  _0 @join__enumValue(graph: RFAM) 
  _5 @join__enumValue(graph: RFAM) 
  _3 @join__enumValue(graph: RFAM) 
  _53 @join__enumValue(graph: RFAM) 
}

enum full_region_type @join__type(graph: RFAM)  {
  seed @join__enumValue(graph: RFAM) 
  full @join__enumValue(graph: RFAM) 
}

enum html_alignment_type @join__type(graph: RFAM)  {
  seed @join__enumValue(graph: RFAM) 
  genome @join__enumValue(graph: RFAM) 
  seedColorstock @join__enumValue(graph: RFAM) 
  genomeColorstock @join__enumValue(graph: RFAM) 
}

enum matches_and_fasta_type @join__type(graph: RFAM)  {
  rfamseq @join__enumValue(graph: RFAM) 
  genome @join__enumValue(graph: RFAM) 
  refseq @join__enumValue(graph: RFAM) 
}

enum pseudoknot_source @join__type(graph: RFAM)  {
  seed @join__enumValue(graph: RFAM) 
  rscape @join__enumValue(graph: RFAM) 
}

enum refseq_full_region_truncated @join__type(graph: RFAM)  {
  _0 @join__enumValue(graph: RFAM) 
  _5 @join__enumValue(graph: RFAM) 
  _3 @join__enumValue(graph: RFAM) 
  _53 @join__enumValue(graph: RFAM) 
}

enum secondary_structure_image_type @join__type(graph: RFAM)  {
  cons @join__enumValue(graph: RFAM) 
  dist @join__enumValue(graph: RFAM) 
  ent @join__enumValue(graph: RFAM) 
  fcbp @join__enumValue(graph: RFAM) 
  cov @join__enumValue(graph: RFAM) 
  disttruc @join__enumValue(graph: RFAM) 
  maxcm @join__enumValue(graph: RFAM) 
  norm @join__enumValue(graph: RFAM) 
  rchie @join__enumValue(graph: RFAM) 
  species @join__enumValue(graph: RFAM) 
  ss @join__enumValue(graph: RFAM) 
  rscape @join__enumValue(graph: RFAM) 
  rscape_cyk @join__enumValue(graph: RFAM) 
}

enum sunburst_type @join__type(graph: RFAM)  {
  rfamseq @join__enumValue(graph: RFAM) 
  genome @join__enumValue(graph: RFAM) 
  refseq @join__enumValue(graph: RFAM) 
}

enum _genome_data_status @join__type(graph: RFAM)  {
  DONE @join__enumValue(graph: RFAM) 
  PEND @join__enumValue(graph: RFAM) 
  RUN @join__enumValue(graph: RFAM) 
  FAIL @join__enumValue(graph: RFAM) 
  KILL @join__enumValue(graph: RFAM) 
}

enum genome_assembly_level @join__type(graph: RFAM)  {
  contig @join__enumValue(graph: RFAM) 
  chromosome @join__enumValue(graph: RFAM) 
  scaffold @join__enumValue(graph: RFAM) 
  complete_genome @join__enumValue(graph: RFAM) 
}

enum genome_temp_assembly_level @join__type(graph: RFAM)  {
  contig @join__enumValue(graph: RFAM) 
  chromosome @join__enumValue(graph: RFAM) 
  scaffold @join__enumValue(graph: RFAM) 
  complete_genome @join__enumValue(graph: RFAM) 
}

enum rfamseq_temp_mol_type @join__type(graph: RFAM)  {
  protein @join__enumValue(graph: RFAM) 
  genomic_DNA @join__enumValue(graph: RFAM) 
  DNA @join__enumValue(graph: RFAM) 
  ss_DNA @join__enumValue(graph: RFAM) 
  RNA @join__enumValue(graph: RFAM) 
  genomic_RNA @join__enumValue(graph: RFAM) 
  ds_RNA @join__enumValue(graph: RFAM) 
  ss_cRNA @join__enumValue(graph: RFAM) 
  ss_RNA @join__enumValue(graph: RFAM) 
  mRNA @join__enumValue(graph: RFAM) 
  tRNA @join__enumValue(graph: RFAM) 
  rRNA @join__enumValue(graph: RFAM) 
  snoRNA @join__enumValue(graph: RFAM) 
  snRNA @join__enumValue(graph: RFAM) 
  scRNA @join__enumValue(graph: RFAM) 
  pre_RNA @join__enumValue(graph: RFAM) 
  other_RNA @join__enumValue(graph: RFAM) 
  other_DNA @join__enumValue(graph: RFAM) 
  unassigned_DNA @join__enumValue(graph: RFAM) 
  unassigned_RNA @join__enumValue(graph: RFAM) 
  viral_cRNA @join__enumValue(graph: RFAM) 
  cRNA @join__enumValue(graph: RFAM) 
  transcribed_RNA @join__enumValue(graph: RFAM) 
  ncRNA @join__enumValue(graph: RFAM) 
  ribozyme @join__enumValue(graph: RFAM) 
  antisense_RNA @join__enumValue(graph: RFAM) 
  other @join__enumValue(graph: RFAM) 
}

enum rnacentral_matches_type @join__type(graph: RFAM)  {
  seed @join__enumValue(graph: RFAM) 
  full @join__enumValue(graph: RFAM) 
}

input _annotated_file_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  seed: String
  cm: String
  full: String
}

input _annotated_file_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  seed: OrderBy
  cm: OrderBy
  full: OrderBy
}

input _family_file_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  seed: String
  cm: String
}

input _family_file_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  seed: OrderBy
  cm: OrderBy
}

input family_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfam_id: String
  auto_wiki: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: String
  trusted_cutoff: String
  noise_cutoff: String
  comment: String
  previous_id: String
  cmbuild: String
  cmcalibrate: String
  cmsearch: String
  num_seed: String
  num_full: String
  num_genome_seq: String
  num_refseq: String
  type: String
  structure_source: String
  number_of_species: String
  number_3d_structures: String
  num_pseudonokts: String
  tax_seed: String
  ecmli_lambda: String
  ecmli_mu: String
  ecmli_cal_db: String
  ecmli_cal_hits: String
  maxl: String
  clen: String
  match_pair_node: String
  hmm_tau: String
  hmm_lambda: String
  created: String
  updated: String
}

input family_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  rfam_id: OrderBy
  auto_wiki: OrderBy
  description: OrderBy
  author: OrderBy
  seed_source: OrderBy
  gathering_cutoff: OrderBy
  trusted_cutoff: OrderBy
  noise_cutoff: OrderBy
  comment: OrderBy
  previous_id: OrderBy
  cmbuild: OrderBy
  cmcalibrate: OrderBy
  cmsearch: OrderBy
  num_seed: OrderBy
  num_full: OrderBy
  num_genome_seq: OrderBy
  num_refseq: OrderBy
  type: OrderBy
  structure_source: OrderBy
  number_of_species: OrderBy
  number_3d_structures: OrderBy
  num_pseudonokts: OrderBy
  tax_seed: OrderBy
  ecmli_lambda: OrderBy
  ecmli_mu: OrderBy
  ecmli_cal_db: OrderBy
  ecmli_cal_hits: OrderBy
  maxl: OrderBy
  clen: OrderBy
  match_pair_node: OrderBy
  hmm_tau: OrderBy
  hmm_lambda: OrderBy
  created: OrderBy
  updated: OrderBy
}

input _overlap_membership_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  auto_overlap: String
}

input _overlap_membership_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  auto_overlap: OrderBy
}

input _overlap_WhereInput @join__type(graph: RFAM)  {
  auto_overlap: String
  id: String
  description: String
  author: String
  comment: String
}

input _overlap_OrderByInput @join__type(graph: RFAM)  {
  auto_overlap: OrderBy
  id: OrderBy
  description: OrderBy
  author: OrderBy
  comment: OrderBy
}

input _post_process_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  author: String
  uuid: String
  status: String
  created: String
  opened: String
  closed: String
  message: String
  lsf_id: String
}

input _post_process_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  author: OrderBy
  uuid: OrderBy
  status: OrderBy
  created: OrderBy
  opened: OrderBy
  closed: OrderBy
  message: OrderBy
  lsf_id: OrderBy
}

input alignment_and_tree_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  type: String
  alignment: String
  tree: String
  treemethod: String
  average_length: String
  percent_id: String
  number_of_sequences: String
}

input alignment_and_tree_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  type: OrderBy
  alignment: OrderBy
  tree: OrderBy
  treemethod: OrderBy
  average_length: OrderBy
  percent_id: OrderBy
  number_of_sequences: OrderBy
}

input clan_WhereInput @join__type(graph: RFAM)  {
  clan_acc: String
  id: String
  previous_id: String
  description: String
  author: String
  comment: String
  created: String
  updated: String
}

input clan_OrderByInput @join__type(graph: RFAM)  {
  clan_acc: OrderBy
  id: OrderBy
  previous_id: OrderBy
  description: OrderBy
  author: OrderBy
  comment: OrderBy
  created: OrderBy
  updated: OrderBy
}

input clan_database_link_WhereInput @join__type(graph: RFAM)  {
  clan_acc: String
  db_id: String
  comment: String
  db_link: String
  other_params: String
}

input clan_database_link_OrderByInput @join__type(graph: RFAM)  {
  clan_acc: OrderBy
  db_id: OrderBy
  comment: OrderBy
  db_link: OrderBy
  other_params: OrderBy
}

input clan_literature_reference_WhereInput @join__type(graph: RFAM)  {
  clan_acc: String
  pmid: String
  comment: String
  order_added: String
}

input clan_literature_reference_OrderByInput @join__type(graph: RFAM)  {
  clan_acc: OrderBy
  pmid: OrderBy
  comment: OrderBy
  order_added: OrderBy
}

input literature_reference_WhereInput @join__type(graph: RFAM)  {
  pmid: String
  title: String
  author: String
  journal: String
}

input literature_reference_OrderByInput @join__type(graph: RFAM)  {
  pmid: OrderBy
  title: OrderBy
  author: OrderBy
  journal: OrderBy
}

input family_literature_reference_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pmid: String
  comment: String
  order_added: String
}

input family_literature_reference_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  pmid: OrderBy
  comment: OrderBy
  order_added: OrderBy
}

input motif_old_WhereInput @join__type(graph: RFAM)  {
  motif_acc: String
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: String
  trusted_cutoff: String
  noise_cutoff: String
  cmbuild: String
  cmcalibrate: String
  type: String
  ecmli_lambda: String
  ecmli_mu: String
  ecmli_cal_db: String
  ecmli_cal_hits: String
  maxl: String
  clen: String
  match_pair_node: String
  hmm_tau: String
  hmm_lambda: String
  created: String
  updated: String
}

input motif_old_OrderByInput @join__type(graph: RFAM)  {
  motif_acc: OrderBy
  motif_id: OrderBy
  description: OrderBy
  author: OrderBy
  seed_source: OrderBy
  gathering_cutoff: OrderBy
  trusted_cutoff: OrderBy
  noise_cutoff: OrderBy
  cmbuild: OrderBy
  cmcalibrate: OrderBy
  type: OrderBy
  ecmli_lambda: OrderBy
  ecmli_mu: OrderBy
  ecmli_cal_db: OrderBy
  ecmli_cal_hits: OrderBy
  maxl: OrderBy
  clen: OrderBy
  match_pair_node: OrderBy
  hmm_tau: OrderBy
  hmm_lambda: OrderBy
  created: OrderBy
  updated: OrderBy
}

input motif_family_stats_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  motif_acc: String
  num_hits: String
  frac_hits: String
  sum_bits: String
  avg_weight_bits: String
}

input motif_family_stats_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  motif_acc: OrderBy
  num_hits: OrderBy
  frac_hits: OrderBy
  sum_bits: OrderBy
  avg_weight_bits: OrderBy
}

input motif_literature_WhereInput @join__type(graph: RFAM)  {
  motif_acc: String
  pmid: String
  comment: String
  order_added: String
}

input motif_literature_OrderByInput @join__type(graph: RFAM)  {
  motif_acc: OrderBy
  pmid: OrderBy
  comment: OrderBy
  order_added: OrderBy
}

input rfamseq_WhereInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String
  accession: String
  version: String
  ncbi_id: String
  mol_type: String
  length: String
  description: String
  previous_acc: String
  source: String
}

input rfamseq_OrderByInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: OrderBy
  accession: OrderBy
  version: OrderBy
  ncbi_id: OrderBy
  mol_type: OrderBy
  length: OrderBy
  description: OrderBy
  previous_acc: OrderBy
  source: OrderBy
}

input features_WhereInput @join__type(graph: RFAM)  {
  rfamseq_acc: String
  database_id: String
  primary_id: String
  secondary_id: String
  feat_orient: String
  feat_start: String
  feat_end: String
  quaternary_id: String
}

input features_OrderByInput @join__type(graph: RFAM)  {
  rfamseq_acc: OrderBy
  database_id: OrderBy
  primary_id: OrderBy
  secondary_id: OrderBy
  feat_orient: OrderBy
  feat_start: OrderBy
  feat_end: OrderBy
  quaternary_id: OrderBy
}

input full_region_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfamseq_acc: String
  seq_start: String
  seq_end: String
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: String
  evalue_score: String
  cm_start: String
  cm_end: String
  truncated: String
  type: String
  is_significant: String
}

input full_region_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  rfamseq_acc: OrderBy
  seq_start: OrderBy
  seq_end: OrderBy
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: OrderBy
  evalue_score: OrderBy
  cm_start: OrderBy
  cm_end: OrderBy
  truncated: OrderBy
  type: OrderBy
  is_significant: OrderBy
}

input motif_matches_WhereInput @join__type(graph: RFAM)  {
  motif_acc: String
  rfam_acc: String
  rfamseq_acc: String
  rfamseq_start: String
  rfamseq_stop: String
  query_start: String
  query_stop: String
  motif_start: String
  motif_stop: String
  e_value: String
  bit_score: String
}

input motif_matches_OrderByInput @join__type(graph: RFAM)  {
  motif_acc: OrderBy
  rfam_acc: OrderBy
  rfamseq_acc: OrderBy
  rfamseq_start: OrderBy
  rfamseq_stop: OrderBy
  query_start: OrderBy
  query_stop: OrderBy
  motif_start: OrderBy
  motif_stop: OrderBy
  e_value: OrderBy
  bit_score: OrderBy
}

input pdb_rfam_reg_WhereInput @join__type(graph: RFAM)  {
  auto_pdb_reg: String
  rfam_acc: String
  pdb_seq: String
  pdb_id: String
  chain: String
  pdb_res_start: String
  pdb_res_end: String
  rfamseq_acc: String
  seq_start: String
  seq_end: String
  hex_colour: String
}

input pdb_rfam_reg_OrderByInput @join__type(graph: RFAM)  {
  auto_pdb_reg: OrderBy
  rfam_acc: OrderBy
  pdb_seq: OrderBy
  pdb_id: OrderBy
  chain: OrderBy
  pdb_res_start: OrderBy
  pdb_res_end: OrderBy
  rfamseq_acc: OrderBy
  seq_start: OrderBy
  seq_end: OrderBy
  hex_colour: OrderBy
}

input pdb_WhereInput @join__type(graph: RFAM)  {
  pdb_id: String
  keywords: String
  title: String
  date: String
  resolution: String
  method: String
  author: String
}

input pdb_OrderByInput @join__type(graph: RFAM)  {
  pdb_id: OrderBy
  keywords: OrderBy
  title: OrderBy
  date: OrderBy
  resolution: OrderBy
  method: OrderBy
  author: OrderBy
}

input pdb_sequence_WhereInput @join__type(graph: RFAM)  {
  pdb_seq: String
  pdb_id: String
  chain: String
}

input pdb_sequence_OrderByInput @join__type(graph: RFAM)  {
  pdb_seq: OrderBy
  pdb_id: OrderBy
  chain: OrderBy
}

input taxonomy_WhereInput @join__type(graph: RFAM)  {
  ncbi_id: String
  species: String
  tax_string: String
  tree_display_name: String
  align_display_name: String
}

input taxonomy_OrderByInput @join__type(graph: RFAM)  {
  ncbi_id: OrderBy
  species: OrderBy
  tax_string: OrderBy
  tree_display_name: OrderBy
  align_display_name: OrderBy
}

input family_ncbi_WhereInput @join__type(graph: RFAM)  {
  ncbi_id: String
  """
  Is this really needed?
  """
  rfam_id: String
  rfam_acc: String
}

input family_ncbi_OrderByInput @join__type(graph: RFAM)  {
  ncbi_id: OrderBy
  """
  Is this really needed?
  """
  rfam_id: OrderBy
  rfam_acc: OrderBy
}

input seed_region_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfamseq_acc: String
  seq_start: String
  seq_end: String
  md5: String
}

input seed_region_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  rfamseq_acc: OrderBy
  seq_start: OrderBy
  seq_end: OrderBy
  md5: OrderBy
}

input motif_pdb_WhereInput @join__type(graph: RFAM)  {
  motif_acc: String
  pdb_id: String
  chain: String
  pdb_start: String
  pdb_end: String
}

input motif_pdb_OrderByInput @join__type(graph: RFAM)  {
  motif_acc: OrderBy
  pdb_id: OrderBy
  chain: OrderBy
  pdb_start: OrderBy
  pdb_end: OrderBy
}

input motif_ss_image_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  motif_acc: String
  image: String
}

input motif_ss_image_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  motif_acc: OrderBy
  image: OrderBy
}

input clan_membership_WhereInput @join__type(graph: RFAM)  {
  clan_acc: String
  rfam_acc: String
}

input clan_membership_OrderByInput @join__type(graph: RFAM)  {
  clan_acc: OrderBy
  rfam_acc: OrderBy
}

input database_link_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  db_id: String
  comment: String
  db_link: String
  other_params: String
}

input database_link_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  db_id: OrderBy
  comment: OrderBy
  db_link: OrderBy
  other_params: OrderBy
}

input wikitext_WhereInput @join__type(graph: RFAM)  {
  auto_wiki: String
  title: String
}

input wikitext_OrderByInput @join__type(graph: RFAM)  {
  auto_wiki: OrderBy
  title: OrderBy
}

input family_long_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  referenece_structure: String
  reference_sequence: String
}

input family_long_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  referenece_structure: OrderBy
  reference_sequence: OrderBy
}

input html_alignment_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  type: String
  html: String
  block: String
  html_alignmentscol: String
}

input html_alignment_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  type: OrderBy
  html: OrderBy
  block: OrderBy
  html_alignmentscol: OrderBy
}

input matches_and_fasta_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  match_list: String
  fasta: String
  type: String
}

input matches_and_fasta_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  match_list: OrderBy
  fasta: OrderBy
  type: OrderBy
}

input processed_data_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  cm: String
  ss_stats_pbp: String
  ss_stats_seq: String
  ss_stats_fam: String
  scores_graph: String
  genome_full: String
  genome_full_md5: String
  refseq_full: String
  refseq_full_md5: String
}

input processed_data_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  cm: OrderBy
  ss_stats_pbp: OrderBy
  ss_stats_seq: OrderBy
  ss_stats_fam: OrderBy
  scores_graph: OrderBy
  genome_full: OrderBy
  genome_full_md5: OrderBy
  refseq_full: OrderBy
  refseq_full_md5: OrderBy
}

input pseudoknot_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pseudoknot_id: String
  source: String
  covariation: String
}

input pseudoknot_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  pseudoknot_id: OrderBy
  source: OrderBy
  covariation: OrderBy
}

input refseq_full_region_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  refseq_acc: String
  seq_start: String
  seq_end: String
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: String
  evalue_score: String
  cm_start: String
  cm_end: String
  truncated: String
}

input refseq_full_region_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  refseq_acc: OrderBy
  seq_start: OrderBy
  seq_end: OrderBy
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: OrderBy
  evalue_score: OrderBy
  cm_start: OrderBy
  cm_end: OrderBy
  truncated: OrderBy
}

input refseq_WhereInput @join__type(graph: RFAM)  {
  refseq_acc: String
  description: String
  species: String
  ncbi_taxid: String
}

input refseq_OrderByInput @join__type(graph: RFAM)  {
  refseq_acc: OrderBy
  description: OrderBy
  species: OrderBy
  ncbi_taxid: OrderBy
}

input secondary_structure_image_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  type: String
  image: String
}

input secondary_structure_image_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  type: OrderBy
  image: OrderBy
}

input sunburst_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  data: String
  type: String
}

input sunburst_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  data: OrderBy
  type: OrderBy
}

input _genome_data_WhereInput @join__type(graph: RFAM)  {
  data_file: String
  author: String
  uuid: String
  status: String
  created: String
  opened: String
  closed: String
  message: String
  lsf_id: String
}

input _genome_data_OrderByInput @join__type(graph: RFAM)  {
  data_file: OrderBy
  author: OrderBy
  uuid: OrderBy
  status: OrderBy
  created: OrderBy
  opened: OrderBy
  closed: OrderBy
  message: OrderBy
  lsf_id: OrderBy
}

input _lock_WhereInput @join__type(graph: RFAM)  {
  locked: String
  locker: String
  """
  Do you lock individual families? Do ever lock the whole database?
  """
  allowCommits: String
  alsoAllow: String
}

input _lock_OrderByInput @join__type(graph: RFAM)  {
  locked: OrderBy
  locker: OrderBy
  """
  Do you lock individual families? Do ever lock the whole database?
  """
  allowCommits: OrderBy
  alsoAllow: OrderBy
}

input author_WhereInput @join__type(graph: RFAM)  {
  author_id: String
  name: String
  last_name: String
  initials: String
  orcid: String
  synonyms: String
}

input author_OrderByInput @join__type(graph: RFAM)  {
  author_id: OrderBy
  name: OrderBy
  last_name: OrderBy
  initials: OrderBy
  orcid: OrderBy
  synonyms: OrderBy
}

input db_version_WhereInput @join__type(graph: RFAM)  {
  rfam_release: String
  rfam_release_date: String
  number_families: String
  embl_release: String
  genome_collection_date: String
  refseq_version: String
  pdb_date: String
  infernal_version: String
}

input db_version_OrderByInput @join__type(graph: RFAM)  {
  rfam_release: OrderBy
  rfam_release_date: OrderBy
  number_families: OrderBy
  embl_release: OrderBy
  genome_collection_date: OrderBy
  refseq_version: OrderBy
  pdb_date: OrderBy
  infernal_version: OrderBy
}

input dead_clan_WhereInput @join__type(graph: RFAM)  {
  clan_acc: String
  """
  Added. Add author?
  """
  clan_id: String
  comment: String
  forward_to: String
  user: String
}

input dead_clan_OrderByInput @join__type(graph: RFAM)  {
  clan_acc: OrderBy
  """
  Added. Add author?
  """
  clan_id: OrderBy
  comment: OrderBy
  forward_to: OrderBy
  user: OrderBy
}

input dead_family_WhereInput @join__type(graph: RFAM)  {
  """
  record the author???
  """
  rfam_acc: String
  rfam_id: String
  comment: String
  forward_to: String
  """
  wikipedia page title
  
  """
  title: String
  user: String
}

input dead_family_OrderByInput @join__type(graph: RFAM)  {
  """
  record the author???
  """
  rfam_acc: OrderBy
  rfam_id: OrderBy
  comment: OrderBy
  forward_to: OrderBy
  """
  wikipedia page title
  
  """
  title: OrderBy
  user: OrderBy
}

input ensembl_names_WhereInput @join__type(graph: RFAM)  {
  insdc: String
  ensembl: String
}

input ensembl_names_OrderByInput @join__type(graph: RFAM)  {
  insdc: OrderBy
  ensembl: OrderBy
}

input family_author_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  author_id: String
  desc_order: String
}

input family_author_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  author_id: OrderBy
  desc_order: OrderBy
}

input genome_WhereInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  assembly_acc: String
  assembly_version: String
  wgs_acc: String
  wgs_version: String
  assembly_name: String
  assembly_level: String
  study_ref: String
  description: String
  total_length: String
  ungapped_length: String
  circular: String
  ncbi_id: String
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: String
  num_families: String
  is_reference: String
  is_representative: String
  created: String
  updated: String
}

input genome_OrderByInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: OrderBy
  assembly_acc: OrderBy
  assembly_version: OrderBy
  wgs_acc: OrderBy
  wgs_version: OrderBy
  assembly_name: OrderBy
  assembly_level: OrderBy
  study_ref: OrderBy
  description: OrderBy
  total_length: OrderBy
  ungapped_length: OrderBy
  circular: OrderBy
  ncbi_id: OrderBy
  scientific_name: OrderBy
  common_name: OrderBy
  kingdom: OrderBy
  num_rfam_regions: OrderBy
  num_families: OrderBy
  is_reference: OrderBy
  is_representative: OrderBy
  created: OrderBy
  updated: OrderBy
}

input genome_temp_WhereInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  assembly_acc: String
  assembly_version: String
  wgs_acc: String
  wgs_version: String
  assembly_name: String
  assembly_level: String
  study_ref: String
  description: String
  total_length: String
  ungapped_length: String
  circular: String
  ncbi_id: String
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: String
  num_families: String
  is_reference: String
  is_representative: String
  created: String
  updated: String
}

input genome_temp_OrderByInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: OrderBy
  assembly_acc: OrderBy
  assembly_version: OrderBy
  wgs_acc: OrderBy
  wgs_version: OrderBy
  assembly_name: OrderBy
  assembly_level: OrderBy
  study_ref: OrderBy
  description: OrderBy
  total_length: OrderBy
  ungapped_length: OrderBy
  circular: OrderBy
  ncbi_id: OrderBy
  scientific_name: OrderBy
  common_name: OrderBy
  kingdom: OrderBy
  num_rfam_regions: OrderBy
  num_families: OrderBy
  is_reference: OrderBy
  is_representative: OrderBy
  created: OrderBy
  updated: OrderBy
}

input genseq_WhereInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

input genseq_OrderByInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: OrderBy
  rfamseq_acc: OrderBy
  chromosome_name: OrderBy
  chromosome_type: OrderBy
  version: OrderBy
}

input genseq_temp_WhereInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

input genseq_temp_OrderByInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: OrderBy
  rfamseq_acc: OrderBy
  chromosome_name: OrderBy
  chromosome_type: OrderBy
  version: OrderBy
}

input keywords_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfam_id: String
  description: String
  rfam_general: String
  literature: String
  wiki: String
  pdb_mappings: String
  clan_info: String
}

input keywords_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  rfam_id: OrderBy
  description: OrderBy
  rfam_general: OrderBy
  literature: OrderBy
  wiki: OrderBy
  pdb_mappings: OrderBy
  clan_info: OrderBy
}

input motif_WhereInput @join__type(graph: RFAM)  {
  motif_acc: String
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: String
  trusted_cutoff: String
  noise_cutoff: String
  cmbuild: String
  cmcalibrate: String
  type: String
  num_seed: String
  average_id: String
  average_sqlen: String
  ecmli_lambda: String
  ecmli_mu: String
  ecmli_cal_db: String
  ecmli_cal_hits: String
  maxl: String
  clen: String
  match_pair_node: String
  hmm_tau: String
  hmm_lambda: String
  wiki: String
  created: String
  updated: String
}

input motif_OrderByInput @join__type(graph: RFAM)  {
  motif_acc: OrderBy
  motif_id: OrderBy
  description: OrderBy
  author: OrderBy
  seed_source: OrderBy
  gathering_cutoff: OrderBy
  trusted_cutoff: OrderBy
  noise_cutoff: OrderBy
  cmbuild: OrderBy
  cmcalibrate: OrderBy
  type: OrderBy
  num_seed: OrderBy
  average_id: OrderBy
  average_sqlen: OrderBy
  ecmli_lambda: OrderBy
  ecmli_mu: OrderBy
  ecmli_cal_db: OrderBy
  ecmli_cal_hits: OrderBy
  maxl: OrderBy
  clen: OrderBy
  match_pair_node: OrderBy
  hmm_tau: OrderBy
  hmm_lambda: OrderBy
  wiki: OrderBy
  created: OrderBy
  updated: OrderBy
}

input motif_database_link_WhereInput @join__type(graph: RFAM)  {
  motif_acc: String
  db_id: String
  comment: String
  db_link: String
  other_params: String
}

input motif_database_link_OrderByInput @join__type(graph: RFAM)  {
  motif_acc: OrderBy
  db_id: OrderBy
  comment: OrderBy
  db_link: OrderBy
  other_params: OrderBy
}

input motif_file_WhereInput @join__type(graph: RFAM)  {
  motif_acc: String
  seed: String
  cm: String
}

input motif_file_OrderByInput @join__type(graph: RFAM)  {
  motif_acc: OrderBy
  seed: OrderBy
  cm: OrderBy
}

input pdb_full_region_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pdb_id: String
  chain: String
  pdb_start: String
  pdb_end: String
  bit_score: String
  evalue_score: String
  cm_start: String
  cm_end: String
  hex_colour: String
  is_significant: String
}

input pdb_full_region_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  pdb_id: OrderBy
  chain: OrderBy
  pdb_start: OrderBy
  pdb_end: OrderBy
  bit_score: OrderBy
  evalue_score: OrderBy
  cm_start: OrderBy
  cm_end: OrderBy
  hex_colour: OrderBy
  is_significant: OrderBy
}

input pdb_full_region_old_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pdb_id: String
  chain: String
  pdb_start: String
  pdb_end: String
  bit_score: String
  evalue_score: String
  cm_start: String
  cm_end: String
  hex_colour: String
  is_significant: String
}

input pdb_full_region_old_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  pdb_id: OrderBy
  chain: OrderBy
  pdb_start: OrderBy
  pdb_end: OrderBy
  bit_score: OrderBy
  evalue_score: OrderBy
  cm_start: OrderBy
  cm_end: OrderBy
  hex_colour: OrderBy
  is_significant: OrderBy
}

input rfamseq_temp_WhereInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String
  accession: String
  version: String
  ncbi_id: String
  mol_type: String
  length: String
  description: String
  previous_acc: String
  source: String
}

input rfamseq_temp_OrderByInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: OrderBy
  accession: OrderBy
  version: OrderBy
  ncbi_id: OrderBy
  mol_type: OrderBy
  length: OrderBy
  description: OrderBy
  previous_acc: OrderBy
  source: OrderBy
}

input rnacentral_matches_WhereInput @join__type(graph: RFAM)  {
  rfamseq_acc: String
  seq_start: String
  seq_end: String
  md5: String
  rnacentral_id: String
  type: String
}

input rnacentral_matches_OrderByInput @join__type(graph: RFAM)  {
  rfamseq_acc: OrderBy
  seq_start: OrderBy
  seq_end: OrderBy
  md5: OrderBy
  rnacentral_id: OrderBy
  type: OrderBy
}

input rscape_annotations_WhereInput @join__type(graph: RFAM)  {
  rfam_acc: String
  F: String
  sensitivity: String
  ppv: String
  true: String
  found: String
  tp: String
  avgid: String
  alen: String
  nseq: String
}

input rscape_annotations_OrderByInput @join__type(graph: RFAM)  {
  rfam_acc: OrderBy
  F: OrderBy
  sensitivity: OrderBy
  ppv: OrderBy
  true: OrderBy
  found: OrderBy
  tp: OrderBy
  avgid: OrderBy
  alen: OrderBy
  nseq: OrderBy
}

input taxonomic_tree_WhereInput @join__type(graph: RFAM)  {
  ncbi_code: String
  species: String
  taxonomy: String
  lft: String
  rgt: String
  parent: String
  level: String
}

input taxonomic_tree_OrderByInput @join__type(graph: RFAM)  {
  ncbi_code: OrderBy
  species: OrderBy
  taxonomy: OrderBy
  lft: OrderBy
  rgt: OrderBy
  parent: OrderBy
  level: OrderBy
}

input taxonomy_websearch_WhereInput @join__type(graph: RFAM)  {
  ncbi_id: String
  species: String
  rgt: String
  taxonomy: String
  lft: String
  parent: String
  level: String
  minimal: String
  rank: String
}

input taxonomy_websearch_OrderByInput @join__type(graph: RFAM)  {
  ncbi_id: OrderBy
  species: OrderBy
  rgt: OrderBy
  taxonomy: OrderBy
  lft: OrderBy
  parent: OrderBy
  level: OrderBy
  minimal: OrderBy
  rank: OrderBy
}

input version_WhereInput @join__type(graph: RFAM)  {
  rfam_release: String
  rfam_release_date: String
  number_families: String
  embl_release: String
}

input version_OrderByInput @join__type(graph: RFAM)  {
  rfam_release: OrderBy
  rfam_release_date: OrderBy
  number_families: OrderBy
  embl_release: OrderBy
}

input _annotated_file_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  seed: String!
  cm: String!
  full: String
}

input _annotated_file_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  seed: String
  cm: String
  full: String
}

input _family_file_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  seed: String!
  cm: String!
}

input _family_file_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  seed: String
  cm: String
}

input _genome_data_InsertInput @join__type(graph: RFAM)  {
  data_file: String!
  author: String!
  uuid: String!
  status: _genome_data_status!
  created: DateTime!
  opened: DateTime
  closed: DateTime
  message: String
  lsf_id: Int
}

input _genome_data_UpdateInput @join__type(graph: RFAM)  {
  data_file: String
  author: String
  uuid: String
  status: _genome_data_status
  created: DateTime
  opened: DateTime
  closed: DateTime
  message: String
  lsf_id: Int
}

input _lock_InsertInput @join__type(graph: RFAM)  {
  locked: Int!
  locker: String!
  """
  Do you lock individual families? Do ever lock the whole database?
  """
  allowCommits: Int!
  alsoAllow: String
}

input _lock_UpdateInput @join__type(graph: RFAM)  {
  locked: Int
  locker: String
  """
  Do you lock individual families? Do ever lock the whole database?
  """
  allowCommits: Int
  alsoAllow: String
}

input _overlap_InsertInput @join__type(graph: RFAM)  {
  auto_overlap: Int
  id: String
  description: String
  author: String
  comment: String
}

input _overlap_UpdateInput @join__type(graph: RFAM)  {
  auto_overlap: Int
  id: String
  description: String
  author: String
  comment: String
}

input _overlap_membership_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  auto_overlap: Int!
}

input _overlap_membership_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  auto_overlap: Int
}

input _post_process_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  author: String!
  uuid: String!
  status: _post_process_status!
  created: DateTime!
  opened: DateTime
  closed: DateTime
  message: String
  lsf_id: Int
}

input _post_process_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  author: String
  uuid: String
  status: _post_process_status
  created: DateTime
  opened: DateTime
  closed: DateTime
  message: String
  lsf_id: Int
}

input alignment_and_tree_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  type: alignment_and_tree_type!
  alignment: String
  tree: String
  treemethod: String
  average_length: Float
  percent_id: Float
  number_of_sequences: BigInt
}

input alignment_and_tree_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  type: alignment_and_tree_type
  alignment: String
  tree: String
  treemethod: String
  average_length: Float
  percent_id: Float
  number_of_sequences: BigInt
}

input author_InsertInput @join__type(graph: RFAM)  {
  author_id: Int
  name: String!
  last_name: String
  initials: String
  orcid: String
  synonyms: String
}

input author_UpdateInput @join__type(graph: RFAM)  {
  author_id: Int
  name: String
  last_name: String
  initials: String
  orcid: String
  synonyms: String
}

input clan_InsertInput @join__type(graph: RFAM)  {
  clan_acc: String!
  id: String
  previous_id: String
  description: String
  author: String
  comment: String
  created: DateTime!
  updated: Timestamp!
}

input clan_UpdateInput @join__type(graph: RFAM)  {
  clan_acc: String
  id: String
  previous_id: String
  description: String
  author: String
  comment: String
  created: DateTime
  updated: Timestamp
}

input clan_database_link_InsertInput @join__type(graph: RFAM)  {
  clan_acc: String!
  db_id: String!
  comment: String
  db_link: String!
  other_params: String
}

input clan_database_link_UpdateInput @join__type(graph: RFAM)  {
  clan_acc: String
  db_id: String
  comment: String
  db_link: String
  other_params: String
}

input clan_literature_reference_InsertInput @join__type(graph: RFAM)  {
  clan_acc: String!
  pmid: Int!
  comment: String
  order_added: Int
}

input clan_literature_reference_UpdateInput @join__type(graph: RFAM)  {
  clan_acc: String
  pmid: Int
  comment: String
  order_added: Int
}

input clan_membership_InsertInput @join__type(graph: RFAM)  {
  clan_acc: String!
  rfam_acc: String!
}

input clan_membership_UpdateInput @join__type(graph: RFAM)  {
  clan_acc: String
  rfam_acc: String
}

input database_link_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  db_id: String!
  comment: String
  db_link: String!
  other_params: String
}

input database_link_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  db_id: String
  comment: String
  db_link: String
  other_params: String
}

input db_version_InsertInput @join__type(graph: RFAM)  {
  rfam_release: Float!
  rfam_release_date: DateTime!
  number_families: Int!
  embl_release: String!
  genome_collection_date: DateTime
  refseq_version: Int
  pdb_date: DateTime
  infernal_version: String
}

input db_version_UpdateInput @join__type(graph: RFAM)  {
  rfam_release: Float
  rfam_release_date: DateTime
  number_families: Int
  embl_release: String
  genome_collection_date: DateTime
  refseq_version: Int
  pdb_date: DateTime
  infernal_version: String
}

input dead_clan_InsertInput @join__type(graph: RFAM)  {
  clan_acc: String
  """
  Added. Add author?
  """
  clan_id: String!
  comment: String
  forward_to: String
  user: String!
}

input dead_clan_UpdateInput @join__type(graph: RFAM)  {
  clan_acc: String
  """
  Added. Add author?
  """
  clan_id: String
  comment: String
  forward_to: String
  user: String
}

input dead_family_InsertInput @join__type(graph: RFAM)  {
  """
  record the author???
  """
  rfam_acc: String
  rfam_id: String!
  comment: String
  forward_to: String
  """
  wikipedia page title
  
  """
  title: String
  user: String!
}

input dead_family_UpdateInput @join__type(graph: RFAM)  {
  """
  record the author???
  """
  rfam_acc: String
  rfam_id: String
  comment: String
  forward_to: String
  """
  wikipedia page title
  
  """
  title: String
  user: String
}

input ensembl_names_InsertInput @join__type(graph: RFAM)  {
  insdc: String
  ensembl: String
}

input ensembl_names_UpdateInput @join__type(graph: RFAM)  {
  insdc: String
  ensembl: String
}

input family_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  rfam_id: String!
  auto_wiki: Int!
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  comment: String
  previous_id: String
  cmbuild: String
  cmcalibrate: String
  cmsearch: String
  num_seed: BigInt
  num_full: BigInt
  num_genome_seq: BigInt
  num_refseq: BigInt
  type: String
  structure_source: String
  number_of_species: BigInt
  number_3d_structures: Int
  num_pseudonokts: Int
  tax_seed: String
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  created: DateTime!
  updated: Timestamp
}

input family_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfam_id: String
  auto_wiki: Int
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  comment: String
  previous_id: String
  cmbuild: String
  cmcalibrate: String
  cmsearch: String
  num_seed: BigInt
  num_full: BigInt
  num_genome_seq: BigInt
  num_refseq: BigInt
  type: String
  structure_source: String
  number_of_species: BigInt
  number_3d_structures: Int
  num_pseudonokts: Int
  tax_seed: String
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  created: DateTime
  updated: Timestamp
}

input family_author_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  author_id: Int!
  desc_order: Int!
}

input family_author_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  author_id: Int
  desc_order: Int
}

input family_literature_reference_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  pmid: Int!
  comment: String
  order_added: Int
}

input family_literature_reference_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pmid: Int
  comment: String
  order_added: Int
}

input family_long_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  referenece_structure: String
  reference_sequence: String
}

input family_long_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  referenece_structure: String
  reference_sequence: String
}

input family_ncbi_InsertInput @join__type(graph: RFAM)  {
  ncbi_id: Int!
  """
  Is this really needed?
  """
  rfam_id: String
  rfam_acc: String!
}

input family_ncbi_UpdateInput @join__type(graph: RFAM)  {
  ncbi_id: Int
  """
  Is this really needed?
  """
  rfam_id: String
  rfam_acc: String
}

input features_InsertInput @join__type(graph: RFAM)  {
  rfamseq_acc: String
  database_id: String!
  primary_id: String!
  secondary_id: String
  feat_orient: Int
  feat_start: BigInt
  feat_end: BigInt
  quaternary_id: String
}

input features_UpdateInput @join__type(graph: RFAM)  {
  rfamseq_acc: String
  database_id: String
  primary_id: String
  secondary_id: String
  feat_orient: Int
  feat_start: BigInt
  feat_end: BigInt
  quaternary_id: String
}

input full_region_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt!
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: Float
  evalue_score: String
  cm_start: Int!
  cm_end: Int!
  truncated: full_region_truncated!
  type: full_region_type
  is_significant: Int!
}

input full_region_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: Float
  evalue_score: String
  cm_start: Int
  cm_end: Int
  truncated: full_region_truncated
  type: full_region_type
  is_significant: Int
}

input genome_InsertInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  assembly_acc: String
  assembly_version: Int
  wgs_acc: String
  wgs_version: Int
  assembly_name: String
  assembly_level: genome_assembly_level
  study_ref: String
  description: String
  total_length: BigInt
  ungapped_length: BigInt
  circular: Int
  ncbi_id: Int!
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: Int
  num_families: Int
  is_reference: Int
  is_representative: Int
  created: DateTime!
  updated: Timestamp
}

input genome_UpdateInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  assembly_acc: String
  assembly_version: Int
  wgs_acc: String
  wgs_version: Int
  assembly_name: String
  assembly_level: genome_assembly_level
  study_ref: String
  description: String
  total_length: BigInt
  ungapped_length: BigInt
  circular: Int
  ncbi_id: Int
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: Int
  num_families: Int
  is_reference: Int
  is_representative: Int
  created: DateTime
  updated: Timestamp
}

input genome_temp_InsertInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  assembly_acc: String
  assembly_version: Int
  wgs_acc: String
  wgs_version: Int
  assembly_name: String
  assembly_level: genome_temp_assembly_level
  study_ref: String
  description: String
  total_length: BigInt
  ungapped_length: BigInt
  circular: Int
  ncbi_id: Int!
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: Int
  num_families: Int
  is_reference: Int
  is_representative: Int
  created: DateTime!
  updated: Timestamp
}

input genome_temp_UpdateInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  assembly_acc: String
  assembly_version: Int
  wgs_acc: String
  wgs_version: Int
  assembly_name: String
  assembly_level: genome_temp_assembly_level
  study_ref: String
  description: String
  total_length: BigInt
  ungapped_length: BigInt
  circular: Int
  ncbi_id: Int
  scientific_name: String
  common_name: String
  kingdom: String
  num_rfam_regions: Int
  num_families: Int
  is_reference: Int
  is_representative: Int
  created: DateTime
  updated: Timestamp
}

input genseq_InsertInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

input genseq_UpdateInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

input genseq_temp_InsertInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

input genseq_temp_UpdateInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  upid: String
  rfamseq_acc: String
  chromosome_name: String
  chromosome_type: String
  version: String
}

input html_alignment_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  type: html_alignment_type!
  html: String
  block: Int!
  html_alignmentscol: String
}

input html_alignment_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  type: html_alignment_type
  html: String
  block: Int
  html_alignmentscol: String
}

input keywords_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfam_id: String
  description: String
  rfam_general: String
  literature: String
  wiki: String
  pdb_mappings: String
  clan_info: String
}

input keywords_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfam_id: String
  description: String
  rfam_general: String
  literature: String
  wiki: String
  pdb_mappings: String
  clan_info: String
}

input literature_reference_InsertInput @join__type(graph: RFAM)  {
  pmid: Int
  title: String
  author: String
  journal: String
}

input literature_reference_UpdateInput @join__type(graph: RFAM)  {
  pmid: Int
  title: String
  author: String
  journal: String
}

input matches_and_fasta_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  match_list: String
  fasta: String
  type: matches_and_fasta_type!
}

input matches_and_fasta_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  match_list: String
  fasta: String
  type: matches_and_fasta_type
}

input motif_InsertInput @join__type(graph: RFAM)  {
  motif_acc: String!
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  cmbuild: String
  cmcalibrate: String
  type: String
  num_seed: BigInt
  average_id: Float
  average_sqlen: Float
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  wiki: String
  created: DateTime!
  updated: Timestamp
}

input motif_UpdateInput @join__type(graph: RFAM)  {
  motif_acc: String
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  cmbuild: String
  cmcalibrate: String
  type: String
  num_seed: BigInt
  average_id: Float
  average_sqlen: Float
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  wiki: String
  created: DateTime
  updated: Timestamp
}

input motif_database_link_InsertInput @join__type(graph: RFAM)  {
  motif_acc: String!
  db_id: String!
  comment: String
  db_link: String!
  other_params: String
}

input motif_database_link_UpdateInput @join__type(graph: RFAM)  {
  motif_acc: String
  db_id: String
  comment: String
  db_link: String
  other_params: String
}

input motif_family_stats_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  motif_acc: String!
  num_hits: Int
  frac_hits: Float
  sum_bits: Float
  avg_weight_bits: Float
}

input motif_family_stats_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  motif_acc: String
  num_hits: Int
  frac_hits: Float
  sum_bits: Float
  avg_weight_bits: Float
}

input motif_file_InsertInput @join__type(graph: RFAM)  {
  motif_acc: String!
  seed: String!
  cm: String!
}

input motif_file_UpdateInput @join__type(graph: RFAM)  {
  motif_acc: String
  seed: String
  cm: String
}

input motif_literature_InsertInput @join__type(graph: RFAM)  {
  motif_acc: String!
  pmid: Int!
  comment: String
  order_added: Int
}

input motif_literature_UpdateInput @join__type(graph: RFAM)  {
  motif_acc: String
  pmid: Int
  comment: String
  order_added: Int
}

input motif_matches_InsertInput @join__type(graph: RFAM)  {
  motif_acc: String!
  rfam_acc: String!
  rfamseq_acc: String
  rfamseq_start: BigInt
  rfamseq_stop: BigInt
  query_start: Int
  query_stop: Int
  motif_start: Int
  motif_stop: Int
  e_value: String
  bit_score: Float
}

input motif_matches_UpdateInput @join__type(graph: RFAM)  {
  motif_acc: String
  rfam_acc: String
  rfamseq_acc: String
  rfamseq_start: BigInt
  rfamseq_stop: BigInt
  query_start: Int
  query_stop: Int
  motif_start: Int
  motif_stop: Int
  e_value: String
  bit_score: Float
}

input motif_old_InsertInput @join__type(graph: RFAM)  {
  motif_acc: String!
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  cmbuild: String
  cmcalibrate: String
  type: String
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  created: DateTime!
  updated: Timestamp
}

input motif_old_UpdateInput @join__type(graph: RFAM)  {
  motif_acc: String
  motif_id: String
  description: String
  author: String
  seed_source: String
  gathering_cutoff: Float
  trusted_cutoff: Float
  noise_cutoff: Float
  cmbuild: String
  cmcalibrate: String
  type: String
  ecmli_lambda: Float
  ecmli_mu: Float
  ecmli_cal_db: Int
  ecmli_cal_hits: Int
  maxl: Int
  clen: Int
  match_pair_node: Int
  hmm_tau: Float
  hmm_lambda: Float
  created: DateTime
  updated: Timestamp
}

input motif_pdb_InsertInput @join__type(graph: RFAM)  {
  motif_acc: String!
  pdb_id: String!
  chain: String
  pdb_start: Int
  pdb_end: Int
}

input motif_pdb_UpdateInput @join__type(graph: RFAM)  {
  motif_acc: String
  pdb_id: String
  chain: String
  pdb_start: Int
  pdb_end: Int
}

input motif_ss_image_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  motif_acc: String!
  image: String
}

input motif_ss_image_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  motif_acc: String
  image: String
}

input pdb_InsertInput @join__type(graph: RFAM)  {
  pdb_id: String!
  keywords: String
  title: String
  date: String
  resolution: Float
  method: String
  author: String
}

input pdb_UpdateInput @join__type(graph: RFAM)  {
  pdb_id: String
  keywords: String
  title: String
  date: String
  resolution: Float
  method: String
  author: String
}

input pdb_full_region_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  pdb_id: String!
  chain: String
  pdb_start: Int!
  pdb_end: Int!
  bit_score: Float
  evalue_score: String
  cm_start: Int!
  cm_end: Int!
  hex_colour: String
  is_significant: Int
}

input pdb_full_region_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pdb_id: String
  chain: String
  pdb_start: Int
  pdb_end: Int
  bit_score: Float
  evalue_score: String
  cm_start: Int
  cm_end: Int
  hex_colour: String
  is_significant: Int
}

input pdb_full_region_old_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  pdb_id: String!
  chain: String
  pdb_start: Int!
  pdb_end: Int!
  bit_score: Float
  evalue_score: String
  cm_start: Int!
  cm_end: Int!
  hex_colour: String
  is_significant: Int
}

input pdb_full_region_old_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pdb_id: String
  chain: String
  pdb_start: Int
  pdb_end: Int
  bit_score: Float
  evalue_score: String
  cm_start: Int
  cm_end: Int
  hex_colour: String
  is_significant: Int
}

input pdb_rfam_reg_InsertInput @join__type(graph: RFAM)  {
  auto_pdb_reg: Int
  rfam_acc: String!
  pdb_seq: String!
  pdb_id: String!
  chain: String
  pdb_res_start: Int
  pdb_res_end: Int
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt
  hex_colour: String
}

input pdb_rfam_reg_UpdateInput @join__type(graph: RFAM)  {
  auto_pdb_reg: Int
  rfam_acc: String
  pdb_seq: String
  pdb_id: String
  chain: String
  pdb_res_start: Int
  pdb_res_end: Int
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt
  hex_colour: String
}

input pdb_sequence_InsertInput @join__type(graph: RFAM)  {
  pdb_seq: String!
  pdb_id: String!
  chain: String
}

input pdb_sequence_UpdateInput @join__type(graph: RFAM)  {
  pdb_seq: String
  pdb_id: String
  chain: String
}

input processed_data_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  cm: String
  ss_stats_pbp: String
  ss_stats_seq: String
  ss_stats_fam: String
  scores_graph: String
  genome_full: String
  genome_full_md5: String
  refseq_full: String
  refseq_full_md5: String
}

input processed_data_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  cm: String
  ss_stats_pbp: String
  ss_stats_seq: String
  ss_stats_fam: String
  scores_graph: String
  genome_full: String
  genome_full_md5: String
  refseq_full: String
  refseq_full_md5: String
}

input pseudoknot_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  pseudoknot_id: String!
  source: pseudoknot_source!
  covariation: Int
}

input pseudoknot_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  pseudoknot_id: String
  source: pseudoknot_source
  covariation: Int
}

input refseq_InsertInput @join__type(graph: RFAM)  {
  refseq_acc: String!
  description: String
  species: String
  ncbi_taxid: Int
}

input refseq_UpdateInput @join__type(graph: RFAM)  {
  refseq_acc: String
  description: String
  species: String
  ncbi_taxid: Int
}

input refseq_full_region_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  refseq_acc: String!
  seq_start: BigInt
  seq_end: BigInt!
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: Float
  evalue_score: String
  cm_start: Int!
  cm_end: Int!
  truncated: refseq_full_region_truncated!
}

input refseq_full_region_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  refseq_acc: String
  seq_start: BigInt
  seq_end: BigInt
  """
  99999.99 is the approx limit from Infernal.
  """
  bit_score: Float
  evalue_score: String
  cm_start: Int
  cm_end: Int
  truncated: refseq_full_region_truncated
}

input rfamseq_InsertInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String
  accession: String
  version: Int!
  ncbi_id: Int!
  mol_type: rfamseq_mol_type!
  length: Int
  description: String
  previous_acc: String
  source: String!
}

input rfamseq_UpdateInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String
  accession: String
  version: Int
  ncbi_id: Int
  mol_type: rfamseq_mol_type
  length: Int
  description: String
  previous_acc: String
  source: String
}

input rfamseq_temp_InsertInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String
  accession: String
  version: Int!
  ncbi_id: Int!
  mol_type: rfamseq_temp_mol_type!
  length: Int
  description: String
  previous_acc: String
  source: String!
}

input rfamseq_temp_UpdateInput @join__type(graph: RFAM)  {
  """
  This should be 
  """
  rfamseq_acc: String
  accession: String
  version: Int
  ncbi_id: Int
  mol_type: rfamseq_temp_mol_type
  length: Int
  description: String
  previous_acc: String
  source: String
}

input rnacentral_matches_InsertInput @join__type(graph: RFAM)  {
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt!
  md5: String!
  rnacentral_id: String
  type: rnacentral_matches_type
}

input rnacentral_matches_UpdateInput @join__type(graph: RFAM)  {
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt
  md5: String
  rnacentral_id: String
  type: rnacentral_matches_type
}

input rscape_annotations_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String
  F: Float
  sensitivity: Float
  ppv: Float
  true: Int
  found: Int
  tp: Int
  avgid: Float
  alen: Int
  nseq: Int
}

input rscape_annotations_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  F: Float
  sensitivity: Float
  ppv: Float
  true: Int
  found: Int
  tp: Int
  avgid: Float
  alen: Int
  nseq: Int
}

input secondary_structure_image_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  type: secondary_structure_image_type
  image: String
}

input secondary_structure_image_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  type: secondary_structure_image_type
  image: String
}

input seed_region_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt!
  md5: String
}

input seed_region_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  rfamseq_acc: String
  seq_start: BigInt
  seq_end: BigInt
  md5: String
}

input sunburst_InsertInput @join__type(graph: RFAM)  {
  rfam_acc: String!
  data: String!
  type: sunburst_type!
}

input sunburst_UpdateInput @join__type(graph: RFAM)  {
  rfam_acc: String
  data: String
  type: sunburst_type
}

input taxonomic_tree_InsertInput @join__type(graph: RFAM)  {
  ncbi_code: Int!
  species: String
  taxonomy: String
  lft: Int
  rgt: Int
  parent: String
  level: String
}

input taxonomic_tree_UpdateInput @join__type(graph: RFAM)  {
  ncbi_code: Int
  species: String
  taxonomy: String
  lft: Int
  rgt: Int
  parent: String
  level: String
}

input taxonomy_InsertInput @join__type(graph: RFAM)  {
  ncbi_id: Int
  species: String
  tax_string: String
  tree_display_name: String
  align_display_name: String
}

input taxonomy_UpdateInput @join__type(graph: RFAM)  {
  ncbi_id: Int
  species: String
  tax_string: String
  tree_display_name: String
  align_display_name: String
}

input taxonomy_websearch_InsertInput @join__type(graph: RFAM)  {
  ncbi_id: Int
  species: String
  rgt: Int
  taxonomy: String
  lft: Int
  parent: Int
  level: String
  minimal: Int
  rank: String
}

input taxonomy_websearch_UpdateInput @join__type(graph: RFAM)  {
  ncbi_id: Int
  species: String
  rgt: Int
  taxonomy: String
  lft: Int
  parent: Int
  level: String
  minimal: Int
  rank: String
}

input version_InsertInput @join__type(graph: RFAM)  {
  rfam_release: Float!
  rfam_release_date: Date!
  number_families: Int!
  embl_release: String!
}

input version_UpdateInput @join__type(graph: RFAM)  {
  rfam_release: Float
  rfam_release_date: Date
  number_families: Int
  embl_release: String
}

input wikitext_InsertInput @join__type(graph: RFAM)  {
  auto_wiki: Int
  title: String!
}

input wikitext_UpdateInput @join__type(graph: RFAM)  {
  auto_wiki: Int
  title: String
}
    
"
`;

exports[`should execute TestQuery 1`] = `
{
  "data": {
    "alignment_and_tree": [
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Gardner PP",
            "comment": "5S ribosomal RNA (5S rRNA) is a component of the large ribosomal subunit in both prokaryotes and eukaryotes. In eukaryotes, it is synthesised by RNA polymerase III (the other eukaryotic rRNAs are cleaved from a 45S precursor synthesised by RNA polymerase I). In Xenopus oocytes, it has been shown that fingers 4-7 of the nine-zinc finger transcription factor TFIIIA can bind to the central region of 5S RNA. Thus, in addition to positively regulating 5S rRNA transcription, TFIIIA also stabilises 5S rRNA until it is required for transcription.",
            "description": "5S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00001",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Gardner PP",
            "comment": "5S ribosomal RNA (5S rRNA) is a component of the large ribosomal subunit in both prokaryotes and eukaryotes. In eukaryotes, it is synthesised by RNA polymerase III (the other eukaryotic rRNAs are cleaved from a 45S precursor synthesised by RNA polymerase I). In Xenopus oocytes, it has been shown that fingers 4-7 of the nine-zinc finger transcription factor TFIIIA can bind to the central region of 5S RNA. Thus, in addition to positively regulating 5S rRNA transcription, TFIIIA also stabilises 5S rRNA until it is required for transcription.",
            "description": "5S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00001",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W",
            "comment": "5.8S ribosomal RNA (5.8S rRNA) is a component of the large subunit of the eukaryotic ribosome. It is transcribed by RNA polymerase I as part of the 45S precursor that also contains 18S and 28S rRNA. Functionally, it is thought that 5.8S rRNA may be involved in ribosome translocation [2]. It is also known to form covalent linkage to the p53 tumour suppressor protein [3]. 5.8S rRNA is also found in archaea.",
            "description": "5.8S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00002",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W",
            "comment": "5.8S ribosomal RNA (5.8S rRNA) is a component of the large subunit of the eukaryotic ribosome. It is transcribed by RNA polymerase I as part of the 45S precursor that also contains 18S and 28S rRNA. Functionally, it is thought that 5.8S rRNA may be involved in ribosome translocation [2]. It is also known to form covalent linkage to the p53 tumour suppressor protein [3]. 5.8S rRNA is also found in archaea.",
            "description": "5.8S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00002",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Moxon SJ, Ontiveros-Palacios N",
            "comment": "U1 is a small nuclear RNA (snRNA) component of the spliceosome (involved in pre-mRNA splicing). Its 5' end forms complementary base pairs with the 5' splice junction, thus defining the 5' donor site of an intron. There are significant differences in sequence and secondary structure between metazoan and yeast U1 snRNAs, the latter being much longer (568 nucleotides as compared to 164 nucleotides in human). Nevertheless, secondary structure predictions suggest that all U1 snRNAs share a 'common core' consisting of helices I, II, the proximal region of III, and IV [1]. This family does not contain the larger yeast sequences. The structure of U1 spliceosomal RNA has been reported in [5,6]. It present 4 Stem loops (SL1, SL2, SL3, and SL4) and a region call Helix H. SL1, SL2, and SL3 are join for the Helix H, forming a four-helix junction that are separated of SL4. U1 snRNA is important in the precatalytic spliceosome, where the 5' splice site (5'SS) of the pre-mRNA is recognized by pairing with 5'-U1 snRNA. Where spliceosome activation is initiated by a disruption of the 5â€²SSâ€“U1 snRNP interaction by the DEAD-box helicase Prp28 [6]. The structure of U1 small nucleolar RNA was reported in PDB:6QX9",
            "description": "U1 spliceosomal RNA",
            "type": "Gene; snRNA; splicing;",
          },
        ],
        "rfam_acc": "RF00003",
      },
    ],
  },
}
`;
