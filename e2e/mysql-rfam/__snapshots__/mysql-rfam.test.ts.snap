// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @transport(subgraph: "Rfam", kind: "mysql", location: "mysql://rfamro@mysql-rfam-public.ebi.ac.uk:4497/Rfam") {
  query: Query
  mutation: Mutation
}

directive @transport(subgraph: String, kind: String, location: String) on FIELD_DEFINITION

directive @mysqlSelect(table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlInsert(table: String, primaryKeys: [String]) on FIELD_DEFINITION

directive @mysqlUpdate(table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlDelete(table: String) on FIELD_DEFINITION

directive @mysqlTableForeign(columnName: String) on FIELD_DEFINITION

type Query {
  _annotated_file(limit: Int, offset: Int, where: _annotated_file_WhereInput, orderBy: _annotated_file_OrderByInput): [_annotated_file] @mysqlSelect(table: "_annotated_file") @source(subgraph: "Rfam", name: "_annotated_file", type: "[_annotated_file]")
  count__annotated_file(where: _annotated_file_WhereInput): Int @mysqlCount(table: "_annotated_file") @source(subgraph: "Rfam", name: "count__annotated_file", type: "Int")
  _family_file(limit: Int, offset: Int, where: _family_file_WhereInput, orderBy: _family_file_OrderByInput): [_family_file] @mysqlSelect(table: "_family_file") @source(subgraph: "Rfam", name: "_family_file", type: "[_family_file]")
  count__family_file(where: _family_file_WhereInput): Int @mysqlCount(table: "_family_file") @source(subgraph: "Rfam", name: "count__family_file", type: "Int")
  _genome_data(limit: Int, offset: Int, where: _genome_data_WhereInput, orderBy: _genome_data_OrderByInput): [_genome_data] @mysqlSelect(table: "_genome_data") @source(subgraph: "Rfam", name: "_genome_data", type: "[_genome_data]")
  count__genome_data(where: _genome_data_WhereInput): Int @mysqlCount(table: "_genome_data") @source(subgraph: "Rfam", name: "count__genome_data", type: "Int")
  _lock(limit: Int, offset: Int, where: _lock_WhereInput, orderBy: _lock_OrderByInput): [_lock] @mysqlSelect(table: "_lock") @source(subgraph: "Rfam", name: "_lock", type: "[_lock]")
  count__lock(where: _lock_WhereInput): Int @mysqlCount(table: "_lock") @source(subgraph: "Rfam", name: "count__lock", type: "Int")
  _overlap(limit: Int, offset: Int, where: _overlap_WhereInput, orderBy: _overlap_OrderByInput): [_overlap] @mysqlSelect(table: "_overlap") @source(subgraph: "Rfam", name: "_overlap", type: "[_overlap]")
  count__overlap(where: _overlap_WhereInput): Int @mysqlCount(table: "_overlap") @source(subgraph: "Rfam", name: "count__overlap", type: "Int")
  _overlap_membership(limit: Int, offset: Int, where: _overlap_membership_WhereInput, orderBy: _overlap_membership_OrderByInput): [_overlap_membership] @mysqlSelect(table: "_overlap_membership") @source(subgraph: "Rfam", name: "_overlap_membership", type: "[_overlap_membership]")
  count__overlap_membership(where: _overlap_membership_WhereInput): Int @mysqlCount(table: "_overlap_membership") @source(subgraph: "Rfam", name: "count__overlap_membership", type: "Int")
  _post_process(limit: Int, offset: Int, where: _post_process_WhereInput, orderBy: _post_process_OrderByInput): [_post_process] @mysqlSelect(table: "_post_process") @source(subgraph: "Rfam", name: "_post_process", type: "[_post_process]")
  count__post_process(where: _post_process_WhereInput): Int @mysqlCount(table: "_post_process") @source(subgraph: "Rfam", name: "count__post_process", type: "Int")
  alignment_and_tree(limit: Int, offset: Int, where: alignment_and_tree_WhereInput, orderBy: alignment_and_tree_OrderByInput): [alignment_and_tree] @mysqlSelect(table: "alignment_and_tree") @source(subgraph: "Rfam", name: "alignment_and_tree", type: "[alignment_and_tree]")
  count_alignment_and_tree(where: alignment_and_tree_WhereInput): Int @mysqlCount(table: "alignment_and_tree") @source(subgraph: "Rfam", name: "count_alignment_and_tree", type: "Int")
  author(limit: Int, offset: Int, where: author_WhereInput, orderBy: author_OrderByInput): [author] @mysqlSelect(table: "author") @source(subgraph: "Rfam", name: "author", type: "[author]")
  count_author(where: author_WhereInput): Int @mysqlCount(table: "author") @source(subgraph: "Rfam", name: "count_author", type: "Int")
  clan(limit: Int, offset: Int, where: clan_WhereInput, orderBy: clan_OrderByInput): [clan] @mysqlSelect(table: "clan") @source(subgraph: "Rfam", name: "clan", type: "[clan]")
  count_clan(where: clan_WhereInput): Int @mysqlCount(table: "clan") @source(subgraph: "Rfam", name: "count_clan", type: "Int")
  clan_database_link(limit: Int, offset: Int, where: clan_database_link_WhereInput, orderBy: clan_database_link_OrderByInput): [clan_database_link] @mysqlSelect(table: "clan_database_link") @source(subgraph: "Rfam", name: "clan_database_link", type: "[clan_database_link]")
  count_clan_database_link(where: clan_database_link_WhereInput): Int @mysqlCount(table: "clan_database_link") @source(subgraph: "Rfam", name: "count_clan_database_link", type: "Int")
  clan_literature_reference(limit: Int, offset: Int, where: clan_literature_reference_WhereInput, orderBy: clan_literature_reference_OrderByInput): [clan_literature_reference] @mysqlSelect(table: "clan_literature_reference") @source(subgraph: "Rfam", name: "clan_literature_reference", type: "[clan_literature_reference]")
  count_clan_literature_reference(where: clan_literature_reference_WhereInput): Int @mysqlCount(table: "clan_literature_reference") @source(subgraph: "Rfam", name: "count_clan_literature_reference", type: "Int")
  clan_membership(limit: Int, offset: Int, where: clan_membership_WhereInput, orderBy: clan_membership_OrderByInput): [clan_membership] @mysqlSelect(table: "clan_membership") @source(subgraph: "Rfam", name: "clan_membership", type: "[clan_membership]")
  count_clan_membership(where: clan_membership_WhereInput): Int @mysqlCount(table: "clan_membership") @source(subgraph: "Rfam", name: "count_clan_membership", type: "Int")
  database_link(limit: Int, offset: Int, where: database_link_WhereInput, orderBy: database_link_OrderByInput): [database_link] @mysqlSelect(table: "database_link") @source(subgraph: "Rfam", name: "database_link", type: "[database_link]")
  count_database_link(where: database_link_WhereInput): Int @mysqlCount(table: "database_link") @source(subgraph: "Rfam", name: "count_database_link", type: "Int")
  db_version(limit: Int, offset: Int, where: db_version_WhereInput, orderBy: db_version_OrderByInput): [db_version] @mysqlSelect(table: "db_version") @source(subgraph: "Rfam", name: "db_version", type: "[db_version]")
  count_db_version(where: db_version_WhereInput): Int @mysqlCount(table: "db_version") @source(subgraph: "Rfam", name: "count_db_version", type: "Int")
  dead_clan(limit: Int, offset: Int, where: dead_clan_WhereInput, orderBy: dead_clan_OrderByInput): [dead_clan] @mysqlSelect(table: "dead_clan") @source(subgraph: "Rfam", name: "dead_clan", type: "[dead_clan]")
  count_dead_clan(where: dead_clan_WhereInput): Int @mysqlCount(table: "dead_clan") @source(subgraph: "Rfam", name: "count_dead_clan", type: "Int")
  dead_family(limit: Int, offset: Int, where: dead_family_WhereInput, orderBy: dead_family_OrderByInput): [dead_family] @mysqlSelect(table: "dead_family") @source(subgraph: "Rfam", name: "dead_family", type: "[dead_family]")
  count_dead_family(where: dead_family_WhereInput): Int @mysqlCount(table: "dead_family") @source(subgraph: "Rfam", name: "count_dead_family", type: "Int")
  ensembl_names(limit: Int, offset: Int, where: ensembl_names_WhereInput, orderBy: ensembl_names_OrderByInput): [ensembl_names] @mysqlSelect(table: "ensembl_names") @source(subgraph: "Rfam", name: "ensembl_names", type: "[ensembl_names]")
  count_ensembl_names(where: ensembl_names_WhereInput): Int @mysqlCount(table: "ensembl_names") @source(subgraph: "Rfam", name: "count_ensembl_names", type: "Int")
  family(limit: Int, offset: Int, where: family_WhereInput, orderBy: family_OrderByInput): [family] @mysqlSelect(table: "family") @source(subgraph: "Rfam", name: "family", type: "[family]")
  count_family(where: family_WhereInput): Int @mysqlCount(table: "family") @source(subgraph: "Rfam", name: "count_family", type: "Int")
  family_author(limit: Int, offset: Int, where: family_author_WhereInput, orderBy: family_author_OrderByInput): [family_author] @mysqlSelect(table: "family_author") @source(subgraph: "Rfam", name: "family_author", type: "[family_author]")
  count_family_author(where: family_author_WhereInput): Int @mysqlCount(table: "family_author") @source(subgraph: "Rfam", name: "count_family_author", type: "Int")
  family_literature_reference(limit: Int, offset: Int, where: family_literature_reference_WhereInput, orderBy: family_literature_reference_OrderByInput): [family_literature_reference] @mysqlSelect(table: "family_literature_reference") @source(subgraph: "Rfam", name: "family_literature_reference", type: "[family_literature_reference]")
  count_family_literature_reference(where: family_literature_reference_WhereInput): Int @mysqlCount(table: "family_literature_reference") @source(subgraph: "Rfam", name: "count_family_literature_reference", type: "Int")
  family_long(limit: Int, offset: Int, where: family_long_WhereInput, orderBy: family_long_OrderByInput): [family_long] @mysqlSelect(table: "family_long") @source(subgraph: "Rfam", name: "family_long", type: "[family_long]")
  count_family_long(where: family_long_WhereInput): Int @mysqlCount(table: "family_long") @source(subgraph: "Rfam", name: "count_family_long", type: "Int")
  family_ncbi(limit: Int, offset: Int, where: family_ncbi_WhereInput, orderBy: family_ncbi_OrderByInput): [family_ncbi] @mysqlSelect(table: "family_ncbi") @source(subgraph: "Rfam", name: "family_ncbi", type: "[family_ncbi]")
  count_family_ncbi(where: family_ncbi_WhereInput): Int @mysqlCount(table: "family_ncbi") @source(subgraph: "Rfam", name: "count_family_ncbi", type: "Int")
  features(limit: Int, offset: Int, where: features_WhereInput, orderBy: features_OrderByInput): [features] @mysqlSelect(table: "features") @source(subgraph: "Rfam", name: "features", type: "[features]")
  count_features(where: features_WhereInput): Int @mysqlCount(table: "features") @source(subgraph: "Rfam", name: "count_features", type: "Int")
  full_region(limit: Int, offset: Int, where: full_region_WhereInput, orderBy: full_region_OrderByInput): [full_region] @mysqlSelect(table: "full_region") @source(subgraph: "Rfam", name: "full_region", type: "[full_region]")
  count_full_region(where: full_region_WhereInput): Int @mysqlCount(table: "full_region") @source(subgraph: "Rfam", name: "count_full_region", type: "Int")
  genome(limit: Int, offset: Int, where: genome_WhereInput, orderBy: genome_OrderByInput): [genome] @mysqlSelect(table: "genome") @source(subgraph: "Rfam", name: "genome", type: "[genome]")
  count_genome(where: genome_WhereInput): Int @mysqlCount(table: "genome") @source(subgraph: "Rfam", name: "count_genome", type: "Int")
  genome_temp(limit: Int, offset: Int, where: genome_temp_WhereInput, orderBy: genome_temp_OrderByInput): [genome_temp] @mysqlSelect(table: "genome_temp") @source(subgraph: "Rfam", name: "genome_temp", type: "[genome_temp]")
  count_genome_temp(where: genome_temp_WhereInput): Int @mysqlCount(table: "genome_temp") @source(subgraph: "Rfam", name: "count_genome_temp", type: "Int")
  genseq(limit: Int, offset: Int, where: genseq_WhereInput, orderBy: genseq_OrderByInput): [genseq] @mysqlSelect(table: "genseq") @source(subgraph: "Rfam", name: "genseq", type: "[genseq]")
  count_genseq(where: genseq_WhereInput): Int @mysqlCount(table: "genseq") @source(subgraph: "Rfam", name: "count_genseq", type: "Int")
  genseq_temp(limit: Int, offset: Int, where: genseq_temp_WhereInput, orderBy: genseq_temp_OrderByInput): [genseq_temp] @mysqlSelect(table: "genseq_temp") @source(subgraph: "Rfam", name: "genseq_temp", type: "[genseq_temp]")
  count_genseq_temp(where: genseq_temp_WhereInput): Int @mysqlCount(table: "genseq_temp") @source(subgraph: "Rfam", name: "count_genseq_temp", type: "Int")
  html_alignment(limit: Int, offset: Int, where: html_alignment_WhereInput, orderBy: html_alignment_OrderByInput): [html_alignment] @mysqlSelect(table: "html_alignment") @source(subgraph: "Rfam", name: "html_alignment", type: "[html_alignment]")
  count_html_alignment(where: html_alignment_WhereInput): Int @mysqlCount(table: "html_alignment") @source(subgraph: "Rfam", name: "count_html_alignment", type: "Int")
  keywords(limit: Int, offset: Int, where: keywords_WhereInput, orderBy: keywords_OrderByInput): [keywords] @mysqlSelect(table: "keywords") @source(subgraph: "Rfam", name: "keywords", type: "[keywords]")
  count_keywords(where: keywords_WhereInput): Int @mysqlCount(table: "keywords") @source(subgraph: "Rfam", name: "count_keywords", type: "Int")
  literature_reference(limit: Int, offset: Int, where: literature_reference_WhereInput, orderBy: literature_reference_OrderByInput): [literature_reference] @mysqlSelect(table: "literature_reference") @source(subgraph: "Rfam", name: "literature_reference", type: "[literature_reference]")
  count_literature_reference(where: literature_reference_WhereInput): Int @mysqlCount(table: "literature_reference") @source(subgraph: "Rfam", name: "count_literature_reference", type: "Int")
  matches_and_fasta(limit: Int, offset: Int, where: matches_and_fasta_WhereInput, orderBy: matches_and_fasta_OrderByInput): [matches_and_fasta] @mysqlSelect(table: "matches_and_fasta") @source(subgraph: "Rfam", name: "matches_and_fasta", type: "[matches_and_fasta]")
  count_matches_and_fasta(where: matches_and_fasta_WhereInput): Int @mysqlCount(table: "matches_and_fasta") @source(subgraph: "Rfam", name: "count_matches_and_fasta", type: "Int")
  motif(limit: Int, offset: Int, where: motif_WhereInput, orderBy: motif_OrderByInput): [motif] @mysqlSelect(table: "motif") @source(subgraph: "Rfam", name: "motif", type: "[motif]")
  count_motif(where: motif_WhereInput): Int @mysqlCount(table: "motif") @source(subgraph: "Rfam", name: "count_motif", type: "Int")
  motif_database_link(limit: Int, offset: Int, where: motif_database_link_WhereInput, orderBy: motif_database_link_OrderByInput): [motif_database_link] @mysqlSelect(table: "motif_database_link") @source(subgraph: "Rfam", name: "motif_database_link", type: "[motif_database_link]")
  count_motif_database_link(where: motif_database_link_WhereInput): Int @mysqlCount(table: "motif_database_link") @source(subgraph: "Rfam", name: "count_motif_database_link", type: "Int")
  motif_family_stats(limit: Int, offset: Int, where: motif_family_stats_WhereInput, orderBy: motif_family_stats_OrderByInput): [motif_family_stats] @mysqlSelect(table: "motif_family_stats") @source(subgraph: "Rfam", name: "motif_family_stats", type: "[motif_family_stats]")
  count_motif_family_stats(where: motif_family_stats_WhereInput): Int @mysqlCount(table: "motif_family_stats") @source(subgraph: "Rfam", name: "count_motif_family_stats", type: "Int")
  motif_file(limit: Int, offset: Int, where: motif_file_WhereInput, orderBy: motif_file_OrderByInput): [motif_file] @mysqlSelect(table: "motif_file") @source(subgraph: "Rfam", name: "motif_file", type: "[motif_file]")
  count_motif_file(where: motif_file_WhereInput): Int @mysqlCount(table: "motif_file") @source(subgraph: "Rfam", name: "count_motif_file", type: "Int")
  motif_literature(limit: Int, offset: Int, where: motif_literature_WhereInput, orderBy: motif_literature_OrderByInput): [motif_literature] @mysqlSelect(table: "motif_literature") @source(subgraph: "Rfam", name: "motif_literature", type: "[motif_literature]")
  count_motif_literature(where: motif_literature_WhereInput): Int @mysqlCount(table: "motif_literature") @source(subgraph: "Rfam", name: "count_motif_literature", type: "Int")
  motif_matches(limit: Int, offset: Int, where: motif_matches_WhereInput, orderBy: motif_matches_OrderByInput): [motif_matches] @mysqlSelect(table: "motif_matches") @source(subgraph: "Rfam", name: "motif_matches", type: "[motif_matches]")
  count_motif_matches(where: motif_matches_WhereInput): Int @mysqlCount(table: "motif_matches") @source(subgraph: "Rfam", name: "count_motif_matches", type: "Int")
  motif_old(limit: Int, offset: Int, where: motif_old_WhereInput, orderBy: motif_old_OrderByInput): [motif_old] @mysqlSelect(table: "motif_old") @source(subgraph: "Rfam", name: "motif_old", type: "[motif_old]")
  count_motif_old(where: motif_old_WhereInput): Int @mysqlCount(table: "motif_old") @source(subgraph: "Rfam", name: "count_motif_old", type: "Int")
  motif_pdb(limit: Int, offset: Int, where: motif_pdb_WhereInput, orderBy: motif_pdb_OrderByInput): [motif_pdb] @mysqlSelect(table: "motif_pdb") @source(subgraph: "Rfam", name: "motif_pdb", type: "[motif_pdb]")
  count_motif_pdb(where: motif_pdb_WhereInput): Int @mysqlCount(table: "motif_pdb") @source(subgraph: "Rfam", name: "count_motif_pdb", type: "Int")
  motif_ss_image(limit: Int, offset: Int, where: motif_ss_image_WhereInput, orderBy: motif_ss_image_OrderByInput): [motif_ss_image] @mysqlSelect(table: "motif_ss_image") @source(subgraph: "Rfam", name: "motif_ss_image", type: "[motif_ss_image]")
  count_motif_ss_image(where: motif_ss_image_WhereInput): Int @mysqlCount(table: "motif_ss_image") @source(subgraph: "Rfam", name: "count_motif_ss_image", type: "Int")
  pdb(limit: Int, offset: Int, where: pdb_WhereInput, orderBy: pdb_OrderByInput): [pdb] @mysqlSelect(table: "pdb") @source(subgraph: "Rfam", name: "pdb", type: "[pdb]")
  count_pdb(where: pdb_WhereInput): Int @mysqlCount(table: "pdb") @source(subgraph: "Rfam", name: "count_pdb", type: "Int")
  pdb_full_region(limit: Int, offset: Int, where: pdb_full_region_WhereInput, orderBy: pdb_full_region_OrderByInput): [pdb_full_region] @mysqlSelect(table: "pdb_full_region") @source(subgraph: "Rfam", name: "pdb_full_region", type: "[pdb_full_region]")
  count_pdb_full_region(where: pdb_full_region_WhereInput): Int @mysqlCount(table: "pdb_full_region") @source(subgraph: "Rfam", name: "count_pdb_full_region", type: "Int")
  pdb_full_region_old(limit: Int, offset: Int, where: pdb_full_region_old_WhereInput, orderBy: pdb_full_region_old_OrderByInput): [pdb_full_region_old] @mysqlSelect(table: "pdb_full_region_old") @source(subgraph: "Rfam", name: "pdb_full_region_old", type: "[pdb_full_region_old]")
  count_pdb_full_region_old(where: pdb_full_region_old_WhereInput): Int @mysqlCount(table: "pdb_full_region_old") @source(subgraph: "Rfam", name: "count_pdb_full_region_old", type: "Int")
  pdb_rfam_reg(limit: Int, offset: Int, where: pdb_rfam_reg_WhereInput, orderBy: pdb_rfam_reg_OrderByInput): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg") @source(subgraph: "Rfam", name: "pdb_rfam_reg", type: "[pdb_rfam_reg]")
  count_pdb_rfam_reg(where: pdb_rfam_reg_WhereInput): Int @mysqlCount(table: "pdb_rfam_reg") @source(subgraph: "Rfam", name: "count_pdb_rfam_reg", type: "Int")
  pdb_sequence(limit: Int, offset: Int, where: pdb_sequence_WhereInput, orderBy: pdb_sequence_OrderByInput): [pdb_sequence] @mysqlSelect(table: "pdb_sequence") @source(subgraph: "Rfam", name: "pdb_sequence", type: "[pdb_sequence]")
  count_pdb_sequence(where: pdb_sequence_WhereInput): Int @mysqlCount(table: "pdb_sequence") @source(subgraph: "Rfam", name: "count_pdb_sequence", type: "Int")
  processed_data(limit: Int, offset: Int, where: processed_data_WhereInput, orderBy: processed_data_OrderByInput): [processed_data] @mysqlSelect(table: "processed_data") @source(subgraph: "Rfam", name: "processed_data", type: "[processed_data]")
  count_processed_data(where: processed_data_WhereInput): Int @mysqlCount(table: "processed_data") @source(subgraph: "Rfam", name: "count_processed_data", type: "Int")
  pseudoknot(limit: Int, offset: Int, where: pseudoknot_WhereInput, orderBy: pseudoknot_OrderByInput): [pseudoknot] @mysqlSelect(table: "pseudoknot") @source(subgraph: "Rfam", name: "pseudoknot", type: "[pseudoknot]")
  count_pseudoknot(where: pseudoknot_WhereInput): Int @mysqlCount(table: "pseudoknot") @source(subgraph: "Rfam", name: "count_pseudoknot", type: "Int")
  refseq(limit: Int, offset: Int, where: refseq_WhereInput, orderBy: refseq_OrderByInput): [refseq] @mysqlSelect(table: "refseq") @source(subgraph: "Rfam", name: "refseq", type: "[refseq]")
  count_refseq(where: refseq_WhereInput): Int @mysqlCount(table: "refseq") @source(subgraph: "Rfam", name: "count_refseq", type: "Int")
  refseq_full_region(limit: Int, offset: Int, where: refseq_full_region_WhereInput, orderBy: refseq_full_region_OrderByInput): [refseq_full_region] @mysqlSelect(table: "refseq_full_region") @source(subgraph: "Rfam", name: "refseq_full_region", type: "[refseq_full_region]")
  count_refseq_full_region(where: refseq_full_region_WhereInput): Int @mysqlCount(table: "refseq_full_region") @source(subgraph: "Rfam", name: "count_refseq_full_region", type: "Int")
  rfamseq(limit: Int, offset: Int, where: rfamseq_WhereInput, orderBy: rfamseq_OrderByInput): [rfamseq] @mysqlSelect(table: "rfamseq") @source(subgraph: "Rfam", name: "rfamseq", type: "[rfamseq]")
  count_rfamseq(where: rfamseq_WhereInput): Int @mysqlCount(table: "rfamseq") @source(subgraph: "Rfam", name: "count_rfamseq", type: "Int")
  rfamseq_temp(limit: Int, offset: Int, where: rfamseq_temp_WhereInput, orderBy: rfamseq_temp_OrderByInput): [rfamseq_temp] @mysqlSelect(table: "rfamseq_temp") @source(subgraph: "Rfam", name: "rfamseq_temp", type: "[rfamseq_temp]")
  count_rfamseq_temp(where: rfamseq_temp_WhereInput): Int @mysqlCount(table: "rfamseq_temp") @source(subgraph: "Rfam", name: "count_rfamseq_temp", type: "Int")
  rnacentral_matches(limit: Int, offset: Int, where: rnacentral_matches_WhereInput, orderBy: rnacentral_matches_OrderByInput): [rnacentral_matches] @mysqlSelect(table: "rnacentral_matches") @source(subgraph: "Rfam", name: "rnacentral_matches", type: "[rnacentral_matches]")
  count_rnacentral_matches(where: rnacentral_matches_WhereInput): Int @mysqlCount(table: "rnacentral_matches") @source(subgraph: "Rfam", name: "count_rnacentral_matches", type: "Int")
  rscape_annotations(limit: Int, offset: Int, where: rscape_annotations_WhereInput, orderBy: rscape_annotations_OrderByInput): [rscape_annotations] @mysqlSelect(table: "rscape_annotations") @source(subgraph: "Rfam", name: "rscape_annotations", type: "[rscape_annotations]")
  count_rscape_annotations(where: rscape_annotations_WhereInput): Int @mysqlCount(table: "rscape_annotations") @source(subgraph: "Rfam", name: "count_rscape_annotations", type: "Int")
  secondary_structure_image(limit: Int, offset: Int, where: secondary_structure_image_WhereInput, orderBy: secondary_structure_image_OrderByInput): [secondary_structure_image] @mysqlSelect(table: "secondary_structure_image") @source(subgraph: "Rfam", name: "secondary_structure_image", type: "[secondary_structure_image]")
  count_secondary_structure_image(where: secondary_structure_image_WhereInput): Int @mysqlCount(table: "secondary_structure_image") @source(subgraph: "Rfam", name: "count_secondary_structure_image", type: "Int")
  seed_region(limit: Int, offset: Int, where: seed_region_WhereInput, orderBy: seed_region_OrderByInput): [seed_region] @mysqlSelect(table: "seed_region") @source(subgraph: "Rfam", name: "seed_region", type: "[seed_region]")
  count_seed_region(where: seed_region_WhereInput): Int @mysqlCount(table: "seed_region") @source(subgraph: "Rfam", name: "count_seed_region", type: "Int")
  sunburst(limit: Int, offset: Int, where: sunburst_WhereInput, orderBy: sunburst_OrderByInput): [sunburst] @mysqlSelect(table: "sunburst") @source(subgraph: "Rfam", name: "sunburst", type: "[sunburst]")
  count_sunburst(where: sunburst_WhereInput): Int @mysqlCount(table: "sunburst") @source(subgraph: "Rfam", name: "count_sunburst", type: "Int")
  taxonomic_tree(limit: Int, offset: Int, where: taxonomic_tree_WhereInput, orderBy: taxonomic_tree_OrderByInput): [taxonomic_tree] @mysqlSelect(table: "taxonomic_tree") @source(subgraph: "Rfam", name: "taxonomic_tree", type: "[taxonomic_tree]")
  count_taxonomic_tree(where: taxonomic_tree_WhereInput): Int @mysqlCount(table: "taxonomic_tree") @source(subgraph: "Rfam", name: "count_taxonomic_tree", type: "Int")
  taxonomy(limit: Int, offset: Int, where: taxonomy_WhereInput, orderBy: taxonomy_OrderByInput): [taxonomy] @mysqlSelect(table: "taxonomy") @source(subgraph: "Rfam", name: "taxonomy", type: "[taxonomy]")
  count_taxonomy(where: taxonomy_WhereInput): Int @mysqlCount(table: "taxonomy") @source(subgraph: "Rfam", name: "count_taxonomy", type: "Int")
  taxonomy_websearch(limit: Int, offset: Int, where: taxonomy_websearch_WhereInput, orderBy: taxonomy_websearch_OrderByInput): [taxonomy_websearch] @mysqlSelect(table: "taxonomy_websearch") @source(subgraph: "Rfam", name: "taxonomy_websearch", type: "[taxonomy_websearch]")
  count_taxonomy_websearch(where: taxonomy_websearch_WhereInput): Int @mysqlCount(table: "taxonomy_websearch") @source(subgraph: "Rfam", name: "count_taxonomy_websearch", type: "Int")
  version(limit: Int, offset: Int, where: version_WhereInput, orderBy: version_OrderByInput): [version] @mysqlSelect(table: "version") @source(subgraph: "Rfam", name: "version", type: "[version]")
  count_version(where: version_WhereInput): Int @mysqlCount(table: "version") @source(subgraph: "Rfam", name: "count_version", type: "Int")
  wikitext(limit: Int, offset: Int, where: wikitext_WhereInput, orderBy: wikitext_OrderByInput): [wikitext] @mysqlSelect(table: "wikitext") @source(subgraph: "Rfam", name: "wikitext", type: "[wikitext]")
  count_wikitext(where: wikitext_WhereInput): Int @mysqlCount(table: "wikitext") @source(subgraph: "Rfam", name: "count_wikitext", type: "Int")
}

type _annotated_file @source(subgraph: "Rfam", name: "_annotated_file") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  seed: String! @source(subgraph: "Rfam", name: "seed", type: "String!")
  cm: String! @source(subgraph: "Rfam", name: "cm", type: "String!")
  full: String @source(subgraph: "Rfam", name: "full", type: "String")
}

input _annotated_file_WhereInput @source(subgraph: "Rfam", name: "_annotated_file_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  seed: String @source(subgraph: "Rfam", name: "seed", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
  full: String @source(subgraph: "Rfam", name: "full", type: "String")
}

input _annotated_file_OrderByInput @source(subgraph: "Rfam", name: "_annotated_file_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  seed: OrderBy @source(subgraph: "Rfam", name: "seed", type: "OrderBy")
  cm: OrderBy @source(subgraph: "Rfam", name: "cm", type: "OrderBy")
  full: OrderBy @source(subgraph: "Rfam", name: "full", type: "OrderBy")
}

enum OrderBy @source(subgraph: "Rfam", name: "OrderBy") {
  asc @source(subgraph: "Rfam", name: "asc")
  desc @source(subgraph: "Rfam", name: "desc")
}

type _family_file @source(subgraph: "Rfam", name: "_family_file") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  seed: String! @source(subgraph: "Rfam", name: "seed", type: "String!")
  cm: String! @source(subgraph: "Rfam", name: "cm", type: "String!")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

type family @source(subgraph: "Rfam", name: "family") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfam_id: String! @source(subgraph: "Rfam", name: "rfam_id", type: "String!")
  auto_wiki: Int! @source(subgraph: "Rfam", name: "auto_wiki", type: "Int!")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  cmsearch: String @source(subgraph: "Rfam", name: "cmsearch", type: "String")
  num_seed: BigInt @source(subgraph: "Rfam", name: "num_seed", type: "BigInt")
  num_full: BigInt @source(subgraph: "Rfam", name: "num_full", type: "BigInt")
  num_genome_seq: BigInt @source(subgraph: "Rfam", name: "num_genome_seq", type: "BigInt")
  num_refseq: BigInt @source(subgraph: "Rfam", name: "num_refseq", type: "BigInt")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  structure_source: String @source(subgraph: "Rfam", name: "structure_source", type: "String")
  number_of_species: BigInt @source(subgraph: "Rfam", name: "number_of_species", type: "BigInt")
  number_3d_structures: Int @source(subgraph: "Rfam", name: "number_3d_structures", type: "Int")
  num_pseudonokts: Int @source(subgraph: "Rfam", name: "num_pseudonokts", type: "Int")
  tax_seed: String @source(subgraph: "Rfam", name: "tax_seed", type: "String")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp! @source(subgraph: "Rfam", name: "updated", type: "Timestamp!")
  _family_file(limit: Int, offset: Int, where: _family_file_WhereInput, orderBy: _family_file_OrderByInput): [_family_file] @mysqlSelect(table: "_family_file", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "_family_file", type: "[_family_file]")
  _overlap_membership(limit: Int, offset: Int, where: _overlap_membership_WhereInput, orderBy: _overlap_membership_OrderByInput): [_overlap_membership] @mysqlSelect(table: "_overlap_membership", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "_overlap_membership", type: "[_overlap_membership]")
  _post_process(limit: Int, offset: Int, where: _post_process_WhereInput, orderBy: _post_process_OrderByInput): [_post_process] @mysqlSelect(table: "_post_process", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "_post_process", type: "[_post_process]")
  alignment_and_tree(limit: Int, offset: Int, where: alignment_and_tree_WhereInput, orderBy: alignment_and_tree_OrderByInput): [alignment_and_tree] @mysqlSelect(table: "alignment_and_tree", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "alignment_and_tree", type: "[alignment_and_tree]")
  clan_membership(limit: Int, offset: Int, where: clan_membership_WhereInput, orderBy: clan_membership_OrderByInput): [clan_membership] @mysqlSelect(table: "clan_membership", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "clan_membership", type: "[clan_membership]")
  database_link(limit: Int, offset: Int, where: database_link_WhereInput, orderBy: database_link_OrderByInput): [database_link] @mysqlSelect(table: "database_link", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "database_link", type: "[database_link]")
  wikitext(where: wikitext_WhereInput, orderBy: wikitext_OrderByInput, limit: Int, offset: Int): [wikitext] @mysqlSelect(table: "wikitext", columnMap: [["auto_wiki", "auto_wiki"]]) @mysqlTableForeign(columnName: "auto_wiki") @source(subgraph: "Rfam", name: "wikitext", type: "[wikitext]")
  family_literature_reference(limit: Int, offset: Int, where: family_literature_reference_WhereInput, orderBy: family_literature_reference_OrderByInput): [family_literature_reference] @mysqlSelect(table: "family_literature_reference", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "family_literature_reference", type: "[family_literature_reference]")
  family_long(limit: Int, offset: Int, where: family_long_WhereInput, orderBy: family_long_OrderByInput): [family_long] @mysqlSelect(table: "family_long", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "family_long", type: "[family_long]")
  family_ncbi(limit: Int, offset: Int, where: family_ncbi_WhereInput, orderBy: family_ncbi_OrderByInput): [family_ncbi] @mysqlSelect(table: "family_ncbi", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "family_ncbi", type: "[family_ncbi]")
  full_region(limit: Int, offset: Int, where: full_region_WhereInput, orderBy: full_region_OrderByInput): [full_region] @mysqlSelect(table: "full_region", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "full_region", type: "[full_region]")
  html_alignment(limit: Int, offset: Int, where: html_alignment_WhereInput, orderBy: html_alignment_OrderByInput): [html_alignment] @mysqlSelect(table: "html_alignment", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "html_alignment", type: "[html_alignment]")
  matches_and_fasta(limit: Int, offset: Int, where: matches_and_fasta_WhereInput, orderBy: matches_and_fasta_OrderByInput): [matches_and_fasta] @mysqlSelect(table: "matches_and_fasta", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "matches_and_fasta", type: "[matches_and_fasta]")
  motif_family_stats(limit: Int, offset: Int, where: motif_family_stats_WhereInput, orderBy: motif_family_stats_OrderByInput): [motif_family_stats] @mysqlSelect(table: "motif_family_stats", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "motif_family_stats", type: "[motif_family_stats]")
  motif_matches(limit: Int, offset: Int, where: motif_matches_WhereInput, orderBy: motif_matches_OrderByInput): [motif_matches] @mysqlSelect(table: "motif_matches", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "motif_matches", type: "[motif_matches]")
  motif_ss_image(limit: Int, offset: Int, where: motif_ss_image_WhereInput, orderBy: motif_ss_image_OrderByInput): [motif_ss_image] @mysqlSelect(table: "motif_ss_image", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "motif_ss_image", type: "[motif_ss_image]")
  pdb_rfam_reg(limit: Int, offset: Int, where: pdb_rfam_reg_WhereInput, orderBy: pdb_rfam_reg_OrderByInput): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "pdb_rfam_reg", type: "[pdb_rfam_reg]")
  processed_data(limit: Int, offset: Int, where: processed_data_WhereInput, orderBy: processed_data_OrderByInput): [processed_data] @mysqlSelect(table: "processed_data", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "processed_data", type: "[processed_data]")
  pseudoknot(limit: Int, offset: Int, where: pseudoknot_WhereInput, orderBy: pseudoknot_OrderByInput): [pseudoknot] @mysqlSelect(table: "pseudoknot", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "pseudoknot", type: "[pseudoknot]")
  refseq_full_region(limit: Int, offset: Int, where: refseq_full_region_WhereInput, orderBy: refseq_full_region_OrderByInput): [refseq_full_region] @mysqlSelect(table: "refseq_full_region", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "refseq_full_region", type: "[refseq_full_region]")
  secondary_structure_image(limit: Int, offset: Int, where: secondary_structure_image_WhereInput, orderBy: secondary_structure_image_OrderByInput): [secondary_structure_image] @mysqlSelect(table: "secondary_structure_image", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "secondary_structure_image", type: "[secondary_structure_image]")
  seed_region(limit: Int, offset: Int, where: seed_region_WhereInput, orderBy: seed_region_OrderByInput): [seed_region] @mysqlSelect(table: "seed_region", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "seed_region", type: "[seed_region]")
  sunburst(limit: Int, offset: Int, where: sunburst_WhereInput, orderBy: sunburst_OrderByInput): [sunburst] @mysqlSelect(table: "sunburst", columnMap: [["rfam_acc", "rfam_acc"]]) @source(subgraph: "Rfam", name: "sunburst", type: "[sunburst]")
}

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @source(subgraph: "Rfam", name: "BigInt") @source(subgraph: "Rfam", name: "BigInt")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime @source(subgraph: "Rfam", name: "DateTime") @source(subgraph: "Rfam", name: "DateTime")

"""
The javascript \`Date\` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp @source(subgraph: "Rfam", name: "Timestamp") @source(subgraph: "Rfam", name: "Timestamp")

input _family_file_WhereInput @source(subgraph: "Rfam", name: "_family_file_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  seed: String @source(subgraph: "Rfam", name: "seed", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
}

input _family_file_OrderByInput @source(subgraph: "Rfam", name: "_family_file_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  seed: OrderBy @source(subgraph: "Rfam", name: "seed", type: "OrderBy")
  cm: OrderBy @source(subgraph: "Rfam", name: "cm", type: "OrderBy")
}

type _overlap_membership @source(subgraph: "Rfam", name: "_overlap_membership") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  auto_overlap: Int! @source(subgraph: "Rfam", name: "auto_overlap", type: "Int!")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  _overlap(where: _overlap_WhereInput, orderBy: _overlap_OrderByInput, limit: Int, offset: Int): [_overlap] @mysqlSelect(table: "_overlap", columnMap: [["auto_overlap", "auto_overlap"]]) @mysqlTableForeign(columnName: "auto_overlap") @source(subgraph: "Rfam", name: "_overlap", type: "[_overlap]")
}

input family_WhereInput @source(subgraph: "Rfam", name: "family_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  auto_wiki: String @source(subgraph: "Rfam", name: "auto_wiki", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: String @source(subgraph: "Rfam", name: "gathering_cutoff", type: "String")
  trusted_cutoff: String @source(subgraph: "Rfam", name: "trusted_cutoff", type: "String")
  noise_cutoff: String @source(subgraph: "Rfam", name: "noise_cutoff", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  cmsearch: String @source(subgraph: "Rfam", name: "cmsearch", type: "String")
  num_seed: String @source(subgraph: "Rfam", name: "num_seed", type: "String")
  num_full: String @source(subgraph: "Rfam", name: "num_full", type: "String")
  num_genome_seq: String @source(subgraph: "Rfam", name: "num_genome_seq", type: "String")
  num_refseq: String @source(subgraph: "Rfam", name: "num_refseq", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  structure_source: String @source(subgraph: "Rfam", name: "structure_source", type: "String")
  number_of_species: String @source(subgraph: "Rfam", name: "number_of_species", type: "String")
  number_3d_structures: String @source(subgraph: "Rfam", name: "number_3d_structures", type: "String")
  num_pseudonokts: String @source(subgraph: "Rfam", name: "num_pseudonokts", type: "String")
  tax_seed: String @source(subgraph: "Rfam", name: "tax_seed", type: "String")
  ecmli_lambda: String @source(subgraph: "Rfam", name: "ecmli_lambda", type: "String")
  ecmli_mu: String @source(subgraph: "Rfam", name: "ecmli_mu", type: "String")
  ecmli_cal_db: String @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "String")
  ecmli_cal_hits: String @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "String")
  maxl: String @source(subgraph: "Rfam", name: "maxl", type: "String")
  clen: String @source(subgraph: "Rfam", name: "clen", type: "String")
  match_pair_node: String @source(subgraph: "Rfam", name: "match_pair_node", type: "String")
  hmm_tau: String @source(subgraph: "Rfam", name: "hmm_tau", type: "String")
  hmm_lambda: String @source(subgraph: "Rfam", name: "hmm_lambda", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  updated: String @source(subgraph: "Rfam", name: "updated", type: "String")
}

input family_OrderByInput @source(subgraph: "Rfam", name: "family_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  rfam_id: OrderBy @source(subgraph: "Rfam", name: "rfam_id", type: "OrderBy")
  auto_wiki: OrderBy @source(subgraph: "Rfam", name: "auto_wiki", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  seed_source: OrderBy @source(subgraph: "Rfam", name: "seed_source", type: "OrderBy")
  gathering_cutoff: OrderBy @source(subgraph: "Rfam", name: "gathering_cutoff", type: "OrderBy")
  trusted_cutoff: OrderBy @source(subgraph: "Rfam", name: "trusted_cutoff", type: "OrderBy")
  noise_cutoff: OrderBy @source(subgraph: "Rfam", name: "noise_cutoff", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  previous_id: OrderBy @source(subgraph: "Rfam", name: "previous_id", type: "OrderBy")
  cmbuild: OrderBy @source(subgraph: "Rfam", name: "cmbuild", type: "OrderBy")
  cmcalibrate: OrderBy @source(subgraph: "Rfam", name: "cmcalibrate", type: "OrderBy")
  cmsearch: OrderBy @source(subgraph: "Rfam", name: "cmsearch", type: "OrderBy")
  num_seed: OrderBy @source(subgraph: "Rfam", name: "num_seed", type: "OrderBy")
  num_full: OrderBy @source(subgraph: "Rfam", name: "num_full", type: "OrderBy")
  num_genome_seq: OrderBy @source(subgraph: "Rfam", name: "num_genome_seq", type: "OrderBy")
  num_refseq: OrderBy @source(subgraph: "Rfam", name: "num_refseq", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
  structure_source: OrderBy @source(subgraph: "Rfam", name: "structure_source", type: "OrderBy")
  number_of_species: OrderBy @source(subgraph: "Rfam", name: "number_of_species", type: "OrderBy")
  number_3d_structures: OrderBy @source(subgraph: "Rfam", name: "number_3d_structures", type: "OrderBy")
  num_pseudonokts: OrderBy @source(subgraph: "Rfam", name: "num_pseudonokts", type: "OrderBy")
  tax_seed: OrderBy @source(subgraph: "Rfam", name: "tax_seed", type: "OrderBy")
  ecmli_lambda: OrderBy @source(subgraph: "Rfam", name: "ecmli_lambda", type: "OrderBy")
  ecmli_mu: OrderBy @source(subgraph: "Rfam", name: "ecmli_mu", type: "OrderBy")
  ecmli_cal_db: OrderBy @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "OrderBy")
  ecmli_cal_hits: OrderBy @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "OrderBy")
  maxl: OrderBy @source(subgraph: "Rfam", name: "maxl", type: "OrderBy")
  clen: OrderBy @source(subgraph: "Rfam", name: "clen", type: "OrderBy")
  match_pair_node: OrderBy @source(subgraph: "Rfam", name: "match_pair_node", type: "OrderBy")
  hmm_tau: OrderBy @source(subgraph: "Rfam", name: "hmm_tau", type: "OrderBy")
  hmm_lambda: OrderBy @source(subgraph: "Rfam", name: "hmm_lambda", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  updated: OrderBy @source(subgraph: "Rfam", name: "updated", type: "OrderBy")
}

type _overlap @source(subgraph: "Rfam", name: "_overlap") {
  auto_overlap: Int! @source(subgraph: "Rfam", name: "auto_overlap", type: "Int!")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  _overlap_membership(limit: Int, offset: Int, where: _overlap_membership_WhereInput, orderBy: _overlap_membership_OrderByInput): [_overlap_membership] @mysqlSelect(table: "_overlap_membership", columnMap: [["auto_overlap", "auto_overlap"]]) @source(subgraph: "Rfam", name: "_overlap_membership", type: "[_overlap_membership]")
}

input _overlap_membership_WhereInput @source(subgraph: "Rfam", name: "_overlap_membership_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  auto_overlap: String @source(subgraph: "Rfam", name: "auto_overlap", type: "String")
}

input _overlap_membership_OrderByInput @source(subgraph: "Rfam", name: "_overlap_membership_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  auto_overlap: OrderBy @source(subgraph: "Rfam", name: "auto_overlap", type: "OrderBy")
}

input _overlap_WhereInput @source(subgraph: "Rfam", name: "_overlap_WhereInput") {
  auto_overlap: String @source(subgraph: "Rfam", name: "auto_overlap", type: "String")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
}

input _overlap_OrderByInput @source(subgraph: "Rfam", name: "_overlap_OrderByInput") {
  auto_overlap: OrderBy @source(subgraph: "Rfam", name: "auto_overlap", type: "OrderBy")
  id: OrderBy @source(subgraph: "Rfam", name: "id", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
}

type _post_process @source(subgraph: "Rfam", name: "_post_process") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  author: String! @source(subgraph: "Rfam", name: "author", type: "String!")
  uuid: String! @source(subgraph: "Rfam", name: "uuid", type: "String!")
  status: _post_process_status! @source(subgraph: "Rfam", name: "status", type: "_post_process_status!")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  opened: DateTime @source(subgraph: "Rfam", name: "opened", type: "DateTime")
  closed: DateTime @source(subgraph: "Rfam", name: "closed", type: "DateTime")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: Int @source(subgraph: "Rfam", name: "lsf_id", type: "Int")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

enum _post_process_status @source(subgraph: "Rfam", name: "_post_process_status") {
  DONE @source(subgraph: "Rfam", name: "DONE")
  PEND @source(subgraph: "Rfam", name: "PEND")
  RUN @source(subgraph: "Rfam", name: "RUN")
  FAIL @source(subgraph: "Rfam", name: "FAIL")
  KILL @source(subgraph: "Rfam", name: "KILL")
}

input _post_process_WhereInput @source(subgraph: "Rfam", name: "_post_process_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  uuid: String @source(subgraph: "Rfam", name: "uuid", type: "String")
  status: String @source(subgraph: "Rfam", name: "status", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  opened: String @source(subgraph: "Rfam", name: "opened", type: "String")
  closed: String @source(subgraph: "Rfam", name: "closed", type: "String")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: String @source(subgraph: "Rfam", name: "lsf_id", type: "String")
}

input _post_process_OrderByInput @source(subgraph: "Rfam", name: "_post_process_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  uuid: OrderBy @source(subgraph: "Rfam", name: "uuid", type: "OrderBy")
  status: OrderBy @source(subgraph: "Rfam", name: "status", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  opened: OrderBy @source(subgraph: "Rfam", name: "opened", type: "OrderBy")
  closed: OrderBy @source(subgraph: "Rfam", name: "closed", type: "OrderBy")
  message: OrderBy @source(subgraph: "Rfam", name: "message", type: "OrderBy")
  lsf_id: OrderBy @source(subgraph: "Rfam", name: "lsf_id", type: "OrderBy")
}

type alignment_and_tree @source(subgraph: "Rfam", name: "alignment_and_tree") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  type: alignment_and_tree_type! @source(subgraph: "Rfam", name: "type", type: "alignment_and_tree_type!")
  alignment: String @source(subgraph: "Rfam", name: "alignment", type: "String")
  tree: String @source(subgraph: "Rfam", name: "tree", type: "String")
  treemethod: String @source(subgraph: "Rfam", name: "treemethod", type: "String")
  average_length: Float @source(subgraph: "Rfam", name: "average_length", type: "Float")
  percent_id: Float @source(subgraph: "Rfam", name: "percent_id", type: "Float")
  number_of_sequences: BigInt @source(subgraph: "Rfam", name: "number_of_sequences", type: "BigInt")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

enum alignment_and_tree_type @source(subgraph: "Rfam", name: "alignment_and_tree_type") {
  seed @source(subgraph: "Rfam", name: "seed")
  seedTax @source(subgraph: "Rfam", name: "seedTax")
  genome @source(subgraph: "Rfam", name: "genome")
  genomeTax @source(subgraph: "Rfam", name: "genomeTax")
}

input alignment_and_tree_WhereInput @source(subgraph: "Rfam", name: "alignment_and_tree_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  alignment: String @source(subgraph: "Rfam", name: "alignment", type: "String")
  tree: String @source(subgraph: "Rfam", name: "tree", type: "String")
  treemethod: String @source(subgraph: "Rfam", name: "treemethod", type: "String")
  average_length: String @source(subgraph: "Rfam", name: "average_length", type: "String")
  percent_id: String @source(subgraph: "Rfam", name: "percent_id", type: "String")
  number_of_sequences: String @source(subgraph: "Rfam", name: "number_of_sequences", type: "String")
}

input alignment_and_tree_OrderByInput @source(subgraph: "Rfam", name: "alignment_and_tree_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
  alignment: OrderBy @source(subgraph: "Rfam", name: "alignment", type: "OrderBy")
  tree: OrderBy @source(subgraph: "Rfam", name: "tree", type: "OrderBy")
  treemethod: OrderBy @source(subgraph: "Rfam", name: "treemethod", type: "OrderBy")
  average_length: OrderBy @source(subgraph: "Rfam", name: "average_length", type: "OrderBy")
  percent_id: OrderBy @source(subgraph: "Rfam", name: "percent_id", type: "OrderBy")
  number_of_sequences: OrderBy @source(subgraph: "Rfam", name: "number_of_sequences", type: "OrderBy")
}

type clan_membership @source(subgraph: "Rfam", name: "clan_membership") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  clan(where: clan_WhereInput, orderBy: clan_OrderByInput, limit: Int, offset: Int): [clan] @mysqlSelect(table: "clan", columnMap: [["clan_acc", "clan_acc"]]) @mysqlTableForeign(columnName: "clan_acc") @source(subgraph: "Rfam", name: "clan", type: "[clan]")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

type clan @source(subgraph: "Rfam", name: "clan") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp! @source(subgraph: "Rfam", name: "updated", type: "Timestamp!")
  clan_database_link(limit: Int, offset: Int, where: clan_database_link_WhereInput, orderBy: clan_database_link_OrderByInput): [clan_database_link] @mysqlSelect(table: "clan_database_link", columnMap: [["clan_acc", "clan_acc"]]) @source(subgraph: "Rfam", name: "clan_database_link", type: "[clan_database_link]")
  clan_literature_reference(limit: Int, offset: Int, where: clan_literature_reference_WhereInput, orderBy: clan_literature_reference_OrderByInput): [clan_literature_reference] @mysqlSelect(table: "clan_literature_reference", columnMap: [["clan_acc", "clan_acc"]]) @source(subgraph: "Rfam", name: "clan_literature_reference", type: "[clan_literature_reference]")
  clan_membership(limit: Int, offset: Int, where: clan_membership_WhereInput, orderBy: clan_membership_OrderByInput): [clan_membership] @mysqlSelect(table: "clan_membership", columnMap: [["clan_acc", "clan_acc"]]) @source(subgraph: "Rfam", name: "clan_membership", type: "[clan_membership]")
}

type clan_database_link @source(subgraph: "Rfam", name: "clan_database_link") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  db_id: String! @source(subgraph: "Rfam", name: "db_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String! @source(subgraph: "Rfam", name: "db_link", type: "String!")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
  clan(where: clan_WhereInput, orderBy: clan_OrderByInput, limit: Int, offset: Int): [clan] @mysqlSelect(table: "clan", columnMap: [["clan_acc", "clan_acc"]]) @mysqlTableForeign(columnName: "clan_acc") @source(subgraph: "Rfam", name: "clan", type: "[clan]")
}

input clan_WhereInput @source(subgraph: "Rfam", name: "clan_WhereInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  updated: String @source(subgraph: "Rfam", name: "updated", type: "String")
}

input clan_OrderByInput @source(subgraph: "Rfam", name: "clan_OrderByInput") {
  clan_acc: OrderBy @source(subgraph: "Rfam", name: "clan_acc", type: "OrderBy")
  id: OrderBy @source(subgraph: "Rfam", name: "id", type: "OrderBy")
  previous_id: OrderBy @source(subgraph: "Rfam", name: "previous_id", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  updated: OrderBy @source(subgraph: "Rfam", name: "updated", type: "OrderBy")
}

input clan_database_link_WhereInput @source(subgraph: "Rfam", name: "clan_database_link_WhereInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  db_id: String @source(subgraph: "Rfam", name: "db_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String @source(subgraph: "Rfam", name: "db_link", type: "String")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input clan_database_link_OrderByInput @source(subgraph: "Rfam", name: "clan_database_link_OrderByInput") {
  clan_acc: OrderBy @source(subgraph: "Rfam", name: "clan_acc", type: "OrderBy")
  db_id: OrderBy @source(subgraph: "Rfam", name: "db_id", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  db_link: OrderBy @source(subgraph: "Rfam", name: "db_link", type: "OrderBy")
  other_params: OrderBy @source(subgraph: "Rfam", name: "other_params", type: "OrderBy")
}

type clan_literature_reference @source(subgraph: "Rfam", name: "clan_literature_reference") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  pmid: Int! @source(subgraph: "Rfam", name: "pmid", type: "Int!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
  clan(where: clan_WhereInput, orderBy: clan_OrderByInput, limit: Int, offset: Int): [clan] @mysqlSelect(table: "clan", columnMap: [["clan_acc", "clan_acc"]]) @mysqlTableForeign(columnName: "clan_acc") @source(subgraph: "Rfam", name: "clan", type: "[clan]")
  literature_reference(where: literature_reference_WhereInput, orderBy: literature_reference_OrderByInput, limit: Int, offset: Int): [literature_reference] @mysqlSelect(table: "literature_reference", columnMap: [["pmid", "pmid"]]) @mysqlTableForeign(columnName: "pmid") @source(subgraph: "Rfam", name: "literature_reference", type: "[literature_reference]")
}

type literature_reference @source(subgraph: "Rfam", name: "literature_reference") {
  pmid: Int! @source(subgraph: "Rfam", name: "pmid", type: "Int!")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  journal: String @source(subgraph: "Rfam", name: "journal", type: "String")
  clan_literature_reference(limit: Int, offset: Int, where: clan_literature_reference_WhereInput, orderBy: clan_literature_reference_OrderByInput): [clan_literature_reference] @mysqlSelect(table: "clan_literature_reference", columnMap: [["pmid", "pmid"]]) @source(subgraph: "Rfam", name: "clan_literature_reference", type: "[clan_literature_reference]")
  family_literature_reference(limit: Int, offset: Int, where: family_literature_reference_WhereInput, orderBy: family_literature_reference_OrderByInput): [family_literature_reference] @mysqlSelect(table: "family_literature_reference", columnMap: [["pmid", "pmid"]]) @source(subgraph: "Rfam", name: "family_literature_reference", type: "[family_literature_reference]")
  motif_literature(limit: Int, offset: Int, where: motif_literature_WhereInput, orderBy: motif_literature_OrderByInput): [motif_literature] @mysqlSelect(table: "motif_literature", columnMap: [["pmid", "pmid"]]) @source(subgraph: "Rfam", name: "motif_literature", type: "[motif_literature]")
}

input clan_literature_reference_WhereInput @source(subgraph: "Rfam", name: "clan_literature_reference_WhereInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  pmid: String @source(subgraph: "Rfam", name: "pmid", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: String @source(subgraph: "Rfam", name: "order_added", type: "String")
}

input clan_literature_reference_OrderByInput @source(subgraph: "Rfam", name: "clan_literature_reference_OrderByInput") {
  clan_acc: OrderBy @source(subgraph: "Rfam", name: "clan_acc", type: "OrderBy")
  pmid: OrderBy @source(subgraph: "Rfam", name: "pmid", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  order_added: OrderBy @source(subgraph: "Rfam", name: "order_added", type: "OrderBy")
}

type family_literature_reference @source(subgraph: "Rfam", name: "family_literature_reference") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pmid: Int! @source(subgraph: "Rfam", name: "pmid", type: "Int!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  literature_reference(where: literature_reference_WhereInput, orderBy: literature_reference_OrderByInput, limit: Int, offset: Int): [literature_reference] @mysqlSelect(table: "literature_reference", columnMap: [["pmid", "pmid"]]) @mysqlTableForeign(columnName: "pmid") @source(subgraph: "Rfam", name: "literature_reference", type: "[literature_reference]")
}

input literature_reference_WhereInput @source(subgraph: "Rfam", name: "literature_reference_WhereInput") {
  pmid: String @source(subgraph: "Rfam", name: "pmid", type: "String")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  journal: String @source(subgraph: "Rfam", name: "journal", type: "String")
}

input literature_reference_OrderByInput @source(subgraph: "Rfam", name: "literature_reference_OrderByInput") {
  pmid: OrderBy @source(subgraph: "Rfam", name: "pmid", type: "OrderBy")
  title: OrderBy @source(subgraph: "Rfam", name: "title", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  journal: OrderBy @source(subgraph: "Rfam", name: "journal", type: "OrderBy")
}

input family_literature_reference_WhereInput @source(subgraph: "Rfam", name: "family_literature_reference_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pmid: String @source(subgraph: "Rfam", name: "pmid", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: String @source(subgraph: "Rfam", name: "order_added", type: "String")
}

input family_literature_reference_OrderByInput @source(subgraph: "Rfam", name: "family_literature_reference_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  pmid: OrderBy @source(subgraph: "Rfam", name: "pmid", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  order_added: OrderBy @source(subgraph: "Rfam", name: "order_added", type: "OrderBy")
}

type motif_literature @source(subgraph: "Rfam", name: "motif_literature") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  pmid: Int! @source(subgraph: "Rfam", name: "pmid", type: "Int!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
  literature_reference(where: literature_reference_WhereInput, orderBy: literature_reference_OrderByInput, limit: Int, offset: Int): [literature_reference] @mysqlSelect(table: "literature_reference", columnMap: [["pmid", "pmid"]]) @mysqlTableForeign(columnName: "pmid") @source(subgraph: "Rfam", name: "literature_reference", type: "[literature_reference]")
  motif_old(where: motif_old_WhereInput, orderBy: motif_old_OrderByInput, limit: Int, offset: Int): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(subgraph: "Rfam", name: "motif_old", type: "[motif_old]")
}

type motif_old @source(subgraph: "Rfam", name: "motif_old") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp! @source(subgraph: "Rfam", name: "updated", type: "Timestamp!")
  motif_family_stats(limit: Int, offset: Int, where: motif_family_stats_WhereInput, orderBy: motif_family_stats_OrderByInput): [motif_family_stats] @mysqlSelect(table: "motif_family_stats", columnMap: [["motif_acc", "motif_acc"]]) @source(subgraph: "Rfam", name: "motif_family_stats", type: "[motif_family_stats]")
  motif_literature(limit: Int, offset: Int, where: motif_literature_WhereInput, orderBy: motif_literature_OrderByInput): [motif_literature] @mysqlSelect(table: "motif_literature", columnMap: [["motif_acc", "motif_acc"]]) @source(subgraph: "Rfam", name: "motif_literature", type: "[motif_literature]")
  motif_matches(limit: Int, offset: Int, where: motif_matches_WhereInput, orderBy: motif_matches_OrderByInput): [motif_matches] @mysqlSelect(table: "motif_matches", columnMap: [["motif_acc", "motif_acc"]]) @source(subgraph: "Rfam", name: "motif_matches", type: "[motif_matches]")
  motif_pdb(limit: Int, offset: Int, where: motif_pdb_WhereInput, orderBy: motif_pdb_OrderByInput): [motif_pdb] @mysqlSelect(table: "motif_pdb", columnMap: [["motif_acc", "motif_acc"]]) @source(subgraph: "Rfam", name: "motif_pdb", type: "[motif_pdb]")
  motif_ss_image(limit: Int, offset: Int, where: motif_ss_image_WhereInput, orderBy: motif_ss_image_OrderByInput): [motif_ss_image] @mysqlSelect(table: "motif_ss_image", columnMap: [["motif_acc", "motif_acc"]]) @source(subgraph: "Rfam", name: "motif_ss_image", type: "[motif_ss_image]")
}

type motif_family_stats @source(subgraph: "Rfam", name: "motif_family_stats") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  num_hits: Int @source(subgraph: "Rfam", name: "num_hits", type: "Int")
  frac_hits: Float @source(subgraph: "Rfam", name: "frac_hits", type: "Float")
  sum_bits: Float @source(subgraph: "Rfam", name: "sum_bits", type: "Float")
  avg_weight_bits: Float @source(subgraph: "Rfam", name: "avg_weight_bits", type: "Float")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  motif_old(where: motif_old_WhereInput, orderBy: motif_old_OrderByInput, limit: Int, offset: Int): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(subgraph: "Rfam", name: "motif_old", type: "[motif_old]")
}

input motif_old_WhereInput @source(subgraph: "Rfam", name: "motif_old_WhereInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: String @source(subgraph: "Rfam", name: "gathering_cutoff", type: "String")
  trusted_cutoff: String @source(subgraph: "Rfam", name: "trusted_cutoff", type: "String")
  noise_cutoff: String @source(subgraph: "Rfam", name: "noise_cutoff", type: "String")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  ecmli_lambda: String @source(subgraph: "Rfam", name: "ecmli_lambda", type: "String")
  ecmli_mu: String @source(subgraph: "Rfam", name: "ecmli_mu", type: "String")
  ecmli_cal_db: String @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "String")
  ecmli_cal_hits: String @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "String")
  maxl: String @source(subgraph: "Rfam", name: "maxl", type: "String")
  clen: String @source(subgraph: "Rfam", name: "clen", type: "String")
  match_pair_node: String @source(subgraph: "Rfam", name: "match_pair_node", type: "String")
  hmm_tau: String @source(subgraph: "Rfam", name: "hmm_tau", type: "String")
  hmm_lambda: String @source(subgraph: "Rfam", name: "hmm_lambda", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  updated: String @source(subgraph: "Rfam", name: "updated", type: "String")
}

input motif_old_OrderByInput @source(subgraph: "Rfam", name: "motif_old_OrderByInput") {
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  motif_id: OrderBy @source(subgraph: "Rfam", name: "motif_id", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  seed_source: OrderBy @source(subgraph: "Rfam", name: "seed_source", type: "OrderBy")
  gathering_cutoff: OrderBy @source(subgraph: "Rfam", name: "gathering_cutoff", type: "OrderBy")
  trusted_cutoff: OrderBy @source(subgraph: "Rfam", name: "trusted_cutoff", type: "OrderBy")
  noise_cutoff: OrderBy @source(subgraph: "Rfam", name: "noise_cutoff", type: "OrderBy")
  cmbuild: OrderBy @source(subgraph: "Rfam", name: "cmbuild", type: "OrderBy")
  cmcalibrate: OrderBy @source(subgraph: "Rfam", name: "cmcalibrate", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
  ecmli_lambda: OrderBy @source(subgraph: "Rfam", name: "ecmli_lambda", type: "OrderBy")
  ecmli_mu: OrderBy @source(subgraph: "Rfam", name: "ecmli_mu", type: "OrderBy")
  ecmli_cal_db: OrderBy @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "OrderBy")
  ecmli_cal_hits: OrderBy @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "OrderBy")
  maxl: OrderBy @source(subgraph: "Rfam", name: "maxl", type: "OrderBy")
  clen: OrderBy @source(subgraph: "Rfam", name: "clen", type: "OrderBy")
  match_pair_node: OrderBy @source(subgraph: "Rfam", name: "match_pair_node", type: "OrderBy")
  hmm_tau: OrderBy @source(subgraph: "Rfam", name: "hmm_tau", type: "OrderBy")
  hmm_lambda: OrderBy @source(subgraph: "Rfam", name: "hmm_lambda", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  updated: OrderBy @source(subgraph: "Rfam", name: "updated", type: "OrderBy")
}

input motif_family_stats_WhereInput @source(subgraph: "Rfam", name: "motif_family_stats_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  num_hits: String @source(subgraph: "Rfam", name: "num_hits", type: "String")
  frac_hits: String @source(subgraph: "Rfam", name: "frac_hits", type: "String")
  sum_bits: String @source(subgraph: "Rfam", name: "sum_bits", type: "String")
  avg_weight_bits: String @source(subgraph: "Rfam", name: "avg_weight_bits", type: "String")
}

input motif_family_stats_OrderByInput @source(subgraph: "Rfam", name: "motif_family_stats_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  num_hits: OrderBy @source(subgraph: "Rfam", name: "num_hits", type: "OrderBy")
  frac_hits: OrderBy @source(subgraph: "Rfam", name: "frac_hits", type: "OrderBy")
  sum_bits: OrderBy @source(subgraph: "Rfam", name: "sum_bits", type: "OrderBy")
  avg_weight_bits: OrderBy @source(subgraph: "Rfam", name: "avg_weight_bits", type: "OrderBy")
}

input motif_literature_WhereInput @source(subgraph: "Rfam", name: "motif_literature_WhereInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  pmid: String @source(subgraph: "Rfam", name: "pmid", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: String @source(subgraph: "Rfam", name: "order_added", type: "String")
}

input motif_literature_OrderByInput @source(subgraph: "Rfam", name: "motif_literature_OrderByInput") {
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  pmid: OrderBy @source(subgraph: "Rfam", name: "pmid", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  order_added: OrderBy @source(subgraph: "Rfam", name: "order_added", type: "OrderBy")
}

type motif_matches @source(subgraph: "Rfam", name: "motif_matches") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  rfamseq_start: BigInt @source(subgraph: "Rfam", name: "rfamseq_start", type: "BigInt")
  rfamseq_stop: BigInt @source(subgraph: "Rfam", name: "rfamseq_stop", type: "BigInt")
  query_start: Int @source(subgraph: "Rfam", name: "query_start", type: "Int")
  query_stop: Int @source(subgraph: "Rfam", name: "query_stop", type: "Int")
  motif_start: Int @source(subgraph: "Rfam", name: "motif_start", type: "Int")
  motif_stop: Int @source(subgraph: "Rfam", name: "motif_stop", type: "Int")
  e_value: String @source(subgraph: "Rfam", name: "e_value", type: "String")
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  motif_old(where: motif_old_WhereInput, orderBy: motif_old_OrderByInput, limit: Int, offset: Int): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(subgraph: "Rfam", name: "motif_old", type: "[motif_old]")
  rfamseq(where: rfamseq_WhereInput, orderBy: rfamseq_OrderByInput, limit: Int, offset: Int): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(subgraph: "Rfam", name: "rfamseq", type: "[rfamseq]")
}

type rfamseq @source(subgraph: "Rfam", name: "rfamseq") {
  """This should be """
  rfamseq_acc: String! @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String!")
  accession: String! @source(subgraph: "Rfam", name: "accession", type: "String!")
  version: Int! @source(subgraph: "Rfam", name: "version", type: "Int!")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  mol_type: rfamseq_mol_type! @source(subgraph: "Rfam", name: "mol_type", type: "rfamseq_mol_type!")
  length: Int @source(subgraph: "Rfam", name: "length", type: "Int")
  description: String! @source(subgraph: "Rfam", name: "description", type: "String!")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String! @source(subgraph: "Rfam", name: "source", type: "String!")
  features(limit: Int, offset: Int, where: features_WhereInput, orderBy: features_OrderByInput): [features] @mysqlSelect(table: "features", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(subgraph: "Rfam", name: "features", type: "[features]")
  full_region(limit: Int, offset: Int, where: full_region_WhereInput, orderBy: full_region_OrderByInput): [full_region] @mysqlSelect(table: "full_region", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(subgraph: "Rfam", name: "full_region", type: "[full_region]")
  motif_matches(limit: Int, offset: Int, where: motif_matches_WhereInput, orderBy: motif_matches_OrderByInput): [motif_matches] @mysqlSelect(table: "motif_matches", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(subgraph: "Rfam", name: "motif_matches", type: "[motif_matches]")
  pdb_rfam_reg(limit: Int, offset: Int, where: pdb_rfam_reg_WhereInput, orderBy: pdb_rfam_reg_OrderByInput): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(subgraph: "Rfam", name: "pdb_rfam_reg", type: "[pdb_rfam_reg]")
  taxonomy(where: taxonomy_WhereInput, orderBy: taxonomy_OrderByInput, limit: Int, offset: Int): [taxonomy] @mysqlSelect(table: "taxonomy", columnMap: [["ncbi_id", "ncbi_id"]]) @mysqlTableForeign(columnName: "ncbi_id") @source(subgraph: "Rfam", name: "taxonomy", type: "[taxonomy]")
  seed_region(limit: Int, offset: Int, where: seed_region_WhereInput, orderBy: seed_region_OrderByInput): [seed_region] @mysqlSelect(table: "seed_region", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(subgraph: "Rfam", name: "seed_region", type: "[seed_region]")
}

enum rfamseq_mol_type @source(subgraph: "Rfam", name: "rfamseq_mol_type") {
  protein @source(subgraph: "Rfam", name: "protein")
  genomic_DNA @source(subgraph: "Rfam", name: "genomic_DNA")
  DNA @source(subgraph: "Rfam", name: "DNA")
  ss_DNA @source(subgraph: "Rfam", name: "ss_DNA")
  RNA @source(subgraph: "Rfam", name: "RNA")
  genomic_RNA @source(subgraph: "Rfam", name: "genomic_RNA")
  ds_RNA @source(subgraph: "Rfam", name: "ds_RNA")
  ss_cRNA @source(subgraph: "Rfam", name: "ss_cRNA")
  ss_RNA @source(subgraph: "Rfam", name: "ss_RNA")
  mRNA @source(subgraph: "Rfam", name: "mRNA")
  tRNA @source(subgraph: "Rfam", name: "tRNA")
  rRNA @source(subgraph: "Rfam", name: "rRNA")
  snoRNA @source(subgraph: "Rfam", name: "snoRNA")
  snRNA @source(subgraph: "Rfam", name: "snRNA")
  scRNA @source(subgraph: "Rfam", name: "scRNA")
  pre_RNA @source(subgraph: "Rfam", name: "pre_RNA")
  other_RNA @source(subgraph: "Rfam", name: "other_RNA")
  other_DNA @source(subgraph: "Rfam", name: "other_DNA")
  unassigned_DNA @source(subgraph: "Rfam", name: "unassigned_DNA")
  unassigned_RNA @source(subgraph: "Rfam", name: "unassigned_RNA")
  viral_cRNA @source(subgraph: "Rfam", name: "viral_cRNA")
  cRNA @source(subgraph: "Rfam", name: "cRNA")
  transcribed_RNA @source(subgraph: "Rfam", name: "transcribed_RNA")
  ncRNA @source(subgraph: "Rfam", name: "ncRNA")
  ribozyme @source(subgraph: "Rfam", name: "ribozyme")
  antisense_RNA @source(subgraph: "Rfam", name: "antisense_RNA")
  other @source(subgraph: "Rfam", name: "other")
}

type features @source(subgraph: "Rfam", name: "features") {
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  database_id: String! @source(subgraph: "Rfam", name: "database_id", type: "String!")
  primary_id: String! @source(subgraph: "Rfam", name: "primary_id", type: "String!")
  secondary_id: String @source(subgraph: "Rfam", name: "secondary_id", type: "String")
  feat_orient: Int! @source(subgraph: "Rfam", name: "feat_orient", type: "Int!")
  feat_start: BigInt! @source(subgraph: "Rfam", name: "feat_start", type: "BigInt!")
  feat_end: BigInt! @source(subgraph: "Rfam", name: "feat_end", type: "BigInt!")
  quaternary_id: String @source(subgraph: "Rfam", name: "quaternary_id", type: "String")
  rfamseq(where: rfamseq_WhereInput, orderBy: rfamseq_OrderByInput, limit: Int, offset: Int): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(subgraph: "Rfam", name: "rfamseq", type: "[rfamseq]")
}

input rfamseq_WhereInput @source(subgraph: "Rfam", name: "rfamseq_WhereInput") {
  """This should be """
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  accession: String @source(subgraph: "Rfam", name: "accession", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
  ncbi_id: String @source(subgraph: "Rfam", name: "ncbi_id", type: "String")
  mol_type: String @source(subgraph: "Rfam", name: "mol_type", type: "String")
  length: String @source(subgraph: "Rfam", name: "length", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String @source(subgraph: "Rfam", name: "source", type: "String")
}

input rfamseq_OrderByInput @source(subgraph: "Rfam", name: "rfamseq_OrderByInput") {
  """This should be """
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  accession: OrderBy @source(subgraph: "Rfam", name: "accession", type: "OrderBy")
  version: OrderBy @source(subgraph: "Rfam", name: "version", type: "OrderBy")
  ncbi_id: OrderBy @source(subgraph: "Rfam", name: "ncbi_id", type: "OrderBy")
  mol_type: OrderBy @source(subgraph: "Rfam", name: "mol_type", type: "OrderBy")
  length: OrderBy @source(subgraph: "Rfam", name: "length", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  previous_acc: OrderBy @source(subgraph: "Rfam", name: "previous_acc", type: "OrderBy")
  source: OrderBy @source(subgraph: "Rfam", name: "source", type: "OrderBy")
}

input features_WhereInput @source(subgraph: "Rfam", name: "features_WhereInput") {
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  database_id: String @source(subgraph: "Rfam", name: "database_id", type: "String")
  primary_id: String @source(subgraph: "Rfam", name: "primary_id", type: "String")
  secondary_id: String @source(subgraph: "Rfam", name: "secondary_id", type: "String")
  feat_orient: String @source(subgraph: "Rfam", name: "feat_orient", type: "String")
  feat_start: String @source(subgraph: "Rfam", name: "feat_start", type: "String")
  feat_end: String @source(subgraph: "Rfam", name: "feat_end", type: "String")
  quaternary_id: String @source(subgraph: "Rfam", name: "quaternary_id", type: "String")
}

input features_OrderByInput @source(subgraph: "Rfam", name: "features_OrderByInput") {
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  database_id: OrderBy @source(subgraph: "Rfam", name: "database_id", type: "OrderBy")
  primary_id: OrderBy @source(subgraph: "Rfam", name: "primary_id", type: "OrderBy")
  secondary_id: OrderBy @source(subgraph: "Rfam", name: "secondary_id", type: "OrderBy")
  feat_orient: OrderBy @source(subgraph: "Rfam", name: "feat_orient", type: "OrderBy")
  feat_start: OrderBy @source(subgraph: "Rfam", name: "feat_start", type: "OrderBy")
  feat_end: OrderBy @source(subgraph: "Rfam", name: "feat_end", type: "OrderBy")
  quaternary_id: OrderBy @source(subgraph: "Rfam", name: "quaternary_id", type: "OrderBy")
}

type full_region @source(subgraph: "Rfam", name: "full_region") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfamseq_acc: String! @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String!")
  seq_start: BigInt! @source(subgraph: "Rfam", name: "seq_start", type: "BigInt!")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float! @source(subgraph: "Rfam", name: "bit_score", type: "Float!")
  evalue_score: String! @source(subgraph: "Rfam", name: "evalue_score", type: "String!")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  truncated: full_region_truncated! @source(subgraph: "Rfam", name: "truncated", type: "full_region_truncated!")
  type: full_region_type! @source(subgraph: "Rfam", name: "type", type: "full_region_type!")
  is_significant: Int! @source(subgraph: "Rfam", name: "is_significant", type: "Int!")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  rfamseq(where: rfamseq_WhereInput, orderBy: rfamseq_OrderByInput, limit: Int, offset: Int): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(subgraph: "Rfam", name: "rfamseq", type: "[rfamseq]")
}

enum full_region_truncated @source(subgraph: "Rfam", name: "full_region_truncated") {
  _0 @source(subgraph: "Rfam", name: "_0")
  _5 @source(subgraph: "Rfam", name: "_5")
  _3 @source(subgraph: "Rfam", name: "_3")
  _53 @source(subgraph: "Rfam", name: "_53")
}

enum full_region_type @source(subgraph: "Rfam", name: "full_region_type") {
  seed @source(subgraph: "Rfam", name: "seed")
  full @source(subgraph: "Rfam", name: "full")
}

input full_region_WhereInput @source(subgraph: "Rfam", name: "full_region_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: String @source(subgraph: "Rfam", name: "seq_start", type: "String")
  seq_end: String @source(subgraph: "Rfam", name: "seq_end", type: "String")
  """99999.99 is the approx limit from Infernal."""
  bit_score: String @source(subgraph: "Rfam", name: "bit_score", type: "String")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: String @source(subgraph: "Rfam", name: "cm_start", type: "String")
  cm_end: String @source(subgraph: "Rfam", name: "cm_end", type: "String")
  truncated: String @source(subgraph: "Rfam", name: "truncated", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  is_significant: String @source(subgraph: "Rfam", name: "is_significant", type: "String")
}

input full_region_OrderByInput @source(subgraph: "Rfam", name: "full_region_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  seq_start: OrderBy @source(subgraph: "Rfam", name: "seq_start", type: "OrderBy")
  seq_end: OrderBy @source(subgraph: "Rfam", name: "seq_end", type: "OrderBy")
  """99999.99 is the approx limit from Infernal."""
  bit_score: OrderBy @source(subgraph: "Rfam", name: "bit_score", type: "OrderBy")
  evalue_score: OrderBy @source(subgraph: "Rfam", name: "evalue_score", type: "OrderBy")
  cm_start: OrderBy @source(subgraph: "Rfam", name: "cm_start", type: "OrderBy")
  cm_end: OrderBy @source(subgraph: "Rfam", name: "cm_end", type: "OrderBy")
  truncated: OrderBy @source(subgraph: "Rfam", name: "truncated", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
  is_significant: OrderBy @source(subgraph: "Rfam", name: "is_significant", type: "OrderBy")
}

input motif_matches_WhereInput @source(subgraph: "Rfam", name: "motif_matches_WhereInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  rfamseq_start: String @source(subgraph: "Rfam", name: "rfamseq_start", type: "String")
  rfamseq_stop: String @source(subgraph: "Rfam", name: "rfamseq_stop", type: "String")
  query_start: String @source(subgraph: "Rfam", name: "query_start", type: "String")
  query_stop: String @source(subgraph: "Rfam", name: "query_stop", type: "String")
  motif_start: String @source(subgraph: "Rfam", name: "motif_start", type: "String")
  motif_stop: String @source(subgraph: "Rfam", name: "motif_stop", type: "String")
  e_value: String @source(subgraph: "Rfam", name: "e_value", type: "String")
  bit_score: String @source(subgraph: "Rfam", name: "bit_score", type: "String")
}

input motif_matches_OrderByInput @source(subgraph: "Rfam", name: "motif_matches_OrderByInput") {
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  rfamseq_start: OrderBy @source(subgraph: "Rfam", name: "rfamseq_start", type: "OrderBy")
  rfamseq_stop: OrderBy @source(subgraph: "Rfam", name: "rfamseq_stop", type: "OrderBy")
  query_start: OrderBy @source(subgraph: "Rfam", name: "query_start", type: "OrderBy")
  query_stop: OrderBy @source(subgraph: "Rfam", name: "query_stop", type: "OrderBy")
  motif_start: OrderBy @source(subgraph: "Rfam", name: "motif_start", type: "OrderBy")
  motif_stop: OrderBy @source(subgraph: "Rfam", name: "motif_stop", type: "OrderBy")
  e_value: OrderBy @source(subgraph: "Rfam", name: "e_value", type: "OrderBy")
  bit_score: OrderBy @source(subgraph: "Rfam", name: "bit_score", type: "OrderBy")
}

type pdb_rfam_reg @source(subgraph: "Rfam", name: "pdb_rfam_reg") {
  auto_pdb_reg: Int! @source(subgraph: "Rfam", name: "auto_pdb_reg", type: "Int!")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pdb_seq: String! @source(subgraph: "Rfam", name: "pdb_seq", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_res_start: Int @source(subgraph: "Rfam", name: "pdb_res_start", type: "Int")
  pdb_res_end: Int @source(subgraph: "Rfam", name: "pdb_res_end", type: "Int")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt @source(subgraph: "Rfam", name: "seq_end", type: "BigInt")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  pdb(where: pdb_WhereInput, orderBy: pdb_OrderByInput, limit: Int, offset: Int): [pdb] @mysqlSelect(table: "pdb", columnMap: [["pdb_id", "pdb_id"]]) @mysqlTableForeign(columnName: "pdb_id") @source(subgraph: "Rfam", name: "pdb", type: "[pdb]")
  pdb_sequence(where: pdb_sequence_WhereInput, orderBy: pdb_sequence_OrderByInput, limit: Int, offset: Int): [pdb_sequence] @mysqlSelect(table: "pdb_sequence", columnMap: [["pdb_seq", "pdb_seq"]]) @mysqlTableForeign(columnName: "pdb_seq") @source(subgraph: "Rfam", name: "pdb_sequence", type: "[pdb_sequence]")
  rfamseq(where: rfamseq_WhereInput, orderBy: rfamseq_OrderByInput, limit: Int, offset: Int): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(subgraph: "Rfam", name: "rfamseq", type: "[rfamseq]")
}

type pdb @source(subgraph: "Rfam", name: "pdb") {
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  keywords: String @source(subgraph: "Rfam", name: "keywords", type: "String")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  date: String @source(subgraph: "Rfam", name: "date", type: "String")
  resolution: Float @source(subgraph: "Rfam", name: "resolution", type: "Float")
  method: String @source(subgraph: "Rfam", name: "method", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  pdb_rfam_reg(limit: Int, offset: Int, where: pdb_rfam_reg_WhereInput, orderBy: pdb_rfam_reg_OrderByInput): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["pdb_id", "pdb_id"]]) @source(subgraph: "Rfam", name: "pdb_rfam_reg", type: "[pdb_rfam_reg]")
  pdb_sequence(limit: Int, offset: Int, where: pdb_sequence_WhereInput, orderBy: pdb_sequence_OrderByInput): [pdb_sequence] @mysqlSelect(table: "pdb_sequence", columnMap: [["pdb_id", "pdb_id"]]) @source(subgraph: "Rfam", name: "pdb_sequence", type: "[pdb_sequence]")
}

input pdb_rfam_reg_WhereInput @source(subgraph: "Rfam", name: "pdb_rfam_reg_WhereInput") {
  auto_pdb_reg: String @source(subgraph: "Rfam", name: "auto_pdb_reg", type: "String")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pdb_seq: String @source(subgraph: "Rfam", name: "pdb_seq", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_res_start: String @source(subgraph: "Rfam", name: "pdb_res_start", type: "String")
  pdb_res_end: String @source(subgraph: "Rfam", name: "pdb_res_end", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: String @source(subgraph: "Rfam", name: "seq_start", type: "String")
  seq_end: String @source(subgraph: "Rfam", name: "seq_end", type: "String")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
}

input pdb_rfam_reg_OrderByInput @source(subgraph: "Rfam", name: "pdb_rfam_reg_OrderByInput") {
  auto_pdb_reg: OrderBy @source(subgraph: "Rfam", name: "auto_pdb_reg", type: "OrderBy")
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  pdb_seq: OrderBy @source(subgraph: "Rfam", name: "pdb_seq", type: "OrderBy")
  pdb_id: OrderBy @source(subgraph: "Rfam", name: "pdb_id", type: "OrderBy")
  chain: OrderBy @source(subgraph: "Rfam", name: "chain", type: "OrderBy")
  pdb_res_start: OrderBy @source(subgraph: "Rfam", name: "pdb_res_start", type: "OrderBy")
  pdb_res_end: OrderBy @source(subgraph: "Rfam", name: "pdb_res_end", type: "OrderBy")
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  seq_start: OrderBy @source(subgraph: "Rfam", name: "seq_start", type: "OrderBy")
  seq_end: OrderBy @source(subgraph: "Rfam", name: "seq_end", type: "OrderBy")
  hex_colour: OrderBy @source(subgraph: "Rfam", name: "hex_colour", type: "OrderBy")
}

type pdb_sequence @source(subgraph: "Rfam", name: "pdb_sequence") {
  pdb_seq: String! @source(subgraph: "Rfam", name: "pdb_seq", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_rfam_reg(limit: Int, offset: Int, where: pdb_rfam_reg_WhereInput, orderBy: pdb_rfam_reg_OrderByInput): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["pdb_seq", "pdb_seq"]]) @source(subgraph: "Rfam", name: "pdb_rfam_reg", type: "[pdb_rfam_reg]")
  pdb(where: pdb_WhereInput, orderBy: pdb_OrderByInput, limit: Int, offset: Int): [pdb] @mysqlSelect(table: "pdb", columnMap: [["pdb_id", "pdb_id"]]) @mysqlTableForeign(columnName: "pdb_id") @source(subgraph: "Rfam", name: "pdb", type: "[pdb]")
}

input pdb_WhereInput @source(subgraph: "Rfam", name: "pdb_WhereInput") {
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  keywords: String @source(subgraph: "Rfam", name: "keywords", type: "String")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  date: String @source(subgraph: "Rfam", name: "date", type: "String")
  resolution: String @source(subgraph: "Rfam", name: "resolution", type: "String")
  method: String @source(subgraph: "Rfam", name: "method", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
}

input pdb_OrderByInput @source(subgraph: "Rfam", name: "pdb_OrderByInput") {
  pdb_id: OrderBy @source(subgraph: "Rfam", name: "pdb_id", type: "OrderBy")
  keywords: OrderBy @source(subgraph: "Rfam", name: "keywords", type: "OrderBy")
  title: OrderBy @source(subgraph: "Rfam", name: "title", type: "OrderBy")
  date: OrderBy @source(subgraph: "Rfam", name: "date", type: "OrderBy")
  resolution: OrderBy @source(subgraph: "Rfam", name: "resolution", type: "OrderBy")
  method: OrderBy @source(subgraph: "Rfam", name: "method", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
}

input pdb_sequence_WhereInput @source(subgraph: "Rfam", name: "pdb_sequence_WhereInput") {
  pdb_seq: String @source(subgraph: "Rfam", name: "pdb_seq", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
}

input pdb_sequence_OrderByInput @source(subgraph: "Rfam", name: "pdb_sequence_OrderByInput") {
  pdb_seq: OrderBy @source(subgraph: "Rfam", name: "pdb_seq", type: "OrderBy")
  pdb_id: OrderBy @source(subgraph: "Rfam", name: "pdb_id", type: "OrderBy")
  chain: OrderBy @source(subgraph: "Rfam", name: "chain", type: "OrderBy")
}

type taxonomy @source(subgraph: "Rfam", name: "taxonomy") {
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  species: String! @source(subgraph: "Rfam", name: "species", type: "String!")
  tax_string: String @source(subgraph: "Rfam", name: "tax_string", type: "String")
  tree_display_name: String @source(subgraph: "Rfam", name: "tree_display_name", type: "String")
  align_display_name: String @source(subgraph: "Rfam", name: "align_display_name", type: "String")
  family_ncbi(limit: Int, offset: Int, where: family_ncbi_WhereInput, orderBy: family_ncbi_OrderByInput): [family_ncbi] @mysqlSelect(table: "family_ncbi", columnMap: [["ncbi_id", "ncbi_id"]]) @source(subgraph: "Rfam", name: "family_ncbi", type: "[family_ncbi]")
  rfamseq(limit: Int, offset: Int, where: rfamseq_WhereInput, orderBy: rfamseq_OrderByInput): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["ncbi_id", "ncbi_id"]]) @source(subgraph: "Rfam", name: "rfamseq", type: "[rfamseq]")
}

type family_ncbi @source(subgraph: "Rfam", name: "family_ncbi") {
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  """Is this really needed?"""
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  taxonomy(where: taxonomy_WhereInput, orderBy: taxonomy_OrderByInput, limit: Int, offset: Int): [taxonomy] @mysqlSelect(table: "taxonomy", columnMap: [["ncbi_id", "ncbi_id"]]) @mysqlTableForeign(columnName: "ncbi_id") @source(subgraph: "Rfam", name: "taxonomy", type: "[taxonomy]")
}

input taxonomy_WhereInput @source(subgraph: "Rfam", name: "taxonomy_WhereInput") {
  ncbi_id: String @source(subgraph: "Rfam", name: "ncbi_id", type: "String")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  tax_string: String @source(subgraph: "Rfam", name: "tax_string", type: "String")
  tree_display_name: String @source(subgraph: "Rfam", name: "tree_display_name", type: "String")
  align_display_name: String @source(subgraph: "Rfam", name: "align_display_name", type: "String")
}

input taxonomy_OrderByInput @source(subgraph: "Rfam", name: "taxonomy_OrderByInput") {
  ncbi_id: OrderBy @source(subgraph: "Rfam", name: "ncbi_id", type: "OrderBy")
  species: OrderBy @source(subgraph: "Rfam", name: "species", type: "OrderBy")
  tax_string: OrderBy @source(subgraph: "Rfam", name: "tax_string", type: "OrderBy")
  tree_display_name: OrderBy @source(subgraph: "Rfam", name: "tree_display_name", type: "OrderBy")
  align_display_name: OrderBy @source(subgraph: "Rfam", name: "align_display_name", type: "OrderBy")
}

input family_ncbi_WhereInput @source(subgraph: "Rfam", name: "family_ncbi_WhereInput") {
  ncbi_id: String @source(subgraph: "Rfam", name: "ncbi_id", type: "String")
  """Is this really needed?"""
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
}

input family_ncbi_OrderByInput @source(subgraph: "Rfam", name: "family_ncbi_OrderByInput") {
  ncbi_id: OrderBy @source(subgraph: "Rfam", name: "ncbi_id", type: "OrderBy")
  """Is this really needed?"""
  rfam_id: OrderBy @source(subgraph: "Rfam", name: "rfam_id", type: "OrderBy")
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
}

type seed_region @source(subgraph: "Rfam", name: "seed_region") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt! @source(subgraph: "Rfam", name: "seq_start", type: "BigInt!")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  md5: String @source(subgraph: "Rfam", name: "md5", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  rfamseq(where: rfamseq_WhereInput, orderBy: rfamseq_OrderByInput, limit: Int, offset: Int): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(subgraph: "Rfam", name: "rfamseq", type: "[rfamseq]")
}

input seed_region_WhereInput @source(subgraph: "Rfam", name: "seed_region_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: String @source(subgraph: "Rfam", name: "seq_start", type: "String")
  seq_end: String @source(subgraph: "Rfam", name: "seq_end", type: "String")
  md5: String @source(subgraph: "Rfam", name: "md5", type: "String")
}

input seed_region_OrderByInput @source(subgraph: "Rfam", name: "seed_region_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  seq_start: OrderBy @source(subgraph: "Rfam", name: "seq_start", type: "OrderBy")
  seq_end: OrderBy @source(subgraph: "Rfam", name: "seq_end", type: "OrderBy")
  md5: OrderBy @source(subgraph: "Rfam", name: "md5", type: "OrderBy")
}

type motif_pdb @source(subgraph: "Rfam", name: "motif_pdb") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int @source(subgraph: "Rfam", name: "pdb_start", type: "Int")
  pdb_end: Int @source(subgraph: "Rfam", name: "pdb_end", type: "Int")
  motif_old(where: motif_old_WhereInput, orderBy: motif_old_OrderByInput, limit: Int, offset: Int): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(subgraph: "Rfam", name: "motif_old", type: "[motif_old]")
}

input motif_pdb_WhereInput @source(subgraph: "Rfam", name: "motif_pdb_WhereInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: String @source(subgraph: "Rfam", name: "pdb_start", type: "String")
  pdb_end: String @source(subgraph: "Rfam", name: "pdb_end", type: "String")
}

input motif_pdb_OrderByInput @source(subgraph: "Rfam", name: "motif_pdb_OrderByInput") {
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  pdb_id: OrderBy @source(subgraph: "Rfam", name: "pdb_id", type: "OrderBy")
  chain: OrderBy @source(subgraph: "Rfam", name: "chain", type: "OrderBy")
  pdb_start: OrderBy @source(subgraph: "Rfam", name: "pdb_start", type: "OrderBy")
  pdb_end: OrderBy @source(subgraph: "Rfam", name: "pdb_end", type: "OrderBy")
}

type motif_ss_image @source(subgraph: "Rfam", name: "motif_ss_image") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  motif_old(where: motif_old_WhereInput, orderBy: motif_old_OrderByInput, limit: Int, offset: Int): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(subgraph: "Rfam", name: "motif_old", type: "[motif_old]")
}

input motif_ss_image_WhereInput @source(subgraph: "Rfam", name: "motif_ss_image_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
}

input motif_ss_image_OrderByInput @source(subgraph: "Rfam", name: "motif_ss_image_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  image: OrderBy @source(subgraph: "Rfam", name: "image", type: "OrderBy")
}

input clan_membership_WhereInput @source(subgraph: "Rfam", name: "clan_membership_WhereInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
}

input clan_membership_OrderByInput @source(subgraph: "Rfam", name: "clan_membership_OrderByInput") {
  clan_acc: OrderBy @source(subgraph: "Rfam", name: "clan_acc", type: "OrderBy")
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
}

type database_link @source(subgraph: "Rfam", name: "database_link") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  db_id: String! @source(subgraph: "Rfam", name: "db_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String! @source(subgraph: "Rfam", name: "db_link", type: "String!")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

input database_link_WhereInput @source(subgraph: "Rfam", name: "database_link_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  db_id: String @source(subgraph: "Rfam", name: "db_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String @source(subgraph: "Rfam", name: "db_link", type: "String")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input database_link_OrderByInput @source(subgraph: "Rfam", name: "database_link_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  db_id: OrderBy @source(subgraph: "Rfam", name: "db_id", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  db_link: OrderBy @source(subgraph: "Rfam", name: "db_link", type: "OrderBy")
  other_params: OrderBy @source(subgraph: "Rfam", name: "other_params", type: "OrderBy")
}

type wikitext @source(subgraph: "Rfam", name: "wikitext") {
  auto_wiki: Int! @source(subgraph: "Rfam", name: "auto_wiki", type: "Int!")
  title: String! @source(subgraph: "Rfam", name: "title", type: "String!")
  family(limit: Int, offset: Int, where: family_WhereInput, orderBy: family_OrderByInput): [family] @mysqlSelect(table: "family", columnMap: [["auto_wiki", "auto_wiki"]]) @source(subgraph: "Rfam", name: "family", type: "[family]")
}

input wikitext_WhereInput @source(subgraph: "Rfam", name: "wikitext_WhereInput") {
  auto_wiki: String @source(subgraph: "Rfam", name: "auto_wiki", type: "String")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
}

input wikitext_OrderByInput @source(subgraph: "Rfam", name: "wikitext_OrderByInput") {
  auto_wiki: OrderBy @source(subgraph: "Rfam", name: "auto_wiki", type: "OrderBy")
  title: OrderBy @source(subgraph: "Rfam", name: "title", type: "OrderBy")
}

type family_long @source(subgraph: "Rfam", name: "family_long") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  referenece_structure: String @source(subgraph: "Rfam", name: "referenece_structure", type: "String")
  reference_sequence: String @source(subgraph: "Rfam", name: "reference_sequence", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

input family_long_WhereInput @source(subgraph: "Rfam", name: "family_long_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  referenece_structure: String @source(subgraph: "Rfam", name: "referenece_structure", type: "String")
  reference_sequence: String @source(subgraph: "Rfam", name: "reference_sequence", type: "String")
}

input family_long_OrderByInput @source(subgraph: "Rfam", name: "family_long_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  referenece_structure: OrderBy @source(subgraph: "Rfam", name: "referenece_structure", type: "OrderBy")
  reference_sequence: OrderBy @source(subgraph: "Rfam", name: "reference_sequence", type: "OrderBy")
}

type html_alignment @source(subgraph: "Rfam", name: "html_alignment") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  type: html_alignment_type! @source(subgraph: "Rfam", name: "type", type: "html_alignment_type!")
  html: String @source(subgraph: "Rfam", name: "html", type: "String")
  block: Int! @source(subgraph: "Rfam", name: "block", type: "Int!")
  html_alignmentscol: String @source(subgraph: "Rfam", name: "html_alignmentscol", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

enum html_alignment_type @source(subgraph: "Rfam", name: "html_alignment_type") {
  seed @source(subgraph: "Rfam", name: "seed")
  genome @source(subgraph: "Rfam", name: "genome")
  seedColorstock @source(subgraph: "Rfam", name: "seedColorstock")
  genomeColorstock @source(subgraph: "Rfam", name: "genomeColorstock")
}

input html_alignment_WhereInput @source(subgraph: "Rfam", name: "html_alignment_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  html: String @source(subgraph: "Rfam", name: "html", type: "String")
  block: String @source(subgraph: "Rfam", name: "block", type: "String")
  html_alignmentscol: String @source(subgraph: "Rfam", name: "html_alignmentscol", type: "String")
}

input html_alignment_OrderByInput @source(subgraph: "Rfam", name: "html_alignment_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
  html: OrderBy @source(subgraph: "Rfam", name: "html", type: "OrderBy")
  block: OrderBy @source(subgraph: "Rfam", name: "block", type: "OrderBy")
  html_alignmentscol: OrderBy @source(subgraph: "Rfam", name: "html_alignmentscol", type: "OrderBy")
}

type matches_and_fasta @source(subgraph: "Rfam", name: "matches_and_fasta") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  match_list: String @source(subgraph: "Rfam", name: "match_list", type: "String")
  fasta: String @source(subgraph: "Rfam", name: "fasta", type: "String")
  type: matches_and_fasta_type! @source(subgraph: "Rfam", name: "type", type: "matches_and_fasta_type!")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

enum matches_and_fasta_type @source(subgraph: "Rfam", name: "matches_and_fasta_type") {
  rfamseq @source(subgraph: "Rfam", name: "rfamseq")
  genome @source(subgraph: "Rfam", name: "genome")
  refseq @source(subgraph: "Rfam", name: "refseq")
}

input matches_and_fasta_WhereInput @source(subgraph: "Rfam", name: "matches_and_fasta_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  match_list: String @source(subgraph: "Rfam", name: "match_list", type: "String")
  fasta: String @source(subgraph: "Rfam", name: "fasta", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
}

input matches_and_fasta_OrderByInput @source(subgraph: "Rfam", name: "matches_and_fasta_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  match_list: OrderBy @source(subgraph: "Rfam", name: "match_list", type: "OrderBy")
  fasta: OrderBy @source(subgraph: "Rfam", name: "fasta", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
}

type processed_data @source(subgraph: "Rfam", name: "processed_data") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
  ss_stats_pbp: String @source(subgraph: "Rfam", name: "ss_stats_pbp", type: "String")
  ss_stats_seq: String @source(subgraph: "Rfam", name: "ss_stats_seq", type: "String")
  ss_stats_fam: String @source(subgraph: "Rfam", name: "ss_stats_fam", type: "String")
  scores_graph: String @source(subgraph: "Rfam", name: "scores_graph", type: "String")
  genome_full: String @source(subgraph: "Rfam", name: "genome_full", type: "String")
  genome_full_md5: String @source(subgraph: "Rfam", name: "genome_full_md5", type: "String")
  refseq_full: String @source(subgraph: "Rfam", name: "refseq_full", type: "String")
  refseq_full_md5: String @source(subgraph: "Rfam", name: "refseq_full_md5", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

input processed_data_WhereInput @source(subgraph: "Rfam", name: "processed_data_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
  ss_stats_pbp: String @source(subgraph: "Rfam", name: "ss_stats_pbp", type: "String")
  ss_stats_seq: String @source(subgraph: "Rfam", name: "ss_stats_seq", type: "String")
  ss_stats_fam: String @source(subgraph: "Rfam", name: "ss_stats_fam", type: "String")
  scores_graph: String @source(subgraph: "Rfam", name: "scores_graph", type: "String")
  genome_full: String @source(subgraph: "Rfam", name: "genome_full", type: "String")
  genome_full_md5: String @source(subgraph: "Rfam", name: "genome_full_md5", type: "String")
  refseq_full: String @source(subgraph: "Rfam", name: "refseq_full", type: "String")
  refseq_full_md5: String @source(subgraph: "Rfam", name: "refseq_full_md5", type: "String")
}

input processed_data_OrderByInput @source(subgraph: "Rfam", name: "processed_data_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  cm: OrderBy @source(subgraph: "Rfam", name: "cm", type: "OrderBy")
  ss_stats_pbp: OrderBy @source(subgraph: "Rfam", name: "ss_stats_pbp", type: "OrderBy")
  ss_stats_seq: OrderBy @source(subgraph: "Rfam", name: "ss_stats_seq", type: "OrderBy")
  ss_stats_fam: OrderBy @source(subgraph: "Rfam", name: "ss_stats_fam", type: "OrderBy")
  scores_graph: OrderBy @source(subgraph: "Rfam", name: "scores_graph", type: "OrderBy")
  genome_full: OrderBy @source(subgraph: "Rfam", name: "genome_full", type: "OrderBy")
  genome_full_md5: OrderBy @source(subgraph: "Rfam", name: "genome_full_md5", type: "OrderBy")
  refseq_full: OrderBy @source(subgraph: "Rfam", name: "refseq_full", type: "OrderBy")
  refseq_full_md5: OrderBy @source(subgraph: "Rfam", name: "refseq_full_md5", type: "OrderBy")
}

type pseudoknot @source(subgraph: "Rfam", name: "pseudoknot") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pseudoknot_id: String! @source(subgraph: "Rfam", name: "pseudoknot_id", type: "String!")
  source: pseudoknot_source! @source(subgraph: "Rfam", name: "source", type: "pseudoknot_source!")
  covariation: Int @source(subgraph: "Rfam", name: "covariation", type: "Int")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

enum pseudoknot_source @source(subgraph: "Rfam", name: "pseudoknot_source") {
  seed @source(subgraph: "Rfam", name: "seed")
  rscape @source(subgraph: "Rfam", name: "rscape")
}

input pseudoknot_WhereInput @source(subgraph: "Rfam", name: "pseudoknot_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pseudoknot_id: String @source(subgraph: "Rfam", name: "pseudoknot_id", type: "String")
  source: String @source(subgraph: "Rfam", name: "source", type: "String")
  covariation: String @source(subgraph: "Rfam", name: "covariation", type: "String")
}

input pseudoknot_OrderByInput @source(subgraph: "Rfam", name: "pseudoknot_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  pseudoknot_id: OrderBy @source(subgraph: "Rfam", name: "pseudoknot_id", type: "OrderBy")
  source: OrderBy @source(subgraph: "Rfam", name: "source", type: "OrderBy")
  covariation: OrderBy @source(subgraph: "Rfam", name: "covariation", type: "OrderBy")
}

type refseq_full_region @source(subgraph: "Rfam", name: "refseq_full_region") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  refseq_acc: String! @source(subgraph: "Rfam", name: "refseq_acc", type: "String!")
  seq_start: BigInt! @source(subgraph: "Rfam", name: "seq_start", type: "BigInt!")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float! @source(subgraph: "Rfam", name: "bit_score", type: "Float!")
  evalue_score: String! @source(subgraph: "Rfam", name: "evalue_score", type: "String!")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  truncated: refseq_full_region_truncated! @source(subgraph: "Rfam", name: "truncated", type: "refseq_full_region_truncated!")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
  refseq(where: refseq_WhereInput, orderBy: refseq_OrderByInput, limit: Int, offset: Int): [refseq] @mysqlSelect(table: "refseq", columnMap: [["refseq_acc", "refseq_acc"]]) @mysqlTableForeign(columnName: "refseq_acc") @source(subgraph: "Rfam", name: "refseq", type: "[refseq]")
}

enum refseq_full_region_truncated @source(subgraph: "Rfam", name: "refseq_full_region_truncated") {
  _0 @source(subgraph: "Rfam", name: "_0")
  _5 @source(subgraph: "Rfam", name: "_5")
  _3 @source(subgraph: "Rfam", name: "_3")
  _53 @source(subgraph: "Rfam", name: "_53")
}

type refseq @source(subgraph: "Rfam", name: "refseq") {
  refseq_acc: String! @source(subgraph: "Rfam", name: "refseq_acc", type: "String!")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  ncbi_taxid: Int @source(subgraph: "Rfam", name: "ncbi_taxid", type: "Int")
  refseq_full_region(limit: Int, offset: Int, where: refseq_full_region_WhereInput, orderBy: refseq_full_region_OrderByInput): [refseq_full_region] @mysqlSelect(table: "refseq_full_region", columnMap: [["refseq_acc", "refseq_acc"]]) @source(subgraph: "Rfam", name: "refseq_full_region", type: "[refseq_full_region]")
}

input refseq_full_region_WhereInput @source(subgraph: "Rfam", name: "refseq_full_region_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  refseq_acc: String @source(subgraph: "Rfam", name: "refseq_acc", type: "String")
  seq_start: String @source(subgraph: "Rfam", name: "seq_start", type: "String")
  seq_end: String @source(subgraph: "Rfam", name: "seq_end", type: "String")
  """99999.99 is the approx limit from Infernal."""
  bit_score: String @source(subgraph: "Rfam", name: "bit_score", type: "String")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: String @source(subgraph: "Rfam", name: "cm_start", type: "String")
  cm_end: String @source(subgraph: "Rfam", name: "cm_end", type: "String")
  truncated: String @source(subgraph: "Rfam", name: "truncated", type: "String")
}

input refseq_full_region_OrderByInput @source(subgraph: "Rfam", name: "refseq_full_region_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  refseq_acc: OrderBy @source(subgraph: "Rfam", name: "refseq_acc", type: "OrderBy")
  seq_start: OrderBy @source(subgraph: "Rfam", name: "seq_start", type: "OrderBy")
  seq_end: OrderBy @source(subgraph: "Rfam", name: "seq_end", type: "OrderBy")
  """99999.99 is the approx limit from Infernal."""
  bit_score: OrderBy @source(subgraph: "Rfam", name: "bit_score", type: "OrderBy")
  evalue_score: OrderBy @source(subgraph: "Rfam", name: "evalue_score", type: "OrderBy")
  cm_start: OrderBy @source(subgraph: "Rfam", name: "cm_start", type: "OrderBy")
  cm_end: OrderBy @source(subgraph: "Rfam", name: "cm_end", type: "OrderBy")
  truncated: OrderBy @source(subgraph: "Rfam", name: "truncated", type: "OrderBy")
}

input refseq_WhereInput @source(subgraph: "Rfam", name: "refseq_WhereInput") {
  refseq_acc: String @source(subgraph: "Rfam", name: "refseq_acc", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  ncbi_taxid: String @source(subgraph: "Rfam", name: "ncbi_taxid", type: "String")
}

input refseq_OrderByInput @source(subgraph: "Rfam", name: "refseq_OrderByInput") {
  refseq_acc: OrderBy @source(subgraph: "Rfam", name: "refseq_acc", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  species: OrderBy @source(subgraph: "Rfam", name: "species", type: "OrderBy")
  ncbi_taxid: OrderBy @source(subgraph: "Rfam", name: "ncbi_taxid", type: "OrderBy")
}

type secondary_structure_image @source(subgraph: "Rfam", name: "secondary_structure_image") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  type: secondary_structure_image_type @source(subgraph: "Rfam", name: "type", type: "secondary_structure_image_type")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

enum secondary_structure_image_type @source(subgraph: "Rfam", name: "secondary_structure_image_type") {
  cons @source(subgraph: "Rfam", name: "cons")
  dist @source(subgraph: "Rfam", name: "dist")
  ent @source(subgraph: "Rfam", name: "ent")
  fcbp @source(subgraph: "Rfam", name: "fcbp")
  cov @source(subgraph: "Rfam", name: "cov")
  disttruc @source(subgraph: "Rfam", name: "disttruc")
  maxcm @source(subgraph: "Rfam", name: "maxcm")
  norm @source(subgraph: "Rfam", name: "norm")
  rchie @source(subgraph: "Rfam", name: "rchie")
  species @source(subgraph: "Rfam", name: "species")
  ss @source(subgraph: "Rfam", name: "ss")
  rscape @source(subgraph: "Rfam", name: "rscape")
  rscape_cyk @source(subgraph: "Rfam", name: "rscape_cyk")
}

input secondary_structure_image_WhereInput @source(subgraph: "Rfam", name: "secondary_structure_image_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
}

input secondary_structure_image_OrderByInput @source(subgraph: "Rfam", name: "secondary_structure_image_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
  image: OrderBy @source(subgraph: "Rfam", name: "image", type: "OrderBy")
}

type sunburst @source(subgraph: "Rfam", name: "sunburst") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  data: String! @source(subgraph: "Rfam", name: "data", type: "String!")
  type: sunburst_type! @source(subgraph: "Rfam", name: "type", type: "sunburst_type!")
  family(where: family_WhereInput, orderBy: family_OrderByInput, limit: Int, offset: Int): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(subgraph: "Rfam", name: "family", type: "[family]")
}

enum sunburst_type @source(subgraph: "Rfam", name: "sunburst_type") {
  rfamseq @source(subgraph: "Rfam", name: "rfamseq")
  genome @source(subgraph: "Rfam", name: "genome")
  refseq @source(subgraph: "Rfam", name: "refseq")
}

input sunburst_WhereInput @source(subgraph: "Rfam", name: "sunburst_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  data: String @source(subgraph: "Rfam", name: "data", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
}

input sunburst_OrderByInput @source(subgraph: "Rfam", name: "sunburst_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  data: OrderBy @source(subgraph: "Rfam", name: "data", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
}

type _genome_data @source(subgraph: "Rfam", name: "_genome_data") {
  data_file: String! @source(subgraph: "Rfam", name: "data_file", type: "String!")
  author: String! @source(subgraph: "Rfam", name: "author", type: "String!")
  uuid: String! @source(subgraph: "Rfam", name: "uuid", type: "String!")
  status: _genome_data_status! @source(subgraph: "Rfam", name: "status", type: "_genome_data_status!")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  opened: DateTime @source(subgraph: "Rfam", name: "opened", type: "DateTime")
  closed: DateTime @source(subgraph: "Rfam", name: "closed", type: "DateTime")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: Int @source(subgraph: "Rfam", name: "lsf_id", type: "Int")
}

enum _genome_data_status @source(subgraph: "Rfam", name: "_genome_data_status") {
  DONE @source(subgraph: "Rfam", name: "DONE")
  PEND @source(subgraph: "Rfam", name: "PEND")
  RUN @source(subgraph: "Rfam", name: "RUN")
  FAIL @source(subgraph: "Rfam", name: "FAIL")
  KILL @source(subgraph: "Rfam", name: "KILL")
}

input _genome_data_WhereInput @source(subgraph: "Rfam", name: "_genome_data_WhereInput") {
  data_file: String @source(subgraph: "Rfam", name: "data_file", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  uuid: String @source(subgraph: "Rfam", name: "uuid", type: "String")
  status: String @source(subgraph: "Rfam", name: "status", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  opened: String @source(subgraph: "Rfam", name: "opened", type: "String")
  closed: String @source(subgraph: "Rfam", name: "closed", type: "String")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: String @source(subgraph: "Rfam", name: "lsf_id", type: "String")
}

input _genome_data_OrderByInput @source(subgraph: "Rfam", name: "_genome_data_OrderByInput") {
  data_file: OrderBy @source(subgraph: "Rfam", name: "data_file", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  uuid: OrderBy @source(subgraph: "Rfam", name: "uuid", type: "OrderBy")
  status: OrderBy @source(subgraph: "Rfam", name: "status", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  opened: OrderBy @source(subgraph: "Rfam", name: "opened", type: "OrderBy")
  closed: OrderBy @source(subgraph: "Rfam", name: "closed", type: "OrderBy")
  message: OrderBy @source(subgraph: "Rfam", name: "message", type: "OrderBy")
  lsf_id: OrderBy @source(subgraph: "Rfam", name: "lsf_id", type: "OrderBy")
}

type _lock @source(subgraph: "Rfam", name: "_lock") {
  locked: Int! @source(subgraph: "Rfam", name: "locked", type: "Int!")
  locker: String! @source(subgraph: "Rfam", name: "locker", type: "String!")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: Int! @source(subgraph: "Rfam", name: "allowCommits", type: "Int!")
  alsoAllow: String @source(subgraph: "Rfam", name: "alsoAllow", type: "String")
}

input _lock_WhereInput @source(subgraph: "Rfam", name: "_lock_WhereInput") {
  locked: String @source(subgraph: "Rfam", name: "locked", type: "String")
  locker: String @source(subgraph: "Rfam", name: "locker", type: "String")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: String @source(subgraph: "Rfam", name: "allowCommits", type: "String")
  alsoAllow: String @source(subgraph: "Rfam", name: "alsoAllow", type: "String")
}

input _lock_OrderByInput @source(subgraph: "Rfam", name: "_lock_OrderByInput") {
  locked: OrderBy @source(subgraph: "Rfam", name: "locked", type: "OrderBy")
  locker: OrderBy @source(subgraph: "Rfam", name: "locker", type: "OrderBy")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: OrderBy @source(subgraph: "Rfam", name: "allowCommits", type: "OrderBy")
  alsoAllow: OrderBy @source(subgraph: "Rfam", name: "alsoAllow", type: "OrderBy")
}

type author @source(subgraph: "Rfam", name: "author") {
  author_id: Int! @source(subgraph: "Rfam", name: "author_id", type: "Int!")
  name: String! @source(subgraph: "Rfam", name: "name", type: "String!")
  last_name: String @source(subgraph: "Rfam", name: "last_name", type: "String")
  initials: String @source(subgraph: "Rfam", name: "initials", type: "String")
  orcid: String @source(subgraph: "Rfam", name: "orcid", type: "String")
  synonyms: String @source(subgraph: "Rfam", name: "synonyms", type: "String")
}

input author_WhereInput @source(subgraph: "Rfam", name: "author_WhereInput") {
  author_id: String @source(subgraph: "Rfam", name: "author_id", type: "String")
  name: String @source(subgraph: "Rfam", name: "name", type: "String")
  last_name: String @source(subgraph: "Rfam", name: "last_name", type: "String")
  initials: String @source(subgraph: "Rfam", name: "initials", type: "String")
  orcid: String @source(subgraph: "Rfam", name: "orcid", type: "String")
  synonyms: String @source(subgraph: "Rfam", name: "synonyms", type: "String")
}

input author_OrderByInput @source(subgraph: "Rfam", name: "author_OrderByInput") {
  author_id: OrderBy @source(subgraph: "Rfam", name: "author_id", type: "OrderBy")
  name: OrderBy @source(subgraph: "Rfam", name: "name", type: "OrderBy")
  last_name: OrderBy @source(subgraph: "Rfam", name: "last_name", type: "OrderBy")
  initials: OrderBy @source(subgraph: "Rfam", name: "initials", type: "OrderBy")
  orcid: OrderBy @source(subgraph: "Rfam", name: "orcid", type: "OrderBy")
  synonyms: OrderBy @source(subgraph: "Rfam", name: "synonyms", type: "OrderBy")
}

type db_version @source(subgraph: "Rfam", name: "db_version") {
  rfam_release: Float! @source(subgraph: "Rfam", name: "rfam_release", type: "Float!")
  rfam_release_date: DateTime! @source(subgraph: "Rfam", name: "rfam_release_date", type: "DateTime!")
  number_families: Int! @source(subgraph: "Rfam", name: "number_families", type: "Int!")
  embl_release: String! @source(subgraph: "Rfam", name: "embl_release", type: "String!")
  genome_collection_date: DateTime @source(subgraph: "Rfam", name: "genome_collection_date", type: "DateTime")
  refseq_version: Int @source(subgraph: "Rfam", name: "refseq_version", type: "Int")
  pdb_date: DateTime @source(subgraph: "Rfam", name: "pdb_date", type: "DateTime")
  infernal_version: String @source(subgraph: "Rfam", name: "infernal_version", type: "String")
}

input db_version_WhereInput @source(subgraph: "Rfam", name: "db_version_WhereInput") {
  rfam_release: String @source(subgraph: "Rfam", name: "rfam_release", type: "String")
  rfam_release_date: String @source(subgraph: "Rfam", name: "rfam_release_date", type: "String")
  number_families: String @source(subgraph: "Rfam", name: "number_families", type: "String")
  embl_release: String @source(subgraph: "Rfam", name: "embl_release", type: "String")
  genome_collection_date: String @source(subgraph: "Rfam", name: "genome_collection_date", type: "String")
  refseq_version: String @source(subgraph: "Rfam", name: "refseq_version", type: "String")
  pdb_date: String @source(subgraph: "Rfam", name: "pdb_date", type: "String")
  infernal_version: String @source(subgraph: "Rfam", name: "infernal_version", type: "String")
}

input db_version_OrderByInput @source(subgraph: "Rfam", name: "db_version_OrderByInput") {
  rfam_release: OrderBy @source(subgraph: "Rfam", name: "rfam_release", type: "OrderBy")
  rfam_release_date: OrderBy @source(subgraph: "Rfam", name: "rfam_release_date", type: "OrderBy")
  number_families: OrderBy @source(subgraph: "Rfam", name: "number_families", type: "OrderBy")
  embl_release: OrderBy @source(subgraph: "Rfam", name: "embl_release", type: "OrderBy")
  genome_collection_date: OrderBy @source(subgraph: "Rfam", name: "genome_collection_date", type: "OrderBy")
  refseq_version: OrderBy @source(subgraph: "Rfam", name: "refseq_version", type: "OrderBy")
  pdb_date: OrderBy @source(subgraph: "Rfam", name: "pdb_date", type: "OrderBy")
  infernal_version: OrderBy @source(subgraph: "Rfam", name: "infernal_version", type: "OrderBy")
}

type dead_clan @source(subgraph: "Rfam", name: "dead_clan") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  """Added. Add author?"""
  clan_id: String! @source(subgraph: "Rfam", name: "clan_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  user: String! @source(subgraph: "Rfam", name: "user", type: "String!")
}

input dead_clan_WhereInput @source(subgraph: "Rfam", name: "dead_clan_WhereInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  """Added. Add author?"""
  clan_id: String @source(subgraph: "Rfam", name: "clan_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  user: String @source(subgraph: "Rfam", name: "user", type: "String")
}

input dead_clan_OrderByInput @source(subgraph: "Rfam", name: "dead_clan_OrderByInput") {
  clan_acc: OrderBy @source(subgraph: "Rfam", name: "clan_acc", type: "OrderBy")
  """Added. Add author?"""
  clan_id: OrderBy @source(subgraph: "Rfam", name: "clan_id", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  forward_to: OrderBy @source(subgraph: "Rfam", name: "forward_to", type: "OrderBy")
  user: OrderBy @source(subgraph: "Rfam", name: "user", type: "OrderBy")
}

type dead_family @source(subgraph: "Rfam", name: "dead_family") {
  """record the author???"""
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfam_id: String! @source(subgraph: "Rfam", name: "rfam_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  """
  wikipedia page title
  
  """
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  user: String! @source(subgraph: "Rfam", name: "user", type: "String!")
}

input dead_family_WhereInput @source(subgraph: "Rfam", name: "dead_family_WhereInput") {
  """record the author???"""
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  """
  wikipedia page title
  
  """
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  user: String @source(subgraph: "Rfam", name: "user", type: "String")
}

input dead_family_OrderByInput @source(subgraph: "Rfam", name: "dead_family_OrderByInput") {
  """record the author???"""
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  rfam_id: OrderBy @source(subgraph: "Rfam", name: "rfam_id", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  forward_to: OrderBy @source(subgraph: "Rfam", name: "forward_to", type: "OrderBy")
  """
  wikipedia page title
  
  """
  title: OrderBy @source(subgraph: "Rfam", name: "title", type: "OrderBy")
  user: OrderBy @source(subgraph: "Rfam", name: "user", type: "OrderBy")
}

type ensembl_names @source(subgraph: "Rfam", name: "ensembl_names") {
  insdc: String! @source(subgraph: "Rfam", name: "insdc", type: "String!")
  ensembl: String @source(subgraph: "Rfam", name: "ensembl", type: "String")
}

input ensembl_names_WhereInput @source(subgraph: "Rfam", name: "ensembl_names_WhereInput") {
  insdc: String @source(subgraph: "Rfam", name: "insdc", type: "String")
  ensembl: String @source(subgraph: "Rfam", name: "ensembl", type: "String")
}

input ensembl_names_OrderByInput @source(subgraph: "Rfam", name: "ensembl_names_OrderByInput") {
  insdc: OrderBy @source(subgraph: "Rfam", name: "insdc", type: "OrderBy")
  ensembl: OrderBy @source(subgraph: "Rfam", name: "ensembl", type: "OrderBy")
}

type family_author @source(subgraph: "Rfam", name: "family_author") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  author_id: Int! @source(subgraph: "Rfam", name: "author_id", type: "Int!")
  desc_order: Int! @source(subgraph: "Rfam", name: "desc_order", type: "Int!")
}

input family_author_WhereInput @source(subgraph: "Rfam", name: "family_author_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  author_id: String @source(subgraph: "Rfam", name: "author_id", type: "String")
  desc_order: String @source(subgraph: "Rfam", name: "desc_order", type: "String")
}

input family_author_OrderByInput @source(subgraph: "Rfam", name: "family_author_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  author_id: OrderBy @source(subgraph: "Rfam", name: "author_id", type: "OrderBy")
  desc_order: OrderBy @source(subgraph: "Rfam", name: "desc_order", type: "OrderBy")
}

type genome @source(subgraph: "Rfam", name: "genome") {
  """This should be """
  upid: String! @source(subgraph: "Rfam", name: "upid", type: "String!")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: Int @source(subgraph: "Rfam", name: "assembly_version", type: "Int")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: Int @source(subgraph: "Rfam", name: "wgs_version", type: "Int")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: genome_assembly_level @source(subgraph: "Rfam", name: "assembly_level", type: "genome_assembly_level")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: BigInt @source(subgraph: "Rfam", name: "total_length", type: "BigInt")
  ungapped_length: BigInt @source(subgraph: "Rfam", name: "ungapped_length", type: "BigInt")
  circular: Int @source(subgraph: "Rfam", name: "circular", type: "Int")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: Int @source(subgraph: "Rfam", name: "num_rfam_regions", type: "Int")
  num_families: Int @source(subgraph: "Rfam", name: "num_families", type: "Int")
  is_reference: Int! @source(subgraph: "Rfam", name: "is_reference", type: "Int!")
  is_representative: Int! @source(subgraph: "Rfam", name: "is_representative", type: "Int!")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp! @source(subgraph: "Rfam", name: "updated", type: "Timestamp!")
}

enum genome_assembly_level @source(subgraph: "Rfam", name: "genome_assembly_level") {
  contig @source(subgraph: "Rfam", name: "contig")
  chromosome @source(subgraph: "Rfam", name: "chromosome")
  scaffold @source(subgraph: "Rfam", name: "scaffold")
  complete_genome @source(subgraph: "Rfam", name: "complete_genome")
}

input genome_WhereInput @source(subgraph: "Rfam", name: "genome_WhereInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: String @source(subgraph: "Rfam", name: "assembly_version", type: "String")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: String @source(subgraph: "Rfam", name: "wgs_version", type: "String")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: String @source(subgraph: "Rfam", name: "assembly_level", type: "String")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: String @source(subgraph: "Rfam", name: "total_length", type: "String")
  ungapped_length: String @source(subgraph: "Rfam", name: "ungapped_length", type: "String")
  circular: String @source(subgraph: "Rfam", name: "circular", type: "String")
  ncbi_id: String @source(subgraph: "Rfam", name: "ncbi_id", type: "String")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: String @source(subgraph: "Rfam", name: "num_rfam_regions", type: "String")
  num_families: String @source(subgraph: "Rfam", name: "num_families", type: "String")
  is_reference: String @source(subgraph: "Rfam", name: "is_reference", type: "String")
  is_representative: String @source(subgraph: "Rfam", name: "is_representative", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  updated: String @source(subgraph: "Rfam", name: "updated", type: "String")
}

input genome_OrderByInput @source(subgraph: "Rfam", name: "genome_OrderByInput") {
  """This should be """
  upid: OrderBy @source(subgraph: "Rfam", name: "upid", type: "OrderBy")
  assembly_acc: OrderBy @source(subgraph: "Rfam", name: "assembly_acc", type: "OrderBy")
  assembly_version: OrderBy @source(subgraph: "Rfam", name: "assembly_version", type: "OrderBy")
  wgs_acc: OrderBy @source(subgraph: "Rfam", name: "wgs_acc", type: "OrderBy")
  wgs_version: OrderBy @source(subgraph: "Rfam", name: "wgs_version", type: "OrderBy")
  assembly_name: OrderBy @source(subgraph: "Rfam", name: "assembly_name", type: "OrderBy")
  assembly_level: OrderBy @source(subgraph: "Rfam", name: "assembly_level", type: "OrderBy")
  study_ref: OrderBy @source(subgraph: "Rfam", name: "study_ref", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  total_length: OrderBy @source(subgraph: "Rfam", name: "total_length", type: "OrderBy")
  ungapped_length: OrderBy @source(subgraph: "Rfam", name: "ungapped_length", type: "OrderBy")
  circular: OrderBy @source(subgraph: "Rfam", name: "circular", type: "OrderBy")
  ncbi_id: OrderBy @source(subgraph: "Rfam", name: "ncbi_id", type: "OrderBy")
  scientific_name: OrderBy @source(subgraph: "Rfam", name: "scientific_name", type: "OrderBy")
  common_name: OrderBy @source(subgraph: "Rfam", name: "common_name", type: "OrderBy")
  kingdom: OrderBy @source(subgraph: "Rfam", name: "kingdom", type: "OrderBy")
  num_rfam_regions: OrderBy @source(subgraph: "Rfam", name: "num_rfam_regions", type: "OrderBy")
  num_families: OrderBy @source(subgraph: "Rfam", name: "num_families", type: "OrderBy")
  is_reference: OrderBy @source(subgraph: "Rfam", name: "is_reference", type: "OrderBy")
  is_representative: OrderBy @source(subgraph: "Rfam", name: "is_representative", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  updated: OrderBy @source(subgraph: "Rfam", name: "updated", type: "OrderBy")
}

type genome_temp @source(subgraph: "Rfam", name: "genome_temp") {
  """This should be """
  upid: String! @source(subgraph: "Rfam", name: "upid", type: "String!")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: Int @source(subgraph: "Rfam", name: "assembly_version", type: "Int")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: Int @source(subgraph: "Rfam", name: "wgs_version", type: "Int")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: genome_temp_assembly_level @source(subgraph: "Rfam", name: "assembly_level", type: "genome_temp_assembly_level")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: BigInt @source(subgraph: "Rfam", name: "total_length", type: "BigInt")
  ungapped_length: BigInt @source(subgraph: "Rfam", name: "ungapped_length", type: "BigInt")
  circular: Int @source(subgraph: "Rfam", name: "circular", type: "Int")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: Int @source(subgraph: "Rfam", name: "num_rfam_regions", type: "Int")
  num_families: Int @source(subgraph: "Rfam", name: "num_families", type: "Int")
  is_reference: Int! @source(subgraph: "Rfam", name: "is_reference", type: "Int!")
  is_representative: Int! @source(subgraph: "Rfam", name: "is_representative", type: "Int!")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp! @source(subgraph: "Rfam", name: "updated", type: "Timestamp!")
}

enum genome_temp_assembly_level @source(subgraph: "Rfam", name: "genome_temp_assembly_level") {
  contig @source(subgraph: "Rfam", name: "contig")
  chromosome @source(subgraph: "Rfam", name: "chromosome")
  scaffold @source(subgraph: "Rfam", name: "scaffold")
  complete_genome @source(subgraph: "Rfam", name: "complete_genome")
}

input genome_temp_WhereInput @source(subgraph: "Rfam", name: "genome_temp_WhereInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: String @source(subgraph: "Rfam", name: "assembly_version", type: "String")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: String @source(subgraph: "Rfam", name: "wgs_version", type: "String")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: String @source(subgraph: "Rfam", name: "assembly_level", type: "String")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: String @source(subgraph: "Rfam", name: "total_length", type: "String")
  ungapped_length: String @source(subgraph: "Rfam", name: "ungapped_length", type: "String")
  circular: String @source(subgraph: "Rfam", name: "circular", type: "String")
  ncbi_id: String @source(subgraph: "Rfam", name: "ncbi_id", type: "String")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: String @source(subgraph: "Rfam", name: "num_rfam_regions", type: "String")
  num_families: String @source(subgraph: "Rfam", name: "num_families", type: "String")
  is_reference: String @source(subgraph: "Rfam", name: "is_reference", type: "String")
  is_representative: String @source(subgraph: "Rfam", name: "is_representative", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  updated: String @source(subgraph: "Rfam", name: "updated", type: "String")
}

input genome_temp_OrderByInput @source(subgraph: "Rfam", name: "genome_temp_OrderByInput") {
  """This should be """
  upid: OrderBy @source(subgraph: "Rfam", name: "upid", type: "OrderBy")
  assembly_acc: OrderBy @source(subgraph: "Rfam", name: "assembly_acc", type: "OrderBy")
  assembly_version: OrderBy @source(subgraph: "Rfam", name: "assembly_version", type: "OrderBy")
  wgs_acc: OrderBy @source(subgraph: "Rfam", name: "wgs_acc", type: "OrderBy")
  wgs_version: OrderBy @source(subgraph: "Rfam", name: "wgs_version", type: "OrderBy")
  assembly_name: OrderBy @source(subgraph: "Rfam", name: "assembly_name", type: "OrderBy")
  assembly_level: OrderBy @source(subgraph: "Rfam", name: "assembly_level", type: "OrderBy")
  study_ref: OrderBy @source(subgraph: "Rfam", name: "study_ref", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  total_length: OrderBy @source(subgraph: "Rfam", name: "total_length", type: "OrderBy")
  ungapped_length: OrderBy @source(subgraph: "Rfam", name: "ungapped_length", type: "OrderBy")
  circular: OrderBy @source(subgraph: "Rfam", name: "circular", type: "OrderBy")
  ncbi_id: OrderBy @source(subgraph: "Rfam", name: "ncbi_id", type: "OrderBy")
  scientific_name: OrderBy @source(subgraph: "Rfam", name: "scientific_name", type: "OrderBy")
  common_name: OrderBy @source(subgraph: "Rfam", name: "common_name", type: "OrderBy")
  kingdom: OrderBy @source(subgraph: "Rfam", name: "kingdom", type: "OrderBy")
  num_rfam_regions: OrderBy @source(subgraph: "Rfam", name: "num_rfam_regions", type: "OrderBy")
  num_families: OrderBy @source(subgraph: "Rfam", name: "num_families", type: "OrderBy")
  is_reference: OrderBy @source(subgraph: "Rfam", name: "is_reference", type: "OrderBy")
  is_representative: OrderBy @source(subgraph: "Rfam", name: "is_representative", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  updated: OrderBy @source(subgraph: "Rfam", name: "updated", type: "OrderBy")
}

type genseq @source(subgraph: "Rfam", name: "genseq") {
  """This should be """
  upid: String! @source(subgraph: "Rfam", name: "upid", type: "String!")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input genseq_WhereInput @source(subgraph: "Rfam", name: "genseq_WhereInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input genseq_OrderByInput @source(subgraph: "Rfam", name: "genseq_OrderByInput") {
  """This should be """
  upid: OrderBy @source(subgraph: "Rfam", name: "upid", type: "OrderBy")
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  chromosome_name: OrderBy @source(subgraph: "Rfam", name: "chromosome_name", type: "OrderBy")
  chromosome_type: OrderBy @source(subgraph: "Rfam", name: "chromosome_type", type: "OrderBy")
  version: OrderBy @source(subgraph: "Rfam", name: "version", type: "OrderBy")
}

type genseq_temp @source(subgraph: "Rfam", name: "genseq_temp") {
  """This should be """
  upid: String! @source(subgraph: "Rfam", name: "upid", type: "String!")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input genseq_temp_WhereInput @source(subgraph: "Rfam", name: "genseq_temp_WhereInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input genseq_temp_OrderByInput @source(subgraph: "Rfam", name: "genseq_temp_OrderByInput") {
  """This should be """
  upid: OrderBy @source(subgraph: "Rfam", name: "upid", type: "OrderBy")
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  chromosome_name: OrderBy @source(subgraph: "Rfam", name: "chromosome_name", type: "OrderBy")
  chromosome_type: OrderBy @source(subgraph: "Rfam", name: "chromosome_type", type: "OrderBy")
  version: OrderBy @source(subgraph: "Rfam", name: "version", type: "OrderBy")
}

type keywords @source(subgraph: "Rfam", name: "keywords") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  rfam_general: String @source(subgraph: "Rfam", name: "rfam_general", type: "String")
  literature: String @source(subgraph: "Rfam", name: "literature", type: "String")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  pdb_mappings: String @source(subgraph: "Rfam", name: "pdb_mappings", type: "String")
  clan_info: String @source(subgraph: "Rfam", name: "clan_info", type: "String")
}

input keywords_WhereInput @source(subgraph: "Rfam", name: "keywords_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  rfam_general: String @source(subgraph: "Rfam", name: "rfam_general", type: "String")
  literature: String @source(subgraph: "Rfam", name: "literature", type: "String")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  pdb_mappings: String @source(subgraph: "Rfam", name: "pdb_mappings", type: "String")
  clan_info: String @source(subgraph: "Rfam", name: "clan_info", type: "String")
}

input keywords_OrderByInput @source(subgraph: "Rfam", name: "keywords_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  rfam_id: OrderBy @source(subgraph: "Rfam", name: "rfam_id", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  rfam_general: OrderBy @source(subgraph: "Rfam", name: "rfam_general", type: "OrderBy")
  literature: OrderBy @source(subgraph: "Rfam", name: "literature", type: "OrderBy")
  wiki: OrderBy @source(subgraph: "Rfam", name: "wiki", type: "OrderBy")
  pdb_mappings: OrderBy @source(subgraph: "Rfam", name: "pdb_mappings", type: "OrderBy")
  clan_info: OrderBy @source(subgraph: "Rfam", name: "clan_info", type: "OrderBy")
}

type motif @source(subgraph: "Rfam", name: "motif") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  num_seed: BigInt @source(subgraph: "Rfam", name: "num_seed", type: "BigInt")
  average_id: Float @source(subgraph: "Rfam", name: "average_id", type: "Float")
  average_sqlen: Float @source(subgraph: "Rfam", name: "average_sqlen", type: "Float")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp! @source(subgraph: "Rfam", name: "updated", type: "Timestamp!")
  motif_database_link(limit: Int, offset: Int, where: motif_database_link_WhereInput, orderBy: motif_database_link_OrderByInput): [motif_database_link] @mysqlSelect(table: "motif_database_link", columnMap: [["motif_acc", "motif_acc"]]) @source(subgraph: "Rfam", name: "motif_database_link", type: "[motif_database_link]")
  motif_file(limit: Int, offset: Int, where: motif_file_WhereInput, orderBy: motif_file_OrderByInput): [motif_file] @mysqlSelect(table: "motif_file", columnMap: [["motif_acc", "motif_acc"]]) @source(subgraph: "Rfam", name: "motif_file", type: "[motif_file]")
}

type motif_database_link @source(subgraph: "Rfam", name: "motif_database_link") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  db_id: String! @source(subgraph: "Rfam", name: "db_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String! @source(subgraph: "Rfam", name: "db_link", type: "String!")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
  motif(where: motif_WhereInput, orderBy: motif_OrderByInput, limit: Int, offset: Int): [motif] @mysqlSelect(table: "motif", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(subgraph: "Rfam", name: "motif", type: "[motif]")
}

input motif_WhereInput @source(subgraph: "Rfam", name: "motif_WhereInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: String @source(subgraph: "Rfam", name: "gathering_cutoff", type: "String")
  trusted_cutoff: String @source(subgraph: "Rfam", name: "trusted_cutoff", type: "String")
  noise_cutoff: String @source(subgraph: "Rfam", name: "noise_cutoff", type: "String")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  num_seed: String @source(subgraph: "Rfam", name: "num_seed", type: "String")
  average_id: String @source(subgraph: "Rfam", name: "average_id", type: "String")
  average_sqlen: String @source(subgraph: "Rfam", name: "average_sqlen", type: "String")
  ecmli_lambda: String @source(subgraph: "Rfam", name: "ecmli_lambda", type: "String")
  ecmli_mu: String @source(subgraph: "Rfam", name: "ecmli_mu", type: "String")
  ecmli_cal_db: String @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "String")
  ecmli_cal_hits: String @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "String")
  maxl: String @source(subgraph: "Rfam", name: "maxl", type: "String")
  clen: String @source(subgraph: "Rfam", name: "clen", type: "String")
  match_pair_node: String @source(subgraph: "Rfam", name: "match_pair_node", type: "String")
  hmm_tau: String @source(subgraph: "Rfam", name: "hmm_tau", type: "String")
  hmm_lambda: String @source(subgraph: "Rfam", name: "hmm_lambda", type: "String")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  created: String @source(subgraph: "Rfam", name: "created", type: "String")
  updated: String @source(subgraph: "Rfam", name: "updated", type: "String")
}

input motif_OrderByInput @source(subgraph: "Rfam", name: "motif_OrderByInput") {
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  motif_id: OrderBy @source(subgraph: "Rfam", name: "motif_id", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  author: OrderBy @source(subgraph: "Rfam", name: "author", type: "OrderBy")
  seed_source: OrderBy @source(subgraph: "Rfam", name: "seed_source", type: "OrderBy")
  gathering_cutoff: OrderBy @source(subgraph: "Rfam", name: "gathering_cutoff", type: "OrderBy")
  trusted_cutoff: OrderBy @source(subgraph: "Rfam", name: "trusted_cutoff", type: "OrderBy")
  noise_cutoff: OrderBy @source(subgraph: "Rfam", name: "noise_cutoff", type: "OrderBy")
  cmbuild: OrderBy @source(subgraph: "Rfam", name: "cmbuild", type: "OrderBy")
  cmcalibrate: OrderBy @source(subgraph: "Rfam", name: "cmcalibrate", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
  num_seed: OrderBy @source(subgraph: "Rfam", name: "num_seed", type: "OrderBy")
  average_id: OrderBy @source(subgraph: "Rfam", name: "average_id", type: "OrderBy")
  average_sqlen: OrderBy @source(subgraph: "Rfam", name: "average_sqlen", type: "OrderBy")
  ecmli_lambda: OrderBy @source(subgraph: "Rfam", name: "ecmli_lambda", type: "OrderBy")
  ecmli_mu: OrderBy @source(subgraph: "Rfam", name: "ecmli_mu", type: "OrderBy")
  ecmli_cal_db: OrderBy @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "OrderBy")
  ecmli_cal_hits: OrderBy @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "OrderBy")
  maxl: OrderBy @source(subgraph: "Rfam", name: "maxl", type: "OrderBy")
  clen: OrderBy @source(subgraph: "Rfam", name: "clen", type: "OrderBy")
  match_pair_node: OrderBy @source(subgraph: "Rfam", name: "match_pair_node", type: "OrderBy")
  hmm_tau: OrderBy @source(subgraph: "Rfam", name: "hmm_tau", type: "OrderBy")
  hmm_lambda: OrderBy @source(subgraph: "Rfam", name: "hmm_lambda", type: "OrderBy")
  wiki: OrderBy @source(subgraph: "Rfam", name: "wiki", type: "OrderBy")
  created: OrderBy @source(subgraph: "Rfam", name: "created", type: "OrderBy")
  updated: OrderBy @source(subgraph: "Rfam", name: "updated", type: "OrderBy")
}

input motif_database_link_WhereInput @source(subgraph: "Rfam", name: "motif_database_link_WhereInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  db_id: String @source(subgraph: "Rfam", name: "db_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String @source(subgraph: "Rfam", name: "db_link", type: "String")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input motif_database_link_OrderByInput @source(subgraph: "Rfam", name: "motif_database_link_OrderByInput") {
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  db_id: OrderBy @source(subgraph: "Rfam", name: "db_id", type: "OrderBy")
  comment: OrderBy @source(subgraph: "Rfam", name: "comment", type: "OrderBy")
  db_link: OrderBy @source(subgraph: "Rfam", name: "db_link", type: "OrderBy")
  other_params: OrderBy @source(subgraph: "Rfam", name: "other_params", type: "OrderBy")
}

type motif_file @source(subgraph: "Rfam", name: "motif_file") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  seed: String! @source(subgraph: "Rfam", name: "seed", type: "String!")
  cm: String! @source(subgraph: "Rfam", name: "cm", type: "String!")
  motif(where: motif_WhereInput, orderBy: motif_OrderByInput, limit: Int, offset: Int): [motif] @mysqlSelect(table: "motif", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(subgraph: "Rfam", name: "motif", type: "[motif]")
}

input motif_file_WhereInput @source(subgraph: "Rfam", name: "motif_file_WhereInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  seed: String @source(subgraph: "Rfam", name: "seed", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
}

input motif_file_OrderByInput @source(subgraph: "Rfam", name: "motif_file_OrderByInput") {
  motif_acc: OrderBy @source(subgraph: "Rfam", name: "motif_acc", type: "OrderBy")
  seed: OrderBy @source(subgraph: "Rfam", name: "seed", type: "OrderBy")
  cm: OrderBy @source(subgraph: "Rfam", name: "cm", type: "OrderBy")
}

type pdb_full_region @source(subgraph: "Rfam", name: "pdb_full_region") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int! @source(subgraph: "Rfam", name: "pdb_start", type: "Int!")
  pdb_end: Int! @source(subgraph: "Rfam", name: "pdb_end", type: "Int!")
  bit_score: Float! @source(subgraph: "Rfam", name: "bit_score", type: "Float!")
  evalue_score: String! @source(subgraph: "Rfam", name: "evalue_score", type: "String!")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: Int! @source(subgraph: "Rfam", name: "is_significant", type: "Int!")
}

input pdb_full_region_WhereInput @source(subgraph: "Rfam", name: "pdb_full_region_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: String @source(subgraph: "Rfam", name: "pdb_start", type: "String")
  pdb_end: String @source(subgraph: "Rfam", name: "pdb_end", type: "String")
  bit_score: String @source(subgraph: "Rfam", name: "bit_score", type: "String")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: String @source(subgraph: "Rfam", name: "cm_start", type: "String")
  cm_end: String @source(subgraph: "Rfam", name: "cm_end", type: "String")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: String @source(subgraph: "Rfam", name: "is_significant", type: "String")
}

input pdb_full_region_OrderByInput @source(subgraph: "Rfam", name: "pdb_full_region_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  pdb_id: OrderBy @source(subgraph: "Rfam", name: "pdb_id", type: "OrderBy")
  chain: OrderBy @source(subgraph: "Rfam", name: "chain", type: "OrderBy")
  pdb_start: OrderBy @source(subgraph: "Rfam", name: "pdb_start", type: "OrderBy")
  pdb_end: OrderBy @source(subgraph: "Rfam", name: "pdb_end", type: "OrderBy")
  bit_score: OrderBy @source(subgraph: "Rfam", name: "bit_score", type: "OrderBy")
  evalue_score: OrderBy @source(subgraph: "Rfam", name: "evalue_score", type: "OrderBy")
  cm_start: OrderBy @source(subgraph: "Rfam", name: "cm_start", type: "OrderBy")
  cm_end: OrderBy @source(subgraph: "Rfam", name: "cm_end", type: "OrderBy")
  hex_colour: OrderBy @source(subgraph: "Rfam", name: "hex_colour", type: "OrderBy")
  is_significant: OrderBy @source(subgraph: "Rfam", name: "is_significant", type: "OrderBy")
}

type pdb_full_region_old @source(subgraph: "Rfam", name: "pdb_full_region_old") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int! @source(subgraph: "Rfam", name: "pdb_start", type: "Int!")
  pdb_end: Int! @source(subgraph: "Rfam", name: "pdb_end", type: "Int!")
  bit_score: Float! @source(subgraph: "Rfam", name: "bit_score", type: "Float!")
  evalue_score: String! @source(subgraph: "Rfam", name: "evalue_score", type: "String!")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: Int! @source(subgraph: "Rfam", name: "is_significant", type: "Int!")
}

input pdb_full_region_old_WhereInput @source(subgraph: "Rfam", name: "pdb_full_region_old_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: String @source(subgraph: "Rfam", name: "pdb_start", type: "String")
  pdb_end: String @source(subgraph: "Rfam", name: "pdb_end", type: "String")
  bit_score: String @source(subgraph: "Rfam", name: "bit_score", type: "String")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: String @source(subgraph: "Rfam", name: "cm_start", type: "String")
  cm_end: String @source(subgraph: "Rfam", name: "cm_end", type: "String")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: String @source(subgraph: "Rfam", name: "is_significant", type: "String")
}

input pdb_full_region_old_OrderByInput @source(subgraph: "Rfam", name: "pdb_full_region_old_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  pdb_id: OrderBy @source(subgraph: "Rfam", name: "pdb_id", type: "OrderBy")
  chain: OrderBy @source(subgraph: "Rfam", name: "chain", type: "OrderBy")
  pdb_start: OrderBy @source(subgraph: "Rfam", name: "pdb_start", type: "OrderBy")
  pdb_end: OrderBy @source(subgraph: "Rfam", name: "pdb_end", type: "OrderBy")
  bit_score: OrderBy @source(subgraph: "Rfam", name: "bit_score", type: "OrderBy")
  evalue_score: OrderBy @source(subgraph: "Rfam", name: "evalue_score", type: "OrderBy")
  cm_start: OrderBy @source(subgraph: "Rfam", name: "cm_start", type: "OrderBy")
  cm_end: OrderBy @source(subgraph: "Rfam", name: "cm_end", type: "OrderBy")
  hex_colour: OrderBy @source(subgraph: "Rfam", name: "hex_colour", type: "OrderBy")
  is_significant: OrderBy @source(subgraph: "Rfam", name: "is_significant", type: "OrderBy")
}

type rfamseq_temp @source(subgraph: "Rfam", name: "rfamseq_temp") {
  """This should be """
  rfamseq_acc: String! @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String!")
  accession: String! @source(subgraph: "Rfam", name: "accession", type: "String!")
  version: Int! @source(subgraph: "Rfam", name: "version", type: "Int!")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  mol_type: rfamseq_temp_mol_type! @source(subgraph: "Rfam", name: "mol_type", type: "rfamseq_temp_mol_type!")
  length: Int @source(subgraph: "Rfam", name: "length", type: "Int")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String! @source(subgraph: "Rfam", name: "source", type: "String!")
}

enum rfamseq_temp_mol_type @source(subgraph: "Rfam", name: "rfamseq_temp_mol_type") {
  protein @source(subgraph: "Rfam", name: "protein")
  genomic_DNA @source(subgraph: "Rfam", name: "genomic_DNA")
  DNA @source(subgraph: "Rfam", name: "DNA")
  ss_DNA @source(subgraph: "Rfam", name: "ss_DNA")
  RNA @source(subgraph: "Rfam", name: "RNA")
  genomic_RNA @source(subgraph: "Rfam", name: "genomic_RNA")
  ds_RNA @source(subgraph: "Rfam", name: "ds_RNA")
  ss_cRNA @source(subgraph: "Rfam", name: "ss_cRNA")
  ss_RNA @source(subgraph: "Rfam", name: "ss_RNA")
  mRNA @source(subgraph: "Rfam", name: "mRNA")
  tRNA @source(subgraph: "Rfam", name: "tRNA")
  rRNA @source(subgraph: "Rfam", name: "rRNA")
  snoRNA @source(subgraph: "Rfam", name: "snoRNA")
  snRNA @source(subgraph: "Rfam", name: "snRNA")
  scRNA @source(subgraph: "Rfam", name: "scRNA")
  pre_RNA @source(subgraph: "Rfam", name: "pre_RNA")
  other_RNA @source(subgraph: "Rfam", name: "other_RNA")
  other_DNA @source(subgraph: "Rfam", name: "other_DNA")
  unassigned_DNA @source(subgraph: "Rfam", name: "unassigned_DNA")
  unassigned_RNA @source(subgraph: "Rfam", name: "unassigned_RNA")
  viral_cRNA @source(subgraph: "Rfam", name: "viral_cRNA")
  cRNA @source(subgraph: "Rfam", name: "cRNA")
  transcribed_RNA @source(subgraph: "Rfam", name: "transcribed_RNA")
  ncRNA @source(subgraph: "Rfam", name: "ncRNA")
  ribozyme @source(subgraph: "Rfam", name: "ribozyme")
  antisense_RNA @source(subgraph: "Rfam", name: "antisense_RNA")
  other @source(subgraph: "Rfam", name: "other")
}

input rfamseq_temp_WhereInput @source(subgraph: "Rfam", name: "rfamseq_temp_WhereInput") {
  """This should be """
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  accession: String @source(subgraph: "Rfam", name: "accession", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
  ncbi_id: String @source(subgraph: "Rfam", name: "ncbi_id", type: "String")
  mol_type: String @source(subgraph: "Rfam", name: "mol_type", type: "String")
  length: String @source(subgraph: "Rfam", name: "length", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String @source(subgraph: "Rfam", name: "source", type: "String")
}

input rfamseq_temp_OrderByInput @source(subgraph: "Rfam", name: "rfamseq_temp_OrderByInput") {
  """This should be """
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  accession: OrderBy @source(subgraph: "Rfam", name: "accession", type: "OrderBy")
  version: OrderBy @source(subgraph: "Rfam", name: "version", type: "OrderBy")
  ncbi_id: OrderBy @source(subgraph: "Rfam", name: "ncbi_id", type: "OrderBy")
  mol_type: OrderBy @source(subgraph: "Rfam", name: "mol_type", type: "OrderBy")
  length: OrderBy @source(subgraph: "Rfam", name: "length", type: "OrderBy")
  description: OrderBy @source(subgraph: "Rfam", name: "description", type: "OrderBy")
  previous_acc: OrderBy @source(subgraph: "Rfam", name: "previous_acc", type: "OrderBy")
  source: OrderBy @source(subgraph: "Rfam", name: "source", type: "OrderBy")
}

type rnacentral_matches @source(subgraph: "Rfam", name: "rnacentral_matches") {
  rfamseq_acc: String! @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String!")
  seq_start: BigInt! @source(subgraph: "Rfam", name: "seq_start", type: "BigInt!")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  md5: String! @source(subgraph: "Rfam", name: "md5", type: "String!")
  rnacentral_id: String @source(subgraph: "Rfam", name: "rnacentral_id", type: "String")
  type: rnacentral_matches_type @source(subgraph: "Rfam", name: "type", type: "rnacentral_matches_type")
}

enum rnacentral_matches_type @source(subgraph: "Rfam", name: "rnacentral_matches_type") {
  seed @source(subgraph: "Rfam", name: "seed")
  full @source(subgraph: "Rfam", name: "full")
}

input rnacentral_matches_WhereInput @source(subgraph: "Rfam", name: "rnacentral_matches_WhereInput") {
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: String @source(subgraph: "Rfam", name: "seq_start", type: "String")
  seq_end: String @source(subgraph: "Rfam", name: "seq_end", type: "String")
  md5: String @source(subgraph: "Rfam", name: "md5", type: "String")
  rnacentral_id: String @source(subgraph: "Rfam", name: "rnacentral_id", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
}

input rnacentral_matches_OrderByInput @source(subgraph: "Rfam", name: "rnacentral_matches_OrderByInput") {
  rfamseq_acc: OrderBy @source(subgraph: "Rfam", name: "rfamseq_acc", type: "OrderBy")
  seq_start: OrderBy @source(subgraph: "Rfam", name: "seq_start", type: "OrderBy")
  seq_end: OrderBy @source(subgraph: "Rfam", name: "seq_end", type: "OrderBy")
  md5: OrderBy @source(subgraph: "Rfam", name: "md5", type: "OrderBy")
  rnacentral_id: OrderBy @source(subgraph: "Rfam", name: "rnacentral_id", type: "OrderBy")
  type: OrderBy @source(subgraph: "Rfam", name: "type", type: "OrderBy")
}

type rscape_annotations @source(subgraph: "Rfam", name: "rscape_annotations") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  F: Float @source(subgraph: "Rfam", name: "F", type: "Float")
  sensitivity: Float @source(subgraph: "Rfam", name: "sensitivity", type: "Float")
  ppv: Float @source(subgraph: "Rfam", name: "ppv", type: "Float")
  true: Int @source(subgraph: "Rfam", name: "true", type: "Int")
  found: Int @source(subgraph: "Rfam", name: "found", type: "Int")
  tp: Int @source(subgraph: "Rfam", name: "tp", type: "Int")
  avgid: Float @source(subgraph: "Rfam", name: "avgid", type: "Float")
  alen: Int @source(subgraph: "Rfam", name: "alen", type: "Int")
  nseq: Int @source(subgraph: "Rfam", name: "nseq", type: "Int")
}

input rscape_annotations_WhereInput @source(subgraph: "Rfam", name: "rscape_annotations_WhereInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  F: String @source(subgraph: "Rfam", name: "F", type: "String")
  sensitivity: String @source(subgraph: "Rfam", name: "sensitivity", type: "String")
  ppv: String @source(subgraph: "Rfam", name: "ppv", type: "String")
  true: String @source(subgraph: "Rfam", name: "true", type: "String")
  found: String @source(subgraph: "Rfam", name: "found", type: "String")
  tp: String @source(subgraph: "Rfam", name: "tp", type: "String")
  avgid: String @source(subgraph: "Rfam", name: "avgid", type: "String")
  alen: String @source(subgraph: "Rfam", name: "alen", type: "String")
  nseq: String @source(subgraph: "Rfam", name: "nseq", type: "String")
}

input rscape_annotations_OrderByInput @source(subgraph: "Rfam", name: "rscape_annotations_OrderByInput") {
  rfam_acc: OrderBy @source(subgraph: "Rfam", name: "rfam_acc", type: "OrderBy")
  F: OrderBy @source(subgraph: "Rfam", name: "F", type: "OrderBy")
  sensitivity: OrderBy @source(subgraph: "Rfam", name: "sensitivity", type: "OrderBy")
  ppv: OrderBy @source(subgraph: "Rfam", name: "ppv", type: "OrderBy")
  true: OrderBy @source(subgraph: "Rfam", name: "true", type: "OrderBy")
  found: OrderBy @source(subgraph: "Rfam", name: "found", type: "OrderBy")
  tp: OrderBy @source(subgraph: "Rfam", name: "tp", type: "OrderBy")
  avgid: OrderBy @source(subgraph: "Rfam", name: "avgid", type: "OrderBy")
  alen: OrderBy @source(subgraph: "Rfam", name: "alen", type: "OrderBy")
  nseq: OrderBy @source(subgraph: "Rfam", name: "nseq", type: "OrderBy")
}

type taxonomic_tree @source(subgraph: "Rfam", name: "taxonomic_tree") {
  ncbi_code: Int! @source(subgraph: "Rfam", name: "ncbi_code", type: "Int!")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: Int @source(subgraph: "Rfam", name: "lft", type: "Int")
  rgt: Int @source(subgraph: "Rfam", name: "rgt", type: "Int")
  parent: String @source(subgraph: "Rfam", name: "parent", type: "String")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
}

input taxonomic_tree_WhereInput @source(subgraph: "Rfam", name: "taxonomic_tree_WhereInput") {
  ncbi_code: String @source(subgraph: "Rfam", name: "ncbi_code", type: "String")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: String @source(subgraph: "Rfam", name: "lft", type: "String")
  rgt: String @source(subgraph: "Rfam", name: "rgt", type: "String")
  parent: String @source(subgraph: "Rfam", name: "parent", type: "String")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
}

input taxonomic_tree_OrderByInput @source(subgraph: "Rfam", name: "taxonomic_tree_OrderByInput") {
  ncbi_code: OrderBy @source(subgraph: "Rfam", name: "ncbi_code", type: "OrderBy")
  species: OrderBy @source(subgraph: "Rfam", name: "species", type: "OrderBy")
  taxonomy: OrderBy @source(subgraph: "Rfam", name: "taxonomy", type: "OrderBy")
  lft: OrderBy @source(subgraph: "Rfam", name: "lft", type: "OrderBy")
  rgt: OrderBy @source(subgraph: "Rfam", name: "rgt", type: "OrderBy")
  parent: OrderBy @source(subgraph: "Rfam", name: "parent", type: "OrderBy")
  level: OrderBy @source(subgraph: "Rfam", name: "level", type: "OrderBy")
}

type taxonomy_websearch @source(subgraph: "Rfam", name: "taxonomy_websearch") {
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  rgt: Int @source(subgraph: "Rfam", name: "rgt", type: "Int")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: Int @source(subgraph: "Rfam", name: "lft", type: "Int")
  parent: Int @source(subgraph: "Rfam", name: "parent", type: "Int")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
  minimal: Int! @source(subgraph: "Rfam", name: "minimal", type: "Int!")
  rank: String @source(subgraph: "Rfam", name: "rank", type: "String")
}

input taxonomy_websearch_WhereInput @source(subgraph: "Rfam", name: "taxonomy_websearch_WhereInput") {
  ncbi_id: String @source(subgraph: "Rfam", name: "ncbi_id", type: "String")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  rgt: String @source(subgraph: "Rfam", name: "rgt", type: "String")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: String @source(subgraph: "Rfam", name: "lft", type: "String")
  parent: String @source(subgraph: "Rfam", name: "parent", type: "String")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
  minimal: String @source(subgraph: "Rfam", name: "minimal", type: "String")
  rank: String @source(subgraph: "Rfam", name: "rank", type: "String")
}

input taxonomy_websearch_OrderByInput @source(subgraph: "Rfam", name: "taxonomy_websearch_OrderByInput") {
  ncbi_id: OrderBy @source(subgraph: "Rfam", name: "ncbi_id", type: "OrderBy")
  species: OrderBy @source(subgraph: "Rfam", name: "species", type: "OrderBy")
  rgt: OrderBy @source(subgraph: "Rfam", name: "rgt", type: "OrderBy")
  taxonomy: OrderBy @source(subgraph: "Rfam", name: "taxonomy", type: "OrderBy")
  lft: OrderBy @source(subgraph: "Rfam", name: "lft", type: "OrderBy")
  parent: OrderBy @source(subgraph: "Rfam", name: "parent", type: "OrderBy")
  level: OrderBy @source(subgraph: "Rfam", name: "level", type: "OrderBy")
  minimal: OrderBy @source(subgraph: "Rfam", name: "minimal", type: "OrderBy")
  rank: OrderBy @source(subgraph: "Rfam", name: "rank", type: "OrderBy")
}

type version @source(subgraph: "Rfam", name: "version") {
  rfam_release: Float! @source(subgraph: "Rfam", name: "rfam_release", type: "Float!")
  rfam_release_date: Date! @source(subgraph: "Rfam", name: "rfam_release_date", type: "Date!")
  number_families: Int! @source(subgraph: "Rfam", name: "number_families", type: "Int!")
  embl_release: String! @source(subgraph: "Rfam", name: "embl_release", type: "String!")
}

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date @source(subgraph: "Rfam", name: "Date") @source(subgraph: "Rfam", name: "Date")

input version_WhereInput @source(subgraph: "Rfam", name: "version_WhereInput") {
  rfam_release: String @source(subgraph: "Rfam", name: "rfam_release", type: "String")
  rfam_release_date: String @source(subgraph: "Rfam", name: "rfam_release_date", type: "String")
  number_families: String @source(subgraph: "Rfam", name: "number_families", type: "String")
  embl_release: String @source(subgraph: "Rfam", name: "embl_release", type: "String")
}

input version_OrderByInput @source(subgraph: "Rfam", name: "version_OrderByInput") {
  rfam_release: OrderBy @source(subgraph: "Rfam", name: "rfam_release", type: "OrderBy")
  rfam_release_date: OrderBy @source(subgraph: "Rfam", name: "rfam_release_date", type: "OrderBy")
  number_families: OrderBy @source(subgraph: "Rfam", name: "number_families", type: "OrderBy")
  embl_release: OrderBy @source(subgraph: "Rfam", name: "embl_release", type: "OrderBy")
}

type Mutation {
  insert__annotated_file(_annotated_file: _annotated_file_InsertInput!): _annotated_file @mysqlInsert(table: "_annotated_file", primaryKeys: ["rfam_acc"]) @source(subgraph: "Rfam", name: "insert__annotated_file", type: "_annotated_file")
  update__annotated_file(_annotated_file: _annotated_file_UpdateInput!, where: _annotated_file_WhereInput): _annotated_file @mysqlUpdate(table: "_annotated_file") @source(subgraph: "Rfam", name: "update__annotated_file", type: "_annotated_file")
  delete__annotated_file(where: _annotated_file_WhereInput): Boolean @mysqlDelete(table: "_annotated_file") @source(subgraph: "Rfam", name: "delete__annotated_file", type: "Boolean")
  insert__family_file(_family_file: _family_file_InsertInput!): _family_file @mysqlInsert(table: "_family_file", primaryKeys: []) @source(subgraph: "Rfam", name: "insert__family_file", type: "_family_file")
  update__family_file(_family_file: _family_file_UpdateInput!, where: _family_file_WhereInput): _family_file @mysqlUpdate(table: "_family_file") @source(subgraph: "Rfam", name: "update__family_file", type: "_family_file")
  delete__family_file(where: _family_file_WhereInput): Boolean @mysqlDelete(table: "_family_file") @source(subgraph: "Rfam", name: "delete__family_file", type: "Boolean")
  insert__genome_data(_genome_data: _genome_data_InsertInput!): _genome_data @mysqlInsert(table: "_genome_data", primaryKeys: []) @source(subgraph: "Rfam", name: "insert__genome_data", type: "_genome_data")
  update__genome_data(_genome_data: _genome_data_UpdateInput!, where: _genome_data_WhereInput): _genome_data @mysqlUpdate(table: "_genome_data") @source(subgraph: "Rfam", name: "update__genome_data", type: "_genome_data")
  delete__genome_data(where: _genome_data_WhereInput): Boolean @mysqlDelete(table: "_genome_data") @source(subgraph: "Rfam", name: "delete__genome_data", type: "Boolean")
  insert__lock(_lock: _lock_InsertInput!): _lock @mysqlInsert(table: "_lock", primaryKeys: []) @source(subgraph: "Rfam", name: "insert__lock", type: "_lock")
  update__lock(_lock: _lock_UpdateInput!, where: _lock_WhereInput): _lock @mysqlUpdate(table: "_lock") @source(subgraph: "Rfam", name: "update__lock", type: "_lock")
  delete__lock(where: _lock_WhereInput): Boolean @mysqlDelete(table: "_lock") @source(subgraph: "Rfam", name: "delete__lock", type: "Boolean")
  insert__overlap(_overlap: _overlap_InsertInput!): _overlap @mysqlInsert(table: "_overlap", primaryKeys: ["auto_overlap"]) @source(subgraph: "Rfam", name: "insert__overlap", type: "_overlap")
  update__overlap(_overlap: _overlap_UpdateInput!, where: _overlap_WhereInput): _overlap @mysqlUpdate(table: "_overlap") @source(subgraph: "Rfam", name: "update__overlap", type: "_overlap")
  delete__overlap(where: _overlap_WhereInput): Boolean @mysqlDelete(table: "_overlap") @source(subgraph: "Rfam", name: "delete__overlap", type: "Boolean")
  insert__overlap_membership(_overlap_membership: _overlap_membership_InsertInput!): _overlap_membership @mysqlInsert(table: "_overlap_membership", primaryKeys: []) @source(subgraph: "Rfam", name: "insert__overlap_membership", type: "_overlap_membership")
  update__overlap_membership(_overlap_membership: _overlap_membership_UpdateInput!, where: _overlap_membership_WhereInput): _overlap_membership @mysqlUpdate(table: "_overlap_membership") @source(subgraph: "Rfam", name: "update__overlap_membership", type: "_overlap_membership")
  delete__overlap_membership(where: _overlap_membership_WhereInput): Boolean @mysqlDelete(table: "_overlap_membership") @source(subgraph: "Rfam", name: "delete__overlap_membership", type: "Boolean")
  insert__post_process(_post_process: _post_process_InsertInput!): _post_process @mysqlInsert(table: "_post_process", primaryKeys: []) @source(subgraph: "Rfam", name: "insert__post_process", type: "_post_process")
  update__post_process(_post_process: _post_process_UpdateInput!, where: _post_process_WhereInput): _post_process @mysqlUpdate(table: "_post_process") @source(subgraph: "Rfam", name: "update__post_process", type: "_post_process")
  delete__post_process(where: _post_process_WhereInput): Boolean @mysqlDelete(table: "_post_process") @source(subgraph: "Rfam", name: "delete__post_process", type: "Boolean")
  insert_alignment_and_tree(alignment_and_tree: alignment_and_tree_InsertInput!): alignment_and_tree @mysqlInsert(table: "alignment_and_tree", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_alignment_and_tree", type: "alignment_and_tree")
  update_alignment_and_tree(alignment_and_tree: alignment_and_tree_UpdateInput!, where: alignment_and_tree_WhereInput): alignment_and_tree @mysqlUpdate(table: "alignment_and_tree") @source(subgraph: "Rfam", name: "update_alignment_and_tree", type: "alignment_and_tree")
  delete_alignment_and_tree(where: alignment_and_tree_WhereInput): Boolean @mysqlDelete(table: "alignment_and_tree") @source(subgraph: "Rfam", name: "delete_alignment_and_tree", type: "Boolean")
  insert_author(author: author_InsertInput!): author @mysqlInsert(table: "author", primaryKeys: ["author_id"]) @source(subgraph: "Rfam", name: "insert_author", type: "author")
  update_author(author: author_UpdateInput!, where: author_WhereInput): author @mysqlUpdate(table: "author") @source(subgraph: "Rfam", name: "update_author", type: "author")
  delete_author(where: author_WhereInput): Boolean @mysqlDelete(table: "author") @source(subgraph: "Rfam", name: "delete_author", type: "Boolean")
  insert_clan(clan: clan_InsertInput!): clan @mysqlInsert(table: "clan", primaryKeys: ["clan_acc"]) @source(subgraph: "Rfam", name: "insert_clan", type: "clan")
  update_clan(clan: clan_UpdateInput!, where: clan_WhereInput): clan @mysqlUpdate(table: "clan") @source(subgraph: "Rfam", name: "update_clan", type: "clan")
  delete_clan(where: clan_WhereInput): Boolean @mysqlDelete(table: "clan") @source(subgraph: "Rfam", name: "delete_clan", type: "Boolean")
  insert_clan_database_link(clan_database_link: clan_database_link_InsertInput!): clan_database_link @mysqlInsert(table: "clan_database_link", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_clan_database_link", type: "clan_database_link")
  update_clan_database_link(clan_database_link: clan_database_link_UpdateInput!, where: clan_database_link_WhereInput): clan_database_link @mysqlUpdate(table: "clan_database_link") @source(subgraph: "Rfam", name: "update_clan_database_link", type: "clan_database_link")
  delete_clan_database_link(where: clan_database_link_WhereInput): Boolean @mysqlDelete(table: "clan_database_link") @source(subgraph: "Rfam", name: "delete_clan_database_link", type: "Boolean")
  insert_clan_literature_reference(clan_literature_reference: clan_literature_reference_InsertInput!): clan_literature_reference @mysqlInsert(table: "clan_literature_reference", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_clan_literature_reference", type: "clan_literature_reference")
  update_clan_literature_reference(clan_literature_reference: clan_literature_reference_UpdateInput!, where: clan_literature_reference_WhereInput): clan_literature_reference @mysqlUpdate(table: "clan_literature_reference") @source(subgraph: "Rfam", name: "update_clan_literature_reference", type: "clan_literature_reference")
  delete_clan_literature_reference(where: clan_literature_reference_WhereInput): Boolean @mysqlDelete(table: "clan_literature_reference") @source(subgraph: "Rfam", name: "delete_clan_literature_reference", type: "Boolean")
  insert_clan_membership(clan_membership: clan_membership_InsertInput!): clan_membership @mysqlInsert(table: "clan_membership", primaryKeys: ["rfam_acc"]) @source(subgraph: "Rfam", name: "insert_clan_membership", type: "clan_membership")
  update_clan_membership(clan_membership: clan_membership_UpdateInput!, where: clan_membership_WhereInput): clan_membership @mysqlUpdate(table: "clan_membership") @source(subgraph: "Rfam", name: "update_clan_membership", type: "clan_membership")
  delete_clan_membership(where: clan_membership_WhereInput): Boolean @mysqlDelete(table: "clan_membership") @source(subgraph: "Rfam", name: "delete_clan_membership", type: "Boolean")
  insert_database_link(database_link: database_link_InsertInput!): database_link @mysqlInsert(table: "database_link", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_database_link", type: "database_link")
  update_database_link(database_link: database_link_UpdateInput!, where: database_link_WhereInput): database_link @mysqlUpdate(table: "database_link") @source(subgraph: "Rfam", name: "update_database_link", type: "database_link")
  delete_database_link(where: database_link_WhereInput): Boolean @mysqlDelete(table: "database_link") @source(subgraph: "Rfam", name: "delete_database_link", type: "Boolean")
  insert_db_version(db_version: db_version_InsertInput!): db_version @mysqlInsert(table: "db_version", primaryKeys: ["rfam_release"]) @source(subgraph: "Rfam", name: "insert_db_version", type: "db_version")
  update_db_version(db_version: db_version_UpdateInput!, where: db_version_WhereInput): db_version @mysqlUpdate(table: "db_version") @source(subgraph: "Rfam", name: "update_db_version", type: "db_version")
  delete_db_version(where: db_version_WhereInput): Boolean @mysqlDelete(table: "db_version") @source(subgraph: "Rfam", name: "delete_db_version", type: "Boolean")
  insert_dead_clan(dead_clan: dead_clan_InsertInput!): dead_clan @mysqlInsert(table: "dead_clan", primaryKeys: ["clan_acc"]) @source(subgraph: "Rfam", name: "insert_dead_clan", type: "dead_clan")
  update_dead_clan(dead_clan: dead_clan_UpdateInput!, where: dead_clan_WhereInput): dead_clan @mysqlUpdate(table: "dead_clan") @source(subgraph: "Rfam", name: "update_dead_clan", type: "dead_clan")
  delete_dead_clan(where: dead_clan_WhereInput): Boolean @mysqlDelete(table: "dead_clan") @source(subgraph: "Rfam", name: "delete_dead_clan", type: "Boolean")
  insert_dead_family(dead_family: dead_family_InsertInput!): dead_family @mysqlInsert(table: "dead_family", primaryKeys: ["rfam_acc"]) @source(subgraph: "Rfam", name: "insert_dead_family", type: "dead_family")
  update_dead_family(dead_family: dead_family_UpdateInput!, where: dead_family_WhereInput): dead_family @mysqlUpdate(table: "dead_family") @source(subgraph: "Rfam", name: "update_dead_family", type: "dead_family")
  delete_dead_family(where: dead_family_WhereInput): Boolean @mysqlDelete(table: "dead_family") @source(subgraph: "Rfam", name: "delete_dead_family", type: "Boolean")
  insert_ensembl_names(ensembl_names: ensembl_names_InsertInput!): ensembl_names @mysqlInsert(table: "ensembl_names", primaryKeys: ["insdc"]) @source(subgraph: "Rfam", name: "insert_ensembl_names", type: "ensembl_names")
  update_ensembl_names(ensembl_names: ensembl_names_UpdateInput!, where: ensembl_names_WhereInput): ensembl_names @mysqlUpdate(table: "ensembl_names") @source(subgraph: "Rfam", name: "update_ensembl_names", type: "ensembl_names")
  delete_ensembl_names(where: ensembl_names_WhereInput): Boolean @mysqlDelete(table: "ensembl_names") @source(subgraph: "Rfam", name: "delete_ensembl_names", type: "Boolean")
  insert_family(family: family_InsertInput!): family @mysqlInsert(table: "family", primaryKeys: ["rfam_acc"]) @source(subgraph: "Rfam", name: "insert_family", type: "family")
  update_family(family: family_UpdateInput!, where: family_WhereInput): family @mysqlUpdate(table: "family") @source(subgraph: "Rfam", name: "update_family", type: "family")
  delete_family(where: family_WhereInput): Boolean @mysqlDelete(table: "family") @source(subgraph: "Rfam", name: "delete_family", type: "Boolean")
  insert_family_author(family_author: family_author_InsertInput!): family_author @mysqlInsert(table: "family_author", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_family_author", type: "family_author")
  update_family_author(family_author: family_author_UpdateInput!, where: family_author_WhereInput): family_author @mysqlUpdate(table: "family_author") @source(subgraph: "Rfam", name: "update_family_author", type: "family_author")
  delete_family_author(where: family_author_WhereInput): Boolean @mysqlDelete(table: "family_author") @source(subgraph: "Rfam", name: "delete_family_author", type: "Boolean")
  insert_family_literature_reference(family_literature_reference: family_literature_reference_InsertInput!): family_literature_reference @mysqlInsert(table: "family_literature_reference", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_family_literature_reference", type: "family_literature_reference")
  update_family_literature_reference(family_literature_reference: family_literature_reference_UpdateInput!, where: family_literature_reference_WhereInput): family_literature_reference @mysqlUpdate(table: "family_literature_reference") @source(subgraph: "Rfam", name: "update_family_literature_reference", type: "family_literature_reference")
  delete_family_literature_reference(where: family_literature_reference_WhereInput): Boolean @mysqlDelete(table: "family_literature_reference") @source(subgraph: "Rfam", name: "delete_family_literature_reference", type: "Boolean")
  insert_family_long(family_long: family_long_InsertInput!): family_long @mysqlInsert(table: "family_long", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_family_long", type: "family_long")
  update_family_long(family_long: family_long_UpdateInput!, where: family_long_WhereInput): family_long @mysqlUpdate(table: "family_long") @source(subgraph: "Rfam", name: "update_family_long", type: "family_long")
  delete_family_long(where: family_long_WhereInput): Boolean @mysqlDelete(table: "family_long") @source(subgraph: "Rfam", name: "delete_family_long", type: "Boolean")
  insert_family_ncbi(family_ncbi: family_ncbi_InsertInput!): family_ncbi @mysqlInsert(table: "family_ncbi", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_family_ncbi", type: "family_ncbi")
  update_family_ncbi(family_ncbi: family_ncbi_UpdateInput!, where: family_ncbi_WhereInput): family_ncbi @mysqlUpdate(table: "family_ncbi") @source(subgraph: "Rfam", name: "update_family_ncbi", type: "family_ncbi")
  delete_family_ncbi(where: family_ncbi_WhereInput): Boolean @mysqlDelete(table: "family_ncbi") @source(subgraph: "Rfam", name: "delete_family_ncbi", type: "Boolean")
  insert_features(features: features_InsertInput!): features @mysqlInsert(table: "features", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_features", type: "features")
  update_features(features: features_UpdateInput!, where: features_WhereInput): features @mysqlUpdate(table: "features") @source(subgraph: "Rfam", name: "update_features", type: "features")
  delete_features(where: features_WhereInput): Boolean @mysqlDelete(table: "features") @source(subgraph: "Rfam", name: "delete_features", type: "Boolean")
  insert_full_region(full_region: full_region_InsertInput!): full_region @mysqlInsert(table: "full_region", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_full_region", type: "full_region")
  update_full_region(full_region: full_region_UpdateInput!, where: full_region_WhereInput): full_region @mysqlUpdate(table: "full_region") @source(subgraph: "Rfam", name: "update_full_region", type: "full_region")
  delete_full_region(where: full_region_WhereInput): Boolean @mysqlDelete(table: "full_region") @source(subgraph: "Rfam", name: "delete_full_region", type: "Boolean")
  insert_genome(genome: genome_InsertInput!): genome @mysqlInsert(table: "genome", primaryKeys: ["upid"]) @source(subgraph: "Rfam", name: "insert_genome", type: "genome")
  update_genome(genome: genome_UpdateInput!, where: genome_WhereInput): genome @mysqlUpdate(table: "genome") @source(subgraph: "Rfam", name: "update_genome", type: "genome")
  delete_genome(where: genome_WhereInput): Boolean @mysqlDelete(table: "genome") @source(subgraph: "Rfam", name: "delete_genome", type: "Boolean")
  insert_genome_temp(genome_temp: genome_temp_InsertInput!): genome_temp @mysqlInsert(table: "genome_temp", primaryKeys: ["upid"]) @source(subgraph: "Rfam", name: "insert_genome_temp", type: "genome_temp")
  update_genome_temp(genome_temp: genome_temp_UpdateInput!, where: genome_temp_WhereInput): genome_temp @mysqlUpdate(table: "genome_temp") @source(subgraph: "Rfam", name: "update_genome_temp", type: "genome_temp")
  delete_genome_temp(where: genome_temp_WhereInput): Boolean @mysqlDelete(table: "genome_temp") @source(subgraph: "Rfam", name: "delete_genome_temp", type: "Boolean")
  insert_genseq(genseq: genseq_InsertInput!): genseq @mysqlInsert(table: "genseq", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_genseq", type: "genseq")
  update_genseq(genseq: genseq_UpdateInput!, where: genseq_WhereInput): genseq @mysqlUpdate(table: "genseq") @source(subgraph: "Rfam", name: "update_genseq", type: "genseq")
  delete_genseq(where: genseq_WhereInput): Boolean @mysqlDelete(table: "genseq") @source(subgraph: "Rfam", name: "delete_genseq", type: "Boolean")
  insert_genseq_temp(genseq_temp: genseq_temp_InsertInput!): genseq_temp @mysqlInsert(table: "genseq_temp", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_genseq_temp", type: "genseq_temp")
  update_genseq_temp(genseq_temp: genseq_temp_UpdateInput!, where: genseq_temp_WhereInput): genseq_temp @mysqlUpdate(table: "genseq_temp") @source(subgraph: "Rfam", name: "update_genseq_temp", type: "genseq_temp")
  delete_genseq_temp(where: genseq_temp_WhereInput): Boolean @mysqlDelete(table: "genseq_temp") @source(subgraph: "Rfam", name: "delete_genseq_temp", type: "Boolean")
  insert_html_alignment(html_alignment: html_alignment_InsertInput!): html_alignment @mysqlInsert(table: "html_alignment", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_html_alignment", type: "html_alignment")
  update_html_alignment(html_alignment: html_alignment_UpdateInput!, where: html_alignment_WhereInput): html_alignment @mysqlUpdate(table: "html_alignment") @source(subgraph: "Rfam", name: "update_html_alignment", type: "html_alignment")
  delete_html_alignment(where: html_alignment_WhereInput): Boolean @mysqlDelete(table: "html_alignment") @source(subgraph: "Rfam", name: "delete_html_alignment", type: "Boolean")
  insert_keywords(keywords: keywords_InsertInput!): keywords @mysqlInsert(table: "keywords", primaryKeys: ["rfam_acc"]) @source(subgraph: "Rfam", name: "insert_keywords", type: "keywords")
  update_keywords(keywords: keywords_UpdateInput!, where: keywords_WhereInput): keywords @mysqlUpdate(table: "keywords") @source(subgraph: "Rfam", name: "update_keywords", type: "keywords")
  delete_keywords(where: keywords_WhereInput): Boolean @mysqlDelete(table: "keywords") @source(subgraph: "Rfam", name: "delete_keywords", type: "Boolean")
  insert_literature_reference(literature_reference: literature_reference_InsertInput!): literature_reference @mysqlInsert(table: "literature_reference", primaryKeys: ["pmid"]) @source(subgraph: "Rfam", name: "insert_literature_reference", type: "literature_reference")
  update_literature_reference(literature_reference: literature_reference_UpdateInput!, where: literature_reference_WhereInput): literature_reference @mysqlUpdate(table: "literature_reference") @source(subgraph: "Rfam", name: "update_literature_reference", type: "literature_reference")
  delete_literature_reference(where: literature_reference_WhereInput): Boolean @mysqlDelete(table: "literature_reference") @source(subgraph: "Rfam", name: "delete_literature_reference", type: "Boolean")
  insert_matches_and_fasta(matches_and_fasta: matches_and_fasta_InsertInput!): matches_and_fasta @mysqlInsert(table: "matches_and_fasta", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_matches_and_fasta", type: "matches_and_fasta")
  update_matches_and_fasta(matches_and_fasta: matches_and_fasta_UpdateInput!, where: matches_and_fasta_WhereInput): matches_and_fasta @mysqlUpdate(table: "matches_and_fasta") @source(subgraph: "Rfam", name: "update_matches_and_fasta", type: "matches_and_fasta")
  delete_matches_and_fasta(where: matches_and_fasta_WhereInput): Boolean @mysqlDelete(table: "matches_and_fasta") @source(subgraph: "Rfam", name: "delete_matches_and_fasta", type: "Boolean")
  insert_motif(motif: motif_InsertInput!): motif @mysqlInsert(table: "motif", primaryKeys: ["motif_acc"]) @source(subgraph: "Rfam", name: "insert_motif", type: "motif")
  update_motif(motif: motif_UpdateInput!, where: motif_WhereInput): motif @mysqlUpdate(table: "motif") @source(subgraph: "Rfam", name: "update_motif", type: "motif")
  delete_motif(where: motif_WhereInput): Boolean @mysqlDelete(table: "motif") @source(subgraph: "Rfam", name: "delete_motif", type: "Boolean")
  insert_motif_database_link(motif_database_link: motif_database_link_InsertInput!): motif_database_link @mysqlInsert(table: "motif_database_link", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_motif_database_link", type: "motif_database_link")
  update_motif_database_link(motif_database_link: motif_database_link_UpdateInput!, where: motif_database_link_WhereInput): motif_database_link @mysqlUpdate(table: "motif_database_link") @source(subgraph: "Rfam", name: "update_motif_database_link", type: "motif_database_link")
  delete_motif_database_link(where: motif_database_link_WhereInput): Boolean @mysqlDelete(table: "motif_database_link") @source(subgraph: "Rfam", name: "delete_motif_database_link", type: "Boolean")
  insert_motif_family_stats(motif_family_stats: motif_family_stats_InsertInput!): motif_family_stats @mysqlInsert(table: "motif_family_stats", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_motif_family_stats", type: "motif_family_stats")
  update_motif_family_stats(motif_family_stats: motif_family_stats_UpdateInput!, where: motif_family_stats_WhereInput): motif_family_stats @mysqlUpdate(table: "motif_family_stats") @source(subgraph: "Rfam", name: "update_motif_family_stats", type: "motif_family_stats")
  delete_motif_family_stats(where: motif_family_stats_WhereInput): Boolean @mysqlDelete(table: "motif_family_stats") @source(subgraph: "Rfam", name: "delete_motif_family_stats", type: "Boolean")
  insert_motif_file(motif_file: motif_file_InsertInput!): motif_file @mysqlInsert(table: "motif_file", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_motif_file", type: "motif_file")
  update_motif_file(motif_file: motif_file_UpdateInput!, where: motif_file_WhereInput): motif_file @mysqlUpdate(table: "motif_file") @source(subgraph: "Rfam", name: "update_motif_file", type: "motif_file")
  delete_motif_file(where: motif_file_WhereInput): Boolean @mysqlDelete(table: "motif_file") @source(subgraph: "Rfam", name: "delete_motif_file", type: "Boolean")
  insert_motif_literature(motif_literature: motif_literature_InsertInput!): motif_literature @mysqlInsert(table: "motif_literature", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_motif_literature", type: "motif_literature")
  update_motif_literature(motif_literature: motif_literature_UpdateInput!, where: motif_literature_WhereInput): motif_literature @mysqlUpdate(table: "motif_literature") @source(subgraph: "Rfam", name: "update_motif_literature", type: "motif_literature")
  delete_motif_literature(where: motif_literature_WhereInput): Boolean @mysqlDelete(table: "motif_literature") @source(subgraph: "Rfam", name: "delete_motif_literature", type: "Boolean")
  insert_motif_matches(motif_matches: motif_matches_InsertInput!): motif_matches @mysqlInsert(table: "motif_matches", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_motif_matches", type: "motif_matches")
  update_motif_matches(motif_matches: motif_matches_UpdateInput!, where: motif_matches_WhereInput): motif_matches @mysqlUpdate(table: "motif_matches") @source(subgraph: "Rfam", name: "update_motif_matches", type: "motif_matches")
  delete_motif_matches(where: motif_matches_WhereInput): Boolean @mysqlDelete(table: "motif_matches") @source(subgraph: "Rfam", name: "delete_motif_matches", type: "Boolean")
  insert_motif_old(motif_old: motif_old_InsertInput!): motif_old @mysqlInsert(table: "motif_old", primaryKeys: ["motif_acc"]) @source(subgraph: "Rfam", name: "insert_motif_old", type: "motif_old")
  update_motif_old(motif_old: motif_old_UpdateInput!, where: motif_old_WhereInput): motif_old @mysqlUpdate(table: "motif_old") @source(subgraph: "Rfam", name: "update_motif_old", type: "motif_old")
  delete_motif_old(where: motif_old_WhereInput): Boolean @mysqlDelete(table: "motif_old") @source(subgraph: "Rfam", name: "delete_motif_old", type: "Boolean")
  insert_motif_pdb(motif_pdb: motif_pdb_InsertInput!): motif_pdb @mysqlInsert(table: "motif_pdb", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_motif_pdb", type: "motif_pdb")
  update_motif_pdb(motif_pdb: motif_pdb_UpdateInput!, where: motif_pdb_WhereInput): motif_pdb @mysqlUpdate(table: "motif_pdb") @source(subgraph: "Rfam", name: "update_motif_pdb", type: "motif_pdb")
  delete_motif_pdb(where: motif_pdb_WhereInput): Boolean @mysqlDelete(table: "motif_pdb") @source(subgraph: "Rfam", name: "delete_motif_pdb", type: "Boolean")
  insert_motif_ss_image(motif_ss_image: motif_ss_image_InsertInput!): motif_ss_image @mysqlInsert(table: "motif_ss_image", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_motif_ss_image", type: "motif_ss_image")
  update_motif_ss_image(motif_ss_image: motif_ss_image_UpdateInput!, where: motif_ss_image_WhereInput): motif_ss_image @mysqlUpdate(table: "motif_ss_image") @source(subgraph: "Rfam", name: "update_motif_ss_image", type: "motif_ss_image")
  delete_motif_ss_image(where: motif_ss_image_WhereInput): Boolean @mysqlDelete(table: "motif_ss_image") @source(subgraph: "Rfam", name: "delete_motif_ss_image", type: "Boolean")
  insert_pdb(pdb: pdb_InsertInput!): pdb @mysqlInsert(table: "pdb", primaryKeys: ["pdb_id"]) @source(subgraph: "Rfam", name: "insert_pdb", type: "pdb")
  update_pdb(pdb: pdb_UpdateInput!, where: pdb_WhereInput): pdb @mysqlUpdate(table: "pdb") @source(subgraph: "Rfam", name: "update_pdb", type: "pdb")
  delete_pdb(where: pdb_WhereInput): Boolean @mysqlDelete(table: "pdb") @source(subgraph: "Rfam", name: "delete_pdb", type: "Boolean")
  insert_pdb_full_region(pdb_full_region: pdb_full_region_InsertInput!): pdb_full_region @mysqlInsert(table: "pdb_full_region", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_pdb_full_region", type: "pdb_full_region")
  update_pdb_full_region(pdb_full_region: pdb_full_region_UpdateInput!, where: pdb_full_region_WhereInput): pdb_full_region @mysqlUpdate(table: "pdb_full_region") @source(subgraph: "Rfam", name: "update_pdb_full_region", type: "pdb_full_region")
  delete_pdb_full_region(where: pdb_full_region_WhereInput): Boolean @mysqlDelete(table: "pdb_full_region") @source(subgraph: "Rfam", name: "delete_pdb_full_region", type: "Boolean")
  insert_pdb_full_region_old(pdb_full_region_old: pdb_full_region_old_InsertInput!): pdb_full_region_old @mysqlInsert(table: "pdb_full_region_old", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_pdb_full_region_old", type: "pdb_full_region_old")
  update_pdb_full_region_old(pdb_full_region_old: pdb_full_region_old_UpdateInput!, where: pdb_full_region_old_WhereInput): pdb_full_region_old @mysqlUpdate(table: "pdb_full_region_old") @source(subgraph: "Rfam", name: "update_pdb_full_region_old", type: "pdb_full_region_old")
  delete_pdb_full_region_old(where: pdb_full_region_old_WhereInput): Boolean @mysqlDelete(table: "pdb_full_region_old") @source(subgraph: "Rfam", name: "delete_pdb_full_region_old", type: "Boolean")
  insert_pdb_rfam_reg(pdb_rfam_reg: pdb_rfam_reg_InsertInput!): pdb_rfam_reg @mysqlInsert(table: "pdb_rfam_reg", primaryKeys: ["auto_pdb_reg"]) @source(subgraph: "Rfam", name: "insert_pdb_rfam_reg", type: "pdb_rfam_reg")
  update_pdb_rfam_reg(pdb_rfam_reg: pdb_rfam_reg_UpdateInput!, where: pdb_rfam_reg_WhereInput): pdb_rfam_reg @mysqlUpdate(table: "pdb_rfam_reg") @source(subgraph: "Rfam", name: "update_pdb_rfam_reg", type: "pdb_rfam_reg")
  delete_pdb_rfam_reg(where: pdb_rfam_reg_WhereInput): Boolean @mysqlDelete(table: "pdb_rfam_reg") @source(subgraph: "Rfam", name: "delete_pdb_rfam_reg", type: "Boolean")
  insert_pdb_sequence(pdb_sequence: pdb_sequence_InsertInput!): pdb_sequence @mysqlInsert(table: "pdb_sequence", primaryKeys: ["pdb_seq"]) @source(subgraph: "Rfam", name: "insert_pdb_sequence", type: "pdb_sequence")
  update_pdb_sequence(pdb_sequence: pdb_sequence_UpdateInput!, where: pdb_sequence_WhereInput): pdb_sequence @mysqlUpdate(table: "pdb_sequence") @source(subgraph: "Rfam", name: "update_pdb_sequence", type: "pdb_sequence")
  delete_pdb_sequence(where: pdb_sequence_WhereInput): Boolean @mysqlDelete(table: "pdb_sequence") @source(subgraph: "Rfam", name: "delete_pdb_sequence", type: "Boolean")
  insert_processed_data(processed_data: processed_data_InsertInput!): processed_data @mysqlInsert(table: "processed_data", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_processed_data", type: "processed_data")
  update_processed_data(processed_data: processed_data_UpdateInput!, where: processed_data_WhereInput): processed_data @mysqlUpdate(table: "processed_data") @source(subgraph: "Rfam", name: "update_processed_data", type: "processed_data")
  delete_processed_data(where: processed_data_WhereInput): Boolean @mysqlDelete(table: "processed_data") @source(subgraph: "Rfam", name: "delete_processed_data", type: "Boolean")
  insert_pseudoknot(pseudoknot: pseudoknot_InsertInput!): pseudoknot @mysqlInsert(table: "pseudoknot", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_pseudoknot", type: "pseudoknot")
  update_pseudoknot(pseudoknot: pseudoknot_UpdateInput!, where: pseudoknot_WhereInput): pseudoknot @mysqlUpdate(table: "pseudoknot") @source(subgraph: "Rfam", name: "update_pseudoknot", type: "pseudoknot")
  delete_pseudoknot(where: pseudoknot_WhereInput): Boolean @mysqlDelete(table: "pseudoknot") @source(subgraph: "Rfam", name: "delete_pseudoknot", type: "Boolean")
  insert_refseq(refseq: refseq_InsertInput!): refseq @mysqlInsert(table: "refseq", primaryKeys: ["refseq_acc"]) @source(subgraph: "Rfam", name: "insert_refseq", type: "refseq")
  update_refseq(refseq: refseq_UpdateInput!, where: refseq_WhereInput): refseq @mysqlUpdate(table: "refseq") @source(subgraph: "Rfam", name: "update_refseq", type: "refseq")
  delete_refseq(where: refseq_WhereInput): Boolean @mysqlDelete(table: "refseq") @source(subgraph: "Rfam", name: "delete_refseq", type: "Boolean")
  insert_refseq_full_region(refseq_full_region: refseq_full_region_InsertInput!): refseq_full_region @mysqlInsert(table: "refseq_full_region", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_refseq_full_region", type: "refseq_full_region")
  update_refseq_full_region(refseq_full_region: refseq_full_region_UpdateInput!, where: refseq_full_region_WhereInput): refseq_full_region @mysqlUpdate(table: "refseq_full_region") @source(subgraph: "Rfam", name: "update_refseq_full_region", type: "refseq_full_region")
  delete_refseq_full_region(where: refseq_full_region_WhereInput): Boolean @mysqlDelete(table: "refseq_full_region") @source(subgraph: "Rfam", name: "delete_refseq_full_region", type: "Boolean")
  insert_rfamseq(rfamseq: rfamseq_InsertInput!): rfamseq @mysqlInsert(table: "rfamseq", primaryKeys: ["rfamseq_acc"]) @source(subgraph: "Rfam", name: "insert_rfamseq", type: "rfamseq")
  update_rfamseq(rfamseq: rfamseq_UpdateInput!, where: rfamseq_WhereInput): rfamseq @mysqlUpdate(table: "rfamseq") @source(subgraph: "Rfam", name: "update_rfamseq", type: "rfamseq")
  delete_rfamseq(where: rfamseq_WhereInput): Boolean @mysqlDelete(table: "rfamseq") @source(subgraph: "Rfam", name: "delete_rfamseq", type: "Boolean")
  insert_rfamseq_temp(rfamseq_temp: rfamseq_temp_InsertInput!): rfamseq_temp @mysqlInsert(table: "rfamseq_temp", primaryKeys: ["rfamseq_acc"]) @source(subgraph: "Rfam", name: "insert_rfamseq_temp", type: "rfamseq_temp")
  update_rfamseq_temp(rfamseq_temp: rfamseq_temp_UpdateInput!, where: rfamseq_temp_WhereInput): rfamseq_temp @mysqlUpdate(table: "rfamseq_temp") @source(subgraph: "Rfam", name: "update_rfamseq_temp", type: "rfamseq_temp")
  delete_rfamseq_temp(where: rfamseq_temp_WhereInput): Boolean @mysqlDelete(table: "rfamseq_temp") @source(subgraph: "Rfam", name: "delete_rfamseq_temp", type: "Boolean")
  insert_rnacentral_matches(rnacentral_matches: rnacentral_matches_InsertInput!): rnacentral_matches @mysqlInsert(table: "rnacentral_matches", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_rnacentral_matches", type: "rnacentral_matches")
  update_rnacentral_matches(rnacentral_matches: rnacentral_matches_UpdateInput!, where: rnacentral_matches_WhereInput): rnacentral_matches @mysqlUpdate(table: "rnacentral_matches") @source(subgraph: "Rfam", name: "update_rnacentral_matches", type: "rnacentral_matches")
  delete_rnacentral_matches(where: rnacentral_matches_WhereInput): Boolean @mysqlDelete(table: "rnacentral_matches") @source(subgraph: "Rfam", name: "delete_rnacentral_matches", type: "Boolean")
  insert_rscape_annotations(rscape_annotations: rscape_annotations_InsertInput!): rscape_annotations @mysqlInsert(table: "rscape_annotations", primaryKeys: ["rfam_acc"]) @source(subgraph: "Rfam", name: "insert_rscape_annotations", type: "rscape_annotations")
  update_rscape_annotations(rscape_annotations: rscape_annotations_UpdateInput!, where: rscape_annotations_WhereInput): rscape_annotations @mysqlUpdate(table: "rscape_annotations") @source(subgraph: "Rfam", name: "update_rscape_annotations", type: "rscape_annotations")
  delete_rscape_annotations(where: rscape_annotations_WhereInput): Boolean @mysqlDelete(table: "rscape_annotations") @source(subgraph: "Rfam", name: "delete_rscape_annotations", type: "Boolean")
  insert_secondary_structure_image(secondary_structure_image: secondary_structure_image_InsertInput!): secondary_structure_image @mysqlInsert(table: "secondary_structure_image", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_secondary_structure_image", type: "secondary_structure_image")
  update_secondary_structure_image(secondary_structure_image: secondary_structure_image_UpdateInput!, where: secondary_structure_image_WhereInput): secondary_structure_image @mysqlUpdate(table: "secondary_structure_image") @source(subgraph: "Rfam", name: "update_secondary_structure_image", type: "secondary_structure_image")
  delete_secondary_structure_image(where: secondary_structure_image_WhereInput): Boolean @mysqlDelete(table: "secondary_structure_image") @source(subgraph: "Rfam", name: "delete_secondary_structure_image", type: "Boolean")
  insert_seed_region(seed_region: seed_region_InsertInput!): seed_region @mysqlInsert(table: "seed_region", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_seed_region", type: "seed_region")
  update_seed_region(seed_region: seed_region_UpdateInput!, where: seed_region_WhereInput): seed_region @mysqlUpdate(table: "seed_region") @source(subgraph: "Rfam", name: "update_seed_region", type: "seed_region")
  delete_seed_region(where: seed_region_WhereInput): Boolean @mysqlDelete(table: "seed_region") @source(subgraph: "Rfam", name: "delete_seed_region", type: "Boolean")
  insert_sunburst(sunburst: sunburst_InsertInput!): sunburst @mysqlInsert(table: "sunburst", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_sunburst", type: "sunburst")
  update_sunburst(sunburst: sunburst_UpdateInput!, where: sunburst_WhereInput): sunburst @mysqlUpdate(table: "sunburst") @source(subgraph: "Rfam", name: "update_sunburst", type: "sunburst")
  delete_sunburst(where: sunburst_WhereInput): Boolean @mysqlDelete(table: "sunburst") @source(subgraph: "Rfam", name: "delete_sunburst", type: "Boolean")
  insert_taxonomic_tree(taxonomic_tree: taxonomic_tree_InsertInput!): taxonomic_tree @mysqlInsert(table: "taxonomic_tree", primaryKeys: ["ncbi_code"]) @source(subgraph: "Rfam", name: "insert_taxonomic_tree", type: "taxonomic_tree")
  update_taxonomic_tree(taxonomic_tree: taxonomic_tree_UpdateInput!, where: taxonomic_tree_WhereInput): taxonomic_tree @mysqlUpdate(table: "taxonomic_tree") @source(subgraph: "Rfam", name: "update_taxonomic_tree", type: "taxonomic_tree")
  delete_taxonomic_tree(where: taxonomic_tree_WhereInput): Boolean @mysqlDelete(table: "taxonomic_tree") @source(subgraph: "Rfam", name: "delete_taxonomic_tree", type: "Boolean")
  insert_taxonomy(taxonomy: taxonomy_InsertInput!): taxonomy @mysqlInsert(table: "taxonomy", primaryKeys: ["ncbi_id"]) @source(subgraph: "Rfam", name: "insert_taxonomy", type: "taxonomy")
  update_taxonomy(taxonomy: taxonomy_UpdateInput!, where: taxonomy_WhereInput): taxonomy @mysqlUpdate(table: "taxonomy") @source(subgraph: "Rfam", name: "update_taxonomy", type: "taxonomy")
  delete_taxonomy(where: taxonomy_WhereInput): Boolean @mysqlDelete(table: "taxonomy") @source(subgraph: "Rfam", name: "delete_taxonomy", type: "Boolean")
  insert_taxonomy_websearch(taxonomy_websearch: taxonomy_websearch_InsertInput!): taxonomy_websearch @mysqlInsert(table: "taxonomy_websearch", primaryKeys: []) @source(subgraph: "Rfam", name: "insert_taxonomy_websearch", type: "taxonomy_websearch")
  update_taxonomy_websearch(taxonomy_websearch: taxonomy_websearch_UpdateInput!, where: taxonomy_websearch_WhereInput): taxonomy_websearch @mysqlUpdate(table: "taxonomy_websearch") @source(subgraph: "Rfam", name: "update_taxonomy_websearch", type: "taxonomy_websearch")
  delete_taxonomy_websearch(where: taxonomy_websearch_WhereInput): Boolean @mysqlDelete(table: "taxonomy_websearch") @source(subgraph: "Rfam", name: "delete_taxonomy_websearch", type: "Boolean")
  insert_version(version: version_InsertInput!): version @mysqlInsert(table: "version", primaryKeys: ["rfam_release"]) @source(subgraph: "Rfam", name: "insert_version", type: "version")
  update_version(version: version_UpdateInput!, where: version_WhereInput): version @mysqlUpdate(table: "version") @source(subgraph: "Rfam", name: "update_version", type: "version")
  delete_version(where: version_WhereInput): Boolean @mysqlDelete(table: "version") @source(subgraph: "Rfam", name: "delete_version", type: "Boolean")
  insert_wikitext(wikitext: wikitext_InsertInput!): wikitext @mysqlInsert(table: "wikitext", primaryKeys: ["auto_wiki"]) @source(subgraph: "Rfam", name: "insert_wikitext", type: "wikitext")
  update_wikitext(wikitext: wikitext_UpdateInput!, where: wikitext_WhereInput): wikitext @mysqlUpdate(table: "wikitext") @source(subgraph: "Rfam", name: "update_wikitext", type: "wikitext")
  delete_wikitext(where: wikitext_WhereInput): Boolean @mysqlDelete(table: "wikitext") @source(subgraph: "Rfam", name: "delete_wikitext", type: "Boolean")
}

input _annotated_file_InsertInput @source(subgraph: "Rfam", name: "_annotated_file_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  seed: String! @source(subgraph: "Rfam", name: "seed", type: "String!")
  cm: String! @source(subgraph: "Rfam", name: "cm", type: "String!")
  full: String @source(subgraph: "Rfam", name: "full", type: "String")
}

input _annotated_file_UpdateInput @source(subgraph: "Rfam", name: "_annotated_file_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  seed: String @source(subgraph: "Rfam", name: "seed", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
  full: String @source(subgraph: "Rfam", name: "full", type: "String")
}

input _family_file_InsertInput @source(subgraph: "Rfam", name: "_family_file_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  seed: String! @source(subgraph: "Rfam", name: "seed", type: "String!")
  cm: String! @source(subgraph: "Rfam", name: "cm", type: "String!")
}

input _family_file_UpdateInput @source(subgraph: "Rfam", name: "_family_file_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  seed: String @source(subgraph: "Rfam", name: "seed", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
}

input _genome_data_InsertInput @source(subgraph: "Rfam", name: "_genome_data_InsertInput") {
  data_file: String! @source(subgraph: "Rfam", name: "data_file", type: "String!")
  author: String! @source(subgraph: "Rfam", name: "author", type: "String!")
  uuid: String! @source(subgraph: "Rfam", name: "uuid", type: "String!")
  status: _genome_data_status! @source(subgraph: "Rfam", name: "status", type: "_genome_data_status!")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  opened: DateTime @source(subgraph: "Rfam", name: "opened", type: "DateTime")
  closed: DateTime @source(subgraph: "Rfam", name: "closed", type: "DateTime")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: Int @source(subgraph: "Rfam", name: "lsf_id", type: "Int")
}

input _genome_data_UpdateInput @source(subgraph: "Rfam", name: "_genome_data_UpdateInput") {
  data_file: String @source(subgraph: "Rfam", name: "data_file", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  uuid: String @source(subgraph: "Rfam", name: "uuid", type: "String")
  status: _genome_data_status @source(subgraph: "Rfam", name: "status", type: "_genome_data_status")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  opened: DateTime @source(subgraph: "Rfam", name: "opened", type: "DateTime")
  closed: DateTime @source(subgraph: "Rfam", name: "closed", type: "DateTime")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: Int @source(subgraph: "Rfam", name: "lsf_id", type: "Int")
}

input _lock_InsertInput @source(subgraph: "Rfam", name: "_lock_InsertInput") {
  locked: Int! @source(subgraph: "Rfam", name: "locked", type: "Int!")
  locker: String! @source(subgraph: "Rfam", name: "locker", type: "String!")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: Int! @source(subgraph: "Rfam", name: "allowCommits", type: "Int!")
  alsoAllow: String @source(subgraph: "Rfam", name: "alsoAllow", type: "String")
}

input _lock_UpdateInput @source(subgraph: "Rfam", name: "_lock_UpdateInput") {
  locked: Int @source(subgraph: "Rfam", name: "locked", type: "Int")
  locker: String @source(subgraph: "Rfam", name: "locker", type: "String")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: Int @source(subgraph: "Rfam", name: "allowCommits", type: "Int")
  alsoAllow: String @source(subgraph: "Rfam", name: "alsoAllow", type: "String")
}

input _overlap_InsertInput @source(subgraph: "Rfam", name: "_overlap_InsertInput") {
  auto_overlap: Int @source(subgraph: "Rfam", name: "auto_overlap", type: "Int")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
}

input _overlap_UpdateInput @source(subgraph: "Rfam", name: "_overlap_UpdateInput") {
  auto_overlap: Int @source(subgraph: "Rfam", name: "auto_overlap", type: "Int")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
}

input _overlap_membership_InsertInput @source(subgraph: "Rfam", name: "_overlap_membership_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  auto_overlap: Int! @source(subgraph: "Rfam", name: "auto_overlap", type: "Int!")
}

input _overlap_membership_UpdateInput @source(subgraph: "Rfam", name: "_overlap_membership_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  auto_overlap: Int @source(subgraph: "Rfam", name: "auto_overlap", type: "Int")
}

input _post_process_InsertInput @source(subgraph: "Rfam", name: "_post_process_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  author: String! @source(subgraph: "Rfam", name: "author", type: "String!")
  uuid: String! @source(subgraph: "Rfam", name: "uuid", type: "String!")
  status: _post_process_status! @source(subgraph: "Rfam", name: "status", type: "_post_process_status!")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  opened: DateTime @source(subgraph: "Rfam", name: "opened", type: "DateTime")
  closed: DateTime @source(subgraph: "Rfam", name: "closed", type: "DateTime")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: Int @source(subgraph: "Rfam", name: "lsf_id", type: "Int")
}

input _post_process_UpdateInput @source(subgraph: "Rfam", name: "_post_process_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  uuid: String @source(subgraph: "Rfam", name: "uuid", type: "String")
  status: _post_process_status @source(subgraph: "Rfam", name: "status", type: "_post_process_status")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  opened: DateTime @source(subgraph: "Rfam", name: "opened", type: "DateTime")
  closed: DateTime @source(subgraph: "Rfam", name: "closed", type: "DateTime")
  message: String @source(subgraph: "Rfam", name: "message", type: "String")
  lsf_id: Int @source(subgraph: "Rfam", name: "lsf_id", type: "Int")
}

input alignment_and_tree_InsertInput @source(subgraph: "Rfam", name: "alignment_and_tree_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  type: alignment_and_tree_type! @source(subgraph: "Rfam", name: "type", type: "alignment_and_tree_type!")
  alignment: String @source(subgraph: "Rfam", name: "alignment", type: "String")
  tree: String @source(subgraph: "Rfam", name: "tree", type: "String")
  treemethod: String @source(subgraph: "Rfam", name: "treemethod", type: "String")
  average_length: Float @source(subgraph: "Rfam", name: "average_length", type: "Float")
  percent_id: Float @source(subgraph: "Rfam", name: "percent_id", type: "Float")
  number_of_sequences: BigInt @source(subgraph: "Rfam", name: "number_of_sequences", type: "BigInt")
}

input alignment_and_tree_UpdateInput @source(subgraph: "Rfam", name: "alignment_and_tree_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  type: alignment_and_tree_type @source(subgraph: "Rfam", name: "type", type: "alignment_and_tree_type")
  alignment: String @source(subgraph: "Rfam", name: "alignment", type: "String")
  tree: String @source(subgraph: "Rfam", name: "tree", type: "String")
  treemethod: String @source(subgraph: "Rfam", name: "treemethod", type: "String")
  average_length: Float @source(subgraph: "Rfam", name: "average_length", type: "Float")
  percent_id: Float @source(subgraph: "Rfam", name: "percent_id", type: "Float")
  number_of_sequences: BigInt @source(subgraph: "Rfam", name: "number_of_sequences", type: "BigInt")
}

input author_InsertInput @source(subgraph: "Rfam", name: "author_InsertInput") {
  author_id: Int @source(subgraph: "Rfam", name: "author_id", type: "Int")
  name: String! @source(subgraph: "Rfam", name: "name", type: "String!")
  last_name: String @source(subgraph: "Rfam", name: "last_name", type: "String")
  initials: String @source(subgraph: "Rfam", name: "initials", type: "String")
  orcid: String @source(subgraph: "Rfam", name: "orcid", type: "String")
  synonyms: String @source(subgraph: "Rfam", name: "synonyms", type: "String")
}

input author_UpdateInput @source(subgraph: "Rfam", name: "author_UpdateInput") {
  author_id: Int @source(subgraph: "Rfam", name: "author_id", type: "Int")
  name: String @source(subgraph: "Rfam", name: "name", type: "String")
  last_name: String @source(subgraph: "Rfam", name: "last_name", type: "String")
  initials: String @source(subgraph: "Rfam", name: "initials", type: "String")
  orcid: String @source(subgraph: "Rfam", name: "orcid", type: "String")
  synonyms: String @source(subgraph: "Rfam", name: "synonyms", type: "String")
}

input clan_InsertInput @source(subgraph: "Rfam", name: "clan_InsertInput") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp! @source(subgraph: "Rfam", name: "updated", type: "Timestamp!")
}

input clan_UpdateInput @source(subgraph: "Rfam", name: "clan_UpdateInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  id: String @source(subgraph: "Rfam", name: "id", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input clan_database_link_InsertInput @source(subgraph: "Rfam", name: "clan_database_link_InsertInput") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  db_id: String! @source(subgraph: "Rfam", name: "db_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String! @source(subgraph: "Rfam", name: "db_link", type: "String!")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input clan_database_link_UpdateInput @source(subgraph: "Rfam", name: "clan_database_link_UpdateInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  db_id: String @source(subgraph: "Rfam", name: "db_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String @source(subgraph: "Rfam", name: "db_link", type: "String")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input clan_literature_reference_InsertInput @source(subgraph: "Rfam", name: "clan_literature_reference_InsertInput") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  pmid: Int! @source(subgraph: "Rfam", name: "pmid", type: "Int!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
}

input clan_literature_reference_UpdateInput @source(subgraph: "Rfam", name: "clan_literature_reference_UpdateInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  pmid: Int @source(subgraph: "Rfam", name: "pmid", type: "Int")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
}

input clan_membership_InsertInput @source(subgraph: "Rfam", name: "clan_membership_InsertInput") {
  clan_acc: String! @source(subgraph: "Rfam", name: "clan_acc", type: "String!")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
}

input clan_membership_UpdateInput @source(subgraph: "Rfam", name: "clan_membership_UpdateInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
}

input database_link_InsertInput @source(subgraph: "Rfam", name: "database_link_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  db_id: String! @source(subgraph: "Rfam", name: "db_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String! @source(subgraph: "Rfam", name: "db_link", type: "String!")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input database_link_UpdateInput @source(subgraph: "Rfam", name: "database_link_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  db_id: String @source(subgraph: "Rfam", name: "db_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String @source(subgraph: "Rfam", name: "db_link", type: "String")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input db_version_InsertInput @source(subgraph: "Rfam", name: "db_version_InsertInput") {
  rfam_release: Float! @source(subgraph: "Rfam", name: "rfam_release", type: "Float!")
  rfam_release_date: DateTime! @source(subgraph: "Rfam", name: "rfam_release_date", type: "DateTime!")
  number_families: Int! @source(subgraph: "Rfam", name: "number_families", type: "Int!")
  embl_release: String! @source(subgraph: "Rfam", name: "embl_release", type: "String!")
  genome_collection_date: DateTime @source(subgraph: "Rfam", name: "genome_collection_date", type: "DateTime")
  refseq_version: Int @source(subgraph: "Rfam", name: "refseq_version", type: "Int")
  pdb_date: DateTime @source(subgraph: "Rfam", name: "pdb_date", type: "DateTime")
  infernal_version: String @source(subgraph: "Rfam", name: "infernal_version", type: "String")
}

input db_version_UpdateInput @source(subgraph: "Rfam", name: "db_version_UpdateInput") {
  rfam_release: Float @source(subgraph: "Rfam", name: "rfam_release", type: "Float")
  rfam_release_date: DateTime @source(subgraph: "Rfam", name: "rfam_release_date", type: "DateTime")
  number_families: Int @source(subgraph: "Rfam", name: "number_families", type: "Int")
  embl_release: String @source(subgraph: "Rfam", name: "embl_release", type: "String")
  genome_collection_date: DateTime @source(subgraph: "Rfam", name: "genome_collection_date", type: "DateTime")
  refseq_version: Int @source(subgraph: "Rfam", name: "refseq_version", type: "Int")
  pdb_date: DateTime @source(subgraph: "Rfam", name: "pdb_date", type: "DateTime")
  infernal_version: String @source(subgraph: "Rfam", name: "infernal_version", type: "String")
}

input dead_clan_InsertInput @source(subgraph: "Rfam", name: "dead_clan_InsertInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  """Added. Add author?"""
  clan_id: String! @source(subgraph: "Rfam", name: "clan_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  user: String! @source(subgraph: "Rfam", name: "user", type: "String!")
}

input dead_clan_UpdateInput @source(subgraph: "Rfam", name: "dead_clan_UpdateInput") {
  clan_acc: String @source(subgraph: "Rfam", name: "clan_acc", type: "String")
  """Added. Add author?"""
  clan_id: String @source(subgraph: "Rfam", name: "clan_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  user: String @source(subgraph: "Rfam", name: "user", type: "String")
}

input dead_family_InsertInput @source(subgraph: "Rfam", name: "dead_family_InsertInput") {
  """record the author???"""
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String! @source(subgraph: "Rfam", name: "rfam_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  """
  wikipedia page title
  
  """
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  user: String! @source(subgraph: "Rfam", name: "user", type: "String!")
}

input dead_family_UpdateInput @source(subgraph: "Rfam", name: "dead_family_UpdateInput") {
  """record the author???"""
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  forward_to: String @source(subgraph: "Rfam", name: "forward_to", type: "String")
  """
  wikipedia page title
  
  """
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  user: String @source(subgraph: "Rfam", name: "user", type: "String")
}

input ensembl_names_InsertInput @source(subgraph: "Rfam", name: "ensembl_names_InsertInput") {
  insdc: String @source(subgraph: "Rfam", name: "insdc", type: "String")
  ensembl: String @source(subgraph: "Rfam", name: "ensembl", type: "String")
}

input ensembl_names_UpdateInput @source(subgraph: "Rfam", name: "ensembl_names_UpdateInput") {
  insdc: String @source(subgraph: "Rfam", name: "insdc", type: "String")
  ensembl: String @source(subgraph: "Rfam", name: "ensembl", type: "String")
}

input family_InsertInput @source(subgraph: "Rfam", name: "family_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfam_id: String! @source(subgraph: "Rfam", name: "rfam_id", type: "String!")
  auto_wiki: Int! @source(subgraph: "Rfam", name: "auto_wiki", type: "Int!")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  cmsearch: String @source(subgraph: "Rfam", name: "cmsearch", type: "String")
  num_seed: BigInt @source(subgraph: "Rfam", name: "num_seed", type: "BigInt")
  num_full: BigInt @source(subgraph: "Rfam", name: "num_full", type: "BigInt")
  num_genome_seq: BigInt @source(subgraph: "Rfam", name: "num_genome_seq", type: "BigInt")
  num_refseq: BigInt @source(subgraph: "Rfam", name: "num_refseq", type: "BigInt")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  structure_source: String @source(subgraph: "Rfam", name: "structure_source", type: "String")
  number_of_species: BigInt @source(subgraph: "Rfam", name: "number_of_species", type: "BigInt")
  number_3d_structures: Int @source(subgraph: "Rfam", name: "number_3d_structures", type: "Int")
  num_pseudonokts: Int @source(subgraph: "Rfam", name: "num_pseudonokts", type: "Int")
  tax_seed: String @source(subgraph: "Rfam", name: "tax_seed", type: "String")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input family_UpdateInput @source(subgraph: "Rfam", name: "family_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  auto_wiki: Int @source(subgraph: "Rfam", name: "auto_wiki", type: "Int")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  previous_id: String @source(subgraph: "Rfam", name: "previous_id", type: "String")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  cmsearch: String @source(subgraph: "Rfam", name: "cmsearch", type: "String")
  num_seed: BigInt @source(subgraph: "Rfam", name: "num_seed", type: "BigInt")
  num_full: BigInt @source(subgraph: "Rfam", name: "num_full", type: "BigInt")
  num_genome_seq: BigInt @source(subgraph: "Rfam", name: "num_genome_seq", type: "BigInt")
  num_refseq: BigInt @source(subgraph: "Rfam", name: "num_refseq", type: "BigInt")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  structure_source: String @source(subgraph: "Rfam", name: "structure_source", type: "String")
  number_of_species: BigInt @source(subgraph: "Rfam", name: "number_of_species", type: "BigInt")
  number_3d_structures: Int @source(subgraph: "Rfam", name: "number_3d_structures", type: "Int")
  num_pseudonokts: Int @source(subgraph: "Rfam", name: "num_pseudonokts", type: "Int")
  tax_seed: String @source(subgraph: "Rfam", name: "tax_seed", type: "String")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input family_author_InsertInput @source(subgraph: "Rfam", name: "family_author_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  author_id: Int! @source(subgraph: "Rfam", name: "author_id", type: "Int!")
  desc_order: Int! @source(subgraph: "Rfam", name: "desc_order", type: "Int!")
}

input family_author_UpdateInput @source(subgraph: "Rfam", name: "family_author_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  author_id: Int @source(subgraph: "Rfam", name: "author_id", type: "Int")
  desc_order: Int @source(subgraph: "Rfam", name: "desc_order", type: "Int")
}

input family_literature_reference_InsertInput @source(subgraph: "Rfam", name: "family_literature_reference_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pmid: Int! @source(subgraph: "Rfam", name: "pmid", type: "Int!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
}

input family_literature_reference_UpdateInput @source(subgraph: "Rfam", name: "family_literature_reference_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pmid: Int @source(subgraph: "Rfam", name: "pmid", type: "Int")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
}

input family_long_InsertInput @source(subgraph: "Rfam", name: "family_long_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  referenece_structure: String @source(subgraph: "Rfam", name: "referenece_structure", type: "String")
  reference_sequence: String @source(subgraph: "Rfam", name: "reference_sequence", type: "String")
}

input family_long_UpdateInput @source(subgraph: "Rfam", name: "family_long_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  referenece_structure: String @source(subgraph: "Rfam", name: "referenece_structure", type: "String")
  reference_sequence: String @source(subgraph: "Rfam", name: "reference_sequence", type: "String")
}

input family_ncbi_InsertInput @source(subgraph: "Rfam", name: "family_ncbi_InsertInput") {
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  """Is this really needed?"""
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
}

input family_ncbi_UpdateInput @source(subgraph: "Rfam", name: "family_ncbi_UpdateInput") {
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  """Is this really needed?"""
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
}

input features_InsertInput @source(subgraph: "Rfam", name: "features_InsertInput") {
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  database_id: String! @source(subgraph: "Rfam", name: "database_id", type: "String!")
  primary_id: String! @source(subgraph: "Rfam", name: "primary_id", type: "String!")
  secondary_id: String @source(subgraph: "Rfam", name: "secondary_id", type: "String")
  feat_orient: Int @source(subgraph: "Rfam", name: "feat_orient", type: "Int")
  feat_start: BigInt @source(subgraph: "Rfam", name: "feat_start", type: "BigInt")
  feat_end: BigInt @source(subgraph: "Rfam", name: "feat_end", type: "BigInt")
  quaternary_id: String @source(subgraph: "Rfam", name: "quaternary_id", type: "String")
}

input features_UpdateInput @source(subgraph: "Rfam", name: "features_UpdateInput") {
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  database_id: String @source(subgraph: "Rfam", name: "database_id", type: "String")
  primary_id: String @source(subgraph: "Rfam", name: "primary_id", type: "String")
  secondary_id: String @source(subgraph: "Rfam", name: "secondary_id", type: "String")
  feat_orient: Int @source(subgraph: "Rfam", name: "feat_orient", type: "Int")
  feat_start: BigInt @source(subgraph: "Rfam", name: "feat_start", type: "BigInt")
  feat_end: BigInt @source(subgraph: "Rfam", name: "feat_end", type: "BigInt")
  quaternary_id: String @source(subgraph: "Rfam", name: "quaternary_id", type: "String")
}

input full_region_InsertInput @source(subgraph: "Rfam", name: "full_region_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  truncated: full_region_truncated! @source(subgraph: "Rfam", name: "truncated", type: "full_region_truncated!")
  type: full_region_type @source(subgraph: "Rfam", name: "type", type: "full_region_type")
  is_significant: Int! @source(subgraph: "Rfam", name: "is_significant", type: "Int!")
}

input full_region_UpdateInput @source(subgraph: "Rfam", name: "full_region_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt @source(subgraph: "Rfam", name: "seq_end", type: "BigInt")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int @source(subgraph: "Rfam", name: "cm_start", type: "Int")
  cm_end: Int @source(subgraph: "Rfam", name: "cm_end", type: "Int")
  truncated: full_region_truncated @source(subgraph: "Rfam", name: "truncated", type: "full_region_truncated")
  type: full_region_type @source(subgraph: "Rfam", name: "type", type: "full_region_type")
  is_significant: Int @source(subgraph: "Rfam", name: "is_significant", type: "Int")
}

input genome_InsertInput @source(subgraph: "Rfam", name: "genome_InsertInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: Int @source(subgraph: "Rfam", name: "assembly_version", type: "Int")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: Int @source(subgraph: "Rfam", name: "wgs_version", type: "Int")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: genome_assembly_level @source(subgraph: "Rfam", name: "assembly_level", type: "genome_assembly_level")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: BigInt @source(subgraph: "Rfam", name: "total_length", type: "BigInt")
  ungapped_length: BigInt @source(subgraph: "Rfam", name: "ungapped_length", type: "BigInt")
  circular: Int @source(subgraph: "Rfam", name: "circular", type: "Int")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: Int @source(subgraph: "Rfam", name: "num_rfam_regions", type: "Int")
  num_families: Int @source(subgraph: "Rfam", name: "num_families", type: "Int")
  is_reference: Int @source(subgraph: "Rfam", name: "is_reference", type: "Int")
  is_representative: Int @source(subgraph: "Rfam", name: "is_representative", type: "Int")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input genome_UpdateInput @source(subgraph: "Rfam", name: "genome_UpdateInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: Int @source(subgraph: "Rfam", name: "assembly_version", type: "Int")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: Int @source(subgraph: "Rfam", name: "wgs_version", type: "Int")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: genome_assembly_level @source(subgraph: "Rfam", name: "assembly_level", type: "genome_assembly_level")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: BigInt @source(subgraph: "Rfam", name: "total_length", type: "BigInt")
  ungapped_length: BigInt @source(subgraph: "Rfam", name: "ungapped_length", type: "BigInt")
  circular: Int @source(subgraph: "Rfam", name: "circular", type: "Int")
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: Int @source(subgraph: "Rfam", name: "num_rfam_regions", type: "Int")
  num_families: Int @source(subgraph: "Rfam", name: "num_families", type: "Int")
  is_reference: Int @source(subgraph: "Rfam", name: "is_reference", type: "Int")
  is_representative: Int @source(subgraph: "Rfam", name: "is_representative", type: "Int")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input genome_temp_InsertInput @source(subgraph: "Rfam", name: "genome_temp_InsertInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: Int @source(subgraph: "Rfam", name: "assembly_version", type: "Int")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: Int @source(subgraph: "Rfam", name: "wgs_version", type: "Int")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: genome_temp_assembly_level @source(subgraph: "Rfam", name: "assembly_level", type: "genome_temp_assembly_level")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: BigInt @source(subgraph: "Rfam", name: "total_length", type: "BigInt")
  ungapped_length: BigInt @source(subgraph: "Rfam", name: "ungapped_length", type: "BigInt")
  circular: Int @source(subgraph: "Rfam", name: "circular", type: "Int")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: Int @source(subgraph: "Rfam", name: "num_rfam_regions", type: "Int")
  num_families: Int @source(subgraph: "Rfam", name: "num_families", type: "Int")
  is_reference: Int @source(subgraph: "Rfam", name: "is_reference", type: "Int")
  is_representative: Int @source(subgraph: "Rfam", name: "is_representative", type: "Int")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input genome_temp_UpdateInput @source(subgraph: "Rfam", name: "genome_temp_UpdateInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  assembly_acc: String @source(subgraph: "Rfam", name: "assembly_acc", type: "String")
  assembly_version: Int @source(subgraph: "Rfam", name: "assembly_version", type: "Int")
  wgs_acc: String @source(subgraph: "Rfam", name: "wgs_acc", type: "String")
  wgs_version: Int @source(subgraph: "Rfam", name: "wgs_version", type: "Int")
  assembly_name: String @source(subgraph: "Rfam", name: "assembly_name", type: "String")
  assembly_level: genome_temp_assembly_level @source(subgraph: "Rfam", name: "assembly_level", type: "genome_temp_assembly_level")
  study_ref: String @source(subgraph: "Rfam", name: "study_ref", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  total_length: BigInt @source(subgraph: "Rfam", name: "total_length", type: "BigInt")
  ungapped_length: BigInt @source(subgraph: "Rfam", name: "ungapped_length", type: "BigInt")
  circular: Int @source(subgraph: "Rfam", name: "circular", type: "Int")
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  scientific_name: String @source(subgraph: "Rfam", name: "scientific_name", type: "String")
  common_name: String @source(subgraph: "Rfam", name: "common_name", type: "String")
  kingdom: String @source(subgraph: "Rfam", name: "kingdom", type: "String")
  num_rfam_regions: Int @source(subgraph: "Rfam", name: "num_rfam_regions", type: "Int")
  num_families: Int @source(subgraph: "Rfam", name: "num_families", type: "Int")
  is_reference: Int @source(subgraph: "Rfam", name: "is_reference", type: "Int")
  is_representative: Int @source(subgraph: "Rfam", name: "is_representative", type: "Int")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input genseq_InsertInput @source(subgraph: "Rfam", name: "genseq_InsertInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input genseq_UpdateInput @source(subgraph: "Rfam", name: "genseq_UpdateInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input genseq_temp_InsertInput @source(subgraph: "Rfam", name: "genseq_temp_InsertInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input genseq_temp_UpdateInput @source(subgraph: "Rfam", name: "genseq_temp_UpdateInput") {
  """This should be """
  upid: String @source(subgraph: "Rfam", name: "upid", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  chromosome_name: String @source(subgraph: "Rfam", name: "chromosome_name", type: "String")
  chromosome_type: String @source(subgraph: "Rfam", name: "chromosome_type", type: "String")
  version: String @source(subgraph: "Rfam", name: "version", type: "String")
}

input html_alignment_InsertInput @source(subgraph: "Rfam", name: "html_alignment_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  type: html_alignment_type! @source(subgraph: "Rfam", name: "type", type: "html_alignment_type!")
  html: String @source(subgraph: "Rfam", name: "html", type: "String")
  block: Int! @source(subgraph: "Rfam", name: "block", type: "Int!")
  html_alignmentscol: String @source(subgraph: "Rfam", name: "html_alignmentscol", type: "String")
}

input html_alignment_UpdateInput @source(subgraph: "Rfam", name: "html_alignment_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  type: html_alignment_type @source(subgraph: "Rfam", name: "type", type: "html_alignment_type")
  html: String @source(subgraph: "Rfam", name: "html", type: "String")
  block: Int @source(subgraph: "Rfam", name: "block", type: "Int")
  html_alignmentscol: String @source(subgraph: "Rfam", name: "html_alignmentscol", type: "String")
}

input keywords_InsertInput @source(subgraph: "Rfam", name: "keywords_InsertInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  rfam_general: String @source(subgraph: "Rfam", name: "rfam_general", type: "String")
  literature: String @source(subgraph: "Rfam", name: "literature", type: "String")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  pdb_mappings: String @source(subgraph: "Rfam", name: "pdb_mappings", type: "String")
  clan_info: String @source(subgraph: "Rfam", name: "clan_info", type: "String")
}

input keywords_UpdateInput @source(subgraph: "Rfam", name: "keywords_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfam_id: String @source(subgraph: "Rfam", name: "rfam_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  rfam_general: String @source(subgraph: "Rfam", name: "rfam_general", type: "String")
  literature: String @source(subgraph: "Rfam", name: "literature", type: "String")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  pdb_mappings: String @source(subgraph: "Rfam", name: "pdb_mappings", type: "String")
  clan_info: String @source(subgraph: "Rfam", name: "clan_info", type: "String")
}

input literature_reference_InsertInput @source(subgraph: "Rfam", name: "literature_reference_InsertInput") {
  pmid: Int @source(subgraph: "Rfam", name: "pmid", type: "Int")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  journal: String @source(subgraph: "Rfam", name: "journal", type: "String")
}

input literature_reference_UpdateInput @source(subgraph: "Rfam", name: "literature_reference_UpdateInput") {
  pmid: Int @source(subgraph: "Rfam", name: "pmid", type: "Int")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  journal: String @source(subgraph: "Rfam", name: "journal", type: "String")
}

input matches_and_fasta_InsertInput @source(subgraph: "Rfam", name: "matches_and_fasta_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  match_list: String @source(subgraph: "Rfam", name: "match_list", type: "String")
  fasta: String @source(subgraph: "Rfam", name: "fasta", type: "String")
  type: matches_and_fasta_type! @source(subgraph: "Rfam", name: "type", type: "matches_and_fasta_type!")
}

input matches_and_fasta_UpdateInput @source(subgraph: "Rfam", name: "matches_and_fasta_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  match_list: String @source(subgraph: "Rfam", name: "match_list", type: "String")
  fasta: String @source(subgraph: "Rfam", name: "fasta", type: "String")
  type: matches_and_fasta_type @source(subgraph: "Rfam", name: "type", type: "matches_and_fasta_type")
}

input motif_InsertInput @source(subgraph: "Rfam", name: "motif_InsertInput") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  num_seed: BigInt @source(subgraph: "Rfam", name: "num_seed", type: "BigInt")
  average_id: Float @source(subgraph: "Rfam", name: "average_id", type: "Float")
  average_sqlen: Float @source(subgraph: "Rfam", name: "average_sqlen", type: "Float")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input motif_UpdateInput @source(subgraph: "Rfam", name: "motif_UpdateInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  num_seed: BigInt @source(subgraph: "Rfam", name: "num_seed", type: "BigInt")
  average_id: Float @source(subgraph: "Rfam", name: "average_id", type: "Float")
  average_sqlen: Float @source(subgraph: "Rfam", name: "average_sqlen", type: "Float")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  wiki: String @source(subgraph: "Rfam", name: "wiki", type: "String")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input motif_database_link_InsertInput @source(subgraph: "Rfam", name: "motif_database_link_InsertInput") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  db_id: String! @source(subgraph: "Rfam", name: "db_id", type: "String!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String! @source(subgraph: "Rfam", name: "db_link", type: "String!")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input motif_database_link_UpdateInput @source(subgraph: "Rfam", name: "motif_database_link_UpdateInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  db_id: String @source(subgraph: "Rfam", name: "db_id", type: "String")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  db_link: String @source(subgraph: "Rfam", name: "db_link", type: "String")
  other_params: String @source(subgraph: "Rfam", name: "other_params", type: "String")
}

input motif_family_stats_InsertInput @source(subgraph: "Rfam", name: "motif_family_stats_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  num_hits: Int @source(subgraph: "Rfam", name: "num_hits", type: "Int")
  frac_hits: Float @source(subgraph: "Rfam", name: "frac_hits", type: "Float")
  sum_bits: Float @source(subgraph: "Rfam", name: "sum_bits", type: "Float")
  avg_weight_bits: Float @source(subgraph: "Rfam", name: "avg_weight_bits", type: "Float")
}

input motif_family_stats_UpdateInput @source(subgraph: "Rfam", name: "motif_family_stats_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  num_hits: Int @source(subgraph: "Rfam", name: "num_hits", type: "Int")
  frac_hits: Float @source(subgraph: "Rfam", name: "frac_hits", type: "Float")
  sum_bits: Float @source(subgraph: "Rfam", name: "sum_bits", type: "Float")
  avg_weight_bits: Float @source(subgraph: "Rfam", name: "avg_weight_bits", type: "Float")
}

input motif_file_InsertInput @source(subgraph: "Rfam", name: "motif_file_InsertInput") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  seed: String! @source(subgraph: "Rfam", name: "seed", type: "String!")
  cm: String! @source(subgraph: "Rfam", name: "cm", type: "String!")
}

input motif_file_UpdateInput @source(subgraph: "Rfam", name: "motif_file_UpdateInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  seed: String @source(subgraph: "Rfam", name: "seed", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
}

input motif_literature_InsertInput @source(subgraph: "Rfam", name: "motif_literature_InsertInput") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  pmid: Int! @source(subgraph: "Rfam", name: "pmid", type: "Int!")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
}

input motif_literature_UpdateInput @source(subgraph: "Rfam", name: "motif_literature_UpdateInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  pmid: Int @source(subgraph: "Rfam", name: "pmid", type: "Int")
  comment: String @source(subgraph: "Rfam", name: "comment", type: "String")
  order_added: Int @source(subgraph: "Rfam", name: "order_added", type: "Int")
}

input motif_matches_InsertInput @source(subgraph: "Rfam", name: "motif_matches_InsertInput") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  rfamseq_start: BigInt @source(subgraph: "Rfam", name: "rfamseq_start", type: "BigInt")
  rfamseq_stop: BigInt @source(subgraph: "Rfam", name: "rfamseq_stop", type: "BigInt")
  query_start: Int @source(subgraph: "Rfam", name: "query_start", type: "Int")
  query_stop: Int @source(subgraph: "Rfam", name: "query_stop", type: "Int")
  motif_start: Int @source(subgraph: "Rfam", name: "motif_start", type: "Int")
  motif_stop: Int @source(subgraph: "Rfam", name: "motif_stop", type: "Int")
  e_value: String @source(subgraph: "Rfam", name: "e_value", type: "String")
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
}

input motif_matches_UpdateInput @source(subgraph: "Rfam", name: "motif_matches_UpdateInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  rfamseq_start: BigInt @source(subgraph: "Rfam", name: "rfamseq_start", type: "BigInt")
  rfamseq_stop: BigInt @source(subgraph: "Rfam", name: "rfamseq_stop", type: "BigInt")
  query_start: Int @source(subgraph: "Rfam", name: "query_start", type: "Int")
  query_stop: Int @source(subgraph: "Rfam", name: "query_stop", type: "Int")
  motif_start: Int @source(subgraph: "Rfam", name: "motif_start", type: "Int")
  motif_stop: Int @source(subgraph: "Rfam", name: "motif_stop", type: "Int")
  e_value: String @source(subgraph: "Rfam", name: "e_value", type: "String")
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
}

input motif_old_InsertInput @source(subgraph: "Rfam", name: "motif_old_InsertInput") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  created: DateTime! @source(subgraph: "Rfam", name: "created", type: "DateTime!")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input motif_old_UpdateInput @source(subgraph: "Rfam", name: "motif_old_UpdateInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  motif_id: String @source(subgraph: "Rfam", name: "motif_id", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
  seed_source: String @source(subgraph: "Rfam", name: "seed_source", type: "String")
  gathering_cutoff: Float @source(subgraph: "Rfam", name: "gathering_cutoff", type: "Float")
  trusted_cutoff: Float @source(subgraph: "Rfam", name: "trusted_cutoff", type: "Float")
  noise_cutoff: Float @source(subgraph: "Rfam", name: "noise_cutoff", type: "Float")
  cmbuild: String @source(subgraph: "Rfam", name: "cmbuild", type: "String")
  cmcalibrate: String @source(subgraph: "Rfam", name: "cmcalibrate", type: "String")
  type: String @source(subgraph: "Rfam", name: "type", type: "String")
  ecmli_lambda: Float @source(subgraph: "Rfam", name: "ecmli_lambda", type: "Float")
  ecmli_mu: Float @source(subgraph: "Rfam", name: "ecmli_mu", type: "Float")
  ecmli_cal_db: Int @source(subgraph: "Rfam", name: "ecmli_cal_db", type: "Int")
  ecmli_cal_hits: Int @source(subgraph: "Rfam", name: "ecmli_cal_hits", type: "Int")
  maxl: Int @source(subgraph: "Rfam", name: "maxl", type: "Int")
  clen: Int @source(subgraph: "Rfam", name: "clen", type: "Int")
  match_pair_node: Int @source(subgraph: "Rfam", name: "match_pair_node", type: "Int")
  hmm_tau: Float @source(subgraph: "Rfam", name: "hmm_tau", type: "Float")
  hmm_lambda: Float @source(subgraph: "Rfam", name: "hmm_lambda", type: "Float")
  created: DateTime @source(subgraph: "Rfam", name: "created", type: "DateTime")
  updated: Timestamp @source(subgraph: "Rfam", name: "updated", type: "Timestamp")
}

input motif_pdb_InsertInput @source(subgraph: "Rfam", name: "motif_pdb_InsertInput") {
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int @source(subgraph: "Rfam", name: "pdb_start", type: "Int")
  pdb_end: Int @source(subgraph: "Rfam", name: "pdb_end", type: "Int")
}

input motif_pdb_UpdateInput @source(subgraph: "Rfam", name: "motif_pdb_UpdateInput") {
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int @source(subgraph: "Rfam", name: "pdb_start", type: "Int")
  pdb_end: Int @source(subgraph: "Rfam", name: "pdb_end", type: "Int")
}

input motif_ss_image_InsertInput @source(subgraph: "Rfam", name: "motif_ss_image_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  motif_acc: String! @source(subgraph: "Rfam", name: "motif_acc", type: "String!")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
}

input motif_ss_image_UpdateInput @source(subgraph: "Rfam", name: "motif_ss_image_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  motif_acc: String @source(subgraph: "Rfam", name: "motif_acc", type: "String")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
}

input pdb_InsertInput @source(subgraph: "Rfam", name: "pdb_InsertInput") {
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  keywords: String @source(subgraph: "Rfam", name: "keywords", type: "String")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  date: String @source(subgraph: "Rfam", name: "date", type: "String")
  resolution: Float @source(subgraph: "Rfam", name: "resolution", type: "Float")
  method: String @source(subgraph: "Rfam", name: "method", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
}

input pdb_UpdateInput @source(subgraph: "Rfam", name: "pdb_UpdateInput") {
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  keywords: String @source(subgraph: "Rfam", name: "keywords", type: "String")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
  date: String @source(subgraph: "Rfam", name: "date", type: "String")
  resolution: Float @source(subgraph: "Rfam", name: "resolution", type: "Float")
  method: String @source(subgraph: "Rfam", name: "method", type: "String")
  author: String @source(subgraph: "Rfam", name: "author", type: "String")
}

input pdb_full_region_InsertInput @source(subgraph: "Rfam", name: "pdb_full_region_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int! @source(subgraph: "Rfam", name: "pdb_start", type: "Int!")
  pdb_end: Int! @source(subgraph: "Rfam", name: "pdb_end", type: "Int!")
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: Int @source(subgraph: "Rfam", name: "is_significant", type: "Int")
}

input pdb_full_region_UpdateInput @source(subgraph: "Rfam", name: "pdb_full_region_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int @source(subgraph: "Rfam", name: "pdb_start", type: "Int")
  pdb_end: Int @source(subgraph: "Rfam", name: "pdb_end", type: "Int")
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int @source(subgraph: "Rfam", name: "cm_start", type: "Int")
  cm_end: Int @source(subgraph: "Rfam", name: "cm_end", type: "Int")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: Int @source(subgraph: "Rfam", name: "is_significant", type: "Int")
}

input pdb_full_region_old_InsertInput @source(subgraph: "Rfam", name: "pdb_full_region_old_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int! @source(subgraph: "Rfam", name: "pdb_start", type: "Int!")
  pdb_end: Int! @source(subgraph: "Rfam", name: "pdb_end", type: "Int!")
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: Int @source(subgraph: "Rfam", name: "is_significant", type: "Int")
}

input pdb_full_region_old_UpdateInput @source(subgraph: "Rfam", name: "pdb_full_region_old_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_start: Int @source(subgraph: "Rfam", name: "pdb_start", type: "Int")
  pdb_end: Int @source(subgraph: "Rfam", name: "pdb_end", type: "Int")
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int @source(subgraph: "Rfam", name: "cm_start", type: "Int")
  cm_end: Int @source(subgraph: "Rfam", name: "cm_end", type: "Int")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
  is_significant: Int @source(subgraph: "Rfam", name: "is_significant", type: "Int")
}

input pdb_rfam_reg_InsertInput @source(subgraph: "Rfam", name: "pdb_rfam_reg_InsertInput") {
  auto_pdb_reg: Int @source(subgraph: "Rfam", name: "auto_pdb_reg", type: "Int")
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pdb_seq: String! @source(subgraph: "Rfam", name: "pdb_seq", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_res_start: Int @source(subgraph: "Rfam", name: "pdb_res_start", type: "Int")
  pdb_res_end: Int @source(subgraph: "Rfam", name: "pdb_res_end", type: "Int")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt @source(subgraph: "Rfam", name: "seq_end", type: "BigInt")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
}

input pdb_rfam_reg_UpdateInput @source(subgraph: "Rfam", name: "pdb_rfam_reg_UpdateInput") {
  auto_pdb_reg: Int @source(subgraph: "Rfam", name: "auto_pdb_reg", type: "Int")
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pdb_seq: String @source(subgraph: "Rfam", name: "pdb_seq", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
  pdb_res_start: Int @source(subgraph: "Rfam", name: "pdb_res_start", type: "Int")
  pdb_res_end: Int @source(subgraph: "Rfam", name: "pdb_res_end", type: "Int")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt @source(subgraph: "Rfam", name: "seq_end", type: "BigInt")
  hex_colour: String @source(subgraph: "Rfam", name: "hex_colour", type: "String")
}

input pdb_sequence_InsertInput @source(subgraph: "Rfam", name: "pdb_sequence_InsertInput") {
  pdb_seq: String! @source(subgraph: "Rfam", name: "pdb_seq", type: "String!")
  pdb_id: String! @source(subgraph: "Rfam", name: "pdb_id", type: "String!")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
}

input pdb_sequence_UpdateInput @source(subgraph: "Rfam", name: "pdb_sequence_UpdateInput") {
  pdb_seq: String @source(subgraph: "Rfam", name: "pdb_seq", type: "String")
  pdb_id: String @source(subgraph: "Rfam", name: "pdb_id", type: "String")
  chain: String @source(subgraph: "Rfam", name: "chain", type: "String")
}

input processed_data_InsertInput @source(subgraph: "Rfam", name: "processed_data_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
  ss_stats_pbp: String @source(subgraph: "Rfam", name: "ss_stats_pbp", type: "String")
  ss_stats_seq: String @source(subgraph: "Rfam", name: "ss_stats_seq", type: "String")
  ss_stats_fam: String @source(subgraph: "Rfam", name: "ss_stats_fam", type: "String")
  scores_graph: String @source(subgraph: "Rfam", name: "scores_graph", type: "String")
  genome_full: String @source(subgraph: "Rfam", name: "genome_full", type: "String")
  genome_full_md5: String @source(subgraph: "Rfam", name: "genome_full_md5", type: "String")
  refseq_full: String @source(subgraph: "Rfam", name: "refseq_full", type: "String")
  refseq_full_md5: String @source(subgraph: "Rfam", name: "refseq_full_md5", type: "String")
}

input processed_data_UpdateInput @source(subgraph: "Rfam", name: "processed_data_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  cm: String @source(subgraph: "Rfam", name: "cm", type: "String")
  ss_stats_pbp: String @source(subgraph: "Rfam", name: "ss_stats_pbp", type: "String")
  ss_stats_seq: String @source(subgraph: "Rfam", name: "ss_stats_seq", type: "String")
  ss_stats_fam: String @source(subgraph: "Rfam", name: "ss_stats_fam", type: "String")
  scores_graph: String @source(subgraph: "Rfam", name: "scores_graph", type: "String")
  genome_full: String @source(subgraph: "Rfam", name: "genome_full", type: "String")
  genome_full_md5: String @source(subgraph: "Rfam", name: "genome_full_md5", type: "String")
  refseq_full: String @source(subgraph: "Rfam", name: "refseq_full", type: "String")
  refseq_full_md5: String @source(subgraph: "Rfam", name: "refseq_full_md5", type: "String")
}

input pseudoknot_InsertInput @source(subgraph: "Rfam", name: "pseudoknot_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  pseudoknot_id: String! @source(subgraph: "Rfam", name: "pseudoknot_id", type: "String!")
  source: pseudoknot_source! @source(subgraph: "Rfam", name: "source", type: "pseudoknot_source!")
  covariation: Int @source(subgraph: "Rfam", name: "covariation", type: "Int")
}

input pseudoknot_UpdateInput @source(subgraph: "Rfam", name: "pseudoknot_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  pseudoknot_id: String @source(subgraph: "Rfam", name: "pseudoknot_id", type: "String")
  source: pseudoknot_source @source(subgraph: "Rfam", name: "source", type: "pseudoknot_source")
  covariation: Int @source(subgraph: "Rfam", name: "covariation", type: "Int")
}

input refseq_InsertInput @source(subgraph: "Rfam", name: "refseq_InsertInput") {
  refseq_acc: String! @source(subgraph: "Rfam", name: "refseq_acc", type: "String!")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  ncbi_taxid: Int @source(subgraph: "Rfam", name: "ncbi_taxid", type: "Int")
}

input refseq_UpdateInput @source(subgraph: "Rfam", name: "refseq_UpdateInput") {
  refseq_acc: String @source(subgraph: "Rfam", name: "refseq_acc", type: "String")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  ncbi_taxid: Int @source(subgraph: "Rfam", name: "ncbi_taxid", type: "Int")
}

input refseq_full_region_InsertInput @source(subgraph: "Rfam", name: "refseq_full_region_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  refseq_acc: String! @source(subgraph: "Rfam", name: "refseq_acc", type: "String!")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int! @source(subgraph: "Rfam", name: "cm_start", type: "Int!")
  cm_end: Int! @source(subgraph: "Rfam", name: "cm_end", type: "Int!")
  truncated: refseq_full_region_truncated! @source(subgraph: "Rfam", name: "truncated", type: "refseq_full_region_truncated!")
}

input refseq_full_region_UpdateInput @source(subgraph: "Rfam", name: "refseq_full_region_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  refseq_acc: String @source(subgraph: "Rfam", name: "refseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt @source(subgraph: "Rfam", name: "seq_end", type: "BigInt")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(subgraph: "Rfam", name: "bit_score", type: "Float")
  evalue_score: String @source(subgraph: "Rfam", name: "evalue_score", type: "String")
  cm_start: Int @source(subgraph: "Rfam", name: "cm_start", type: "Int")
  cm_end: Int @source(subgraph: "Rfam", name: "cm_end", type: "Int")
  truncated: refseq_full_region_truncated @source(subgraph: "Rfam", name: "truncated", type: "refseq_full_region_truncated")
}

input rfamseq_InsertInput @source(subgraph: "Rfam", name: "rfamseq_InsertInput") {
  """This should be """
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  accession: String @source(subgraph: "Rfam", name: "accession", type: "String")
  version: Int! @source(subgraph: "Rfam", name: "version", type: "Int!")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  mol_type: rfamseq_mol_type! @source(subgraph: "Rfam", name: "mol_type", type: "rfamseq_mol_type!")
  length: Int @source(subgraph: "Rfam", name: "length", type: "Int")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String! @source(subgraph: "Rfam", name: "source", type: "String!")
}

input rfamseq_UpdateInput @source(subgraph: "Rfam", name: "rfamseq_UpdateInput") {
  """This should be """
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  accession: String @source(subgraph: "Rfam", name: "accession", type: "String")
  version: Int @source(subgraph: "Rfam", name: "version", type: "Int")
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  mol_type: rfamseq_mol_type @source(subgraph: "Rfam", name: "mol_type", type: "rfamseq_mol_type")
  length: Int @source(subgraph: "Rfam", name: "length", type: "Int")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String @source(subgraph: "Rfam", name: "source", type: "String")
}

input rfamseq_temp_InsertInput @source(subgraph: "Rfam", name: "rfamseq_temp_InsertInput") {
  """This should be """
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  accession: String @source(subgraph: "Rfam", name: "accession", type: "String")
  version: Int! @source(subgraph: "Rfam", name: "version", type: "Int!")
  ncbi_id: Int! @source(subgraph: "Rfam", name: "ncbi_id", type: "Int!")
  mol_type: rfamseq_temp_mol_type! @source(subgraph: "Rfam", name: "mol_type", type: "rfamseq_temp_mol_type!")
  length: Int @source(subgraph: "Rfam", name: "length", type: "Int")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String! @source(subgraph: "Rfam", name: "source", type: "String!")
}

input rfamseq_temp_UpdateInput @source(subgraph: "Rfam", name: "rfamseq_temp_UpdateInput") {
  """This should be """
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  accession: String @source(subgraph: "Rfam", name: "accession", type: "String")
  version: Int @source(subgraph: "Rfam", name: "version", type: "Int")
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  mol_type: rfamseq_temp_mol_type @source(subgraph: "Rfam", name: "mol_type", type: "rfamseq_temp_mol_type")
  length: Int @source(subgraph: "Rfam", name: "length", type: "Int")
  description: String @source(subgraph: "Rfam", name: "description", type: "String")
  previous_acc: String @source(subgraph: "Rfam", name: "previous_acc", type: "String")
  source: String @source(subgraph: "Rfam", name: "source", type: "String")
}

input rnacentral_matches_InsertInput @source(subgraph: "Rfam", name: "rnacentral_matches_InsertInput") {
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  md5: String! @source(subgraph: "Rfam", name: "md5", type: "String!")
  rnacentral_id: String @source(subgraph: "Rfam", name: "rnacentral_id", type: "String")
  type: rnacentral_matches_type @source(subgraph: "Rfam", name: "type", type: "rnacentral_matches_type")
}

input rnacentral_matches_UpdateInput @source(subgraph: "Rfam", name: "rnacentral_matches_UpdateInput") {
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt @source(subgraph: "Rfam", name: "seq_end", type: "BigInt")
  md5: String @source(subgraph: "Rfam", name: "md5", type: "String")
  rnacentral_id: String @source(subgraph: "Rfam", name: "rnacentral_id", type: "String")
  type: rnacentral_matches_type @source(subgraph: "Rfam", name: "type", type: "rnacentral_matches_type")
}

input rscape_annotations_InsertInput @source(subgraph: "Rfam", name: "rscape_annotations_InsertInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  F: Float @source(subgraph: "Rfam", name: "F", type: "Float")
  sensitivity: Float @source(subgraph: "Rfam", name: "sensitivity", type: "Float")
  ppv: Float @source(subgraph: "Rfam", name: "ppv", type: "Float")
  true: Int @source(subgraph: "Rfam", name: "true", type: "Int")
  found: Int @source(subgraph: "Rfam", name: "found", type: "Int")
  tp: Int @source(subgraph: "Rfam", name: "tp", type: "Int")
  avgid: Float @source(subgraph: "Rfam", name: "avgid", type: "Float")
  alen: Int @source(subgraph: "Rfam", name: "alen", type: "Int")
  nseq: Int @source(subgraph: "Rfam", name: "nseq", type: "Int")
}

input rscape_annotations_UpdateInput @source(subgraph: "Rfam", name: "rscape_annotations_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  F: Float @source(subgraph: "Rfam", name: "F", type: "Float")
  sensitivity: Float @source(subgraph: "Rfam", name: "sensitivity", type: "Float")
  ppv: Float @source(subgraph: "Rfam", name: "ppv", type: "Float")
  true: Int @source(subgraph: "Rfam", name: "true", type: "Int")
  found: Int @source(subgraph: "Rfam", name: "found", type: "Int")
  tp: Int @source(subgraph: "Rfam", name: "tp", type: "Int")
  avgid: Float @source(subgraph: "Rfam", name: "avgid", type: "Float")
  alen: Int @source(subgraph: "Rfam", name: "alen", type: "Int")
  nseq: Int @source(subgraph: "Rfam", name: "nseq", type: "Int")
}

input secondary_structure_image_InsertInput @source(subgraph: "Rfam", name: "secondary_structure_image_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  type: secondary_structure_image_type @source(subgraph: "Rfam", name: "type", type: "secondary_structure_image_type")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
}

input secondary_structure_image_UpdateInput @source(subgraph: "Rfam", name: "secondary_structure_image_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  type: secondary_structure_image_type @source(subgraph: "Rfam", name: "type", type: "secondary_structure_image_type")
  image: String @source(subgraph: "Rfam", name: "image", type: "String")
}

input seed_region_InsertInput @source(subgraph: "Rfam", name: "seed_region_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt! @source(subgraph: "Rfam", name: "seq_end", type: "BigInt!")
  md5: String @source(subgraph: "Rfam", name: "md5", type: "String")
}

input seed_region_UpdateInput @source(subgraph: "Rfam", name: "seed_region_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  rfamseq_acc: String @source(subgraph: "Rfam", name: "rfamseq_acc", type: "String")
  seq_start: BigInt @source(subgraph: "Rfam", name: "seq_start", type: "BigInt")
  seq_end: BigInt @source(subgraph: "Rfam", name: "seq_end", type: "BigInt")
  md5: String @source(subgraph: "Rfam", name: "md5", type: "String")
}

input sunburst_InsertInput @source(subgraph: "Rfam", name: "sunburst_InsertInput") {
  rfam_acc: String! @source(subgraph: "Rfam", name: "rfam_acc", type: "String!")
  data: String! @source(subgraph: "Rfam", name: "data", type: "String!")
  type: sunburst_type! @source(subgraph: "Rfam", name: "type", type: "sunburst_type!")
}

input sunburst_UpdateInput @source(subgraph: "Rfam", name: "sunburst_UpdateInput") {
  rfam_acc: String @source(subgraph: "Rfam", name: "rfam_acc", type: "String")
  data: String @source(subgraph: "Rfam", name: "data", type: "String")
  type: sunburst_type @source(subgraph: "Rfam", name: "type", type: "sunburst_type")
}

input taxonomic_tree_InsertInput @source(subgraph: "Rfam", name: "taxonomic_tree_InsertInput") {
  ncbi_code: Int! @source(subgraph: "Rfam", name: "ncbi_code", type: "Int!")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: Int @source(subgraph: "Rfam", name: "lft", type: "Int")
  rgt: Int @source(subgraph: "Rfam", name: "rgt", type: "Int")
  parent: String @source(subgraph: "Rfam", name: "parent", type: "String")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
}

input taxonomic_tree_UpdateInput @source(subgraph: "Rfam", name: "taxonomic_tree_UpdateInput") {
  ncbi_code: Int @source(subgraph: "Rfam", name: "ncbi_code", type: "Int")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: Int @source(subgraph: "Rfam", name: "lft", type: "Int")
  rgt: Int @source(subgraph: "Rfam", name: "rgt", type: "Int")
  parent: String @source(subgraph: "Rfam", name: "parent", type: "String")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
}

input taxonomy_InsertInput @source(subgraph: "Rfam", name: "taxonomy_InsertInput") {
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  tax_string: String @source(subgraph: "Rfam", name: "tax_string", type: "String")
  tree_display_name: String @source(subgraph: "Rfam", name: "tree_display_name", type: "String")
  align_display_name: String @source(subgraph: "Rfam", name: "align_display_name", type: "String")
}

input taxonomy_UpdateInput @source(subgraph: "Rfam", name: "taxonomy_UpdateInput") {
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  tax_string: String @source(subgraph: "Rfam", name: "tax_string", type: "String")
  tree_display_name: String @source(subgraph: "Rfam", name: "tree_display_name", type: "String")
  align_display_name: String @source(subgraph: "Rfam", name: "align_display_name", type: "String")
}

input taxonomy_websearch_InsertInput @source(subgraph: "Rfam", name: "taxonomy_websearch_InsertInput") {
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  rgt: Int @source(subgraph: "Rfam", name: "rgt", type: "Int")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: Int @source(subgraph: "Rfam", name: "lft", type: "Int")
  parent: Int @source(subgraph: "Rfam", name: "parent", type: "Int")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
  minimal: Int @source(subgraph: "Rfam", name: "minimal", type: "Int")
  rank: String @source(subgraph: "Rfam", name: "rank", type: "String")
}

input taxonomy_websearch_UpdateInput @source(subgraph: "Rfam", name: "taxonomy_websearch_UpdateInput") {
  ncbi_id: Int @source(subgraph: "Rfam", name: "ncbi_id", type: "Int")
  species: String @source(subgraph: "Rfam", name: "species", type: "String")
  rgt: Int @source(subgraph: "Rfam", name: "rgt", type: "Int")
  taxonomy: String @source(subgraph: "Rfam", name: "taxonomy", type: "String")
  lft: Int @source(subgraph: "Rfam", name: "lft", type: "Int")
  parent: Int @source(subgraph: "Rfam", name: "parent", type: "Int")
  level: String @source(subgraph: "Rfam", name: "level", type: "String")
  minimal: Int @source(subgraph: "Rfam", name: "minimal", type: "Int")
  rank: String @source(subgraph: "Rfam", name: "rank", type: "String")
}

input version_InsertInput @source(subgraph: "Rfam", name: "version_InsertInput") {
  rfam_release: Float! @source(subgraph: "Rfam", name: "rfam_release", type: "Float!")
  rfam_release_date: Date! @source(subgraph: "Rfam", name: "rfam_release_date", type: "Date!")
  number_families: Int! @source(subgraph: "Rfam", name: "number_families", type: "Int!")
  embl_release: String! @source(subgraph: "Rfam", name: "embl_release", type: "String!")
}

input version_UpdateInput @source(subgraph: "Rfam", name: "version_UpdateInput") {
  rfam_release: Float @source(subgraph: "Rfam", name: "rfam_release", type: "Float")
  rfam_release_date: Date @source(subgraph: "Rfam", name: "rfam_release_date", type: "Date")
  number_families: Int @source(subgraph: "Rfam", name: "number_families", type: "Int")
  embl_release: String @source(subgraph: "Rfam", name: "embl_release", type: "String")
}

input wikitext_InsertInput @source(subgraph: "Rfam", name: "wikitext_InsertInput") {
  auto_wiki: Int @source(subgraph: "Rfam", name: "auto_wiki", type: "Int")
  title: String! @source(subgraph: "Rfam", name: "title", type: "String!")
}

input wikitext_UpdateInput @source(subgraph: "Rfam", name: "wikitext_UpdateInput") {
  auto_wiki: Int @source(subgraph: "Rfam", name: "auto_wiki", type: "Int")
  title: String @source(subgraph: "Rfam", name: "title", type: "String")
}
"
`;

exports[`should execute TestQuery 1`] = `
{
  "data": {
    "alignment_and_tree": [
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Gardner PP",
            "comment": "5S ribosomal RNA (5S rRNA) is a component of the large ribosomal subunit in both prokaryotes and eukaryotes. In eukaryotes, it is synthesised by RNA polymerase III (the other eukaryotic rRNAs are cleaved from a 45S precursor synthesised by RNA polymerase I). In Xenopus oocytes, it has been shown that fingers 4-7 of the nine-zinc finger transcription factor TFIIIA can bind to the central region of 5S RNA. Thus, in addition to positively regulating 5S rRNA transcription, TFIIIA also stabilises 5S rRNA until it is required for transcription.",
            "description": "5S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00001",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Gardner PP",
            "comment": "5S ribosomal RNA (5S rRNA) is a component of the large ribosomal subunit in both prokaryotes and eukaryotes. In eukaryotes, it is synthesised by RNA polymerase III (the other eukaryotic rRNAs are cleaved from a 45S precursor synthesised by RNA polymerase I). In Xenopus oocytes, it has been shown that fingers 4-7 of the nine-zinc finger transcription factor TFIIIA can bind to the central region of 5S RNA. Thus, in addition to positively regulating 5S rRNA transcription, TFIIIA also stabilises 5S rRNA until it is required for transcription.",
            "description": "5S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00001",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W",
            "comment": "5.8S ribosomal RNA (5.8S rRNA) is a component of the large subunit of the eukaryotic ribosome. It is transcribed by RNA polymerase I as part of the 45S precursor that also contains 18S and 28S rRNA. Functionally, it is thought that 5.8S rRNA may be involved in ribosome translocation [2]. It is also known to form covalent linkage to the p53 tumour suppressor protein [3]. 5.8S rRNA is also found in archaea.",
            "description": "5.8S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00002",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W",
            "comment": "5.8S ribosomal RNA (5.8S rRNA) is a component of the large subunit of the eukaryotic ribosome. It is transcribed by RNA polymerase I as part of the 45S precursor that also contains 18S and 28S rRNA. Functionally, it is thought that 5.8S rRNA may be involved in ribosome translocation [2]. It is also known to form covalent linkage to the p53 tumour suppressor protein [3]. 5.8S rRNA is also found in archaea.",
            "description": "5.8S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00002",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Moxon SJ, Ontiveros-Palacios N",
            "comment": "U1 is a small nuclear RNA (snRNA) component of the spliceosome (involved in pre-mRNA splicing). Its 5' end forms complementary base pairs with the 5' splice junction, thus defining the 5' donor site of an intron. There are significant differences in sequence and secondary structure between metazoan and yeast U1 snRNAs, the latter being much longer (568 nucleotides as compared to 164 nucleotides in human). Nevertheless, secondary structure predictions suggest that all U1 snRNAs share a 'common core' consisting of helices I, II, the proximal region of III, and IV [1]. This family does not contain the larger yeast sequences. The structure of U1 spliceosomal RNA has been reported in [5,6]. It present 4 Stem loops (SL1, SL2, SL3, and SL4) and a region call Helix H. SL1, SL2, and SL3 are join for the Helix H, forming a four-helix junction that are separated of SL4. U1 snRNA is important in the precatalytic spliceosome, where the 5' splice site (5'SS) of the pre-mRNA is recognized by pairing with 5'-U1 snRNA. Where spliceosome activation is initiated by a disruption of the 5â€²SSâ€“U1 snRNP interaction by the DEAD-box helicase Prp28 [6]. The structure of U1 small nucleolar RNA was reported in PDB:6QX9",
            "description": "U1 spliceosomal RNA",
            "type": "Gene; snRNA; splicing;",
          },
        ],
        "rfam_acc": "RF00003",
      },
    ],
  },
}
`;
