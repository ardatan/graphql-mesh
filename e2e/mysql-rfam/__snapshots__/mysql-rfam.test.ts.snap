// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @transport(subgraph: "Rfam", kind: "mysql", location: "mysql://rfamro@mysql-rfam-public.ebi.ac.uk:4497/Rfam") {
  query: Query
  mutation: Mutation
}

directive @transport(subgraph: String, kind: String, location: String) on FIELD_DEFINITION

directive @mysqlSelect(table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlInsert(table: String, primaryKeys: [String]) on FIELD_DEFINITION

directive @mysqlUpdate(table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlDelete(table: String) on FIELD_DEFINITION

directive @mysqlTableForeign(columnName: String) on FIELD_DEFINITION

type Query {
  _annotated_file(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _annotated_file_WhereInput @source(name: "where", type: "_annotated_file_WhereInput", subgraph: "Rfam"), orderBy: _annotated_file_OrderByInput @source(name: "orderBy", type: "_annotated_file_OrderByInput", subgraph: "Rfam")): [_annotated_file] @mysqlSelect(table: "_annotated_file") @source(name: "_annotated_file", type: "[_annotated_file]", subgraph: "Rfam")
  count__annotated_file(where: _annotated_file_WhereInput @source(name: "where", type: "_annotated_file_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "_annotated_file") @source(name: "count__annotated_file", type: "Int", subgraph: "Rfam")
  _family_file(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _family_file_WhereInput @source(name: "where", type: "_family_file_WhereInput", subgraph: "Rfam"), orderBy: _family_file_OrderByInput @source(name: "orderBy", type: "_family_file_OrderByInput", subgraph: "Rfam")): [_family_file] @mysqlSelect(table: "_family_file") @source(name: "_family_file", type: "[_family_file]", subgraph: "Rfam")
  count__family_file(where: _family_file_WhereInput @source(name: "where", type: "_family_file_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "_family_file") @source(name: "count__family_file", type: "Int", subgraph: "Rfam")
  _genome_data(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _genome_data_WhereInput @source(name: "where", type: "_genome_data_WhereInput", subgraph: "Rfam"), orderBy: _genome_data_OrderByInput @source(name: "orderBy", type: "_genome_data_OrderByInput", subgraph: "Rfam")): [_genome_data] @mysqlSelect(table: "_genome_data") @source(name: "_genome_data", type: "[_genome_data]", subgraph: "Rfam")
  count__genome_data(where: _genome_data_WhereInput @source(name: "where", type: "_genome_data_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "_genome_data") @source(name: "count__genome_data", type: "Int", subgraph: "Rfam")
  _lock(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _lock_WhereInput @source(name: "where", type: "_lock_WhereInput", subgraph: "Rfam"), orderBy: _lock_OrderByInput @source(name: "orderBy", type: "_lock_OrderByInput", subgraph: "Rfam")): [_lock] @mysqlSelect(table: "_lock") @source(name: "_lock", type: "[_lock]", subgraph: "Rfam")
  count__lock(where: _lock_WhereInput @source(name: "where", type: "_lock_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "_lock") @source(name: "count__lock", type: "Int", subgraph: "Rfam")
  _overlap(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _overlap_WhereInput @source(name: "where", type: "_overlap_WhereInput", subgraph: "Rfam"), orderBy: _overlap_OrderByInput @source(name: "orderBy", type: "_overlap_OrderByInput", subgraph: "Rfam")): [_overlap] @mysqlSelect(table: "_overlap") @source(name: "_overlap", type: "[_overlap]", subgraph: "Rfam")
  count__overlap(where: _overlap_WhereInput @source(name: "where", type: "_overlap_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "_overlap") @source(name: "count__overlap", type: "Int", subgraph: "Rfam")
  _overlap_membership(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _overlap_membership_WhereInput @source(name: "where", type: "_overlap_membership_WhereInput", subgraph: "Rfam"), orderBy: _overlap_membership_OrderByInput @source(name: "orderBy", type: "_overlap_membership_OrderByInput", subgraph: "Rfam")): [_overlap_membership] @mysqlSelect(table: "_overlap_membership") @source(name: "_overlap_membership", type: "[_overlap_membership]", subgraph: "Rfam")
  count__overlap_membership(where: _overlap_membership_WhereInput @source(name: "where", type: "_overlap_membership_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "_overlap_membership") @source(name: "count__overlap_membership", type: "Int", subgraph: "Rfam")
  _post_process(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _post_process_WhereInput @source(name: "where", type: "_post_process_WhereInput", subgraph: "Rfam"), orderBy: _post_process_OrderByInput @source(name: "orderBy", type: "_post_process_OrderByInput", subgraph: "Rfam")): [_post_process] @mysqlSelect(table: "_post_process") @source(name: "_post_process", type: "[_post_process]", subgraph: "Rfam")
  count__post_process(where: _post_process_WhereInput @source(name: "where", type: "_post_process_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "_post_process") @source(name: "count__post_process", type: "Int", subgraph: "Rfam")
  alignment_and_tree(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: alignment_and_tree_WhereInput @source(name: "where", type: "alignment_and_tree_WhereInput", subgraph: "Rfam"), orderBy: alignment_and_tree_OrderByInput @source(name: "orderBy", type: "alignment_and_tree_OrderByInput", subgraph: "Rfam")): [alignment_and_tree] @mysqlSelect(table: "alignment_and_tree") @source(name: "alignment_and_tree", type: "[alignment_and_tree]", subgraph: "Rfam")
  count_alignment_and_tree(where: alignment_and_tree_WhereInput @source(name: "where", type: "alignment_and_tree_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "alignment_and_tree") @source(name: "count_alignment_and_tree", type: "Int", subgraph: "Rfam")
  author(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: author_WhereInput @source(name: "where", type: "author_WhereInput", subgraph: "Rfam"), orderBy: author_OrderByInput @source(name: "orderBy", type: "author_OrderByInput", subgraph: "Rfam")): [author] @mysqlSelect(table: "author") @source(name: "author", type: "[author]", subgraph: "Rfam")
  count_author(where: author_WhereInput @source(name: "where", type: "author_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "author") @source(name: "count_author", type: "Int", subgraph: "Rfam")
  clan(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_WhereInput @source(name: "where", type: "clan_WhereInput", subgraph: "Rfam"), orderBy: clan_OrderByInput @source(name: "orderBy", type: "clan_OrderByInput", subgraph: "Rfam")): [clan] @mysqlSelect(table: "clan") @source(name: "clan", type: "[clan]", subgraph: "Rfam")
  count_clan(where: clan_WhereInput @source(name: "where", type: "clan_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "clan") @source(name: "count_clan", type: "Int", subgraph: "Rfam")
  clan_database_link(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_database_link_WhereInput @source(name: "where", type: "clan_database_link_WhereInput", subgraph: "Rfam"), orderBy: clan_database_link_OrderByInput @source(name: "orderBy", type: "clan_database_link_OrderByInput", subgraph: "Rfam")): [clan_database_link] @mysqlSelect(table: "clan_database_link") @source(name: "clan_database_link", type: "[clan_database_link]", subgraph: "Rfam")
  count_clan_database_link(where: clan_database_link_WhereInput @source(name: "where", type: "clan_database_link_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "clan_database_link") @source(name: "count_clan_database_link", type: "Int", subgraph: "Rfam")
  clan_literature_reference(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_literature_reference_WhereInput @source(name: "where", type: "clan_literature_reference_WhereInput", subgraph: "Rfam"), orderBy: clan_literature_reference_OrderByInput @source(name: "orderBy", type: "clan_literature_reference_OrderByInput", subgraph: "Rfam")): [clan_literature_reference] @mysqlSelect(table: "clan_literature_reference") @source(name: "clan_literature_reference", type: "[clan_literature_reference]", subgraph: "Rfam")
  count_clan_literature_reference(where: clan_literature_reference_WhereInput @source(name: "where", type: "clan_literature_reference_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "clan_literature_reference") @source(name: "count_clan_literature_reference", type: "Int", subgraph: "Rfam")
  clan_membership(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_membership_WhereInput @source(name: "where", type: "clan_membership_WhereInput", subgraph: "Rfam"), orderBy: clan_membership_OrderByInput @source(name: "orderBy", type: "clan_membership_OrderByInput", subgraph: "Rfam")): [clan_membership] @mysqlSelect(table: "clan_membership") @source(name: "clan_membership", type: "[clan_membership]", subgraph: "Rfam")
  count_clan_membership(where: clan_membership_WhereInput @source(name: "where", type: "clan_membership_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "clan_membership") @source(name: "count_clan_membership", type: "Int", subgraph: "Rfam")
  database_link(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: database_link_WhereInput @source(name: "where", type: "database_link_WhereInput", subgraph: "Rfam"), orderBy: database_link_OrderByInput @source(name: "orderBy", type: "database_link_OrderByInput", subgraph: "Rfam")): [database_link] @mysqlSelect(table: "database_link") @source(name: "database_link", type: "[database_link]", subgraph: "Rfam")
  count_database_link(where: database_link_WhereInput @source(name: "where", type: "database_link_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "database_link") @source(name: "count_database_link", type: "Int", subgraph: "Rfam")
  db_version(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: db_version_WhereInput @source(name: "where", type: "db_version_WhereInput", subgraph: "Rfam"), orderBy: db_version_OrderByInput @source(name: "orderBy", type: "db_version_OrderByInput", subgraph: "Rfam")): [db_version] @mysqlSelect(table: "db_version") @source(name: "db_version", type: "[db_version]", subgraph: "Rfam")
  count_db_version(where: db_version_WhereInput @source(name: "where", type: "db_version_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "db_version") @source(name: "count_db_version", type: "Int", subgraph: "Rfam")
  dead_clan(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: dead_clan_WhereInput @source(name: "where", type: "dead_clan_WhereInput", subgraph: "Rfam"), orderBy: dead_clan_OrderByInput @source(name: "orderBy", type: "dead_clan_OrderByInput", subgraph: "Rfam")): [dead_clan] @mysqlSelect(table: "dead_clan") @source(name: "dead_clan", type: "[dead_clan]", subgraph: "Rfam")
  count_dead_clan(where: dead_clan_WhereInput @source(name: "where", type: "dead_clan_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "dead_clan") @source(name: "count_dead_clan", type: "Int", subgraph: "Rfam")
  dead_family(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: dead_family_WhereInput @source(name: "where", type: "dead_family_WhereInput", subgraph: "Rfam"), orderBy: dead_family_OrderByInput @source(name: "orderBy", type: "dead_family_OrderByInput", subgraph: "Rfam")): [dead_family] @mysqlSelect(table: "dead_family") @source(name: "dead_family", type: "[dead_family]", subgraph: "Rfam")
  count_dead_family(where: dead_family_WhereInput @source(name: "where", type: "dead_family_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "dead_family") @source(name: "count_dead_family", type: "Int", subgraph: "Rfam")
  ensembl_names(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: ensembl_names_WhereInput @source(name: "where", type: "ensembl_names_WhereInput", subgraph: "Rfam"), orderBy: ensembl_names_OrderByInput @source(name: "orderBy", type: "ensembl_names_OrderByInput", subgraph: "Rfam")): [ensembl_names] @mysqlSelect(table: "ensembl_names") @source(name: "ensembl_names", type: "[ensembl_names]", subgraph: "Rfam")
  count_ensembl_names(where: ensembl_names_WhereInput @source(name: "where", type: "ensembl_names_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "ensembl_names") @source(name: "count_ensembl_names", type: "Int", subgraph: "Rfam")
  family(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam")): [family] @mysqlSelect(table: "family") @source(name: "family", type: "[family]", subgraph: "Rfam")
  count_family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "family") @source(name: "count_family", type: "Int", subgraph: "Rfam")
  family_author(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_author_WhereInput @source(name: "where", type: "family_author_WhereInput", subgraph: "Rfam"), orderBy: family_author_OrderByInput @source(name: "orderBy", type: "family_author_OrderByInput", subgraph: "Rfam")): [family_author] @mysqlSelect(table: "family_author") @source(name: "family_author", type: "[family_author]", subgraph: "Rfam")
  count_family_author(where: family_author_WhereInput @source(name: "where", type: "family_author_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "family_author") @source(name: "count_family_author", type: "Int", subgraph: "Rfam")
  family_literature_reference(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_literature_reference_WhereInput @source(name: "where", type: "family_literature_reference_WhereInput", subgraph: "Rfam"), orderBy: family_literature_reference_OrderByInput @source(name: "orderBy", type: "family_literature_reference_OrderByInput", subgraph: "Rfam")): [family_literature_reference] @mysqlSelect(table: "family_literature_reference") @source(name: "family_literature_reference", type: "[family_literature_reference]", subgraph: "Rfam")
  count_family_literature_reference(where: family_literature_reference_WhereInput @source(name: "where", type: "family_literature_reference_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "family_literature_reference") @source(name: "count_family_literature_reference", type: "Int", subgraph: "Rfam")
  family_long(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_long_WhereInput @source(name: "where", type: "family_long_WhereInput", subgraph: "Rfam"), orderBy: family_long_OrderByInput @source(name: "orderBy", type: "family_long_OrderByInput", subgraph: "Rfam")): [family_long] @mysqlSelect(table: "family_long") @source(name: "family_long", type: "[family_long]", subgraph: "Rfam")
  count_family_long(where: family_long_WhereInput @source(name: "where", type: "family_long_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "family_long") @source(name: "count_family_long", type: "Int", subgraph: "Rfam")
  family_ncbi(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_ncbi_WhereInput @source(name: "where", type: "family_ncbi_WhereInput", subgraph: "Rfam"), orderBy: family_ncbi_OrderByInput @source(name: "orderBy", type: "family_ncbi_OrderByInput", subgraph: "Rfam")): [family_ncbi] @mysqlSelect(table: "family_ncbi") @source(name: "family_ncbi", type: "[family_ncbi]", subgraph: "Rfam")
  count_family_ncbi(where: family_ncbi_WhereInput @source(name: "where", type: "family_ncbi_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "family_ncbi") @source(name: "count_family_ncbi", type: "Int", subgraph: "Rfam")
  features(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: features_WhereInput @source(name: "where", type: "features_WhereInput", subgraph: "Rfam"), orderBy: features_OrderByInput @source(name: "orderBy", type: "features_OrderByInput", subgraph: "Rfam")): [features] @mysqlSelect(table: "features") @source(name: "features", type: "[features]", subgraph: "Rfam")
  count_features(where: features_WhereInput @source(name: "where", type: "features_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "features") @source(name: "count_features", type: "Int", subgraph: "Rfam")
  full_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: full_region_WhereInput @source(name: "where", type: "full_region_WhereInput", subgraph: "Rfam"), orderBy: full_region_OrderByInput @source(name: "orderBy", type: "full_region_OrderByInput", subgraph: "Rfam")): [full_region] @mysqlSelect(table: "full_region") @source(name: "full_region", type: "[full_region]", subgraph: "Rfam")
  count_full_region(where: full_region_WhereInput @source(name: "where", type: "full_region_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "full_region") @source(name: "count_full_region", type: "Int", subgraph: "Rfam")
  genome(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: genome_WhereInput @source(name: "where", type: "genome_WhereInput", subgraph: "Rfam"), orderBy: genome_OrderByInput @source(name: "orderBy", type: "genome_OrderByInput", subgraph: "Rfam")): [genome] @mysqlSelect(table: "genome") @source(name: "genome", type: "[genome]", subgraph: "Rfam")
  count_genome(where: genome_WhereInput @source(name: "where", type: "genome_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "genome") @source(name: "count_genome", type: "Int", subgraph: "Rfam")
  genome_temp(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: genome_temp_WhereInput @source(name: "where", type: "genome_temp_WhereInput", subgraph: "Rfam"), orderBy: genome_temp_OrderByInput @source(name: "orderBy", type: "genome_temp_OrderByInput", subgraph: "Rfam")): [genome_temp] @mysqlSelect(table: "genome_temp") @source(name: "genome_temp", type: "[genome_temp]", subgraph: "Rfam")
  count_genome_temp(where: genome_temp_WhereInput @source(name: "where", type: "genome_temp_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "genome_temp") @source(name: "count_genome_temp", type: "Int", subgraph: "Rfam")
  genseq(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: genseq_WhereInput @source(name: "where", type: "genseq_WhereInput", subgraph: "Rfam"), orderBy: genseq_OrderByInput @source(name: "orderBy", type: "genseq_OrderByInput", subgraph: "Rfam")): [genseq] @mysqlSelect(table: "genseq") @source(name: "genseq", type: "[genseq]", subgraph: "Rfam")
  count_genseq(where: genseq_WhereInput @source(name: "where", type: "genseq_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "genseq") @source(name: "count_genseq", type: "Int", subgraph: "Rfam")
  genseq_temp(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: genseq_temp_WhereInput @source(name: "where", type: "genseq_temp_WhereInput", subgraph: "Rfam"), orderBy: genseq_temp_OrderByInput @source(name: "orderBy", type: "genseq_temp_OrderByInput", subgraph: "Rfam")): [genseq_temp] @mysqlSelect(table: "genseq_temp") @source(name: "genseq_temp", type: "[genseq_temp]", subgraph: "Rfam")
  count_genseq_temp(where: genseq_temp_WhereInput @source(name: "where", type: "genseq_temp_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "genseq_temp") @source(name: "count_genseq_temp", type: "Int", subgraph: "Rfam")
  html_alignment(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: html_alignment_WhereInput @source(name: "where", type: "html_alignment_WhereInput", subgraph: "Rfam"), orderBy: html_alignment_OrderByInput @source(name: "orderBy", type: "html_alignment_OrderByInput", subgraph: "Rfam")): [html_alignment] @mysqlSelect(table: "html_alignment") @source(name: "html_alignment", type: "[html_alignment]", subgraph: "Rfam")
  count_html_alignment(where: html_alignment_WhereInput @source(name: "where", type: "html_alignment_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "html_alignment") @source(name: "count_html_alignment", type: "Int", subgraph: "Rfam")
  keywords(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: keywords_WhereInput @source(name: "where", type: "keywords_WhereInput", subgraph: "Rfam"), orderBy: keywords_OrderByInput @source(name: "orderBy", type: "keywords_OrderByInput", subgraph: "Rfam")): [keywords] @mysqlSelect(table: "keywords") @source(name: "keywords", type: "[keywords]", subgraph: "Rfam")
  count_keywords(where: keywords_WhereInput @source(name: "where", type: "keywords_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "keywords") @source(name: "count_keywords", type: "Int", subgraph: "Rfam")
  literature_reference(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: literature_reference_WhereInput @source(name: "where", type: "literature_reference_WhereInput", subgraph: "Rfam"), orderBy: literature_reference_OrderByInput @source(name: "orderBy", type: "literature_reference_OrderByInput", subgraph: "Rfam")): [literature_reference] @mysqlSelect(table: "literature_reference") @source(name: "literature_reference", type: "[literature_reference]", subgraph: "Rfam")
  count_literature_reference(where: literature_reference_WhereInput @source(name: "where", type: "literature_reference_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "literature_reference") @source(name: "count_literature_reference", type: "Int", subgraph: "Rfam")
  matches_and_fasta(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: matches_and_fasta_WhereInput @source(name: "where", type: "matches_and_fasta_WhereInput", subgraph: "Rfam"), orderBy: matches_and_fasta_OrderByInput @source(name: "orderBy", type: "matches_and_fasta_OrderByInput", subgraph: "Rfam")): [matches_and_fasta] @mysqlSelect(table: "matches_and_fasta") @source(name: "matches_and_fasta", type: "[matches_and_fasta]", subgraph: "Rfam")
  count_matches_and_fasta(where: matches_and_fasta_WhereInput @source(name: "where", type: "matches_and_fasta_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "matches_and_fasta") @source(name: "count_matches_and_fasta", type: "Int", subgraph: "Rfam")
  motif(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_WhereInput @source(name: "where", type: "motif_WhereInput", subgraph: "Rfam"), orderBy: motif_OrderByInput @source(name: "orderBy", type: "motif_OrderByInput", subgraph: "Rfam")): [motif] @mysqlSelect(table: "motif") @source(name: "motif", type: "[motif]", subgraph: "Rfam")
  count_motif(where: motif_WhereInput @source(name: "where", type: "motif_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif") @source(name: "count_motif", type: "Int", subgraph: "Rfam")
  motif_database_link(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_database_link_WhereInput @source(name: "where", type: "motif_database_link_WhereInput", subgraph: "Rfam"), orderBy: motif_database_link_OrderByInput @source(name: "orderBy", type: "motif_database_link_OrderByInput", subgraph: "Rfam")): [motif_database_link] @mysqlSelect(table: "motif_database_link") @source(name: "motif_database_link", type: "[motif_database_link]", subgraph: "Rfam")
  count_motif_database_link(where: motif_database_link_WhereInput @source(name: "where", type: "motif_database_link_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_database_link") @source(name: "count_motif_database_link", type: "Int", subgraph: "Rfam")
  motif_family_stats(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_family_stats_WhereInput @source(name: "where", type: "motif_family_stats_WhereInput", subgraph: "Rfam"), orderBy: motif_family_stats_OrderByInput @source(name: "orderBy", type: "motif_family_stats_OrderByInput", subgraph: "Rfam")): [motif_family_stats] @mysqlSelect(table: "motif_family_stats") @source(name: "motif_family_stats", type: "[motif_family_stats]", subgraph: "Rfam")
  count_motif_family_stats(where: motif_family_stats_WhereInput @source(name: "where", type: "motif_family_stats_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_family_stats") @source(name: "count_motif_family_stats", type: "Int", subgraph: "Rfam")
  motif_file(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_file_WhereInput @source(name: "where", type: "motif_file_WhereInput", subgraph: "Rfam"), orderBy: motif_file_OrderByInput @source(name: "orderBy", type: "motif_file_OrderByInput", subgraph: "Rfam")): [motif_file] @mysqlSelect(table: "motif_file") @source(name: "motif_file", type: "[motif_file]", subgraph: "Rfam")
  count_motif_file(where: motif_file_WhereInput @source(name: "where", type: "motif_file_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_file") @source(name: "count_motif_file", type: "Int", subgraph: "Rfam")
  motif_literature(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_literature_WhereInput @source(name: "where", type: "motif_literature_WhereInput", subgraph: "Rfam"), orderBy: motif_literature_OrderByInput @source(name: "orderBy", type: "motif_literature_OrderByInput", subgraph: "Rfam")): [motif_literature] @mysqlSelect(table: "motif_literature") @source(name: "motif_literature", type: "[motif_literature]", subgraph: "Rfam")
  count_motif_literature(where: motif_literature_WhereInput @source(name: "where", type: "motif_literature_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_literature") @source(name: "count_motif_literature", type: "Int", subgraph: "Rfam")
  motif_matches(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_matches_WhereInput @source(name: "where", type: "motif_matches_WhereInput", subgraph: "Rfam"), orderBy: motif_matches_OrderByInput @source(name: "orderBy", type: "motif_matches_OrderByInput", subgraph: "Rfam")): [motif_matches] @mysqlSelect(table: "motif_matches") @source(name: "motif_matches", type: "[motif_matches]", subgraph: "Rfam")
  count_motif_matches(where: motif_matches_WhereInput @source(name: "where", type: "motif_matches_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_matches") @source(name: "count_motif_matches", type: "Int", subgraph: "Rfam")
  motif_old(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam"), orderBy: motif_old_OrderByInput @source(name: "orderBy", type: "motif_old_OrderByInput", subgraph: "Rfam")): [motif_old] @mysqlSelect(table: "motif_old") @source(name: "motif_old", type: "[motif_old]", subgraph: "Rfam")
  count_motif_old(where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_old") @source(name: "count_motif_old", type: "Int", subgraph: "Rfam")
  motif_pdb(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_pdb_WhereInput @source(name: "where", type: "motif_pdb_WhereInput", subgraph: "Rfam"), orderBy: motif_pdb_OrderByInput @source(name: "orderBy", type: "motif_pdb_OrderByInput", subgraph: "Rfam")): [motif_pdb] @mysqlSelect(table: "motif_pdb") @source(name: "motif_pdb", type: "[motif_pdb]", subgraph: "Rfam")
  count_motif_pdb(where: motif_pdb_WhereInput @source(name: "where", type: "motif_pdb_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_pdb") @source(name: "count_motif_pdb", type: "Int", subgraph: "Rfam")
  motif_ss_image(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_ss_image_WhereInput @source(name: "where", type: "motif_ss_image_WhereInput", subgraph: "Rfam"), orderBy: motif_ss_image_OrderByInput @source(name: "orderBy", type: "motif_ss_image_OrderByInput", subgraph: "Rfam")): [motif_ss_image] @mysqlSelect(table: "motif_ss_image") @source(name: "motif_ss_image", type: "[motif_ss_image]", subgraph: "Rfam")
  count_motif_ss_image(where: motif_ss_image_WhereInput @source(name: "where", type: "motif_ss_image_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "motif_ss_image") @source(name: "count_motif_ss_image", type: "Int", subgraph: "Rfam")
  pdb(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_WhereInput @source(name: "where", type: "pdb_WhereInput", subgraph: "Rfam"), orderBy: pdb_OrderByInput @source(name: "orderBy", type: "pdb_OrderByInput", subgraph: "Rfam")): [pdb] @mysqlSelect(table: "pdb") @source(name: "pdb", type: "[pdb]", subgraph: "Rfam")
  count_pdb(where: pdb_WhereInput @source(name: "where", type: "pdb_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "pdb") @source(name: "count_pdb", type: "Int", subgraph: "Rfam")
  pdb_full_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_full_region_WhereInput @source(name: "where", type: "pdb_full_region_WhereInput", subgraph: "Rfam"), orderBy: pdb_full_region_OrderByInput @source(name: "orderBy", type: "pdb_full_region_OrderByInput", subgraph: "Rfam")): [pdb_full_region] @mysqlSelect(table: "pdb_full_region") @source(name: "pdb_full_region", type: "[pdb_full_region]", subgraph: "Rfam")
  count_pdb_full_region(where: pdb_full_region_WhereInput @source(name: "where", type: "pdb_full_region_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "pdb_full_region") @source(name: "count_pdb_full_region", type: "Int", subgraph: "Rfam")
  pdb_full_region_old(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_full_region_old_WhereInput @source(name: "where", type: "pdb_full_region_old_WhereInput", subgraph: "Rfam"), orderBy: pdb_full_region_old_OrderByInput @source(name: "orderBy", type: "pdb_full_region_old_OrderByInput", subgraph: "Rfam")): [pdb_full_region_old] @mysqlSelect(table: "pdb_full_region_old") @source(name: "pdb_full_region_old", type: "[pdb_full_region_old]", subgraph: "Rfam")
  count_pdb_full_region_old(where: pdb_full_region_old_WhereInput @source(name: "where", type: "pdb_full_region_old_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "pdb_full_region_old") @source(name: "count_pdb_full_region_old", type: "Int", subgraph: "Rfam")
  pdb_rfam_reg(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam"), orderBy: pdb_rfam_reg_OrderByInput @source(name: "orderBy", type: "pdb_rfam_reg_OrderByInput", subgraph: "Rfam")): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg") @source(name: "pdb_rfam_reg", type: "[pdb_rfam_reg]", subgraph: "Rfam")
  count_pdb_rfam_reg(where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "pdb_rfam_reg") @source(name: "count_pdb_rfam_reg", type: "Int", subgraph: "Rfam")
  pdb_sequence(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_sequence_WhereInput @source(name: "where", type: "pdb_sequence_WhereInput", subgraph: "Rfam"), orderBy: pdb_sequence_OrderByInput @source(name: "orderBy", type: "pdb_sequence_OrderByInput", subgraph: "Rfam")): [pdb_sequence] @mysqlSelect(table: "pdb_sequence") @source(name: "pdb_sequence", type: "[pdb_sequence]", subgraph: "Rfam")
  count_pdb_sequence(where: pdb_sequence_WhereInput @source(name: "where", type: "pdb_sequence_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "pdb_sequence") @source(name: "count_pdb_sequence", type: "Int", subgraph: "Rfam")
  processed_data(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: processed_data_WhereInput @source(name: "where", type: "processed_data_WhereInput", subgraph: "Rfam"), orderBy: processed_data_OrderByInput @source(name: "orderBy", type: "processed_data_OrderByInput", subgraph: "Rfam")): [processed_data] @mysqlSelect(table: "processed_data") @source(name: "processed_data", type: "[processed_data]", subgraph: "Rfam")
  count_processed_data(where: processed_data_WhereInput @source(name: "where", type: "processed_data_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "processed_data") @source(name: "count_processed_data", type: "Int", subgraph: "Rfam")
  pseudoknot(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pseudoknot_WhereInput @source(name: "where", type: "pseudoknot_WhereInput", subgraph: "Rfam"), orderBy: pseudoknot_OrderByInput @source(name: "orderBy", type: "pseudoknot_OrderByInput", subgraph: "Rfam")): [pseudoknot] @mysqlSelect(table: "pseudoknot") @source(name: "pseudoknot", type: "[pseudoknot]", subgraph: "Rfam")
  count_pseudoknot(where: pseudoknot_WhereInput @source(name: "where", type: "pseudoknot_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "pseudoknot") @source(name: "count_pseudoknot", type: "Int", subgraph: "Rfam")
  refseq(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: refseq_WhereInput @source(name: "where", type: "refseq_WhereInput", subgraph: "Rfam"), orderBy: refseq_OrderByInput @source(name: "orderBy", type: "refseq_OrderByInput", subgraph: "Rfam")): [refseq] @mysqlSelect(table: "refseq") @source(name: "refseq", type: "[refseq]", subgraph: "Rfam")
  count_refseq(where: refseq_WhereInput @source(name: "where", type: "refseq_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "refseq") @source(name: "count_refseq", type: "Int", subgraph: "Rfam")
  refseq_full_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: refseq_full_region_WhereInput @source(name: "where", type: "refseq_full_region_WhereInput", subgraph: "Rfam"), orderBy: refseq_full_region_OrderByInput @source(name: "orderBy", type: "refseq_full_region_OrderByInput", subgraph: "Rfam")): [refseq_full_region] @mysqlSelect(table: "refseq_full_region") @source(name: "refseq_full_region", type: "[refseq_full_region]", subgraph: "Rfam")
  count_refseq_full_region(where: refseq_full_region_WhereInput @source(name: "where", type: "refseq_full_region_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "refseq_full_region") @source(name: "count_refseq_full_region", type: "Int", subgraph: "Rfam")
  rfamseq(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_OrderByInput @source(name: "orderBy", type: "rfamseq_OrderByInput", subgraph: "Rfam")): [rfamseq] @mysqlSelect(table: "rfamseq") @source(name: "rfamseq", type: "[rfamseq]", subgraph: "Rfam")
  count_rfamseq(where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "rfamseq") @source(name: "count_rfamseq", type: "Int", subgraph: "Rfam")
  rfamseq_temp(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: rfamseq_temp_WhereInput @source(name: "where", type: "rfamseq_temp_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_temp_OrderByInput @source(name: "orderBy", type: "rfamseq_temp_OrderByInput", subgraph: "Rfam")): [rfamseq_temp] @mysqlSelect(table: "rfamseq_temp") @source(name: "rfamseq_temp", type: "[rfamseq_temp]", subgraph: "Rfam")
  count_rfamseq_temp(where: rfamseq_temp_WhereInput @source(name: "where", type: "rfamseq_temp_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "rfamseq_temp") @source(name: "count_rfamseq_temp", type: "Int", subgraph: "Rfam")
  rnacentral_matches(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: rnacentral_matches_WhereInput @source(name: "where", type: "rnacentral_matches_WhereInput", subgraph: "Rfam"), orderBy: rnacentral_matches_OrderByInput @source(name: "orderBy", type: "rnacentral_matches_OrderByInput", subgraph: "Rfam")): [rnacentral_matches] @mysqlSelect(table: "rnacentral_matches") @source(name: "rnacentral_matches", type: "[rnacentral_matches]", subgraph: "Rfam")
  count_rnacentral_matches(where: rnacentral_matches_WhereInput @source(name: "where", type: "rnacentral_matches_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "rnacentral_matches") @source(name: "count_rnacentral_matches", type: "Int", subgraph: "Rfam")
  rscape_annotations(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: rscape_annotations_WhereInput @source(name: "where", type: "rscape_annotations_WhereInput", subgraph: "Rfam"), orderBy: rscape_annotations_OrderByInput @source(name: "orderBy", type: "rscape_annotations_OrderByInput", subgraph: "Rfam")): [rscape_annotations] @mysqlSelect(table: "rscape_annotations") @source(name: "rscape_annotations", type: "[rscape_annotations]", subgraph: "Rfam")
  count_rscape_annotations(where: rscape_annotations_WhereInput @source(name: "where", type: "rscape_annotations_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "rscape_annotations") @source(name: "count_rscape_annotations", type: "Int", subgraph: "Rfam")
  secondary_structure_image(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: secondary_structure_image_WhereInput @source(name: "where", type: "secondary_structure_image_WhereInput", subgraph: "Rfam"), orderBy: secondary_structure_image_OrderByInput @source(name: "orderBy", type: "secondary_structure_image_OrderByInput", subgraph: "Rfam")): [secondary_structure_image] @mysqlSelect(table: "secondary_structure_image") @source(name: "secondary_structure_image", type: "[secondary_structure_image]", subgraph: "Rfam")
  count_secondary_structure_image(where: secondary_structure_image_WhereInput @source(name: "where", type: "secondary_structure_image_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "secondary_structure_image") @source(name: "count_secondary_structure_image", type: "Int", subgraph: "Rfam")
  seed_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: seed_region_WhereInput @source(name: "where", type: "seed_region_WhereInput", subgraph: "Rfam"), orderBy: seed_region_OrderByInput @source(name: "orderBy", type: "seed_region_OrderByInput", subgraph: "Rfam")): [seed_region] @mysqlSelect(table: "seed_region") @source(name: "seed_region", type: "[seed_region]", subgraph: "Rfam")
  count_seed_region(where: seed_region_WhereInput @source(name: "where", type: "seed_region_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "seed_region") @source(name: "count_seed_region", type: "Int", subgraph: "Rfam")
  sunburst(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: sunburst_WhereInput @source(name: "where", type: "sunburst_WhereInput", subgraph: "Rfam"), orderBy: sunburst_OrderByInput @source(name: "orderBy", type: "sunburst_OrderByInput", subgraph: "Rfam")): [sunburst] @mysqlSelect(table: "sunburst") @source(name: "sunburst", type: "[sunburst]", subgraph: "Rfam")
  count_sunburst(where: sunburst_WhereInput @source(name: "where", type: "sunburst_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "sunburst") @source(name: "count_sunburst", type: "Int", subgraph: "Rfam")
  taxonomic_tree(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: taxonomic_tree_WhereInput @source(name: "where", type: "taxonomic_tree_WhereInput", subgraph: "Rfam"), orderBy: taxonomic_tree_OrderByInput @source(name: "orderBy", type: "taxonomic_tree_OrderByInput", subgraph: "Rfam")): [taxonomic_tree] @mysqlSelect(table: "taxonomic_tree") @source(name: "taxonomic_tree", type: "[taxonomic_tree]", subgraph: "Rfam")
  count_taxonomic_tree(where: taxonomic_tree_WhereInput @source(name: "where", type: "taxonomic_tree_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "taxonomic_tree") @source(name: "count_taxonomic_tree", type: "Int", subgraph: "Rfam")
  taxonomy(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: taxonomy_WhereInput @source(name: "where", type: "taxonomy_WhereInput", subgraph: "Rfam"), orderBy: taxonomy_OrderByInput @source(name: "orderBy", type: "taxonomy_OrderByInput", subgraph: "Rfam")): [taxonomy] @mysqlSelect(table: "taxonomy") @source(name: "taxonomy", type: "[taxonomy]", subgraph: "Rfam")
  count_taxonomy(where: taxonomy_WhereInput @source(name: "where", type: "taxonomy_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "taxonomy") @source(name: "count_taxonomy", type: "Int", subgraph: "Rfam")
  taxonomy_websearch(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: taxonomy_websearch_WhereInput @source(name: "where", type: "taxonomy_websearch_WhereInput", subgraph: "Rfam"), orderBy: taxonomy_websearch_OrderByInput @source(name: "orderBy", type: "taxonomy_websearch_OrderByInput", subgraph: "Rfam")): [taxonomy_websearch] @mysqlSelect(table: "taxonomy_websearch") @source(name: "taxonomy_websearch", type: "[taxonomy_websearch]", subgraph: "Rfam")
  count_taxonomy_websearch(where: taxonomy_websearch_WhereInput @source(name: "where", type: "taxonomy_websearch_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "taxonomy_websearch") @source(name: "count_taxonomy_websearch", type: "Int", subgraph: "Rfam")
  version(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: version_WhereInput @source(name: "where", type: "version_WhereInput", subgraph: "Rfam"), orderBy: version_OrderByInput @source(name: "orderBy", type: "version_OrderByInput", subgraph: "Rfam")): [version] @mysqlSelect(table: "version") @source(name: "version", type: "[version]", subgraph: "Rfam")
  count_version(where: version_WhereInput @source(name: "where", type: "version_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "version") @source(name: "count_version", type: "Int", subgraph: "Rfam")
  wikitext(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: wikitext_WhereInput @source(name: "where", type: "wikitext_WhereInput", subgraph: "Rfam"), orderBy: wikitext_OrderByInput @source(name: "orderBy", type: "wikitext_OrderByInput", subgraph: "Rfam")): [wikitext] @mysqlSelect(table: "wikitext") @source(name: "wikitext", type: "[wikitext]", subgraph: "Rfam")
  count_wikitext(where: wikitext_WhereInput @source(name: "where", type: "wikitext_WhereInput", subgraph: "Rfam")): Int @mysqlCount(table: "wikitext") @source(name: "count_wikitext", type: "Int", subgraph: "Rfam")
}

type _annotated_file @source(name: "_annotated_file", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  seed: String! @source(name: "seed", type: "String!", subgraph: "Rfam")
  cm: String! @source(name: "cm", type: "String!", subgraph: "Rfam")
  full: String @source(name: "full", type: "String", subgraph: "Rfam")
}

input _annotated_file_WhereInput @source(name: "_annotated_file_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  seed: String @source(name: "seed", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
  full: String @source(name: "full", type: "String", subgraph: "Rfam")
}

input _annotated_file_OrderByInput @source(name: "_annotated_file_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  seed: OrderBy @source(name: "seed", type: "OrderBy", subgraph: "Rfam")
  cm: OrderBy @source(name: "cm", type: "OrderBy", subgraph: "Rfam")
  full: OrderBy @source(name: "full", type: "OrderBy", subgraph: "Rfam")
}

enum OrderBy @source(name: "OrderBy", subgraph: "Rfam") {
  asc @source(name: "asc", subgraph: "Rfam")
  desc @source(name: "desc", subgraph: "Rfam")
}

type _family_file @source(name: "_family_file", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  seed: String! @source(name: "seed", type: "String!", subgraph: "Rfam")
  cm: String! @source(name: "cm", type: "String!", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

type family @source(name: "family", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfam_id: String! @source(name: "rfam_id", type: "String!", subgraph: "Rfam")
  auto_wiki: Int! @source(name: "auto_wiki", type: "Int!", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  cmsearch: String @source(name: "cmsearch", type: "String", subgraph: "Rfam")
  num_seed: BigInt @source(name: "num_seed", type: "BigInt", subgraph: "Rfam")
  num_full: BigInt @source(name: "num_full", type: "BigInt", subgraph: "Rfam")
  num_genome_seq: BigInt @source(name: "num_genome_seq", type: "BigInt", subgraph: "Rfam")
  num_refseq: BigInt @source(name: "num_refseq", type: "BigInt", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  structure_source: String @source(name: "structure_source", type: "String", subgraph: "Rfam")
  number_of_species: BigInt @source(name: "number_of_species", type: "BigInt", subgraph: "Rfam")
  number_3d_structures: Int @source(name: "number_3d_structures", type: "Int", subgraph: "Rfam")
  num_pseudonokts: Int @source(name: "num_pseudonokts", type: "Int", subgraph: "Rfam")
  tax_seed: String @source(name: "tax_seed", type: "String", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp! @source(name: "updated", type: "Timestamp!", subgraph: "Rfam")
  _family_file(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _family_file_WhereInput @source(name: "where", type: "_family_file_WhereInput", subgraph: "Rfam"), orderBy: _family_file_OrderByInput @source(name: "orderBy", type: "_family_file_OrderByInput", subgraph: "Rfam")): [_family_file] @mysqlSelect(table: "_family_file", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "_family_file", type: "[_family_file]", subgraph: "Rfam")
  _overlap_membership(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _overlap_membership_WhereInput @source(name: "where", type: "_overlap_membership_WhereInput", subgraph: "Rfam"), orderBy: _overlap_membership_OrderByInput @source(name: "orderBy", type: "_overlap_membership_OrderByInput", subgraph: "Rfam")): [_overlap_membership] @mysqlSelect(table: "_overlap_membership", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "_overlap_membership", type: "[_overlap_membership]", subgraph: "Rfam")
  _post_process(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _post_process_WhereInput @source(name: "where", type: "_post_process_WhereInput", subgraph: "Rfam"), orderBy: _post_process_OrderByInput @source(name: "orderBy", type: "_post_process_OrderByInput", subgraph: "Rfam")): [_post_process] @mysqlSelect(table: "_post_process", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "_post_process", type: "[_post_process]", subgraph: "Rfam")
  alignment_and_tree(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: alignment_and_tree_WhereInput @source(name: "where", type: "alignment_and_tree_WhereInput", subgraph: "Rfam"), orderBy: alignment_and_tree_OrderByInput @source(name: "orderBy", type: "alignment_and_tree_OrderByInput", subgraph: "Rfam")): [alignment_and_tree] @mysqlSelect(table: "alignment_and_tree", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "alignment_and_tree", type: "[alignment_and_tree]", subgraph: "Rfam")
  clan_membership(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_membership_WhereInput @source(name: "where", type: "clan_membership_WhereInput", subgraph: "Rfam"), orderBy: clan_membership_OrderByInput @source(name: "orderBy", type: "clan_membership_OrderByInput", subgraph: "Rfam")): [clan_membership] @mysqlSelect(table: "clan_membership", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "clan_membership", type: "[clan_membership]", subgraph: "Rfam")
  database_link(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: database_link_WhereInput @source(name: "where", type: "database_link_WhereInput", subgraph: "Rfam"), orderBy: database_link_OrderByInput @source(name: "orderBy", type: "database_link_OrderByInput", subgraph: "Rfam")): [database_link] @mysqlSelect(table: "database_link", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "database_link", type: "[database_link]", subgraph: "Rfam")
  wikitext(where: wikitext_WhereInput @source(name: "where", type: "wikitext_WhereInput", subgraph: "Rfam"), orderBy: wikitext_OrderByInput @source(name: "orderBy", type: "wikitext_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [wikitext] @mysqlSelect(table: "wikitext", columnMap: [["auto_wiki", "auto_wiki"]]) @mysqlTableForeign(columnName: "auto_wiki") @source(name: "wikitext", type: "[wikitext]", subgraph: "Rfam")
  family_literature_reference(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_literature_reference_WhereInput @source(name: "where", type: "family_literature_reference_WhereInput", subgraph: "Rfam"), orderBy: family_literature_reference_OrderByInput @source(name: "orderBy", type: "family_literature_reference_OrderByInput", subgraph: "Rfam")): [family_literature_reference] @mysqlSelect(table: "family_literature_reference", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "family_literature_reference", type: "[family_literature_reference]", subgraph: "Rfam")
  family_long(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_long_WhereInput @source(name: "where", type: "family_long_WhereInput", subgraph: "Rfam"), orderBy: family_long_OrderByInput @source(name: "orderBy", type: "family_long_OrderByInput", subgraph: "Rfam")): [family_long] @mysqlSelect(table: "family_long", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "family_long", type: "[family_long]", subgraph: "Rfam")
  family_ncbi(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_ncbi_WhereInput @source(name: "where", type: "family_ncbi_WhereInput", subgraph: "Rfam"), orderBy: family_ncbi_OrderByInput @source(name: "orderBy", type: "family_ncbi_OrderByInput", subgraph: "Rfam")): [family_ncbi] @mysqlSelect(table: "family_ncbi", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "family_ncbi", type: "[family_ncbi]", subgraph: "Rfam")
  full_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: full_region_WhereInput @source(name: "where", type: "full_region_WhereInput", subgraph: "Rfam"), orderBy: full_region_OrderByInput @source(name: "orderBy", type: "full_region_OrderByInput", subgraph: "Rfam")): [full_region] @mysqlSelect(table: "full_region", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "full_region", type: "[full_region]", subgraph: "Rfam")
  html_alignment(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: html_alignment_WhereInput @source(name: "where", type: "html_alignment_WhereInput", subgraph: "Rfam"), orderBy: html_alignment_OrderByInput @source(name: "orderBy", type: "html_alignment_OrderByInput", subgraph: "Rfam")): [html_alignment] @mysqlSelect(table: "html_alignment", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "html_alignment", type: "[html_alignment]", subgraph: "Rfam")
  matches_and_fasta(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: matches_and_fasta_WhereInput @source(name: "where", type: "matches_and_fasta_WhereInput", subgraph: "Rfam"), orderBy: matches_and_fasta_OrderByInput @source(name: "orderBy", type: "matches_and_fasta_OrderByInput", subgraph: "Rfam")): [matches_and_fasta] @mysqlSelect(table: "matches_and_fasta", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "matches_and_fasta", type: "[matches_and_fasta]", subgraph: "Rfam")
  motif_family_stats(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_family_stats_WhereInput @source(name: "where", type: "motif_family_stats_WhereInput", subgraph: "Rfam"), orderBy: motif_family_stats_OrderByInput @source(name: "orderBy", type: "motif_family_stats_OrderByInput", subgraph: "Rfam")): [motif_family_stats] @mysqlSelect(table: "motif_family_stats", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "motif_family_stats", type: "[motif_family_stats]", subgraph: "Rfam")
  motif_matches(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_matches_WhereInput @source(name: "where", type: "motif_matches_WhereInput", subgraph: "Rfam"), orderBy: motif_matches_OrderByInput @source(name: "orderBy", type: "motif_matches_OrderByInput", subgraph: "Rfam")): [motif_matches] @mysqlSelect(table: "motif_matches", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "motif_matches", type: "[motif_matches]", subgraph: "Rfam")
  motif_ss_image(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_ss_image_WhereInput @source(name: "where", type: "motif_ss_image_WhereInput", subgraph: "Rfam"), orderBy: motif_ss_image_OrderByInput @source(name: "orderBy", type: "motif_ss_image_OrderByInput", subgraph: "Rfam")): [motif_ss_image] @mysqlSelect(table: "motif_ss_image", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "motif_ss_image", type: "[motif_ss_image]", subgraph: "Rfam")
  pdb_rfam_reg(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam"), orderBy: pdb_rfam_reg_OrderByInput @source(name: "orderBy", type: "pdb_rfam_reg_OrderByInput", subgraph: "Rfam")): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "pdb_rfam_reg", type: "[pdb_rfam_reg]", subgraph: "Rfam")
  processed_data(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: processed_data_WhereInput @source(name: "where", type: "processed_data_WhereInput", subgraph: "Rfam"), orderBy: processed_data_OrderByInput @source(name: "orderBy", type: "processed_data_OrderByInput", subgraph: "Rfam")): [processed_data] @mysqlSelect(table: "processed_data", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "processed_data", type: "[processed_data]", subgraph: "Rfam")
  pseudoknot(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pseudoknot_WhereInput @source(name: "where", type: "pseudoknot_WhereInput", subgraph: "Rfam"), orderBy: pseudoknot_OrderByInput @source(name: "orderBy", type: "pseudoknot_OrderByInput", subgraph: "Rfam")): [pseudoknot] @mysqlSelect(table: "pseudoknot", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "pseudoknot", type: "[pseudoknot]", subgraph: "Rfam")
  refseq_full_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: refseq_full_region_WhereInput @source(name: "where", type: "refseq_full_region_WhereInput", subgraph: "Rfam"), orderBy: refseq_full_region_OrderByInput @source(name: "orderBy", type: "refseq_full_region_OrderByInput", subgraph: "Rfam")): [refseq_full_region] @mysqlSelect(table: "refseq_full_region", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "refseq_full_region", type: "[refseq_full_region]", subgraph: "Rfam")
  secondary_structure_image(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: secondary_structure_image_WhereInput @source(name: "where", type: "secondary_structure_image_WhereInput", subgraph: "Rfam"), orderBy: secondary_structure_image_OrderByInput @source(name: "orderBy", type: "secondary_structure_image_OrderByInput", subgraph: "Rfam")): [secondary_structure_image] @mysqlSelect(table: "secondary_structure_image", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "secondary_structure_image", type: "[secondary_structure_image]", subgraph: "Rfam")
  seed_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: seed_region_WhereInput @source(name: "where", type: "seed_region_WhereInput", subgraph: "Rfam"), orderBy: seed_region_OrderByInput @source(name: "orderBy", type: "seed_region_OrderByInput", subgraph: "Rfam")): [seed_region] @mysqlSelect(table: "seed_region", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "seed_region", type: "[seed_region]", subgraph: "Rfam")
  sunburst(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: sunburst_WhereInput @source(name: "where", type: "sunburst_WhereInput", subgraph: "Rfam"), orderBy: sunburst_OrderByInput @source(name: "orderBy", type: "sunburst_OrderByInput", subgraph: "Rfam")): [sunburst] @mysqlSelect(table: "sunburst", columnMap: [["rfam_acc", "rfam_acc"]]) @source(name: "sunburst", type: "[sunburst]", subgraph: "Rfam")
}

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @source(name: "BigInt", subgraph: "Rfam") @source(name: "BigInt", subgraph: "Rfam")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime @source(name: "DateTime", subgraph: "Rfam") @source(name: "DateTime", subgraph: "Rfam")

"""
The javascript \`Date\` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp @source(name: "Timestamp", subgraph: "Rfam") @source(name: "Timestamp", subgraph: "Rfam")

input _family_file_WhereInput @source(name: "_family_file_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  seed: String @source(name: "seed", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
}

input _family_file_OrderByInput @source(name: "_family_file_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  seed: OrderBy @source(name: "seed", type: "OrderBy", subgraph: "Rfam")
  cm: OrderBy @source(name: "cm", type: "OrderBy", subgraph: "Rfam")
}

type _overlap_membership @source(name: "_overlap_membership", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  auto_overlap: Int! @source(name: "auto_overlap", type: "Int!", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  _overlap(where: _overlap_WhereInput @source(name: "where", type: "_overlap_WhereInput", subgraph: "Rfam"), orderBy: _overlap_OrderByInput @source(name: "orderBy", type: "_overlap_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [_overlap] @mysqlSelect(table: "_overlap", columnMap: [["auto_overlap", "auto_overlap"]]) @mysqlTableForeign(columnName: "auto_overlap") @source(name: "_overlap", type: "[_overlap]", subgraph: "Rfam")
}

input family_WhereInput @source(name: "family_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  auto_wiki: String @source(name: "auto_wiki", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: String @source(name: "gathering_cutoff", type: "String", subgraph: "Rfam")
  trusted_cutoff: String @source(name: "trusted_cutoff", type: "String", subgraph: "Rfam")
  noise_cutoff: String @source(name: "noise_cutoff", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  cmsearch: String @source(name: "cmsearch", type: "String", subgraph: "Rfam")
  num_seed: String @source(name: "num_seed", type: "String", subgraph: "Rfam")
  num_full: String @source(name: "num_full", type: "String", subgraph: "Rfam")
  num_genome_seq: String @source(name: "num_genome_seq", type: "String", subgraph: "Rfam")
  num_refseq: String @source(name: "num_refseq", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  structure_source: String @source(name: "structure_source", type: "String", subgraph: "Rfam")
  number_of_species: String @source(name: "number_of_species", type: "String", subgraph: "Rfam")
  number_3d_structures: String @source(name: "number_3d_structures", type: "String", subgraph: "Rfam")
  num_pseudonokts: String @source(name: "num_pseudonokts", type: "String", subgraph: "Rfam")
  tax_seed: String @source(name: "tax_seed", type: "String", subgraph: "Rfam")
  ecmli_lambda: String @source(name: "ecmli_lambda", type: "String", subgraph: "Rfam")
  ecmli_mu: String @source(name: "ecmli_mu", type: "String", subgraph: "Rfam")
  ecmli_cal_db: String @source(name: "ecmli_cal_db", type: "String", subgraph: "Rfam")
  ecmli_cal_hits: String @source(name: "ecmli_cal_hits", type: "String", subgraph: "Rfam")
  maxl: String @source(name: "maxl", type: "String", subgraph: "Rfam")
  clen: String @source(name: "clen", type: "String", subgraph: "Rfam")
  match_pair_node: String @source(name: "match_pair_node", type: "String", subgraph: "Rfam")
  hmm_tau: String @source(name: "hmm_tau", type: "String", subgraph: "Rfam")
  hmm_lambda: String @source(name: "hmm_lambda", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  updated: String @source(name: "updated", type: "String", subgraph: "Rfam")
}

input family_OrderByInput @source(name: "family_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  rfam_id: OrderBy @source(name: "rfam_id", type: "OrderBy", subgraph: "Rfam")
  auto_wiki: OrderBy @source(name: "auto_wiki", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  seed_source: OrderBy @source(name: "seed_source", type: "OrderBy", subgraph: "Rfam")
  gathering_cutoff: OrderBy @source(name: "gathering_cutoff", type: "OrderBy", subgraph: "Rfam")
  trusted_cutoff: OrderBy @source(name: "trusted_cutoff", type: "OrderBy", subgraph: "Rfam")
  noise_cutoff: OrderBy @source(name: "noise_cutoff", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  previous_id: OrderBy @source(name: "previous_id", type: "OrderBy", subgraph: "Rfam")
  cmbuild: OrderBy @source(name: "cmbuild", type: "OrderBy", subgraph: "Rfam")
  cmcalibrate: OrderBy @source(name: "cmcalibrate", type: "OrderBy", subgraph: "Rfam")
  cmsearch: OrderBy @source(name: "cmsearch", type: "OrderBy", subgraph: "Rfam")
  num_seed: OrderBy @source(name: "num_seed", type: "OrderBy", subgraph: "Rfam")
  num_full: OrderBy @source(name: "num_full", type: "OrderBy", subgraph: "Rfam")
  num_genome_seq: OrderBy @source(name: "num_genome_seq", type: "OrderBy", subgraph: "Rfam")
  num_refseq: OrderBy @source(name: "num_refseq", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
  structure_source: OrderBy @source(name: "structure_source", type: "OrderBy", subgraph: "Rfam")
  number_of_species: OrderBy @source(name: "number_of_species", type: "OrderBy", subgraph: "Rfam")
  number_3d_structures: OrderBy @source(name: "number_3d_structures", type: "OrderBy", subgraph: "Rfam")
  num_pseudonokts: OrderBy @source(name: "num_pseudonokts", type: "OrderBy", subgraph: "Rfam")
  tax_seed: OrderBy @source(name: "tax_seed", type: "OrderBy", subgraph: "Rfam")
  ecmli_lambda: OrderBy @source(name: "ecmli_lambda", type: "OrderBy", subgraph: "Rfam")
  ecmli_mu: OrderBy @source(name: "ecmli_mu", type: "OrderBy", subgraph: "Rfam")
  ecmli_cal_db: OrderBy @source(name: "ecmli_cal_db", type: "OrderBy", subgraph: "Rfam")
  ecmli_cal_hits: OrderBy @source(name: "ecmli_cal_hits", type: "OrderBy", subgraph: "Rfam")
  maxl: OrderBy @source(name: "maxl", type: "OrderBy", subgraph: "Rfam")
  clen: OrderBy @source(name: "clen", type: "OrderBy", subgraph: "Rfam")
  match_pair_node: OrderBy @source(name: "match_pair_node", type: "OrderBy", subgraph: "Rfam")
  hmm_tau: OrderBy @source(name: "hmm_tau", type: "OrderBy", subgraph: "Rfam")
  hmm_lambda: OrderBy @source(name: "hmm_lambda", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  updated: OrderBy @source(name: "updated", type: "OrderBy", subgraph: "Rfam")
}

type _overlap @source(name: "_overlap", subgraph: "Rfam") {
  auto_overlap: Int! @source(name: "auto_overlap", type: "Int!", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  _overlap_membership(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: _overlap_membership_WhereInput @source(name: "where", type: "_overlap_membership_WhereInput", subgraph: "Rfam"), orderBy: _overlap_membership_OrderByInput @source(name: "orderBy", type: "_overlap_membership_OrderByInput", subgraph: "Rfam")): [_overlap_membership] @mysqlSelect(table: "_overlap_membership", columnMap: [["auto_overlap", "auto_overlap"]]) @source(name: "_overlap_membership", type: "[_overlap_membership]", subgraph: "Rfam")
}

input _overlap_membership_WhereInput @source(name: "_overlap_membership_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  auto_overlap: String @source(name: "auto_overlap", type: "String", subgraph: "Rfam")
}

input _overlap_membership_OrderByInput @source(name: "_overlap_membership_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  auto_overlap: OrderBy @source(name: "auto_overlap", type: "OrderBy", subgraph: "Rfam")
}

input _overlap_WhereInput @source(name: "_overlap_WhereInput", subgraph: "Rfam") {
  auto_overlap: String @source(name: "auto_overlap", type: "String", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
}

input _overlap_OrderByInput @source(name: "_overlap_OrderByInput", subgraph: "Rfam") {
  auto_overlap: OrderBy @source(name: "auto_overlap", type: "OrderBy", subgraph: "Rfam")
  id: OrderBy @source(name: "id", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
}

type _post_process @source(name: "_post_process", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  author: String! @source(name: "author", type: "String!", subgraph: "Rfam")
  uuid: String! @source(name: "uuid", type: "String!", subgraph: "Rfam")
  status: _post_process_status! @source(name: "status", type: "_post_process_status!", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  opened: DateTime @source(name: "opened", type: "DateTime", subgraph: "Rfam")
  closed: DateTime @source(name: "closed", type: "DateTime", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: Int @source(name: "lsf_id", type: "Int", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

enum _post_process_status @source(name: "_post_process_status", subgraph: "Rfam") {
  DONE @source(name: "DONE", subgraph: "Rfam")
  PEND @source(name: "PEND", subgraph: "Rfam")
  RUN @source(name: "RUN", subgraph: "Rfam")
  FAIL @source(name: "FAIL", subgraph: "Rfam")
  KILL @source(name: "KILL", subgraph: "Rfam")
}

input _post_process_WhereInput @source(name: "_post_process_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  uuid: String @source(name: "uuid", type: "String", subgraph: "Rfam")
  status: String @source(name: "status", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  opened: String @source(name: "opened", type: "String", subgraph: "Rfam")
  closed: String @source(name: "closed", type: "String", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: String @source(name: "lsf_id", type: "String", subgraph: "Rfam")
}

input _post_process_OrderByInput @source(name: "_post_process_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  uuid: OrderBy @source(name: "uuid", type: "OrderBy", subgraph: "Rfam")
  status: OrderBy @source(name: "status", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  opened: OrderBy @source(name: "opened", type: "OrderBy", subgraph: "Rfam")
  closed: OrderBy @source(name: "closed", type: "OrderBy", subgraph: "Rfam")
  message: OrderBy @source(name: "message", type: "OrderBy", subgraph: "Rfam")
  lsf_id: OrderBy @source(name: "lsf_id", type: "OrderBy", subgraph: "Rfam")
}

type alignment_and_tree @source(name: "alignment_and_tree", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  type: alignment_and_tree_type! @source(name: "type", type: "alignment_and_tree_type!", subgraph: "Rfam")
  alignment: String @source(name: "alignment", type: "String", subgraph: "Rfam")
  tree: String @source(name: "tree", type: "String", subgraph: "Rfam")
  treemethod: String @source(name: "treemethod", type: "String", subgraph: "Rfam")
  average_length: Float @source(name: "average_length", type: "Float", subgraph: "Rfam")
  percent_id: Float @source(name: "percent_id", type: "Float", subgraph: "Rfam")
  number_of_sequences: BigInt @source(name: "number_of_sequences", type: "BigInt", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

enum alignment_and_tree_type @source(name: "alignment_and_tree_type", subgraph: "Rfam") {
  seed @source(name: "seed", subgraph: "Rfam")
  seedTax @source(name: "seedTax", subgraph: "Rfam")
  genome @source(name: "genome", subgraph: "Rfam")
  genomeTax @source(name: "genomeTax", subgraph: "Rfam")
}

input alignment_and_tree_WhereInput @source(name: "alignment_and_tree_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  alignment: String @source(name: "alignment", type: "String", subgraph: "Rfam")
  tree: String @source(name: "tree", type: "String", subgraph: "Rfam")
  treemethod: String @source(name: "treemethod", type: "String", subgraph: "Rfam")
  average_length: String @source(name: "average_length", type: "String", subgraph: "Rfam")
  percent_id: String @source(name: "percent_id", type: "String", subgraph: "Rfam")
  number_of_sequences: String @source(name: "number_of_sequences", type: "String", subgraph: "Rfam")
}

input alignment_and_tree_OrderByInput @source(name: "alignment_and_tree_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
  alignment: OrderBy @source(name: "alignment", type: "OrderBy", subgraph: "Rfam")
  tree: OrderBy @source(name: "tree", type: "OrderBy", subgraph: "Rfam")
  treemethod: OrderBy @source(name: "treemethod", type: "OrderBy", subgraph: "Rfam")
  average_length: OrderBy @source(name: "average_length", type: "OrderBy", subgraph: "Rfam")
  percent_id: OrderBy @source(name: "percent_id", type: "OrderBy", subgraph: "Rfam")
  number_of_sequences: OrderBy @source(name: "number_of_sequences", type: "OrderBy", subgraph: "Rfam")
}

type clan_membership @source(name: "clan_membership", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  clan(where: clan_WhereInput @source(name: "where", type: "clan_WhereInput", subgraph: "Rfam"), orderBy: clan_OrderByInput @source(name: "orderBy", type: "clan_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [clan] @mysqlSelect(table: "clan", columnMap: [["clan_acc", "clan_acc"]]) @mysqlTableForeign(columnName: "clan_acc") @source(name: "clan", type: "[clan]", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

type clan @source(name: "clan", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp! @source(name: "updated", type: "Timestamp!", subgraph: "Rfam")
  clan_database_link(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_database_link_WhereInput @source(name: "where", type: "clan_database_link_WhereInput", subgraph: "Rfam"), orderBy: clan_database_link_OrderByInput @source(name: "orderBy", type: "clan_database_link_OrderByInput", subgraph: "Rfam")): [clan_database_link] @mysqlSelect(table: "clan_database_link", columnMap: [["clan_acc", "clan_acc"]]) @source(name: "clan_database_link", type: "[clan_database_link]", subgraph: "Rfam")
  clan_literature_reference(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_literature_reference_WhereInput @source(name: "where", type: "clan_literature_reference_WhereInput", subgraph: "Rfam"), orderBy: clan_literature_reference_OrderByInput @source(name: "orderBy", type: "clan_literature_reference_OrderByInput", subgraph: "Rfam")): [clan_literature_reference] @mysqlSelect(table: "clan_literature_reference", columnMap: [["clan_acc", "clan_acc"]]) @source(name: "clan_literature_reference", type: "[clan_literature_reference]", subgraph: "Rfam")
  clan_membership(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_membership_WhereInput @source(name: "where", type: "clan_membership_WhereInput", subgraph: "Rfam"), orderBy: clan_membership_OrderByInput @source(name: "orderBy", type: "clan_membership_OrderByInput", subgraph: "Rfam")): [clan_membership] @mysqlSelect(table: "clan_membership", columnMap: [["clan_acc", "clan_acc"]]) @source(name: "clan_membership", type: "[clan_membership]", subgraph: "Rfam")
}

type clan_database_link @source(name: "clan_database_link", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  db_id: String! @source(name: "db_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String! @source(name: "db_link", type: "String!", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
  clan(where: clan_WhereInput @source(name: "where", type: "clan_WhereInput", subgraph: "Rfam"), orderBy: clan_OrderByInput @source(name: "orderBy", type: "clan_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [clan] @mysqlSelect(table: "clan", columnMap: [["clan_acc", "clan_acc"]]) @mysqlTableForeign(columnName: "clan_acc") @source(name: "clan", type: "[clan]", subgraph: "Rfam")
}

input clan_WhereInput @source(name: "clan_WhereInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  updated: String @source(name: "updated", type: "String", subgraph: "Rfam")
}

input clan_OrderByInput @source(name: "clan_OrderByInput", subgraph: "Rfam") {
  clan_acc: OrderBy @source(name: "clan_acc", type: "OrderBy", subgraph: "Rfam")
  id: OrderBy @source(name: "id", type: "OrderBy", subgraph: "Rfam")
  previous_id: OrderBy @source(name: "previous_id", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  updated: OrderBy @source(name: "updated", type: "OrderBy", subgraph: "Rfam")
}

input clan_database_link_WhereInput @source(name: "clan_database_link_WhereInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  db_id: String @source(name: "db_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String @source(name: "db_link", type: "String", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input clan_database_link_OrderByInput @source(name: "clan_database_link_OrderByInput", subgraph: "Rfam") {
  clan_acc: OrderBy @source(name: "clan_acc", type: "OrderBy", subgraph: "Rfam")
  db_id: OrderBy @source(name: "db_id", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  db_link: OrderBy @source(name: "db_link", type: "OrderBy", subgraph: "Rfam")
  other_params: OrderBy @source(name: "other_params", type: "OrderBy", subgraph: "Rfam")
}

type clan_literature_reference @source(name: "clan_literature_reference", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  pmid: Int! @source(name: "pmid", type: "Int!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
  clan(where: clan_WhereInput @source(name: "where", type: "clan_WhereInput", subgraph: "Rfam"), orderBy: clan_OrderByInput @source(name: "orderBy", type: "clan_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [clan] @mysqlSelect(table: "clan", columnMap: [["clan_acc", "clan_acc"]]) @mysqlTableForeign(columnName: "clan_acc") @source(name: "clan", type: "[clan]", subgraph: "Rfam")
  literature_reference(where: literature_reference_WhereInput @source(name: "where", type: "literature_reference_WhereInput", subgraph: "Rfam"), orderBy: literature_reference_OrderByInput @source(name: "orderBy", type: "literature_reference_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [literature_reference] @mysqlSelect(table: "literature_reference", columnMap: [["pmid", "pmid"]]) @mysqlTableForeign(columnName: "pmid") @source(name: "literature_reference", type: "[literature_reference]", subgraph: "Rfam")
}

type literature_reference @source(name: "literature_reference", subgraph: "Rfam") {
  pmid: Int! @source(name: "pmid", type: "Int!", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  journal: String @source(name: "journal", type: "String", subgraph: "Rfam")
  clan_literature_reference(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: clan_literature_reference_WhereInput @source(name: "where", type: "clan_literature_reference_WhereInput", subgraph: "Rfam"), orderBy: clan_literature_reference_OrderByInput @source(name: "orderBy", type: "clan_literature_reference_OrderByInput", subgraph: "Rfam")): [clan_literature_reference] @mysqlSelect(table: "clan_literature_reference", columnMap: [["pmid", "pmid"]]) @source(name: "clan_literature_reference", type: "[clan_literature_reference]", subgraph: "Rfam")
  family_literature_reference(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_literature_reference_WhereInput @source(name: "where", type: "family_literature_reference_WhereInput", subgraph: "Rfam"), orderBy: family_literature_reference_OrderByInput @source(name: "orderBy", type: "family_literature_reference_OrderByInput", subgraph: "Rfam")): [family_literature_reference] @mysqlSelect(table: "family_literature_reference", columnMap: [["pmid", "pmid"]]) @source(name: "family_literature_reference", type: "[family_literature_reference]", subgraph: "Rfam")
  motif_literature(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_literature_WhereInput @source(name: "where", type: "motif_literature_WhereInput", subgraph: "Rfam"), orderBy: motif_literature_OrderByInput @source(name: "orderBy", type: "motif_literature_OrderByInput", subgraph: "Rfam")): [motif_literature] @mysqlSelect(table: "motif_literature", columnMap: [["pmid", "pmid"]]) @source(name: "motif_literature", type: "[motif_literature]", subgraph: "Rfam")
}

input clan_literature_reference_WhereInput @source(name: "clan_literature_reference_WhereInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  pmid: String @source(name: "pmid", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: String @source(name: "order_added", type: "String", subgraph: "Rfam")
}

input clan_literature_reference_OrderByInput @source(name: "clan_literature_reference_OrderByInput", subgraph: "Rfam") {
  clan_acc: OrderBy @source(name: "clan_acc", type: "OrderBy", subgraph: "Rfam")
  pmid: OrderBy @source(name: "pmid", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  order_added: OrderBy @source(name: "order_added", type: "OrderBy", subgraph: "Rfam")
}

type family_literature_reference @source(name: "family_literature_reference", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pmid: Int! @source(name: "pmid", type: "Int!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  literature_reference(where: literature_reference_WhereInput @source(name: "where", type: "literature_reference_WhereInput", subgraph: "Rfam"), orderBy: literature_reference_OrderByInput @source(name: "orderBy", type: "literature_reference_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [literature_reference] @mysqlSelect(table: "literature_reference", columnMap: [["pmid", "pmid"]]) @mysqlTableForeign(columnName: "pmid") @source(name: "literature_reference", type: "[literature_reference]", subgraph: "Rfam")
}

input literature_reference_WhereInput @source(name: "literature_reference_WhereInput", subgraph: "Rfam") {
  pmid: String @source(name: "pmid", type: "String", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  journal: String @source(name: "journal", type: "String", subgraph: "Rfam")
}

input literature_reference_OrderByInput @source(name: "literature_reference_OrderByInput", subgraph: "Rfam") {
  pmid: OrderBy @source(name: "pmid", type: "OrderBy", subgraph: "Rfam")
  title: OrderBy @source(name: "title", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  journal: OrderBy @source(name: "journal", type: "OrderBy", subgraph: "Rfam")
}

input family_literature_reference_WhereInput @source(name: "family_literature_reference_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pmid: String @source(name: "pmid", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: String @source(name: "order_added", type: "String", subgraph: "Rfam")
}

input family_literature_reference_OrderByInput @source(name: "family_literature_reference_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  pmid: OrderBy @source(name: "pmid", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  order_added: OrderBy @source(name: "order_added", type: "OrderBy", subgraph: "Rfam")
}

type motif_literature @source(name: "motif_literature", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  pmid: Int! @source(name: "pmid", type: "Int!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
  literature_reference(where: literature_reference_WhereInput @source(name: "where", type: "literature_reference_WhereInput", subgraph: "Rfam"), orderBy: literature_reference_OrderByInput @source(name: "orderBy", type: "literature_reference_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [literature_reference] @mysqlSelect(table: "literature_reference", columnMap: [["pmid", "pmid"]]) @mysqlTableForeign(columnName: "pmid") @source(name: "literature_reference", type: "[literature_reference]", subgraph: "Rfam")
  motif_old(where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam"), orderBy: motif_old_OrderByInput @source(name: "orderBy", type: "motif_old_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(name: "motif_old", type: "[motif_old]", subgraph: "Rfam")
}

type motif_old @source(name: "motif_old", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp! @source(name: "updated", type: "Timestamp!", subgraph: "Rfam")
  motif_family_stats(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_family_stats_WhereInput @source(name: "where", type: "motif_family_stats_WhereInput", subgraph: "Rfam"), orderBy: motif_family_stats_OrderByInput @source(name: "orderBy", type: "motif_family_stats_OrderByInput", subgraph: "Rfam")): [motif_family_stats] @mysqlSelect(table: "motif_family_stats", columnMap: [["motif_acc", "motif_acc"]]) @source(name: "motif_family_stats", type: "[motif_family_stats]", subgraph: "Rfam")
  motif_literature(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_literature_WhereInput @source(name: "where", type: "motif_literature_WhereInput", subgraph: "Rfam"), orderBy: motif_literature_OrderByInput @source(name: "orderBy", type: "motif_literature_OrderByInput", subgraph: "Rfam")): [motif_literature] @mysqlSelect(table: "motif_literature", columnMap: [["motif_acc", "motif_acc"]]) @source(name: "motif_literature", type: "[motif_literature]", subgraph: "Rfam")
  motif_matches(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_matches_WhereInput @source(name: "where", type: "motif_matches_WhereInput", subgraph: "Rfam"), orderBy: motif_matches_OrderByInput @source(name: "orderBy", type: "motif_matches_OrderByInput", subgraph: "Rfam")): [motif_matches] @mysqlSelect(table: "motif_matches", columnMap: [["motif_acc", "motif_acc"]]) @source(name: "motif_matches", type: "[motif_matches]", subgraph: "Rfam")
  motif_pdb(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_pdb_WhereInput @source(name: "where", type: "motif_pdb_WhereInput", subgraph: "Rfam"), orderBy: motif_pdb_OrderByInput @source(name: "orderBy", type: "motif_pdb_OrderByInput", subgraph: "Rfam")): [motif_pdb] @mysqlSelect(table: "motif_pdb", columnMap: [["motif_acc", "motif_acc"]]) @source(name: "motif_pdb", type: "[motif_pdb]", subgraph: "Rfam")
  motif_ss_image(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_ss_image_WhereInput @source(name: "where", type: "motif_ss_image_WhereInput", subgraph: "Rfam"), orderBy: motif_ss_image_OrderByInput @source(name: "orderBy", type: "motif_ss_image_OrderByInput", subgraph: "Rfam")): [motif_ss_image] @mysqlSelect(table: "motif_ss_image", columnMap: [["motif_acc", "motif_acc"]]) @source(name: "motif_ss_image", type: "[motif_ss_image]", subgraph: "Rfam")
}

type motif_family_stats @source(name: "motif_family_stats", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  num_hits: Int @source(name: "num_hits", type: "Int", subgraph: "Rfam")
  frac_hits: Float @source(name: "frac_hits", type: "Float", subgraph: "Rfam")
  sum_bits: Float @source(name: "sum_bits", type: "Float", subgraph: "Rfam")
  avg_weight_bits: Float @source(name: "avg_weight_bits", type: "Float", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  motif_old(where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam"), orderBy: motif_old_OrderByInput @source(name: "orderBy", type: "motif_old_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(name: "motif_old", type: "[motif_old]", subgraph: "Rfam")
}

input motif_old_WhereInput @source(name: "motif_old_WhereInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: String @source(name: "gathering_cutoff", type: "String", subgraph: "Rfam")
  trusted_cutoff: String @source(name: "trusted_cutoff", type: "String", subgraph: "Rfam")
  noise_cutoff: String @source(name: "noise_cutoff", type: "String", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  ecmli_lambda: String @source(name: "ecmli_lambda", type: "String", subgraph: "Rfam")
  ecmli_mu: String @source(name: "ecmli_mu", type: "String", subgraph: "Rfam")
  ecmli_cal_db: String @source(name: "ecmli_cal_db", type: "String", subgraph: "Rfam")
  ecmli_cal_hits: String @source(name: "ecmli_cal_hits", type: "String", subgraph: "Rfam")
  maxl: String @source(name: "maxl", type: "String", subgraph: "Rfam")
  clen: String @source(name: "clen", type: "String", subgraph: "Rfam")
  match_pair_node: String @source(name: "match_pair_node", type: "String", subgraph: "Rfam")
  hmm_tau: String @source(name: "hmm_tau", type: "String", subgraph: "Rfam")
  hmm_lambda: String @source(name: "hmm_lambda", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  updated: String @source(name: "updated", type: "String", subgraph: "Rfam")
}

input motif_old_OrderByInput @source(name: "motif_old_OrderByInput", subgraph: "Rfam") {
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  motif_id: OrderBy @source(name: "motif_id", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  seed_source: OrderBy @source(name: "seed_source", type: "OrderBy", subgraph: "Rfam")
  gathering_cutoff: OrderBy @source(name: "gathering_cutoff", type: "OrderBy", subgraph: "Rfam")
  trusted_cutoff: OrderBy @source(name: "trusted_cutoff", type: "OrderBy", subgraph: "Rfam")
  noise_cutoff: OrderBy @source(name: "noise_cutoff", type: "OrderBy", subgraph: "Rfam")
  cmbuild: OrderBy @source(name: "cmbuild", type: "OrderBy", subgraph: "Rfam")
  cmcalibrate: OrderBy @source(name: "cmcalibrate", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
  ecmli_lambda: OrderBy @source(name: "ecmli_lambda", type: "OrderBy", subgraph: "Rfam")
  ecmli_mu: OrderBy @source(name: "ecmli_mu", type: "OrderBy", subgraph: "Rfam")
  ecmli_cal_db: OrderBy @source(name: "ecmli_cal_db", type: "OrderBy", subgraph: "Rfam")
  ecmli_cal_hits: OrderBy @source(name: "ecmli_cal_hits", type: "OrderBy", subgraph: "Rfam")
  maxl: OrderBy @source(name: "maxl", type: "OrderBy", subgraph: "Rfam")
  clen: OrderBy @source(name: "clen", type: "OrderBy", subgraph: "Rfam")
  match_pair_node: OrderBy @source(name: "match_pair_node", type: "OrderBy", subgraph: "Rfam")
  hmm_tau: OrderBy @source(name: "hmm_tau", type: "OrderBy", subgraph: "Rfam")
  hmm_lambda: OrderBy @source(name: "hmm_lambda", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  updated: OrderBy @source(name: "updated", type: "OrderBy", subgraph: "Rfam")
}

input motif_family_stats_WhereInput @source(name: "motif_family_stats_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  num_hits: String @source(name: "num_hits", type: "String", subgraph: "Rfam")
  frac_hits: String @source(name: "frac_hits", type: "String", subgraph: "Rfam")
  sum_bits: String @source(name: "sum_bits", type: "String", subgraph: "Rfam")
  avg_weight_bits: String @source(name: "avg_weight_bits", type: "String", subgraph: "Rfam")
}

input motif_family_stats_OrderByInput @source(name: "motif_family_stats_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  num_hits: OrderBy @source(name: "num_hits", type: "OrderBy", subgraph: "Rfam")
  frac_hits: OrderBy @source(name: "frac_hits", type: "OrderBy", subgraph: "Rfam")
  sum_bits: OrderBy @source(name: "sum_bits", type: "OrderBy", subgraph: "Rfam")
  avg_weight_bits: OrderBy @source(name: "avg_weight_bits", type: "OrderBy", subgraph: "Rfam")
}

input motif_literature_WhereInput @source(name: "motif_literature_WhereInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  pmid: String @source(name: "pmid", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: String @source(name: "order_added", type: "String", subgraph: "Rfam")
}

input motif_literature_OrderByInput @source(name: "motif_literature_OrderByInput", subgraph: "Rfam") {
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  pmid: OrderBy @source(name: "pmid", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  order_added: OrderBy @source(name: "order_added", type: "OrderBy", subgraph: "Rfam")
}

type motif_matches @source(name: "motif_matches", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  rfamseq_start: BigInt @source(name: "rfamseq_start", type: "BigInt", subgraph: "Rfam")
  rfamseq_stop: BigInt @source(name: "rfamseq_stop", type: "BigInt", subgraph: "Rfam")
  query_start: Int @source(name: "query_start", type: "Int", subgraph: "Rfam")
  query_stop: Int @source(name: "query_stop", type: "Int", subgraph: "Rfam")
  motif_start: Int @source(name: "motif_start", type: "Int", subgraph: "Rfam")
  motif_stop: Int @source(name: "motif_stop", type: "Int", subgraph: "Rfam")
  e_value: String @source(name: "e_value", type: "String", subgraph: "Rfam")
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  motif_old(where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam"), orderBy: motif_old_OrderByInput @source(name: "orderBy", type: "motif_old_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(name: "motif_old", type: "[motif_old]", subgraph: "Rfam")
  rfamseq(where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_OrderByInput @source(name: "orderBy", type: "rfamseq_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(name: "rfamseq", type: "[rfamseq]", subgraph: "Rfam")
}

type rfamseq @source(name: "rfamseq", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String! @source(name: "rfamseq_acc", type: "String!", subgraph: "Rfam")
  accession: String! @source(name: "accession", type: "String!", subgraph: "Rfam")
  version: Int! @source(name: "version", type: "Int!", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  mol_type: rfamseq_mol_type! @source(name: "mol_type", type: "rfamseq_mol_type!", subgraph: "Rfam")
  length: Int @source(name: "length", type: "Int", subgraph: "Rfam")
  description: String! @source(name: "description", type: "String!", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String! @source(name: "source", type: "String!", subgraph: "Rfam")
  features(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: features_WhereInput @source(name: "where", type: "features_WhereInput", subgraph: "Rfam"), orderBy: features_OrderByInput @source(name: "orderBy", type: "features_OrderByInput", subgraph: "Rfam")): [features] @mysqlSelect(table: "features", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(name: "features", type: "[features]", subgraph: "Rfam")
  full_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: full_region_WhereInput @source(name: "where", type: "full_region_WhereInput", subgraph: "Rfam"), orderBy: full_region_OrderByInput @source(name: "orderBy", type: "full_region_OrderByInput", subgraph: "Rfam")): [full_region] @mysqlSelect(table: "full_region", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(name: "full_region", type: "[full_region]", subgraph: "Rfam")
  motif_matches(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_matches_WhereInput @source(name: "where", type: "motif_matches_WhereInput", subgraph: "Rfam"), orderBy: motif_matches_OrderByInput @source(name: "orderBy", type: "motif_matches_OrderByInput", subgraph: "Rfam")): [motif_matches] @mysqlSelect(table: "motif_matches", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(name: "motif_matches", type: "[motif_matches]", subgraph: "Rfam")
  pdb_rfam_reg(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam"), orderBy: pdb_rfam_reg_OrderByInput @source(name: "orderBy", type: "pdb_rfam_reg_OrderByInput", subgraph: "Rfam")): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(name: "pdb_rfam_reg", type: "[pdb_rfam_reg]", subgraph: "Rfam")
  taxonomy(where: taxonomy_WhereInput @source(name: "where", type: "taxonomy_WhereInput", subgraph: "Rfam"), orderBy: taxonomy_OrderByInput @source(name: "orderBy", type: "taxonomy_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [taxonomy] @mysqlSelect(table: "taxonomy", columnMap: [["ncbi_id", "ncbi_id"]]) @mysqlTableForeign(columnName: "ncbi_id") @source(name: "taxonomy", type: "[taxonomy]", subgraph: "Rfam")
  seed_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: seed_region_WhereInput @source(name: "where", type: "seed_region_WhereInput", subgraph: "Rfam"), orderBy: seed_region_OrderByInput @source(name: "orderBy", type: "seed_region_OrderByInput", subgraph: "Rfam")): [seed_region] @mysqlSelect(table: "seed_region", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @source(name: "seed_region", type: "[seed_region]", subgraph: "Rfam")
}

enum rfamseq_mol_type @source(name: "rfamseq_mol_type", subgraph: "Rfam") {
  protein @source(name: "protein", subgraph: "Rfam")
  genomic_DNA @source(name: "genomic_DNA", subgraph: "Rfam")
  DNA @source(name: "DNA", subgraph: "Rfam")
  ss_DNA @source(name: "ss_DNA", subgraph: "Rfam")
  RNA @source(name: "RNA", subgraph: "Rfam")
  genomic_RNA @source(name: "genomic_RNA", subgraph: "Rfam")
  ds_RNA @source(name: "ds_RNA", subgraph: "Rfam")
  ss_cRNA @source(name: "ss_cRNA", subgraph: "Rfam")
  ss_RNA @source(name: "ss_RNA", subgraph: "Rfam")
  mRNA @source(name: "mRNA", subgraph: "Rfam")
  tRNA @source(name: "tRNA", subgraph: "Rfam")
  rRNA @source(name: "rRNA", subgraph: "Rfam")
  snoRNA @source(name: "snoRNA", subgraph: "Rfam")
  snRNA @source(name: "snRNA", subgraph: "Rfam")
  scRNA @source(name: "scRNA", subgraph: "Rfam")
  pre_RNA @source(name: "pre_RNA", subgraph: "Rfam")
  other_RNA @source(name: "other_RNA", subgraph: "Rfam")
  other_DNA @source(name: "other_DNA", subgraph: "Rfam")
  unassigned_DNA @source(name: "unassigned_DNA", subgraph: "Rfam")
  unassigned_RNA @source(name: "unassigned_RNA", subgraph: "Rfam")
  viral_cRNA @source(name: "viral_cRNA", subgraph: "Rfam")
  cRNA @source(name: "cRNA", subgraph: "Rfam")
  transcribed_RNA @source(name: "transcribed_RNA", subgraph: "Rfam")
  ncRNA @source(name: "ncRNA", subgraph: "Rfam")
  ribozyme @source(name: "ribozyme", subgraph: "Rfam")
  antisense_RNA @source(name: "antisense_RNA", subgraph: "Rfam")
  other @source(name: "other", subgraph: "Rfam")
}

type features @source(name: "features", subgraph: "Rfam") {
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  database_id: String! @source(name: "database_id", type: "String!", subgraph: "Rfam")
  primary_id: String! @source(name: "primary_id", type: "String!", subgraph: "Rfam")
  secondary_id: String @source(name: "secondary_id", type: "String", subgraph: "Rfam")
  feat_orient: Int! @source(name: "feat_orient", type: "Int!", subgraph: "Rfam")
  feat_start: BigInt! @source(name: "feat_start", type: "BigInt!", subgraph: "Rfam")
  feat_end: BigInt! @source(name: "feat_end", type: "BigInt!", subgraph: "Rfam")
  quaternary_id: String @source(name: "quaternary_id", type: "String", subgraph: "Rfam")
  rfamseq(where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_OrderByInput @source(name: "orderBy", type: "rfamseq_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(name: "rfamseq", type: "[rfamseq]", subgraph: "Rfam")
}

input rfamseq_WhereInput @source(name: "rfamseq_WhereInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  accession: String @source(name: "accession", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
  ncbi_id: String @source(name: "ncbi_id", type: "String", subgraph: "Rfam")
  mol_type: String @source(name: "mol_type", type: "String", subgraph: "Rfam")
  length: String @source(name: "length", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String @source(name: "source", type: "String", subgraph: "Rfam")
}

input rfamseq_OrderByInput @source(name: "rfamseq_OrderByInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  accession: OrderBy @source(name: "accession", type: "OrderBy", subgraph: "Rfam")
  version: OrderBy @source(name: "version", type: "OrderBy", subgraph: "Rfam")
  ncbi_id: OrderBy @source(name: "ncbi_id", type: "OrderBy", subgraph: "Rfam")
  mol_type: OrderBy @source(name: "mol_type", type: "OrderBy", subgraph: "Rfam")
  length: OrderBy @source(name: "length", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  previous_acc: OrderBy @source(name: "previous_acc", type: "OrderBy", subgraph: "Rfam")
  source: OrderBy @source(name: "source", type: "OrderBy", subgraph: "Rfam")
}

input features_WhereInput @source(name: "features_WhereInput", subgraph: "Rfam") {
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  database_id: String @source(name: "database_id", type: "String", subgraph: "Rfam")
  primary_id: String @source(name: "primary_id", type: "String", subgraph: "Rfam")
  secondary_id: String @source(name: "secondary_id", type: "String", subgraph: "Rfam")
  feat_orient: String @source(name: "feat_orient", type: "String", subgraph: "Rfam")
  feat_start: String @source(name: "feat_start", type: "String", subgraph: "Rfam")
  feat_end: String @source(name: "feat_end", type: "String", subgraph: "Rfam")
  quaternary_id: String @source(name: "quaternary_id", type: "String", subgraph: "Rfam")
}

input features_OrderByInput @source(name: "features_OrderByInput", subgraph: "Rfam") {
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  database_id: OrderBy @source(name: "database_id", type: "OrderBy", subgraph: "Rfam")
  primary_id: OrderBy @source(name: "primary_id", type: "OrderBy", subgraph: "Rfam")
  secondary_id: OrderBy @source(name: "secondary_id", type: "OrderBy", subgraph: "Rfam")
  feat_orient: OrderBy @source(name: "feat_orient", type: "OrderBy", subgraph: "Rfam")
  feat_start: OrderBy @source(name: "feat_start", type: "OrderBy", subgraph: "Rfam")
  feat_end: OrderBy @source(name: "feat_end", type: "OrderBy", subgraph: "Rfam")
  quaternary_id: OrderBy @source(name: "quaternary_id", type: "OrderBy", subgraph: "Rfam")
}

type full_region @source(name: "full_region", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String! @source(name: "rfamseq_acc", type: "String!", subgraph: "Rfam")
  seq_start: BigInt! @source(name: "seq_start", type: "BigInt!", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float! @source(name: "bit_score", type: "Float!", subgraph: "Rfam")
  evalue_score: String! @source(name: "evalue_score", type: "String!", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  truncated: full_region_truncated! @source(name: "truncated", type: "full_region_truncated!", subgraph: "Rfam")
  type: full_region_type! @source(name: "type", type: "full_region_type!", subgraph: "Rfam")
  is_significant: Int! @source(name: "is_significant", type: "Int!", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  rfamseq(where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_OrderByInput @source(name: "orderBy", type: "rfamseq_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(name: "rfamseq", type: "[rfamseq]", subgraph: "Rfam")
}

enum full_region_truncated @source(name: "full_region_truncated", subgraph: "Rfam") {
  _0 @source(name: "_0", subgraph: "Rfam")
  _5 @source(name: "_5", subgraph: "Rfam")
  _3 @source(name: "_3", subgraph: "Rfam")
  _53 @source(name: "_53", subgraph: "Rfam")
}

enum full_region_type @source(name: "full_region_type", subgraph: "Rfam") {
  seed @source(name: "seed", subgraph: "Rfam")
  full @source(name: "full", subgraph: "Rfam")
}

input full_region_WhereInput @source(name: "full_region_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: String @source(name: "seq_start", type: "String", subgraph: "Rfam")
  seq_end: String @source(name: "seq_end", type: "String", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: String @source(name: "bit_score", type: "String", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: String @source(name: "cm_start", type: "String", subgraph: "Rfam")
  cm_end: String @source(name: "cm_end", type: "String", subgraph: "Rfam")
  truncated: String @source(name: "truncated", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  is_significant: String @source(name: "is_significant", type: "String", subgraph: "Rfam")
}

input full_region_OrderByInput @source(name: "full_region_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  seq_start: OrderBy @source(name: "seq_start", type: "OrderBy", subgraph: "Rfam")
  seq_end: OrderBy @source(name: "seq_end", type: "OrderBy", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: OrderBy @source(name: "bit_score", type: "OrderBy", subgraph: "Rfam")
  evalue_score: OrderBy @source(name: "evalue_score", type: "OrderBy", subgraph: "Rfam")
  cm_start: OrderBy @source(name: "cm_start", type: "OrderBy", subgraph: "Rfam")
  cm_end: OrderBy @source(name: "cm_end", type: "OrderBy", subgraph: "Rfam")
  truncated: OrderBy @source(name: "truncated", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
  is_significant: OrderBy @source(name: "is_significant", type: "OrderBy", subgraph: "Rfam")
}

input motif_matches_WhereInput @source(name: "motif_matches_WhereInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  rfamseq_start: String @source(name: "rfamseq_start", type: "String", subgraph: "Rfam")
  rfamseq_stop: String @source(name: "rfamseq_stop", type: "String", subgraph: "Rfam")
  query_start: String @source(name: "query_start", type: "String", subgraph: "Rfam")
  query_stop: String @source(name: "query_stop", type: "String", subgraph: "Rfam")
  motif_start: String @source(name: "motif_start", type: "String", subgraph: "Rfam")
  motif_stop: String @source(name: "motif_stop", type: "String", subgraph: "Rfam")
  e_value: String @source(name: "e_value", type: "String", subgraph: "Rfam")
  bit_score: String @source(name: "bit_score", type: "String", subgraph: "Rfam")
}

input motif_matches_OrderByInput @source(name: "motif_matches_OrderByInput", subgraph: "Rfam") {
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  rfamseq_start: OrderBy @source(name: "rfamseq_start", type: "OrderBy", subgraph: "Rfam")
  rfamseq_stop: OrderBy @source(name: "rfamseq_stop", type: "OrderBy", subgraph: "Rfam")
  query_start: OrderBy @source(name: "query_start", type: "OrderBy", subgraph: "Rfam")
  query_stop: OrderBy @source(name: "query_stop", type: "OrderBy", subgraph: "Rfam")
  motif_start: OrderBy @source(name: "motif_start", type: "OrderBy", subgraph: "Rfam")
  motif_stop: OrderBy @source(name: "motif_stop", type: "OrderBy", subgraph: "Rfam")
  e_value: OrderBy @source(name: "e_value", type: "OrderBy", subgraph: "Rfam")
  bit_score: OrderBy @source(name: "bit_score", type: "OrderBy", subgraph: "Rfam")
}

type pdb_rfam_reg @source(name: "pdb_rfam_reg", subgraph: "Rfam") {
  auto_pdb_reg: Int! @source(name: "auto_pdb_reg", type: "Int!", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pdb_seq: String! @source(name: "pdb_seq", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_res_start: Int @source(name: "pdb_res_start", type: "Int", subgraph: "Rfam")
  pdb_res_end: Int @source(name: "pdb_res_end", type: "Int", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt @source(name: "seq_end", type: "BigInt", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  pdb(where: pdb_WhereInput @source(name: "where", type: "pdb_WhereInput", subgraph: "Rfam"), orderBy: pdb_OrderByInput @source(name: "orderBy", type: "pdb_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [pdb] @mysqlSelect(table: "pdb", columnMap: [["pdb_id", "pdb_id"]]) @mysqlTableForeign(columnName: "pdb_id") @source(name: "pdb", type: "[pdb]", subgraph: "Rfam")
  pdb_sequence(where: pdb_sequence_WhereInput @source(name: "where", type: "pdb_sequence_WhereInput", subgraph: "Rfam"), orderBy: pdb_sequence_OrderByInput @source(name: "orderBy", type: "pdb_sequence_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [pdb_sequence] @mysqlSelect(table: "pdb_sequence", columnMap: [["pdb_seq", "pdb_seq"]]) @mysqlTableForeign(columnName: "pdb_seq") @source(name: "pdb_sequence", type: "[pdb_sequence]", subgraph: "Rfam")
  rfamseq(where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_OrderByInput @source(name: "orderBy", type: "rfamseq_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(name: "rfamseq", type: "[rfamseq]", subgraph: "Rfam")
}

type pdb @source(name: "pdb", subgraph: "Rfam") {
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  keywords: String @source(name: "keywords", type: "String", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  date: String @source(name: "date", type: "String", subgraph: "Rfam")
  resolution: Float @source(name: "resolution", type: "Float", subgraph: "Rfam")
  method: String @source(name: "method", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  pdb_rfam_reg(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam"), orderBy: pdb_rfam_reg_OrderByInput @source(name: "orderBy", type: "pdb_rfam_reg_OrderByInput", subgraph: "Rfam")): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["pdb_id", "pdb_id"]]) @source(name: "pdb_rfam_reg", type: "[pdb_rfam_reg]", subgraph: "Rfam")
  pdb_sequence(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_sequence_WhereInput @source(name: "where", type: "pdb_sequence_WhereInput", subgraph: "Rfam"), orderBy: pdb_sequence_OrderByInput @source(name: "orderBy", type: "pdb_sequence_OrderByInput", subgraph: "Rfam")): [pdb_sequence] @mysqlSelect(table: "pdb_sequence", columnMap: [["pdb_id", "pdb_id"]]) @source(name: "pdb_sequence", type: "[pdb_sequence]", subgraph: "Rfam")
}

input pdb_rfam_reg_WhereInput @source(name: "pdb_rfam_reg_WhereInput", subgraph: "Rfam") {
  auto_pdb_reg: String @source(name: "auto_pdb_reg", type: "String", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pdb_seq: String @source(name: "pdb_seq", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_res_start: String @source(name: "pdb_res_start", type: "String", subgraph: "Rfam")
  pdb_res_end: String @source(name: "pdb_res_end", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: String @source(name: "seq_start", type: "String", subgraph: "Rfam")
  seq_end: String @source(name: "seq_end", type: "String", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
}

input pdb_rfam_reg_OrderByInput @source(name: "pdb_rfam_reg_OrderByInput", subgraph: "Rfam") {
  auto_pdb_reg: OrderBy @source(name: "auto_pdb_reg", type: "OrderBy", subgraph: "Rfam")
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  pdb_seq: OrderBy @source(name: "pdb_seq", type: "OrderBy", subgraph: "Rfam")
  pdb_id: OrderBy @source(name: "pdb_id", type: "OrderBy", subgraph: "Rfam")
  chain: OrderBy @source(name: "chain", type: "OrderBy", subgraph: "Rfam")
  pdb_res_start: OrderBy @source(name: "pdb_res_start", type: "OrderBy", subgraph: "Rfam")
  pdb_res_end: OrderBy @source(name: "pdb_res_end", type: "OrderBy", subgraph: "Rfam")
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  seq_start: OrderBy @source(name: "seq_start", type: "OrderBy", subgraph: "Rfam")
  seq_end: OrderBy @source(name: "seq_end", type: "OrderBy", subgraph: "Rfam")
  hex_colour: OrderBy @source(name: "hex_colour", type: "OrderBy", subgraph: "Rfam")
}

type pdb_sequence @source(name: "pdb_sequence", subgraph: "Rfam") {
  pdb_seq: String! @source(name: "pdb_seq", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_rfam_reg(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam"), orderBy: pdb_rfam_reg_OrderByInput @source(name: "orderBy", type: "pdb_rfam_reg_OrderByInput", subgraph: "Rfam")): [pdb_rfam_reg] @mysqlSelect(table: "pdb_rfam_reg", columnMap: [["pdb_seq", "pdb_seq"]]) @source(name: "pdb_rfam_reg", type: "[pdb_rfam_reg]", subgraph: "Rfam")
  pdb(where: pdb_WhereInput @source(name: "where", type: "pdb_WhereInput", subgraph: "Rfam"), orderBy: pdb_OrderByInput @source(name: "orderBy", type: "pdb_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [pdb] @mysqlSelect(table: "pdb", columnMap: [["pdb_id", "pdb_id"]]) @mysqlTableForeign(columnName: "pdb_id") @source(name: "pdb", type: "[pdb]", subgraph: "Rfam")
}

input pdb_WhereInput @source(name: "pdb_WhereInput", subgraph: "Rfam") {
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  keywords: String @source(name: "keywords", type: "String", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  date: String @source(name: "date", type: "String", subgraph: "Rfam")
  resolution: String @source(name: "resolution", type: "String", subgraph: "Rfam")
  method: String @source(name: "method", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
}

input pdb_OrderByInput @source(name: "pdb_OrderByInput", subgraph: "Rfam") {
  pdb_id: OrderBy @source(name: "pdb_id", type: "OrderBy", subgraph: "Rfam")
  keywords: OrderBy @source(name: "keywords", type: "OrderBy", subgraph: "Rfam")
  title: OrderBy @source(name: "title", type: "OrderBy", subgraph: "Rfam")
  date: OrderBy @source(name: "date", type: "OrderBy", subgraph: "Rfam")
  resolution: OrderBy @source(name: "resolution", type: "OrderBy", subgraph: "Rfam")
  method: OrderBy @source(name: "method", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
}

input pdb_sequence_WhereInput @source(name: "pdb_sequence_WhereInput", subgraph: "Rfam") {
  pdb_seq: String @source(name: "pdb_seq", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
}

input pdb_sequence_OrderByInput @source(name: "pdb_sequence_OrderByInput", subgraph: "Rfam") {
  pdb_seq: OrderBy @source(name: "pdb_seq", type: "OrderBy", subgraph: "Rfam")
  pdb_id: OrderBy @source(name: "pdb_id", type: "OrderBy", subgraph: "Rfam")
  chain: OrderBy @source(name: "chain", type: "OrderBy", subgraph: "Rfam")
}

type taxonomy @source(name: "taxonomy", subgraph: "Rfam") {
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  species: String! @source(name: "species", type: "String!", subgraph: "Rfam")
  tax_string: String @source(name: "tax_string", type: "String", subgraph: "Rfam")
  tree_display_name: String @source(name: "tree_display_name", type: "String", subgraph: "Rfam")
  align_display_name: String @source(name: "align_display_name", type: "String", subgraph: "Rfam")
  family_ncbi(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_ncbi_WhereInput @source(name: "where", type: "family_ncbi_WhereInput", subgraph: "Rfam"), orderBy: family_ncbi_OrderByInput @source(name: "orderBy", type: "family_ncbi_OrderByInput", subgraph: "Rfam")): [family_ncbi] @mysqlSelect(table: "family_ncbi", columnMap: [["ncbi_id", "ncbi_id"]]) @source(name: "family_ncbi", type: "[family_ncbi]", subgraph: "Rfam")
  rfamseq(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_OrderByInput @source(name: "orderBy", type: "rfamseq_OrderByInput", subgraph: "Rfam")): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["ncbi_id", "ncbi_id"]]) @source(name: "rfamseq", type: "[rfamseq]", subgraph: "Rfam")
}

type family_ncbi @source(name: "family_ncbi", subgraph: "Rfam") {
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  """Is this really needed?"""
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  taxonomy(where: taxonomy_WhereInput @source(name: "where", type: "taxonomy_WhereInput", subgraph: "Rfam"), orderBy: taxonomy_OrderByInput @source(name: "orderBy", type: "taxonomy_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [taxonomy] @mysqlSelect(table: "taxonomy", columnMap: [["ncbi_id", "ncbi_id"]]) @mysqlTableForeign(columnName: "ncbi_id") @source(name: "taxonomy", type: "[taxonomy]", subgraph: "Rfam")
}

input taxonomy_WhereInput @source(name: "taxonomy_WhereInput", subgraph: "Rfam") {
  ncbi_id: String @source(name: "ncbi_id", type: "String", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  tax_string: String @source(name: "tax_string", type: "String", subgraph: "Rfam")
  tree_display_name: String @source(name: "tree_display_name", type: "String", subgraph: "Rfam")
  align_display_name: String @source(name: "align_display_name", type: "String", subgraph: "Rfam")
}

input taxonomy_OrderByInput @source(name: "taxonomy_OrderByInput", subgraph: "Rfam") {
  ncbi_id: OrderBy @source(name: "ncbi_id", type: "OrderBy", subgraph: "Rfam")
  species: OrderBy @source(name: "species", type: "OrderBy", subgraph: "Rfam")
  tax_string: OrderBy @source(name: "tax_string", type: "OrderBy", subgraph: "Rfam")
  tree_display_name: OrderBy @source(name: "tree_display_name", type: "OrderBy", subgraph: "Rfam")
  align_display_name: OrderBy @source(name: "align_display_name", type: "OrderBy", subgraph: "Rfam")
}

input family_ncbi_WhereInput @source(name: "family_ncbi_WhereInput", subgraph: "Rfam") {
  ncbi_id: String @source(name: "ncbi_id", type: "String", subgraph: "Rfam")
  """Is this really needed?"""
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
}

input family_ncbi_OrderByInput @source(name: "family_ncbi_OrderByInput", subgraph: "Rfam") {
  ncbi_id: OrderBy @source(name: "ncbi_id", type: "OrderBy", subgraph: "Rfam")
  """Is this really needed?"""
  rfam_id: OrderBy @source(name: "rfam_id", type: "OrderBy", subgraph: "Rfam")
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
}

type seed_region @source(name: "seed_region", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt! @source(name: "seq_start", type: "BigInt!", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  md5: String @source(name: "md5", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  rfamseq(where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam"), orderBy: rfamseq_OrderByInput @source(name: "orderBy", type: "rfamseq_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [rfamseq] @mysqlSelect(table: "rfamseq", columnMap: [["rfamseq_acc", "rfamseq_acc"]]) @mysqlTableForeign(columnName: "rfamseq_acc") @source(name: "rfamseq", type: "[rfamseq]", subgraph: "Rfam")
}

input seed_region_WhereInput @source(name: "seed_region_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: String @source(name: "seq_start", type: "String", subgraph: "Rfam")
  seq_end: String @source(name: "seq_end", type: "String", subgraph: "Rfam")
  md5: String @source(name: "md5", type: "String", subgraph: "Rfam")
}

input seed_region_OrderByInput @source(name: "seed_region_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  seq_start: OrderBy @source(name: "seq_start", type: "OrderBy", subgraph: "Rfam")
  seq_end: OrderBy @source(name: "seq_end", type: "OrderBy", subgraph: "Rfam")
  md5: OrderBy @source(name: "md5", type: "OrderBy", subgraph: "Rfam")
}

type motif_pdb @source(name: "motif_pdb", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int @source(name: "pdb_start", type: "Int", subgraph: "Rfam")
  pdb_end: Int @source(name: "pdb_end", type: "Int", subgraph: "Rfam")
  motif_old(where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam"), orderBy: motif_old_OrderByInput @source(name: "orderBy", type: "motif_old_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(name: "motif_old", type: "[motif_old]", subgraph: "Rfam")
}

input motif_pdb_WhereInput @source(name: "motif_pdb_WhereInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: String @source(name: "pdb_start", type: "String", subgraph: "Rfam")
  pdb_end: String @source(name: "pdb_end", type: "String", subgraph: "Rfam")
}

input motif_pdb_OrderByInput @source(name: "motif_pdb_OrderByInput", subgraph: "Rfam") {
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  pdb_id: OrderBy @source(name: "pdb_id", type: "OrderBy", subgraph: "Rfam")
  chain: OrderBy @source(name: "chain", type: "OrderBy", subgraph: "Rfam")
  pdb_start: OrderBy @source(name: "pdb_start", type: "OrderBy", subgraph: "Rfam")
  pdb_end: OrderBy @source(name: "pdb_end", type: "OrderBy", subgraph: "Rfam")
}

type motif_ss_image @source(name: "motif_ss_image", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  motif_old(where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam"), orderBy: motif_old_OrderByInput @source(name: "orderBy", type: "motif_old_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [motif_old] @mysqlSelect(table: "motif_old", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(name: "motif_old", type: "[motif_old]", subgraph: "Rfam")
}

input motif_ss_image_WhereInput @source(name: "motif_ss_image_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
}

input motif_ss_image_OrderByInput @source(name: "motif_ss_image_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  image: OrderBy @source(name: "image", type: "OrderBy", subgraph: "Rfam")
}

input clan_membership_WhereInput @source(name: "clan_membership_WhereInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
}

input clan_membership_OrderByInput @source(name: "clan_membership_OrderByInput", subgraph: "Rfam") {
  clan_acc: OrderBy @source(name: "clan_acc", type: "OrderBy", subgraph: "Rfam")
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
}

type database_link @source(name: "database_link", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  db_id: String! @source(name: "db_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String! @source(name: "db_link", type: "String!", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

input database_link_WhereInput @source(name: "database_link_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  db_id: String @source(name: "db_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String @source(name: "db_link", type: "String", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input database_link_OrderByInput @source(name: "database_link_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  db_id: OrderBy @source(name: "db_id", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  db_link: OrderBy @source(name: "db_link", type: "OrderBy", subgraph: "Rfam")
  other_params: OrderBy @source(name: "other_params", type: "OrderBy", subgraph: "Rfam")
}

type wikitext @source(name: "wikitext", subgraph: "Rfam") {
  auto_wiki: Int! @source(name: "auto_wiki", type: "Int!", subgraph: "Rfam")
  title: String! @source(name: "title", type: "String!", subgraph: "Rfam")
  family(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["auto_wiki", "auto_wiki"]]) @source(name: "family", type: "[family]", subgraph: "Rfam")
}

input wikitext_WhereInput @source(name: "wikitext_WhereInput", subgraph: "Rfam") {
  auto_wiki: String @source(name: "auto_wiki", type: "String", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
}

input wikitext_OrderByInput @source(name: "wikitext_OrderByInput", subgraph: "Rfam") {
  auto_wiki: OrderBy @source(name: "auto_wiki", type: "OrderBy", subgraph: "Rfam")
  title: OrderBy @source(name: "title", type: "OrderBy", subgraph: "Rfam")
}

type family_long @source(name: "family_long", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  referenece_structure: String @source(name: "referenece_structure", type: "String", subgraph: "Rfam")
  reference_sequence: String @source(name: "reference_sequence", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

input family_long_WhereInput @source(name: "family_long_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  referenece_structure: String @source(name: "referenece_structure", type: "String", subgraph: "Rfam")
  reference_sequence: String @source(name: "reference_sequence", type: "String", subgraph: "Rfam")
}

input family_long_OrderByInput @source(name: "family_long_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  referenece_structure: OrderBy @source(name: "referenece_structure", type: "OrderBy", subgraph: "Rfam")
  reference_sequence: OrderBy @source(name: "reference_sequence", type: "OrderBy", subgraph: "Rfam")
}

type html_alignment @source(name: "html_alignment", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  type: html_alignment_type! @source(name: "type", type: "html_alignment_type!", subgraph: "Rfam")
  html: String @source(name: "html", type: "String", subgraph: "Rfam")
  block: Int! @source(name: "block", type: "Int!", subgraph: "Rfam")
  html_alignmentscol: String @source(name: "html_alignmentscol", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

enum html_alignment_type @source(name: "html_alignment_type", subgraph: "Rfam") {
  seed @source(name: "seed", subgraph: "Rfam")
  genome @source(name: "genome", subgraph: "Rfam")
  seedColorstock @source(name: "seedColorstock", subgraph: "Rfam")
  genomeColorstock @source(name: "genomeColorstock", subgraph: "Rfam")
}

input html_alignment_WhereInput @source(name: "html_alignment_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  html: String @source(name: "html", type: "String", subgraph: "Rfam")
  block: String @source(name: "block", type: "String", subgraph: "Rfam")
  html_alignmentscol: String @source(name: "html_alignmentscol", type: "String", subgraph: "Rfam")
}

input html_alignment_OrderByInput @source(name: "html_alignment_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
  html: OrderBy @source(name: "html", type: "OrderBy", subgraph: "Rfam")
  block: OrderBy @source(name: "block", type: "OrderBy", subgraph: "Rfam")
  html_alignmentscol: OrderBy @source(name: "html_alignmentscol", type: "OrderBy", subgraph: "Rfam")
}

type matches_and_fasta @source(name: "matches_and_fasta", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  match_list: String @source(name: "match_list", type: "String", subgraph: "Rfam")
  fasta: String @source(name: "fasta", type: "String", subgraph: "Rfam")
  type: matches_and_fasta_type! @source(name: "type", type: "matches_and_fasta_type!", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

enum matches_and_fasta_type @source(name: "matches_and_fasta_type", subgraph: "Rfam") {
  rfamseq @source(name: "rfamseq", subgraph: "Rfam")
  genome @source(name: "genome", subgraph: "Rfam")
  refseq @source(name: "refseq", subgraph: "Rfam")
}

input matches_and_fasta_WhereInput @source(name: "matches_and_fasta_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  match_list: String @source(name: "match_list", type: "String", subgraph: "Rfam")
  fasta: String @source(name: "fasta", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
}

input matches_and_fasta_OrderByInput @source(name: "matches_and_fasta_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  match_list: OrderBy @source(name: "match_list", type: "OrderBy", subgraph: "Rfam")
  fasta: OrderBy @source(name: "fasta", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
}

type processed_data @source(name: "processed_data", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
  ss_stats_pbp: String @source(name: "ss_stats_pbp", type: "String", subgraph: "Rfam")
  ss_stats_seq: String @source(name: "ss_stats_seq", type: "String", subgraph: "Rfam")
  ss_stats_fam: String @source(name: "ss_stats_fam", type: "String", subgraph: "Rfam")
  scores_graph: String @source(name: "scores_graph", type: "String", subgraph: "Rfam")
  genome_full: String @source(name: "genome_full", type: "String", subgraph: "Rfam")
  genome_full_md5: String @source(name: "genome_full_md5", type: "String", subgraph: "Rfam")
  refseq_full: String @source(name: "refseq_full", type: "String", subgraph: "Rfam")
  refseq_full_md5: String @source(name: "refseq_full_md5", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

input processed_data_WhereInput @source(name: "processed_data_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
  ss_stats_pbp: String @source(name: "ss_stats_pbp", type: "String", subgraph: "Rfam")
  ss_stats_seq: String @source(name: "ss_stats_seq", type: "String", subgraph: "Rfam")
  ss_stats_fam: String @source(name: "ss_stats_fam", type: "String", subgraph: "Rfam")
  scores_graph: String @source(name: "scores_graph", type: "String", subgraph: "Rfam")
  genome_full: String @source(name: "genome_full", type: "String", subgraph: "Rfam")
  genome_full_md5: String @source(name: "genome_full_md5", type: "String", subgraph: "Rfam")
  refseq_full: String @source(name: "refseq_full", type: "String", subgraph: "Rfam")
  refseq_full_md5: String @source(name: "refseq_full_md5", type: "String", subgraph: "Rfam")
}

input processed_data_OrderByInput @source(name: "processed_data_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  cm: OrderBy @source(name: "cm", type: "OrderBy", subgraph: "Rfam")
  ss_stats_pbp: OrderBy @source(name: "ss_stats_pbp", type: "OrderBy", subgraph: "Rfam")
  ss_stats_seq: OrderBy @source(name: "ss_stats_seq", type: "OrderBy", subgraph: "Rfam")
  ss_stats_fam: OrderBy @source(name: "ss_stats_fam", type: "OrderBy", subgraph: "Rfam")
  scores_graph: OrderBy @source(name: "scores_graph", type: "OrderBy", subgraph: "Rfam")
  genome_full: OrderBy @source(name: "genome_full", type: "OrderBy", subgraph: "Rfam")
  genome_full_md5: OrderBy @source(name: "genome_full_md5", type: "OrderBy", subgraph: "Rfam")
  refseq_full: OrderBy @source(name: "refseq_full", type: "OrderBy", subgraph: "Rfam")
  refseq_full_md5: OrderBy @source(name: "refseq_full_md5", type: "OrderBy", subgraph: "Rfam")
}

type pseudoknot @source(name: "pseudoknot", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pseudoknot_id: String! @source(name: "pseudoknot_id", type: "String!", subgraph: "Rfam")
  source: pseudoknot_source! @source(name: "source", type: "pseudoknot_source!", subgraph: "Rfam")
  covariation: Int @source(name: "covariation", type: "Int", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

enum pseudoknot_source @source(name: "pseudoknot_source", subgraph: "Rfam") {
  seed @source(name: "seed", subgraph: "Rfam")
  rscape @source(name: "rscape", subgraph: "Rfam")
}

input pseudoknot_WhereInput @source(name: "pseudoknot_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pseudoknot_id: String @source(name: "pseudoknot_id", type: "String", subgraph: "Rfam")
  source: String @source(name: "source", type: "String", subgraph: "Rfam")
  covariation: String @source(name: "covariation", type: "String", subgraph: "Rfam")
}

input pseudoknot_OrderByInput @source(name: "pseudoknot_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  pseudoknot_id: OrderBy @source(name: "pseudoknot_id", type: "OrderBy", subgraph: "Rfam")
  source: OrderBy @source(name: "source", type: "OrderBy", subgraph: "Rfam")
  covariation: OrderBy @source(name: "covariation", type: "OrderBy", subgraph: "Rfam")
}

type refseq_full_region @source(name: "refseq_full_region", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  refseq_acc: String! @source(name: "refseq_acc", type: "String!", subgraph: "Rfam")
  seq_start: BigInt! @source(name: "seq_start", type: "BigInt!", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float! @source(name: "bit_score", type: "Float!", subgraph: "Rfam")
  evalue_score: String! @source(name: "evalue_score", type: "String!", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  truncated: refseq_full_region_truncated! @source(name: "truncated", type: "refseq_full_region_truncated!", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
  refseq(where: refseq_WhereInput @source(name: "where", type: "refseq_WhereInput", subgraph: "Rfam"), orderBy: refseq_OrderByInput @source(name: "orderBy", type: "refseq_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [refseq] @mysqlSelect(table: "refseq", columnMap: [["refseq_acc", "refseq_acc"]]) @mysqlTableForeign(columnName: "refseq_acc") @source(name: "refseq", type: "[refseq]", subgraph: "Rfam")
}

enum refseq_full_region_truncated @source(name: "refseq_full_region_truncated", subgraph: "Rfam") {
  _0 @source(name: "_0", subgraph: "Rfam")
  _5 @source(name: "_5", subgraph: "Rfam")
  _3 @source(name: "_3", subgraph: "Rfam")
  _53 @source(name: "_53", subgraph: "Rfam")
}

type refseq @source(name: "refseq", subgraph: "Rfam") {
  refseq_acc: String! @source(name: "refseq_acc", type: "String!", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  ncbi_taxid: Int @source(name: "ncbi_taxid", type: "Int", subgraph: "Rfam")
  refseq_full_region(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: refseq_full_region_WhereInput @source(name: "where", type: "refseq_full_region_WhereInput", subgraph: "Rfam"), orderBy: refseq_full_region_OrderByInput @source(name: "orderBy", type: "refseq_full_region_OrderByInput", subgraph: "Rfam")): [refseq_full_region] @mysqlSelect(table: "refseq_full_region", columnMap: [["refseq_acc", "refseq_acc"]]) @source(name: "refseq_full_region", type: "[refseq_full_region]", subgraph: "Rfam")
}

input refseq_full_region_WhereInput @source(name: "refseq_full_region_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  refseq_acc: String @source(name: "refseq_acc", type: "String", subgraph: "Rfam")
  seq_start: String @source(name: "seq_start", type: "String", subgraph: "Rfam")
  seq_end: String @source(name: "seq_end", type: "String", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: String @source(name: "bit_score", type: "String", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: String @source(name: "cm_start", type: "String", subgraph: "Rfam")
  cm_end: String @source(name: "cm_end", type: "String", subgraph: "Rfam")
  truncated: String @source(name: "truncated", type: "String", subgraph: "Rfam")
}

input refseq_full_region_OrderByInput @source(name: "refseq_full_region_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  refseq_acc: OrderBy @source(name: "refseq_acc", type: "OrderBy", subgraph: "Rfam")
  seq_start: OrderBy @source(name: "seq_start", type: "OrderBy", subgraph: "Rfam")
  seq_end: OrderBy @source(name: "seq_end", type: "OrderBy", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: OrderBy @source(name: "bit_score", type: "OrderBy", subgraph: "Rfam")
  evalue_score: OrderBy @source(name: "evalue_score", type: "OrderBy", subgraph: "Rfam")
  cm_start: OrderBy @source(name: "cm_start", type: "OrderBy", subgraph: "Rfam")
  cm_end: OrderBy @source(name: "cm_end", type: "OrderBy", subgraph: "Rfam")
  truncated: OrderBy @source(name: "truncated", type: "OrderBy", subgraph: "Rfam")
}

input refseq_WhereInput @source(name: "refseq_WhereInput", subgraph: "Rfam") {
  refseq_acc: String @source(name: "refseq_acc", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  ncbi_taxid: String @source(name: "ncbi_taxid", type: "String", subgraph: "Rfam")
}

input refseq_OrderByInput @source(name: "refseq_OrderByInput", subgraph: "Rfam") {
  refseq_acc: OrderBy @source(name: "refseq_acc", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  species: OrderBy @source(name: "species", type: "OrderBy", subgraph: "Rfam")
  ncbi_taxid: OrderBy @source(name: "ncbi_taxid", type: "OrderBy", subgraph: "Rfam")
}

type secondary_structure_image @source(name: "secondary_structure_image", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  type: secondary_structure_image_type @source(name: "type", type: "secondary_structure_image_type", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

enum secondary_structure_image_type @source(name: "secondary_structure_image_type", subgraph: "Rfam") {
  cons @source(name: "cons", subgraph: "Rfam")
  dist @source(name: "dist", subgraph: "Rfam")
  ent @source(name: "ent", subgraph: "Rfam")
  fcbp @source(name: "fcbp", subgraph: "Rfam")
  cov @source(name: "cov", subgraph: "Rfam")
  disttruc @source(name: "disttruc", subgraph: "Rfam")
  maxcm @source(name: "maxcm", subgraph: "Rfam")
  norm @source(name: "norm", subgraph: "Rfam")
  rchie @source(name: "rchie", subgraph: "Rfam")
  species @source(name: "species", subgraph: "Rfam")
  ss @source(name: "ss", subgraph: "Rfam")
  rscape @source(name: "rscape", subgraph: "Rfam")
  rscape_cyk @source(name: "rscape_cyk", subgraph: "Rfam")
}

input secondary_structure_image_WhereInput @source(name: "secondary_structure_image_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
}

input secondary_structure_image_OrderByInput @source(name: "secondary_structure_image_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
  image: OrderBy @source(name: "image", type: "OrderBy", subgraph: "Rfam")
}

type sunburst @source(name: "sunburst", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  data: String! @source(name: "data", type: "String!", subgraph: "Rfam")
  type: sunburst_type! @source(name: "type", type: "sunburst_type!", subgraph: "Rfam")
  family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam"), orderBy: family_OrderByInput @source(name: "orderBy", type: "family_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [family] @mysqlSelect(table: "family", columnMap: [["rfam_acc", "rfam_acc"]]) @mysqlTableForeign(columnName: "rfam_acc") @source(name: "family", type: "[family]", subgraph: "Rfam")
}

enum sunburst_type @source(name: "sunburst_type", subgraph: "Rfam") {
  rfamseq @source(name: "rfamseq", subgraph: "Rfam")
  genome @source(name: "genome", subgraph: "Rfam")
  refseq @source(name: "refseq", subgraph: "Rfam")
}

input sunburst_WhereInput @source(name: "sunburst_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  data: String @source(name: "data", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
}

input sunburst_OrderByInput @source(name: "sunburst_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  data: OrderBy @source(name: "data", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
}

type _genome_data @source(name: "_genome_data", subgraph: "Rfam") {
  data_file: String! @source(name: "data_file", type: "String!", subgraph: "Rfam")
  author: String! @source(name: "author", type: "String!", subgraph: "Rfam")
  uuid: String! @source(name: "uuid", type: "String!", subgraph: "Rfam")
  status: _genome_data_status! @source(name: "status", type: "_genome_data_status!", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  opened: DateTime @source(name: "opened", type: "DateTime", subgraph: "Rfam")
  closed: DateTime @source(name: "closed", type: "DateTime", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: Int @source(name: "lsf_id", type: "Int", subgraph: "Rfam")
}

enum _genome_data_status @source(name: "_genome_data_status", subgraph: "Rfam") {
  DONE @source(name: "DONE", subgraph: "Rfam")
  PEND @source(name: "PEND", subgraph: "Rfam")
  RUN @source(name: "RUN", subgraph: "Rfam")
  FAIL @source(name: "FAIL", subgraph: "Rfam")
  KILL @source(name: "KILL", subgraph: "Rfam")
}

input _genome_data_WhereInput @source(name: "_genome_data_WhereInput", subgraph: "Rfam") {
  data_file: String @source(name: "data_file", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  uuid: String @source(name: "uuid", type: "String", subgraph: "Rfam")
  status: String @source(name: "status", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  opened: String @source(name: "opened", type: "String", subgraph: "Rfam")
  closed: String @source(name: "closed", type: "String", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: String @source(name: "lsf_id", type: "String", subgraph: "Rfam")
}

input _genome_data_OrderByInput @source(name: "_genome_data_OrderByInput", subgraph: "Rfam") {
  data_file: OrderBy @source(name: "data_file", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  uuid: OrderBy @source(name: "uuid", type: "OrderBy", subgraph: "Rfam")
  status: OrderBy @source(name: "status", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  opened: OrderBy @source(name: "opened", type: "OrderBy", subgraph: "Rfam")
  closed: OrderBy @source(name: "closed", type: "OrderBy", subgraph: "Rfam")
  message: OrderBy @source(name: "message", type: "OrderBy", subgraph: "Rfam")
  lsf_id: OrderBy @source(name: "lsf_id", type: "OrderBy", subgraph: "Rfam")
}

type _lock @source(name: "_lock", subgraph: "Rfam") {
  locked: Int! @source(name: "locked", type: "Int!", subgraph: "Rfam")
  locker: String! @source(name: "locker", type: "String!", subgraph: "Rfam")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: Int! @source(name: "allowCommits", type: "Int!", subgraph: "Rfam")
  alsoAllow: String @source(name: "alsoAllow", type: "String", subgraph: "Rfam")
}

input _lock_WhereInput @source(name: "_lock_WhereInput", subgraph: "Rfam") {
  locked: String @source(name: "locked", type: "String", subgraph: "Rfam")
  locker: String @source(name: "locker", type: "String", subgraph: "Rfam")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: String @source(name: "allowCommits", type: "String", subgraph: "Rfam")
  alsoAllow: String @source(name: "alsoAllow", type: "String", subgraph: "Rfam")
}

input _lock_OrderByInput @source(name: "_lock_OrderByInput", subgraph: "Rfam") {
  locked: OrderBy @source(name: "locked", type: "OrderBy", subgraph: "Rfam")
  locker: OrderBy @source(name: "locker", type: "OrderBy", subgraph: "Rfam")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: OrderBy @source(name: "allowCommits", type: "OrderBy", subgraph: "Rfam")
  alsoAllow: OrderBy @source(name: "alsoAllow", type: "OrderBy", subgraph: "Rfam")
}

type author @source(name: "author", subgraph: "Rfam") {
  author_id: Int! @source(name: "author_id", type: "Int!", subgraph: "Rfam")
  name: String! @source(name: "name", type: "String!", subgraph: "Rfam")
  last_name: String @source(name: "last_name", type: "String", subgraph: "Rfam")
  initials: String @source(name: "initials", type: "String", subgraph: "Rfam")
  orcid: String @source(name: "orcid", type: "String", subgraph: "Rfam")
  synonyms: String @source(name: "synonyms", type: "String", subgraph: "Rfam")
}

input author_WhereInput @source(name: "author_WhereInput", subgraph: "Rfam") {
  author_id: String @source(name: "author_id", type: "String", subgraph: "Rfam")
  name: String @source(name: "name", type: "String", subgraph: "Rfam")
  last_name: String @source(name: "last_name", type: "String", subgraph: "Rfam")
  initials: String @source(name: "initials", type: "String", subgraph: "Rfam")
  orcid: String @source(name: "orcid", type: "String", subgraph: "Rfam")
  synonyms: String @source(name: "synonyms", type: "String", subgraph: "Rfam")
}

input author_OrderByInput @source(name: "author_OrderByInput", subgraph: "Rfam") {
  author_id: OrderBy @source(name: "author_id", type: "OrderBy", subgraph: "Rfam")
  name: OrderBy @source(name: "name", type: "OrderBy", subgraph: "Rfam")
  last_name: OrderBy @source(name: "last_name", type: "OrderBy", subgraph: "Rfam")
  initials: OrderBy @source(name: "initials", type: "OrderBy", subgraph: "Rfam")
  orcid: OrderBy @source(name: "orcid", type: "OrderBy", subgraph: "Rfam")
  synonyms: OrderBy @source(name: "synonyms", type: "OrderBy", subgraph: "Rfam")
}

type db_version @source(name: "db_version", subgraph: "Rfam") {
  rfam_release: Float! @source(name: "rfam_release", type: "Float!", subgraph: "Rfam")
  rfam_release_date: DateTime! @source(name: "rfam_release_date", type: "DateTime!", subgraph: "Rfam")
  number_families: Int! @source(name: "number_families", type: "Int!", subgraph: "Rfam")
  embl_release: String! @source(name: "embl_release", type: "String!", subgraph: "Rfam")
  genome_collection_date: DateTime @source(name: "genome_collection_date", type: "DateTime", subgraph: "Rfam")
  refseq_version: Int @source(name: "refseq_version", type: "Int", subgraph: "Rfam")
  pdb_date: DateTime @source(name: "pdb_date", type: "DateTime", subgraph: "Rfam")
  infernal_version: String @source(name: "infernal_version", type: "String", subgraph: "Rfam")
}

input db_version_WhereInput @source(name: "db_version_WhereInput", subgraph: "Rfam") {
  rfam_release: String @source(name: "rfam_release", type: "String", subgraph: "Rfam")
  rfam_release_date: String @source(name: "rfam_release_date", type: "String", subgraph: "Rfam")
  number_families: String @source(name: "number_families", type: "String", subgraph: "Rfam")
  embl_release: String @source(name: "embl_release", type: "String", subgraph: "Rfam")
  genome_collection_date: String @source(name: "genome_collection_date", type: "String", subgraph: "Rfam")
  refseq_version: String @source(name: "refseq_version", type: "String", subgraph: "Rfam")
  pdb_date: String @source(name: "pdb_date", type: "String", subgraph: "Rfam")
  infernal_version: String @source(name: "infernal_version", type: "String", subgraph: "Rfam")
}

input db_version_OrderByInput @source(name: "db_version_OrderByInput", subgraph: "Rfam") {
  rfam_release: OrderBy @source(name: "rfam_release", type: "OrderBy", subgraph: "Rfam")
  rfam_release_date: OrderBy @source(name: "rfam_release_date", type: "OrderBy", subgraph: "Rfam")
  number_families: OrderBy @source(name: "number_families", type: "OrderBy", subgraph: "Rfam")
  embl_release: OrderBy @source(name: "embl_release", type: "OrderBy", subgraph: "Rfam")
  genome_collection_date: OrderBy @source(name: "genome_collection_date", type: "OrderBy", subgraph: "Rfam")
  refseq_version: OrderBy @source(name: "refseq_version", type: "OrderBy", subgraph: "Rfam")
  pdb_date: OrderBy @source(name: "pdb_date", type: "OrderBy", subgraph: "Rfam")
  infernal_version: OrderBy @source(name: "infernal_version", type: "OrderBy", subgraph: "Rfam")
}

type dead_clan @source(name: "dead_clan", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  """Added. Add author?"""
  clan_id: String! @source(name: "clan_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  user: String! @source(name: "user", type: "String!", subgraph: "Rfam")
}

input dead_clan_WhereInput @source(name: "dead_clan_WhereInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  """Added. Add author?"""
  clan_id: String @source(name: "clan_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  user: String @source(name: "user", type: "String", subgraph: "Rfam")
}

input dead_clan_OrderByInput @source(name: "dead_clan_OrderByInput", subgraph: "Rfam") {
  clan_acc: OrderBy @source(name: "clan_acc", type: "OrderBy", subgraph: "Rfam")
  """Added. Add author?"""
  clan_id: OrderBy @source(name: "clan_id", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  forward_to: OrderBy @source(name: "forward_to", type: "OrderBy", subgraph: "Rfam")
  user: OrderBy @source(name: "user", type: "OrderBy", subgraph: "Rfam")
}

type dead_family @source(name: "dead_family", subgraph: "Rfam") {
  """record the author???"""
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfam_id: String! @source(name: "rfam_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  """
  wikipedia page title
  
  """
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  user: String! @source(name: "user", type: "String!", subgraph: "Rfam")
}

input dead_family_WhereInput @source(name: "dead_family_WhereInput", subgraph: "Rfam") {
  """record the author???"""
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  """
  wikipedia page title
  
  """
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  user: String @source(name: "user", type: "String", subgraph: "Rfam")
}

input dead_family_OrderByInput @source(name: "dead_family_OrderByInput", subgraph: "Rfam") {
  """record the author???"""
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  rfam_id: OrderBy @source(name: "rfam_id", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  forward_to: OrderBy @source(name: "forward_to", type: "OrderBy", subgraph: "Rfam")
  """
  wikipedia page title
  
  """
  title: OrderBy @source(name: "title", type: "OrderBy", subgraph: "Rfam")
  user: OrderBy @source(name: "user", type: "OrderBy", subgraph: "Rfam")
}

type ensembl_names @source(name: "ensembl_names", subgraph: "Rfam") {
  insdc: String! @source(name: "insdc", type: "String!", subgraph: "Rfam")
  ensembl: String @source(name: "ensembl", type: "String", subgraph: "Rfam")
}

input ensembl_names_WhereInput @source(name: "ensembl_names_WhereInput", subgraph: "Rfam") {
  insdc: String @source(name: "insdc", type: "String", subgraph: "Rfam")
  ensembl: String @source(name: "ensembl", type: "String", subgraph: "Rfam")
}

input ensembl_names_OrderByInput @source(name: "ensembl_names_OrderByInput", subgraph: "Rfam") {
  insdc: OrderBy @source(name: "insdc", type: "OrderBy", subgraph: "Rfam")
  ensembl: OrderBy @source(name: "ensembl", type: "OrderBy", subgraph: "Rfam")
}

type family_author @source(name: "family_author", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  author_id: Int! @source(name: "author_id", type: "Int!", subgraph: "Rfam")
  desc_order: Int! @source(name: "desc_order", type: "Int!", subgraph: "Rfam")
}

input family_author_WhereInput @source(name: "family_author_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  author_id: String @source(name: "author_id", type: "String", subgraph: "Rfam")
  desc_order: String @source(name: "desc_order", type: "String", subgraph: "Rfam")
}

input family_author_OrderByInput @source(name: "family_author_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  author_id: OrderBy @source(name: "author_id", type: "OrderBy", subgraph: "Rfam")
  desc_order: OrderBy @source(name: "desc_order", type: "OrderBy", subgraph: "Rfam")
}

type genome @source(name: "genome", subgraph: "Rfam") {
  """This should be """
  upid: String! @source(name: "upid", type: "String!", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: Int @source(name: "assembly_version", type: "Int", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: Int @source(name: "wgs_version", type: "Int", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: genome_assembly_level @source(name: "assembly_level", type: "genome_assembly_level", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: BigInt @source(name: "total_length", type: "BigInt", subgraph: "Rfam")
  ungapped_length: BigInt @source(name: "ungapped_length", type: "BigInt", subgraph: "Rfam")
  circular: Int @source(name: "circular", type: "Int", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: Int @source(name: "num_rfam_regions", type: "Int", subgraph: "Rfam")
  num_families: Int @source(name: "num_families", type: "Int", subgraph: "Rfam")
  is_reference: Int! @source(name: "is_reference", type: "Int!", subgraph: "Rfam")
  is_representative: Int! @source(name: "is_representative", type: "Int!", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp! @source(name: "updated", type: "Timestamp!", subgraph: "Rfam")
}

enum genome_assembly_level @source(name: "genome_assembly_level", subgraph: "Rfam") {
  contig @source(name: "contig", subgraph: "Rfam")
  chromosome @source(name: "chromosome", subgraph: "Rfam")
  scaffold @source(name: "scaffold", subgraph: "Rfam")
  complete_genome @source(name: "complete_genome", subgraph: "Rfam")
}

input genome_WhereInput @source(name: "genome_WhereInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: String @source(name: "assembly_version", type: "String", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: String @source(name: "wgs_version", type: "String", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: String @source(name: "assembly_level", type: "String", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: String @source(name: "total_length", type: "String", subgraph: "Rfam")
  ungapped_length: String @source(name: "ungapped_length", type: "String", subgraph: "Rfam")
  circular: String @source(name: "circular", type: "String", subgraph: "Rfam")
  ncbi_id: String @source(name: "ncbi_id", type: "String", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: String @source(name: "num_rfam_regions", type: "String", subgraph: "Rfam")
  num_families: String @source(name: "num_families", type: "String", subgraph: "Rfam")
  is_reference: String @source(name: "is_reference", type: "String", subgraph: "Rfam")
  is_representative: String @source(name: "is_representative", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  updated: String @source(name: "updated", type: "String", subgraph: "Rfam")
}

input genome_OrderByInput @source(name: "genome_OrderByInput", subgraph: "Rfam") {
  """This should be """
  upid: OrderBy @source(name: "upid", type: "OrderBy", subgraph: "Rfam")
  assembly_acc: OrderBy @source(name: "assembly_acc", type: "OrderBy", subgraph: "Rfam")
  assembly_version: OrderBy @source(name: "assembly_version", type: "OrderBy", subgraph: "Rfam")
  wgs_acc: OrderBy @source(name: "wgs_acc", type: "OrderBy", subgraph: "Rfam")
  wgs_version: OrderBy @source(name: "wgs_version", type: "OrderBy", subgraph: "Rfam")
  assembly_name: OrderBy @source(name: "assembly_name", type: "OrderBy", subgraph: "Rfam")
  assembly_level: OrderBy @source(name: "assembly_level", type: "OrderBy", subgraph: "Rfam")
  study_ref: OrderBy @source(name: "study_ref", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  total_length: OrderBy @source(name: "total_length", type: "OrderBy", subgraph: "Rfam")
  ungapped_length: OrderBy @source(name: "ungapped_length", type: "OrderBy", subgraph: "Rfam")
  circular: OrderBy @source(name: "circular", type: "OrderBy", subgraph: "Rfam")
  ncbi_id: OrderBy @source(name: "ncbi_id", type: "OrderBy", subgraph: "Rfam")
  scientific_name: OrderBy @source(name: "scientific_name", type: "OrderBy", subgraph: "Rfam")
  common_name: OrderBy @source(name: "common_name", type: "OrderBy", subgraph: "Rfam")
  kingdom: OrderBy @source(name: "kingdom", type: "OrderBy", subgraph: "Rfam")
  num_rfam_regions: OrderBy @source(name: "num_rfam_regions", type: "OrderBy", subgraph: "Rfam")
  num_families: OrderBy @source(name: "num_families", type: "OrderBy", subgraph: "Rfam")
  is_reference: OrderBy @source(name: "is_reference", type: "OrderBy", subgraph: "Rfam")
  is_representative: OrderBy @source(name: "is_representative", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  updated: OrderBy @source(name: "updated", type: "OrderBy", subgraph: "Rfam")
}

type genome_temp @source(name: "genome_temp", subgraph: "Rfam") {
  """This should be """
  upid: String! @source(name: "upid", type: "String!", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: Int @source(name: "assembly_version", type: "Int", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: Int @source(name: "wgs_version", type: "Int", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: genome_temp_assembly_level @source(name: "assembly_level", type: "genome_temp_assembly_level", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: BigInt @source(name: "total_length", type: "BigInt", subgraph: "Rfam")
  ungapped_length: BigInt @source(name: "ungapped_length", type: "BigInt", subgraph: "Rfam")
  circular: Int @source(name: "circular", type: "Int", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: Int @source(name: "num_rfam_regions", type: "Int", subgraph: "Rfam")
  num_families: Int @source(name: "num_families", type: "Int", subgraph: "Rfam")
  is_reference: Int! @source(name: "is_reference", type: "Int!", subgraph: "Rfam")
  is_representative: Int! @source(name: "is_representative", type: "Int!", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp! @source(name: "updated", type: "Timestamp!", subgraph: "Rfam")
}

enum genome_temp_assembly_level @source(name: "genome_temp_assembly_level", subgraph: "Rfam") {
  contig @source(name: "contig", subgraph: "Rfam")
  chromosome @source(name: "chromosome", subgraph: "Rfam")
  scaffold @source(name: "scaffold", subgraph: "Rfam")
  complete_genome @source(name: "complete_genome", subgraph: "Rfam")
}

input genome_temp_WhereInput @source(name: "genome_temp_WhereInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: String @source(name: "assembly_version", type: "String", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: String @source(name: "wgs_version", type: "String", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: String @source(name: "assembly_level", type: "String", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: String @source(name: "total_length", type: "String", subgraph: "Rfam")
  ungapped_length: String @source(name: "ungapped_length", type: "String", subgraph: "Rfam")
  circular: String @source(name: "circular", type: "String", subgraph: "Rfam")
  ncbi_id: String @source(name: "ncbi_id", type: "String", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: String @source(name: "num_rfam_regions", type: "String", subgraph: "Rfam")
  num_families: String @source(name: "num_families", type: "String", subgraph: "Rfam")
  is_reference: String @source(name: "is_reference", type: "String", subgraph: "Rfam")
  is_representative: String @source(name: "is_representative", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  updated: String @source(name: "updated", type: "String", subgraph: "Rfam")
}

input genome_temp_OrderByInput @source(name: "genome_temp_OrderByInput", subgraph: "Rfam") {
  """This should be """
  upid: OrderBy @source(name: "upid", type: "OrderBy", subgraph: "Rfam")
  assembly_acc: OrderBy @source(name: "assembly_acc", type: "OrderBy", subgraph: "Rfam")
  assembly_version: OrderBy @source(name: "assembly_version", type: "OrderBy", subgraph: "Rfam")
  wgs_acc: OrderBy @source(name: "wgs_acc", type: "OrderBy", subgraph: "Rfam")
  wgs_version: OrderBy @source(name: "wgs_version", type: "OrderBy", subgraph: "Rfam")
  assembly_name: OrderBy @source(name: "assembly_name", type: "OrderBy", subgraph: "Rfam")
  assembly_level: OrderBy @source(name: "assembly_level", type: "OrderBy", subgraph: "Rfam")
  study_ref: OrderBy @source(name: "study_ref", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  total_length: OrderBy @source(name: "total_length", type: "OrderBy", subgraph: "Rfam")
  ungapped_length: OrderBy @source(name: "ungapped_length", type: "OrderBy", subgraph: "Rfam")
  circular: OrderBy @source(name: "circular", type: "OrderBy", subgraph: "Rfam")
  ncbi_id: OrderBy @source(name: "ncbi_id", type: "OrderBy", subgraph: "Rfam")
  scientific_name: OrderBy @source(name: "scientific_name", type: "OrderBy", subgraph: "Rfam")
  common_name: OrderBy @source(name: "common_name", type: "OrderBy", subgraph: "Rfam")
  kingdom: OrderBy @source(name: "kingdom", type: "OrderBy", subgraph: "Rfam")
  num_rfam_regions: OrderBy @source(name: "num_rfam_regions", type: "OrderBy", subgraph: "Rfam")
  num_families: OrderBy @source(name: "num_families", type: "OrderBy", subgraph: "Rfam")
  is_reference: OrderBy @source(name: "is_reference", type: "OrderBy", subgraph: "Rfam")
  is_representative: OrderBy @source(name: "is_representative", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  updated: OrderBy @source(name: "updated", type: "OrderBy", subgraph: "Rfam")
}

type genseq @source(name: "genseq", subgraph: "Rfam") {
  """This should be """
  upid: String! @source(name: "upid", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input genseq_WhereInput @source(name: "genseq_WhereInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input genseq_OrderByInput @source(name: "genseq_OrderByInput", subgraph: "Rfam") {
  """This should be """
  upid: OrderBy @source(name: "upid", type: "OrderBy", subgraph: "Rfam")
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  chromosome_name: OrderBy @source(name: "chromosome_name", type: "OrderBy", subgraph: "Rfam")
  chromosome_type: OrderBy @source(name: "chromosome_type", type: "OrderBy", subgraph: "Rfam")
  version: OrderBy @source(name: "version", type: "OrderBy", subgraph: "Rfam")
}

type genseq_temp @source(name: "genseq_temp", subgraph: "Rfam") {
  """This should be """
  upid: String! @source(name: "upid", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input genseq_temp_WhereInput @source(name: "genseq_temp_WhereInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input genseq_temp_OrderByInput @source(name: "genseq_temp_OrderByInput", subgraph: "Rfam") {
  """This should be """
  upid: OrderBy @source(name: "upid", type: "OrderBy", subgraph: "Rfam")
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  chromosome_name: OrderBy @source(name: "chromosome_name", type: "OrderBy", subgraph: "Rfam")
  chromosome_type: OrderBy @source(name: "chromosome_type", type: "OrderBy", subgraph: "Rfam")
  version: OrderBy @source(name: "version", type: "OrderBy", subgraph: "Rfam")
}

type keywords @source(name: "keywords", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  rfam_general: String @source(name: "rfam_general", type: "String", subgraph: "Rfam")
  literature: String @source(name: "literature", type: "String", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  pdb_mappings: String @source(name: "pdb_mappings", type: "String", subgraph: "Rfam")
  clan_info: String @source(name: "clan_info", type: "String", subgraph: "Rfam")
}

input keywords_WhereInput @source(name: "keywords_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  rfam_general: String @source(name: "rfam_general", type: "String", subgraph: "Rfam")
  literature: String @source(name: "literature", type: "String", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  pdb_mappings: String @source(name: "pdb_mappings", type: "String", subgraph: "Rfam")
  clan_info: String @source(name: "clan_info", type: "String", subgraph: "Rfam")
}

input keywords_OrderByInput @source(name: "keywords_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  rfam_id: OrderBy @source(name: "rfam_id", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  rfam_general: OrderBy @source(name: "rfam_general", type: "OrderBy", subgraph: "Rfam")
  literature: OrderBy @source(name: "literature", type: "OrderBy", subgraph: "Rfam")
  wiki: OrderBy @source(name: "wiki", type: "OrderBy", subgraph: "Rfam")
  pdb_mappings: OrderBy @source(name: "pdb_mappings", type: "OrderBy", subgraph: "Rfam")
  clan_info: OrderBy @source(name: "clan_info", type: "OrderBy", subgraph: "Rfam")
}

type motif @source(name: "motif", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  num_seed: BigInt @source(name: "num_seed", type: "BigInt", subgraph: "Rfam")
  average_id: Float @source(name: "average_id", type: "Float", subgraph: "Rfam")
  average_sqlen: Float @source(name: "average_sqlen", type: "Float", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp! @source(name: "updated", type: "Timestamp!", subgraph: "Rfam")
  motif_database_link(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_database_link_WhereInput @source(name: "where", type: "motif_database_link_WhereInput", subgraph: "Rfam"), orderBy: motif_database_link_OrderByInput @source(name: "orderBy", type: "motif_database_link_OrderByInput", subgraph: "Rfam")): [motif_database_link] @mysqlSelect(table: "motif_database_link", columnMap: [["motif_acc", "motif_acc"]]) @source(name: "motif_database_link", type: "[motif_database_link]", subgraph: "Rfam")
  motif_file(limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam"), where: motif_file_WhereInput @source(name: "where", type: "motif_file_WhereInput", subgraph: "Rfam"), orderBy: motif_file_OrderByInput @source(name: "orderBy", type: "motif_file_OrderByInput", subgraph: "Rfam")): [motif_file] @mysqlSelect(table: "motif_file", columnMap: [["motif_acc", "motif_acc"]]) @source(name: "motif_file", type: "[motif_file]", subgraph: "Rfam")
}

type motif_database_link @source(name: "motif_database_link", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  db_id: String! @source(name: "db_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String! @source(name: "db_link", type: "String!", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
  motif(where: motif_WhereInput @source(name: "where", type: "motif_WhereInput", subgraph: "Rfam"), orderBy: motif_OrderByInput @source(name: "orderBy", type: "motif_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [motif] @mysqlSelect(table: "motif", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(name: "motif", type: "[motif]", subgraph: "Rfam")
}

input motif_WhereInput @source(name: "motif_WhereInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: String @source(name: "gathering_cutoff", type: "String", subgraph: "Rfam")
  trusted_cutoff: String @source(name: "trusted_cutoff", type: "String", subgraph: "Rfam")
  noise_cutoff: String @source(name: "noise_cutoff", type: "String", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  num_seed: String @source(name: "num_seed", type: "String", subgraph: "Rfam")
  average_id: String @source(name: "average_id", type: "String", subgraph: "Rfam")
  average_sqlen: String @source(name: "average_sqlen", type: "String", subgraph: "Rfam")
  ecmli_lambda: String @source(name: "ecmli_lambda", type: "String", subgraph: "Rfam")
  ecmli_mu: String @source(name: "ecmli_mu", type: "String", subgraph: "Rfam")
  ecmli_cal_db: String @source(name: "ecmli_cal_db", type: "String", subgraph: "Rfam")
  ecmli_cal_hits: String @source(name: "ecmli_cal_hits", type: "String", subgraph: "Rfam")
  maxl: String @source(name: "maxl", type: "String", subgraph: "Rfam")
  clen: String @source(name: "clen", type: "String", subgraph: "Rfam")
  match_pair_node: String @source(name: "match_pair_node", type: "String", subgraph: "Rfam")
  hmm_tau: String @source(name: "hmm_tau", type: "String", subgraph: "Rfam")
  hmm_lambda: String @source(name: "hmm_lambda", type: "String", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  created: String @source(name: "created", type: "String", subgraph: "Rfam")
  updated: String @source(name: "updated", type: "String", subgraph: "Rfam")
}

input motif_OrderByInput @source(name: "motif_OrderByInput", subgraph: "Rfam") {
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  motif_id: OrderBy @source(name: "motif_id", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  author: OrderBy @source(name: "author", type: "OrderBy", subgraph: "Rfam")
  seed_source: OrderBy @source(name: "seed_source", type: "OrderBy", subgraph: "Rfam")
  gathering_cutoff: OrderBy @source(name: "gathering_cutoff", type: "OrderBy", subgraph: "Rfam")
  trusted_cutoff: OrderBy @source(name: "trusted_cutoff", type: "OrderBy", subgraph: "Rfam")
  noise_cutoff: OrderBy @source(name: "noise_cutoff", type: "OrderBy", subgraph: "Rfam")
  cmbuild: OrderBy @source(name: "cmbuild", type: "OrderBy", subgraph: "Rfam")
  cmcalibrate: OrderBy @source(name: "cmcalibrate", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
  num_seed: OrderBy @source(name: "num_seed", type: "OrderBy", subgraph: "Rfam")
  average_id: OrderBy @source(name: "average_id", type: "OrderBy", subgraph: "Rfam")
  average_sqlen: OrderBy @source(name: "average_sqlen", type: "OrderBy", subgraph: "Rfam")
  ecmli_lambda: OrderBy @source(name: "ecmli_lambda", type: "OrderBy", subgraph: "Rfam")
  ecmli_mu: OrderBy @source(name: "ecmli_mu", type: "OrderBy", subgraph: "Rfam")
  ecmli_cal_db: OrderBy @source(name: "ecmli_cal_db", type: "OrderBy", subgraph: "Rfam")
  ecmli_cal_hits: OrderBy @source(name: "ecmli_cal_hits", type: "OrderBy", subgraph: "Rfam")
  maxl: OrderBy @source(name: "maxl", type: "OrderBy", subgraph: "Rfam")
  clen: OrderBy @source(name: "clen", type: "OrderBy", subgraph: "Rfam")
  match_pair_node: OrderBy @source(name: "match_pair_node", type: "OrderBy", subgraph: "Rfam")
  hmm_tau: OrderBy @source(name: "hmm_tau", type: "OrderBy", subgraph: "Rfam")
  hmm_lambda: OrderBy @source(name: "hmm_lambda", type: "OrderBy", subgraph: "Rfam")
  wiki: OrderBy @source(name: "wiki", type: "OrderBy", subgraph: "Rfam")
  created: OrderBy @source(name: "created", type: "OrderBy", subgraph: "Rfam")
  updated: OrderBy @source(name: "updated", type: "OrderBy", subgraph: "Rfam")
}

input motif_database_link_WhereInput @source(name: "motif_database_link_WhereInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  db_id: String @source(name: "db_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String @source(name: "db_link", type: "String", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input motif_database_link_OrderByInput @source(name: "motif_database_link_OrderByInput", subgraph: "Rfam") {
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  db_id: OrderBy @source(name: "db_id", type: "OrderBy", subgraph: "Rfam")
  comment: OrderBy @source(name: "comment", type: "OrderBy", subgraph: "Rfam")
  db_link: OrderBy @source(name: "db_link", type: "OrderBy", subgraph: "Rfam")
  other_params: OrderBy @source(name: "other_params", type: "OrderBy", subgraph: "Rfam")
}

type motif_file @source(name: "motif_file", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  seed: String! @source(name: "seed", type: "String!", subgraph: "Rfam")
  cm: String! @source(name: "cm", type: "String!", subgraph: "Rfam")
  motif(where: motif_WhereInput @source(name: "where", type: "motif_WhereInput", subgraph: "Rfam"), orderBy: motif_OrderByInput @source(name: "orderBy", type: "motif_OrderByInput", subgraph: "Rfam"), limit: Int @source(name: "limit", type: "Int", subgraph: "Rfam"), offset: Int @source(name: "offset", type: "Int", subgraph: "Rfam")): [motif] @mysqlSelect(table: "motif", columnMap: [["motif_acc", "motif_acc"]]) @mysqlTableForeign(columnName: "motif_acc") @source(name: "motif", type: "[motif]", subgraph: "Rfam")
}

input motif_file_WhereInput @source(name: "motif_file_WhereInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  seed: String @source(name: "seed", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
}

input motif_file_OrderByInput @source(name: "motif_file_OrderByInput", subgraph: "Rfam") {
  motif_acc: OrderBy @source(name: "motif_acc", type: "OrderBy", subgraph: "Rfam")
  seed: OrderBy @source(name: "seed", type: "OrderBy", subgraph: "Rfam")
  cm: OrderBy @source(name: "cm", type: "OrderBy", subgraph: "Rfam")
}

type pdb_full_region @source(name: "pdb_full_region", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int! @source(name: "pdb_start", type: "Int!", subgraph: "Rfam")
  pdb_end: Int! @source(name: "pdb_end", type: "Int!", subgraph: "Rfam")
  bit_score: Float! @source(name: "bit_score", type: "Float!", subgraph: "Rfam")
  evalue_score: String! @source(name: "evalue_score", type: "String!", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: Int! @source(name: "is_significant", type: "Int!", subgraph: "Rfam")
}

input pdb_full_region_WhereInput @source(name: "pdb_full_region_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: String @source(name: "pdb_start", type: "String", subgraph: "Rfam")
  pdb_end: String @source(name: "pdb_end", type: "String", subgraph: "Rfam")
  bit_score: String @source(name: "bit_score", type: "String", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: String @source(name: "cm_start", type: "String", subgraph: "Rfam")
  cm_end: String @source(name: "cm_end", type: "String", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: String @source(name: "is_significant", type: "String", subgraph: "Rfam")
}

input pdb_full_region_OrderByInput @source(name: "pdb_full_region_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  pdb_id: OrderBy @source(name: "pdb_id", type: "OrderBy", subgraph: "Rfam")
  chain: OrderBy @source(name: "chain", type: "OrderBy", subgraph: "Rfam")
  pdb_start: OrderBy @source(name: "pdb_start", type: "OrderBy", subgraph: "Rfam")
  pdb_end: OrderBy @source(name: "pdb_end", type: "OrderBy", subgraph: "Rfam")
  bit_score: OrderBy @source(name: "bit_score", type: "OrderBy", subgraph: "Rfam")
  evalue_score: OrderBy @source(name: "evalue_score", type: "OrderBy", subgraph: "Rfam")
  cm_start: OrderBy @source(name: "cm_start", type: "OrderBy", subgraph: "Rfam")
  cm_end: OrderBy @source(name: "cm_end", type: "OrderBy", subgraph: "Rfam")
  hex_colour: OrderBy @source(name: "hex_colour", type: "OrderBy", subgraph: "Rfam")
  is_significant: OrderBy @source(name: "is_significant", type: "OrderBy", subgraph: "Rfam")
}

type pdb_full_region_old @source(name: "pdb_full_region_old", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int! @source(name: "pdb_start", type: "Int!", subgraph: "Rfam")
  pdb_end: Int! @source(name: "pdb_end", type: "Int!", subgraph: "Rfam")
  bit_score: Float! @source(name: "bit_score", type: "Float!", subgraph: "Rfam")
  evalue_score: String! @source(name: "evalue_score", type: "String!", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: Int! @source(name: "is_significant", type: "Int!", subgraph: "Rfam")
}

input pdb_full_region_old_WhereInput @source(name: "pdb_full_region_old_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: String @source(name: "pdb_start", type: "String", subgraph: "Rfam")
  pdb_end: String @source(name: "pdb_end", type: "String", subgraph: "Rfam")
  bit_score: String @source(name: "bit_score", type: "String", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: String @source(name: "cm_start", type: "String", subgraph: "Rfam")
  cm_end: String @source(name: "cm_end", type: "String", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: String @source(name: "is_significant", type: "String", subgraph: "Rfam")
}

input pdb_full_region_old_OrderByInput @source(name: "pdb_full_region_old_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  pdb_id: OrderBy @source(name: "pdb_id", type: "OrderBy", subgraph: "Rfam")
  chain: OrderBy @source(name: "chain", type: "OrderBy", subgraph: "Rfam")
  pdb_start: OrderBy @source(name: "pdb_start", type: "OrderBy", subgraph: "Rfam")
  pdb_end: OrderBy @source(name: "pdb_end", type: "OrderBy", subgraph: "Rfam")
  bit_score: OrderBy @source(name: "bit_score", type: "OrderBy", subgraph: "Rfam")
  evalue_score: OrderBy @source(name: "evalue_score", type: "OrderBy", subgraph: "Rfam")
  cm_start: OrderBy @source(name: "cm_start", type: "OrderBy", subgraph: "Rfam")
  cm_end: OrderBy @source(name: "cm_end", type: "OrderBy", subgraph: "Rfam")
  hex_colour: OrderBy @source(name: "hex_colour", type: "OrderBy", subgraph: "Rfam")
  is_significant: OrderBy @source(name: "is_significant", type: "OrderBy", subgraph: "Rfam")
}

type rfamseq_temp @source(name: "rfamseq_temp", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String! @source(name: "rfamseq_acc", type: "String!", subgraph: "Rfam")
  accession: String! @source(name: "accession", type: "String!", subgraph: "Rfam")
  version: Int! @source(name: "version", type: "Int!", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  mol_type: rfamseq_temp_mol_type! @source(name: "mol_type", type: "rfamseq_temp_mol_type!", subgraph: "Rfam")
  length: Int @source(name: "length", type: "Int", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String! @source(name: "source", type: "String!", subgraph: "Rfam")
}

enum rfamseq_temp_mol_type @source(name: "rfamseq_temp_mol_type", subgraph: "Rfam") {
  protein @source(name: "protein", subgraph: "Rfam")
  genomic_DNA @source(name: "genomic_DNA", subgraph: "Rfam")
  DNA @source(name: "DNA", subgraph: "Rfam")
  ss_DNA @source(name: "ss_DNA", subgraph: "Rfam")
  RNA @source(name: "RNA", subgraph: "Rfam")
  genomic_RNA @source(name: "genomic_RNA", subgraph: "Rfam")
  ds_RNA @source(name: "ds_RNA", subgraph: "Rfam")
  ss_cRNA @source(name: "ss_cRNA", subgraph: "Rfam")
  ss_RNA @source(name: "ss_RNA", subgraph: "Rfam")
  mRNA @source(name: "mRNA", subgraph: "Rfam")
  tRNA @source(name: "tRNA", subgraph: "Rfam")
  rRNA @source(name: "rRNA", subgraph: "Rfam")
  snoRNA @source(name: "snoRNA", subgraph: "Rfam")
  snRNA @source(name: "snRNA", subgraph: "Rfam")
  scRNA @source(name: "scRNA", subgraph: "Rfam")
  pre_RNA @source(name: "pre_RNA", subgraph: "Rfam")
  other_RNA @source(name: "other_RNA", subgraph: "Rfam")
  other_DNA @source(name: "other_DNA", subgraph: "Rfam")
  unassigned_DNA @source(name: "unassigned_DNA", subgraph: "Rfam")
  unassigned_RNA @source(name: "unassigned_RNA", subgraph: "Rfam")
  viral_cRNA @source(name: "viral_cRNA", subgraph: "Rfam")
  cRNA @source(name: "cRNA", subgraph: "Rfam")
  transcribed_RNA @source(name: "transcribed_RNA", subgraph: "Rfam")
  ncRNA @source(name: "ncRNA", subgraph: "Rfam")
  ribozyme @source(name: "ribozyme", subgraph: "Rfam")
  antisense_RNA @source(name: "antisense_RNA", subgraph: "Rfam")
  other @source(name: "other", subgraph: "Rfam")
}

input rfamseq_temp_WhereInput @source(name: "rfamseq_temp_WhereInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  accession: String @source(name: "accession", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
  ncbi_id: String @source(name: "ncbi_id", type: "String", subgraph: "Rfam")
  mol_type: String @source(name: "mol_type", type: "String", subgraph: "Rfam")
  length: String @source(name: "length", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String @source(name: "source", type: "String", subgraph: "Rfam")
}

input rfamseq_temp_OrderByInput @source(name: "rfamseq_temp_OrderByInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  accession: OrderBy @source(name: "accession", type: "OrderBy", subgraph: "Rfam")
  version: OrderBy @source(name: "version", type: "OrderBy", subgraph: "Rfam")
  ncbi_id: OrderBy @source(name: "ncbi_id", type: "OrderBy", subgraph: "Rfam")
  mol_type: OrderBy @source(name: "mol_type", type: "OrderBy", subgraph: "Rfam")
  length: OrderBy @source(name: "length", type: "OrderBy", subgraph: "Rfam")
  description: OrderBy @source(name: "description", type: "OrderBy", subgraph: "Rfam")
  previous_acc: OrderBy @source(name: "previous_acc", type: "OrderBy", subgraph: "Rfam")
  source: OrderBy @source(name: "source", type: "OrderBy", subgraph: "Rfam")
}

type rnacentral_matches @source(name: "rnacentral_matches", subgraph: "Rfam") {
  rfamseq_acc: String! @source(name: "rfamseq_acc", type: "String!", subgraph: "Rfam")
  seq_start: BigInt! @source(name: "seq_start", type: "BigInt!", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  md5: String! @source(name: "md5", type: "String!", subgraph: "Rfam")
  rnacentral_id: String @source(name: "rnacentral_id", type: "String", subgraph: "Rfam")
  type: rnacentral_matches_type @source(name: "type", type: "rnacentral_matches_type", subgraph: "Rfam")
}

enum rnacentral_matches_type @source(name: "rnacentral_matches_type", subgraph: "Rfam") {
  seed @source(name: "seed", subgraph: "Rfam")
  full @source(name: "full", subgraph: "Rfam")
}

input rnacentral_matches_WhereInput @source(name: "rnacentral_matches_WhereInput", subgraph: "Rfam") {
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: String @source(name: "seq_start", type: "String", subgraph: "Rfam")
  seq_end: String @source(name: "seq_end", type: "String", subgraph: "Rfam")
  md5: String @source(name: "md5", type: "String", subgraph: "Rfam")
  rnacentral_id: String @source(name: "rnacentral_id", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
}

input rnacentral_matches_OrderByInput @source(name: "rnacentral_matches_OrderByInput", subgraph: "Rfam") {
  rfamseq_acc: OrderBy @source(name: "rfamseq_acc", type: "OrderBy", subgraph: "Rfam")
  seq_start: OrderBy @source(name: "seq_start", type: "OrderBy", subgraph: "Rfam")
  seq_end: OrderBy @source(name: "seq_end", type: "OrderBy", subgraph: "Rfam")
  md5: OrderBy @source(name: "md5", type: "OrderBy", subgraph: "Rfam")
  rnacentral_id: OrderBy @source(name: "rnacentral_id", type: "OrderBy", subgraph: "Rfam")
  type: OrderBy @source(name: "type", type: "OrderBy", subgraph: "Rfam")
}

type rscape_annotations @source(name: "rscape_annotations", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  F: Float @source(name: "F", type: "Float", subgraph: "Rfam")
  sensitivity: Float @source(name: "sensitivity", type: "Float", subgraph: "Rfam")
  ppv: Float @source(name: "ppv", type: "Float", subgraph: "Rfam")
  true: Int @source(name: "true", type: "Int", subgraph: "Rfam")
  found: Int @source(name: "found", type: "Int", subgraph: "Rfam")
  tp: Int @source(name: "tp", type: "Int", subgraph: "Rfam")
  avgid: Float @source(name: "avgid", type: "Float", subgraph: "Rfam")
  alen: Int @source(name: "alen", type: "Int", subgraph: "Rfam")
  nseq: Int @source(name: "nseq", type: "Int", subgraph: "Rfam")
}

input rscape_annotations_WhereInput @source(name: "rscape_annotations_WhereInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  F: String @source(name: "F", type: "String", subgraph: "Rfam")
  sensitivity: String @source(name: "sensitivity", type: "String", subgraph: "Rfam")
  ppv: String @source(name: "ppv", type: "String", subgraph: "Rfam")
  true: String @source(name: "true", type: "String", subgraph: "Rfam")
  found: String @source(name: "found", type: "String", subgraph: "Rfam")
  tp: String @source(name: "tp", type: "String", subgraph: "Rfam")
  avgid: String @source(name: "avgid", type: "String", subgraph: "Rfam")
  alen: String @source(name: "alen", type: "String", subgraph: "Rfam")
  nseq: String @source(name: "nseq", type: "String", subgraph: "Rfam")
}

input rscape_annotations_OrderByInput @source(name: "rscape_annotations_OrderByInput", subgraph: "Rfam") {
  rfam_acc: OrderBy @source(name: "rfam_acc", type: "OrderBy", subgraph: "Rfam")
  F: OrderBy @source(name: "F", type: "OrderBy", subgraph: "Rfam")
  sensitivity: OrderBy @source(name: "sensitivity", type: "OrderBy", subgraph: "Rfam")
  ppv: OrderBy @source(name: "ppv", type: "OrderBy", subgraph: "Rfam")
  true: OrderBy @source(name: "true", type: "OrderBy", subgraph: "Rfam")
  found: OrderBy @source(name: "found", type: "OrderBy", subgraph: "Rfam")
  tp: OrderBy @source(name: "tp", type: "OrderBy", subgraph: "Rfam")
  avgid: OrderBy @source(name: "avgid", type: "OrderBy", subgraph: "Rfam")
  alen: OrderBy @source(name: "alen", type: "OrderBy", subgraph: "Rfam")
  nseq: OrderBy @source(name: "nseq", type: "OrderBy", subgraph: "Rfam")
}

type taxonomic_tree @source(name: "taxonomic_tree", subgraph: "Rfam") {
  ncbi_code: Int! @source(name: "ncbi_code", type: "Int!", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: Int @source(name: "lft", type: "Int", subgraph: "Rfam")
  rgt: Int @source(name: "rgt", type: "Int", subgraph: "Rfam")
  parent: String @source(name: "parent", type: "String", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
}

input taxonomic_tree_WhereInput @source(name: "taxonomic_tree_WhereInput", subgraph: "Rfam") {
  ncbi_code: String @source(name: "ncbi_code", type: "String", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: String @source(name: "lft", type: "String", subgraph: "Rfam")
  rgt: String @source(name: "rgt", type: "String", subgraph: "Rfam")
  parent: String @source(name: "parent", type: "String", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
}

input taxonomic_tree_OrderByInput @source(name: "taxonomic_tree_OrderByInput", subgraph: "Rfam") {
  ncbi_code: OrderBy @source(name: "ncbi_code", type: "OrderBy", subgraph: "Rfam")
  species: OrderBy @source(name: "species", type: "OrderBy", subgraph: "Rfam")
  taxonomy: OrderBy @source(name: "taxonomy", type: "OrderBy", subgraph: "Rfam")
  lft: OrderBy @source(name: "lft", type: "OrderBy", subgraph: "Rfam")
  rgt: OrderBy @source(name: "rgt", type: "OrderBy", subgraph: "Rfam")
  parent: OrderBy @source(name: "parent", type: "OrderBy", subgraph: "Rfam")
  level: OrderBy @source(name: "level", type: "OrderBy", subgraph: "Rfam")
}

type taxonomy_websearch @source(name: "taxonomy_websearch", subgraph: "Rfam") {
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  rgt: Int @source(name: "rgt", type: "Int", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: Int @source(name: "lft", type: "Int", subgraph: "Rfam")
  parent: Int @source(name: "parent", type: "Int", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
  minimal: Int! @source(name: "minimal", type: "Int!", subgraph: "Rfam")
  rank: String @source(name: "rank", type: "String", subgraph: "Rfam")
}

input taxonomy_websearch_WhereInput @source(name: "taxonomy_websearch_WhereInput", subgraph: "Rfam") {
  ncbi_id: String @source(name: "ncbi_id", type: "String", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  rgt: String @source(name: "rgt", type: "String", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: String @source(name: "lft", type: "String", subgraph: "Rfam")
  parent: String @source(name: "parent", type: "String", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
  minimal: String @source(name: "minimal", type: "String", subgraph: "Rfam")
  rank: String @source(name: "rank", type: "String", subgraph: "Rfam")
}

input taxonomy_websearch_OrderByInput @source(name: "taxonomy_websearch_OrderByInput", subgraph: "Rfam") {
  ncbi_id: OrderBy @source(name: "ncbi_id", type: "OrderBy", subgraph: "Rfam")
  species: OrderBy @source(name: "species", type: "OrderBy", subgraph: "Rfam")
  rgt: OrderBy @source(name: "rgt", type: "OrderBy", subgraph: "Rfam")
  taxonomy: OrderBy @source(name: "taxonomy", type: "OrderBy", subgraph: "Rfam")
  lft: OrderBy @source(name: "lft", type: "OrderBy", subgraph: "Rfam")
  parent: OrderBy @source(name: "parent", type: "OrderBy", subgraph: "Rfam")
  level: OrderBy @source(name: "level", type: "OrderBy", subgraph: "Rfam")
  minimal: OrderBy @source(name: "minimal", type: "OrderBy", subgraph: "Rfam")
  rank: OrderBy @source(name: "rank", type: "OrderBy", subgraph: "Rfam")
}

type version @source(name: "version", subgraph: "Rfam") {
  rfam_release: Float! @source(name: "rfam_release", type: "Float!", subgraph: "Rfam")
  rfam_release_date: Date! @source(name: "rfam_release_date", type: "Date!", subgraph: "Rfam")
  number_families: Int! @source(name: "number_families", type: "Int!", subgraph: "Rfam")
  embl_release: String! @source(name: "embl_release", type: "String!", subgraph: "Rfam")
}

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date @source(name: "Date", subgraph: "Rfam") @source(name: "Date", subgraph: "Rfam")

input version_WhereInput @source(name: "version_WhereInput", subgraph: "Rfam") {
  rfam_release: String @source(name: "rfam_release", type: "String", subgraph: "Rfam")
  rfam_release_date: String @source(name: "rfam_release_date", type: "String", subgraph: "Rfam")
  number_families: String @source(name: "number_families", type: "String", subgraph: "Rfam")
  embl_release: String @source(name: "embl_release", type: "String", subgraph: "Rfam")
}

input version_OrderByInput @source(name: "version_OrderByInput", subgraph: "Rfam") {
  rfam_release: OrderBy @source(name: "rfam_release", type: "OrderBy", subgraph: "Rfam")
  rfam_release_date: OrderBy @source(name: "rfam_release_date", type: "OrderBy", subgraph: "Rfam")
  number_families: OrderBy @source(name: "number_families", type: "OrderBy", subgraph: "Rfam")
  embl_release: OrderBy @source(name: "embl_release", type: "OrderBy", subgraph: "Rfam")
}

type Mutation {
  insert__annotated_file(_annotated_file: _annotated_file_InsertInput! @source(name: "_annotated_file", type: "_annotated_file_InsertInput", subgraph: "Rfam")): _annotated_file @mysqlInsert(table: "_annotated_file", primaryKeys: ["rfam_acc"]) @source(name: "insert__annotated_file", type: "_annotated_file", subgraph: "Rfam")
  update__annotated_file(_annotated_file: _annotated_file_UpdateInput! @source(name: "_annotated_file", type: "_annotated_file_UpdateInput", subgraph: "Rfam"), where: _annotated_file_WhereInput @source(name: "where", type: "_annotated_file_WhereInput", subgraph: "Rfam")): _annotated_file @mysqlUpdate(table: "_annotated_file") @source(name: "update__annotated_file", type: "_annotated_file", subgraph: "Rfam")
  delete__annotated_file(where: _annotated_file_WhereInput @source(name: "where", type: "_annotated_file_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "_annotated_file") @source(name: "delete__annotated_file", type: "Boolean", subgraph: "Rfam")
  insert__family_file(_family_file: _family_file_InsertInput! @source(name: "_family_file", type: "_family_file_InsertInput", subgraph: "Rfam")): _family_file @mysqlInsert(table: "_family_file", primaryKeys: []) @source(name: "insert__family_file", type: "_family_file", subgraph: "Rfam")
  update__family_file(_family_file: _family_file_UpdateInput! @source(name: "_family_file", type: "_family_file_UpdateInput", subgraph: "Rfam"), where: _family_file_WhereInput @source(name: "where", type: "_family_file_WhereInput", subgraph: "Rfam")): _family_file @mysqlUpdate(table: "_family_file") @source(name: "update__family_file", type: "_family_file", subgraph: "Rfam")
  delete__family_file(where: _family_file_WhereInput @source(name: "where", type: "_family_file_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "_family_file") @source(name: "delete__family_file", type: "Boolean", subgraph: "Rfam")
  insert__genome_data(_genome_data: _genome_data_InsertInput! @source(name: "_genome_data", type: "_genome_data_InsertInput", subgraph: "Rfam")): _genome_data @mysqlInsert(table: "_genome_data", primaryKeys: []) @source(name: "insert__genome_data", type: "_genome_data", subgraph: "Rfam")
  update__genome_data(_genome_data: _genome_data_UpdateInput! @source(name: "_genome_data", type: "_genome_data_UpdateInput", subgraph: "Rfam"), where: _genome_data_WhereInput @source(name: "where", type: "_genome_data_WhereInput", subgraph: "Rfam")): _genome_data @mysqlUpdate(table: "_genome_data") @source(name: "update__genome_data", type: "_genome_data", subgraph: "Rfam")
  delete__genome_data(where: _genome_data_WhereInput @source(name: "where", type: "_genome_data_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "_genome_data") @source(name: "delete__genome_data", type: "Boolean", subgraph: "Rfam")
  insert__lock(_lock: _lock_InsertInput! @source(name: "_lock", type: "_lock_InsertInput", subgraph: "Rfam")): _lock @mysqlInsert(table: "_lock", primaryKeys: []) @source(name: "insert__lock", type: "_lock", subgraph: "Rfam")
  update__lock(_lock: _lock_UpdateInput! @source(name: "_lock", type: "_lock_UpdateInput", subgraph: "Rfam"), where: _lock_WhereInput @source(name: "where", type: "_lock_WhereInput", subgraph: "Rfam")): _lock @mysqlUpdate(table: "_lock") @source(name: "update__lock", type: "_lock", subgraph: "Rfam")
  delete__lock(where: _lock_WhereInput @source(name: "where", type: "_lock_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "_lock") @source(name: "delete__lock", type: "Boolean", subgraph: "Rfam")
  insert__overlap(_overlap: _overlap_InsertInput! @source(name: "_overlap", type: "_overlap_InsertInput", subgraph: "Rfam")): _overlap @mysqlInsert(table: "_overlap", primaryKeys: ["auto_overlap"]) @source(name: "insert__overlap", type: "_overlap", subgraph: "Rfam")
  update__overlap(_overlap: _overlap_UpdateInput! @source(name: "_overlap", type: "_overlap_UpdateInput", subgraph: "Rfam"), where: _overlap_WhereInput @source(name: "where", type: "_overlap_WhereInput", subgraph: "Rfam")): _overlap @mysqlUpdate(table: "_overlap") @source(name: "update__overlap", type: "_overlap", subgraph: "Rfam")
  delete__overlap(where: _overlap_WhereInput @source(name: "where", type: "_overlap_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "_overlap") @source(name: "delete__overlap", type: "Boolean", subgraph: "Rfam")
  insert__overlap_membership(_overlap_membership: _overlap_membership_InsertInput! @source(name: "_overlap_membership", type: "_overlap_membership_InsertInput", subgraph: "Rfam")): _overlap_membership @mysqlInsert(table: "_overlap_membership", primaryKeys: []) @source(name: "insert__overlap_membership", type: "_overlap_membership", subgraph: "Rfam")
  update__overlap_membership(_overlap_membership: _overlap_membership_UpdateInput! @source(name: "_overlap_membership", type: "_overlap_membership_UpdateInput", subgraph: "Rfam"), where: _overlap_membership_WhereInput @source(name: "where", type: "_overlap_membership_WhereInput", subgraph: "Rfam")): _overlap_membership @mysqlUpdate(table: "_overlap_membership") @source(name: "update__overlap_membership", type: "_overlap_membership", subgraph: "Rfam")
  delete__overlap_membership(where: _overlap_membership_WhereInput @source(name: "where", type: "_overlap_membership_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "_overlap_membership") @source(name: "delete__overlap_membership", type: "Boolean", subgraph: "Rfam")
  insert__post_process(_post_process: _post_process_InsertInput! @source(name: "_post_process", type: "_post_process_InsertInput", subgraph: "Rfam")): _post_process @mysqlInsert(table: "_post_process", primaryKeys: []) @source(name: "insert__post_process", type: "_post_process", subgraph: "Rfam")
  update__post_process(_post_process: _post_process_UpdateInput! @source(name: "_post_process", type: "_post_process_UpdateInput", subgraph: "Rfam"), where: _post_process_WhereInput @source(name: "where", type: "_post_process_WhereInput", subgraph: "Rfam")): _post_process @mysqlUpdate(table: "_post_process") @source(name: "update__post_process", type: "_post_process", subgraph: "Rfam")
  delete__post_process(where: _post_process_WhereInput @source(name: "where", type: "_post_process_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "_post_process") @source(name: "delete__post_process", type: "Boolean", subgraph: "Rfam")
  insert_alignment_and_tree(alignment_and_tree: alignment_and_tree_InsertInput! @source(name: "alignment_and_tree", type: "alignment_and_tree_InsertInput", subgraph: "Rfam")): alignment_and_tree @mysqlInsert(table: "alignment_and_tree", primaryKeys: []) @source(name: "insert_alignment_and_tree", type: "alignment_and_tree", subgraph: "Rfam")
  update_alignment_and_tree(alignment_and_tree: alignment_and_tree_UpdateInput! @source(name: "alignment_and_tree", type: "alignment_and_tree_UpdateInput", subgraph: "Rfam"), where: alignment_and_tree_WhereInput @source(name: "where", type: "alignment_and_tree_WhereInput", subgraph: "Rfam")): alignment_and_tree @mysqlUpdate(table: "alignment_and_tree") @source(name: "update_alignment_and_tree", type: "alignment_and_tree", subgraph: "Rfam")
  delete_alignment_and_tree(where: alignment_and_tree_WhereInput @source(name: "where", type: "alignment_and_tree_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "alignment_and_tree") @source(name: "delete_alignment_and_tree", type: "Boolean", subgraph: "Rfam")
  insert_author(author: author_InsertInput! @source(name: "author", type: "author_InsertInput", subgraph: "Rfam")): author @mysqlInsert(table: "author", primaryKeys: ["author_id"]) @source(name: "insert_author", type: "author", subgraph: "Rfam")
  update_author(author: author_UpdateInput! @source(name: "author", type: "author_UpdateInput", subgraph: "Rfam"), where: author_WhereInput @source(name: "where", type: "author_WhereInput", subgraph: "Rfam")): author @mysqlUpdate(table: "author") @source(name: "update_author", type: "author", subgraph: "Rfam")
  delete_author(where: author_WhereInput @source(name: "where", type: "author_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "author") @source(name: "delete_author", type: "Boolean", subgraph: "Rfam")
  insert_clan(clan: clan_InsertInput! @source(name: "clan", type: "clan_InsertInput", subgraph: "Rfam")): clan @mysqlInsert(table: "clan", primaryKeys: ["clan_acc"]) @source(name: "insert_clan", type: "clan", subgraph: "Rfam")
  update_clan(clan: clan_UpdateInput! @source(name: "clan", type: "clan_UpdateInput", subgraph: "Rfam"), where: clan_WhereInput @source(name: "where", type: "clan_WhereInput", subgraph: "Rfam")): clan @mysqlUpdate(table: "clan") @source(name: "update_clan", type: "clan", subgraph: "Rfam")
  delete_clan(where: clan_WhereInput @source(name: "where", type: "clan_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "clan") @source(name: "delete_clan", type: "Boolean", subgraph: "Rfam")
  insert_clan_database_link(clan_database_link: clan_database_link_InsertInput! @source(name: "clan_database_link", type: "clan_database_link_InsertInput", subgraph: "Rfam")): clan_database_link @mysqlInsert(table: "clan_database_link", primaryKeys: []) @source(name: "insert_clan_database_link", type: "clan_database_link", subgraph: "Rfam")
  update_clan_database_link(clan_database_link: clan_database_link_UpdateInput! @source(name: "clan_database_link", type: "clan_database_link_UpdateInput", subgraph: "Rfam"), where: clan_database_link_WhereInput @source(name: "where", type: "clan_database_link_WhereInput", subgraph: "Rfam")): clan_database_link @mysqlUpdate(table: "clan_database_link") @source(name: "update_clan_database_link", type: "clan_database_link", subgraph: "Rfam")
  delete_clan_database_link(where: clan_database_link_WhereInput @source(name: "where", type: "clan_database_link_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "clan_database_link") @source(name: "delete_clan_database_link", type: "Boolean", subgraph: "Rfam")
  insert_clan_literature_reference(clan_literature_reference: clan_literature_reference_InsertInput! @source(name: "clan_literature_reference", type: "clan_literature_reference_InsertInput", subgraph: "Rfam")): clan_literature_reference @mysqlInsert(table: "clan_literature_reference", primaryKeys: []) @source(name: "insert_clan_literature_reference", type: "clan_literature_reference", subgraph: "Rfam")
  update_clan_literature_reference(clan_literature_reference: clan_literature_reference_UpdateInput! @source(name: "clan_literature_reference", type: "clan_literature_reference_UpdateInput", subgraph: "Rfam"), where: clan_literature_reference_WhereInput @source(name: "where", type: "clan_literature_reference_WhereInput", subgraph: "Rfam")): clan_literature_reference @mysqlUpdate(table: "clan_literature_reference") @source(name: "update_clan_literature_reference", type: "clan_literature_reference", subgraph: "Rfam")
  delete_clan_literature_reference(where: clan_literature_reference_WhereInput @source(name: "where", type: "clan_literature_reference_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "clan_literature_reference") @source(name: "delete_clan_literature_reference", type: "Boolean", subgraph: "Rfam")
  insert_clan_membership(clan_membership: clan_membership_InsertInput! @source(name: "clan_membership", type: "clan_membership_InsertInput", subgraph: "Rfam")): clan_membership @mysqlInsert(table: "clan_membership", primaryKeys: ["rfam_acc"]) @source(name: "insert_clan_membership", type: "clan_membership", subgraph: "Rfam")
  update_clan_membership(clan_membership: clan_membership_UpdateInput! @source(name: "clan_membership", type: "clan_membership_UpdateInput", subgraph: "Rfam"), where: clan_membership_WhereInput @source(name: "where", type: "clan_membership_WhereInput", subgraph: "Rfam")): clan_membership @mysqlUpdate(table: "clan_membership") @source(name: "update_clan_membership", type: "clan_membership", subgraph: "Rfam")
  delete_clan_membership(where: clan_membership_WhereInput @source(name: "where", type: "clan_membership_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "clan_membership") @source(name: "delete_clan_membership", type: "Boolean", subgraph: "Rfam")
  insert_database_link(database_link: database_link_InsertInput! @source(name: "database_link", type: "database_link_InsertInput", subgraph: "Rfam")): database_link @mysqlInsert(table: "database_link", primaryKeys: []) @source(name: "insert_database_link", type: "database_link", subgraph: "Rfam")
  update_database_link(database_link: database_link_UpdateInput! @source(name: "database_link", type: "database_link_UpdateInput", subgraph: "Rfam"), where: database_link_WhereInput @source(name: "where", type: "database_link_WhereInput", subgraph: "Rfam")): database_link @mysqlUpdate(table: "database_link") @source(name: "update_database_link", type: "database_link", subgraph: "Rfam")
  delete_database_link(where: database_link_WhereInput @source(name: "where", type: "database_link_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "database_link") @source(name: "delete_database_link", type: "Boolean", subgraph: "Rfam")
  insert_db_version(db_version: db_version_InsertInput! @source(name: "db_version", type: "db_version_InsertInput", subgraph: "Rfam")): db_version @mysqlInsert(table: "db_version", primaryKeys: ["rfam_release"]) @source(name: "insert_db_version", type: "db_version", subgraph: "Rfam")
  update_db_version(db_version: db_version_UpdateInput! @source(name: "db_version", type: "db_version_UpdateInput", subgraph: "Rfam"), where: db_version_WhereInput @source(name: "where", type: "db_version_WhereInput", subgraph: "Rfam")): db_version @mysqlUpdate(table: "db_version") @source(name: "update_db_version", type: "db_version", subgraph: "Rfam")
  delete_db_version(where: db_version_WhereInput @source(name: "where", type: "db_version_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "db_version") @source(name: "delete_db_version", type: "Boolean", subgraph: "Rfam")
  insert_dead_clan(dead_clan: dead_clan_InsertInput! @source(name: "dead_clan", type: "dead_clan_InsertInput", subgraph: "Rfam")): dead_clan @mysqlInsert(table: "dead_clan", primaryKeys: ["clan_acc"]) @source(name: "insert_dead_clan", type: "dead_clan", subgraph: "Rfam")
  update_dead_clan(dead_clan: dead_clan_UpdateInput! @source(name: "dead_clan", type: "dead_clan_UpdateInput", subgraph: "Rfam"), where: dead_clan_WhereInput @source(name: "where", type: "dead_clan_WhereInput", subgraph: "Rfam")): dead_clan @mysqlUpdate(table: "dead_clan") @source(name: "update_dead_clan", type: "dead_clan", subgraph: "Rfam")
  delete_dead_clan(where: dead_clan_WhereInput @source(name: "where", type: "dead_clan_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "dead_clan") @source(name: "delete_dead_clan", type: "Boolean", subgraph: "Rfam")
  insert_dead_family(dead_family: dead_family_InsertInput! @source(name: "dead_family", type: "dead_family_InsertInput", subgraph: "Rfam")): dead_family @mysqlInsert(table: "dead_family", primaryKeys: ["rfam_acc"]) @source(name: "insert_dead_family", type: "dead_family", subgraph: "Rfam")
  update_dead_family(dead_family: dead_family_UpdateInput! @source(name: "dead_family", type: "dead_family_UpdateInput", subgraph: "Rfam"), where: dead_family_WhereInput @source(name: "where", type: "dead_family_WhereInput", subgraph: "Rfam")): dead_family @mysqlUpdate(table: "dead_family") @source(name: "update_dead_family", type: "dead_family", subgraph: "Rfam")
  delete_dead_family(where: dead_family_WhereInput @source(name: "where", type: "dead_family_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "dead_family") @source(name: "delete_dead_family", type: "Boolean", subgraph: "Rfam")
  insert_ensembl_names(ensembl_names: ensembl_names_InsertInput! @source(name: "ensembl_names", type: "ensembl_names_InsertInput", subgraph: "Rfam")): ensembl_names @mysqlInsert(table: "ensembl_names", primaryKeys: ["insdc"]) @source(name: "insert_ensembl_names", type: "ensembl_names", subgraph: "Rfam")
  update_ensembl_names(ensembl_names: ensembl_names_UpdateInput! @source(name: "ensembl_names", type: "ensembl_names_UpdateInput", subgraph: "Rfam"), where: ensembl_names_WhereInput @source(name: "where", type: "ensembl_names_WhereInput", subgraph: "Rfam")): ensembl_names @mysqlUpdate(table: "ensembl_names") @source(name: "update_ensembl_names", type: "ensembl_names", subgraph: "Rfam")
  delete_ensembl_names(where: ensembl_names_WhereInput @source(name: "where", type: "ensembl_names_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "ensembl_names") @source(name: "delete_ensembl_names", type: "Boolean", subgraph: "Rfam")
  insert_family(family: family_InsertInput! @source(name: "family", type: "family_InsertInput", subgraph: "Rfam")): family @mysqlInsert(table: "family", primaryKeys: ["rfam_acc"]) @source(name: "insert_family", type: "family", subgraph: "Rfam")
  update_family(family: family_UpdateInput! @source(name: "family", type: "family_UpdateInput", subgraph: "Rfam"), where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam")): family @mysqlUpdate(table: "family") @source(name: "update_family", type: "family", subgraph: "Rfam")
  delete_family(where: family_WhereInput @source(name: "where", type: "family_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "family") @source(name: "delete_family", type: "Boolean", subgraph: "Rfam")
  insert_family_author(family_author: family_author_InsertInput! @source(name: "family_author", type: "family_author_InsertInput", subgraph: "Rfam")): family_author @mysqlInsert(table: "family_author", primaryKeys: []) @source(name: "insert_family_author", type: "family_author", subgraph: "Rfam")
  update_family_author(family_author: family_author_UpdateInput! @source(name: "family_author", type: "family_author_UpdateInput", subgraph: "Rfam"), where: family_author_WhereInput @source(name: "where", type: "family_author_WhereInput", subgraph: "Rfam")): family_author @mysqlUpdate(table: "family_author") @source(name: "update_family_author", type: "family_author", subgraph: "Rfam")
  delete_family_author(where: family_author_WhereInput @source(name: "where", type: "family_author_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "family_author") @source(name: "delete_family_author", type: "Boolean", subgraph: "Rfam")
  insert_family_literature_reference(family_literature_reference: family_literature_reference_InsertInput! @source(name: "family_literature_reference", type: "family_literature_reference_InsertInput", subgraph: "Rfam")): family_literature_reference @mysqlInsert(table: "family_literature_reference", primaryKeys: []) @source(name: "insert_family_literature_reference", type: "family_literature_reference", subgraph: "Rfam")
  update_family_literature_reference(family_literature_reference: family_literature_reference_UpdateInput! @source(name: "family_literature_reference", type: "family_literature_reference_UpdateInput", subgraph: "Rfam"), where: family_literature_reference_WhereInput @source(name: "where", type: "family_literature_reference_WhereInput", subgraph: "Rfam")): family_literature_reference @mysqlUpdate(table: "family_literature_reference") @source(name: "update_family_literature_reference", type: "family_literature_reference", subgraph: "Rfam")
  delete_family_literature_reference(where: family_literature_reference_WhereInput @source(name: "where", type: "family_literature_reference_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "family_literature_reference") @source(name: "delete_family_literature_reference", type: "Boolean", subgraph: "Rfam")
  insert_family_long(family_long: family_long_InsertInput! @source(name: "family_long", type: "family_long_InsertInput", subgraph: "Rfam")): family_long @mysqlInsert(table: "family_long", primaryKeys: []) @source(name: "insert_family_long", type: "family_long", subgraph: "Rfam")
  update_family_long(family_long: family_long_UpdateInput! @source(name: "family_long", type: "family_long_UpdateInput", subgraph: "Rfam"), where: family_long_WhereInput @source(name: "where", type: "family_long_WhereInput", subgraph: "Rfam")): family_long @mysqlUpdate(table: "family_long") @source(name: "update_family_long", type: "family_long", subgraph: "Rfam")
  delete_family_long(where: family_long_WhereInput @source(name: "where", type: "family_long_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "family_long") @source(name: "delete_family_long", type: "Boolean", subgraph: "Rfam")
  insert_family_ncbi(family_ncbi: family_ncbi_InsertInput! @source(name: "family_ncbi", type: "family_ncbi_InsertInput", subgraph: "Rfam")): family_ncbi @mysqlInsert(table: "family_ncbi", primaryKeys: []) @source(name: "insert_family_ncbi", type: "family_ncbi", subgraph: "Rfam")
  update_family_ncbi(family_ncbi: family_ncbi_UpdateInput! @source(name: "family_ncbi", type: "family_ncbi_UpdateInput", subgraph: "Rfam"), where: family_ncbi_WhereInput @source(name: "where", type: "family_ncbi_WhereInput", subgraph: "Rfam")): family_ncbi @mysqlUpdate(table: "family_ncbi") @source(name: "update_family_ncbi", type: "family_ncbi", subgraph: "Rfam")
  delete_family_ncbi(where: family_ncbi_WhereInput @source(name: "where", type: "family_ncbi_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "family_ncbi") @source(name: "delete_family_ncbi", type: "Boolean", subgraph: "Rfam")
  insert_features(features: features_InsertInput! @source(name: "features", type: "features_InsertInput", subgraph: "Rfam")): features @mysqlInsert(table: "features", primaryKeys: []) @source(name: "insert_features", type: "features", subgraph: "Rfam")
  update_features(features: features_UpdateInput! @source(name: "features", type: "features_UpdateInput", subgraph: "Rfam"), where: features_WhereInput @source(name: "where", type: "features_WhereInput", subgraph: "Rfam")): features @mysqlUpdate(table: "features") @source(name: "update_features", type: "features", subgraph: "Rfam")
  delete_features(where: features_WhereInput @source(name: "where", type: "features_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "features") @source(name: "delete_features", type: "Boolean", subgraph: "Rfam")
  insert_full_region(full_region: full_region_InsertInput! @source(name: "full_region", type: "full_region_InsertInput", subgraph: "Rfam")): full_region @mysqlInsert(table: "full_region", primaryKeys: []) @source(name: "insert_full_region", type: "full_region", subgraph: "Rfam")
  update_full_region(full_region: full_region_UpdateInput! @source(name: "full_region", type: "full_region_UpdateInput", subgraph: "Rfam"), where: full_region_WhereInput @source(name: "where", type: "full_region_WhereInput", subgraph: "Rfam")): full_region @mysqlUpdate(table: "full_region") @source(name: "update_full_region", type: "full_region", subgraph: "Rfam")
  delete_full_region(where: full_region_WhereInput @source(name: "where", type: "full_region_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "full_region") @source(name: "delete_full_region", type: "Boolean", subgraph: "Rfam")
  insert_genome(genome: genome_InsertInput! @source(name: "genome", type: "genome_InsertInput", subgraph: "Rfam")): genome @mysqlInsert(table: "genome", primaryKeys: ["upid"]) @source(name: "insert_genome", type: "genome", subgraph: "Rfam")
  update_genome(genome: genome_UpdateInput! @source(name: "genome", type: "genome_UpdateInput", subgraph: "Rfam"), where: genome_WhereInput @source(name: "where", type: "genome_WhereInput", subgraph: "Rfam")): genome @mysqlUpdate(table: "genome") @source(name: "update_genome", type: "genome", subgraph: "Rfam")
  delete_genome(where: genome_WhereInput @source(name: "where", type: "genome_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "genome") @source(name: "delete_genome", type: "Boolean", subgraph: "Rfam")
  insert_genome_temp(genome_temp: genome_temp_InsertInput! @source(name: "genome_temp", type: "genome_temp_InsertInput", subgraph: "Rfam")): genome_temp @mysqlInsert(table: "genome_temp", primaryKeys: ["upid"]) @source(name: "insert_genome_temp", type: "genome_temp", subgraph: "Rfam")
  update_genome_temp(genome_temp: genome_temp_UpdateInput! @source(name: "genome_temp", type: "genome_temp_UpdateInput", subgraph: "Rfam"), where: genome_temp_WhereInput @source(name: "where", type: "genome_temp_WhereInput", subgraph: "Rfam")): genome_temp @mysqlUpdate(table: "genome_temp") @source(name: "update_genome_temp", type: "genome_temp", subgraph: "Rfam")
  delete_genome_temp(where: genome_temp_WhereInput @source(name: "where", type: "genome_temp_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "genome_temp") @source(name: "delete_genome_temp", type: "Boolean", subgraph: "Rfam")
  insert_genseq(genseq: genseq_InsertInput! @source(name: "genseq", type: "genseq_InsertInput", subgraph: "Rfam")): genseq @mysqlInsert(table: "genseq", primaryKeys: []) @source(name: "insert_genseq", type: "genseq", subgraph: "Rfam")
  update_genseq(genseq: genseq_UpdateInput! @source(name: "genseq", type: "genseq_UpdateInput", subgraph: "Rfam"), where: genseq_WhereInput @source(name: "where", type: "genseq_WhereInput", subgraph: "Rfam")): genseq @mysqlUpdate(table: "genseq") @source(name: "update_genseq", type: "genseq", subgraph: "Rfam")
  delete_genseq(where: genseq_WhereInput @source(name: "where", type: "genseq_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "genseq") @source(name: "delete_genseq", type: "Boolean", subgraph: "Rfam")
  insert_genseq_temp(genseq_temp: genseq_temp_InsertInput! @source(name: "genseq_temp", type: "genseq_temp_InsertInput", subgraph: "Rfam")): genseq_temp @mysqlInsert(table: "genseq_temp", primaryKeys: []) @source(name: "insert_genseq_temp", type: "genseq_temp", subgraph: "Rfam")
  update_genseq_temp(genseq_temp: genseq_temp_UpdateInput! @source(name: "genseq_temp", type: "genseq_temp_UpdateInput", subgraph: "Rfam"), where: genseq_temp_WhereInput @source(name: "where", type: "genseq_temp_WhereInput", subgraph: "Rfam")): genseq_temp @mysqlUpdate(table: "genseq_temp") @source(name: "update_genseq_temp", type: "genseq_temp", subgraph: "Rfam")
  delete_genseq_temp(where: genseq_temp_WhereInput @source(name: "where", type: "genseq_temp_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "genseq_temp") @source(name: "delete_genseq_temp", type: "Boolean", subgraph: "Rfam")
  insert_html_alignment(html_alignment: html_alignment_InsertInput! @source(name: "html_alignment", type: "html_alignment_InsertInput", subgraph: "Rfam")): html_alignment @mysqlInsert(table: "html_alignment", primaryKeys: []) @source(name: "insert_html_alignment", type: "html_alignment", subgraph: "Rfam")
  update_html_alignment(html_alignment: html_alignment_UpdateInput! @source(name: "html_alignment", type: "html_alignment_UpdateInput", subgraph: "Rfam"), where: html_alignment_WhereInput @source(name: "where", type: "html_alignment_WhereInput", subgraph: "Rfam")): html_alignment @mysqlUpdate(table: "html_alignment") @source(name: "update_html_alignment", type: "html_alignment", subgraph: "Rfam")
  delete_html_alignment(where: html_alignment_WhereInput @source(name: "where", type: "html_alignment_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "html_alignment") @source(name: "delete_html_alignment", type: "Boolean", subgraph: "Rfam")
  insert_keywords(keywords: keywords_InsertInput! @source(name: "keywords", type: "keywords_InsertInput", subgraph: "Rfam")): keywords @mysqlInsert(table: "keywords", primaryKeys: ["rfam_acc"]) @source(name: "insert_keywords", type: "keywords", subgraph: "Rfam")
  update_keywords(keywords: keywords_UpdateInput! @source(name: "keywords", type: "keywords_UpdateInput", subgraph: "Rfam"), where: keywords_WhereInput @source(name: "where", type: "keywords_WhereInput", subgraph: "Rfam")): keywords @mysqlUpdate(table: "keywords") @source(name: "update_keywords", type: "keywords", subgraph: "Rfam")
  delete_keywords(where: keywords_WhereInput @source(name: "where", type: "keywords_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "keywords") @source(name: "delete_keywords", type: "Boolean", subgraph: "Rfam")
  insert_literature_reference(literature_reference: literature_reference_InsertInput! @source(name: "literature_reference", type: "literature_reference_InsertInput", subgraph: "Rfam")): literature_reference @mysqlInsert(table: "literature_reference", primaryKeys: ["pmid"]) @source(name: "insert_literature_reference", type: "literature_reference", subgraph: "Rfam")
  update_literature_reference(literature_reference: literature_reference_UpdateInput! @source(name: "literature_reference", type: "literature_reference_UpdateInput", subgraph: "Rfam"), where: literature_reference_WhereInput @source(name: "where", type: "literature_reference_WhereInput", subgraph: "Rfam")): literature_reference @mysqlUpdate(table: "literature_reference") @source(name: "update_literature_reference", type: "literature_reference", subgraph: "Rfam")
  delete_literature_reference(where: literature_reference_WhereInput @source(name: "where", type: "literature_reference_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "literature_reference") @source(name: "delete_literature_reference", type: "Boolean", subgraph: "Rfam")
  insert_matches_and_fasta(matches_and_fasta: matches_and_fasta_InsertInput! @source(name: "matches_and_fasta", type: "matches_and_fasta_InsertInput", subgraph: "Rfam")): matches_and_fasta @mysqlInsert(table: "matches_and_fasta", primaryKeys: []) @source(name: "insert_matches_and_fasta", type: "matches_and_fasta", subgraph: "Rfam")
  update_matches_and_fasta(matches_and_fasta: matches_and_fasta_UpdateInput! @source(name: "matches_and_fasta", type: "matches_and_fasta_UpdateInput", subgraph: "Rfam"), where: matches_and_fasta_WhereInput @source(name: "where", type: "matches_and_fasta_WhereInput", subgraph: "Rfam")): matches_and_fasta @mysqlUpdate(table: "matches_and_fasta") @source(name: "update_matches_and_fasta", type: "matches_and_fasta", subgraph: "Rfam")
  delete_matches_and_fasta(where: matches_and_fasta_WhereInput @source(name: "where", type: "matches_and_fasta_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "matches_and_fasta") @source(name: "delete_matches_and_fasta", type: "Boolean", subgraph: "Rfam")
  insert_motif(motif: motif_InsertInput! @source(name: "motif", type: "motif_InsertInput", subgraph: "Rfam")): motif @mysqlInsert(table: "motif", primaryKeys: ["motif_acc"]) @source(name: "insert_motif", type: "motif", subgraph: "Rfam")
  update_motif(motif: motif_UpdateInput! @source(name: "motif", type: "motif_UpdateInput", subgraph: "Rfam"), where: motif_WhereInput @source(name: "where", type: "motif_WhereInput", subgraph: "Rfam")): motif @mysqlUpdate(table: "motif") @source(name: "update_motif", type: "motif", subgraph: "Rfam")
  delete_motif(where: motif_WhereInput @source(name: "where", type: "motif_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif") @source(name: "delete_motif", type: "Boolean", subgraph: "Rfam")
  insert_motif_database_link(motif_database_link: motif_database_link_InsertInput! @source(name: "motif_database_link", type: "motif_database_link_InsertInput", subgraph: "Rfam")): motif_database_link @mysqlInsert(table: "motif_database_link", primaryKeys: []) @source(name: "insert_motif_database_link", type: "motif_database_link", subgraph: "Rfam")
  update_motif_database_link(motif_database_link: motif_database_link_UpdateInput! @source(name: "motif_database_link", type: "motif_database_link_UpdateInput", subgraph: "Rfam"), where: motif_database_link_WhereInput @source(name: "where", type: "motif_database_link_WhereInput", subgraph: "Rfam")): motif_database_link @mysqlUpdate(table: "motif_database_link") @source(name: "update_motif_database_link", type: "motif_database_link", subgraph: "Rfam")
  delete_motif_database_link(where: motif_database_link_WhereInput @source(name: "where", type: "motif_database_link_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_database_link") @source(name: "delete_motif_database_link", type: "Boolean", subgraph: "Rfam")
  insert_motif_family_stats(motif_family_stats: motif_family_stats_InsertInput! @source(name: "motif_family_stats", type: "motif_family_stats_InsertInput", subgraph: "Rfam")): motif_family_stats @mysqlInsert(table: "motif_family_stats", primaryKeys: []) @source(name: "insert_motif_family_stats", type: "motif_family_stats", subgraph: "Rfam")
  update_motif_family_stats(motif_family_stats: motif_family_stats_UpdateInput! @source(name: "motif_family_stats", type: "motif_family_stats_UpdateInput", subgraph: "Rfam"), where: motif_family_stats_WhereInput @source(name: "where", type: "motif_family_stats_WhereInput", subgraph: "Rfam")): motif_family_stats @mysqlUpdate(table: "motif_family_stats") @source(name: "update_motif_family_stats", type: "motif_family_stats", subgraph: "Rfam")
  delete_motif_family_stats(where: motif_family_stats_WhereInput @source(name: "where", type: "motif_family_stats_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_family_stats") @source(name: "delete_motif_family_stats", type: "Boolean", subgraph: "Rfam")
  insert_motif_file(motif_file: motif_file_InsertInput! @source(name: "motif_file", type: "motif_file_InsertInput", subgraph: "Rfam")): motif_file @mysqlInsert(table: "motif_file", primaryKeys: []) @source(name: "insert_motif_file", type: "motif_file", subgraph: "Rfam")
  update_motif_file(motif_file: motif_file_UpdateInput! @source(name: "motif_file", type: "motif_file_UpdateInput", subgraph: "Rfam"), where: motif_file_WhereInput @source(name: "where", type: "motif_file_WhereInput", subgraph: "Rfam")): motif_file @mysqlUpdate(table: "motif_file") @source(name: "update_motif_file", type: "motif_file", subgraph: "Rfam")
  delete_motif_file(where: motif_file_WhereInput @source(name: "where", type: "motif_file_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_file") @source(name: "delete_motif_file", type: "Boolean", subgraph: "Rfam")
  insert_motif_literature(motif_literature: motif_literature_InsertInput! @source(name: "motif_literature", type: "motif_literature_InsertInput", subgraph: "Rfam")): motif_literature @mysqlInsert(table: "motif_literature", primaryKeys: []) @source(name: "insert_motif_literature", type: "motif_literature", subgraph: "Rfam")
  update_motif_literature(motif_literature: motif_literature_UpdateInput! @source(name: "motif_literature", type: "motif_literature_UpdateInput", subgraph: "Rfam"), where: motif_literature_WhereInput @source(name: "where", type: "motif_literature_WhereInput", subgraph: "Rfam")): motif_literature @mysqlUpdate(table: "motif_literature") @source(name: "update_motif_literature", type: "motif_literature", subgraph: "Rfam")
  delete_motif_literature(where: motif_literature_WhereInput @source(name: "where", type: "motif_literature_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_literature") @source(name: "delete_motif_literature", type: "Boolean", subgraph: "Rfam")
  insert_motif_matches(motif_matches: motif_matches_InsertInput! @source(name: "motif_matches", type: "motif_matches_InsertInput", subgraph: "Rfam")): motif_matches @mysqlInsert(table: "motif_matches", primaryKeys: []) @source(name: "insert_motif_matches", type: "motif_matches", subgraph: "Rfam")
  update_motif_matches(motif_matches: motif_matches_UpdateInput! @source(name: "motif_matches", type: "motif_matches_UpdateInput", subgraph: "Rfam"), where: motif_matches_WhereInput @source(name: "where", type: "motif_matches_WhereInput", subgraph: "Rfam")): motif_matches @mysqlUpdate(table: "motif_matches") @source(name: "update_motif_matches", type: "motif_matches", subgraph: "Rfam")
  delete_motif_matches(where: motif_matches_WhereInput @source(name: "where", type: "motif_matches_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_matches") @source(name: "delete_motif_matches", type: "Boolean", subgraph: "Rfam")
  insert_motif_old(motif_old: motif_old_InsertInput! @source(name: "motif_old", type: "motif_old_InsertInput", subgraph: "Rfam")): motif_old @mysqlInsert(table: "motif_old", primaryKeys: ["motif_acc"]) @source(name: "insert_motif_old", type: "motif_old", subgraph: "Rfam")
  update_motif_old(motif_old: motif_old_UpdateInput! @source(name: "motif_old", type: "motif_old_UpdateInput", subgraph: "Rfam"), where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam")): motif_old @mysqlUpdate(table: "motif_old") @source(name: "update_motif_old", type: "motif_old", subgraph: "Rfam")
  delete_motif_old(where: motif_old_WhereInput @source(name: "where", type: "motif_old_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_old") @source(name: "delete_motif_old", type: "Boolean", subgraph: "Rfam")
  insert_motif_pdb(motif_pdb: motif_pdb_InsertInput! @source(name: "motif_pdb", type: "motif_pdb_InsertInput", subgraph: "Rfam")): motif_pdb @mysqlInsert(table: "motif_pdb", primaryKeys: []) @source(name: "insert_motif_pdb", type: "motif_pdb", subgraph: "Rfam")
  update_motif_pdb(motif_pdb: motif_pdb_UpdateInput! @source(name: "motif_pdb", type: "motif_pdb_UpdateInput", subgraph: "Rfam"), where: motif_pdb_WhereInput @source(name: "where", type: "motif_pdb_WhereInput", subgraph: "Rfam")): motif_pdb @mysqlUpdate(table: "motif_pdb") @source(name: "update_motif_pdb", type: "motif_pdb", subgraph: "Rfam")
  delete_motif_pdb(where: motif_pdb_WhereInput @source(name: "where", type: "motif_pdb_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_pdb") @source(name: "delete_motif_pdb", type: "Boolean", subgraph: "Rfam")
  insert_motif_ss_image(motif_ss_image: motif_ss_image_InsertInput! @source(name: "motif_ss_image", type: "motif_ss_image_InsertInput", subgraph: "Rfam")): motif_ss_image @mysqlInsert(table: "motif_ss_image", primaryKeys: []) @source(name: "insert_motif_ss_image", type: "motif_ss_image", subgraph: "Rfam")
  update_motif_ss_image(motif_ss_image: motif_ss_image_UpdateInput! @source(name: "motif_ss_image", type: "motif_ss_image_UpdateInput", subgraph: "Rfam"), where: motif_ss_image_WhereInput @source(name: "where", type: "motif_ss_image_WhereInput", subgraph: "Rfam")): motif_ss_image @mysqlUpdate(table: "motif_ss_image") @source(name: "update_motif_ss_image", type: "motif_ss_image", subgraph: "Rfam")
  delete_motif_ss_image(where: motif_ss_image_WhereInput @source(name: "where", type: "motif_ss_image_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "motif_ss_image") @source(name: "delete_motif_ss_image", type: "Boolean", subgraph: "Rfam")
  insert_pdb(pdb: pdb_InsertInput! @source(name: "pdb", type: "pdb_InsertInput", subgraph: "Rfam")): pdb @mysqlInsert(table: "pdb", primaryKeys: ["pdb_id"]) @source(name: "insert_pdb", type: "pdb", subgraph: "Rfam")
  update_pdb(pdb: pdb_UpdateInput! @source(name: "pdb", type: "pdb_UpdateInput", subgraph: "Rfam"), where: pdb_WhereInput @source(name: "where", type: "pdb_WhereInput", subgraph: "Rfam")): pdb @mysqlUpdate(table: "pdb") @source(name: "update_pdb", type: "pdb", subgraph: "Rfam")
  delete_pdb(where: pdb_WhereInput @source(name: "where", type: "pdb_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "pdb") @source(name: "delete_pdb", type: "Boolean", subgraph: "Rfam")
  insert_pdb_full_region(pdb_full_region: pdb_full_region_InsertInput! @source(name: "pdb_full_region", type: "pdb_full_region_InsertInput", subgraph: "Rfam")): pdb_full_region @mysqlInsert(table: "pdb_full_region", primaryKeys: []) @source(name: "insert_pdb_full_region", type: "pdb_full_region", subgraph: "Rfam")
  update_pdb_full_region(pdb_full_region: pdb_full_region_UpdateInput! @source(name: "pdb_full_region", type: "pdb_full_region_UpdateInput", subgraph: "Rfam"), where: pdb_full_region_WhereInput @source(name: "where", type: "pdb_full_region_WhereInput", subgraph: "Rfam")): pdb_full_region @mysqlUpdate(table: "pdb_full_region") @source(name: "update_pdb_full_region", type: "pdb_full_region", subgraph: "Rfam")
  delete_pdb_full_region(where: pdb_full_region_WhereInput @source(name: "where", type: "pdb_full_region_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "pdb_full_region") @source(name: "delete_pdb_full_region", type: "Boolean", subgraph: "Rfam")
  insert_pdb_full_region_old(pdb_full_region_old: pdb_full_region_old_InsertInput! @source(name: "pdb_full_region_old", type: "pdb_full_region_old_InsertInput", subgraph: "Rfam")): pdb_full_region_old @mysqlInsert(table: "pdb_full_region_old", primaryKeys: []) @source(name: "insert_pdb_full_region_old", type: "pdb_full_region_old", subgraph: "Rfam")
  update_pdb_full_region_old(pdb_full_region_old: pdb_full_region_old_UpdateInput! @source(name: "pdb_full_region_old", type: "pdb_full_region_old_UpdateInput", subgraph: "Rfam"), where: pdb_full_region_old_WhereInput @source(name: "where", type: "pdb_full_region_old_WhereInput", subgraph: "Rfam")): pdb_full_region_old @mysqlUpdate(table: "pdb_full_region_old") @source(name: "update_pdb_full_region_old", type: "pdb_full_region_old", subgraph: "Rfam")
  delete_pdb_full_region_old(where: pdb_full_region_old_WhereInput @source(name: "where", type: "pdb_full_region_old_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "pdb_full_region_old") @source(name: "delete_pdb_full_region_old", type: "Boolean", subgraph: "Rfam")
  insert_pdb_rfam_reg(pdb_rfam_reg: pdb_rfam_reg_InsertInput! @source(name: "pdb_rfam_reg", type: "pdb_rfam_reg_InsertInput", subgraph: "Rfam")): pdb_rfam_reg @mysqlInsert(table: "pdb_rfam_reg", primaryKeys: ["auto_pdb_reg"]) @source(name: "insert_pdb_rfam_reg", type: "pdb_rfam_reg", subgraph: "Rfam")
  update_pdb_rfam_reg(pdb_rfam_reg: pdb_rfam_reg_UpdateInput! @source(name: "pdb_rfam_reg", type: "pdb_rfam_reg_UpdateInput", subgraph: "Rfam"), where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam")): pdb_rfam_reg @mysqlUpdate(table: "pdb_rfam_reg") @source(name: "update_pdb_rfam_reg", type: "pdb_rfam_reg", subgraph: "Rfam")
  delete_pdb_rfam_reg(where: pdb_rfam_reg_WhereInput @source(name: "where", type: "pdb_rfam_reg_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "pdb_rfam_reg") @source(name: "delete_pdb_rfam_reg", type: "Boolean", subgraph: "Rfam")
  insert_pdb_sequence(pdb_sequence: pdb_sequence_InsertInput! @source(name: "pdb_sequence", type: "pdb_sequence_InsertInput", subgraph: "Rfam")): pdb_sequence @mysqlInsert(table: "pdb_sequence", primaryKeys: ["pdb_seq"]) @source(name: "insert_pdb_sequence", type: "pdb_sequence", subgraph: "Rfam")
  update_pdb_sequence(pdb_sequence: pdb_sequence_UpdateInput! @source(name: "pdb_sequence", type: "pdb_sequence_UpdateInput", subgraph: "Rfam"), where: pdb_sequence_WhereInput @source(name: "where", type: "pdb_sequence_WhereInput", subgraph: "Rfam")): pdb_sequence @mysqlUpdate(table: "pdb_sequence") @source(name: "update_pdb_sequence", type: "pdb_sequence", subgraph: "Rfam")
  delete_pdb_sequence(where: pdb_sequence_WhereInput @source(name: "where", type: "pdb_sequence_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "pdb_sequence") @source(name: "delete_pdb_sequence", type: "Boolean", subgraph: "Rfam")
  insert_processed_data(processed_data: processed_data_InsertInput! @source(name: "processed_data", type: "processed_data_InsertInput", subgraph: "Rfam")): processed_data @mysqlInsert(table: "processed_data", primaryKeys: []) @source(name: "insert_processed_data", type: "processed_data", subgraph: "Rfam")
  update_processed_data(processed_data: processed_data_UpdateInput! @source(name: "processed_data", type: "processed_data_UpdateInput", subgraph: "Rfam"), where: processed_data_WhereInput @source(name: "where", type: "processed_data_WhereInput", subgraph: "Rfam")): processed_data @mysqlUpdate(table: "processed_data") @source(name: "update_processed_data", type: "processed_data", subgraph: "Rfam")
  delete_processed_data(where: processed_data_WhereInput @source(name: "where", type: "processed_data_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "processed_data") @source(name: "delete_processed_data", type: "Boolean", subgraph: "Rfam")
  insert_pseudoknot(pseudoknot: pseudoknot_InsertInput! @source(name: "pseudoknot", type: "pseudoknot_InsertInput", subgraph: "Rfam")): pseudoknot @mysqlInsert(table: "pseudoknot", primaryKeys: []) @source(name: "insert_pseudoknot", type: "pseudoknot", subgraph: "Rfam")
  update_pseudoknot(pseudoknot: pseudoknot_UpdateInput! @source(name: "pseudoknot", type: "pseudoknot_UpdateInput", subgraph: "Rfam"), where: pseudoknot_WhereInput @source(name: "where", type: "pseudoknot_WhereInput", subgraph: "Rfam")): pseudoknot @mysqlUpdate(table: "pseudoknot") @source(name: "update_pseudoknot", type: "pseudoknot", subgraph: "Rfam")
  delete_pseudoknot(where: pseudoknot_WhereInput @source(name: "where", type: "pseudoknot_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "pseudoknot") @source(name: "delete_pseudoknot", type: "Boolean", subgraph: "Rfam")
  insert_refseq(refseq: refseq_InsertInput! @source(name: "refseq", type: "refseq_InsertInput", subgraph: "Rfam")): refseq @mysqlInsert(table: "refseq", primaryKeys: ["refseq_acc"]) @source(name: "insert_refseq", type: "refseq", subgraph: "Rfam")
  update_refseq(refseq: refseq_UpdateInput! @source(name: "refseq", type: "refseq_UpdateInput", subgraph: "Rfam"), where: refseq_WhereInput @source(name: "where", type: "refseq_WhereInput", subgraph: "Rfam")): refseq @mysqlUpdate(table: "refseq") @source(name: "update_refseq", type: "refseq", subgraph: "Rfam")
  delete_refseq(where: refseq_WhereInput @source(name: "where", type: "refseq_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "refseq") @source(name: "delete_refseq", type: "Boolean", subgraph: "Rfam")
  insert_refseq_full_region(refseq_full_region: refseq_full_region_InsertInput! @source(name: "refseq_full_region", type: "refseq_full_region_InsertInput", subgraph: "Rfam")): refseq_full_region @mysqlInsert(table: "refseq_full_region", primaryKeys: []) @source(name: "insert_refseq_full_region", type: "refseq_full_region", subgraph: "Rfam")
  update_refseq_full_region(refseq_full_region: refseq_full_region_UpdateInput! @source(name: "refseq_full_region", type: "refseq_full_region_UpdateInput", subgraph: "Rfam"), where: refseq_full_region_WhereInput @source(name: "where", type: "refseq_full_region_WhereInput", subgraph: "Rfam")): refseq_full_region @mysqlUpdate(table: "refseq_full_region") @source(name: "update_refseq_full_region", type: "refseq_full_region", subgraph: "Rfam")
  delete_refseq_full_region(where: refseq_full_region_WhereInput @source(name: "where", type: "refseq_full_region_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "refseq_full_region") @source(name: "delete_refseq_full_region", type: "Boolean", subgraph: "Rfam")
  insert_rfamseq(rfamseq: rfamseq_InsertInput! @source(name: "rfamseq", type: "rfamseq_InsertInput", subgraph: "Rfam")): rfamseq @mysqlInsert(table: "rfamseq", primaryKeys: ["rfamseq_acc"]) @source(name: "insert_rfamseq", type: "rfamseq", subgraph: "Rfam")
  update_rfamseq(rfamseq: rfamseq_UpdateInput! @source(name: "rfamseq", type: "rfamseq_UpdateInput", subgraph: "Rfam"), where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam")): rfamseq @mysqlUpdate(table: "rfamseq") @source(name: "update_rfamseq", type: "rfamseq", subgraph: "Rfam")
  delete_rfamseq(where: rfamseq_WhereInput @source(name: "where", type: "rfamseq_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "rfamseq") @source(name: "delete_rfamseq", type: "Boolean", subgraph: "Rfam")
  insert_rfamseq_temp(rfamseq_temp: rfamseq_temp_InsertInput! @source(name: "rfamseq_temp", type: "rfamseq_temp_InsertInput", subgraph: "Rfam")): rfamseq_temp @mysqlInsert(table: "rfamseq_temp", primaryKeys: ["rfamseq_acc"]) @source(name: "insert_rfamseq_temp", type: "rfamseq_temp", subgraph: "Rfam")
  update_rfamseq_temp(rfamseq_temp: rfamseq_temp_UpdateInput! @source(name: "rfamseq_temp", type: "rfamseq_temp_UpdateInput", subgraph: "Rfam"), where: rfamseq_temp_WhereInput @source(name: "where", type: "rfamseq_temp_WhereInput", subgraph: "Rfam")): rfamseq_temp @mysqlUpdate(table: "rfamseq_temp") @source(name: "update_rfamseq_temp", type: "rfamseq_temp", subgraph: "Rfam")
  delete_rfamseq_temp(where: rfamseq_temp_WhereInput @source(name: "where", type: "rfamseq_temp_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "rfamseq_temp") @source(name: "delete_rfamseq_temp", type: "Boolean", subgraph: "Rfam")
  insert_rnacentral_matches(rnacentral_matches: rnacentral_matches_InsertInput! @source(name: "rnacentral_matches", type: "rnacentral_matches_InsertInput", subgraph: "Rfam")): rnacentral_matches @mysqlInsert(table: "rnacentral_matches", primaryKeys: []) @source(name: "insert_rnacentral_matches", type: "rnacentral_matches", subgraph: "Rfam")
  update_rnacentral_matches(rnacentral_matches: rnacentral_matches_UpdateInput! @source(name: "rnacentral_matches", type: "rnacentral_matches_UpdateInput", subgraph: "Rfam"), where: rnacentral_matches_WhereInput @source(name: "where", type: "rnacentral_matches_WhereInput", subgraph: "Rfam")): rnacentral_matches @mysqlUpdate(table: "rnacentral_matches") @source(name: "update_rnacentral_matches", type: "rnacentral_matches", subgraph: "Rfam")
  delete_rnacentral_matches(where: rnacentral_matches_WhereInput @source(name: "where", type: "rnacentral_matches_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "rnacentral_matches") @source(name: "delete_rnacentral_matches", type: "Boolean", subgraph: "Rfam")
  insert_rscape_annotations(rscape_annotations: rscape_annotations_InsertInput! @source(name: "rscape_annotations", type: "rscape_annotations_InsertInput", subgraph: "Rfam")): rscape_annotations @mysqlInsert(table: "rscape_annotations", primaryKeys: ["rfam_acc"]) @source(name: "insert_rscape_annotations", type: "rscape_annotations", subgraph: "Rfam")
  update_rscape_annotations(rscape_annotations: rscape_annotations_UpdateInput! @source(name: "rscape_annotations", type: "rscape_annotations_UpdateInput", subgraph: "Rfam"), where: rscape_annotations_WhereInput @source(name: "where", type: "rscape_annotations_WhereInput", subgraph: "Rfam")): rscape_annotations @mysqlUpdate(table: "rscape_annotations") @source(name: "update_rscape_annotations", type: "rscape_annotations", subgraph: "Rfam")
  delete_rscape_annotations(where: rscape_annotations_WhereInput @source(name: "where", type: "rscape_annotations_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "rscape_annotations") @source(name: "delete_rscape_annotations", type: "Boolean", subgraph: "Rfam")
  insert_secondary_structure_image(secondary_structure_image: secondary_structure_image_InsertInput! @source(name: "secondary_structure_image", type: "secondary_structure_image_InsertInput", subgraph: "Rfam")): secondary_structure_image @mysqlInsert(table: "secondary_structure_image", primaryKeys: []) @source(name: "insert_secondary_structure_image", type: "secondary_structure_image", subgraph: "Rfam")
  update_secondary_structure_image(secondary_structure_image: secondary_structure_image_UpdateInput! @source(name: "secondary_structure_image", type: "secondary_structure_image_UpdateInput", subgraph: "Rfam"), where: secondary_structure_image_WhereInput @source(name: "where", type: "secondary_structure_image_WhereInput", subgraph: "Rfam")): secondary_structure_image @mysqlUpdate(table: "secondary_structure_image") @source(name: "update_secondary_structure_image", type: "secondary_structure_image", subgraph: "Rfam")
  delete_secondary_structure_image(where: secondary_structure_image_WhereInput @source(name: "where", type: "secondary_structure_image_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "secondary_structure_image") @source(name: "delete_secondary_structure_image", type: "Boolean", subgraph: "Rfam")
  insert_seed_region(seed_region: seed_region_InsertInput! @source(name: "seed_region", type: "seed_region_InsertInput", subgraph: "Rfam")): seed_region @mysqlInsert(table: "seed_region", primaryKeys: []) @source(name: "insert_seed_region", type: "seed_region", subgraph: "Rfam")
  update_seed_region(seed_region: seed_region_UpdateInput! @source(name: "seed_region", type: "seed_region_UpdateInput", subgraph: "Rfam"), where: seed_region_WhereInput @source(name: "where", type: "seed_region_WhereInput", subgraph: "Rfam")): seed_region @mysqlUpdate(table: "seed_region") @source(name: "update_seed_region", type: "seed_region", subgraph: "Rfam")
  delete_seed_region(where: seed_region_WhereInput @source(name: "where", type: "seed_region_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "seed_region") @source(name: "delete_seed_region", type: "Boolean", subgraph: "Rfam")
  insert_sunburst(sunburst: sunburst_InsertInput! @source(name: "sunburst", type: "sunburst_InsertInput", subgraph: "Rfam")): sunburst @mysqlInsert(table: "sunburst", primaryKeys: []) @source(name: "insert_sunburst", type: "sunburst", subgraph: "Rfam")
  update_sunburst(sunburst: sunburst_UpdateInput! @source(name: "sunburst", type: "sunburst_UpdateInput", subgraph: "Rfam"), where: sunburst_WhereInput @source(name: "where", type: "sunburst_WhereInput", subgraph: "Rfam")): sunburst @mysqlUpdate(table: "sunburst") @source(name: "update_sunburst", type: "sunburst", subgraph: "Rfam")
  delete_sunburst(where: sunburst_WhereInput @source(name: "where", type: "sunburst_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "sunburst") @source(name: "delete_sunburst", type: "Boolean", subgraph: "Rfam")
  insert_taxonomic_tree(taxonomic_tree: taxonomic_tree_InsertInput! @source(name: "taxonomic_tree", type: "taxonomic_tree_InsertInput", subgraph: "Rfam")): taxonomic_tree @mysqlInsert(table: "taxonomic_tree", primaryKeys: ["ncbi_code"]) @source(name: "insert_taxonomic_tree", type: "taxonomic_tree", subgraph: "Rfam")
  update_taxonomic_tree(taxonomic_tree: taxonomic_tree_UpdateInput! @source(name: "taxonomic_tree", type: "taxonomic_tree_UpdateInput", subgraph: "Rfam"), where: taxonomic_tree_WhereInput @source(name: "where", type: "taxonomic_tree_WhereInput", subgraph: "Rfam")): taxonomic_tree @mysqlUpdate(table: "taxonomic_tree") @source(name: "update_taxonomic_tree", type: "taxonomic_tree", subgraph: "Rfam")
  delete_taxonomic_tree(where: taxonomic_tree_WhereInput @source(name: "where", type: "taxonomic_tree_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "taxonomic_tree") @source(name: "delete_taxonomic_tree", type: "Boolean", subgraph: "Rfam")
  insert_taxonomy(taxonomy: taxonomy_InsertInput! @source(name: "taxonomy", type: "taxonomy_InsertInput", subgraph: "Rfam")): taxonomy @mysqlInsert(table: "taxonomy", primaryKeys: ["ncbi_id"]) @source(name: "insert_taxonomy", type: "taxonomy", subgraph: "Rfam")
  update_taxonomy(taxonomy: taxonomy_UpdateInput! @source(name: "taxonomy", type: "taxonomy_UpdateInput", subgraph: "Rfam"), where: taxonomy_WhereInput @source(name: "where", type: "taxonomy_WhereInput", subgraph: "Rfam")): taxonomy @mysqlUpdate(table: "taxonomy") @source(name: "update_taxonomy", type: "taxonomy", subgraph: "Rfam")
  delete_taxonomy(where: taxonomy_WhereInput @source(name: "where", type: "taxonomy_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "taxonomy") @source(name: "delete_taxonomy", type: "Boolean", subgraph: "Rfam")
  insert_taxonomy_websearch(taxonomy_websearch: taxonomy_websearch_InsertInput! @source(name: "taxonomy_websearch", type: "taxonomy_websearch_InsertInput", subgraph: "Rfam")): taxonomy_websearch @mysqlInsert(table: "taxonomy_websearch", primaryKeys: []) @source(name: "insert_taxonomy_websearch", type: "taxonomy_websearch", subgraph: "Rfam")
  update_taxonomy_websearch(taxonomy_websearch: taxonomy_websearch_UpdateInput! @source(name: "taxonomy_websearch", type: "taxonomy_websearch_UpdateInput", subgraph: "Rfam"), where: taxonomy_websearch_WhereInput @source(name: "where", type: "taxonomy_websearch_WhereInput", subgraph: "Rfam")): taxonomy_websearch @mysqlUpdate(table: "taxonomy_websearch") @source(name: "update_taxonomy_websearch", type: "taxonomy_websearch", subgraph: "Rfam")
  delete_taxonomy_websearch(where: taxonomy_websearch_WhereInput @source(name: "where", type: "taxonomy_websearch_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "taxonomy_websearch") @source(name: "delete_taxonomy_websearch", type: "Boolean", subgraph: "Rfam")
  insert_version(version: version_InsertInput! @source(name: "version", type: "version_InsertInput", subgraph: "Rfam")): version @mysqlInsert(table: "version", primaryKeys: ["rfam_release"]) @source(name: "insert_version", type: "version", subgraph: "Rfam")
  update_version(version: version_UpdateInput! @source(name: "version", type: "version_UpdateInput", subgraph: "Rfam"), where: version_WhereInput @source(name: "where", type: "version_WhereInput", subgraph: "Rfam")): version @mysqlUpdate(table: "version") @source(name: "update_version", type: "version", subgraph: "Rfam")
  delete_version(where: version_WhereInput @source(name: "where", type: "version_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "version") @source(name: "delete_version", type: "Boolean", subgraph: "Rfam")
  insert_wikitext(wikitext: wikitext_InsertInput! @source(name: "wikitext", type: "wikitext_InsertInput", subgraph: "Rfam")): wikitext @mysqlInsert(table: "wikitext", primaryKeys: ["auto_wiki"]) @source(name: "insert_wikitext", type: "wikitext", subgraph: "Rfam")
  update_wikitext(wikitext: wikitext_UpdateInput! @source(name: "wikitext", type: "wikitext_UpdateInput", subgraph: "Rfam"), where: wikitext_WhereInput @source(name: "where", type: "wikitext_WhereInput", subgraph: "Rfam")): wikitext @mysqlUpdate(table: "wikitext") @source(name: "update_wikitext", type: "wikitext", subgraph: "Rfam")
  delete_wikitext(where: wikitext_WhereInput @source(name: "where", type: "wikitext_WhereInput", subgraph: "Rfam")): Boolean @mysqlDelete(table: "wikitext") @source(name: "delete_wikitext", type: "Boolean", subgraph: "Rfam")
}

input _annotated_file_InsertInput @source(name: "_annotated_file_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  seed: String! @source(name: "seed", type: "String!", subgraph: "Rfam")
  cm: String! @source(name: "cm", type: "String!", subgraph: "Rfam")
  full: String @source(name: "full", type: "String", subgraph: "Rfam")
}

input _annotated_file_UpdateInput @source(name: "_annotated_file_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  seed: String @source(name: "seed", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
  full: String @source(name: "full", type: "String", subgraph: "Rfam")
}

input _family_file_InsertInput @source(name: "_family_file_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  seed: String! @source(name: "seed", type: "String!", subgraph: "Rfam")
  cm: String! @source(name: "cm", type: "String!", subgraph: "Rfam")
}

input _family_file_UpdateInput @source(name: "_family_file_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  seed: String @source(name: "seed", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
}

input _genome_data_InsertInput @source(name: "_genome_data_InsertInput", subgraph: "Rfam") {
  data_file: String! @source(name: "data_file", type: "String!", subgraph: "Rfam")
  author: String! @source(name: "author", type: "String!", subgraph: "Rfam")
  uuid: String! @source(name: "uuid", type: "String!", subgraph: "Rfam")
  status: _genome_data_status! @source(name: "status", type: "_genome_data_status!", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  opened: DateTime @source(name: "opened", type: "DateTime", subgraph: "Rfam")
  closed: DateTime @source(name: "closed", type: "DateTime", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: Int @source(name: "lsf_id", type: "Int", subgraph: "Rfam")
}

input _genome_data_UpdateInput @source(name: "_genome_data_UpdateInput", subgraph: "Rfam") {
  data_file: String @source(name: "data_file", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  uuid: String @source(name: "uuid", type: "String", subgraph: "Rfam")
  status: _genome_data_status @source(name: "status", type: "_genome_data_status", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  opened: DateTime @source(name: "opened", type: "DateTime", subgraph: "Rfam")
  closed: DateTime @source(name: "closed", type: "DateTime", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: Int @source(name: "lsf_id", type: "Int", subgraph: "Rfam")
}

input _lock_InsertInput @source(name: "_lock_InsertInput", subgraph: "Rfam") {
  locked: Int! @source(name: "locked", type: "Int!", subgraph: "Rfam")
  locker: String! @source(name: "locker", type: "String!", subgraph: "Rfam")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: Int! @source(name: "allowCommits", type: "Int!", subgraph: "Rfam")
  alsoAllow: String @source(name: "alsoAllow", type: "String", subgraph: "Rfam")
}

input _lock_UpdateInput @source(name: "_lock_UpdateInput", subgraph: "Rfam") {
  locked: Int @source(name: "locked", type: "Int", subgraph: "Rfam")
  locker: String @source(name: "locker", type: "String", subgraph: "Rfam")
  """Do you lock individual families? Do ever lock the whole database?"""
  allowCommits: Int @source(name: "allowCommits", type: "Int", subgraph: "Rfam")
  alsoAllow: String @source(name: "alsoAllow", type: "String", subgraph: "Rfam")
}

input _overlap_InsertInput @source(name: "_overlap_InsertInput", subgraph: "Rfam") {
  auto_overlap: Int @source(name: "auto_overlap", type: "Int", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
}

input _overlap_UpdateInput @source(name: "_overlap_UpdateInput", subgraph: "Rfam") {
  auto_overlap: Int @source(name: "auto_overlap", type: "Int", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
}

input _overlap_membership_InsertInput @source(name: "_overlap_membership_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  auto_overlap: Int! @source(name: "auto_overlap", type: "Int!", subgraph: "Rfam")
}

input _overlap_membership_UpdateInput @source(name: "_overlap_membership_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  auto_overlap: Int @source(name: "auto_overlap", type: "Int", subgraph: "Rfam")
}

input _post_process_InsertInput @source(name: "_post_process_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  author: String! @source(name: "author", type: "String!", subgraph: "Rfam")
  uuid: String! @source(name: "uuid", type: "String!", subgraph: "Rfam")
  status: _post_process_status! @source(name: "status", type: "_post_process_status!", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  opened: DateTime @source(name: "opened", type: "DateTime", subgraph: "Rfam")
  closed: DateTime @source(name: "closed", type: "DateTime", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: Int @source(name: "lsf_id", type: "Int", subgraph: "Rfam")
}

input _post_process_UpdateInput @source(name: "_post_process_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  uuid: String @source(name: "uuid", type: "String", subgraph: "Rfam")
  status: _post_process_status @source(name: "status", type: "_post_process_status", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  opened: DateTime @source(name: "opened", type: "DateTime", subgraph: "Rfam")
  closed: DateTime @source(name: "closed", type: "DateTime", subgraph: "Rfam")
  message: String @source(name: "message", type: "String", subgraph: "Rfam")
  lsf_id: Int @source(name: "lsf_id", type: "Int", subgraph: "Rfam")
}

input alignment_and_tree_InsertInput @source(name: "alignment_and_tree_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  type: alignment_and_tree_type! @source(name: "type", type: "alignment_and_tree_type!", subgraph: "Rfam")
  alignment: String @source(name: "alignment", type: "String", subgraph: "Rfam")
  tree: String @source(name: "tree", type: "String", subgraph: "Rfam")
  treemethod: String @source(name: "treemethod", type: "String", subgraph: "Rfam")
  average_length: Float @source(name: "average_length", type: "Float", subgraph: "Rfam")
  percent_id: Float @source(name: "percent_id", type: "Float", subgraph: "Rfam")
  number_of_sequences: BigInt @source(name: "number_of_sequences", type: "BigInt", subgraph: "Rfam")
}

input alignment_and_tree_UpdateInput @source(name: "alignment_and_tree_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  type: alignment_and_tree_type @source(name: "type", type: "alignment_and_tree_type", subgraph: "Rfam")
  alignment: String @source(name: "alignment", type: "String", subgraph: "Rfam")
  tree: String @source(name: "tree", type: "String", subgraph: "Rfam")
  treemethod: String @source(name: "treemethod", type: "String", subgraph: "Rfam")
  average_length: Float @source(name: "average_length", type: "Float", subgraph: "Rfam")
  percent_id: Float @source(name: "percent_id", type: "Float", subgraph: "Rfam")
  number_of_sequences: BigInt @source(name: "number_of_sequences", type: "BigInt", subgraph: "Rfam")
}

input author_InsertInput @source(name: "author_InsertInput", subgraph: "Rfam") {
  author_id: Int @source(name: "author_id", type: "Int", subgraph: "Rfam")
  name: String! @source(name: "name", type: "String!", subgraph: "Rfam")
  last_name: String @source(name: "last_name", type: "String", subgraph: "Rfam")
  initials: String @source(name: "initials", type: "String", subgraph: "Rfam")
  orcid: String @source(name: "orcid", type: "String", subgraph: "Rfam")
  synonyms: String @source(name: "synonyms", type: "String", subgraph: "Rfam")
}

input author_UpdateInput @source(name: "author_UpdateInput", subgraph: "Rfam") {
  author_id: Int @source(name: "author_id", type: "Int", subgraph: "Rfam")
  name: String @source(name: "name", type: "String", subgraph: "Rfam")
  last_name: String @source(name: "last_name", type: "String", subgraph: "Rfam")
  initials: String @source(name: "initials", type: "String", subgraph: "Rfam")
  orcid: String @source(name: "orcid", type: "String", subgraph: "Rfam")
  synonyms: String @source(name: "synonyms", type: "String", subgraph: "Rfam")
}

input clan_InsertInput @source(name: "clan_InsertInput", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp! @source(name: "updated", type: "Timestamp!", subgraph: "Rfam")
}

input clan_UpdateInput @source(name: "clan_UpdateInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  id: String @source(name: "id", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input clan_database_link_InsertInput @source(name: "clan_database_link_InsertInput", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  db_id: String! @source(name: "db_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String! @source(name: "db_link", type: "String!", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input clan_database_link_UpdateInput @source(name: "clan_database_link_UpdateInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  db_id: String @source(name: "db_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String @source(name: "db_link", type: "String", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input clan_literature_reference_InsertInput @source(name: "clan_literature_reference_InsertInput", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  pmid: Int! @source(name: "pmid", type: "Int!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
}

input clan_literature_reference_UpdateInput @source(name: "clan_literature_reference_UpdateInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  pmid: Int @source(name: "pmid", type: "Int", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
}

input clan_membership_InsertInput @source(name: "clan_membership_InsertInput", subgraph: "Rfam") {
  clan_acc: String! @source(name: "clan_acc", type: "String!", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
}

input clan_membership_UpdateInput @source(name: "clan_membership_UpdateInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
}

input database_link_InsertInput @source(name: "database_link_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  db_id: String! @source(name: "db_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String! @source(name: "db_link", type: "String!", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input database_link_UpdateInput @source(name: "database_link_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  db_id: String @source(name: "db_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String @source(name: "db_link", type: "String", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input db_version_InsertInput @source(name: "db_version_InsertInput", subgraph: "Rfam") {
  rfam_release: Float! @source(name: "rfam_release", type: "Float!", subgraph: "Rfam")
  rfam_release_date: DateTime! @source(name: "rfam_release_date", type: "DateTime!", subgraph: "Rfam")
  number_families: Int! @source(name: "number_families", type: "Int!", subgraph: "Rfam")
  embl_release: String! @source(name: "embl_release", type: "String!", subgraph: "Rfam")
  genome_collection_date: DateTime @source(name: "genome_collection_date", type: "DateTime", subgraph: "Rfam")
  refseq_version: Int @source(name: "refseq_version", type: "Int", subgraph: "Rfam")
  pdb_date: DateTime @source(name: "pdb_date", type: "DateTime", subgraph: "Rfam")
  infernal_version: String @source(name: "infernal_version", type: "String", subgraph: "Rfam")
}

input db_version_UpdateInput @source(name: "db_version_UpdateInput", subgraph: "Rfam") {
  rfam_release: Float @source(name: "rfam_release", type: "Float", subgraph: "Rfam")
  rfam_release_date: DateTime @source(name: "rfam_release_date", type: "DateTime", subgraph: "Rfam")
  number_families: Int @source(name: "number_families", type: "Int", subgraph: "Rfam")
  embl_release: String @source(name: "embl_release", type: "String", subgraph: "Rfam")
  genome_collection_date: DateTime @source(name: "genome_collection_date", type: "DateTime", subgraph: "Rfam")
  refseq_version: Int @source(name: "refseq_version", type: "Int", subgraph: "Rfam")
  pdb_date: DateTime @source(name: "pdb_date", type: "DateTime", subgraph: "Rfam")
  infernal_version: String @source(name: "infernal_version", type: "String", subgraph: "Rfam")
}

input dead_clan_InsertInput @source(name: "dead_clan_InsertInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  """Added. Add author?"""
  clan_id: String! @source(name: "clan_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  user: String! @source(name: "user", type: "String!", subgraph: "Rfam")
}

input dead_clan_UpdateInput @source(name: "dead_clan_UpdateInput", subgraph: "Rfam") {
  clan_acc: String @source(name: "clan_acc", type: "String", subgraph: "Rfam")
  """Added. Add author?"""
  clan_id: String @source(name: "clan_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  user: String @source(name: "user", type: "String", subgraph: "Rfam")
}

input dead_family_InsertInput @source(name: "dead_family_InsertInput", subgraph: "Rfam") {
  """record the author???"""
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String! @source(name: "rfam_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  """
  wikipedia page title
  
  """
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  user: String! @source(name: "user", type: "String!", subgraph: "Rfam")
}

input dead_family_UpdateInput @source(name: "dead_family_UpdateInput", subgraph: "Rfam") {
  """record the author???"""
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  forward_to: String @source(name: "forward_to", type: "String", subgraph: "Rfam")
  """
  wikipedia page title
  
  """
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  user: String @source(name: "user", type: "String", subgraph: "Rfam")
}

input ensembl_names_InsertInput @source(name: "ensembl_names_InsertInput", subgraph: "Rfam") {
  insdc: String @source(name: "insdc", type: "String", subgraph: "Rfam")
  ensembl: String @source(name: "ensembl", type: "String", subgraph: "Rfam")
}

input ensembl_names_UpdateInput @source(name: "ensembl_names_UpdateInput", subgraph: "Rfam") {
  insdc: String @source(name: "insdc", type: "String", subgraph: "Rfam")
  ensembl: String @source(name: "ensembl", type: "String", subgraph: "Rfam")
}

input family_InsertInput @source(name: "family_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfam_id: String! @source(name: "rfam_id", type: "String!", subgraph: "Rfam")
  auto_wiki: Int! @source(name: "auto_wiki", type: "Int!", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  cmsearch: String @source(name: "cmsearch", type: "String", subgraph: "Rfam")
  num_seed: BigInt @source(name: "num_seed", type: "BigInt", subgraph: "Rfam")
  num_full: BigInt @source(name: "num_full", type: "BigInt", subgraph: "Rfam")
  num_genome_seq: BigInt @source(name: "num_genome_seq", type: "BigInt", subgraph: "Rfam")
  num_refseq: BigInt @source(name: "num_refseq", type: "BigInt", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  structure_source: String @source(name: "structure_source", type: "String", subgraph: "Rfam")
  number_of_species: BigInt @source(name: "number_of_species", type: "BigInt", subgraph: "Rfam")
  number_3d_structures: Int @source(name: "number_3d_structures", type: "Int", subgraph: "Rfam")
  num_pseudonokts: Int @source(name: "num_pseudonokts", type: "Int", subgraph: "Rfam")
  tax_seed: String @source(name: "tax_seed", type: "String", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input family_UpdateInput @source(name: "family_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  auto_wiki: Int @source(name: "auto_wiki", type: "Int", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  previous_id: String @source(name: "previous_id", type: "String", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  cmsearch: String @source(name: "cmsearch", type: "String", subgraph: "Rfam")
  num_seed: BigInt @source(name: "num_seed", type: "BigInt", subgraph: "Rfam")
  num_full: BigInt @source(name: "num_full", type: "BigInt", subgraph: "Rfam")
  num_genome_seq: BigInt @source(name: "num_genome_seq", type: "BigInt", subgraph: "Rfam")
  num_refseq: BigInt @source(name: "num_refseq", type: "BigInt", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  structure_source: String @source(name: "structure_source", type: "String", subgraph: "Rfam")
  number_of_species: BigInt @source(name: "number_of_species", type: "BigInt", subgraph: "Rfam")
  number_3d_structures: Int @source(name: "number_3d_structures", type: "Int", subgraph: "Rfam")
  num_pseudonokts: Int @source(name: "num_pseudonokts", type: "Int", subgraph: "Rfam")
  tax_seed: String @source(name: "tax_seed", type: "String", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input family_author_InsertInput @source(name: "family_author_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  author_id: Int! @source(name: "author_id", type: "Int!", subgraph: "Rfam")
  desc_order: Int! @source(name: "desc_order", type: "Int!", subgraph: "Rfam")
}

input family_author_UpdateInput @source(name: "family_author_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  author_id: Int @source(name: "author_id", type: "Int", subgraph: "Rfam")
  desc_order: Int @source(name: "desc_order", type: "Int", subgraph: "Rfam")
}

input family_literature_reference_InsertInput @source(name: "family_literature_reference_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pmid: Int! @source(name: "pmid", type: "Int!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
}

input family_literature_reference_UpdateInput @source(name: "family_literature_reference_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pmid: Int @source(name: "pmid", type: "Int", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
}

input family_long_InsertInput @source(name: "family_long_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  referenece_structure: String @source(name: "referenece_structure", type: "String", subgraph: "Rfam")
  reference_sequence: String @source(name: "reference_sequence", type: "String", subgraph: "Rfam")
}

input family_long_UpdateInput @source(name: "family_long_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  referenece_structure: String @source(name: "referenece_structure", type: "String", subgraph: "Rfam")
  reference_sequence: String @source(name: "reference_sequence", type: "String", subgraph: "Rfam")
}

input family_ncbi_InsertInput @source(name: "family_ncbi_InsertInput", subgraph: "Rfam") {
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  """Is this really needed?"""
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
}

input family_ncbi_UpdateInput @source(name: "family_ncbi_UpdateInput", subgraph: "Rfam") {
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  """Is this really needed?"""
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
}

input features_InsertInput @source(name: "features_InsertInput", subgraph: "Rfam") {
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  database_id: String! @source(name: "database_id", type: "String!", subgraph: "Rfam")
  primary_id: String! @source(name: "primary_id", type: "String!", subgraph: "Rfam")
  secondary_id: String @source(name: "secondary_id", type: "String", subgraph: "Rfam")
  feat_orient: Int @source(name: "feat_orient", type: "Int", subgraph: "Rfam")
  feat_start: BigInt @source(name: "feat_start", type: "BigInt", subgraph: "Rfam")
  feat_end: BigInt @source(name: "feat_end", type: "BigInt", subgraph: "Rfam")
  quaternary_id: String @source(name: "quaternary_id", type: "String", subgraph: "Rfam")
}

input features_UpdateInput @source(name: "features_UpdateInput", subgraph: "Rfam") {
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  database_id: String @source(name: "database_id", type: "String", subgraph: "Rfam")
  primary_id: String @source(name: "primary_id", type: "String", subgraph: "Rfam")
  secondary_id: String @source(name: "secondary_id", type: "String", subgraph: "Rfam")
  feat_orient: Int @source(name: "feat_orient", type: "Int", subgraph: "Rfam")
  feat_start: BigInt @source(name: "feat_start", type: "BigInt", subgraph: "Rfam")
  feat_end: BigInt @source(name: "feat_end", type: "BigInt", subgraph: "Rfam")
  quaternary_id: String @source(name: "quaternary_id", type: "String", subgraph: "Rfam")
}

input full_region_InsertInput @source(name: "full_region_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  truncated: full_region_truncated! @source(name: "truncated", type: "full_region_truncated!", subgraph: "Rfam")
  type: full_region_type @source(name: "type", type: "full_region_type", subgraph: "Rfam")
  is_significant: Int! @source(name: "is_significant", type: "Int!", subgraph: "Rfam")
}

input full_region_UpdateInput @source(name: "full_region_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt @source(name: "seq_end", type: "BigInt", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int @source(name: "cm_start", type: "Int", subgraph: "Rfam")
  cm_end: Int @source(name: "cm_end", type: "Int", subgraph: "Rfam")
  truncated: full_region_truncated @source(name: "truncated", type: "full_region_truncated", subgraph: "Rfam")
  type: full_region_type @source(name: "type", type: "full_region_type", subgraph: "Rfam")
  is_significant: Int @source(name: "is_significant", type: "Int", subgraph: "Rfam")
}

input genome_InsertInput @source(name: "genome_InsertInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: Int @source(name: "assembly_version", type: "Int", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: Int @source(name: "wgs_version", type: "Int", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: genome_assembly_level @source(name: "assembly_level", type: "genome_assembly_level", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: BigInt @source(name: "total_length", type: "BigInt", subgraph: "Rfam")
  ungapped_length: BigInt @source(name: "ungapped_length", type: "BigInt", subgraph: "Rfam")
  circular: Int @source(name: "circular", type: "Int", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: Int @source(name: "num_rfam_regions", type: "Int", subgraph: "Rfam")
  num_families: Int @source(name: "num_families", type: "Int", subgraph: "Rfam")
  is_reference: Int @source(name: "is_reference", type: "Int", subgraph: "Rfam")
  is_representative: Int @source(name: "is_representative", type: "Int", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input genome_UpdateInput @source(name: "genome_UpdateInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: Int @source(name: "assembly_version", type: "Int", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: Int @source(name: "wgs_version", type: "Int", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: genome_assembly_level @source(name: "assembly_level", type: "genome_assembly_level", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: BigInt @source(name: "total_length", type: "BigInt", subgraph: "Rfam")
  ungapped_length: BigInt @source(name: "ungapped_length", type: "BigInt", subgraph: "Rfam")
  circular: Int @source(name: "circular", type: "Int", subgraph: "Rfam")
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: Int @source(name: "num_rfam_regions", type: "Int", subgraph: "Rfam")
  num_families: Int @source(name: "num_families", type: "Int", subgraph: "Rfam")
  is_reference: Int @source(name: "is_reference", type: "Int", subgraph: "Rfam")
  is_representative: Int @source(name: "is_representative", type: "Int", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input genome_temp_InsertInput @source(name: "genome_temp_InsertInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: Int @source(name: "assembly_version", type: "Int", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: Int @source(name: "wgs_version", type: "Int", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: genome_temp_assembly_level @source(name: "assembly_level", type: "genome_temp_assembly_level", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: BigInt @source(name: "total_length", type: "BigInt", subgraph: "Rfam")
  ungapped_length: BigInt @source(name: "ungapped_length", type: "BigInt", subgraph: "Rfam")
  circular: Int @source(name: "circular", type: "Int", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: Int @source(name: "num_rfam_regions", type: "Int", subgraph: "Rfam")
  num_families: Int @source(name: "num_families", type: "Int", subgraph: "Rfam")
  is_reference: Int @source(name: "is_reference", type: "Int", subgraph: "Rfam")
  is_representative: Int @source(name: "is_representative", type: "Int", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input genome_temp_UpdateInput @source(name: "genome_temp_UpdateInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  assembly_acc: String @source(name: "assembly_acc", type: "String", subgraph: "Rfam")
  assembly_version: Int @source(name: "assembly_version", type: "Int", subgraph: "Rfam")
  wgs_acc: String @source(name: "wgs_acc", type: "String", subgraph: "Rfam")
  wgs_version: Int @source(name: "wgs_version", type: "Int", subgraph: "Rfam")
  assembly_name: String @source(name: "assembly_name", type: "String", subgraph: "Rfam")
  assembly_level: genome_temp_assembly_level @source(name: "assembly_level", type: "genome_temp_assembly_level", subgraph: "Rfam")
  study_ref: String @source(name: "study_ref", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  total_length: BigInt @source(name: "total_length", type: "BigInt", subgraph: "Rfam")
  ungapped_length: BigInt @source(name: "ungapped_length", type: "BigInt", subgraph: "Rfam")
  circular: Int @source(name: "circular", type: "Int", subgraph: "Rfam")
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  scientific_name: String @source(name: "scientific_name", type: "String", subgraph: "Rfam")
  common_name: String @source(name: "common_name", type: "String", subgraph: "Rfam")
  kingdom: String @source(name: "kingdom", type: "String", subgraph: "Rfam")
  num_rfam_regions: Int @source(name: "num_rfam_regions", type: "Int", subgraph: "Rfam")
  num_families: Int @source(name: "num_families", type: "Int", subgraph: "Rfam")
  is_reference: Int @source(name: "is_reference", type: "Int", subgraph: "Rfam")
  is_representative: Int @source(name: "is_representative", type: "Int", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input genseq_InsertInput @source(name: "genseq_InsertInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input genseq_UpdateInput @source(name: "genseq_UpdateInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input genseq_temp_InsertInput @source(name: "genseq_temp_InsertInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input genseq_temp_UpdateInput @source(name: "genseq_temp_UpdateInput", subgraph: "Rfam") {
  """This should be """
  upid: String @source(name: "upid", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  chromosome_name: String @source(name: "chromosome_name", type: "String", subgraph: "Rfam")
  chromosome_type: String @source(name: "chromosome_type", type: "String", subgraph: "Rfam")
  version: String @source(name: "version", type: "String", subgraph: "Rfam")
}

input html_alignment_InsertInput @source(name: "html_alignment_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  type: html_alignment_type! @source(name: "type", type: "html_alignment_type!", subgraph: "Rfam")
  html: String @source(name: "html", type: "String", subgraph: "Rfam")
  block: Int! @source(name: "block", type: "Int!", subgraph: "Rfam")
  html_alignmentscol: String @source(name: "html_alignmentscol", type: "String", subgraph: "Rfam")
}

input html_alignment_UpdateInput @source(name: "html_alignment_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  type: html_alignment_type @source(name: "type", type: "html_alignment_type", subgraph: "Rfam")
  html: String @source(name: "html", type: "String", subgraph: "Rfam")
  block: Int @source(name: "block", type: "Int", subgraph: "Rfam")
  html_alignmentscol: String @source(name: "html_alignmentscol", type: "String", subgraph: "Rfam")
}

input keywords_InsertInput @source(name: "keywords_InsertInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  rfam_general: String @source(name: "rfam_general", type: "String", subgraph: "Rfam")
  literature: String @source(name: "literature", type: "String", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  pdb_mappings: String @source(name: "pdb_mappings", type: "String", subgraph: "Rfam")
  clan_info: String @source(name: "clan_info", type: "String", subgraph: "Rfam")
}

input keywords_UpdateInput @source(name: "keywords_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfam_id: String @source(name: "rfam_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  rfam_general: String @source(name: "rfam_general", type: "String", subgraph: "Rfam")
  literature: String @source(name: "literature", type: "String", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  pdb_mappings: String @source(name: "pdb_mappings", type: "String", subgraph: "Rfam")
  clan_info: String @source(name: "clan_info", type: "String", subgraph: "Rfam")
}

input literature_reference_InsertInput @source(name: "literature_reference_InsertInput", subgraph: "Rfam") {
  pmid: Int @source(name: "pmid", type: "Int", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  journal: String @source(name: "journal", type: "String", subgraph: "Rfam")
}

input literature_reference_UpdateInput @source(name: "literature_reference_UpdateInput", subgraph: "Rfam") {
  pmid: Int @source(name: "pmid", type: "Int", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  journal: String @source(name: "journal", type: "String", subgraph: "Rfam")
}

input matches_and_fasta_InsertInput @source(name: "matches_and_fasta_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  match_list: String @source(name: "match_list", type: "String", subgraph: "Rfam")
  fasta: String @source(name: "fasta", type: "String", subgraph: "Rfam")
  type: matches_and_fasta_type! @source(name: "type", type: "matches_and_fasta_type!", subgraph: "Rfam")
}

input matches_and_fasta_UpdateInput @source(name: "matches_and_fasta_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  match_list: String @source(name: "match_list", type: "String", subgraph: "Rfam")
  fasta: String @source(name: "fasta", type: "String", subgraph: "Rfam")
  type: matches_and_fasta_type @source(name: "type", type: "matches_and_fasta_type", subgraph: "Rfam")
}

input motif_InsertInput @source(name: "motif_InsertInput", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  num_seed: BigInt @source(name: "num_seed", type: "BigInt", subgraph: "Rfam")
  average_id: Float @source(name: "average_id", type: "Float", subgraph: "Rfam")
  average_sqlen: Float @source(name: "average_sqlen", type: "Float", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input motif_UpdateInput @source(name: "motif_UpdateInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  num_seed: BigInt @source(name: "num_seed", type: "BigInt", subgraph: "Rfam")
  average_id: Float @source(name: "average_id", type: "Float", subgraph: "Rfam")
  average_sqlen: Float @source(name: "average_sqlen", type: "Float", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  wiki: String @source(name: "wiki", type: "String", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input motif_database_link_InsertInput @source(name: "motif_database_link_InsertInput", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  db_id: String! @source(name: "db_id", type: "String!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String! @source(name: "db_link", type: "String!", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input motif_database_link_UpdateInput @source(name: "motif_database_link_UpdateInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  db_id: String @source(name: "db_id", type: "String", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  db_link: String @source(name: "db_link", type: "String", subgraph: "Rfam")
  other_params: String @source(name: "other_params", type: "String", subgraph: "Rfam")
}

input motif_family_stats_InsertInput @source(name: "motif_family_stats_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  num_hits: Int @source(name: "num_hits", type: "Int", subgraph: "Rfam")
  frac_hits: Float @source(name: "frac_hits", type: "Float", subgraph: "Rfam")
  sum_bits: Float @source(name: "sum_bits", type: "Float", subgraph: "Rfam")
  avg_weight_bits: Float @source(name: "avg_weight_bits", type: "Float", subgraph: "Rfam")
}

input motif_family_stats_UpdateInput @source(name: "motif_family_stats_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  num_hits: Int @source(name: "num_hits", type: "Int", subgraph: "Rfam")
  frac_hits: Float @source(name: "frac_hits", type: "Float", subgraph: "Rfam")
  sum_bits: Float @source(name: "sum_bits", type: "Float", subgraph: "Rfam")
  avg_weight_bits: Float @source(name: "avg_weight_bits", type: "Float", subgraph: "Rfam")
}

input motif_file_InsertInput @source(name: "motif_file_InsertInput", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  seed: String! @source(name: "seed", type: "String!", subgraph: "Rfam")
  cm: String! @source(name: "cm", type: "String!", subgraph: "Rfam")
}

input motif_file_UpdateInput @source(name: "motif_file_UpdateInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  seed: String @source(name: "seed", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
}

input motif_literature_InsertInput @source(name: "motif_literature_InsertInput", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  pmid: Int! @source(name: "pmid", type: "Int!", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
}

input motif_literature_UpdateInput @source(name: "motif_literature_UpdateInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  pmid: Int @source(name: "pmid", type: "Int", subgraph: "Rfam")
  comment: String @source(name: "comment", type: "String", subgraph: "Rfam")
  order_added: Int @source(name: "order_added", type: "Int", subgraph: "Rfam")
}

input motif_matches_InsertInput @source(name: "motif_matches_InsertInput", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  rfamseq_start: BigInt @source(name: "rfamseq_start", type: "BigInt", subgraph: "Rfam")
  rfamseq_stop: BigInt @source(name: "rfamseq_stop", type: "BigInt", subgraph: "Rfam")
  query_start: Int @source(name: "query_start", type: "Int", subgraph: "Rfam")
  query_stop: Int @source(name: "query_stop", type: "Int", subgraph: "Rfam")
  motif_start: Int @source(name: "motif_start", type: "Int", subgraph: "Rfam")
  motif_stop: Int @source(name: "motif_stop", type: "Int", subgraph: "Rfam")
  e_value: String @source(name: "e_value", type: "String", subgraph: "Rfam")
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
}

input motif_matches_UpdateInput @source(name: "motif_matches_UpdateInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  rfamseq_start: BigInt @source(name: "rfamseq_start", type: "BigInt", subgraph: "Rfam")
  rfamseq_stop: BigInt @source(name: "rfamseq_stop", type: "BigInt", subgraph: "Rfam")
  query_start: Int @source(name: "query_start", type: "Int", subgraph: "Rfam")
  query_stop: Int @source(name: "query_stop", type: "Int", subgraph: "Rfam")
  motif_start: Int @source(name: "motif_start", type: "Int", subgraph: "Rfam")
  motif_stop: Int @source(name: "motif_stop", type: "Int", subgraph: "Rfam")
  e_value: String @source(name: "e_value", type: "String", subgraph: "Rfam")
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
}

input motif_old_InsertInput @source(name: "motif_old_InsertInput", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  created: DateTime! @source(name: "created", type: "DateTime!", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input motif_old_UpdateInput @source(name: "motif_old_UpdateInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  motif_id: String @source(name: "motif_id", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
  seed_source: String @source(name: "seed_source", type: "String", subgraph: "Rfam")
  gathering_cutoff: Float @source(name: "gathering_cutoff", type: "Float", subgraph: "Rfam")
  trusted_cutoff: Float @source(name: "trusted_cutoff", type: "Float", subgraph: "Rfam")
  noise_cutoff: Float @source(name: "noise_cutoff", type: "Float", subgraph: "Rfam")
  cmbuild: String @source(name: "cmbuild", type: "String", subgraph: "Rfam")
  cmcalibrate: String @source(name: "cmcalibrate", type: "String", subgraph: "Rfam")
  type: String @source(name: "type", type: "String", subgraph: "Rfam")
  ecmli_lambda: Float @source(name: "ecmli_lambda", type: "Float", subgraph: "Rfam")
  ecmli_mu: Float @source(name: "ecmli_mu", type: "Float", subgraph: "Rfam")
  ecmli_cal_db: Int @source(name: "ecmli_cal_db", type: "Int", subgraph: "Rfam")
  ecmli_cal_hits: Int @source(name: "ecmli_cal_hits", type: "Int", subgraph: "Rfam")
  maxl: Int @source(name: "maxl", type: "Int", subgraph: "Rfam")
  clen: Int @source(name: "clen", type: "Int", subgraph: "Rfam")
  match_pair_node: Int @source(name: "match_pair_node", type: "Int", subgraph: "Rfam")
  hmm_tau: Float @source(name: "hmm_tau", type: "Float", subgraph: "Rfam")
  hmm_lambda: Float @source(name: "hmm_lambda", type: "Float", subgraph: "Rfam")
  created: DateTime @source(name: "created", type: "DateTime", subgraph: "Rfam")
  updated: Timestamp @source(name: "updated", type: "Timestamp", subgraph: "Rfam")
}

input motif_pdb_InsertInput @source(name: "motif_pdb_InsertInput", subgraph: "Rfam") {
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int @source(name: "pdb_start", type: "Int", subgraph: "Rfam")
  pdb_end: Int @source(name: "pdb_end", type: "Int", subgraph: "Rfam")
}

input motif_pdb_UpdateInput @source(name: "motif_pdb_UpdateInput", subgraph: "Rfam") {
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int @source(name: "pdb_start", type: "Int", subgraph: "Rfam")
  pdb_end: Int @source(name: "pdb_end", type: "Int", subgraph: "Rfam")
}

input motif_ss_image_InsertInput @source(name: "motif_ss_image_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  motif_acc: String! @source(name: "motif_acc", type: "String!", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
}

input motif_ss_image_UpdateInput @source(name: "motif_ss_image_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  motif_acc: String @source(name: "motif_acc", type: "String", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
}

input pdb_InsertInput @source(name: "pdb_InsertInput", subgraph: "Rfam") {
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  keywords: String @source(name: "keywords", type: "String", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  date: String @source(name: "date", type: "String", subgraph: "Rfam")
  resolution: Float @source(name: "resolution", type: "Float", subgraph: "Rfam")
  method: String @source(name: "method", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
}

input pdb_UpdateInput @source(name: "pdb_UpdateInput", subgraph: "Rfam") {
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  keywords: String @source(name: "keywords", type: "String", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
  date: String @source(name: "date", type: "String", subgraph: "Rfam")
  resolution: Float @source(name: "resolution", type: "Float", subgraph: "Rfam")
  method: String @source(name: "method", type: "String", subgraph: "Rfam")
  author: String @source(name: "author", type: "String", subgraph: "Rfam")
}

input pdb_full_region_InsertInput @source(name: "pdb_full_region_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int! @source(name: "pdb_start", type: "Int!", subgraph: "Rfam")
  pdb_end: Int! @source(name: "pdb_end", type: "Int!", subgraph: "Rfam")
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: Int @source(name: "is_significant", type: "Int", subgraph: "Rfam")
}

input pdb_full_region_UpdateInput @source(name: "pdb_full_region_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int @source(name: "pdb_start", type: "Int", subgraph: "Rfam")
  pdb_end: Int @source(name: "pdb_end", type: "Int", subgraph: "Rfam")
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int @source(name: "cm_start", type: "Int", subgraph: "Rfam")
  cm_end: Int @source(name: "cm_end", type: "Int", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: Int @source(name: "is_significant", type: "Int", subgraph: "Rfam")
}

input pdb_full_region_old_InsertInput @source(name: "pdb_full_region_old_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int! @source(name: "pdb_start", type: "Int!", subgraph: "Rfam")
  pdb_end: Int! @source(name: "pdb_end", type: "Int!", subgraph: "Rfam")
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: Int @source(name: "is_significant", type: "Int", subgraph: "Rfam")
}

input pdb_full_region_old_UpdateInput @source(name: "pdb_full_region_old_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_start: Int @source(name: "pdb_start", type: "Int", subgraph: "Rfam")
  pdb_end: Int @source(name: "pdb_end", type: "Int", subgraph: "Rfam")
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int @source(name: "cm_start", type: "Int", subgraph: "Rfam")
  cm_end: Int @source(name: "cm_end", type: "Int", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
  is_significant: Int @source(name: "is_significant", type: "Int", subgraph: "Rfam")
}

input pdb_rfam_reg_InsertInput @source(name: "pdb_rfam_reg_InsertInput", subgraph: "Rfam") {
  auto_pdb_reg: Int @source(name: "auto_pdb_reg", type: "Int", subgraph: "Rfam")
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pdb_seq: String! @source(name: "pdb_seq", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_res_start: Int @source(name: "pdb_res_start", type: "Int", subgraph: "Rfam")
  pdb_res_end: Int @source(name: "pdb_res_end", type: "Int", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt @source(name: "seq_end", type: "BigInt", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
}

input pdb_rfam_reg_UpdateInput @source(name: "pdb_rfam_reg_UpdateInput", subgraph: "Rfam") {
  auto_pdb_reg: Int @source(name: "auto_pdb_reg", type: "Int", subgraph: "Rfam")
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pdb_seq: String @source(name: "pdb_seq", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
  pdb_res_start: Int @source(name: "pdb_res_start", type: "Int", subgraph: "Rfam")
  pdb_res_end: Int @source(name: "pdb_res_end", type: "Int", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt @source(name: "seq_end", type: "BigInt", subgraph: "Rfam")
  hex_colour: String @source(name: "hex_colour", type: "String", subgraph: "Rfam")
}

input pdb_sequence_InsertInput @source(name: "pdb_sequence_InsertInput", subgraph: "Rfam") {
  pdb_seq: String! @source(name: "pdb_seq", type: "String!", subgraph: "Rfam")
  pdb_id: String! @source(name: "pdb_id", type: "String!", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
}

input pdb_sequence_UpdateInput @source(name: "pdb_sequence_UpdateInput", subgraph: "Rfam") {
  pdb_seq: String @source(name: "pdb_seq", type: "String", subgraph: "Rfam")
  pdb_id: String @source(name: "pdb_id", type: "String", subgraph: "Rfam")
  chain: String @source(name: "chain", type: "String", subgraph: "Rfam")
}

input processed_data_InsertInput @source(name: "processed_data_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
  ss_stats_pbp: String @source(name: "ss_stats_pbp", type: "String", subgraph: "Rfam")
  ss_stats_seq: String @source(name: "ss_stats_seq", type: "String", subgraph: "Rfam")
  ss_stats_fam: String @source(name: "ss_stats_fam", type: "String", subgraph: "Rfam")
  scores_graph: String @source(name: "scores_graph", type: "String", subgraph: "Rfam")
  genome_full: String @source(name: "genome_full", type: "String", subgraph: "Rfam")
  genome_full_md5: String @source(name: "genome_full_md5", type: "String", subgraph: "Rfam")
  refseq_full: String @source(name: "refseq_full", type: "String", subgraph: "Rfam")
  refseq_full_md5: String @source(name: "refseq_full_md5", type: "String", subgraph: "Rfam")
}

input processed_data_UpdateInput @source(name: "processed_data_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  cm: String @source(name: "cm", type: "String", subgraph: "Rfam")
  ss_stats_pbp: String @source(name: "ss_stats_pbp", type: "String", subgraph: "Rfam")
  ss_stats_seq: String @source(name: "ss_stats_seq", type: "String", subgraph: "Rfam")
  ss_stats_fam: String @source(name: "ss_stats_fam", type: "String", subgraph: "Rfam")
  scores_graph: String @source(name: "scores_graph", type: "String", subgraph: "Rfam")
  genome_full: String @source(name: "genome_full", type: "String", subgraph: "Rfam")
  genome_full_md5: String @source(name: "genome_full_md5", type: "String", subgraph: "Rfam")
  refseq_full: String @source(name: "refseq_full", type: "String", subgraph: "Rfam")
  refseq_full_md5: String @source(name: "refseq_full_md5", type: "String", subgraph: "Rfam")
}

input pseudoknot_InsertInput @source(name: "pseudoknot_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  pseudoknot_id: String! @source(name: "pseudoknot_id", type: "String!", subgraph: "Rfam")
  source: pseudoknot_source! @source(name: "source", type: "pseudoknot_source!", subgraph: "Rfam")
  covariation: Int @source(name: "covariation", type: "Int", subgraph: "Rfam")
}

input pseudoknot_UpdateInput @source(name: "pseudoknot_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  pseudoknot_id: String @source(name: "pseudoknot_id", type: "String", subgraph: "Rfam")
  source: pseudoknot_source @source(name: "source", type: "pseudoknot_source", subgraph: "Rfam")
  covariation: Int @source(name: "covariation", type: "Int", subgraph: "Rfam")
}

input refseq_InsertInput @source(name: "refseq_InsertInput", subgraph: "Rfam") {
  refseq_acc: String! @source(name: "refseq_acc", type: "String!", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  ncbi_taxid: Int @source(name: "ncbi_taxid", type: "Int", subgraph: "Rfam")
}

input refseq_UpdateInput @source(name: "refseq_UpdateInput", subgraph: "Rfam") {
  refseq_acc: String @source(name: "refseq_acc", type: "String", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  ncbi_taxid: Int @source(name: "ncbi_taxid", type: "Int", subgraph: "Rfam")
}

input refseq_full_region_InsertInput @source(name: "refseq_full_region_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  refseq_acc: String! @source(name: "refseq_acc", type: "String!", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int! @source(name: "cm_start", type: "Int!", subgraph: "Rfam")
  cm_end: Int! @source(name: "cm_end", type: "Int!", subgraph: "Rfam")
  truncated: refseq_full_region_truncated! @source(name: "truncated", type: "refseq_full_region_truncated!", subgraph: "Rfam")
}

input refseq_full_region_UpdateInput @source(name: "refseq_full_region_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  refseq_acc: String @source(name: "refseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt @source(name: "seq_end", type: "BigInt", subgraph: "Rfam")
  """99999.99 is the approx limit from Infernal."""
  bit_score: Float @source(name: "bit_score", type: "Float", subgraph: "Rfam")
  evalue_score: String @source(name: "evalue_score", type: "String", subgraph: "Rfam")
  cm_start: Int @source(name: "cm_start", type: "Int", subgraph: "Rfam")
  cm_end: Int @source(name: "cm_end", type: "Int", subgraph: "Rfam")
  truncated: refseq_full_region_truncated @source(name: "truncated", type: "refseq_full_region_truncated", subgraph: "Rfam")
}

input rfamseq_InsertInput @source(name: "rfamseq_InsertInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  accession: String @source(name: "accession", type: "String", subgraph: "Rfam")
  version: Int! @source(name: "version", type: "Int!", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  mol_type: rfamseq_mol_type! @source(name: "mol_type", type: "rfamseq_mol_type!", subgraph: "Rfam")
  length: Int @source(name: "length", type: "Int", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String! @source(name: "source", type: "String!", subgraph: "Rfam")
}

input rfamseq_UpdateInput @source(name: "rfamseq_UpdateInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  accession: String @source(name: "accession", type: "String", subgraph: "Rfam")
  version: Int @source(name: "version", type: "Int", subgraph: "Rfam")
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  mol_type: rfamseq_mol_type @source(name: "mol_type", type: "rfamseq_mol_type", subgraph: "Rfam")
  length: Int @source(name: "length", type: "Int", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String @source(name: "source", type: "String", subgraph: "Rfam")
}

input rfamseq_temp_InsertInput @source(name: "rfamseq_temp_InsertInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  accession: String @source(name: "accession", type: "String", subgraph: "Rfam")
  version: Int! @source(name: "version", type: "Int!", subgraph: "Rfam")
  ncbi_id: Int! @source(name: "ncbi_id", type: "Int!", subgraph: "Rfam")
  mol_type: rfamseq_temp_mol_type! @source(name: "mol_type", type: "rfamseq_temp_mol_type!", subgraph: "Rfam")
  length: Int @source(name: "length", type: "Int", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String! @source(name: "source", type: "String!", subgraph: "Rfam")
}

input rfamseq_temp_UpdateInput @source(name: "rfamseq_temp_UpdateInput", subgraph: "Rfam") {
  """This should be """
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  accession: String @source(name: "accession", type: "String", subgraph: "Rfam")
  version: Int @source(name: "version", type: "Int", subgraph: "Rfam")
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  mol_type: rfamseq_temp_mol_type @source(name: "mol_type", type: "rfamseq_temp_mol_type", subgraph: "Rfam")
  length: Int @source(name: "length", type: "Int", subgraph: "Rfam")
  description: String @source(name: "description", type: "String", subgraph: "Rfam")
  previous_acc: String @source(name: "previous_acc", type: "String", subgraph: "Rfam")
  source: String @source(name: "source", type: "String", subgraph: "Rfam")
}

input rnacentral_matches_InsertInput @source(name: "rnacentral_matches_InsertInput", subgraph: "Rfam") {
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  md5: String! @source(name: "md5", type: "String!", subgraph: "Rfam")
  rnacentral_id: String @source(name: "rnacentral_id", type: "String", subgraph: "Rfam")
  type: rnacentral_matches_type @source(name: "type", type: "rnacentral_matches_type", subgraph: "Rfam")
}

input rnacentral_matches_UpdateInput @source(name: "rnacentral_matches_UpdateInput", subgraph: "Rfam") {
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt @source(name: "seq_end", type: "BigInt", subgraph: "Rfam")
  md5: String @source(name: "md5", type: "String", subgraph: "Rfam")
  rnacentral_id: String @source(name: "rnacentral_id", type: "String", subgraph: "Rfam")
  type: rnacentral_matches_type @source(name: "type", type: "rnacentral_matches_type", subgraph: "Rfam")
}

input rscape_annotations_InsertInput @source(name: "rscape_annotations_InsertInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  F: Float @source(name: "F", type: "Float", subgraph: "Rfam")
  sensitivity: Float @source(name: "sensitivity", type: "Float", subgraph: "Rfam")
  ppv: Float @source(name: "ppv", type: "Float", subgraph: "Rfam")
  true: Int @source(name: "true", type: "Int", subgraph: "Rfam")
  found: Int @source(name: "found", type: "Int", subgraph: "Rfam")
  tp: Int @source(name: "tp", type: "Int", subgraph: "Rfam")
  avgid: Float @source(name: "avgid", type: "Float", subgraph: "Rfam")
  alen: Int @source(name: "alen", type: "Int", subgraph: "Rfam")
  nseq: Int @source(name: "nseq", type: "Int", subgraph: "Rfam")
}

input rscape_annotations_UpdateInput @source(name: "rscape_annotations_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  F: Float @source(name: "F", type: "Float", subgraph: "Rfam")
  sensitivity: Float @source(name: "sensitivity", type: "Float", subgraph: "Rfam")
  ppv: Float @source(name: "ppv", type: "Float", subgraph: "Rfam")
  true: Int @source(name: "true", type: "Int", subgraph: "Rfam")
  found: Int @source(name: "found", type: "Int", subgraph: "Rfam")
  tp: Int @source(name: "tp", type: "Int", subgraph: "Rfam")
  avgid: Float @source(name: "avgid", type: "Float", subgraph: "Rfam")
  alen: Int @source(name: "alen", type: "Int", subgraph: "Rfam")
  nseq: Int @source(name: "nseq", type: "Int", subgraph: "Rfam")
}

input secondary_structure_image_InsertInput @source(name: "secondary_structure_image_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  type: secondary_structure_image_type @source(name: "type", type: "secondary_structure_image_type", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
}

input secondary_structure_image_UpdateInput @source(name: "secondary_structure_image_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  type: secondary_structure_image_type @source(name: "type", type: "secondary_structure_image_type", subgraph: "Rfam")
  image: String @source(name: "image", type: "String", subgraph: "Rfam")
}

input seed_region_InsertInput @source(name: "seed_region_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt! @source(name: "seq_end", type: "BigInt!", subgraph: "Rfam")
  md5: String @source(name: "md5", type: "String", subgraph: "Rfam")
}

input seed_region_UpdateInput @source(name: "seed_region_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  rfamseq_acc: String @source(name: "rfamseq_acc", type: "String", subgraph: "Rfam")
  seq_start: BigInt @source(name: "seq_start", type: "BigInt", subgraph: "Rfam")
  seq_end: BigInt @source(name: "seq_end", type: "BigInt", subgraph: "Rfam")
  md5: String @source(name: "md5", type: "String", subgraph: "Rfam")
}

input sunburst_InsertInput @source(name: "sunburst_InsertInput", subgraph: "Rfam") {
  rfam_acc: String! @source(name: "rfam_acc", type: "String!", subgraph: "Rfam")
  data: String! @source(name: "data", type: "String!", subgraph: "Rfam")
  type: sunburst_type! @source(name: "type", type: "sunburst_type!", subgraph: "Rfam")
}

input sunburst_UpdateInput @source(name: "sunburst_UpdateInput", subgraph: "Rfam") {
  rfam_acc: String @source(name: "rfam_acc", type: "String", subgraph: "Rfam")
  data: String @source(name: "data", type: "String", subgraph: "Rfam")
  type: sunburst_type @source(name: "type", type: "sunburst_type", subgraph: "Rfam")
}

input taxonomic_tree_InsertInput @source(name: "taxonomic_tree_InsertInput", subgraph: "Rfam") {
  ncbi_code: Int! @source(name: "ncbi_code", type: "Int!", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: Int @source(name: "lft", type: "Int", subgraph: "Rfam")
  rgt: Int @source(name: "rgt", type: "Int", subgraph: "Rfam")
  parent: String @source(name: "parent", type: "String", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
}

input taxonomic_tree_UpdateInput @source(name: "taxonomic_tree_UpdateInput", subgraph: "Rfam") {
  ncbi_code: Int @source(name: "ncbi_code", type: "Int", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: Int @source(name: "lft", type: "Int", subgraph: "Rfam")
  rgt: Int @source(name: "rgt", type: "Int", subgraph: "Rfam")
  parent: String @source(name: "parent", type: "String", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
}

input taxonomy_InsertInput @source(name: "taxonomy_InsertInput", subgraph: "Rfam") {
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  tax_string: String @source(name: "tax_string", type: "String", subgraph: "Rfam")
  tree_display_name: String @source(name: "tree_display_name", type: "String", subgraph: "Rfam")
  align_display_name: String @source(name: "align_display_name", type: "String", subgraph: "Rfam")
}

input taxonomy_UpdateInput @source(name: "taxonomy_UpdateInput", subgraph: "Rfam") {
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  tax_string: String @source(name: "tax_string", type: "String", subgraph: "Rfam")
  tree_display_name: String @source(name: "tree_display_name", type: "String", subgraph: "Rfam")
  align_display_name: String @source(name: "align_display_name", type: "String", subgraph: "Rfam")
}

input taxonomy_websearch_InsertInput @source(name: "taxonomy_websearch_InsertInput", subgraph: "Rfam") {
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  rgt: Int @source(name: "rgt", type: "Int", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: Int @source(name: "lft", type: "Int", subgraph: "Rfam")
  parent: Int @source(name: "parent", type: "Int", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
  minimal: Int @source(name: "minimal", type: "Int", subgraph: "Rfam")
  rank: String @source(name: "rank", type: "String", subgraph: "Rfam")
}

input taxonomy_websearch_UpdateInput @source(name: "taxonomy_websearch_UpdateInput", subgraph: "Rfam") {
  ncbi_id: Int @source(name: "ncbi_id", type: "Int", subgraph: "Rfam")
  species: String @source(name: "species", type: "String", subgraph: "Rfam")
  rgt: Int @source(name: "rgt", type: "Int", subgraph: "Rfam")
  taxonomy: String @source(name: "taxonomy", type: "String", subgraph: "Rfam")
  lft: Int @source(name: "lft", type: "Int", subgraph: "Rfam")
  parent: Int @source(name: "parent", type: "Int", subgraph: "Rfam")
  level: String @source(name: "level", type: "String", subgraph: "Rfam")
  minimal: Int @source(name: "minimal", type: "Int", subgraph: "Rfam")
  rank: String @source(name: "rank", type: "String", subgraph: "Rfam")
}

input version_InsertInput @source(name: "version_InsertInput", subgraph: "Rfam") {
  rfam_release: Float! @source(name: "rfam_release", type: "Float!", subgraph: "Rfam")
  rfam_release_date: Date! @source(name: "rfam_release_date", type: "Date!", subgraph: "Rfam")
  number_families: Int! @source(name: "number_families", type: "Int!", subgraph: "Rfam")
  embl_release: String! @source(name: "embl_release", type: "String!", subgraph: "Rfam")
}

input version_UpdateInput @source(name: "version_UpdateInput", subgraph: "Rfam") {
  rfam_release: Float @source(name: "rfam_release", type: "Float", subgraph: "Rfam")
  rfam_release_date: Date @source(name: "rfam_release_date", type: "Date", subgraph: "Rfam")
  number_families: Int @source(name: "number_families", type: "Int", subgraph: "Rfam")
  embl_release: String @source(name: "embl_release", type: "String", subgraph: "Rfam")
}

input wikitext_InsertInput @source(name: "wikitext_InsertInput", subgraph: "Rfam") {
  auto_wiki: Int @source(name: "auto_wiki", type: "Int", subgraph: "Rfam")
  title: String! @source(name: "title", type: "String!", subgraph: "Rfam")
}

input wikitext_UpdateInput @source(name: "wikitext_UpdateInput", subgraph: "Rfam") {
  auto_wiki: Int @source(name: "auto_wiki", type: "Int", subgraph: "Rfam")
  title: String @source(name: "title", type: "String", subgraph: "Rfam")
}
"
`;

exports[`should execute TestQuery 1`] = `
{
  "data": {
    "alignment_and_tree": [
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Gardner PP",
            "comment": "5S ribosomal RNA (5S rRNA) is a component of the large ribosomal subunit in both prokaryotes and eukaryotes. In eukaryotes, it is synthesised by RNA polymerase III (the other eukaryotic rRNAs are cleaved from a 45S precursor synthesised by RNA polymerase I). In Xenopus oocytes, it has been shown that fingers 4-7 of the nine-zinc finger transcription factor TFIIIA can bind to the central region of 5S RNA. Thus, in addition to positively regulating 5S rRNA transcription, TFIIIA also stabilises 5S rRNA until it is required for transcription.",
            "description": "5S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00001",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Gardner PP",
            "comment": "5S ribosomal RNA (5S rRNA) is a component of the large ribosomal subunit in both prokaryotes and eukaryotes. In eukaryotes, it is synthesised by RNA polymerase III (the other eukaryotic rRNAs are cleaved from a 45S precursor synthesised by RNA polymerase I). In Xenopus oocytes, it has been shown that fingers 4-7 of the nine-zinc finger transcription factor TFIIIA can bind to the central region of 5S RNA. Thus, in addition to positively regulating 5S rRNA transcription, TFIIIA also stabilises 5S rRNA until it is required for transcription.",
            "description": "5S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00001",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W",
            "comment": "5.8S ribosomal RNA (5.8S rRNA) is a component of the large subunit of the eukaryotic ribosome. It is transcribed by RNA polymerase I as part of the 45S precursor that also contains 18S and 28S rRNA. Functionally, it is thought that 5.8S rRNA may be involved in ribosome translocation [2]. It is also known to form covalent linkage to the p53 tumour suppressor protein [3]. 5.8S rRNA is also found in archaea.",
            "description": "5.8S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00002",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W",
            "comment": "5.8S ribosomal RNA (5.8S rRNA) is a component of the large subunit of the eukaryotic ribosome. It is transcribed by RNA polymerase I as part of the 45S precursor that also contains 18S and 28S rRNA. Functionally, it is thought that 5.8S rRNA may be involved in ribosome translocation [2]. It is also known to form covalent linkage to the p53 tumour suppressor protein [3]. 5.8S rRNA is also found in archaea.",
            "description": "5.8S ribosomal RNA",
            "type": "Gene; rRNA;",
          },
        ],
        "rfam_acc": "RF00002",
      },
      {
        "family": [
          {
            "author": "Griffiths-Jones SR, Mifsud W, Moxon SJ, Ontiveros-Palacios N",
            "comment": "U1 is a small nuclear RNA (snRNA) component of the spliceosome (involved in pre-mRNA splicing). Its 5' end forms complementary base pairs with the 5' splice junction, thus defining the 5' donor site of an intron. There are significant differences in sequence and secondary structure between metazoan and yeast U1 snRNAs, the latter being much longer (568 nucleotides as compared to 164 nucleotides in human). Nevertheless, secondary structure predictions suggest that all U1 snRNAs share a 'common core' consisting of helices I, II, the proximal region of III, and IV [1]. This family does not contain the larger yeast sequences. The structure of U1 spliceosomal RNA has been reported in [5,6]. It present 4 Stem loops (SL1, SL2, SL3, and SL4) and a region call Helix H. SL1, SL2, and SL3 are join for the Helix H, forming a four-helix junction that are separated of SL4. U1 snRNA is important in the precatalytic spliceosome, where the 5' splice site (5'SS) of the pre-mRNA is recognized by pairing with 5'-U1 snRNA. Where spliceosome activation is initiated by a disruption of the 5â€²SSâ€“U1 snRNP interaction by the DEAD-box helicase Prp28 [6]. The structure of U1 small nucleolar RNA was reported in PDB:6QX9",
            "description": "U1 spliceosomal RNA",
            "type": "Gene; snRNA; splicing;",
          },
        ],
        "rfam_acc": "RF00003",
      },
    ],
  },
}
`;
