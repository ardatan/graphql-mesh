// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @transport(kind: "neo4j", subgraph: "Movies", location: "neo4j+s://demo.neo4jlabs.com", options: {database: "movies", auth: {type: "basic", username: "movies", password: "movies"}}) {
  query: Query
  mutation: Mutation
}

directive @relationshipProperties on OBJECT

directive @relationship(type: String, direction: _RelationDirections) on FIELD_DEFINITION

directive @introspection(subgraph: String) on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | SCALAR | ENUM_VALUE | INPUT_FIELD_DEFINITION

directive @transport(kind: String, subgraph: String, location: String, options: Any) on SCHEMA

type Query {
  movies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), options: MovieOptions @source(name: "options", type: "MovieOptions", subgraph: "Movies")): [Movie!]! @source(name: "movies", type: "[Movie!]!", subgraph: "Movies")
  moviesConnection(first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), sort: [MovieSort] @source(name: "sort", type: "MovieSort", subgraph: "Movies")): MoviesConnection! @source(name: "moviesConnection", type: "MoviesConnection!", subgraph: "Movies")
  moviesAggregate(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies")): MovieAggregateSelection! @source(name: "moviesAggregate", type: "MovieAggregateSelection!", subgraph: "Movies")
  people(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies")): [Person!]! @source(name: "people", type: "[Person!]!", subgraph: "Movies")
  peopleConnection(first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), sort: [PersonSort] @source(name: "sort", type: "PersonSort", subgraph: "Movies")): PeopleConnection! @source(name: "peopleConnection", type: "PeopleConnection!", subgraph: "Movies")
  peopleAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies")): PersonAggregateSelection! @source(name: "peopleAggregate", type: "PersonAggregateSelection!", subgraph: "Movies")
}

type Mutation {
  createMovies(input: [MovieCreateInput!]! @source(name: "input", type: "MovieCreateInput", subgraph: "Movies")): CreateMoviesMutationResponse! @source(name: "createMovies", type: "CreateMoviesMutationResponse!", subgraph: "Movies")
  deleteMovies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), delete: MovieDeleteInput @source(name: "delete", type: "MovieDeleteInput", subgraph: "Movies")): DeleteInfo! @source(name: "deleteMovies", type: "DeleteInfo!", subgraph: "Movies")
  updateMovies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), update: MovieUpdateInput @source(name: "update", type: "MovieUpdateInput", subgraph: "Movies"), connect: MovieConnectInput @source(name: "connect", type: "MovieConnectInput", subgraph: "Movies"), disconnect: MovieDisconnectInput @source(name: "disconnect", type: "MovieDisconnectInput", subgraph: "Movies"), create: MovieRelationInput @source(name: "create", type: "MovieRelationInput", subgraph: "Movies"), delete: MovieDeleteInput @source(name: "delete", type: "MovieDeleteInput", subgraph: "Movies")): UpdateMoviesMutationResponse! @source(name: "updateMovies", type: "UpdateMoviesMutationResponse!", subgraph: "Movies")
  createPeople(input: [PersonCreateInput!]! @source(name: "input", type: "PersonCreateInput", subgraph: "Movies")): CreatePeopleMutationResponse! @source(name: "createPeople", type: "CreatePeopleMutationResponse!", subgraph: "Movies")
  deletePeople(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")): DeleteInfo! @source(name: "deletePeople", type: "DeleteInfo!", subgraph: "Movies")
  updatePeople(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), update: PersonUpdateInput @source(name: "update", type: "PersonUpdateInput", subgraph: "Movies"), connect: PersonConnectInput @source(name: "connect", type: "PersonConnectInput", subgraph: "Movies"), disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies"), create: PersonRelationInput @source(name: "create", type: "PersonRelationInput", subgraph: "Movies"), delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")): UpdatePeopleMutationResponse! @source(name: "updatePeople", type: "UpdatePeopleMutationResponse!", subgraph: "Movies")
}

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @source(name: "BigInt", subgraph: "Movies") @source(name: "BigInt", subgraph: "Movies")

enum _RelationDirections @source(name: "_RelationDirections", subgraph: "Movies") {
  IN @source(name: "IN", subgraph: "Movies")
  OUT @source(name: "OUT", subgraph: "Movies")
}

"""An enum for sorting in either ascending or descending order."""
enum SortDirection @source(name: "SortDirection", subgraph: "Movies") {
  """Sort by field values in ascending order."""
  ASC @source(name: "ASC", subgraph: "Movies")
  """Sort by field values in descending order."""
  DESC @source(name: "DESC", subgraph: "Movies")
}

"""
The edge properties for the following fields:
* Movie.peopleActedIn
* Person.actedInMovies
"""
type ActedInProperties @relationshipProperties @introspection @source(name: "ActedInProperties", subgraph: "Movies") {
  roles: [String]! @introspection @source(name: "roles", type: "[String]!", subgraph: "Movies")
}

type BigIntAggregateSelection @source(name: "BigIntAggregateSelection", subgraph: "Movies") {
  max: BigInt @source(name: "max", type: "BigInt", subgraph: "Movies")
  min: BigInt @source(name: "min", type: "BigInt", subgraph: "Movies")
  average: BigInt @source(name: "average", type: "BigInt", subgraph: "Movies")
  sum: BigInt @source(name: "sum", type: "BigInt", subgraph: "Movies")
}

"""
Information about the number of nodes and relationships created during a create mutation
"""
type CreateInfo @source(name: "CreateInfo", subgraph: "Movies") {
  bookmark: String @deprecated(reason: "This field has been deprecated because bookmarks are now handled by the driver.") @source(name: "bookmark", type: "String", subgraph: "Movies")
  nodesCreated: Int! @source(name: "nodesCreated", type: "Int!", subgraph: "Movies")
  relationshipsCreated: Int! @source(name: "relationshipsCreated", type: "Int!", subgraph: "Movies")
}

type CreateMoviesMutationResponse @source(name: "CreateMoviesMutationResponse", subgraph: "Movies") {
  info: CreateInfo! @source(name: "info", type: "CreateInfo!", subgraph: "Movies")
  movies: [Movie!]! @source(name: "movies", type: "[Movie!]!", subgraph: "Movies")
}

type CreatePeopleMutationResponse @source(name: "CreatePeopleMutationResponse", subgraph: "Movies") {
  info: CreateInfo! @source(name: "info", type: "CreateInfo!", subgraph: "Movies")
  people: [Person!]! @source(name: "people", type: "[Person!]!", subgraph: "Movies")
}

"""
Information about the number of nodes and relationships deleted during a delete mutation
"""
type DeleteInfo @source(name: "DeleteInfo", subgraph: "Movies") {
  bookmark: String @deprecated(reason: "This field has been deprecated because bookmarks are now handled by the driver.") @source(name: "bookmark", type: "String", subgraph: "Movies")
  nodesDeleted: Int! @source(name: "nodesDeleted", type: "Int!", subgraph: "Movies")
  relationshipsDeleted: Int! @source(name: "relationshipsDeleted", type: "Int!", subgraph: "Movies")
}

type Movie @introspection @source(name: "Movie", subgraph: "Movies") {
  released: BigInt! @introspection @source(name: "released", type: "BigInt!", subgraph: "Movies")
  tagline: String @introspection @source(name: "tagline", type: "String", subgraph: "Movies")
  title: String! @introspection @source(name: "title", type: "String!", subgraph: "Movies")
  votes: BigInt! @introspection @source(name: "votes", type: "BigInt!", subgraph: "Movies")
  peopleActedInAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): MoviePersonPeopleActedInAggregationSelection @source(name: "peopleActedInAggregate", type: "MoviePersonPeopleActedInAggregationSelection", subgraph: "Movies")
  peopleActedIn(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Person!]! @introspection @relationship(type: "ACTED_IN", direction: IN) @source(name: "peopleActedIn", type: "[Person!]!", subgraph: "Movies")
  peopleActedInConnection(where: MoviePeopleActedInConnectionWhere @source(name: "where", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [MoviePeopleActedInConnectionSort!] @source(name: "sort", type: "MoviePeopleActedInConnectionSort", subgraph: "Movies")): MoviePeopleActedInConnection! @source(name: "peopleActedInConnection", type: "MoviePeopleActedInConnection!", subgraph: "Movies")
  peopleDirectedAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): MoviePersonPeopleDirectedAggregationSelection @source(name: "peopleDirectedAggregate", type: "MoviePersonPeopleDirectedAggregationSelection", subgraph: "Movies")
  peopleDirected(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Person!]! @introspection @relationship(type: "DIRECTED", direction: IN) @source(name: "peopleDirected", type: "[Person!]!", subgraph: "Movies")
  peopleDirectedConnection(where: MoviePeopleDirectedConnectionWhere @source(name: "where", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [MoviePeopleDirectedConnectionSort!] @source(name: "sort", type: "MoviePeopleDirectedConnectionSort", subgraph: "Movies")): MoviePeopleDirectedConnection! @source(name: "peopleDirectedConnection", type: "MoviePeopleDirectedConnection!", subgraph: "Movies")
  peopleProducedAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): MoviePersonPeopleProducedAggregationSelection @source(name: "peopleProducedAggregate", type: "MoviePersonPeopleProducedAggregationSelection", subgraph: "Movies")
  peopleProduced(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Person!]! @introspection @relationship(type: "PRODUCED", direction: IN) @source(name: "peopleProduced", type: "[Person!]!", subgraph: "Movies")
  peopleProducedConnection(where: MoviePeopleProducedConnectionWhere @source(name: "where", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [MoviePeopleProducedConnectionSort!] @source(name: "sort", type: "MoviePeopleProducedConnectionSort", subgraph: "Movies")): MoviePeopleProducedConnection! @source(name: "peopleProducedConnection", type: "MoviePeopleProducedConnection!", subgraph: "Movies")
  peopleReviewedAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): MoviePersonPeopleReviewedAggregationSelection @source(name: "peopleReviewedAggregate", type: "MoviePersonPeopleReviewedAggregationSelection", subgraph: "Movies")
  peopleReviewed(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Person!]! @introspection @relationship(type: "REVIEWED", direction: IN) @source(name: "peopleReviewed", type: "[Person!]!", subgraph: "Movies")
  peopleReviewedConnection(where: MoviePeopleReviewedConnectionWhere @source(name: "where", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [MoviePeopleReviewedConnectionSort!] @source(name: "sort", type: "MoviePeopleReviewedConnectionSort", subgraph: "Movies")): MoviePeopleReviewedConnection! @source(name: "peopleReviewedConnection", type: "MoviePeopleReviewedConnection!", subgraph: "Movies")
  peopleWroteAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): MoviePersonPeopleWroteAggregationSelection @source(name: "peopleWroteAggregate", type: "MoviePersonPeopleWroteAggregationSelection", subgraph: "Movies")
  peopleWrote(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Person!]! @introspection @relationship(type: "WROTE", direction: IN) @source(name: "peopleWrote", type: "[Person!]!", subgraph: "Movies")
  peopleWroteConnection(where: MoviePeopleWroteConnectionWhere @source(name: "where", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [MoviePeopleWroteConnectionSort!] @source(name: "sort", type: "MoviePeopleWroteConnectionSort", subgraph: "Movies")): MoviePeopleWroteConnection! @source(name: "peopleWroteConnection", type: "MoviePeopleWroteConnection!", subgraph: "Movies")
}

type MovieAggregateSelection @source(name: "MovieAggregateSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  released: BigIntAggregateSelection! @source(name: "released", type: "BigIntAggregateSelection!", subgraph: "Movies")
  tagline: StringAggregateSelection! @source(name: "tagline", type: "StringAggregateSelection!", subgraph: "Movies")
  title: StringAggregateSelection! @source(name: "title", type: "StringAggregateSelection!", subgraph: "Movies")
  votes: BigIntAggregateSelection! @source(name: "votes", type: "BigIntAggregateSelection!", subgraph: "Movies")
}

type MovieEdge @source(name: "MovieEdge", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Movie! @source(name: "node", type: "Movie!", subgraph: "Movies")
}

type MoviePeopleActedInConnection @source(name: "MoviePeopleActedInConnection", subgraph: "Movies") {
  edges: [MoviePeopleActedInRelationship!]! @source(name: "edges", type: "[MoviePeopleActedInRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type MoviePeopleActedInRelationship @source(name: "MoviePeopleActedInRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
  properties: ActedInProperties! @source(name: "properties", type: "ActedInProperties!", subgraph: "Movies")
}

type MoviePeopleDirectedConnection @source(name: "MoviePeopleDirectedConnection", subgraph: "Movies") {
  edges: [MoviePeopleDirectedRelationship!]! @source(name: "edges", type: "[MoviePeopleDirectedRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type MoviePeopleDirectedRelationship @source(name: "MoviePeopleDirectedRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
}

type MoviePeopleProducedConnection @source(name: "MoviePeopleProducedConnection", subgraph: "Movies") {
  edges: [MoviePeopleProducedRelationship!]! @source(name: "edges", type: "[MoviePeopleProducedRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type MoviePeopleProducedRelationship @source(name: "MoviePeopleProducedRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
}

type MoviePeopleReviewedConnection @source(name: "MoviePeopleReviewedConnection", subgraph: "Movies") {
  edges: [MoviePeopleReviewedRelationship!]! @source(name: "edges", type: "[MoviePeopleReviewedRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type MoviePeopleReviewedRelationship @source(name: "MoviePeopleReviewedRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
  properties: ReviewedProperties! @source(name: "properties", type: "ReviewedProperties!", subgraph: "Movies")
}

type MoviePeopleWroteConnection @source(name: "MoviePeopleWroteConnection", subgraph: "Movies") {
  edges: [MoviePeopleWroteRelationship!]! @source(name: "edges", type: "[MoviePeopleWroteRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type MoviePeopleWroteRelationship @source(name: "MoviePeopleWroteRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
}

type MoviePersonPeopleActedInAggregationSelection @source(name: "MoviePersonPeopleActedInAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: MoviePersonPeopleActedInNodeAggregateSelection @source(name: "node", type: "MoviePersonPeopleActedInNodeAggregateSelection", subgraph: "Movies")
}

type MoviePersonPeopleActedInNodeAggregateSelection @source(name: "MoviePersonPeopleActedInNodeAggregateSelection", subgraph: "Movies") {
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type MoviePersonPeopleDirectedAggregationSelection @source(name: "MoviePersonPeopleDirectedAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: MoviePersonPeopleDirectedNodeAggregateSelection @source(name: "node", type: "MoviePersonPeopleDirectedNodeAggregateSelection", subgraph: "Movies")
}

type MoviePersonPeopleDirectedNodeAggregateSelection @source(name: "MoviePersonPeopleDirectedNodeAggregateSelection", subgraph: "Movies") {
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type MoviePersonPeopleProducedAggregationSelection @source(name: "MoviePersonPeopleProducedAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: MoviePersonPeopleProducedNodeAggregateSelection @source(name: "node", type: "MoviePersonPeopleProducedNodeAggregateSelection", subgraph: "Movies")
}

type MoviePersonPeopleProducedNodeAggregateSelection @source(name: "MoviePersonPeopleProducedNodeAggregateSelection", subgraph: "Movies") {
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type MoviePersonPeopleReviewedAggregationSelection @source(name: "MoviePersonPeopleReviewedAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: MoviePersonPeopleReviewedNodeAggregateSelection @source(name: "node", type: "MoviePersonPeopleReviewedNodeAggregateSelection", subgraph: "Movies")
  edge: MoviePersonPeopleReviewedEdgeAggregateSelection @source(name: "edge", type: "MoviePersonPeopleReviewedEdgeAggregateSelection", subgraph: "Movies")
}

type MoviePersonPeopleReviewedEdgeAggregateSelection @source(name: "MoviePersonPeopleReviewedEdgeAggregateSelection", subgraph: "Movies") {
  rating: BigIntAggregateSelection! @source(name: "rating", type: "BigIntAggregateSelection!", subgraph: "Movies")
  summary: StringAggregateSelection! @source(name: "summary", type: "StringAggregateSelection!", subgraph: "Movies")
}

type MoviePersonPeopleReviewedNodeAggregateSelection @source(name: "MoviePersonPeopleReviewedNodeAggregateSelection", subgraph: "Movies") {
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type MoviePersonPeopleWroteAggregationSelection @source(name: "MoviePersonPeopleWroteAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: MoviePersonPeopleWroteNodeAggregateSelection @source(name: "node", type: "MoviePersonPeopleWroteNodeAggregateSelection", subgraph: "Movies")
}

type MoviePersonPeopleWroteNodeAggregateSelection @source(name: "MoviePersonPeopleWroteNodeAggregateSelection", subgraph: "Movies") {
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type MoviesConnection @source(name: "MoviesConnection", subgraph: "Movies") {
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
  edges: [MovieEdge!]! @source(name: "edges", type: "[MovieEdge!]!", subgraph: "Movies")
}

"""Pagination information (Relay)"""
type PageInfo @source(name: "PageInfo", subgraph: "Movies") {
  hasNextPage: Boolean! @source(name: "hasNextPage", type: "Boolean!", subgraph: "Movies")
  hasPreviousPage: Boolean! @source(name: "hasPreviousPage", type: "Boolean!", subgraph: "Movies")
  startCursor: String @source(name: "startCursor", type: "String", subgraph: "Movies")
  endCursor: String @source(name: "endCursor", type: "String", subgraph: "Movies")
}

type PeopleConnection @source(name: "PeopleConnection", subgraph: "Movies") {
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
  edges: [PersonEdge!]! @source(name: "edges", type: "[PersonEdge!]!", subgraph: "Movies")
}

type Person @introspection @source(name: "Person", subgraph: "Movies") {
  born: BigInt @introspection @source(name: "born", type: "BigInt", subgraph: "Movies")
  name: String! @introspection @source(name: "name", type: "String!", subgraph: "Movies")
  actedInMoviesAggregate(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): PersonMovieActedInMoviesAggregationSelection @source(name: "actedInMoviesAggregate", type: "PersonMovieActedInMoviesAggregationSelection", subgraph: "Movies")
  actedInMovies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), options: MovieOptions @source(name: "options", type: "MovieOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Movie!]! @introspection @relationship(type: "ACTED_IN", direction: OUT) @source(name: "actedInMovies", type: "[Movie!]!", subgraph: "Movies")
  actedInMoviesConnection(where: PersonActedInMoviesConnectionWhere @source(name: "where", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [PersonActedInMoviesConnectionSort!] @source(name: "sort", type: "PersonActedInMoviesConnectionSort", subgraph: "Movies")): PersonActedInMoviesConnection! @source(name: "actedInMoviesConnection", type: "PersonActedInMoviesConnection!", subgraph: "Movies")
  directedMoviesAggregate(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): PersonMovieDirectedMoviesAggregationSelection @source(name: "directedMoviesAggregate", type: "PersonMovieDirectedMoviesAggregationSelection", subgraph: "Movies")
  directedMovies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), options: MovieOptions @source(name: "options", type: "MovieOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Movie!]! @introspection @relationship(type: "DIRECTED", direction: OUT) @source(name: "directedMovies", type: "[Movie!]!", subgraph: "Movies")
  directedMoviesConnection(where: PersonDirectedMoviesConnectionWhere @source(name: "where", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [PersonDirectedMoviesConnectionSort!] @source(name: "sort", type: "PersonDirectedMoviesConnectionSort", subgraph: "Movies")): PersonDirectedMoviesConnection! @source(name: "directedMoviesConnection", type: "PersonDirectedMoviesConnection!", subgraph: "Movies")
  followsPeopleAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): PersonPersonFollowsPeopleAggregationSelection @source(name: "followsPeopleAggregate", type: "PersonPersonFollowsPeopleAggregationSelection", subgraph: "Movies")
  followsPeople(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Person!]! @introspection @relationship(type: "FOLLOWS", direction: OUT) @source(name: "followsPeople", type: "[Person!]!", subgraph: "Movies")
  followsPeopleConnection(where: PersonFollowsPeopleConnectionWhere @source(name: "where", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [PersonFollowsPeopleConnectionSort!] @source(name: "sort", type: "PersonFollowsPeopleConnectionSort", subgraph: "Movies")): PersonFollowsPeopleConnection! @source(name: "followsPeopleConnection", type: "PersonFollowsPeopleConnection!", subgraph: "Movies")
  peopleFollowsAggregate(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): PersonPersonPeopleFollowsAggregationSelection @source(name: "peopleFollowsAggregate", type: "PersonPersonPeopleFollowsAggregationSelection", subgraph: "Movies")
  peopleFollows(where: PersonWhere @source(name: "where", type: "PersonWhere", subgraph: "Movies"), options: PersonOptions @source(name: "options", type: "PersonOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Person!]! @introspection @relationship(type: "FOLLOWS", direction: IN) @source(name: "peopleFollows", type: "[Person!]!", subgraph: "Movies")
  peopleFollowsConnection(where: PersonPeopleFollowsConnectionWhere @source(name: "where", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [PersonPeopleFollowsConnectionSort!] @source(name: "sort", type: "PersonPeopleFollowsConnectionSort", subgraph: "Movies")): PersonPeopleFollowsConnection! @source(name: "peopleFollowsConnection", type: "PersonPeopleFollowsConnection!", subgraph: "Movies")
  producedMoviesAggregate(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): PersonMovieProducedMoviesAggregationSelection @source(name: "producedMoviesAggregate", type: "PersonMovieProducedMoviesAggregationSelection", subgraph: "Movies")
  producedMovies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), options: MovieOptions @source(name: "options", type: "MovieOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Movie!]! @introspection @relationship(type: "PRODUCED", direction: OUT) @source(name: "producedMovies", type: "[Movie!]!", subgraph: "Movies")
  producedMoviesConnection(where: PersonProducedMoviesConnectionWhere @source(name: "where", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [PersonProducedMoviesConnectionSort!] @source(name: "sort", type: "PersonProducedMoviesConnectionSort", subgraph: "Movies")): PersonProducedMoviesConnection! @source(name: "producedMoviesConnection", type: "PersonProducedMoviesConnection!", subgraph: "Movies")
  reviewedMoviesAggregate(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): PersonMovieReviewedMoviesAggregationSelection @source(name: "reviewedMoviesAggregate", type: "PersonMovieReviewedMoviesAggregationSelection", subgraph: "Movies")
  reviewedMovies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), options: MovieOptions @source(name: "options", type: "MovieOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Movie!]! @introspection @relationship(type: "REVIEWED", direction: OUT) @source(name: "reviewedMovies", type: "[Movie!]!", subgraph: "Movies")
  reviewedMoviesConnection(where: PersonReviewedMoviesConnectionWhere @source(name: "where", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [PersonReviewedMoviesConnectionSort!] @source(name: "sort", type: "PersonReviewedMoviesConnectionSort", subgraph: "Movies")): PersonReviewedMoviesConnection! @source(name: "reviewedMoviesConnection", type: "PersonReviewedMoviesConnection!", subgraph: "Movies")
  wroteMoviesAggregate(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): PersonMovieWroteMoviesAggregationSelection @source(name: "wroteMoviesAggregate", type: "PersonMovieWroteMoviesAggregationSelection", subgraph: "Movies")
  wroteMovies(where: MovieWhere @source(name: "where", type: "MovieWhere", subgraph: "Movies"), options: MovieOptions @source(name: "options", type: "MovieOptions", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies")): [Movie!]! @introspection @relationship(type: "WROTE", direction: OUT) @source(name: "wroteMovies", type: "[Movie!]!", subgraph: "Movies")
  wroteMoviesConnection(where: PersonWroteMoviesConnectionWhere @source(name: "where", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies"), first: Int @source(name: "first", type: "Int", subgraph: "Movies"), after: String @source(name: "after", type: "String", subgraph: "Movies"), directed: Boolean = true @source(name: "directed", type: "Boolean", subgraph: "Movies"), sort: [PersonWroteMoviesConnectionSort!] @source(name: "sort", type: "PersonWroteMoviesConnectionSort", subgraph: "Movies")): PersonWroteMoviesConnection! @source(name: "wroteMoviesConnection", type: "PersonWroteMoviesConnection!", subgraph: "Movies")
}

type PersonActedInMoviesConnection @source(name: "PersonActedInMoviesConnection", subgraph: "Movies") {
  edges: [PersonActedInMoviesRelationship!]! @source(name: "edges", type: "[PersonActedInMoviesRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type PersonActedInMoviesRelationship @source(name: "PersonActedInMoviesRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Movie! @source(name: "node", type: "Movie!", subgraph: "Movies")
  properties: ActedInProperties! @source(name: "properties", type: "ActedInProperties!", subgraph: "Movies")
}

type PersonAggregateSelection @source(name: "PersonAggregateSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type PersonDirectedMoviesConnection @source(name: "PersonDirectedMoviesConnection", subgraph: "Movies") {
  edges: [PersonDirectedMoviesRelationship!]! @source(name: "edges", type: "[PersonDirectedMoviesRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type PersonDirectedMoviesRelationship @source(name: "PersonDirectedMoviesRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Movie! @source(name: "node", type: "Movie!", subgraph: "Movies")
}

type PersonEdge @source(name: "PersonEdge", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
}

type PersonFollowsPeopleConnection @source(name: "PersonFollowsPeopleConnection", subgraph: "Movies") {
  edges: [PersonFollowsPeopleRelationship!]! @source(name: "edges", type: "[PersonFollowsPeopleRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type PersonFollowsPeopleRelationship @source(name: "PersonFollowsPeopleRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
}

type PersonMovieActedInMoviesAggregationSelection @source(name: "PersonMovieActedInMoviesAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: PersonMovieActedInMoviesNodeAggregateSelection @source(name: "node", type: "PersonMovieActedInMoviesNodeAggregateSelection", subgraph: "Movies")
}

type PersonMovieActedInMoviesNodeAggregateSelection @source(name: "PersonMovieActedInMoviesNodeAggregateSelection", subgraph: "Movies") {
  released: BigIntAggregateSelection! @source(name: "released", type: "BigIntAggregateSelection!", subgraph: "Movies")
  tagline: StringAggregateSelection! @source(name: "tagline", type: "StringAggregateSelection!", subgraph: "Movies")
  title: StringAggregateSelection! @source(name: "title", type: "StringAggregateSelection!", subgraph: "Movies")
  votes: BigIntAggregateSelection! @source(name: "votes", type: "BigIntAggregateSelection!", subgraph: "Movies")
}

type PersonMovieDirectedMoviesAggregationSelection @source(name: "PersonMovieDirectedMoviesAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: PersonMovieDirectedMoviesNodeAggregateSelection @source(name: "node", type: "PersonMovieDirectedMoviesNodeAggregateSelection", subgraph: "Movies")
}

type PersonMovieDirectedMoviesNodeAggregateSelection @source(name: "PersonMovieDirectedMoviesNodeAggregateSelection", subgraph: "Movies") {
  released: BigIntAggregateSelection! @source(name: "released", type: "BigIntAggregateSelection!", subgraph: "Movies")
  tagline: StringAggregateSelection! @source(name: "tagline", type: "StringAggregateSelection!", subgraph: "Movies")
  title: StringAggregateSelection! @source(name: "title", type: "StringAggregateSelection!", subgraph: "Movies")
  votes: BigIntAggregateSelection! @source(name: "votes", type: "BigIntAggregateSelection!", subgraph: "Movies")
}

type PersonMovieProducedMoviesAggregationSelection @source(name: "PersonMovieProducedMoviesAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: PersonMovieProducedMoviesNodeAggregateSelection @source(name: "node", type: "PersonMovieProducedMoviesNodeAggregateSelection", subgraph: "Movies")
}

type PersonMovieProducedMoviesNodeAggregateSelection @source(name: "PersonMovieProducedMoviesNodeAggregateSelection", subgraph: "Movies") {
  released: BigIntAggregateSelection! @source(name: "released", type: "BigIntAggregateSelection!", subgraph: "Movies")
  tagline: StringAggregateSelection! @source(name: "tagline", type: "StringAggregateSelection!", subgraph: "Movies")
  title: StringAggregateSelection! @source(name: "title", type: "StringAggregateSelection!", subgraph: "Movies")
  votes: BigIntAggregateSelection! @source(name: "votes", type: "BigIntAggregateSelection!", subgraph: "Movies")
}

type PersonMovieReviewedMoviesAggregationSelection @source(name: "PersonMovieReviewedMoviesAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: PersonMovieReviewedMoviesNodeAggregateSelection @source(name: "node", type: "PersonMovieReviewedMoviesNodeAggregateSelection", subgraph: "Movies")
  edge: PersonMovieReviewedMoviesEdgeAggregateSelection @source(name: "edge", type: "PersonMovieReviewedMoviesEdgeAggregateSelection", subgraph: "Movies")
}

type PersonMovieReviewedMoviesEdgeAggregateSelection @source(name: "PersonMovieReviewedMoviesEdgeAggregateSelection", subgraph: "Movies") {
  rating: BigIntAggregateSelection! @source(name: "rating", type: "BigIntAggregateSelection!", subgraph: "Movies")
  summary: StringAggregateSelection! @source(name: "summary", type: "StringAggregateSelection!", subgraph: "Movies")
}

type PersonMovieReviewedMoviesNodeAggregateSelection @source(name: "PersonMovieReviewedMoviesNodeAggregateSelection", subgraph: "Movies") {
  released: BigIntAggregateSelection! @source(name: "released", type: "BigIntAggregateSelection!", subgraph: "Movies")
  tagline: StringAggregateSelection! @source(name: "tagline", type: "StringAggregateSelection!", subgraph: "Movies")
  title: StringAggregateSelection! @source(name: "title", type: "StringAggregateSelection!", subgraph: "Movies")
  votes: BigIntAggregateSelection! @source(name: "votes", type: "BigIntAggregateSelection!", subgraph: "Movies")
}

type PersonMovieWroteMoviesAggregationSelection @source(name: "PersonMovieWroteMoviesAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: PersonMovieWroteMoviesNodeAggregateSelection @source(name: "node", type: "PersonMovieWroteMoviesNodeAggregateSelection", subgraph: "Movies")
}

type PersonMovieWroteMoviesNodeAggregateSelection @source(name: "PersonMovieWroteMoviesNodeAggregateSelection", subgraph: "Movies") {
  released: BigIntAggregateSelection! @source(name: "released", type: "BigIntAggregateSelection!", subgraph: "Movies")
  tagline: StringAggregateSelection! @source(name: "tagline", type: "StringAggregateSelection!", subgraph: "Movies")
  title: StringAggregateSelection! @source(name: "title", type: "StringAggregateSelection!", subgraph: "Movies")
  votes: BigIntAggregateSelection! @source(name: "votes", type: "BigIntAggregateSelection!", subgraph: "Movies")
}

type PersonPeopleFollowsConnection @source(name: "PersonPeopleFollowsConnection", subgraph: "Movies") {
  edges: [PersonPeopleFollowsRelationship!]! @source(name: "edges", type: "[PersonPeopleFollowsRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type PersonPeopleFollowsRelationship @source(name: "PersonPeopleFollowsRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Person! @source(name: "node", type: "Person!", subgraph: "Movies")
}

type PersonPersonFollowsPeopleAggregationSelection @source(name: "PersonPersonFollowsPeopleAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: PersonPersonFollowsPeopleNodeAggregateSelection @source(name: "node", type: "PersonPersonFollowsPeopleNodeAggregateSelection", subgraph: "Movies")
}

type PersonPersonFollowsPeopleNodeAggregateSelection @source(name: "PersonPersonFollowsPeopleNodeAggregateSelection", subgraph: "Movies") {
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type PersonPersonPeopleFollowsAggregationSelection @source(name: "PersonPersonPeopleFollowsAggregationSelection", subgraph: "Movies") {
  count: Int! @source(name: "count", type: "Int!", subgraph: "Movies")
  node: PersonPersonPeopleFollowsNodeAggregateSelection @source(name: "node", type: "PersonPersonPeopleFollowsNodeAggregateSelection", subgraph: "Movies")
}

type PersonPersonPeopleFollowsNodeAggregateSelection @source(name: "PersonPersonPeopleFollowsNodeAggregateSelection", subgraph: "Movies") {
  born: BigIntAggregateSelection! @source(name: "born", type: "BigIntAggregateSelection!", subgraph: "Movies")
  name: StringAggregateSelection! @source(name: "name", type: "StringAggregateSelection!", subgraph: "Movies")
}

type PersonProducedMoviesConnection @source(name: "PersonProducedMoviesConnection", subgraph: "Movies") {
  edges: [PersonProducedMoviesRelationship!]! @source(name: "edges", type: "[PersonProducedMoviesRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type PersonProducedMoviesRelationship @source(name: "PersonProducedMoviesRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Movie! @source(name: "node", type: "Movie!", subgraph: "Movies")
}

type PersonReviewedMoviesConnection @source(name: "PersonReviewedMoviesConnection", subgraph: "Movies") {
  edges: [PersonReviewedMoviesRelationship!]! @source(name: "edges", type: "[PersonReviewedMoviesRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type PersonReviewedMoviesRelationship @source(name: "PersonReviewedMoviesRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Movie! @source(name: "node", type: "Movie!", subgraph: "Movies")
  properties: ReviewedProperties! @source(name: "properties", type: "ReviewedProperties!", subgraph: "Movies")
}

type PersonWroteMoviesConnection @source(name: "PersonWroteMoviesConnection", subgraph: "Movies") {
  edges: [PersonWroteMoviesRelationship!]! @source(name: "edges", type: "[PersonWroteMoviesRelationship!]!", subgraph: "Movies")
  totalCount: Int! @source(name: "totalCount", type: "Int!", subgraph: "Movies")
  pageInfo: PageInfo! @source(name: "pageInfo", type: "PageInfo!", subgraph: "Movies")
}

type PersonWroteMoviesRelationship @source(name: "PersonWroteMoviesRelationship", subgraph: "Movies") {
  cursor: String! @source(name: "cursor", type: "String!", subgraph: "Movies")
  node: Movie! @source(name: "node", type: "Movie!", subgraph: "Movies")
}

"""
The edge properties for the following fields:
* Movie.peopleReviewed
* Person.reviewedMovies
"""
type ReviewedProperties @relationshipProperties @introspection @source(name: "ReviewedProperties", subgraph: "Movies") {
  rating: BigInt! @introspection @source(name: "rating", type: "BigInt!", subgraph: "Movies")
  summary: String! @introspection @source(name: "summary", type: "String!", subgraph: "Movies")
}

type StringAggregateSelection @source(name: "StringAggregateSelection", subgraph: "Movies") {
  shortest: String @source(name: "shortest", type: "String", subgraph: "Movies")
  longest: String @source(name: "longest", type: "String", subgraph: "Movies")
}

"""
Information about the number of nodes and relationships created and deleted during an update mutation
"""
type UpdateInfo @source(name: "UpdateInfo", subgraph: "Movies") {
  bookmark: String @deprecated(reason: "This field has been deprecated because bookmarks are now handled by the driver.") @source(name: "bookmark", type: "String", subgraph: "Movies")
  nodesCreated: Int! @source(name: "nodesCreated", type: "Int!", subgraph: "Movies")
  nodesDeleted: Int! @source(name: "nodesDeleted", type: "Int!", subgraph: "Movies")
  relationshipsCreated: Int! @source(name: "relationshipsCreated", type: "Int!", subgraph: "Movies")
  relationshipsDeleted: Int! @source(name: "relationshipsDeleted", type: "Int!", subgraph: "Movies")
}

type UpdateMoviesMutationResponse @source(name: "UpdateMoviesMutationResponse", subgraph: "Movies") {
  info: UpdateInfo! @source(name: "info", type: "UpdateInfo!", subgraph: "Movies")
  movies: [Movie!]! @source(name: "movies", type: "[Movie!]!", subgraph: "Movies")
}

type UpdatePeopleMutationResponse @source(name: "UpdatePeopleMutationResponse", subgraph: "Movies") {
  info: UpdateInfo! @source(name: "info", type: "UpdateInfo!", subgraph: "Movies")
  people: [Person!]! @source(name: "people", type: "[Person!]!", subgraph: "Movies")
}

input ActedInPropertiesCreateInput @source(name: "ActedInPropertiesCreateInput", subgraph: "Movies") {
  roles: [String]! @source(name: "roles", type: "[String]!", subgraph: "Movies")
}

input ActedInPropertiesSort @source(name: "ActedInPropertiesSort", subgraph: "Movies") {
  roles: SortDirection @source(name: "roles", type: "SortDirection", subgraph: "Movies")
}

input ActedInPropertiesUpdateInput @source(name: "ActedInPropertiesUpdateInput", subgraph: "Movies") {
  roles: [String] @source(name: "roles", type: "[String]", subgraph: "Movies")
  roles_POP: Int @source(name: "roles_POP", type: "Int", subgraph: "Movies")
  roles_PUSH: [String] @source(name: "roles_PUSH", type: "[String]", subgraph: "Movies")
}

input ActedInPropertiesWhere @source(name: "ActedInPropertiesWhere", subgraph: "Movies") {
  roles: [String] @source(name: "roles", type: "[String]", subgraph: "Movies")
  roles_NOT: [String] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "roles_NOT", type: "[String]", subgraph: "Movies")
  roles_INCLUDES: String @source(name: "roles_INCLUDES", type: "String", subgraph: "Movies")
  roles_NOT_INCLUDES: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "roles_NOT_INCLUDES", type: "String", subgraph: "Movies")
  OR: [ActedInPropertiesWhere!] @source(name: "OR", type: "[ActedInPropertiesWhere!]", subgraph: "Movies")
  AND: [ActedInPropertiesWhere!] @source(name: "AND", type: "[ActedInPropertiesWhere!]", subgraph: "Movies")
  NOT: ActedInPropertiesWhere @source(name: "NOT", type: "ActedInPropertiesWhere", subgraph: "Movies")
}

input MovieConnectInput @source(name: "MovieConnectInput", subgraph: "Movies") {
  peopleActedIn: [MoviePeopleActedInConnectFieldInput!] @source(name: "peopleActedIn", type: "[MoviePeopleActedInConnectFieldInput!]", subgraph: "Movies")
  peopleDirected: [MoviePeopleDirectedConnectFieldInput!] @source(name: "peopleDirected", type: "[MoviePeopleDirectedConnectFieldInput!]", subgraph: "Movies")
  peopleProduced: [MoviePeopleProducedConnectFieldInput!] @source(name: "peopleProduced", type: "[MoviePeopleProducedConnectFieldInput!]", subgraph: "Movies")
  peopleReviewed: [MoviePeopleReviewedConnectFieldInput!] @source(name: "peopleReviewed", type: "[MoviePeopleReviewedConnectFieldInput!]", subgraph: "Movies")
  peopleWrote: [MoviePeopleWroteConnectFieldInput!] @source(name: "peopleWrote", type: "[MoviePeopleWroteConnectFieldInput!]", subgraph: "Movies")
}

input MovieConnectWhere @source(name: "MovieConnectWhere", subgraph: "Movies") {
  node: MovieWhere! @source(name: "node", type: "MovieWhere!", subgraph: "Movies")
}

input MovieCreateInput @source(name: "MovieCreateInput", subgraph: "Movies") {
  released: BigInt! @source(name: "released", type: "BigInt!", subgraph: "Movies")
  tagline: String @source(name: "tagline", type: "String", subgraph: "Movies")
  title: String! @source(name: "title", type: "String!", subgraph: "Movies")
  votes: BigInt! @source(name: "votes", type: "BigInt!", subgraph: "Movies")
  peopleActedIn: MoviePeopleActedInFieldInput @source(name: "peopleActedIn", type: "MoviePeopleActedInFieldInput", subgraph: "Movies")
  peopleDirected: MoviePeopleDirectedFieldInput @source(name: "peopleDirected", type: "MoviePeopleDirectedFieldInput", subgraph: "Movies")
  peopleProduced: MoviePeopleProducedFieldInput @source(name: "peopleProduced", type: "MoviePeopleProducedFieldInput", subgraph: "Movies")
  peopleReviewed: MoviePeopleReviewedFieldInput @source(name: "peopleReviewed", type: "MoviePeopleReviewedFieldInput", subgraph: "Movies")
  peopleWrote: MoviePeopleWroteFieldInput @source(name: "peopleWrote", type: "MoviePeopleWroteFieldInput", subgraph: "Movies")
}

input MovieDeleteInput @source(name: "MovieDeleteInput", subgraph: "Movies") {
  peopleActedIn: [MoviePeopleActedInDeleteFieldInput!] @source(name: "peopleActedIn", type: "[MoviePeopleActedInDeleteFieldInput!]", subgraph: "Movies")
  peopleDirected: [MoviePeopleDirectedDeleteFieldInput!] @source(name: "peopleDirected", type: "[MoviePeopleDirectedDeleteFieldInput!]", subgraph: "Movies")
  peopleProduced: [MoviePeopleProducedDeleteFieldInput!] @source(name: "peopleProduced", type: "[MoviePeopleProducedDeleteFieldInput!]", subgraph: "Movies")
  peopleReviewed: [MoviePeopleReviewedDeleteFieldInput!] @source(name: "peopleReviewed", type: "[MoviePeopleReviewedDeleteFieldInput!]", subgraph: "Movies")
  peopleWrote: [MoviePeopleWroteDeleteFieldInput!] @source(name: "peopleWrote", type: "[MoviePeopleWroteDeleteFieldInput!]", subgraph: "Movies")
}

input MovieDisconnectInput @source(name: "MovieDisconnectInput", subgraph: "Movies") {
  peopleActedIn: [MoviePeopleActedInDisconnectFieldInput!] @source(name: "peopleActedIn", type: "[MoviePeopleActedInDisconnectFieldInput!]", subgraph: "Movies")
  peopleDirected: [MoviePeopleDirectedDisconnectFieldInput!] @source(name: "peopleDirected", type: "[MoviePeopleDirectedDisconnectFieldInput!]", subgraph: "Movies")
  peopleProduced: [MoviePeopleProducedDisconnectFieldInput!] @source(name: "peopleProduced", type: "[MoviePeopleProducedDisconnectFieldInput!]", subgraph: "Movies")
  peopleReviewed: [MoviePeopleReviewedDisconnectFieldInput!] @source(name: "peopleReviewed", type: "[MoviePeopleReviewedDisconnectFieldInput!]", subgraph: "Movies")
  peopleWrote: [MoviePeopleWroteDisconnectFieldInput!] @source(name: "peopleWrote", type: "[MoviePeopleWroteDisconnectFieldInput!]", subgraph: "Movies")
}

input MovieOptions @source(name: "MovieOptions", subgraph: "Movies") {
  limit: Int @source(name: "limit", type: "Int", subgraph: "Movies")
  offset: Int @source(name: "offset", type: "Int", subgraph: "Movies")
  """
  Specify one or more MovieSort objects to sort Movies by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [MovieSort!] @source(name: "sort", type: "[MovieSort!]", subgraph: "Movies")
}

input MoviePeopleActedInAggregateInput @source(name: "MoviePeopleActedInAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [MoviePeopleActedInAggregateInput!] @source(name: "AND", type: "[MoviePeopleActedInAggregateInput!]", subgraph: "Movies")
  OR: [MoviePeopleActedInAggregateInput!] @source(name: "OR", type: "[MoviePeopleActedInAggregateInput!]", subgraph: "Movies")
  NOT: MoviePeopleActedInAggregateInput @source(name: "NOT", type: "MoviePeopleActedInAggregateInput", subgraph: "Movies")
  node: MoviePeopleActedInNodeAggregationWhereInput @source(name: "node", type: "MoviePeopleActedInNodeAggregationWhereInput", subgraph: "Movies")
}

input MoviePeopleActedInConnectFieldInput @source(name: "MoviePeopleActedInConnectFieldInput", subgraph: "Movies") {
  edge: ActedInPropertiesCreateInput! @source(name: "edge", type: "ActedInPropertiesCreateInput!", subgraph: "Movies")
  where: PersonConnectWhere @source(name: "where", type: "PersonConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [PersonConnectInput!] @source(name: "connect", type: "[PersonConnectInput!]", subgraph: "Movies")
}

input MoviePeopleActedInConnectionSort @source(name: "MoviePeopleActedInConnectionSort", subgraph: "Movies") {
  node: PersonSort @source(name: "node", type: "PersonSort", subgraph: "Movies")
  edge: ActedInPropertiesSort @source(name: "edge", type: "ActedInPropertiesSort", subgraph: "Movies")
}

input MoviePeopleActedInConnectionWhere @source(name: "MoviePeopleActedInConnectionWhere", subgraph: "Movies") {
  AND: [MoviePeopleActedInConnectionWhere!] @source(name: "AND", type: "[MoviePeopleActedInConnectionWhere!]", subgraph: "Movies")
  OR: [MoviePeopleActedInConnectionWhere!] @source(name: "OR", type: "[MoviePeopleActedInConnectionWhere!]", subgraph: "Movies")
  NOT: MoviePeopleActedInConnectionWhere @source(name: "NOT", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  node: PersonWhere @source(name: "node", type: "PersonWhere", subgraph: "Movies")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "PersonWhere", subgraph: "Movies")
  edge: ActedInPropertiesWhere @source(name: "edge", type: "ActedInPropertiesWhere", subgraph: "Movies")
  edge_NOT: ActedInPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "edge_NOT", type: "ActedInPropertiesWhere", subgraph: "Movies")
}

input MoviePeopleActedInCreateFieldInput @source(name: "MoviePeopleActedInCreateFieldInput", subgraph: "Movies") {
  edge: ActedInPropertiesCreateInput! @source(name: "edge", type: "ActedInPropertiesCreateInput!", subgraph: "Movies")
  node: PersonCreateInput! @source(name: "node", type: "PersonCreateInput!", subgraph: "Movies")
}

input MoviePeopleActedInDeleteFieldInput @source(name: "MoviePeopleActedInDeleteFieldInput", subgraph: "Movies") {
  where: MoviePeopleActedInConnectionWhere @source(name: "where", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")
}

input MoviePeopleActedInDisconnectFieldInput @source(name: "MoviePeopleActedInDisconnectFieldInput", subgraph: "Movies") {
  where: MoviePeopleActedInConnectionWhere @source(name: "where", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies")
}

input MoviePeopleActedInFieldInput @source(name: "MoviePeopleActedInFieldInput", subgraph: "Movies") {
  connect: [MoviePeopleActedInConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleActedInConnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleActedInCreateFieldInput!] @source(name: "create", type: "[MoviePeopleActedInCreateFieldInput!]", subgraph: "Movies")
}

input MoviePeopleActedInNodeAggregationWhereInput @source(name: "MoviePeopleActedInNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [MoviePeopleActedInNodeAggregationWhereInput!] @source(name: "AND", type: "[MoviePeopleActedInNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [MoviePeopleActedInNodeAggregationWhereInput!] @source(name: "OR", type: "[MoviePeopleActedInNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: MoviePeopleActedInNodeAggregationWhereInput @source(name: "NOT", type: "MoviePeopleActedInNodeAggregationWhereInput", subgraph: "Movies")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MIN_EQUAL: BigInt @source(name: "born_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MAX_EQUAL: BigInt @source(name: "born_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  born_SUM_EQUAL: BigInt @source(name: "born_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_EQUAL: BigInt @source(name: "born_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_MIN_GT: BigInt @source(name: "born_MIN_GT", type: "BigInt", subgraph: "Movies")
  born_MAX_GT: BigInt @source(name: "born_MAX_GT", type: "BigInt", subgraph: "Movies")
  born_SUM_GT: BigInt @source(name: "born_SUM_GT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GT: BigInt @source(name: "born_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  born_MIN_GTE: BigInt @source(name: "born_MIN_GTE", type: "BigInt", subgraph: "Movies")
  born_MAX_GTE: BigInt @source(name: "born_MAX_GTE", type: "BigInt", subgraph: "Movies")
  born_SUM_GTE: BigInt @source(name: "born_SUM_GTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GTE: BigInt @source(name: "born_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_MIN_LT: BigInt @source(name: "born_MIN_LT", type: "BigInt", subgraph: "Movies")
  born_MAX_LT: BigInt @source(name: "born_MAX_LT", type: "BigInt", subgraph: "Movies")
  born_SUM_LT: BigInt @source(name: "born_SUM_LT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LT: BigInt @source(name: "born_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_MIN_LTE: BigInt @source(name: "born_MIN_LTE", type: "BigInt", subgraph: "Movies")
  born_MAX_LTE: BigInt @source(name: "born_MAX_LTE", type: "BigInt", subgraph: "Movies")
  born_SUM_LTE: BigInt @source(name: "born_SUM_LTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LTE: BigInt @source(name: "born_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_EQUAL", type: "String", subgraph: "Movies")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_EQUAL: Float @source(name: "name_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_EQUAL: Int @source(name: "name_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_EQUAL: Int @source(name: "name_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GT: Float @source(name: "name_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GT: Int @source(name: "name_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GT: Int @source(name: "name_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GTE: Float @source(name: "name_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GTE: Int @source(name: "name_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GTE: Int @source(name: "name_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LT: Float @source(name: "name_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LT: Int @source(name: "name_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LT: Int @source(name: "name_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LTE: Float @source(name: "name_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LTE: Int @source(name: "name_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LTE: Int @source(name: "name_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input MoviePeopleActedInUpdateConnectionInput @source(name: "MoviePeopleActedInUpdateConnectionInput", subgraph: "Movies") {
  node: PersonUpdateInput @source(name: "node", type: "PersonUpdateInput", subgraph: "Movies")
  edge: ActedInPropertiesUpdateInput @source(name: "edge", type: "ActedInPropertiesUpdateInput", subgraph: "Movies")
}

input MoviePeopleActedInUpdateFieldInput @source(name: "MoviePeopleActedInUpdateFieldInput", subgraph: "Movies") {
  where: MoviePeopleActedInConnectionWhere @source(name: "where", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  connect: [MoviePeopleActedInConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleActedInConnectFieldInput!]", subgraph: "Movies")
  disconnect: [MoviePeopleActedInDisconnectFieldInput!] @source(name: "disconnect", type: "[MoviePeopleActedInDisconnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleActedInCreateFieldInput!] @source(name: "create", type: "[MoviePeopleActedInCreateFieldInput!]", subgraph: "Movies")
  update: MoviePeopleActedInUpdateConnectionInput @source(name: "update", type: "MoviePeopleActedInUpdateConnectionInput", subgraph: "Movies")
  delete: [MoviePeopleActedInDeleteFieldInput!] @source(name: "delete", type: "[MoviePeopleActedInDeleteFieldInput!]", subgraph: "Movies")
}

input MoviePeopleDirectedAggregateInput @source(name: "MoviePeopleDirectedAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [MoviePeopleDirectedAggregateInput!] @source(name: "AND", type: "[MoviePeopleDirectedAggregateInput!]", subgraph: "Movies")
  OR: [MoviePeopleDirectedAggregateInput!] @source(name: "OR", type: "[MoviePeopleDirectedAggregateInput!]", subgraph: "Movies")
  NOT: MoviePeopleDirectedAggregateInput @source(name: "NOT", type: "MoviePeopleDirectedAggregateInput", subgraph: "Movies")
  node: MoviePeopleDirectedNodeAggregationWhereInput @source(name: "node", type: "MoviePeopleDirectedNodeAggregationWhereInput", subgraph: "Movies")
}

input MoviePeopleDirectedConnectFieldInput @source(name: "MoviePeopleDirectedConnectFieldInput", subgraph: "Movies") {
  where: PersonConnectWhere @source(name: "where", type: "PersonConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [PersonConnectInput!] @source(name: "connect", type: "[PersonConnectInput!]", subgraph: "Movies")
}

input MoviePeopleDirectedConnectionSort @source(name: "MoviePeopleDirectedConnectionSort", subgraph: "Movies") {
  node: PersonSort @source(name: "node", type: "PersonSort", subgraph: "Movies")
}

input MoviePeopleDirectedConnectionWhere @source(name: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies") {
  AND: [MoviePeopleDirectedConnectionWhere!] @source(name: "AND", type: "[MoviePeopleDirectedConnectionWhere!]", subgraph: "Movies")
  OR: [MoviePeopleDirectedConnectionWhere!] @source(name: "OR", type: "[MoviePeopleDirectedConnectionWhere!]", subgraph: "Movies")
  NOT: MoviePeopleDirectedConnectionWhere @source(name: "NOT", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  node: PersonWhere @source(name: "node", type: "PersonWhere", subgraph: "Movies")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "PersonWhere", subgraph: "Movies")
}

input MoviePeopleDirectedCreateFieldInput @source(name: "MoviePeopleDirectedCreateFieldInput", subgraph: "Movies") {
  node: PersonCreateInput! @source(name: "node", type: "PersonCreateInput!", subgraph: "Movies")
}

input MoviePeopleDirectedDeleteFieldInput @source(name: "MoviePeopleDirectedDeleteFieldInput", subgraph: "Movies") {
  where: MoviePeopleDirectedConnectionWhere @source(name: "where", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")
}

input MoviePeopleDirectedDisconnectFieldInput @source(name: "MoviePeopleDirectedDisconnectFieldInput", subgraph: "Movies") {
  where: MoviePeopleDirectedConnectionWhere @source(name: "where", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies")
}

input MoviePeopleDirectedFieldInput @source(name: "MoviePeopleDirectedFieldInput", subgraph: "Movies") {
  connect: [MoviePeopleDirectedConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleDirectedConnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleDirectedCreateFieldInput!] @source(name: "create", type: "[MoviePeopleDirectedCreateFieldInput!]", subgraph: "Movies")
}

input MoviePeopleDirectedNodeAggregationWhereInput @source(name: "MoviePeopleDirectedNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [MoviePeopleDirectedNodeAggregationWhereInput!] @source(name: "AND", type: "[MoviePeopleDirectedNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [MoviePeopleDirectedNodeAggregationWhereInput!] @source(name: "OR", type: "[MoviePeopleDirectedNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: MoviePeopleDirectedNodeAggregationWhereInput @source(name: "NOT", type: "MoviePeopleDirectedNodeAggregationWhereInput", subgraph: "Movies")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MIN_EQUAL: BigInt @source(name: "born_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MAX_EQUAL: BigInt @source(name: "born_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  born_SUM_EQUAL: BigInt @source(name: "born_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_EQUAL: BigInt @source(name: "born_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_MIN_GT: BigInt @source(name: "born_MIN_GT", type: "BigInt", subgraph: "Movies")
  born_MAX_GT: BigInt @source(name: "born_MAX_GT", type: "BigInt", subgraph: "Movies")
  born_SUM_GT: BigInt @source(name: "born_SUM_GT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GT: BigInt @source(name: "born_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  born_MIN_GTE: BigInt @source(name: "born_MIN_GTE", type: "BigInt", subgraph: "Movies")
  born_MAX_GTE: BigInt @source(name: "born_MAX_GTE", type: "BigInt", subgraph: "Movies")
  born_SUM_GTE: BigInt @source(name: "born_SUM_GTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GTE: BigInt @source(name: "born_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_MIN_LT: BigInt @source(name: "born_MIN_LT", type: "BigInt", subgraph: "Movies")
  born_MAX_LT: BigInt @source(name: "born_MAX_LT", type: "BigInt", subgraph: "Movies")
  born_SUM_LT: BigInt @source(name: "born_SUM_LT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LT: BigInt @source(name: "born_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_MIN_LTE: BigInt @source(name: "born_MIN_LTE", type: "BigInt", subgraph: "Movies")
  born_MAX_LTE: BigInt @source(name: "born_MAX_LTE", type: "BigInt", subgraph: "Movies")
  born_SUM_LTE: BigInt @source(name: "born_SUM_LTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LTE: BigInt @source(name: "born_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_EQUAL", type: "String", subgraph: "Movies")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_EQUAL: Float @source(name: "name_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_EQUAL: Int @source(name: "name_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_EQUAL: Int @source(name: "name_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GT: Float @source(name: "name_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GT: Int @source(name: "name_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GT: Int @source(name: "name_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GTE: Float @source(name: "name_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GTE: Int @source(name: "name_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GTE: Int @source(name: "name_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LT: Float @source(name: "name_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LT: Int @source(name: "name_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LT: Int @source(name: "name_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LTE: Float @source(name: "name_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LTE: Int @source(name: "name_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LTE: Int @source(name: "name_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input MoviePeopleDirectedUpdateConnectionInput @source(name: "MoviePeopleDirectedUpdateConnectionInput", subgraph: "Movies") {
  node: PersonUpdateInput @source(name: "node", type: "PersonUpdateInput", subgraph: "Movies")
}

input MoviePeopleDirectedUpdateFieldInput @source(name: "MoviePeopleDirectedUpdateFieldInput", subgraph: "Movies") {
  where: MoviePeopleDirectedConnectionWhere @source(name: "where", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  connect: [MoviePeopleDirectedConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleDirectedConnectFieldInput!]", subgraph: "Movies")
  disconnect: [MoviePeopleDirectedDisconnectFieldInput!] @source(name: "disconnect", type: "[MoviePeopleDirectedDisconnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleDirectedCreateFieldInput!] @source(name: "create", type: "[MoviePeopleDirectedCreateFieldInput!]", subgraph: "Movies")
  update: MoviePeopleDirectedUpdateConnectionInput @source(name: "update", type: "MoviePeopleDirectedUpdateConnectionInput", subgraph: "Movies")
  delete: [MoviePeopleDirectedDeleteFieldInput!] @source(name: "delete", type: "[MoviePeopleDirectedDeleteFieldInput!]", subgraph: "Movies")
}

input MoviePeopleProducedAggregateInput @source(name: "MoviePeopleProducedAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [MoviePeopleProducedAggregateInput!] @source(name: "AND", type: "[MoviePeopleProducedAggregateInput!]", subgraph: "Movies")
  OR: [MoviePeopleProducedAggregateInput!] @source(name: "OR", type: "[MoviePeopleProducedAggregateInput!]", subgraph: "Movies")
  NOT: MoviePeopleProducedAggregateInput @source(name: "NOT", type: "MoviePeopleProducedAggregateInput", subgraph: "Movies")
  node: MoviePeopleProducedNodeAggregationWhereInput @source(name: "node", type: "MoviePeopleProducedNodeAggregationWhereInput", subgraph: "Movies")
}

input MoviePeopleProducedConnectFieldInput @source(name: "MoviePeopleProducedConnectFieldInput", subgraph: "Movies") {
  where: PersonConnectWhere @source(name: "where", type: "PersonConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [PersonConnectInput!] @source(name: "connect", type: "[PersonConnectInput!]", subgraph: "Movies")
}

input MoviePeopleProducedConnectionSort @source(name: "MoviePeopleProducedConnectionSort", subgraph: "Movies") {
  node: PersonSort @source(name: "node", type: "PersonSort", subgraph: "Movies")
}

input MoviePeopleProducedConnectionWhere @source(name: "MoviePeopleProducedConnectionWhere", subgraph: "Movies") {
  AND: [MoviePeopleProducedConnectionWhere!] @source(name: "AND", type: "[MoviePeopleProducedConnectionWhere!]", subgraph: "Movies")
  OR: [MoviePeopleProducedConnectionWhere!] @source(name: "OR", type: "[MoviePeopleProducedConnectionWhere!]", subgraph: "Movies")
  NOT: MoviePeopleProducedConnectionWhere @source(name: "NOT", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  node: PersonWhere @source(name: "node", type: "PersonWhere", subgraph: "Movies")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "PersonWhere", subgraph: "Movies")
}

input MoviePeopleProducedCreateFieldInput @source(name: "MoviePeopleProducedCreateFieldInput", subgraph: "Movies") {
  node: PersonCreateInput! @source(name: "node", type: "PersonCreateInput!", subgraph: "Movies")
}

input MoviePeopleProducedDeleteFieldInput @source(name: "MoviePeopleProducedDeleteFieldInput", subgraph: "Movies") {
  where: MoviePeopleProducedConnectionWhere @source(name: "where", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")
}

input MoviePeopleProducedDisconnectFieldInput @source(name: "MoviePeopleProducedDisconnectFieldInput", subgraph: "Movies") {
  where: MoviePeopleProducedConnectionWhere @source(name: "where", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies")
}

input MoviePeopleProducedFieldInput @source(name: "MoviePeopleProducedFieldInput", subgraph: "Movies") {
  connect: [MoviePeopleProducedConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleProducedConnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleProducedCreateFieldInput!] @source(name: "create", type: "[MoviePeopleProducedCreateFieldInput!]", subgraph: "Movies")
}

input MoviePeopleProducedNodeAggregationWhereInput @source(name: "MoviePeopleProducedNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [MoviePeopleProducedNodeAggregationWhereInput!] @source(name: "AND", type: "[MoviePeopleProducedNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [MoviePeopleProducedNodeAggregationWhereInput!] @source(name: "OR", type: "[MoviePeopleProducedNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: MoviePeopleProducedNodeAggregationWhereInput @source(name: "NOT", type: "MoviePeopleProducedNodeAggregationWhereInput", subgraph: "Movies")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MIN_EQUAL: BigInt @source(name: "born_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MAX_EQUAL: BigInt @source(name: "born_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  born_SUM_EQUAL: BigInt @source(name: "born_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_EQUAL: BigInt @source(name: "born_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_MIN_GT: BigInt @source(name: "born_MIN_GT", type: "BigInt", subgraph: "Movies")
  born_MAX_GT: BigInt @source(name: "born_MAX_GT", type: "BigInt", subgraph: "Movies")
  born_SUM_GT: BigInt @source(name: "born_SUM_GT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GT: BigInt @source(name: "born_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  born_MIN_GTE: BigInt @source(name: "born_MIN_GTE", type: "BigInt", subgraph: "Movies")
  born_MAX_GTE: BigInt @source(name: "born_MAX_GTE", type: "BigInt", subgraph: "Movies")
  born_SUM_GTE: BigInt @source(name: "born_SUM_GTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GTE: BigInt @source(name: "born_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_MIN_LT: BigInt @source(name: "born_MIN_LT", type: "BigInt", subgraph: "Movies")
  born_MAX_LT: BigInt @source(name: "born_MAX_LT", type: "BigInt", subgraph: "Movies")
  born_SUM_LT: BigInt @source(name: "born_SUM_LT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LT: BigInt @source(name: "born_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_MIN_LTE: BigInt @source(name: "born_MIN_LTE", type: "BigInt", subgraph: "Movies")
  born_MAX_LTE: BigInt @source(name: "born_MAX_LTE", type: "BigInt", subgraph: "Movies")
  born_SUM_LTE: BigInt @source(name: "born_SUM_LTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LTE: BigInt @source(name: "born_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_EQUAL", type: "String", subgraph: "Movies")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_EQUAL: Float @source(name: "name_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_EQUAL: Int @source(name: "name_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_EQUAL: Int @source(name: "name_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GT: Float @source(name: "name_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GT: Int @source(name: "name_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GT: Int @source(name: "name_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GTE: Float @source(name: "name_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GTE: Int @source(name: "name_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GTE: Int @source(name: "name_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LT: Float @source(name: "name_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LT: Int @source(name: "name_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LT: Int @source(name: "name_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LTE: Float @source(name: "name_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LTE: Int @source(name: "name_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LTE: Int @source(name: "name_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input MoviePeopleProducedUpdateConnectionInput @source(name: "MoviePeopleProducedUpdateConnectionInput", subgraph: "Movies") {
  node: PersonUpdateInput @source(name: "node", type: "PersonUpdateInput", subgraph: "Movies")
}

input MoviePeopleProducedUpdateFieldInput @source(name: "MoviePeopleProducedUpdateFieldInput", subgraph: "Movies") {
  where: MoviePeopleProducedConnectionWhere @source(name: "where", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  connect: [MoviePeopleProducedConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleProducedConnectFieldInput!]", subgraph: "Movies")
  disconnect: [MoviePeopleProducedDisconnectFieldInput!] @source(name: "disconnect", type: "[MoviePeopleProducedDisconnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleProducedCreateFieldInput!] @source(name: "create", type: "[MoviePeopleProducedCreateFieldInput!]", subgraph: "Movies")
  update: MoviePeopleProducedUpdateConnectionInput @source(name: "update", type: "MoviePeopleProducedUpdateConnectionInput", subgraph: "Movies")
  delete: [MoviePeopleProducedDeleteFieldInput!] @source(name: "delete", type: "[MoviePeopleProducedDeleteFieldInput!]", subgraph: "Movies")
}

input MoviePeopleReviewedAggregateInput @source(name: "MoviePeopleReviewedAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [MoviePeopleReviewedAggregateInput!] @source(name: "AND", type: "[MoviePeopleReviewedAggregateInput!]", subgraph: "Movies")
  OR: [MoviePeopleReviewedAggregateInput!] @source(name: "OR", type: "[MoviePeopleReviewedAggregateInput!]", subgraph: "Movies")
  NOT: MoviePeopleReviewedAggregateInput @source(name: "NOT", type: "MoviePeopleReviewedAggregateInput", subgraph: "Movies")
  node: MoviePeopleReviewedNodeAggregationWhereInput @source(name: "node", type: "MoviePeopleReviewedNodeAggregationWhereInput", subgraph: "Movies")
  edge: ReviewedPropertiesAggregationWhereInput @source(name: "edge", type: "ReviewedPropertiesAggregationWhereInput", subgraph: "Movies")
}

input MoviePeopleReviewedConnectFieldInput @source(name: "MoviePeopleReviewedConnectFieldInput", subgraph: "Movies") {
  edge: ReviewedPropertiesCreateInput! @source(name: "edge", type: "ReviewedPropertiesCreateInput!", subgraph: "Movies")
  where: PersonConnectWhere @source(name: "where", type: "PersonConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [PersonConnectInput!] @source(name: "connect", type: "[PersonConnectInput!]", subgraph: "Movies")
}

input MoviePeopleReviewedConnectionSort @source(name: "MoviePeopleReviewedConnectionSort", subgraph: "Movies") {
  node: PersonSort @source(name: "node", type: "PersonSort", subgraph: "Movies")
  edge: ReviewedPropertiesSort @source(name: "edge", type: "ReviewedPropertiesSort", subgraph: "Movies")
}

input MoviePeopleReviewedConnectionWhere @source(name: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies") {
  AND: [MoviePeopleReviewedConnectionWhere!] @source(name: "AND", type: "[MoviePeopleReviewedConnectionWhere!]", subgraph: "Movies")
  OR: [MoviePeopleReviewedConnectionWhere!] @source(name: "OR", type: "[MoviePeopleReviewedConnectionWhere!]", subgraph: "Movies")
  NOT: MoviePeopleReviewedConnectionWhere @source(name: "NOT", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  node: PersonWhere @source(name: "node", type: "PersonWhere", subgraph: "Movies")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "PersonWhere", subgraph: "Movies")
  edge: ReviewedPropertiesWhere @source(name: "edge", type: "ReviewedPropertiesWhere", subgraph: "Movies")
  edge_NOT: ReviewedPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "edge_NOT", type: "ReviewedPropertiesWhere", subgraph: "Movies")
}

input MoviePeopleReviewedCreateFieldInput @source(name: "MoviePeopleReviewedCreateFieldInput", subgraph: "Movies") {
  edge: ReviewedPropertiesCreateInput! @source(name: "edge", type: "ReviewedPropertiesCreateInput!", subgraph: "Movies")
  node: PersonCreateInput! @source(name: "node", type: "PersonCreateInput!", subgraph: "Movies")
}

input MoviePeopleReviewedDeleteFieldInput @source(name: "MoviePeopleReviewedDeleteFieldInput", subgraph: "Movies") {
  where: MoviePeopleReviewedConnectionWhere @source(name: "where", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")
}

input MoviePeopleReviewedDisconnectFieldInput @source(name: "MoviePeopleReviewedDisconnectFieldInput", subgraph: "Movies") {
  where: MoviePeopleReviewedConnectionWhere @source(name: "where", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies")
}

input MoviePeopleReviewedFieldInput @source(name: "MoviePeopleReviewedFieldInput", subgraph: "Movies") {
  connect: [MoviePeopleReviewedConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleReviewedConnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleReviewedCreateFieldInput!] @source(name: "create", type: "[MoviePeopleReviewedCreateFieldInput!]", subgraph: "Movies")
}

input MoviePeopleReviewedNodeAggregationWhereInput @source(name: "MoviePeopleReviewedNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [MoviePeopleReviewedNodeAggregationWhereInput!] @source(name: "AND", type: "[MoviePeopleReviewedNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [MoviePeopleReviewedNodeAggregationWhereInput!] @source(name: "OR", type: "[MoviePeopleReviewedNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: MoviePeopleReviewedNodeAggregationWhereInput @source(name: "NOT", type: "MoviePeopleReviewedNodeAggregationWhereInput", subgraph: "Movies")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MIN_EQUAL: BigInt @source(name: "born_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MAX_EQUAL: BigInt @source(name: "born_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  born_SUM_EQUAL: BigInt @source(name: "born_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_EQUAL: BigInt @source(name: "born_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_MIN_GT: BigInt @source(name: "born_MIN_GT", type: "BigInt", subgraph: "Movies")
  born_MAX_GT: BigInt @source(name: "born_MAX_GT", type: "BigInt", subgraph: "Movies")
  born_SUM_GT: BigInt @source(name: "born_SUM_GT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GT: BigInt @source(name: "born_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  born_MIN_GTE: BigInt @source(name: "born_MIN_GTE", type: "BigInt", subgraph: "Movies")
  born_MAX_GTE: BigInt @source(name: "born_MAX_GTE", type: "BigInt", subgraph: "Movies")
  born_SUM_GTE: BigInt @source(name: "born_SUM_GTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GTE: BigInt @source(name: "born_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_MIN_LT: BigInt @source(name: "born_MIN_LT", type: "BigInt", subgraph: "Movies")
  born_MAX_LT: BigInt @source(name: "born_MAX_LT", type: "BigInt", subgraph: "Movies")
  born_SUM_LT: BigInt @source(name: "born_SUM_LT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LT: BigInt @source(name: "born_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_MIN_LTE: BigInt @source(name: "born_MIN_LTE", type: "BigInt", subgraph: "Movies")
  born_MAX_LTE: BigInt @source(name: "born_MAX_LTE", type: "BigInt", subgraph: "Movies")
  born_SUM_LTE: BigInt @source(name: "born_SUM_LTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LTE: BigInt @source(name: "born_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_EQUAL", type: "String", subgraph: "Movies")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_EQUAL: Float @source(name: "name_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_EQUAL: Int @source(name: "name_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_EQUAL: Int @source(name: "name_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GT: Float @source(name: "name_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GT: Int @source(name: "name_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GT: Int @source(name: "name_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GTE: Float @source(name: "name_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GTE: Int @source(name: "name_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GTE: Int @source(name: "name_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LT: Float @source(name: "name_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LT: Int @source(name: "name_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LT: Int @source(name: "name_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LTE: Float @source(name: "name_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LTE: Int @source(name: "name_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LTE: Int @source(name: "name_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input MoviePeopleReviewedUpdateConnectionInput @source(name: "MoviePeopleReviewedUpdateConnectionInput", subgraph: "Movies") {
  node: PersonUpdateInput @source(name: "node", type: "PersonUpdateInput", subgraph: "Movies")
  edge: ReviewedPropertiesUpdateInput @source(name: "edge", type: "ReviewedPropertiesUpdateInput", subgraph: "Movies")
}

input MoviePeopleReviewedUpdateFieldInput @source(name: "MoviePeopleReviewedUpdateFieldInput", subgraph: "Movies") {
  where: MoviePeopleReviewedConnectionWhere @source(name: "where", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  connect: [MoviePeopleReviewedConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleReviewedConnectFieldInput!]", subgraph: "Movies")
  disconnect: [MoviePeopleReviewedDisconnectFieldInput!] @source(name: "disconnect", type: "[MoviePeopleReviewedDisconnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleReviewedCreateFieldInput!] @source(name: "create", type: "[MoviePeopleReviewedCreateFieldInput!]", subgraph: "Movies")
  update: MoviePeopleReviewedUpdateConnectionInput @source(name: "update", type: "MoviePeopleReviewedUpdateConnectionInput", subgraph: "Movies")
  delete: [MoviePeopleReviewedDeleteFieldInput!] @source(name: "delete", type: "[MoviePeopleReviewedDeleteFieldInput!]", subgraph: "Movies")
}

input MoviePeopleWroteAggregateInput @source(name: "MoviePeopleWroteAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [MoviePeopleWroteAggregateInput!] @source(name: "AND", type: "[MoviePeopleWroteAggregateInput!]", subgraph: "Movies")
  OR: [MoviePeopleWroteAggregateInput!] @source(name: "OR", type: "[MoviePeopleWroteAggregateInput!]", subgraph: "Movies")
  NOT: MoviePeopleWroteAggregateInput @source(name: "NOT", type: "MoviePeopleWroteAggregateInput", subgraph: "Movies")
  node: MoviePeopleWroteNodeAggregationWhereInput @source(name: "node", type: "MoviePeopleWroteNodeAggregationWhereInput", subgraph: "Movies")
}

input MoviePeopleWroteConnectFieldInput @source(name: "MoviePeopleWroteConnectFieldInput", subgraph: "Movies") {
  where: PersonConnectWhere @source(name: "where", type: "PersonConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [PersonConnectInput!] @source(name: "connect", type: "[PersonConnectInput!]", subgraph: "Movies")
}

input MoviePeopleWroteConnectionSort @source(name: "MoviePeopleWroteConnectionSort", subgraph: "Movies") {
  node: PersonSort @source(name: "node", type: "PersonSort", subgraph: "Movies")
}

input MoviePeopleWroteConnectionWhere @source(name: "MoviePeopleWroteConnectionWhere", subgraph: "Movies") {
  AND: [MoviePeopleWroteConnectionWhere!] @source(name: "AND", type: "[MoviePeopleWroteConnectionWhere!]", subgraph: "Movies")
  OR: [MoviePeopleWroteConnectionWhere!] @source(name: "OR", type: "[MoviePeopleWroteConnectionWhere!]", subgraph: "Movies")
  NOT: MoviePeopleWroteConnectionWhere @source(name: "NOT", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  node: PersonWhere @source(name: "node", type: "PersonWhere", subgraph: "Movies")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "PersonWhere", subgraph: "Movies")
}

input MoviePeopleWroteCreateFieldInput @source(name: "MoviePeopleWroteCreateFieldInput", subgraph: "Movies") {
  node: PersonCreateInput! @source(name: "node", type: "PersonCreateInput!", subgraph: "Movies")
}

input MoviePeopleWroteDeleteFieldInput @source(name: "MoviePeopleWroteDeleteFieldInput", subgraph: "Movies") {
  where: MoviePeopleWroteConnectionWhere @source(name: "where", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")
}

input MoviePeopleWroteDisconnectFieldInput @source(name: "MoviePeopleWroteDisconnectFieldInput", subgraph: "Movies") {
  where: MoviePeopleWroteConnectionWhere @source(name: "where", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies")
}

input MoviePeopleWroteFieldInput @source(name: "MoviePeopleWroteFieldInput", subgraph: "Movies") {
  connect: [MoviePeopleWroteConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleWroteConnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleWroteCreateFieldInput!] @source(name: "create", type: "[MoviePeopleWroteCreateFieldInput!]", subgraph: "Movies")
}

input MoviePeopleWroteNodeAggregationWhereInput @source(name: "MoviePeopleWroteNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [MoviePeopleWroteNodeAggregationWhereInput!] @source(name: "AND", type: "[MoviePeopleWroteNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [MoviePeopleWroteNodeAggregationWhereInput!] @source(name: "OR", type: "[MoviePeopleWroteNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: MoviePeopleWroteNodeAggregationWhereInput @source(name: "NOT", type: "MoviePeopleWroteNodeAggregationWhereInput", subgraph: "Movies")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MIN_EQUAL: BigInt @source(name: "born_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MAX_EQUAL: BigInt @source(name: "born_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  born_SUM_EQUAL: BigInt @source(name: "born_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_EQUAL: BigInt @source(name: "born_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_MIN_GT: BigInt @source(name: "born_MIN_GT", type: "BigInt", subgraph: "Movies")
  born_MAX_GT: BigInt @source(name: "born_MAX_GT", type: "BigInt", subgraph: "Movies")
  born_SUM_GT: BigInt @source(name: "born_SUM_GT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GT: BigInt @source(name: "born_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  born_MIN_GTE: BigInt @source(name: "born_MIN_GTE", type: "BigInt", subgraph: "Movies")
  born_MAX_GTE: BigInt @source(name: "born_MAX_GTE", type: "BigInt", subgraph: "Movies")
  born_SUM_GTE: BigInt @source(name: "born_SUM_GTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GTE: BigInt @source(name: "born_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_MIN_LT: BigInt @source(name: "born_MIN_LT", type: "BigInt", subgraph: "Movies")
  born_MAX_LT: BigInt @source(name: "born_MAX_LT", type: "BigInt", subgraph: "Movies")
  born_SUM_LT: BigInt @source(name: "born_SUM_LT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LT: BigInt @source(name: "born_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_MIN_LTE: BigInt @source(name: "born_MIN_LTE", type: "BigInt", subgraph: "Movies")
  born_MAX_LTE: BigInt @source(name: "born_MAX_LTE", type: "BigInt", subgraph: "Movies")
  born_SUM_LTE: BigInt @source(name: "born_SUM_LTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LTE: BigInt @source(name: "born_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_EQUAL", type: "String", subgraph: "Movies")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_EQUAL: Float @source(name: "name_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_EQUAL: Int @source(name: "name_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_EQUAL: Int @source(name: "name_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GT: Float @source(name: "name_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GT: Int @source(name: "name_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GT: Int @source(name: "name_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GTE: Float @source(name: "name_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GTE: Int @source(name: "name_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GTE: Int @source(name: "name_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LT: Float @source(name: "name_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LT: Int @source(name: "name_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LT: Int @source(name: "name_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LTE: Float @source(name: "name_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LTE: Int @source(name: "name_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LTE: Int @source(name: "name_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input MoviePeopleWroteUpdateConnectionInput @source(name: "MoviePeopleWroteUpdateConnectionInput", subgraph: "Movies") {
  node: PersonUpdateInput @source(name: "node", type: "PersonUpdateInput", subgraph: "Movies")
}

input MoviePeopleWroteUpdateFieldInput @source(name: "MoviePeopleWroteUpdateFieldInput", subgraph: "Movies") {
  where: MoviePeopleWroteConnectionWhere @source(name: "where", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  connect: [MoviePeopleWroteConnectFieldInput!] @source(name: "connect", type: "[MoviePeopleWroteConnectFieldInput!]", subgraph: "Movies")
  disconnect: [MoviePeopleWroteDisconnectFieldInput!] @source(name: "disconnect", type: "[MoviePeopleWroteDisconnectFieldInput!]", subgraph: "Movies")
  create: [MoviePeopleWroteCreateFieldInput!] @source(name: "create", type: "[MoviePeopleWroteCreateFieldInput!]", subgraph: "Movies")
  update: MoviePeopleWroteUpdateConnectionInput @source(name: "update", type: "MoviePeopleWroteUpdateConnectionInput", subgraph: "Movies")
  delete: [MoviePeopleWroteDeleteFieldInput!] @source(name: "delete", type: "[MoviePeopleWroteDeleteFieldInput!]", subgraph: "Movies")
}

input MovieRelationInput @source(name: "MovieRelationInput", subgraph: "Movies") {
  peopleActedIn: [MoviePeopleActedInCreateFieldInput!] @source(name: "peopleActedIn", type: "[MoviePeopleActedInCreateFieldInput!]", subgraph: "Movies")
  peopleDirected: [MoviePeopleDirectedCreateFieldInput!] @source(name: "peopleDirected", type: "[MoviePeopleDirectedCreateFieldInput!]", subgraph: "Movies")
  peopleProduced: [MoviePeopleProducedCreateFieldInput!] @source(name: "peopleProduced", type: "[MoviePeopleProducedCreateFieldInput!]", subgraph: "Movies")
  peopleReviewed: [MoviePeopleReviewedCreateFieldInput!] @source(name: "peopleReviewed", type: "[MoviePeopleReviewedCreateFieldInput!]", subgraph: "Movies")
  peopleWrote: [MoviePeopleWroteCreateFieldInput!] @source(name: "peopleWrote", type: "[MoviePeopleWroteCreateFieldInput!]", subgraph: "Movies")
}

"""
Fields to sort Movies by. The order in which sorts are applied is not guaranteed when specifying many fields in one MovieSort object.
"""
input MovieSort @source(name: "MovieSort", subgraph: "Movies") {
  released: SortDirection @source(name: "released", type: "SortDirection", subgraph: "Movies")
  tagline: SortDirection @source(name: "tagline", type: "SortDirection", subgraph: "Movies")
  title: SortDirection @source(name: "title", type: "SortDirection", subgraph: "Movies")
  votes: SortDirection @source(name: "votes", type: "SortDirection", subgraph: "Movies")
}

input MovieUpdateInput @source(name: "MovieUpdateInput", subgraph: "Movies") {
  released: BigInt @source(name: "released", type: "BigInt", subgraph: "Movies")
  released_INCREMENT: BigInt @source(name: "released_INCREMENT", type: "BigInt", subgraph: "Movies")
  released_DECREMENT: BigInt @source(name: "released_DECREMENT", type: "BigInt", subgraph: "Movies")
  tagline: String @source(name: "tagline", type: "String", subgraph: "Movies")
  title: String @source(name: "title", type: "String", subgraph: "Movies")
  votes: BigInt @source(name: "votes", type: "BigInt", subgraph: "Movies")
  votes_INCREMENT: BigInt @source(name: "votes_INCREMENT", type: "BigInt", subgraph: "Movies")
  votes_DECREMENT: BigInt @source(name: "votes_DECREMENT", type: "BigInt", subgraph: "Movies")
  peopleActedIn: [MoviePeopleActedInUpdateFieldInput!] @source(name: "peopleActedIn", type: "[MoviePeopleActedInUpdateFieldInput!]", subgraph: "Movies")
  peopleDirected: [MoviePeopleDirectedUpdateFieldInput!] @source(name: "peopleDirected", type: "[MoviePeopleDirectedUpdateFieldInput!]", subgraph: "Movies")
  peopleProduced: [MoviePeopleProducedUpdateFieldInput!] @source(name: "peopleProduced", type: "[MoviePeopleProducedUpdateFieldInput!]", subgraph: "Movies")
  peopleReviewed: [MoviePeopleReviewedUpdateFieldInput!] @source(name: "peopleReviewed", type: "[MoviePeopleReviewedUpdateFieldInput!]", subgraph: "Movies")
  peopleWrote: [MoviePeopleWroteUpdateFieldInput!] @source(name: "peopleWrote", type: "[MoviePeopleWroteUpdateFieldInput!]", subgraph: "Movies")
}

input MovieWhere @source(name: "MovieWhere", subgraph: "Movies") {
  released: BigInt @source(name: "released", type: "BigInt", subgraph: "Movies")
  released_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "released_NOT", type: "BigInt", subgraph: "Movies")
  released_IN: [BigInt!] @source(name: "released_IN", type: "[BigInt!]", subgraph: "Movies")
  released_NOT_IN: [BigInt!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "released_NOT_IN", type: "[BigInt!]", subgraph: "Movies")
  released_LT: BigInt @source(name: "released_LT", type: "BigInt", subgraph: "Movies")
  released_LTE: BigInt @source(name: "released_LTE", type: "BigInt", subgraph: "Movies")
  released_GT: BigInt @source(name: "released_GT", type: "BigInt", subgraph: "Movies")
  released_GTE: BigInt @source(name: "released_GTE", type: "BigInt", subgraph: "Movies")
  tagline: String @source(name: "tagline", type: "String", subgraph: "Movies")
  tagline_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "tagline_NOT", type: "String", subgraph: "Movies")
  tagline_IN: [String] @source(name: "tagline_IN", type: "[String]", subgraph: "Movies")
  tagline_NOT_IN: [String] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "tagline_NOT_IN", type: "[String]", subgraph: "Movies")
  tagline_CONTAINS: String @source(name: "tagline_CONTAINS", type: "String", subgraph: "Movies")
  tagline_STARTS_WITH: String @source(name: "tagline_STARTS_WITH", type: "String", subgraph: "Movies")
  tagline_ENDS_WITH: String @source(name: "tagline_ENDS_WITH", type: "String", subgraph: "Movies")
  tagline_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "tagline_NOT_CONTAINS", type: "String", subgraph: "Movies")
  tagline_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "tagline_NOT_STARTS_WITH", type: "String", subgraph: "Movies")
  tagline_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "tagline_NOT_ENDS_WITH", type: "String", subgraph: "Movies")
  title: String @source(name: "title", type: "String", subgraph: "Movies")
  title_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "title_NOT", type: "String", subgraph: "Movies")
  title_IN: [String!] @source(name: "title_IN", type: "[String!]", subgraph: "Movies")
  title_NOT_IN: [String!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "title_NOT_IN", type: "[String!]", subgraph: "Movies")
  title_CONTAINS: String @source(name: "title_CONTAINS", type: "String", subgraph: "Movies")
  title_STARTS_WITH: String @source(name: "title_STARTS_WITH", type: "String", subgraph: "Movies")
  title_ENDS_WITH: String @source(name: "title_ENDS_WITH", type: "String", subgraph: "Movies")
  title_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "title_NOT_CONTAINS", type: "String", subgraph: "Movies")
  title_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "title_NOT_STARTS_WITH", type: "String", subgraph: "Movies")
  title_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "title_NOT_ENDS_WITH", type: "String", subgraph: "Movies")
  votes: BigInt @source(name: "votes", type: "BigInt", subgraph: "Movies")
  votes_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "votes_NOT", type: "BigInt", subgraph: "Movies")
  votes_IN: [BigInt!] @source(name: "votes_IN", type: "[BigInt!]", subgraph: "Movies")
  votes_NOT_IN: [BigInt!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "votes_NOT_IN", type: "[BigInt!]", subgraph: "Movies")
  votes_LT: BigInt @source(name: "votes_LT", type: "BigInt", subgraph: "Movies")
  votes_LTE: BigInt @source(name: "votes_LTE", type: "BigInt", subgraph: "Movies")
  votes_GT: BigInt @source(name: "votes_GT", type: "BigInt", subgraph: "Movies")
  votes_GTE: BigInt @source(name: "votes_GTE", type: "BigInt", subgraph: "Movies")
  OR: [MovieWhere!] @source(name: "OR", type: "[MovieWhere!]", subgraph: "Movies")
  AND: [MovieWhere!] @source(name: "AND", type: "[MovieWhere!]", subgraph: "Movies")
  NOT: MovieWhere @source(name: "NOT", type: "MovieWhere", subgraph: "Movies")
  peopleActedIn: PersonWhere @deprecated(reason: "Use \`peopleActedIn_SOME\` instead.") @source(name: "peopleActedIn", type: "PersonWhere", subgraph: "Movies")
  peopleActedIn_NOT: PersonWhere @deprecated(reason: "Use \`peopleActedIn_NONE\` instead.") @source(name: "peopleActedIn_NOT", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where all of the related People match this filter"""
  peopleActedIn_ALL: PersonWhere @source(name: "peopleActedIn_ALL", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where none of the related People match this filter"""
  peopleActedIn_NONE: PersonWhere @source(name: "peopleActedIn_NONE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where one of the related People match this filter"""
  peopleActedIn_SINGLE: PersonWhere @source(name: "peopleActedIn_SINGLE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where some of the related People match this filter"""
  peopleActedIn_SOME: PersonWhere @source(name: "peopleActedIn_SOME", type: "PersonWhere", subgraph: "Movies")
  peopleActedInConnection: MoviePeopleActedInConnectionWhere @deprecated(reason: "Use \`peopleActedInConnection_SOME\` instead.") @source(name: "peopleActedInConnection", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  peopleActedInConnection_NOT: MoviePeopleActedInConnectionWhere @deprecated(reason: "Use \`peopleActedInConnection_NONE\` instead.") @source(name: "peopleActedInConnection_NOT", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  """
  Return Movies where all of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_ALL: MoviePeopleActedInConnectionWhere @source(name: "peopleActedInConnection_ALL", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  """
  Return Movies where none of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_NONE: MoviePeopleActedInConnectionWhere @source(name: "peopleActedInConnection_NONE", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  """
  Return Movies where one of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SINGLE: MoviePeopleActedInConnectionWhere @source(name: "peopleActedInConnection_SINGLE", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  """
  Return Movies where some of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SOME: MoviePeopleActedInConnectionWhere @source(name: "peopleActedInConnection_SOME", type: "MoviePeopleActedInConnectionWhere", subgraph: "Movies")
  peopleActedInAggregate: MoviePeopleActedInAggregateInput @source(name: "peopleActedInAggregate", type: "MoviePeopleActedInAggregateInput", subgraph: "Movies")
  peopleDirected: PersonWhere @deprecated(reason: "Use \`peopleDirected_SOME\` instead.") @source(name: "peopleDirected", type: "PersonWhere", subgraph: "Movies")
  peopleDirected_NOT: PersonWhere @deprecated(reason: "Use \`peopleDirected_NONE\` instead.") @source(name: "peopleDirected_NOT", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where all of the related People match this filter"""
  peopleDirected_ALL: PersonWhere @source(name: "peopleDirected_ALL", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where none of the related People match this filter"""
  peopleDirected_NONE: PersonWhere @source(name: "peopleDirected_NONE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where one of the related People match this filter"""
  peopleDirected_SINGLE: PersonWhere @source(name: "peopleDirected_SINGLE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where some of the related People match this filter"""
  peopleDirected_SOME: PersonWhere @source(name: "peopleDirected_SOME", type: "PersonWhere", subgraph: "Movies")
  peopleDirectedConnection: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Use \`peopleDirectedConnection_SOME\` instead.") @source(name: "peopleDirectedConnection", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  peopleDirectedConnection_NOT: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Use \`peopleDirectedConnection_NONE\` instead.") @source(name: "peopleDirectedConnection_NOT", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where all of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_ALL: MoviePeopleDirectedConnectionWhere @source(name: "peopleDirectedConnection_ALL", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where none of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_NONE: MoviePeopleDirectedConnectionWhere @source(name: "peopleDirectedConnection_NONE", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where one of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SINGLE: MoviePeopleDirectedConnectionWhere @source(name: "peopleDirectedConnection_SINGLE", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where some of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SOME: MoviePeopleDirectedConnectionWhere @source(name: "peopleDirectedConnection_SOME", type: "MoviePeopleDirectedConnectionWhere", subgraph: "Movies")
  peopleDirectedAggregate: MoviePeopleDirectedAggregateInput @source(name: "peopleDirectedAggregate", type: "MoviePeopleDirectedAggregateInput", subgraph: "Movies")
  peopleProduced: PersonWhere @deprecated(reason: "Use \`peopleProduced_SOME\` instead.") @source(name: "peopleProduced", type: "PersonWhere", subgraph: "Movies")
  peopleProduced_NOT: PersonWhere @deprecated(reason: "Use \`peopleProduced_NONE\` instead.") @source(name: "peopleProduced_NOT", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where all of the related People match this filter"""
  peopleProduced_ALL: PersonWhere @source(name: "peopleProduced_ALL", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where none of the related People match this filter"""
  peopleProduced_NONE: PersonWhere @source(name: "peopleProduced_NONE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where one of the related People match this filter"""
  peopleProduced_SINGLE: PersonWhere @source(name: "peopleProduced_SINGLE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where some of the related People match this filter"""
  peopleProduced_SOME: PersonWhere @source(name: "peopleProduced_SOME", type: "PersonWhere", subgraph: "Movies")
  peopleProducedConnection: MoviePeopleProducedConnectionWhere @deprecated(reason: "Use \`peopleProducedConnection_SOME\` instead.") @source(name: "peopleProducedConnection", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  peopleProducedConnection_NOT: MoviePeopleProducedConnectionWhere @deprecated(reason: "Use \`peopleProducedConnection_NONE\` instead.") @source(name: "peopleProducedConnection_NOT", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where all of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_ALL: MoviePeopleProducedConnectionWhere @source(name: "peopleProducedConnection_ALL", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where none of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_NONE: MoviePeopleProducedConnectionWhere @source(name: "peopleProducedConnection_NONE", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where one of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SINGLE: MoviePeopleProducedConnectionWhere @source(name: "peopleProducedConnection_SINGLE", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where some of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SOME: MoviePeopleProducedConnectionWhere @source(name: "peopleProducedConnection_SOME", type: "MoviePeopleProducedConnectionWhere", subgraph: "Movies")
  peopleProducedAggregate: MoviePeopleProducedAggregateInput @source(name: "peopleProducedAggregate", type: "MoviePeopleProducedAggregateInput", subgraph: "Movies")
  peopleReviewed: PersonWhere @deprecated(reason: "Use \`peopleReviewed_SOME\` instead.") @source(name: "peopleReviewed", type: "PersonWhere", subgraph: "Movies")
  peopleReviewed_NOT: PersonWhere @deprecated(reason: "Use \`peopleReviewed_NONE\` instead.") @source(name: "peopleReviewed_NOT", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where all of the related People match this filter"""
  peopleReviewed_ALL: PersonWhere @source(name: "peopleReviewed_ALL", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where none of the related People match this filter"""
  peopleReviewed_NONE: PersonWhere @source(name: "peopleReviewed_NONE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where one of the related People match this filter"""
  peopleReviewed_SINGLE: PersonWhere @source(name: "peopleReviewed_SINGLE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where some of the related People match this filter"""
  peopleReviewed_SOME: PersonWhere @source(name: "peopleReviewed_SOME", type: "PersonWhere", subgraph: "Movies")
  peopleReviewedConnection: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Use \`peopleReviewedConnection_SOME\` instead.") @source(name: "peopleReviewedConnection", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  peopleReviewedConnection_NOT: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Use \`peopleReviewedConnection_NONE\` instead.") @source(name: "peopleReviewedConnection_NOT", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where all of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_ALL: MoviePeopleReviewedConnectionWhere @source(name: "peopleReviewedConnection_ALL", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where none of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_NONE: MoviePeopleReviewedConnectionWhere @source(name: "peopleReviewedConnection_NONE", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where one of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SINGLE: MoviePeopleReviewedConnectionWhere @source(name: "peopleReviewedConnection_SINGLE", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  """
  Return Movies where some of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SOME: MoviePeopleReviewedConnectionWhere @source(name: "peopleReviewedConnection_SOME", type: "MoviePeopleReviewedConnectionWhere", subgraph: "Movies")
  peopleReviewedAggregate: MoviePeopleReviewedAggregateInput @source(name: "peopleReviewedAggregate", type: "MoviePeopleReviewedAggregateInput", subgraph: "Movies")
  peopleWrote: PersonWhere @deprecated(reason: "Use \`peopleWrote_SOME\` instead.") @source(name: "peopleWrote", type: "PersonWhere", subgraph: "Movies")
  peopleWrote_NOT: PersonWhere @deprecated(reason: "Use \`peopleWrote_NONE\` instead.") @source(name: "peopleWrote_NOT", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where all of the related People match this filter"""
  peopleWrote_ALL: PersonWhere @source(name: "peopleWrote_ALL", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where none of the related People match this filter"""
  peopleWrote_NONE: PersonWhere @source(name: "peopleWrote_NONE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where one of the related People match this filter"""
  peopleWrote_SINGLE: PersonWhere @source(name: "peopleWrote_SINGLE", type: "PersonWhere", subgraph: "Movies")
  """Return Movies where some of the related People match this filter"""
  peopleWrote_SOME: PersonWhere @source(name: "peopleWrote_SOME", type: "PersonWhere", subgraph: "Movies")
  peopleWroteConnection: MoviePeopleWroteConnectionWhere @deprecated(reason: "Use \`peopleWroteConnection_SOME\` instead.") @source(name: "peopleWroteConnection", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  peopleWroteConnection_NOT: MoviePeopleWroteConnectionWhere @deprecated(reason: "Use \`peopleWroteConnection_NONE\` instead.") @source(name: "peopleWroteConnection_NOT", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  """
  Return Movies where all of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_ALL: MoviePeopleWroteConnectionWhere @source(name: "peopleWroteConnection_ALL", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  """
  Return Movies where none of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_NONE: MoviePeopleWroteConnectionWhere @source(name: "peopleWroteConnection_NONE", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  """
  Return Movies where one of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SINGLE: MoviePeopleWroteConnectionWhere @source(name: "peopleWroteConnection_SINGLE", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  """
  Return Movies where some of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SOME: MoviePeopleWroteConnectionWhere @source(name: "peopleWroteConnection_SOME", type: "MoviePeopleWroteConnectionWhere", subgraph: "Movies")
  peopleWroteAggregate: MoviePeopleWroteAggregateInput @source(name: "peopleWroteAggregate", type: "MoviePeopleWroteAggregateInput", subgraph: "Movies")
}

input PersonActedInMoviesAggregateInput @source(name: "PersonActedInMoviesAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [PersonActedInMoviesAggregateInput!] @source(name: "AND", type: "[PersonActedInMoviesAggregateInput!]", subgraph: "Movies")
  OR: [PersonActedInMoviesAggregateInput!] @source(name: "OR", type: "[PersonActedInMoviesAggregateInput!]", subgraph: "Movies")
  NOT: PersonActedInMoviesAggregateInput @source(name: "NOT", type: "PersonActedInMoviesAggregateInput", subgraph: "Movies")
  node: PersonActedInMoviesNodeAggregationWhereInput @source(name: "node", type: "PersonActedInMoviesNodeAggregationWhereInput", subgraph: "Movies")
}

input PersonActedInMoviesConnectFieldInput @source(name: "PersonActedInMoviesConnectFieldInput", subgraph: "Movies") {
  edge: ActedInPropertiesCreateInput! @source(name: "edge", type: "ActedInPropertiesCreateInput!", subgraph: "Movies")
  where: MovieConnectWhere @source(name: "where", type: "MovieConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [MovieConnectInput!] @source(name: "connect", type: "[MovieConnectInput!]", subgraph: "Movies")
}

input PersonActedInMoviesConnectionSort @source(name: "PersonActedInMoviesConnectionSort", subgraph: "Movies") {
  node: MovieSort @source(name: "node", type: "MovieSort", subgraph: "Movies")
  edge: ActedInPropertiesSort @source(name: "edge", type: "ActedInPropertiesSort", subgraph: "Movies")
}

input PersonActedInMoviesConnectionWhere @source(name: "PersonActedInMoviesConnectionWhere", subgraph: "Movies") {
  AND: [PersonActedInMoviesConnectionWhere!] @source(name: "AND", type: "[PersonActedInMoviesConnectionWhere!]", subgraph: "Movies")
  OR: [PersonActedInMoviesConnectionWhere!] @source(name: "OR", type: "[PersonActedInMoviesConnectionWhere!]", subgraph: "Movies")
  NOT: PersonActedInMoviesConnectionWhere @source(name: "NOT", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  node: MovieWhere @source(name: "node", type: "MovieWhere", subgraph: "Movies")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "MovieWhere", subgraph: "Movies")
  edge: ActedInPropertiesWhere @source(name: "edge", type: "ActedInPropertiesWhere", subgraph: "Movies")
  edge_NOT: ActedInPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "edge_NOT", type: "ActedInPropertiesWhere", subgraph: "Movies")
}

input PersonActedInMoviesCreateFieldInput @source(name: "PersonActedInMoviesCreateFieldInput", subgraph: "Movies") {
  edge: ActedInPropertiesCreateInput! @source(name: "edge", type: "ActedInPropertiesCreateInput!", subgraph: "Movies")
  node: MovieCreateInput! @source(name: "node", type: "MovieCreateInput!", subgraph: "Movies")
}

input PersonActedInMoviesDeleteFieldInput @source(name: "PersonActedInMoviesDeleteFieldInput", subgraph: "Movies") {
  where: PersonActedInMoviesConnectionWhere @source(name: "where", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  delete: MovieDeleteInput @source(name: "delete", type: "MovieDeleteInput", subgraph: "Movies")
}

input PersonActedInMoviesDisconnectFieldInput @source(name: "PersonActedInMoviesDisconnectFieldInput", subgraph: "Movies") {
  where: PersonActedInMoviesConnectionWhere @source(name: "where", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  disconnect: MovieDisconnectInput @source(name: "disconnect", type: "MovieDisconnectInput", subgraph: "Movies")
}

input PersonActedInMoviesFieldInput @source(name: "PersonActedInMoviesFieldInput", subgraph: "Movies") {
  connect: [PersonActedInMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonActedInMoviesConnectFieldInput!]", subgraph: "Movies")
  create: [PersonActedInMoviesCreateFieldInput!] @source(name: "create", type: "[PersonActedInMoviesCreateFieldInput!]", subgraph: "Movies")
}

input PersonActedInMoviesNodeAggregationWhereInput @source(name: "PersonActedInMoviesNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [PersonActedInMoviesNodeAggregationWhereInput!] @source(name: "AND", type: "[PersonActedInMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [PersonActedInMoviesNodeAggregationWhereInput!] @source(name: "OR", type: "[PersonActedInMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: PersonActedInMoviesNodeAggregationWhereInput @source(name: "NOT", type: "PersonActedInMoviesNodeAggregationWhereInput", subgraph: "Movies")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MIN_EQUAL: BigInt @source(name: "released_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MAX_EQUAL: BigInt @source(name: "released_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  released_SUM_EQUAL: BigInt @source(name: "released_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_EQUAL: BigInt @source(name: "released_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GT", type: "BigInt", subgraph: "Movies")
  released_MIN_GT: BigInt @source(name: "released_MIN_GT", type: "BigInt", subgraph: "Movies")
  released_MAX_GT: BigInt @source(name: "released_MAX_GT", type: "BigInt", subgraph: "Movies")
  released_SUM_GT: BigInt @source(name: "released_SUM_GT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GT: BigInt @source(name: "released_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GTE", type: "BigInt", subgraph: "Movies")
  released_MIN_GTE: BigInt @source(name: "released_MIN_GTE", type: "BigInt", subgraph: "Movies")
  released_MAX_GTE: BigInt @source(name: "released_MAX_GTE", type: "BigInt", subgraph: "Movies")
  released_SUM_GTE: BigInt @source(name: "released_SUM_GTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GTE: BigInt @source(name: "released_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LT", type: "BigInt", subgraph: "Movies")
  released_MIN_LT: BigInt @source(name: "released_MIN_LT", type: "BigInt", subgraph: "Movies")
  released_MAX_LT: BigInt @source(name: "released_MAX_LT", type: "BigInt", subgraph: "Movies")
  released_SUM_LT: BigInt @source(name: "released_SUM_LT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LT: BigInt @source(name: "released_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LTE", type: "BigInt", subgraph: "Movies")
  released_MIN_LTE: BigInt @source(name: "released_MIN_LTE", type: "BigInt", subgraph: "Movies")
  released_MAX_LTE: BigInt @source(name: "released_MAX_LTE", type: "BigInt", subgraph: "Movies")
  released_SUM_LTE: BigInt @source(name: "released_SUM_LTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LTE: BigInt @source(name: "released_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_EQUAL", type: "String", subgraph: "Movies")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GT: Float @source(name: "tagline_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GT: Int @source(name: "tagline_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GT: Int @source(name: "tagline_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GTE: Float @source(name: "tagline_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GTE: Int @source(name: "tagline_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GTE: Int @source(name: "tagline_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LT: Float @source(name: "tagline_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LT: Int @source(name: "tagline_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LT: Int @source(name: "tagline_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LTE: Float @source(name: "tagline_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LTE: Int @source(name: "tagline_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LTE: Int @source(name: "tagline_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_EQUAL", type: "String", subgraph: "Movies")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_EQUAL: Float @source(name: "title_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_EQUAL: Int @source(name: "title_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_EQUAL: Int @source(name: "title_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GT: Float @source(name: "title_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GT: Int @source(name: "title_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GT: Int @source(name: "title_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GTE: Float @source(name: "title_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GTE: Int @source(name: "title_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GTE: Int @source(name: "title_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LT: Float @source(name: "title_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LT: Int @source(name: "title_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LT: Int @source(name: "title_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LTE: Float @source(name: "title_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LTE: Int @source(name: "title_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LTE: Int @source(name: "title_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MIN_EQUAL: BigInt @source(name: "votes_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MAX_EQUAL: BigInt @source(name: "votes_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_SUM_EQUAL: BigInt @source(name: "votes_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_EQUAL: BigInt @source(name: "votes_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GT", type: "BigInt", subgraph: "Movies")
  votes_MIN_GT: BigInt @source(name: "votes_MIN_GT", type: "BigInt", subgraph: "Movies")
  votes_MAX_GT: BigInt @source(name: "votes_MAX_GT", type: "BigInt", subgraph: "Movies")
  votes_SUM_GT: BigInt @source(name: "votes_SUM_GT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GT: BigInt @source(name: "votes_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_GTE: BigInt @source(name: "votes_MIN_GTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_GTE: BigInt @source(name: "votes_MAX_GTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_GTE: BigInt @source(name: "votes_SUM_GTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GTE: BigInt @source(name: "votes_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LT", type: "BigInt", subgraph: "Movies")
  votes_MIN_LT: BigInt @source(name: "votes_MIN_LT", type: "BigInt", subgraph: "Movies")
  votes_MAX_LT: BigInt @source(name: "votes_MAX_LT", type: "BigInt", subgraph: "Movies")
  votes_SUM_LT: BigInt @source(name: "votes_SUM_LT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LT: BigInt @source(name: "votes_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_LTE: BigInt @source(name: "votes_MIN_LTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_LTE: BigInt @source(name: "votes_MAX_LTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_LTE: BigInt @source(name: "votes_SUM_LTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LTE: BigInt @source(name: "votes_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
}

input PersonActedInMoviesUpdateConnectionInput @source(name: "PersonActedInMoviesUpdateConnectionInput", subgraph: "Movies") {
  node: MovieUpdateInput @source(name: "node", type: "MovieUpdateInput", subgraph: "Movies")
  edge: ActedInPropertiesUpdateInput @source(name: "edge", type: "ActedInPropertiesUpdateInput", subgraph: "Movies")
}

input PersonActedInMoviesUpdateFieldInput @source(name: "PersonActedInMoviesUpdateFieldInput", subgraph: "Movies") {
  where: PersonActedInMoviesConnectionWhere @source(name: "where", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  connect: [PersonActedInMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonActedInMoviesConnectFieldInput!]", subgraph: "Movies")
  disconnect: [PersonActedInMoviesDisconnectFieldInput!] @source(name: "disconnect", type: "[PersonActedInMoviesDisconnectFieldInput!]", subgraph: "Movies")
  create: [PersonActedInMoviesCreateFieldInput!] @source(name: "create", type: "[PersonActedInMoviesCreateFieldInput!]", subgraph: "Movies")
  update: PersonActedInMoviesUpdateConnectionInput @source(name: "update", type: "PersonActedInMoviesUpdateConnectionInput", subgraph: "Movies")
  delete: [PersonActedInMoviesDeleteFieldInput!] @source(name: "delete", type: "[PersonActedInMoviesDeleteFieldInput!]", subgraph: "Movies")
}

input PersonConnectInput @source(name: "PersonConnectInput", subgraph: "Movies") {
  actedInMovies: [PersonActedInMoviesConnectFieldInput!] @source(name: "actedInMovies", type: "[PersonActedInMoviesConnectFieldInput!]", subgraph: "Movies")
  directedMovies: [PersonDirectedMoviesConnectFieldInput!] @source(name: "directedMovies", type: "[PersonDirectedMoviesConnectFieldInput!]", subgraph: "Movies")
  followsPeople: [PersonFollowsPeopleConnectFieldInput!] @source(name: "followsPeople", type: "[PersonFollowsPeopleConnectFieldInput!]", subgraph: "Movies")
  peopleFollows: [PersonPeopleFollowsConnectFieldInput!] @source(name: "peopleFollows", type: "[PersonPeopleFollowsConnectFieldInput!]", subgraph: "Movies")
  producedMovies: [PersonProducedMoviesConnectFieldInput!] @source(name: "producedMovies", type: "[PersonProducedMoviesConnectFieldInput!]", subgraph: "Movies")
  reviewedMovies: [PersonReviewedMoviesConnectFieldInput!] @source(name: "reviewedMovies", type: "[PersonReviewedMoviesConnectFieldInput!]", subgraph: "Movies")
  wroteMovies: [PersonWroteMoviesConnectFieldInput!] @source(name: "wroteMovies", type: "[PersonWroteMoviesConnectFieldInput!]", subgraph: "Movies")
}

input PersonConnectWhere @source(name: "PersonConnectWhere", subgraph: "Movies") {
  node: PersonWhere! @source(name: "node", type: "PersonWhere!", subgraph: "Movies")
}

input PersonCreateInput @source(name: "PersonCreateInput", subgraph: "Movies") {
  born: BigInt @source(name: "born", type: "BigInt", subgraph: "Movies")
  name: String! @source(name: "name", type: "String!", subgraph: "Movies")
  actedInMovies: PersonActedInMoviesFieldInput @source(name: "actedInMovies", type: "PersonActedInMoviesFieldInput", subgraph: "Movies")
  directedMovies: PersonDirectedMoviesFieldInput @source(name: "directedMovies", type: "PersonDirectedMoviesFieldInput", subgraph: "Movies")
  followsPeople: PersonFollowsPeopleFieldInput @source(name: "followsPeople", type: "PersonFollowsPeopleFieldInput", subgraph: "Movies")
  peopleFollows: PersonPeopleFollowsFieldInput @source(name: "peopleFollows", type: "PersonPeopleFollowsFieldInput", subgraph: "Movies")
  producedMovies: PersonProducedMoviesFieldInput @source(name: "producedMovies", type: "PersonProducedMoviesFieldInput", subgraph: "Movies")
  reviewedMovies: PersonReviewedMoviesFieldInput @source(name: "reviewedMovies", type: "PersonReviewedMoviesFieldInput", subgraph: "Movies")
  wroteMovies: PersonWroteMoviesFieldInput @source(name: "wroteMovies", type: "PersonWroteMoviesFieldInput", subgraph: "Movies")
}

input PersonDeleteInput @source(name: "PersonDeleteInput", subgraph: "Movies") {
  actedInMovies: [PersonActedInMoviesDeleteFieldInput!] @source(name: "actedInMovies", type: "[PersonActedInMoviesDeleteFieldInput!]", subgraph: "Movies")
  directedMovies: [PersonDirectedMoviesDeleteFieldInput!] @source(name: "directedMovies", type: "[PersonDirectedMoviesDeleteFieldInput!]", subgraph: "Movies")
  followsPeople: [PersonFollowsPeopleDeleteFieldInput!] @source(name: "followsPeople", type: "[PersonFollowsPeopleDeleteFieldInput!]", subgraph: "Movies")
  peopleFollows: [PersonPeopleFollowsDeleteFieldInput!] @source(name: "peopleFollows", type: "[PersonPeopleFollowsDeleteFieldInput!]", subgraph: "Movies")
  producedMovies: [PersonProducedMoviesDeleteFieldInput!] @source(name: "producedMovies", type: "[PersonProducedMoviesDeleteFieldInput!]", subgraph: "Movies")
  reviewedMovies: [PersonReviewedMoviesDeleteFieldInput!] @source(name: "reviewedMovies", type: "[PersonReviewedMoviesDeleteFieldInput!]", subgraph: "Movies")
  wroteMovies: [PersonWroteMoviesDeleteFieldInput!] @source(name: "wroteMovies", type: "[PersonWroteMoviesDeleteFieldInput!]", subgraph: "Movies")
}

input PersonDirectedMoviesAggregateInput @source(name: "PersonDirectedMoviesAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [PersonDirectedMoviesAggregateInput!] @source(name: "AND", type: "[PersonDirectedMoviesAggregateInput!]", subgraph: "Movies")
  OR: [PersonDirectedMoviesAggregateInput!] @source(name: "OR", type: "[PersonDirectedMoviesAggregateInput!]", subgraph: "Movies")
  NOT: PersonDirectedMoviesAggregateInput @source(name: "NOT", type: "PersonDirectedMoviesAggregateInput", subgraph: "Movies")
  node: PersonDirectedMoviesNodeAggregationWhereInput @source(name: "node", type: "PersonDirectedMoviesNodeAggregationWhereInput", subgraph: "Movies")
}

input PersonDirectedMoviesConnectFieldInput @source(name: "PersonDirectedMoviesConnectFieldInput", subgraph: "Movies") {
  where: MovieConnectWhere @source(name: "where", type: "MovieConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [MovieConnectInput!] @source(name: "connect", type: "[MovieConnectInput!]", subgraph: "Movies")
}

input PersonDirectedMoviesConnectionSort @source(name: "PersonDirectedMoviesConnectionSort", subgraph: "Movies") {
  node: MovieSort @source(name: "node", type: "MovieSort", subgraph: "Movies")
}

input PersonDirectedMoviesConnectionWhere @source(name: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies") {
  AND: [PersonDirectedMoviesConnectionWhere!] @source(name: "AND", type: "[PersonDirectedMoviesConnectionWhere!]", subgraph: "Movies")
  OR: [PersonDirectedMoviesConnectionWhere!] @source(name: "OR", type: "[PersonDirectedMoviesConnectionWhere!]", subgraph: "Movies")
  NOT: PersonDirectedMoviesConnectionWhere @source(name: "NOT", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  node: MovieWhere @source(name: "node", type: "MovieWhere", subgraph: "Movies")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "MovieWhere", subgraph: "Movies")
}

input PersonDirectedMoviesCreateFieldInput @source(name: "PersonDirectedMoviesCreateFieldInput", subgraph: "Movies") {
  node: MovieCreateInput! @source(name: "node", type: "MovieCreateInput!", subgraph: "Movies")
}

input PersonDirectedMoviesDeleteFieldInput @source(name: "PersonDirectedMoviesDeleteFieldInput", subgraph: "Movies") {
  where: PersonDirectedMoviesConnectionWhere @source(name: "where", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  delete: MovieDeleteInput @source(name: "delete", type: "MovieDeleteInput", subgraph: "Movies")
}

input PersonDirectedMoviesDisconnectFieldInput @source(name: "PersonDirectedMoviesDisconnectFieldInput", subgraph: "Movies") {
  where: PersonDirectedMoviesConnectionWhere @source(name: "where", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  disconnect: MovieDisconnectInput @source(name: "disconnect", type: "MovieDisconnectInput", subgraph: "Movies")
}

input PersonDirectedMoviesFieldInput @source(name: "PersonDirectedMoviesFieldInput", subgraph: "Movies") {
  connect: [PersonDirectedMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonDirectedMoviesConnectFieldInput!]", subgraph: "Movies")
  create: [PersonDirectedMoviesCreateFieldInput!] @source(name: "create", type: "[PersonDirectedMoviesCreateFieldInput!]", subgraph: "Movies")
}

input PersonDirectedMoviesNodeAggregationWhereInput @source(name: "PersonDirectedMoviesNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [PersonDirectedMoviesNodeAggregationWhereInput!] @source(name: "AND", type: "[PersonDirectedMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [PersonDirectedMoviesNodeAggregationWhereInput!] @source(name: "OR", type: "[PersonDirectedMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: PersonDirectedMoviesNodeAggregationWhereInput @source(name: "NOT", type: "PersonDirectedMoviesNodeAggregationWhereInput", subgraph: "Movies")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MIN_EQUAL: BigInt @source(name: "released_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MAX_EQUAL: BigInt @source(name: "released_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  released_SUM_EQUAL: BigInt @source(name: "released_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_EQUAL: BigInt @source(name: "released_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GT", type: "BigInt", subgraph: "Movies")
  released_MIN_GT: BigInt @source(name: "released_MIN_GT", type: "BigInt", subgraph: "Movies")
  released_MAX_GT: BigInt @source(name: "released_MAX_GT", type: "BigInt", subgraph: "Movies")
  released_SUM_GT: BigInt @source(name: "released_SUM_GT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GT: BigInt @source(name: "released_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GTE", type: "BigInt", subgraph: "Movies")
  released_MIN_GTE: BigInt @source(name: "released_MIN_GTE", type: "BigInt", subgraph: "Movies")
  released_MAX_GTE: BigInt @source(name: "released_MAX_GTE", type: "BigInt", subgraph: "Movies")
  released_SUM_GTE: BigInt @source(name: "released_SUM_GTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GTE: BigInt @source(name: "released_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LT", type: "BigInt", subgraph: "Movies")
  released_MIN_LT: BigInt @source(name: "released_MIN_LT", type: "BigInt", subgraph: "Movies")
  released_MAX_LT: BigInt @source(name: "released_MAX_LT", type: "BigInt", subgraph: "Movies")
  released_SUM_LT: BigInt @source(name: "released_SUM_LT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LT: BigInt @source(name: "released_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LTE", type: "BigInt", subgraph: "Movies")
  released_MIN_LTE: BigInt @source(name: "released_MIN_LTE", type: "BigInt", subgraph: "Movies")
  released_MAX_LTE: BigInt @source(name: "released_MAX_LTE", type: "BigInt", subgraph: "Movies")
  released_SUM_LTE: BigInt @source(name: "released_SUM_LTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LTE: BigInt @source(name: "released_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_EQUAL", type: "String", subgraph: "Movies")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GT: Float @source(name: "tagline_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GT: Int @source(name: "tagline_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GT: Int @source(name: "tagline_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GTE: Float @source(name: "tagline_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GTE: Int @source(name: "tagline_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GTE: Int @source(name: "tagline_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LT: Float @source(name: "tagline_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LT: Int @source(name: "tagline_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LT: Int @source(name: "tagline_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LTE: Float @source(name: "tagline_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LTE: Int @source(name: "tagline_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LTE: Int @source(name: "tagline_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_EQUAL", type: "String", subgraph: "Movies")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_EQUAL: Float @source(name: "title_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_EQUAL: Int @source(name: "title_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_EQUAL: Int @source(name: "title_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GT: Float @source(name: "title_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GT: Int @source(name: "title_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GT: Int @source(name: "title_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GTE: Float @source(name: "title_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GTE: Int @source(name: "title_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GTE: Int @source(name: "title_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LT: Float @source(name: "title_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LT: Int @source(name: "title_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LT: Int @source(name: "title_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LTE: Float @source(name: "title_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LTE: Int @source(name: "title_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LTE: Int @source(name: "title_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MIN_EQUAL: BigInt @source(name: "votes_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MAX_EQUAL: BigInt @source(name: "votes_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_SUM_EQUAL: BigInt @source(name: "votes_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_EQUAL: BigInt @source(name: "votes_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GT", type: "BigInt", subgraph: "Movies")
  votes_MIN_GT: BigInt @source(name: "votes_MIN_GT", type: "BigInt", subgraph: "Movies")
  votes_MAX_GT: BigInt @source(name: "votes_MAX_GT", type: "BigInt", subgraph: "Movies")
  votes_SUM_GT: BigInt @source(name: "votes_SUM_GT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GT: BigInt @source(name: "votes_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_GTE: BigInt @source(name: "votes_MIN_GTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_GTE: BigInt @source(name: "votes_MAX_GTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_GTE: BigInt @source(name: "votes_SUM_GTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GTE: BigInt @source(name: "votes_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LT", type: "BigInt", subgraph: "Movies")
  votes_MIN_LT: BigInt @source(name: "votes_MIN_LT", type: "BigInt", subgraph: "Movies")
  votes_MAX_LT: BigInt @source(name: "votes_MAX_LT", type: "BigInt", subgraph: "Movies")
  votes_SUM_LT: BigInt @source(name: "votes_SUM_LT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LT: BigInt @source(name: "votes_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_LTE: BigInt @source(name: "votes_MIN_LTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_LTE: BigInt @source(name: "votes_MAX_LTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_LTE: BigInt @source(name: "votes_SUM_LTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LTE: BigInt @source(name: "votes_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
}

input PersonDirectedMoviesUpdateConnectionInput @source(name: "PersonDirectedMoviesUpdateConnectionInput", subgraph: "Movies") {
  node: MovieUpdateInput @source(name: "node", type: "MovieUpdateInput", subgraph: "Movies")
}

input PersonDirectedMoviesUpdateFieldInput @source(name: "PersonDirectedMoviesUpdateFieldInput", subgraph: "Movies") {
  where: PersonDirectedMoviesConnectionWhere @source(name: "where", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  connect: [PersonDirectedMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonDirectedMoviesConnectFieldInput!]", subgraph: "Movies")
  disconnect: [PersonDirectedMoviesDisconnectFieldInput!] @source(name: "disconnect", type: "[PersonDirectedMoviesDisconnectFieldInput!]", subgraph: "Movies")
  create: [PersonDirectedMoviesCreateFieldInput!] @source(name: "create", type: "[PersonDirectedMoviesCreateFieldInput!]", subgraph: "Movies")
  update: PersonDirectedMoviesUpdateConnectionInput @source(name: "update", type: "PersonDirectedMoviesUpdateConnectionInput", subgraph: "Movies")
  delete: [PersonDirectedMoviesDeleteFieldInput!] @source(name: "delete", type: "[PersonDirectedMoviesDeleteFieldInput!]", subgraph: "Movies")
}

input PersonDisconnectInput @source(name: "PersonDisconnectInput", subgraph: "Movies") {
  actedInMovies: [PersonActedInMoviesDisconnectFieldInput!] @source(name: "actedInMovies", type: "[PersonActedInMoviesDisconnectFieldInput!]", subgraph: "Movies")
  directedMovies: [PersonDirectedMoviesDisconnectFieldInput!] @source(name: "directedMovies", type: "[PersonDirectedMoviesDisconnectFieldInput!]", subgraph: "Movies")
  followsPeople: [PersonFollowsPeopleDisconnectFieldInput!] @source(name: "followsPeople", type: "[PersonFollowsPeopleDisconnectFieldInput!]", subgraph: "Movies")
  peopleFollows: [PersonPeopleFollowsDisconnectFieldInput!] @source(name: "peopleFollows", type: "[PersonPeopleFollowsDisconnectFieldInput!]", subgraph: "Movies")
  producedMovies: [PersonProducedMoviesDisconnectFieldInput!] @source(name: "producedMovies", type: "[PersonProducedMoviesDisconnectFieldInput!]", subgraph: "Movies")
  reviewedMovies: [PersonReviewedMoviesDisconnectFieldInput!] @source(name: "reviewedMovies", type: "[PersonReviewedMoviesDisconnectFieldInput!]", subgraph: "Movies")
  wroteMovies: [PersonWroteMoviesDisconnectFieldInput!] @source(name: "wroteMovies", type: "[PersonWroteMoviesDisconnectFieldInput!]", subgraph: "Movies")
}

input PersonFollowsPeopleAggregateInput @source(name: "PersonFollowsPeopleAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [PersonFollowsPeopleAggregateInput!] @source(name: "AND", type: "[PersonFollowsPeopleAggregateInput!]", subgraph: "Movies")
  OR: [PersonFollowsPeopleAggregateInput!] @source(name: "OR", type: "[PersonFollowsPeopleAggregateInput!]", subgraph: "Movies")
  NOT: PersonFollowsPeopleAggregateInput @source(name: "NOT", type: "PersonFollowsPeopleAggregateInput", subgraph: "Movies")
  node: PersonFollowsPeopleNodeAggregationWhereInput @source(name: "node", type: "PersonFollowsPeopleNodeAggregationWhereInput", subgraph: "Movies")
}

input PersonFollowsPeopleConnectFieldInput @source(name: "PersonFollowsPeopleConnectFieldInput", subgraph: "Movies") {
  where: PersonConnectWhere @source(name: "where", type: "PersonConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [PersonConnectInput!] @source(name: "connect", type: "[PersonConnectInput!]", subgraph: "Movies")
}

input PersonFollowsPeopleConnectionSort @source(name: "PersonFollowsPeopleConnectionSort", subgraph: "Movies") {
  node: PersonSort @source(name: "node", type: "PersonSort", subgraph: "Movies")
}

input PersonFollowsPeopleConnectionWhere @source(name: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies") {
  AND: [PersonFollowsPeopleConnectionWhere!] @source(name: "AND", type: "[PersonFollowsPeopleConnectionWhere!]", subgraph: "Movies")
  OR: [PersonFollowsPeopleConnectionWhere!] @source(name: "OR", type: "[PersonFollowsPeopleConnectionWhere!]", subgraph: "Movies")
  NOT: PersonFollowsPeopleConnectionWhere @source(name: "NOT", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  node: PersonWhere @source(name: "node", type: "PersonWhere", subgraph: "Movies")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "PersonWhere", subgraph: "Movies")
}

input PersonFollowsPeopleCreateFieldInput @source(name: "PersonFollowsPeopleCreateFieldInput", subgraph: "Movies") {
  node: PersonCreateInput! @source(name: "node", type: "PersonCreateInput!", subgraph: "Movies")
}

input PersonFollowsPeopleDeleteFieldInput @source(name: "PersonFollowsPeopleDeleteFieldInput", subgraph: "Movies") {
  where: PersonFollowsPeopleConnectionWhere @source(name: "where", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")
}

input PersonFollowsPeopleDisconnectFieldInput @source(name: "PersonFollowsPeopleDisconnectFieldInput", subgraph: "Movies") {
  where: PersonFollowsPeopleConnectionWhere @source(name: "where", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies")
}

input PersonFollowsPeopleFieldInput @source(name: "PersonFollowsPeopleFieldInput", subgraph: "Movies") {
  connect: [PersonFollowsPeopleConnectFieldInput!] @source(name: "connect", type: "[PersonFollowsPeopleConnectFieldInput!]", subgraph: "Movies")
  create: [PersonFollowsPeopleCreateFieldInput!] @source(name: "create", type: "[PersonFollowsPeopleCreateFieldInput!]", subgraph: "Movies")
}

input PersonFollowsPeopleNodeAggregationWhereInput @source(name: "PersonFollowsPeopleNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [PersonFollowsPeopleNodeAggregationWhereInput!] @source(name: "AND", type: "[PersonFollowsPeopleNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [PersonFollowsPeopleNodeAggregationWhereInput!] @source(name: "OR", type: "[PersonFollowsPeopleNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: PersonFollowsPeopleNodeAggregationWhereInput @source(name: "NOT", type: "PersonFollowsPeopleNodeAggregationWhereInput", subgraph: "Movies")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MIN_EQUAL: BigInt @source(name: "born_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MAX_EQUAL: BigInt @source(name: "born_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  born_SUM_EQUAL: BigInt @source(name: "born_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_EQUAL: BigInt @source(name: "born_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_MIN_GT: BigInt @source(name: "born_MIN_GT", type: "BigInt", subgraph: "Movies")
  born_MAX_GT: BigInt @source(name: "born_MAX_GT", type: "BigInt", subgraph: "Movies")
  born_SUM_GT: BigInt @source(name: "born_SUM_GT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GT: BigInt @source(name: "born_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  born_MIN_GTE: BigInt @source(name: "born_MIN_GTE", type: "BigInt", subgraph: "Movies")
  born_MAX_GTE: BigInt @source(name: "born_MAX_GTE", type: "BigInt", subgraph: "Movies")
  born_SUM_GTE: BigInt @source(name: "born_SUM_GTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GTE: BigInt @source(name: "born_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_MIN_LT: BigInt @source(name: "born_MIN_LT", type: "BigInt", subgraph: "Movies")
  born_MAX_LT: BigInt @source(name: "born_MAX_LT", type: "BigInt", subgraph: "Movies")
  born_SUM_LT: BigInt @source(name: "born_SUM_LT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LT: BigInt @source(name: "born_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_MIN_LTE: BigInt @source(name: "born_MIN_LTE", type: "BigInt", subgraph: "Movies")
  born_MAX_LTE: BigInt @source(name: "born_MAX_LTE", type: "BigInt", subgraph: "Movies")
  born_SUM_LTE: BigInt @source(name: "born_SUM_LTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LTE: BigInt @source(name: "born_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_EQUAL", type: "String", subgraph: "Movies")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_EQUAL: Float @source(name: "name_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_EQUAL: Int @source(name: "name_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_EQUAL: Int @source(name: "name_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GT: Float @source(name: "name_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GT: Int @source(name: "name_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GT: Int @source(name: "name_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GTE: Float @source(name: "name_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GTE: Int @source(name: "name_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GTE: Int @source(name: "name_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LT: Float @source(name: "name_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LT: Int @source(name: "name_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LT: Int @source(name: "name_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LTE: Float @source(name: "name_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LTE: Int @source(name: "name_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LTE: Int @source(name: "name_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input PersonFollowsPeopleUpdateConnectionInput @source(name: "PersonFollowsPeopleUpdateConnectionInput", subgraph: "Movies") {
  node: PersonUpdateInput @source(name: "node", type: "PersonUpdateInput", subgraph: "Movies")
}

input PersonFollowsPeopleUpdateFieldInput @source(name: "PersonFollowsPeopleUpdateFieldInput", subgraph: "Movies") {
  where: PersonFollowsPeopleConnectionWhere @source(name: "where", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  connect: [PersonFollowsPeopleConnectFieldInput!] @source(name: "connect", type: "[PersonFollowsPeopleConnectFieldInput!]", subgraph: "Movies")
  disconnect: [PersonFollowsPeopleDisconnectFieldInput!] @source(name: "disconnect", type: "[PersonFollowsPeopleDisconnectFieldInput!]", subgraph: "Movies")
  create: [PersonFollowsPeopleCreateFieldInput!] @source(name: "create", type: "[PersonFollowsPeopleCreateFieldInput!]", subgraph: "Movies")
  update: PersonFollowsPeopleUpdateConnectionInput @source(name: "update", type: "PersonFollowsPeopleUpdateConnectionInput", subgraph: "Movies")
  delete: [PersonFollowsPeopleDeleteFieldInput!] @source(name: "delete", type: "[PersonFollowsPeopleDeleteFieldInput!]", subgraph: "Movies")
}

input PersonOptions @source(name: "PersonOptions", subgraph: "Movies") {
  limit: Int @source(name: "limit", type: "Int", subgraph: "Movies")
  offset: Int @source(name: "offset", type: "Int", subgraph: "Movies")
  """
  Specify one or more PersonSort objects to sort People by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PersonSort!] @source(name: "sort", type: "[PersonSort!]", subgraph: "Movies")
}

input PersonPeopleFollowsAggregateInput @source(name: "PersonPeopleFollowsAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [PersonPeopleFollowsAggregateInput!] @source(name: "AND", type: "[PersonPeopleFollowsAggregateInput!]", subgraph: "Movies")
  OR: [PersonPeopleFollowsAggregateInput!] @source(name: "OR", type: "[PersonPeopleFollowsAggregateInput!]", subgraph: "Movies")
  NOT: PersonPeopleFollowsAggregateInput @source(name: "NOT", type: "PersonPeopleFollowsAggregateInput", subgraph: "Movies")
  node: PersonPeopleFollowsNodeAggregationWhereInput @source(name: "node", type: "PersonPeopleFollowsNodeAggregationWhereInput", subgraph: "Movies")
}

input PersonPeopleFollowsConnectFieldInput @source(name: "PersonPeopleFollowsConnectFieldInput", subgraph: "Movies") {
  where: PersonConnectWhere @source(name: "where", type: "PersonConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [PersonConnectInput!] @source(name: "connect", type: "[PersonConnectInput!]", subgraph: "Movies")
}

input PersonPeopleFollowsConnectionSort @source(name: "PersonPeopleFollowsConnectionSort", subgraph: "Movies") {
  node: PersonSort @source(name: "node", type: "PersonSort", subgraph: "Movies")
}

input PersonPeopleFollowsConnectionWhere @source(name: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies") {
  AND: [PersonPeopleFollowsConnectionWhere!] @source(name: "AND", type: "[PersonPeopleFollowsConnectionWhere!]", subgraph: "Movies")
  OR: [PersonPeopleFollowsConnectionWhere!] @source(name: "OR", type: "[PersonPeopleFollowsConnectionWhere!]", subgraph: "Movies")
  NOT: PersonPeopleFollowsConnectionWhere @source(name: "NOT", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  node: PersonWhere @source(name: "node", type: "PersonWhere", subgraph: "Movies")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "PersonWhere", subgraph: "Movies")
}

input PersonPeopleFollowsCreateFieldInput @source(name: "PersonPeopleFollowsCreateFieldInput", subgraph: "Movies") {
  node: PersonCreateInput! @source(name: "node", type: "PersonCreateInput!", subgraph: "Movies")
}

input PersonPeopleFollowsDeleteFieldInput @source(name: "PersonPeopleFollowsDeleteFieldInput", subgraph: "Movies") {
  where: PersonPeopleFollowsConnectionWhere @source(name: "where", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  delete: PersonDeleteInput @source(name: "delete", type: "PersonDeleteInput", subgraph: "Movies")
}

input PersonPeopleFollowsDisconnectFieldInput @source(name: "PersonPeopleFollowsDisconnectFieldInput", subgraph: "Movies") {
  where: PersonPeopleFollowsConnectionWhere @source(name: "where", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  disconnect: PersonDisconnectInput @source(name: "disconnect", type: "PersonDisconnectInput", subgraph: "Movies")
}

input PersonPeopleFollowsFieldInput @source(name: "PersonPeopleFollowsFieldInput", subgraph: "Movies") {
  connect: [PersonPeopleFollowsConnectFieldInput!] @source(name: "connect", type: "[PersonPeopleFollowsConnectFieldInput!]", subgraph: "Movies")
  create: [PersonPeopleFollowsCreateFieldInput!] @source(name: "create", type: "[PersonPeopleFollowsCreateFieldInput!]", subgraph: "Movies")
}

input PersonPeopleFollowsNodeAggregationWhereInput @source(name: "PersonPeopleFollowsNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [PersonPeopleFollowsNodeAggregationWhereInput!] @source(name: "AND", type: "[PersonPeopleFollowsNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [PersonPeopleFollowsNodeAggregationWhereInput!] @source(name: "OR", type: "[PersonPeopleFollowsNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: PersonPeopleFollowsNodeAggregationWhereInput @source(name: "NOT", type: "PersonPeopleFollowsNodeAggregationWhereInput", subgraph: "Movies")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MIN_EQUAL: BigInt @source(name: "born_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  born_MAX_EQUAL: BigInt @source(name: "born_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  born_SUM_EQUAL: BigInt @source(name: "born_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_EQUAL: BigInt @source(name: "born_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_MIN_GT: BigInt @source(name: "born_MIN_GT", type: "BigInt", subgraph: "Movies")
  born_MAX_GT: BigInt @source(name: "born_MAX_GT", type: "BigInt", subgraph: "Movies")
  born_SUM_GT: BigInt @source(name: "born_SUM_GT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GT: BigInt @source(name: "born_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  born_MIN_GTE: BigInt @source(name: "born_MIN_GTE", type: "BigInt", subgraph: "Movies")
  born_MAX_GTE: BigInt @source(name: "born_MAX_GTE", type: "BigInt", subgraph: "Movies")
  born_SUM_GTE: BigInt @source(name: "born_SUM_GTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_GTE: BigInt @source(name: "born_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_MIN_LT: BigInt @source(name: "born_MIN_LT", type: "BigInt", subgraph: "Movies")
  born_MAX_LT: BigInt @source(name: "born_MAX_LT", type: "BigInt", subgraph: "Movies")
  born_SUM_LT: BigInt @source(name: "born_SUM_LT", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LT: BigInt @source(name: "born_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_MIN_LTE: BigInt @source(name: "born_MIN_LTE", type: "BigInt", subgraph: "Movies")
  born_MAX_LTE: BigInt @source(name: "born_MAX_LTE", type: "BigInt", subgraph: "Movies")
  born_SUM_LTE: BigInt @source(name: "born_SUM_LTE", type: "BigInt", subgraph: "Movies")
  born_AVERAGE_LTE: BigInt @source(name: "born_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_EQUAL", type: "String", subgraph: "Movies")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_EQUAL: Float @source(name: "name_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_EQUAL: Int @source(name: "name_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_EQUAL: Int @source(name: "name_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GT: Float @source(name: "name_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GT: Int @source(name: "name_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GT: Int @source(name: "name_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_GTE: Float @source(name: "name_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_GTE: Int @source(name: "name_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_GTE: Int @source(name: "name_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LT", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LT: Float @source(name: "name_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LT: Int @source(name: "name_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LT: Int @source(name: "name_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "name_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_LONGEST_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "name_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  name_AVERAGE_LENGTH_LTE: Float @source(name: "name_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  name_LONGEST_LENGTH_LTE: Int @source(name: "name_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  name_SHORTEST_LENGTH_LTE: Int @source(name: "name_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input PersonPeopleFollowsUpdateConnectionInput @source(name: "PersonPeopleFollowsUpdateConnectionInput", subgraph: "Movies") {
  node: PersonUpdateInput @source(name: "node", type: "PersonUpdateInput", subgraph: "Movies")
}

input PersonPeopleFollowsUpdateFieldInput @source(name: "PersonPeopleFollowsUpdateFieldInput", subgraph: "Movies") {
  where: PersonPeopleFollowsConnectionWhere @source(name: "where", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  connect: [PersonPeopleFollowsConnectFieldInput!] @source(name: "connect", type: "[PersonPeopleFollowsConnectFieldInput!]", subgraph: "Movies")
  disconnect: [PersonPeopleFollowsDisconnectFieldInput!] @source(name: "disconnect", type: "[PersonPeopleFollowsDisconnectFieldInput!]", subgraph: "Movies")
  create: [PersonPeopleFollowsCreateFieldInput!] @source(name: "create", type: "[PersonPeopleFollowsCreateFieldInput!]", subgraph: "Movies")
  update: PersonPeopleFollowsUpdateConnectionInput @source(name: "update", type: "PersonPeopleFollowsUpdateConnectionInput", subgraph: "Movies")
  delete: [PersonPeopleFollowsDeleteFieldInput!] @source(name: "delete", type: "[PersonPeopleFollowsDeleteFieldInput!]", subgraph: "Movies")
}

input PersonProducedMoviesAggregateInput @source(name: "PersonProducedMoviesAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [PersonProducedMoviesAggregateInput!] @source(name: "AND", type: "[PersonProducedMoviesAggregateInput!]", subgraph: "Movies")
  OR: [PersonProducedMoviesAggregateInput!] @source(name: "OR", type: "[PersonProducedMoviesAggregateInput!]", subgraph: "Movies")
  NOT: PersonProducedMoviesAggregateInput @source(name: "NOT", type: "PersonProducedMoviesAggregateInput", subgraph: "Movies")
  node: PersonProducedMoviesNodeAggregationWhereInput @source(name: "node", type: "PersonProducedMoviesNodeAggregationWhereInput", subgraph: "Movies")
}

input PersonProducedMoviesConnectFieldInput @source(name: "PersonProducedMoviesConnectFieldInput", subgraph: "Movies") {
  where: MovieConnectWhere @source(name: "where", type: "MovieConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [MovieConnectInput!] @source(name: "connect", type: "[MovieConnectInput!]", subgraph: "Movies")
}

input PersonProducedMoviesConnectionSort @source(name: "PersonProducedMoviesConnectionSort", subgraph: "Movies") {
  node: MovieSort @source(name: "node", type: "MovieSort", subgraph: "Movies")
}

input PersonProducedMoviesConnectionWhere @source(name: "PersonProducedMoviesConnectionWhere", subgraph: "Movies") {
  AND: [PersonProducedMoviesConnectionWhere!] @source(name: "AND", type: "[PersonProducedMoviesConnectionWhere!]", subgraph: "Movies")
  OR: [PersonProducedMoviesConnectionWhere!] @source(name: "OR", type: "[PersonProducedMoviesConnectionWhere!]", subgraph: "Movies")
  NOT: PersonProducedMoviesConnectionWhere @source(name: "NOT", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  node: MovieWhere @source(name: "node", type: "MovieWhere", subgraph: "Movies")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "MovieWhere", subgraph: "Movies")
}

input PersonProducedMoviesCreateFieldInput @source(name: "PersonProducedMoviesCreateFieldInput", subgraph: "Movies") {
  node: MovieCreateInput! @source(name: "node", type: "MovieCreateInput!", subgraph: "Movies")
}

input PersonProducedMoviesDeleteFieldInput @source(name: "PersonProducedMoviesDeleteFieldInput", subgraph: "Movies") {
  where: PersonProducedMoviesConnectionWhere @source(name: "where", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  delete: MovieDeleteInput @source(name: "delete", type: "MovieDeleteInput", subgraph: "Movies")
}

input PersonProducedMoviesDisconnectFieldInput @source(name: "PersonProducedMoviesDisconnectFieldInput", subgraph: "Movies") {
  where: PersonProducedMoviesConnectionWhere @source(name: "where", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  disconnect: MovieDisconnectInput @source(name: "disconnect", type: "MovieDisconnectInput", subgraph: "Movies")
}

input PersonProducedMoviesFieldInput @source(name: "PersonProducedMoviesFieldInput", subgraph: "Movies") {
  connect: [PersonProducedMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonProducedMoviesConnectFieldInput!]", subgraph: "Movies")
  create: [PersonProducedMoviesCreateFieldInput!] @source(name: "create", type: "[PersonProducedMoviesCreateFieldInput!]", subgraph: "Movies")
}

input PersonProducedMoviesNodeAggregationWhereInput @source(name: "PersonProducedMoviesNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [PersonProducedMoviesNodeAggregationWhereInput!] @source(name: "AND", type: "[PersonProducedMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [PersonProducedMoviesNodeAggregationWhereInput!] @source(name: "OR", type: "[PersonProducedMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: PersonProducedMoviesNodeAggregationWhereInput @source(name: "NOT", type: "PersonProducedMoviesNodeAggregationWhereInput", subgraph: "Movies")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MIN_EQUAL: BigInt @source(name: "released_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MAX_EQUAL: BigInt @source(name: "released_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  released_SUM_EQUAL: BigInt @source(name: "released_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_EQUAL: BigInt @source(name: "released_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GT", type: "BigInt", subgraph: "Movies")
  released_MIN_GT: BigInt @source(name: "released_MIN_GT", type: "BigInt", subgraph: "Movies")
  released_MAX_GT: BigInt @source(name: "released_MAX_GT", type: "BigInt", subgraph: "Movies")
  released_SUM_GT: BigInt @source(name: "released_SUM_GT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GT: BigInt @source(name: "released_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GTE", type: "BigInt", subgraph: "Movies")
  released_MIN_GTE: BigInt @source(name: "released_MIN_GTE", type: "BigInt", subgraph: "Movies")
  released_MAX_GTE: BigInt @source(name: "released_MAX_GTE", type: "BigInt", subgraph: "Movies")
  released_SUM_GTE: BigInt @source(name: "released_SUM_GTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GTE: BigInt @source(name: "released_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LT", type: "BigInt", subgraph: "Movies")
  released_MIN_LT: BigInt @source(name: "released_MIN_LT", type: "BigInt", subgraph: "Movies")
  released_MAX_LT: BigInt @source(name: "released_MAX_LT", type: "BigInt", subgraph: "Movies")
  released_SUM_LT: BigInt @source(name: "released_SUM_LT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LT: BigInt @source(name: "released_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LTE", type: "BigInt", subgraph: "Movies")
  released_MIN_LTE: BigInt @source(name: "released_MIN_LTE", type: "BigInt", subgraph: "Movies")
  released_MAX_LTE: BigInt @source(name: "released_MAX_LTE", type: "BigInt", subgraph: "Movies")
  released_SUM_LTE: BigInt @source(name: "released_SUM_LTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LTE: BigInt @source(name: "released_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_EQUAL", type: "String", subgraph: "Movies")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GT: Float @source(name: "tagline_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GT: Int @source(name: "tagline_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GT: Int @source(name: "tagline_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GTE: Float @source(name: "tagline_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GTE: Int @source(name: "tagline_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GTE: Int @source(name: "tagline_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LT: Float @source(name: "tagline_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LT: Int @source(name: "tagline_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LT: Int @source(name: "tagline_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LTE: Float @source(name: "tagline_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LTE: Int @source(name: "tagline_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LTE: Int @source(name: "tagline_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_EQUAL", type: "String", subgraph: "Movies")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_EQUAL: Float @source(name: "title_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_EQUAL: Int @source(name: "title_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_EQUAL: Int @source(name: "title_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GT: Float @source(name: "title_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GT: Int @source(name: "title_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GT: Int @source(name: "title_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GTE: Float @source(name: "title_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GTE: Int @source(name: "title_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GTE: Int @source(name: "title_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LT: Float @source(name: "title_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LT: Int @source(name: "title_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LT: Int @source(name: "title_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LTE: Float @source(name: "title_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LTE: Int @source(name: "title_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LTE: Int @source(name: "title_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MIN_EQUAL: BigInt @source(name: "votes_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MAX_EQUAL: BigInt @source(name: "votes_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_SUM_EQUAL: BigInt @source(name: "votes_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_EQUAL: BigInt @source(name: "votes_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GT", type: "BigInt", subgraph: "Movies")
  votes_MIN_GT: BigInt @source(name: "votes_MIN_GT", type: "BigInt", subgraph: "Movies")
  votes_MAX_GT: BigInt @source(name: "votes_MAX_GT", type: "BigInt", subgraph: "Movies")
  votes_SUM_GT: BigInt @source(name: "votes_SUM_GT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GT: BigInt @source(name: "votes_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_GTE: BigInt @source(name: "votes_MIN_GTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_GTE: BigInt @source(name: "votes_MAX_GTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_GTE: BigInt @source(name: "votes_SUM_GTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GTE: BigInt @source(name: "votes_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LT", type: "BigInt", subgraph: "Movies")
  votes_MIN_LT: BigInt @source(name: "votes_MIN_LT", type: "BigInt", subgraph: "Movies")
  votes_MAX_LT: BigInt @source(name: "votes_MAX_LT", type: "BigInt", subgraph: "Movies")
  votes_SUM_LT: BigInt @source(name: "votes_SUM_LT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LT: BigInt @source(name: "votes_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_LTE: BigInt @source(name: "votes_MIN_LTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_LTE: BigInt @source(name: "votes_MAX_LTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_LTE: BigInt @source(name: "votes_SUM_LTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LTE: BigInt @source(name: "votes_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
}

input PersonProducedMoviesUpdateConnectionInput @source(name: "PersonProducedMoviesUpdateConnectionInput", subgraph: "Movies") {
  node: MovieUpdateInput @source(name: "node", type: "MovieUpdateInput", subgraph: "Movies")
}

input PersonProducedMoviesUpdateFieldInput @source(name: "PersonProducedMoviesUpdateFieldInput", subgraph: "Movies") {
  where: PersonProducedMoviesConnectionWhere @source(name: "where", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  connect: [PersonProducedMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonProducedMoviesConnectFieldInput!]", subgraph: "Movies")
  disconnect: [PersonProducedMoviesDisconnectFieldInput!] @source(name: "disconnect", type: "[PersonProducedMoviesDisconnectFieldInput!]", subgraph: "Movies")
  create: [PersonProducedMoviesCreateFieldInput!] @source(name: "create", type: "[PersonProducedMoviesCreateFieldInput!]", subgraph: "Movies")
  update: PersonProducedMoviesUpdateConnectionInput @source(name: "update", type: "PersonProducedMoviesUpdateConnectionInput", subgraph: "Movies")
  delete: [PersonProducedMoviesDeleteFieldInput!] @source(name: "delete", type: "[PersonProducedMoviesDeleteFieldInput!]", subgraph: "Movies")
}

input PersonRelationInput @source(name: "PersonRelationInput", subgraph: "Movies") {
  actedInMovies: [PersonActedInMoviesCreateFieldInput!] @source(name: "actedInMovies", type: "[PersonActedInMoviesCreateFieldInput!]", subgraph: "Movies")
  directedMovies: [PersonDirectedMoviesCreateFieldInput!] @source(name: "directedMovies", type: "[PersonDirectedMoviesCreateFieldInput!]", subgraph: "Movies")
  followsPeople: [PersonFollowsPeopleCreateFieldInput!] @source(name: "followsPeople", type: "[PersonFollowsPeopleCreateFieldInput!]", subgraph: "Movies")
  peopleFollows: [PersonPeopleFollowsCreateFieldInput!] @source(name: "peopleFollows", type: "[PersonPeopleFollowsCreateFieldInput!]", subgraph: "Movies")
  producedMovies: [PersonProducedMoviesCreateFieldInput!] @source(name: "producedMovies", type: "[PersonProducedMoviesCreateFieldInput!]", subgraph: "Movies")
  reviewedMovies: [PersonReviewedMoviesCreateFieldInput!] @source(name: "reviewedMovies", type: "[PersonReviewedMoviesCreateFieldInput!]", subgraph: "Movies")
  wroteMovies: [PersonWroteMoviesCreateFieldInput!] @source(name: "wroteMovies", type: "[PersonWroteMoviesCreateFieldInput!]", subgraph: "Movies")
}

input PersonReviewedMoviesAggregateInput @source(name: "PersonReviewedMoviesAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [PersonReviewedMoviesAggregateInput!] @source(name: "AND", type: "[PersonReviewedMoviesAggregateInput!]", subgraph: "Movies")
  OR: [PersonReviewedMoviesAggregateInput!] @source(name: "OR", type: "[PersonReviewedMoviesAggregateInput!]", subgraph: "Movies")
  NOT: PersonReviewedMoviesAggregateInput @source(name: "NOT", type: "PersonReviewedMoviesAggregateInput", subgraph: "Movies")
  node: PersonReviewedMoviesNodeAggregationWhereInput @source(name: "node", type: "PersonReviewedMoviesNodeAggregationWhereInput", subgraph: "Movies")
  edge: ReviewedPropertiesAggregationWhereInput @source(name: "edge", type: "ReviewedPropertiesAggregationWhereInput", subgraph: "Movies")
}

input PersonReviewedMoviesConnectFieldInput @source(name: "PersonReviewedMoviesConnectFieldInput", subgraph: "Movies") {
  edge: ReviewedPropertiesCreateInput! @source(name: "edge", type: "ReviewedPropertiesCreateInput!", subgraph: "Movies")
  where: MovieConnectWhere @source(name: "where", type: "MovieConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [MovieConnectInput!] @source(name: "connect", type: "[MovieConnectInput!]", subgraph: "Movies")
}

input PersonReviewedMoviesConnectionSort @source(name: "PersonReviewedMoviesConnectionSort", subgraph: "Movies") {
  node: MovieSort @source(name: "node", type: "MovieSort", subgraph: "Movies")
  edge: ReviewedPropertiesSort @source(name: "edge", type: "ReviewedPropertiesSort", subgraph: "Movies")
}

input PersonReviewedMoviesConnectionWhere @source(name: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies") {
  AND: [PersonReviewedMoviesConnectionWhere!] @source(name: "AND", type: "[PersonReviewedMoviesConnectionWhere!]", subgraph: "Movies")
  OR: [PersonReviewedMoviesConnectionWhere!] @source(name: "OR", type: "[PersonReviewedMoviesConnectionWhere!]", subgraph: "Movies")
  NOT: PersonReviewedMoviesConnectionWhere @source(name: "NOT", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  node: MovieWhere @source(name: "node", type: "MovieWhere", subgraph: "Movies")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "MovieWhere", subgraph: "Movies")
  edge: ReviewedPropertiesWhere @source(name: "edge", type: "ReviewedPropertiesWhere", subgraph: "Movies")
  edge_NOT: ReviewedPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "edge_NOT", type: "ReviewedPropertiesWhere", subgraph: "Movies")
}

input PersonReviewedMoviesCreateFieldInput @source(name: "PersonReviewedMoviesCreateFieldInput", subgraph: "Movies") {
  edge: ReviewedPropertiesCreateInput! @source(name: "edge", type: "ReviewedPropertiesCreateInput!", subgraph: "Movies")
  node: MovieCreateInput! @source(name: "node", type: "MovieCreateInput!", subgraph: "Movies")
}

input PersonReviewedMoviesDeleteFieldInput @source(name: "PersonReviewedMoviesDeleteFieldInput", subgraph: "Movies") {
  where: PersonReviewedMoviesConnectionWhere @source(name: "where", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  delete: MovieDeleteInput @source(name: "delete", type: "MovieDeleteInput", subgraph: "Movies")
}

input PersonReviewedMoviesDisconnectFieldInput @source(name: "PersonReviewedMoviesDisconnectFieldInput", subgraph: "Movies") {
  where: PersonReviewedMoviesConnectionWhere @source(name: "where", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  disconnect: MovieDisconnectInput @source(name: "disconnect", type: "MovieDisconnectInput", subgraph: "Movies")
}

input PersonReviewedMoviesFieldInput @source(name: "PersonReviewedMoviesFieldInput", subgraph: "Movies") {
  connect: [PersonReviewedMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonReviewedMoviesConnectFieldInput!]", subgraph: "Movies")
  create: [PersonReviewedMoviesCreateFieldInput!] @source(name: "create", type: "[PersonReviewedMoviesCreateFieldInput!]", subgraph: "Movies")
}

input PersonReviewedMoviesNodeAggregationWhereInput @source(name: "PersonReviewedMoviesNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [PersonReviewedMoviesNodeAggregationWhereInput!] @source(name: "AND", type: "[PersonReviewedMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [PersonReviewedMoviesNodeAggregationWhereInput!] @source(name: "OR", type: "[PersonReviewedMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: PersonReviewedMoviesNodeAggregationWhereInput @source(name: "NOT", type: "PersonReviewedMoviesNodeAggregationWhereInput", subgraph: "Movies")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MIN_EQUAL: BigInt @source(name: "released_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MAX_EQUAL: BigInt @source(name: "released_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  released_SUM_EQUAL: BigInt @source(name: "released_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_EQUAL: BigInt @source(name: "released_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GT", type: "BigInt", subgraph: "Movies")
  released_MIN_GT: BigInt @source(name: "released_MIN_GT", type: "BigInt", subgraph: "Movies")
  released_MAX_GT: BigInt @source(name: "released_MAX_GT", type: "BigInt", subgraph: "Movies")
  released_SUM_GT: BigInt @source(name: "released_SUM_GT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GT: BigInt @source(name: "released_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GTE", type: "BigInt", subgraph: "Movies")
  released_MIN_GTE: BigInt @source(name: "released_MIN_GTE", type: "BigInt", subgraph: "Movies")
  released_MAX_GTE: BigInt @source(name: "released_MAX_GTE", type: "BigInt", subgraph: "Movies")
  released_SUM_GTE: BigInt @source(name: "released_SUM_GTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GTE: BigInt @source(name: "released_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LT", type: "BigInt", subgraph: "Movies")
  released_MIN_LT: BigInt @source(name: "released_MIN_LT", type: "BigInt", subgraph: "Movies")
  released_MAX_LT: BigInt @source(name: "released_MAX_LT", type: "BigInt", subgraph: "Movies")
  released_SUM_LT: BigInt @source(name: "released_SUM_LT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LT: BigInt @source(name: "released_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LTE", type: "BigInt", subgraph: "Movies")
  released_MIN_LTE: BigInt @source(name: "released_MIN_LTE", type: "BigInt", subgraph: "Movies")
  released_MAX_LTE: BigInt @source(name: "released_MAX_LTE", type: "BigInt", subgraph: "Movies")
  released_SUM_LTE: BigInt @source(name: "released_SUM_LTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LTE: BigInt @source(name: "released_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_EQUAL", type: "String", subgraph: "Movies")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GT: Float @source(name: "tagline_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GT: Int @source(name: "tagline_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GT: Int @source(name: "tagline_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GTE: Float @source(name: "tagline_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GTE: Int @source(name: "tagline_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GTE: Int @source(name: "tagline_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LT: Float @source(name: "tagline_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LT: Int @source(name: "tagline_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LT: Int @source(name: "tagline_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LTE: Float @source(name: "tagline_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LTE: Int @source(name: "tagline_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LTE: Int @source(name: "tagline_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_EQUAL", type: "String", subgraph: "Movies")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_EQUAL: Float @source(name: "title_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_EQUAL: Int @source(name: "title_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_EQUAL: Int @source(name: "title_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GT: Float @source(name: "title_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GT: Int @source(name: "title_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GT: Int @source(name: "title_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GTE: Float @source(name: "title_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GTE: Int @source(name: "title_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GTE: Int @source(name: "title_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LT: Float @source(name: "title_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LT: Int @source(name: "title_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LT: Int @source(name: "title_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LTE: Float @source(name: "title_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LTE: Int @source(name: "title_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LTE: Int @source(name: "title_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MIN_EQUAL: BigInt @source(name: "votes_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MAX_EQUAL: BigInt @source(name: "votes_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_SUM_EQUAL: BigInt @source(name: "votes_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_EQUAL: BigInt @source(name: "votes_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GT", type: "BigInt", subgraph: "Movies")
  votes_MIN_GT: BigInt @source(name: "votes_MIN_GT", type: "BigInt", subgraph: "Movies")
  votes_MAX_GT: BigInt @source(name: "votes_MAX_GT", type: "BigInt", subgraph: "Movies")
  votes_SUM_GT: BigInt @source(name: "votes_SUM_GT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GT: BigInt @source(name: "votes_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_GTE: BigInt @source(name: "votes_MIN_GTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_GTE: BigInt @source(name: "votes_MAX_GTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_GTE: BigInt @source(name: "votes_SUM_GTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GTE: BigInt @source(name: "votes_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LT", type: "BigInt", subgraph: "Movies")
  votes_MIN_LT: BigInt @source(name: "votes_MIN_LT", type: "BigInt", subgraph: "Movies")
  votes_MAX_LT: BigInt @source(name: "votes_MAX_LT", type: "BigInt", subgraph: "Movies")
  votes_SUM_LT: BigInt @source(name: "votes_SUM_LT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LT: BigInt @source(name: "votes_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_LTE: BigInt @source(name: "votes_MIN_LTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_LTE: BigInt @source(name: "votes_MAX_LTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_LTE: BigInt @source(name: "votes_SUM_LTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LTE: BigInt @source(name: "votes_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
}

input PersonReviewedMoviesUpdateConnectionInput @source(name: "PersonReviewedMoviesUpdateConnectionInput", subgraph: "Movies") {
  node: MovieUpdateInput @source(name: "node", type: "MovieUpdateInput", subgraph: "Movies")
  edge: ReviewedPropertiesUpdateInput @source(name: "edge", type: "ReviewedPropertiesUpdateInput", subgraph: "Movies")
}

input PersonReviewedMoviesUpdateFieldInput @source(name: "PersonReviewedMoviesUpdateFieldInput", subgraph: "Movies") {
  where: PersonReviewedMoviesConnectionWhere @source(name: "where", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  connect: [PersonReviewedMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonReviewedMoviesConnectFieldInput!]", subgraph: "Movies")
  disconnect: [PersonReviewedMoviesDisconnectFieldInput!] @source(name: "disconnect", type: "[PersonReviewedMoviesDisconnectFieldInput!]", subgraph: "Movies")
  create: [PersonReviewedMoviesCreateFieldInput!] @source(name: "create", type: "[PersonReviewedMoviesCreateFieldInput!]", subgraph: "Movies")
  update: PersonReviewedMoviesUpdateConnectionInput @source(name: "update", type: "PersonReviewedMoviesUpdateConnectionInput", subgraph: "Movies")
  delete: [PersonReviewedMoviesDeleteFieldInput!] @source(name: "delete", type: "[PersonReviewedMoviesDeleteFieldInput!]", subgraph: "Movies")
}

"""
Fields to sort People by. The order in which sorts are applied is not guaranteed when specifying many fields in one PersonSort object.
"""
input PersonSort @source(name: "PersonSort", subgraph: "Movies") {
  born: SortDirection @source(name: "born", type: "SortDirection", subgraph: "Movies")
  name: SortDirection @source(name: "name", type: "SortDirection", subgraph: "Movies")
}

input PersonUpdateInput @source(name: "PersonUpdateInput", subgraph: "Movies") {
  born: BigInt @source(name: "born", type: "BigInt", subgraph: "Movies")
  born_INCREMENT: BigInt @source(name: "born_INCREMENT", type: "BigInt", subgraph: "Movies")
  born_DECREMENT: BigInt @source(name: "born_DECREMENT", type: "BigInt", subgraph: "Movies")
  name: String @source(name: "name", type: "String", subgraph: "Movies")
  actedInMovies: [PersonActedInMoviesUpdateFieldInput!] @source(name: "actedInMovies", type: "[PersonActedInMoviesUpdateFieldInput!]", subgraph: "Movies")
  directedMovies: [PersonDirectedMoviesUpdateFieldInput!] @source(name: "directedMovies", type: "[PersonDirectedMoviesUpdateFieldInput!]", subgraph: "Movies")
  followsPeople: [PersonFollowsPeopleUpdateFieldInput!] @source(name: "followsPeople", type: "[PersonFollowsPeopleUpdateFieldInput!]", subgraph: "Movies")
  peopleFollows: [PersonPeopleFollowsUpdateFieldInput!] @source(name: "peopleFollows", type: "[PersonPeopleFollowsUpdateFieldInput!]", subgraph: "Movies")
  producedMovies: [PersonProducedMoviesUpdateFieldInput!] @source(name: "producedMovies", type: "[PersonProducedMoviesUpdateFieldInput!]", subgraph: "Movies")
  reviewedMovies: [PersonReviewedMoviesUpdateFieldInput!] @source(name: "reviewedMovies", type: "[PersonReviewedMoviesUpdateFieldInput!]", subgraph: "Movies")
  wroteMovies: [PersonWroteMoviesUpdateFieldInput!] @source(name: "wroteMovies", type: "[PersonWroteMoviesUpdateFieldInput!]", subgraph: "Movies")
}

input PersonWhere @source(name: "PersonWhere", subgraph: "Movies") {
  born: BigInt @source(name: "born", type: "BigInt", subgraph: "Movies")
  born_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "born_NOT", type: "BigInt", subgraph: "Movies")
  born_IN: [BigInt] @source(name: "born_IN", type: "[BigInt]", subgraph: "Movies")
  born_NOT_IN: [BigInt] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "born_NOT_IN", type: "[BigInt]", subgraph: "Movies")
  born_LT: BigInt @source(name: "born_LT", type: "BigInt", subgraph: "Movies")
  born_LTE: BigInt @source(name: "born_LTE", type: "BigInt", subgraph: "Movies")
  born_GT: BigInt @source(name: "born_GT", type: "BigInt", subgraph: "Movies")
  born_GTE: BigInt @source(name: "born_GTE", type: "BigInt", subgraph: "Movies")
  name: String @source(name: "name", type: "String", subgraph: "Movies")
  name_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "name_NOT", type: "String", subgraph: "Movies")
  name_IN: [String!] @source(name: "name_IN", type: "[String!]", subgraph: "Movies")
  name_NOT_IN: [String!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "name_NOT_IN", type: "[String!]", subgraph: "Movies")
  name_CONTAINS: String @source(name: "name_CONTAINS", type: "String", subgraph: "Movies")
  name_STARTS_WITH: String @source(name: "name_STARTS_WITH", type: "String", subgraph: "Movies")
  name_ENDS_WITH: String @source(name: "name_ENDS_WITH", type: "String", subgraph: "Movies")
  name_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "name_NOT_CONTAINS", type: "String", subgraph: "Movies")
  name_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "name_NOT_STARTS_WITH", type: "String", subgraph: "Movies")
  name_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "name_NOT_ENDS_WITH", type: "String", subgraph: "Movies")
  OR: [PersonWhere!] @source(name: "OR", type: "[PersonWhere!]", subgraph: "Movies")
  AND: [PersonWhere!] @source(name: "AND", type: "[PersonWhere!]", subgraph: "Movies")
  NOT: PersonWhere @source(name: "NOT", type: "PersonWhere", subgraph: "Movies")
  actedInMovies: MovieWhere @deprecated(reason: "Use \`actedInMovies_SOME\` instead.") @source(name: "actedInMovies", type: "MovieWhere", subgraph: "Movies")
  actedInMovies_NOT: MovieWhere @deprecated(reason: "Use \`actedInMovies_NONE\` instead.") @source(name: "actedInMovies_NOT", type: "MovieWhere", subgraph: "Movies")
  """Return People where all of the related Movies match this filter"""
  actedInMovies_ALL: MovieWhere @source(name: "actedInMovies_ALL", type: "MovieWhere", subgraph: "Movies")
  """Return People where none of the related Movies match this filter"""
  actedInMovies_NONE: MovieWhere @source(name: "actedInMovies_NONE", type: "MovieWhere", subgraph: "Movies")
  """Return People where one of the related Movies match this filter"""
  actedInMovies_SINGLE: MovieWhere @source(name: "actedInMovies_SINGLE", type: "MovieWhere", subgraph: "Movies")
  """Return People where some of the related Movies match this filter"""
  actedInMovies_SOME: MovieWhere @source(name: "actedInMovies_SOME", type: "MovieWhere", subgraph: "Movies")
  actedInMoviesConnection: PersonActedInMoviesConnectionWhere @deprecated(reason: "Use \`actedInMoviesConnection_SOME\` instead.") @source(name: "actedInMoviesConnection", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  actedInMoviesConnection_NOT: PersonActedInMoviesConnectionWhere @deprecated(reason: "Use \`actedInMoviesConnection_NONE\` instead.") @source(name: "actedInMoviesConnection_NOT", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where all of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_ALL: PersonActedInMoviesConnectionWhere @source(name: "actedInMoviesConnection_ALL", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where none of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_NONE: PersonActedInMoviesConnectionWhere @source(name: "actedInMoviesConnection_NONE", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where one of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SINGLE: PersonActedInMoviesConnectionWhere @source(name: "actedInMoviesConnection_SINGLE", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where some of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SOME: PersonActedInMoviesConnectionWhere @source(name: "actedInMoviesConnection_SOME", type: "PersonActedInMoviesConnectionWhere", subgraph: "Movies")
  actedInMoviesAggregate: PersonActedInMoviesAggregateInput @source(name: "actedInMoviesAggregate", type: "PersonActedInMoviesAggregateInput", subgraph: "Movies")
  directedMovies: MovieWhere @deprecated(reason: "Use \`directedMovies_SOME\` instead.") @source(name: "directedMovies", type: "MovieWhere", subgraph: "Movies")
  directedMovies_NOT: MovieWhere @deprecated(reason: "Use \`directedMovies_NONE\` instead.") @source(name: "directedMovies_NOT", type: "MovieWhere", subgraph: "Movies")
  """Return People where all of the related Movies match this filter"""
  directedMovies_ALL: MovieWhere @source(name: "directedMovies_ALL", type: "MovieWhere", subgraph: "Movies")
  """Return People where none of the related Movies match this filter"""
  directedMovies_NONE: MovieWhere @source(name: "directedMovies_NONE", type: "MovieWhere", subgraph: "Movies")
  """Return People where one of the related Movies match this filter"""
  directedMovies_SINGLE: MovieWhere @source(name: "directedMovies_SINGLE", type: "MovieWhere", subgraph: "Movies")
  """Return People where some of the related Movies match this filter"""
  directedMovies_SOME: MovieWhere @source(name: "directedMovies_SOME", type: "MovieWhere", subgraph: "Movies")
  directedMoviesConnection: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Use \`directedMoviesConnection_SOME\` instead.") @source(name: "directedMoviesConnection", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  directedMoviesConnection_NOT: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Use \`directedMoviesConnection_NONE\` instead.") @source(name: "directedMoviesConnection_NOT", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where all of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_ALL: PersonDirectedMoviesConnectionWhere @source(name: "directedMoviesConnection_ALL", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where none of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_NONE: PersonDirectedMoviesConnectionWhere @source(name: "directedMoviesConnection_NONE", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where one of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SINGLE: PersonDirectedMoviesConnectionWhere @source(name: "directedMoviesConnection_SINGLE", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where some of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SOME: PersonDirectedMoviesConnectionWhere @source(name: "directedMoviesConnection_SOME", type: "PersonDirectedMoviesConnectionWhere", subgraph: "Movies")
  directedMoviesAggregate: PersonDirectedMoviesAggregateInput @source(name: "directedMoviesAggregate", type: "PersonDirectedMoviesAggregateInput", subgraph: "Movies")
  followsPeople: PersonWhere @deprecated(reason: "Use \`followsPeople_SOME\` instead.") @source(name: "followsPeople", type: "PersonWhere", subgraph: "Movies")
  followsPeople_NOT: PersonWhere @deprecated(reason: "Use \`followsPeople_NONE\` instead.") @source(name: "followsPeople_NOT", type: "PersonWhere", subgraph: "Movies")
  """Return People where all of the related People match this filter"""
  followsPeople_ALL: PersonWhere @source(name: "followsPeople_ALL", type: "PersonWhere", subgraph: "Movies")
  """Return People where none of the related People match this filter"""
  followsPeople_NONE: PersonWhere @source(name: "followsPeople_NONE", type: "PersonWhere", subgraph: "Movies")
  """Return People where one of the related People match this filter"""
  followsPeople_SINGLE: PersonWhere @source(name: "followsPeople_SINGLE", type: "PersonWhere", subgraph: "Movies")
  """Return People where some of the related People match this filter"""
  followsPeople_SOME: PersonWhere @source(name: "followsPeople_SOME", type: "PersonWhere", subgraph: "Movies")
  followsPeopleConnection: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Use \`followsPeopleConnection_SOME\` instead.") @source(name: "followsPeopleConnection", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  followsPeopleConnection_NOT: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Use \`followsPeopleConnection_NONE\` instead.") @source(name: "followsPeopleConnection_NOT", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  """
  Return People where all of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_ALL: PersonFollowsPeopleConnectionWhere @source(name: "followsPeopleConnection_ALL", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  """
  Return People where none of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_NONE: PersonFollowsPeopleConnectionWhere @source(name: "followsPeopleConnection_NONE", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  """
  Return People where one of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SINGLE: PersonFollowsPeopleConnectionWhere @source(name: "followsPeopleConnection_SINGLE", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  """
  Return People where some of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SOME: PersonFollowsPeopleConnectionWhere @source(name: "followsPeopleConnection_SOME", type: "PersonFollowsPeopleConnectionWhere", subgraph: "Movies")
  followsPeopleAggregate: PersonFollowsPeopleAggregateInput @source(name: "followsPeopleAggregate", type: "PersonFollowsPeopleAggregateInput", subgraph: "Movies")
  peopleFollows: PersonWhere @deprecated(reason: "Use \`peopleFollows_SOME\` instead.") @source(name: "peopleFollows", type: "PersonWhere", subgraph: "Movies")
  peopleFollows_NOT: PersonWhere @deprecated(reason: "Use \`peopleFollows_NONE\` instead.") @source(name: "peopleFollows_NOT", type: "PersonWhere", subgraph: "Movies")
  """Return People where all of the related People match this filter"""
  peopleFollows_ALL: PersonWhere @source(name: "peopleFollows_ALL", type: "PersonWhere", subgraph: "Movies")
  """Return People where none of the related People match this filter"""
  peopleFollows_NONE: PersonWhere @source(name: "peopleFollows_NONE", type: "PersonWhere", subgraph: "Movies")
  """Return People where one of the related People match this filter"""
  peopleFollows_SINGLE: PersonWhere @source(name: "peopleFollows_SINGLE", type: "PersonWhere", subgraph: "Movies")
  """Return People where some of the related People match this filter"""
  peopleFollows_SOME: PersonWhere @source(name: "peopleFollows_SOME", type: "PersonWhere", subgraph: "Movies")
  peopleFollowsConnection: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Use \`peopleFollowsConnection_SOME\` instead.") @source(name: "peopleFollowsConnection", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  peopleFollowsConnection_NOT: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Use \`peopleFollowsConnection_NONE\` instead.") @source(name: "peopleFollowsConnection_NOT", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  """
  Return People where all of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_ALL: PersonPeopleFollowsConnectionWhere @source(name: "peopleFollowsConnection_ALL", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  """
  Return People where none of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_NONE: PersonPeopleFollowsConnectionWhere @source(name: "peopleFollowsConnection_NONE", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  """
  Return People where one of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SINGLE: PersonPeopleFollowsConnectionWhere @source(name: "peopleFollowsConnection_SINGLE", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  """
  Return People where some of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SOME: PersonPeopleFollowsConnectionWhere @source(name: "peopleFollowsConnection_SOME", type: "PersonPeopleFollowsConnectionWhere", subgraph: "Movies")
  peopleFollowsAggregate: PersonPeopleFollowsAggregateInput @source(name: "peopleFollowsAggregate", type: "PersonPeopleFollowsAggregateInput", subgraph: "Movies")
  producedMovies: MovieWhere @deprecated(reason: "Use \`producedMovies_SOME\` instead.") @source(name: "producedMovies", type: "MovieWhere", subgraph: "Movies")
  producedMovies_NOT: MovieWhere @deprecated(reason: "Use \`producedMovies_NONE\` instead.") @source(name: "producedMovies_NOT", type: "MovieWhere", subgraph: "Movies")
  """Return People where all of the related Movies match this filter"""
  producedMovies_ALL: MovieWhere @source(name: "producedMovies_ALL", type: "MovieWhere", subgraph: "Movies")
  """Return People where none of the related Movies match this filter"""
  producedMovies_NONE: MovieWhere @source(name: "producedMovies_NONE", type: "MovieWhere", subgraph: "Movies")
  """Return People where one of the related Movies match this filter"""
  producedMovies_SINGLE: MovieWhere @source(name: "producedMovies_SINGLE", type: "MovieWhere", subgraph: "Movies")
  """Return People where some of the related Movies match this filter"""
  producedMovies_SOME: MovieWhere @source(name: "producedMovies_SOME", type: "MovieWhere", subgraph: "Movies")
  producedMoviesConnection: PersonProducedMoviesConnectionWhere @deprecated(reason: "Use \`producedMoviesConnection_SOME\` instead.") @source(name: "producedMoviesConnection", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  producedMoviesConnection_NOT: PersonProducedMoviesConnectionWhere @deprecated(reason: "Use \`producedMoviesConnection_NONE\` instead.") @source(name: "producedMoviesConnection_NOT", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where all of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_ALL: PersonProducedMoviesConnectionWhere @source(name: "producedMoviesConnection_ALL", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where none of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_NONE: PersonProducedMoviesConnectionWhere @source(name: "producedMoviesConnection_NONE", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where one of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SINGLE: PersonProducedMoviesConnectionWhere @source(name: "producedMoviesConnection_SINGLE", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where some of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SOME: PersonProducedMoviesConnectionWhere @source(name: "producedMoviesConnection_SOME", type: "PersonProducedMoviesConnectionWhere", subgraph: "Movies")
  producedMoviesAggregate: PersonProducedMoviesAggregateInput @source(name: "producedMoviesAggregate", type: "PersonProducedMoviesAggregateInput", subgraph: "Movies")
  reviewedMovies: MovieWhere @deprecated(reason: "Use \`reviewedMovies_SOME\` instead.") @source(name: "reviewedMovies", type: "MovieWhere", subgraph: "Movies")
  reviewedMovies_NOT: MovieWhere @deprecated(reason: "Use \`reviewedMovies_NONE\` instead.") @source(name: "reviewedMovies_NOT", type: "MovieWhere", subgraph: "Movies")
  """Return People where all of the related Movies match this filter"""
  reviewedMovies_ALL: MovieWhere @source(name: "reviewedMovies_ALL", type: "MovieWhere", subgraph: "Movies")
  """Return People where none of the related Movies match this filter"""
  reviewedMovies_NONE: MovieWhere @source(name: "reviewedMovies_NONE", type: "MovieWhere", subgraph: "Movies")
  """Return People where one of the related Movies match this filter"""
  reviewedMovies_SINGLE: MovieWhere @source(name: "reviewedMovies_SINGLE", type: "MovieWhere", subgraph: "Movies")
  """Return People where some of the related Movies match this filter"""
  reviewedMovies_SOME: MovieWhere @source(name: "reviewedMovies_SOME", type: "MovieWhere", subgraph: "Movies")
  reviewedMoviesConnection: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Use \`reviewedMoviesConnection_SOME\` instead.") @source(name: "reviewedMoviesConnection", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  reviewedMoviesConnection_NOT: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Use \`reviewedMoviesConnection_NONE\` instead.") @source(name: "reviewedMoviesConnection_NOT", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where all of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_ALL: PersonReviewedMoviesConnectionWhere @source(name: "reviewedMoviesConnection_ALL", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where none of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_NONE: PersonReviewedMoviesConnectionWhere @source(name: "reviewedMoviesConnection_NONE", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where one of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SINGLE: PersonReviewedMoviesConnectionWhere @source(name: "reviewedMoviesConnection_SINGLE", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where some of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SOME: PersonReviewedMoviesConnectionWhere @source(name: "reviewedMoviesConnection_SOME", type: "PersonReviewedMoviesConnectionWhere", subgraph: "Movies")
  reviewedMoviesAggregate: PersonReviewedMoviesAggregateInput @source(name: "reviewedMoviesAggregate", type: "PersonReviewedMoviesAggregateInput", subgraph: "Movies")
  wroteMovies: MovieWhere @deprecated(reason: "Use \`wroteMovies_SOME\` instead.") @source(name: "wroteMovies", type: "MovieWhere", subgraph: "Movies")
  wroteMovies_NOT: MovieWhere @deprecated(reason: "Use \`wroteMovies_NONE\` instead.") @source(name: "wroteMovies_NOT", type: "MovieWhere", subgraph: "Movies")
  """Return People where all of the related Movies match this filter"""
  wroteMovies_ALL: MovieWhere @source(name: "wroteMovies_ALL", type: "MovieWhere", subgraph: "Movies")
  """Return People where none of the related Movies match this filter"""
  wroteMovies_NONE: MovieWhere @source(name: "wroteMovies_NONE", type: "MovieWhere", subgraph: "Movies")
  """Return People where one of the related Movies match this filter"""
  wroteMovies_SINGLE: MovieWhere @source(name: "wroteMovies_SINGLE", type: "MovieWhere", subgraph: "Movies")
  """Return People where some of the related Movies match this filter"""
  wroteMovies_SOME: MovieWhere @source(name: "wroteMovies_SOME", type: "MovieWhere", subgraph: "Movies")
  wroteMoviesConnection: PersonWroteMoviesConnectionWhere @deprecated(reason: "Use \`wroteMoviesConnection_SOME\` instead.") @source(name: "wroteMoviesConnection", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  wroteMoviesConnection_NOT: PersonWroteMoviesConnectionWhere @deprecated(reason: "Use \`wroteMoviesConnection_NONE\` instead.") @source(name: "wroteMoviesConnection_NOT", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where all of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_ALL: PersonWroteMoviesConnectionWhere @source(name: "wroteMoviesConnection_ALL", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where none of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_NONE: PersonWroteMoviesConnectionWhere @source(name: "wroteMoviesConnection_NONE", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where one of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SINGLE: PersonWroteMoviesConnectionWhere @source(name: "wroteMoviesConnection_SINGLE", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  """
  Return People where some of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SOME: PersonWroteMoviesConnectionWhere @source(name: "wroteMoviesConnection_SOME", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  wroteMoviesAggregate: PersonWroteMoviesAggregateInput @source(name: "wroteMoviesAggregate", type: "PersonWroteMoviesAggregateInput", subgraph: "Movies")
}

input PersonWroteMoviesAggregateInput @source(name: "PersonWroteMoviesAggregateInput", subgraph: "Movies") {
  count: Int @source(name: "count", type: "Int", subgraph: "Movies")
  count_LT: Int @source(name: "count_LT", type: "Int", subgraph: "Movies")
  count_LTE: Int @source(name: "count_LTE", type: "Int", subgraph: "Movies")
  count_GT: Int @source(name: "count_GT", type: "Int", subgraph: "Movies")
  count_GTE: Int @source(name: "count_GTE", type: "Int", subgraph: "Movies")
  AND: [PersonWroteMoviesAggregateInput!] @source(name: "AND", type: "[PersonWroteMoviesAggregateInput!]", subgraph: "Movies")
  OR: [PersonWroteMoviesAggregateInput!] @source(name: "OR", type: "[PersonWroteMoviesAggregateInput!]", subgraph: "Movies")
  NOT: PersonWroteMoviesAggregateInput @source(name: "NOT", type: "PersonWroteMoviesAggregateInput", subgraph: "Movies")
  node: PersonWroteMoviesNodeAggregationWhereInput @source(name: "node", type: "PersonWroteMoviesNodeAggregationWhereInput", subgraph: "Movies")
}

input PersonWroteMoviesConnectFieldInput @source(name: "PersonWroteMoviesConnectFieldInput", subgraph: "Movies") {
  where: MovieConnectWhere @source(name: "where", type: "MovieConnectWhere", subgraph: "Movies")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(name: "overwrite", type: "Boolean!", subgraph: "Movies")
  connect: [MovieConnectInput!] @source(name: "connect", type: "[MovieConnectInput!]", subgraph: "Movies")
}

input PersonWroteMoviesConnectionSort @source(name: "PersonWroteMoviesConnectionSort", subgraph: "Movies") {
  node: MovieSort @source(name: "node", type: "MovieSort", subgraph: "Movies")
}

input PersonWroteMoviesConnectionWhere @source(name: "PersonWroteMoviesConnectionWhere", subgraph: "Movies") {
  AND: [PersonWroteMoviesConnectionWhere!] @source(name: "AND", type: "[PersonWroteMoviesConnectionWhere!]", subgraph: "Movies")
  OR: [PersonWroteMoviesConnectionWhere!] @source(name: "OR", type: "[PersonWroteMoviesConnectionWhere!]", subgraph: "Movies")
  NOT: PersonWroteMoviesConnectionWhere @source(name: "NOT", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  node: MovieWhere @source(name: "node", type: "MovieWhere", subgraph: "Movies")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "node_NOT", type: "MovieWhere", subgraph: "Movies")
}

input PersonWroteMoviesCreateFieldInput @source(name: "PersonWroteMoviesCreateFieldInput", subgraph: "Movies") {
  node: MovieCreateInput! @source(name: "node", type: "MovieCreateInput!", subgraph: "Movies")
}

input PersonWroteMoviesDeleteFieldInput @source(name: "PersonWroteMoviesDeleteFieldInput", subgraph: "Movies") {
  where: PersonWroteMoviesConnectionWhere @source(name: "where", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  delete: MovieDeleteInput @source(name: "delete", type: "MovieDeleteInput", subgraph: "Movies")
}

input PersonWroteMoviesDisconnectFieldInput @source(name: "PersonWroteMoviesDisconnectFieldInput", subgraph: "Movies") {
  where: PersonWroteMoviesConnectionWhere @source(name: "where", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  disconnect: MovieDisconnectInput @source(name: "disconnect", type: "MovieDisconnectInput", subgraph: "Movies")
}

input PersonWroteMoviesFieldInput @source(name: "PersonWroteMoviesFieldInput", subgraph: "Movies") {
  connect: [PersonWroteMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonWroteMoviesConnectFieldInput!]", subgraph: "Movies")
  create: [PersonWroteMoviesCreateFieldInput!] @source(name: "create", type: "[PersonWroteMoviesCreateFieldInput!]", subgraph: "Movies")
}

input PersonWroteMoviesNodeAggregationWhereInput @source(name: "PersonWroteMoviesNodeAggregationWhereInput", subgraph: "Movies") {
  AND: [PersonWroteMoviesNodeAggregationWhereInput!] @source(name: "AND", type: "[PersonWroteMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  OR: [PersonWroteMoviesNodeAggregationWhereInput!] @source(name: "OR", type: "[PersonWroteMoviesNodeAggregationWhereInput!]", subgraph: "Movies")
  NOT: PersonWroteMoviesNodeAggregationWhereInput @source(name: "NOT", type: "PersonWroteMoviesNodeAggregationWhereInput", subgraph: "Movies")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MIN_EQUAL: BigInt @source(name: "released_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  released_MAX_EQUAL: BigInt @source(name: "released_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  released_SUM_EQUAL: BigInt @source(name: "released_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_EQUAL: BigInt @source(name: "released_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GT", type: "BigInt", subgraph: "Movies")
  released_MIN_GT: BigInt @source(name: "released_MIN_GT", type: "BigInt", subgraph: "Movies")
  released_MAX_GT: BigInt @source(name: "released_MAX_GT", type: "BigInt", subgraph: "Movies")
  released_SUM_GT: BigInt @source(name: "released_SUM_GT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GT: BigInt @source(name: "released_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_GTE", type: "BigInt", subgraph: "Movies")
  released_MIN_GTE: BigInt @source(name: "released_MIN_GTE", type: "BigInt", subgraph: "Movies")
  released_MAX_GTE: BigInt @source(name: "released_MAX_GTE", type: "BigInt", subgraph: "Movies")
  released_SUM_GTE: BigInt @source(name: "released_SUM_GTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_GTE: BigInt @source(name: "released_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LT", type: "BigInt", subgraph: "Movies")
  released_MIN_LT: BigInt @source(name: "released_MIN_LT", type: "BigInt", subgraph: "Movies")
  released_MAX_LT: BigInt @source(name: "released_MAX_LT", type: "BigInt", subgraph: "Movies")
  released_SUM_LT: BigInt @source(name: "released_SUM_LT", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LT: BigInt @source(name: "released_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "released_LTE", type: "BigInt", subgraph: "Movies")
  released_MIN_LTE: BigInt @source(name: "released_MIN_LTE", type: "BigInt", subgraph: "Movies")
  released_MAX_LTE: BigInt @source(name: "released_MAX_LTE", type: "BigInt", subgraph: "Movies")
  released_SUM_LTE: BigInt @source(name: "released_SUM_LTE", type: "BigInt", subgraph: "Movies")
  released_AVERAGE_LTE: BigInt @source(name: "released_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_EQUAL", type: "String", subgraph: "Movies")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GT: Float @source(name: "tagline_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GT: Int @source(name: "tagline_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GT: Int @source(name: "tagline_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_GTE: Float @source(name: "tagline_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_GTE: Int @source(name: "tagline_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_GTE: Int @source(name: "tagline_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LT", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LT: Float @source(name: "tagline_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LT: Int @source(name: "tagline_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LT: Int @source(name: "tagline_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "tagline_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_LONGEST_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "tagline_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  tagline_AVERAGE_LENGTH_LTE: Float @source(name: "tagline_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  tagline_LONGEST_LENGTH_LTE: Int @source(name: "tagline_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  tagline_SHORTEST_LENGTH_LTE: Int @source(name: "tagline_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_EQUAL", type: "String", subgraph: "Movies")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_EQUAL: Float @source(name: "title_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_EQUAL: Int @source(name: "title_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_EQUAL: Int @source(name: "title_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GT: Float @source(name: "title_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GT: Int @source(name: "title_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GT: Int @source(name: "title_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_GTE: Float @source(name: "title_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_GTE: Int @source(name: "title_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_GTE: Int @source(name: "title_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LT", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LT: Float @source(name: "title_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LT: Int @source(name: "title_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LT: Int @source(name: "title_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "title_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_LONGEST_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "title_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  title_AVERAGE_LENGTH_LTE: Float @source(name: "title_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  title_LONGEST_LENGTH_LTE: Int @source(name: "title_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  title_SHORTEST_LENGTH_LTE: Int @source(name: "title_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MIN_EQUAL: BigInt @source(name: "votes_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_MAX_EQUAL: BigInt @source(name: "votes_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_SUM_EQUAL: BigInt @source(name: "votes_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_EQUAL: BigInt @source(name: "votes_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GT", type: "BigInt", subgraph: "Movies")
  votes_MIN_GT: BigInt @source(name: "votes_MIN_GT", type: "BigInt", subgraph: "Movies")
  votes_MAX_GT: BigInt @source(name: "votes_MAX_GT", type: "BigInt", subgraph: "Movies")
  votes_SUM_GT: BigInt @source(name: "votes_SUM_GT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GT: BigInt @source(name: "votes_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_GTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_GTE: BigInt @source(name: "votes_MIN_GTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_GTE: BigInt @source(name: "votes_MAX_GTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_GTE: BigInt @source(name: "votes_SUM_GTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_GTE: BigInt @source(name: "votes_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LT", type: "BigInt", subgraph: "Movies")
  votes_MIN_LT: BigInt @source(name: "votes_MIN_LT", type: "BigInt", subgraph: "Movies")
  votes_MAX_LT: BigInt @source(name: "votes_MAX_LT", type: "BigInt", subgraph: "Movies")
  votes_SUM_LT: BigInt @source(name: "votes_SUM_LT", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LT: BigInt @source(name: "votes_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "votes_LTE", type: "BigInt", subgraph: "Movies")
  votes_MIN_LTE: BigInt @source(name: "votes_MIN_LTE", type: "BigInt", subgraph: "Movies")
  votes_MAX_LTE: BigInt @source(name: "votes_MAX_LTE", type: "BigInt", subgraph: "Movies")
  votes_SUM_LTE: BigInt @source(name: "votes_SUM_LTE", type: "BigInt", subgraph: "Movies")
  votes_AVERAGE_LTE: BigInt @source(name: "votes_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
}

input PersonWroteMoviesUpdateConnectionInput @source(name: "PersonWroteMoviesUpdateConnectionInput", subgraph: "Movies") {
  node: MovieUpdateInput @source(name: "node", type: "MovieUpdateInput", subgraph: "Movies")
}

input PersonWroteMoviesUpdateFieldInput @source(name: "PersonWroteMoviesUpdateFieldInput", subgraph: "Movies") {
  where: PersonWroteMoviesConnectionWhere @source(name: "where", type: "PersonWroteMoviesConnectionWhere", subgraph: "Movies")
  connect: [PersonWroteMoviesConnectFieldInput!] @source(name: "connect", type: "[PersonWroteMoviesConnectFieldInput!]", subgraph: "Movies")
  disconnect: [PersonWroteMoviesDisconnectFieldInput!] @source(name: "disconnect", type: "[PersonWroteMoviesDisconnectFieldInput!]", subgraph: "Movies")
  create: [PersonWroteMoviesCreateFieldInput!] @source(name: "create", type: "[PersonWroteMoviesCreateFieldInput!]", subgraph: "Movies")
  update: PersonWroteMoviesUpdateConnectionInput @source(name: "update", type: "PersonWroteMoviesUpdateConnectionInput", subgraph: "Movies")
  delete: [PersonWroteMoviesDeleteFieldInput!] @source(name: "delete", type: "[PersonWroteMoviesDeleteFieldInput!]", subgraph: "Movies")
}

input ReviewedPropertiesAggregationWhereInput @source(name: "ReviewedPropertiesAggregationWhereInput", subgraph: "Movies") {
  AND: [ReviewedPropertiesAggregationWhereInput!] @source(name: "AND", type: "[ReviewedPropertiesAggregationWhereInput!]", subgraph: "Movies")
  OR: [ReviewedPropertiesAggregationWhereInput!] @source(name: "OR", type: "[ReviewedPropertiesAggregationWhereInput!]", subgraph: "Movies")
  NOT: ReviewedPropertiesAggregationWhereInput @source(name: "NOT", type: "ReviewedPropertiesAggregationWhereInput", subgraph: "Movies")
  rating_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "rating_EQUAL", type: "BigInt", subgraph: "Movies")
  rating_MIN_EQUAL: BigInt @source(name: "rating_MIN_EQUAL", type: "BigInt", subgraph: "Movies")
  rating_MAX_EQUAL: BigInt @source(name: "rating_MAX_EQUAL", type: "BigInt", subgraph: "Movies")
  rating_SUM_EQUAL: BigInt @source(name: "rating_SUM_EQUAL", type: "BigInt", subgraph: "Movies")
  rating_AVERAGE_EQUAL: BigInt @source(name: "rating_AVERAGE_EQUAL", type: "BigInt", subgraph: "Movies")
  rating_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "rating_GT", type: "BigInt", subgraph: "Movies")
  rating_MIN_GT: BigInt @source(name: "rating_MIN_GT", type: "BigInt", subgraph: "Movies")
  rating_MAX_GT: BigInt @source(name: "rating_MAX_GT", type: "BigInt", subgraph: "Movies")
  rating_SUM_GT: BigInt @source(name: "rating_SUM_GT", type: "BigInt", subgraph: "Movies")
  rating_AVERAGE_GT: BigInt @source(name: "rating_AVERAGE_GT", type: "BigInt", subgraph: "Movies")
  rating_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "rating_GTE", type: "BigInt", subgraph: "Movies")
  rating_MIN_GTE: BigInt @source(name: "rating_MIN_GTE", type: "BigInt", subgraph: "Movies")
  rating_MAX_GTE: BigInt @source(name: "rating_MAX_GTE", type: "BigInt", subgraph: "Movies")
  rating_SUM_GTE: BigInt @source(name: "rating_SUM_GTE", type: "BigInt", subgraph: "Movies")
  rating_AVERAGE_GTE: BigInt @source(name: "rating_AVERAGE_GTE", type: "BigInt", subgraph: "Movies")
  rating_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "rating_LT", type: "BigInt", subgraph: "Movies")
  rating_MIN_LT: BigInt @source(name: "rating_MIN_LT", type: "BigInt", subgraph: "Movies")
  rating_MAX_LT: BigInt @source(name: "rating_MAX_LT", type: "BigInt", subgraph: "Movies")
  rating_SUM_LT: BigInt @source(name: "rating_SUM_LT", type: "BigInt", subgraph: "Movies")
  rating_AVERAGE_LT: BigInt @source(name: "rating_AVERAGE_LT", type: "BigInt", subgraph: "Movies")
  rating_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "rating_LTE", type: "BigInt", subgraph: "Movies")
  rating_MIN_LTE: BigInt @source(name: "rating_MIN_LTE", type: "BigInt", subgraph: "Movies")
  rating_MAX_LTE: BigInt @source(name: "rating_MAX_LTE", type: "BigInt", subgraph: "Movies")
  rating_SUM_LTE: BigInt @source(name: "rating_SUM_LTE", type: "BigInt", subgraph: "Movies")
  rating_AVERAGE_LTE: BigInt @source(name: "rating_AVERAGE_LTE", type: "BigInt", subgraph: "Movies")
  summary_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "summary_EQUAL", type: "String", subgraph: "Movies")
  summary_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_AVERAGE_EQUAL", type: "Float", subgraph: "Movies")
  summary_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_LONGEST_EQUAL", type: "Int", subgraph: "Movies")
  summary_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_SHORTEST_EQUAL", type: "Int", subgraph: "Movies")
  summary_AVERAGE_LENGTH_EQUAL: Float @source(name: "summary_AVERAGE_LENGTH_EQUAL", type: "Float", subgraph: "Movies")
  summary_LONGEST_LENGTH_EQUAL: Int @source(name: "summary_LONGEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  summary_SHORTEST_LENGTH_EQUAL: Int @source(name: "summary_SHORTEST_LENGTH_EQUAL", type: "Int", subgraph: "Movies")
  summary_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "summary_GT", type: "Int", subgraph: "Movies")
  summary_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_AVERAGE_GT", type: "Float", subgraph: "Movies")
  summary_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_LONGEST_GT", type: "Int", subgraph: "Movies")
  summary_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_SHORTEST_GT", type: "Int", subgraph: "Movies")
  summary_AVERAGE_LENGTH_GT: Float @source(name: "summary_AVERAGE_LENGTH_GT", type: "Float", subgraph: "Movies")
  summary_LONGEST_LENGTH_GT: Int @source(name: "summary_LONGEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  summary_SHORTEST_LENGTH_GT: Int @source(name: "summary_SHORTEST_LENGTH_GT", type: "Int", subgraph: "Movies")
  summary_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "summary_GTE", type: "Int", subgraph: "Movies")
  summary_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_AVERAGE_GTE", type: "Float", subgraph: "Movies")
  summary_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_LONGEST_GTE", type: "Int", subgraph: "Movies")
  summary_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_SHORTEST_GTE", type: "Int", subgraph: "Movies")
  summary_AVERAGE_LENGTH_GTE: Float @source(name: "summary_AVERAGE_LENGTH_GTE", type: "Float", subgraph: "Movies")
  summary_LONGEST_LENGTH_GTE: Int @source(name: "summary_LONGEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  summary_SHORTEST_LENGTH_GTE: Int @source(name: "summary_SHORTEST_LENGTH_GTE", type: "Int", subgraph: "Movies")
  summary_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "summary_LT", type: "Int", subgraph: "Movies")
  summary_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_AVERAGE_LT", type: "Float", subgraph: "Movies")
  summary_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_LONGEST_LT", type: "Int", subgraph: "Movies")
  summary_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_SHORTEST_LT", type: "Int", subgraph: "Movies")
  summary_AVERAGE_LENGTH_LT: Float @source(name: "summary_AVERAGE_LENGTH_LT", type: "Float", subgraph: "Movies")
  summary_LONGEST_LENGTH_LT: Int @source(name: "summary_LONGEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  summary_SHORTEST_LENGTH_LT: Int @source(name: "summary_SHORTEST_LENGTH_LT", type: "Int", subgraph: "Movies")
  summary_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(name: "summary_LTE", type: "Int", subgraph: "Movies")
  summary_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_AVERAGE_LTE", type: "Float", subgraph: "Movies")
  summary_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_LONGEST_LTE", type: "Int", subgraph: "Movies")
  summary_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(name: "summary_SHORTEST_LTE", type: "Int", subgraph: "Movies")
  summary_AVERAGE_LENGTH_LTE: Float @source(name: "summary_AVERAGE_LENGTH_LTE", type: "Float", subgraph: "Movies")
  summary_LONGEST_LENGTH_LTE: Int @source(name: "summary_LONGEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
  summary_SHORTEST_LENGTH_LTE: Int @source(name: "summary_SHORTEST_LENGTH_LTE", type: "Int", subgraph: "Movies")
}

input ReviewedPropertiesCreateInput @source(name: "ReviewedPropertiesCreateInput", subgraph: "Movies") {
  rating: BigInt! @source(name: "rating", type: "BigInt!", subgraph: "Movies")
  summary: String! @source(name: "summary", type: "String!", subgraph: "Movies")
}

input ReviewedPropertiesSort @source(name: "ReviewedPropertiesSort", subgraph: "Movies") {
  rating: SortDirection @source(name: "rating", type: "SortDirection", subgraph: "Movies")
  summary: SortDirection @source(name: "summary", type: "SortDirection", subgraph: "Movies")
}

input ReviewedPropertiesUpdateInput @source(name: "ReviewedPropertiesUpdateInput", subgraph: "Movies") {
  rating: BigInt @source(name: "rating", type: "BigInt", subgraph: "Movies")
  rating_INCREMENT: BigInt @source(name: "rating_INCREMENT", type: "BigInt", subgraph: "Movies")
  rating_DECREMENT: BigInt @source(name: "rating_DECREMENT", type: "BigInt", subgraph: "Movies")
  summary: String @source(name: "summary", type: "String", subgraph: "Movies")
}

input ReviewedPropertiesWhere @source(name: "ReviewedPropertiesWhere", subgraph: "Movies") {
  rating: BigInt @source(name: "rating", type: "BigInt", subgraph: "Movies")
  rating_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "rating_NOT", type: "BigInt", subgraph: "Movies")
  rating_IN: [BigInt!] @source(name: "rating_IN", type: "[BigInt!]", subgraph: "Movies")
  rating_NOT_IN: [BigInt!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "rating_NOT_IN", type: "[BigInt!]", subgraph: "Movies")
  rating_LT: BigInt @source(name: "rating_LT", type: "BigInt", subgraph: "Movies")
  rating_LTE: BigInt @source(name: "rating_LTE", type: "BigInt", subgraph: "Movies")
  rating_GT: BigInt @source(name: "rating_GT", type: "BigInt", subgraph: "Movies")
  rating_GTE: BigInt @source(name: "rating_GTE", type: "BigInt", subgraph: "Movies")
  summary: String @source(name: "summary", type: "String", subgraph: "Movies")
  summary_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "summary_NOT", type: "String", subgraph: "Movies")
  summary_IN: [String!] @source(name: "summary_IN", type: "[String!]", subgraph: "Movies")
  summary_NOT_IN: [String!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "summary_NOT_IN", type: "[String!]", subgraph: "Movies")
  summary_CONTAINS: String @source(name: "summary_CONTAINS", type: "String", subgraph: "Movies")
  summary_STARTS_WITH: String @source(name: "summary_STARTS_WITH", type: "String", subgraph: "Movies")
  summary_ENDS_WITH: String @source(name: "summary_ENDS_WITH", type: "String", subgraph: "Movies")
  summary_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "summary_NOT_CONTAINS", type: "String", subgraph: "Movies")
  summary_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "summary_NOT_STARTS_WITH", type: "String", subgraph: "Movies")
  summary_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(name: "summary_NOT_ENDS_WITH", type: "String", subgraph: "Movies")
  OR: [ReviewedPropertiesWhere!] @source(name: "OR", type: "[ReviewedPropertiesWhere!]", subgraph: "Movies")
  AND: [ReviewedPropertiesWhere!] @source(name: "AND", type: "[ReviewedPropertiesWhere!]", subgraph: "Movies")
  NOT: ReviewedPropertiesWhere @source(name: "NOT", type: "ReviewedPropertiesWhere", subgraph: "Movies")
}

scalar Any @source(name: "Any", subgraph: "Movies") @source(name: "Any", subgraph: "Movies")
"
`;

exports[`should execute MovieWithActedIn 1`] = `
{
  "data": {
    "movies": [
      {
        "peopleActedIn": [
          {
            "name": "Emil Eifrem",
          },
          {
            "name": "Hugo Weaving",
          },
        ],
        "released": 1999,
        "tagline": "Welcome to the Real World",
        "title": "The Matrix",
      },
      {
        "peopleActedIn": [
          {
            "name": "Hugo Weaving",
          },
          {
            "name": "Laurence Fishburne",
          },
        ],
        "released": 2003,
        "tagline": "Free your mind",
        "title": "The Matrix Reloaded",
      },
    ],
  },
}
`;
