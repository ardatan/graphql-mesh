// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
    
    
    
    
    
    
    @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@relationshipProperties", "@relationship", "@introspection", "@transport", "@node", "@extraSchemaDefinitionDirective"]
)
  {
    query: Query
    mutation: Mutation
    
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    \`SECURITY\` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    \`EXECUTION\` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  
  
enum join__Graph {
  MOVIES @join__graph(name: "Movies", url: "neo4j://localhost:<neo4j_port>") 
}

directive @relationshipProperties on OBJECT

directive @relationship(type: String, direction: _RelationDirections, properties: String)  on FIELD_DEFINITION

directive @introspection(subgraph: String)  repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | SCALAR | ENUM_VALUE | INPUT_FIELD_DEFINITION

directive @transport(kind: String, subgraph: String, location: String, options: TransportOptions)  repeatable on SCHEMA

directive @node on OBJECT

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

"""
A BigInt value up to 64 bits in size, which can be a number or a string if used inline, or a string only if used as a variable. Always returned as a string.
"""
scalar BigInt @join__type(graph: MOVIES) 

scalar TransportOptions @join__type(graph: MOVIES) 

scalar _DirectiveExtensions @join__type(graph: MOVIES) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{kind: "neo4j", subgraph: "Movies", location: "neo4j://localhost:<neo4j_port>", options: {database: "neo4j", auth: {type: "basic", username: "neo4j", password: "password"}}}]}
) @join__type(graph: MOVIES)  {
  moviesConnection(first: Int, after: String, where: MovieWhere, sort: [MovieSort!]) : MoviesConnection!
  movies(where: MovieWhere, limit: Int, offset: Int, sort: [MovieSort!]) : [Movie!]!
  peopleConnection(first: Int, after: String, where: PersonWhere, sort: [PersonSort!]) : PeopleConnection!
  people(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]!
}

type Mutation @join__type(graph: MOVIES)  {
  createMovies(input: [MovieCreateInput!]!) : CreateMoviesMutationResponse!
  deleteMovies(where: MovieWhere, delete: MovieDeleteInput) : DeleteInfo!
  updateMovies(where: MovieWhere, update: MovieUpdateInput) : UpdateMoviesMutationResponse!
  createPeople(input: [PersonCreateInput!]!) : CreatePeopleMutationResponse!
  deletePeople(where: PersonWhere, delete: PersonDeleteInput) : DeleteInfo!
  updatePeople(where: PersonWhere, update: PersonUpdateInput) : UpdatePeopleMutationResponse!
}

"""
The edge properties for the following fields:
* Movie.peopleActedIn
* Person.actedInMovies
"""
type ActedInProperties @relationshipProperties @introspection @join__type(graph: MOVIES)  {
  roles: [String!]! @introspection
}

type BigIntAggregateSelection @join__type(graph: MOVIES)  {
  max: BigInt
  min: BigInt
  average: BigInt
  sum: BigInt
}

type Count @join__type(graph: MOVIES)  {
  nodes: Int!
}

type CountConnection @join__type(graph: MOVIES)  {
  nodes: Int!
  edges: Int!
}

"""
Information about the number of nodes and relationships created during a create mutation
"""
type CreateInfo @join__type(graph: MOVIES)  {
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateMoviesMutationResponse @join__type(graph: MOVIES)  {
  info: CreateInfo!
  movies: [Movie!]!
}

type CreatePeopleMutationResponse @join__type(graph: MOVIES)  {
  info: CreateInfo!
  people: [Person!]!
}

"""
Information about the number of nodes and relationships deleted during a delete mutation
"""
type DeleteInfo @join__type(graph: MOVIES)  {
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

type Movie @introspection @node @join__type(graph: MOVIES)  {
  released: BigInt! @introspection
  tagline: String @introspection
  title: String! @introspection
  peopleActedIn(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]! @introspection @relationship(type: "ACTED_IN", direction: IN, properties: "ActedInProperties") 
  peopleActedInConnection(
    where: MoviePeopleActedInConnectionWhere
    first: Int
    after: String
    sort: [MoviePeopleActedInConnectionSort!]
  ): MoviePeopleActedInConnection!
  peopleDirected(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]! @introspection @relationship(type: "DIRECTED", direction: IN) 
  peopleDirectedConnection(
    where: MoviePeopleDirectedConnectionWhere
    first: Int
    after: String
    sort: [MoviePeopleDirectedConnectionSort!]
  ): MoviePeopleDirectedConnection!
  peopleProduced(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]! @introspection @relationship(type: "PRODUCED", direction: IN) 
  peopleProducedConnection(
    where: MoviePeopleProducedConnectionWhere
    first: Int
    after: String
    sort: [MoviePeopleProducedConnectionSort!]
  ): MoviePeopleProducedConnection!
  peopleReviewed(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]! @introspection @relationship(type: "REVIEWED", direction: IN, properties: "ReviewedProperties") 
  peopleReviewedConnection(
    where: MoviePeopleReviewedConnectionWhere
    first: Int
    after: String
    sort: [MoviePeopleReviewedConnectionSort!]
  ): MoviePeopleReviewedConnection!
  peopleWrote(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]! @introspection @relationship(type: "WROTE", direction: IN) 
  peopleWroteConnection(
    where: MoviePeopleWroteConnectionWhere
    first: Int
    after: String
    sort: [MoviePeopleWroteConnectionSort!]
  ): MoviePeopleWroteConnection!
}

type MovieAggregate @join__type(graph: MOVIES)  {
  count: Count!
  node: MovieAggregateNode!
}

type MovieAggregateNode @join__type(graph: MOVIES)  {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
}

type MovieEdge @join__type(graph: MOVIES)  {
  cursor: String!
  node: Movie!
}

type MoviePeopleActedInConnection @join__type(graph: MOVIES)  {
  edges: [MoviePeopleActedInRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: MoviePersonPeopleActedInAggregateSelection!
}

type MoviePeopleActedInRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
  properties: ActedInProperties!
}

type MoviePeopleDirectedConnection @join__type(graph: MOVIES)  {
  edges: [MoviePeopleDirectedRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: MoviePersonPeopleDirectedAggregateSelection!
}

type MoviePeopleDirectedRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
}

type MoviePeopleProducedConnection @join__type(graph: MOVIES)  {
  edges: [MoviePeopleProducedRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: MoviePersonPeopleProducedAggregateSelection!
}

type MoviePeopleProducedRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
}

type MoviePeopleReviewedConnection @join__type(graph: MOVIES)  {
  edges: [MoviePeopleReviewedRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: MoviePersonPeopleReviewedAggregateSelection!
}

type MoviePeopleReviewedRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
  properties: ReviewedProperties!
}

type MoviePeopleWroteConnection @join__type(graph: MOVIES)  {
  edges: [MoviePeopleWroteRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: MoviePersonPeopleWroteAggregateSelection!
}

type MoviePeopleWroteRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
}

type MoviePersonPeopleActedInAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: MoviePersonPeopleActedInNodeAggregateSelection
}

type MoviePersonPeopleActedInNodeAggregateSelection @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleDirectedAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: MoviePersonPeopleDirectedNodeAggregateSelection
}

type MoviePersonPeopleDirectedNodeAggregateSelection @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleProducedAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: MoviePersonPeopleProducedNodeAggregateSelection
}

type MoviePersonPeopleProducedNodeAggregateSelection @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleReviewedAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: MoviePersonPeopleReviewedNodeAggregateSelection
  edge: MoviePersonPeopleReviewedEdgeAggregateSelection
}

type MoviePersonPeopleReviewedEdgeAggregateSelection @join__type(graph: MOVIES)  {
  rating: BigIntAggregateSelection!
  summary: StringAggregateSelection!
}

type MoviePersonPeopleReviewedNodeAggregateSelection @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleWroteAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: MoviePersonPeopleWroteNodeAggregateSelection
}

type MoviePersonPeopleWroteNodeAggregateSelection @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviesConnection @join__type(graph: MOVIES)  {
  edges: [MovieEdge!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: MovieAggregate!
}

"""
Pagination information (Relay)
"""
type PageInfo @join__type(graph: MOVIES)  {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PeopleConnection @join__type(graph: MOVIES)  {
  edges: [PersonEdge!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonAggregate!
}

type Person @introspection @node @join__type(graph: MOVIES)  {
  born: BigInt @introspection
  name: String! @introspection
  actedInMovies(where: MovieWhere, limit: Int, offset: Int, sort: [MovieSort!]) : [Movie!]! @introspection @relationship(type: "ACTED_IN", direction: OUT, properties: "ActedInProperties") 
  actedInMoviesConnection(
    where: PersonActedInMoviesConnectionWhere
    first: Int
    after: String
    sort: [PersonActedInMoviesConnectionSort!]
  ): PersonActedInMoviesConnection!
  directedMovies(where: MovieWhere, limit: Int, offset: Int, sort: [MovieSort!]) : [Movie!]! @introspection @relationship(type: "DIRECTED", direction: OUT) 
  directedMoviesConnection(
    where: PersonDirectedMoviesConnectionWhere
    first: Int
    after: String
    sort: [PersonDirectedMoviesConnectionSort!]
  ): PersonDirectedMoviesConnection!
  followsPeople(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]! @introspection @relationship(type: "FOLLOWS", direction: OUT) 
  followsPeopleConnection(
    where: PersonFollowsPeopleConnectionWhere
    first: Int
    after: String
    sort: [PersonFollowsPeopleConnectionSort!]
  ): PersonFollowsPeopleConnection!
  peopleFollows(where: PersonWhere, limit: Int, offset: Int, sort: [PersonSort!]) : [Person!]! @introspection @relationship(type: "FOLLOWS", direction: IN) 
  peopleFollowsConnection(
    where: PersonPeopleFollowsConnectionWhere
    first: Int
    after: String
    sort: [PersonPeopleFollowsConnectionSort!]
  ): PersonPeopleFollowsConnection!
  producedMovies(where: MovieWhere, limit: Int, offset: Int, sort: [MovieSort!]) : [Movie!]! @introspection @relationship(type: "PRODUCED", direction: OUT) 
  producedMoviesConnection(
    where: PersonProducedMoviesConnectionWhere
    first: Int
    after: String
    sort: [PersonProducedMoviesConnectionSort!]
  ): PersonProducedMoviesConnection!
  reviewedMovies(where: MovieWhere, limit: Int, offset: Int, sort: [MovieSort!]) : [Movie!]! @introspection @relationship(type: "REVIEWED", direction: OUT, properties: "ReviewedProperties") 
  reviewedMoviesConnection(
    where: PersonReviewedMoviesConnectionWhere
    first: Int
    after: String
    sort: [PersonReviewedMoviesConnectionSort!]
  ): PersonReviewedMoviesConnection!
  wroteMovies(where: MovieWhere, limit: Int, offset: Int, sort: [MovieSort!]) : [Movie!]! @introspection @relationship(type: "WROTE", direction: OUT) 
  wroteMoviesConnection(
    where: PersonWroteMoviesConnectionWhere
    first: Int
    after: String
    sort: [PersonWroteMoviesConnectionSort!]
  ): PersonWroteMoviesConnection!
}

type PersonActedInMoviesConnection @join__type(graph: MOVIES)  {
  edges: [PersonActedInMoviesRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonMovieActedInMoviesAggregateSelection!
}

type PersonActedInMoviesRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Movie!
  properties: ActedInProperties!
}

type PersonAggregate @join__type(graph: MOVIES)  {
  count: Count!
  node: PersonAggregateNode!
}

type PersonAggregateNode @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type PersonDirectedMoviesConnection @join__type(graph: MOVIES)  {
  edges: [PersonDirectedMoviesRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonMovieDirectedMoviesAggregateSelection!
}

type PersonDirectedMoviesRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Movie!
}

type PersonEdge @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
}

type PersonFollowsPeopleConnection @join__type(graph: MOVIES)  {
  edges: [PersonFollowsPeopleRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonPersonFollowsPeopleAggregateSelection!
}

type PersonFollowsPeopleRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
}

type PersonMovieActedInMoviesAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: PersonMovieActedInMoviesNodeAggregateSelection
}

type PersonMovieActedInMoviesNodeAggregateSelection @join__type(graph: MOVIES)  {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
}

type PersonMovieDirectedMoviesAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: PersonMovieDirectedMoviesNodeAggregateSelection
}

type PersonMovieDirectedMoviesNodeAggregateSelection @join__type(graph: MOVIES)  {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
}

type PersonMovieProducedMoviesAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: PersonMovieProducedMoviesNodeAggregateSelection
}

type PersonMovieProducedMoviesNodeAggregateSelection @join__type(graph: MOVIES)  {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
}

type PersonMovieReviewedMoviesAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: PersonMovieReviewedMoviesNodeAggregateSelection
  edge: PersonMovieReviewedMoviesEdgeAggregateSelection
}

type PersonMovieReviewedMoviesEdgeAggregateSelection @join__type(graph: MOVIES)  {
  rating: BigIntAggregateSelection!
  summary: StringAggregateSelection!
}

type PersonMovieReviewedMoviesNodeAggregateSelection @join__type(graph: MOVIES)  {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
}

type PersonMovieWroteMoviesAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: PersonMovieWroteMoviesNodeAggregateSelection
}

type PersonMovieWroteMoviesNodeAggregateSelection @join__type(graph: MOVIES)  {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
}

type PersonPeopleFollowsConnection @join__type(graph: MOVIES)  {
  edges: [PersonPeopleFollowsRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonPersonPeopleFollowsAggregateSelection!
}

type PersonPeopleFollowsRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Person!
}

type PersonPersonFollowsPeopleAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: PersonPersonFollowsPeopleNodeAggregateSelection
}

type PersonPersonFollowsPeopleNodeAggregateSelection @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type PersonPersonPeopleFollowsAggregateSelection @join__type(graph: MOVIES)  {
  count: CountConnection!
  node: PersonPersonPeopleFollowsNodeAggregateSelection
}

type PersonPersonPeopleFollowsNodeAggregateSelection @join__type(graph: MOVIES)  {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type PersonProducedMoviesConnection @join__type(graph: MOVIES)  {
  edges: [PersonProducedMoviesRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonMovieProducedMoviesAggregateSelection!
}

type PersonProducedMoviesRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Movie!
}

type PersonReviewedMoviesConnection @join__type(graph: MOVIES)  {
  edges: [PersonReviewedMoviesRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonMovieReviewedMoviesAggregateSelection!
}

type PersonReviewedMoviesRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Movie!
  properties: ReviewedProperties!
}

type PersonWroteMoviesConnection @join__type(graph: MOVIES)  {
  edges: [PersonWroteMoviesRelationship!]!
  totalCount: Int!
  pageInfo: PageInfo!
  aggregate: PersonMovieWroteMoviesAggregateSelection!
}

type PersonWroteMoviesRelationship @join__type(graph: MOVIES)  {
  cursor: String!
  node: Movie!
}

"""
The edge properties for the following fields:
* Movie.peopleReviewed
* Person.reviewedMovies
"""
type ReviewedProperties @relationshipProperties @introspection @join__type(graph: MOVIES)  {
  rating: BigInt! @introspection
  summary: String! @introspection
}

type StringAggregateSelection @join__type(graph: MOVIES)  {
  shortest: String
  longest: String
}

"""
Information about the number of nodes and relationships created and deleted during an update mutation
"""
type UpdateInfo @join__type(graph: MOVIES)  {
  nodesCreated: Int!
  nodesDeleted: Int!
  relationshipsCreated: Int!
  relationshipsDeleted: Int!
}

type UpdateMoviesMutationResponse @join__type(graph: MOVIES)  {
  info: UpdateInfo!
  movies: [Movie!]!
}

type UpdatePeopleMutationResponse @join__type(graph: MOVIES)  {
  info: UpdateInfo!
  people: [Person!]!
}

enum _RelationDirections @join__type(graph: MOVIES)  {
  IN @join__enumValue(graph: MOVIES) 
  OUT @join__enumValue(graph: MOVIES) 
}

"""
An enum for sorting in either ascending or descending order.
"""
enum SortDirection @join__type(graph: MOVIES)  {
  """
  Sort by field values in ascending order.
  """
  ASC @join__enumValue(graph: MOVIES) 
  """
  Sort by field values in descending order.
  """
  DESC @join__enumValue(graph: MOVIES) 
}

input ActedInPropertiesCreateInput @join__type(graph: MOVIES)  {
  roles: [String!]!
}

input ActedInPropertiesSort @join__type(graph: MOVIES)  {
  roles: SortDirection
}

input ActedInPropertiesUpdateInput @join__type(graph: MOVIES)  {
  roles: ListStringMutations
  roles_SET: [String!]
  roles_POP: Int @deprecated(reason: "Please use the generic mutation 'roles: { pop: ... } }' instead.") 
  roles_PUSH: [String!] @deprecated(reason: "Please use the generic mutation 'roles: { push: ... } }' instead.") 
}

input ActedInPropertiesWhere @join__type(graph: MOVIES)  {
  roles: StringListFilters
  roles_EQ: [String!] @deprecated(reason: "Please use the relevant generic filter roles: { eq: ... }") 
  roles_INCLUDES: String @deprecated(reason: "Please use the relevant generic filter roles: { includes: ... }") 
  OR: [ActedInPropertiesWhere!]
  AND: [ActedInPropertiesWhere!]
  NOT: ActedInPropertiesWhere
}

"""
Filters for an aggregation of an BigInt field
"""
input BigIntScalarAggregationFilters @join__type(graph: MOVIES)  {
  average: BigIntScalarFilters
  max: BigIntScalarFilters
  min: BigIntScalarFilters
  sum: BigIntScalarFilters
}

"""
BigInt filters
"""
input BigIntScalarFilters @join__type(graph: MOVIES)  {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
}

"""
BigInt mutations
"""
input BigIntScalarMutations @join__type(graph: MOVIES)  {
  set: BigInt
  add: BigInt
  subtract: BigInt
}

input ConnectionAggregationCountFilterInput @join__type(graph: MOVIES)  {
  nodes: IntScalarFilters
  edges: IntScalarFilters
}

"""
Float filters
"""
input FloatScalarFilters @join__type(graph: MOVIES)  {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
}

"""
Int filters
"""
input IntScalarFilters @join__type(graph: MOVIES)  {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
}

"""
Mutations for a list for String
"""
input ListStringMutations @join__type(graph: MOVIES)  {
  set: [String!]
  push: [String!]
  pop: Int
}

input MovieConnectInput @join__type(graph: MOVIES)  {
  peopleActedIn: [MoviePeopleActedInConnectFieldInput!]
  peopleDirected: [MoviePeopleDirectedConnectFieldInput!]
  peopleProduced: [MoviePeopleProducedConnectFieldInput!]
  peopleReviewed: [MoviePeopleReviewedConnectFieldInput!]
  peopleWrote: [MoviePeopleWroteConnectFieldInput!]
}

input MovieConnectWhere @join__type(graph: MOVIES)  {
  node: MovieWhere!
}

input MovieCreateInput @join__type(graph: MOVIES)  {
  released: BigInt!
  tagline: String
  title: String!
  peopleActedIn: MoviePeopleActedInFieldInput
  peopleDirected: MoviePeopleDirectedFieldInput
  peopleProduced: MoviePeopleProducedFieldInput
  peopleReviewed: MoviePeopleReviewedFieldInput
  peopleWrote: MoviePeopleWroteFieldInput
}

input MovieDeleteInput @join__type(graph: MOVIES)  {
  peopleActedIn: [MoviePeopleActedInDeleteFieldInput!]
  peopleDirected: [MoviePeopleDirectedDeleteFieldInput!]
  peopleProduced: [MoviePeopleProducedDeleteFieldInput!]
  peopleReviewed: [MoviePeopleReviewedDeleteFieldInput!]
  peopleWrote: [MoviePeopleWroteDeleteFieldInput!]
}

input MovieDisconnectInput @join__type(graph: MOVIES)  {
  peopleActedIn: [MoviePeopleActedInDisconnectFieldInput!]
  peopleDirected: [MoviePeopleDirectedDisconnectFieldInput!]
  peopleProduced: [MoviePeopleProducedDisconnectFieldInput!]
  peopleReviewed: [MoviePeopleReviewedDisconnectFieldInput!]
  peopleWrote: [MoviePeopleWroteDisconnectFieldInput!]
}

input MoviePeopleActedInAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [MoviePeopleActedInAggregateInput!]
  OR: [MoviePeopleActedInAggregateInput!]
  NOT: MoviePeopleActedInAggregateInput
  node: MoviePeopleActedInNodeAggregationWhereInput
}

input MoviePeopleActedInConnectFieldInput @join__type(graph: MOVIES)  {
  edge: ActedInPropertiesCreateInput!
  where: PersonConnectWhere
  connect: [PersonConnectInput!]
}

input MoviePeopleActedInConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [MoviePeopleActedInConnectionAggregateInput!]
  OR: [MoviePeopleActedInConnectionAggregateInput!]
  NOT: MoviePeopleActedInConnectionAggregateInput
  node: MoviePeopleActedInNodeAggregationWhereInput
}

input MoviePeopleActedInConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return Movies where all of the related MoviePeopleActedInConnections match this filter
  """
  all: MoviePeopleActedInConnectionWhere
  """
  Return Movies where none of the related MoviePeopleActedInConnections match this filter
  """
  none: MoviePeopleActedInConnectionWhere
  """
  Return Movies where one of the related MoviePeopleActedInConnections match this filter
  """
  single: MoviePeopleActedInConnectionWhere
  """
  Return Movies where some of the related MoviePeopleActedInConnections match this filter
  """
  some: MoviePeopleActedInConnectionWhere
  """
  Filter Movies by aggregating results on related MoviePeopleActedInConnections
  """
  aggregate: MoviePeopleActedInConnectionAggregateInput
}

input MoviePeopleActedInConnectionSort @join__type(graph: MOVIES)  {
  node: PersonSort
  edge: ActedInPropertiesSort
}

input MoviePeopleActedInConnectionWhere @join__type(graph: MOVIES)  {
  AND: [MoviePeopleActedInConnectionWhere!]
  OR: [MoviePeopleActedInConnectionWhere!]
  NOT: MoviePeopleActedInConnectionWhere
  node: PersonWhere
  edge: ActedInPropertiesWhere
}

input MoviePeopleActedInCreateFieldInput @join__type(graph: MOVIES)  {
  edge: ActedInPropertiesCreateInput!
  node: PersonCreateInput!
}

input MoviePeopleActedInDeleteFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleActedInConnectionWhere
  delete: PersonDeleteInput
}

input MoviePeopleActedInDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleActedInConnectionWhere
  disconnect: PersonDisconnectInput
}

input MoviePeopleActedInFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleActedInConnectFieldInput!]
  create: [MoviePeopleActedInCreateFieldInput!]
}

input MoviePeopleActedInNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [MoviePeopleActedInNodeAggregationWhereInput!]
  OR: [MoviePeopleActedInNodeAggregationWhereInput!]
  NOT: MoviePeopleActedInNodeAggregationWhereInput
  born_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead."
  )
  born_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead."
  )
  born_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead."
  )
  born_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead."
  )
  born_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead."
  )
  born_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead."
  )
  born_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead."
  )
  born_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead."
  )
  born_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead."
  )
  born_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead."
  )
  born_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead."
  )
  born_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead."
  )
  born_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead."
  )
  born_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead."
  )
  born_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead."
  )
  born_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead."
  )
  born_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead."
  )
  born_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead."
  )
  born_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead."
  )
  born_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead."
  )
  born: BigIntScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead."
  )
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead."
  )
  name: StringScalarAggregationFilters
}

input MoviePeopleActedInUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: PersonUpdateInput
  where: MoviePeopleActedInConnectionWhere
  edge: ActedInPropertiesUpdateInput
}

input MoviePeopleActedInUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleActedInConnectFieldInput!]
  disconnect: [MoviePeopleActedInDisconnectFieldInput!]
  create: [MoviePeopleActedInCreateFieldInput!]
  update: MoviePeopleActedInUpdateConnectionInput
  delete: [MoviePeopleActedInDeleteFieldInput!]
}

input MoviePeopleDirectedAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [MoviePeopleDirectedAggregateInput!]
  OR: [MoviePeopleDirectedAggregateInput!]
  NOT: MoviePeopleDirectedAggregateInput
  node: MoviePeopleDirectedNodeAggregationWhereInput
}

input MoviePeopleDirectedConnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonConnectWhere
  connect: [PersonConnectInput!]
}

input MoviePeopleDirectedConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [MoviePeopleDirectedConnectionAggregateInput!]
  OR: [MoviePeopleDirectedConnectionAggregateInput!]
  NOT: MoviePeopleDirectedConnectionAggregateInput
  node: MoviePeopleDirectedNodeAggregationWhereInput
}

input MoviePeopleDirectedConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return Movies where all of the related MoviePeopleDirectedConnections match this filter
  """
  all: MoviePeopleDirectedConnectionWhere
  """
  Return Movies where none of the related MoviePeopleDirectedConnections match this filter
  """
  none: MoviePeopleDirectedConnectionWhere
  """
  Return Movies where one of the related MoviePeopleDirectedConnections match this filter
  """
  single: MoviePeopleDirectedConnectionWhere
  """
  Return Movies where some of the related MoviePeopleDirectedConnections match this filter
  """
  some: MoviePeopleDirectedConnectionWhere
  """
  Filter Movies by aggregating results on related MoviePeopleDirectedConnections
  """
  aggregate: MoviePeopleDirectedConnectionAggregateInput
}

input MoviePeopleDirectedConnectionSort @join__type(graph: MOVIES)  {
  node: PersonSort
}

input MoviePeopleDirectedConnectionWhere @join__type(graph: MOVIES)  {
  AND: [MoviePeopleDirectedConnectionWhere!]
  OR: [MoviePeopleDirectedConnectionWhere!]
  NOT: MoviePeopleDirectedConnectionWhere
  node: PersonWhere
}

input MoviePeopleDirectedCreateFieldInput @join__type(graph: MOVIES)  {
  node: PersonCreateInput!
}

input MoviePeopleDirectedDeleteFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleDirectedConnectionWhere
  delete: PersonDeleteInput
}

input MoviePeopleDirectedDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleDirectedConnectionWhere
  disconnect: PersonDisconnectInput
}

input MoviePeopleDirectedFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleDirectedConnectFieldInput!]
  create: [MoviePeopleDirectedCreateFieldInput!]
}

input MoviePeopleDirectedNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [MoviePeopleDirectedNodeAggregationWhereInput!]
  OR: [MoviePeopleDirectedNodeAggregationWhereInput!]
  NOT: MoviePeopleDirectedNodeAggregationWhereInput
  born_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead."
  )
  born_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead."
  )
  born_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead."
  )
  born_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead."
  )
  born_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead."
  )
  born_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead."
  )
  born_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead."
  )
  born_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead."
  )
  born_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead."
  )
  born_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead."
  )
  born_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead."
  )
  born_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead."
  )
  born_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead."
  )
  born_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead."
  )
  born_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead."
  )
  born_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead."
  )
  born_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead."
  )
  born_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead."
  )
  born_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead."
  )
  born_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead."
  )
  born: BigIntScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead."
  )
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead."
  )
  name: StringScalarAggregationFilters
}

input MoviePeopleDirectedUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: PersonUpdateInput
  where: MoviePeopleDirectedConnectionWhere
}

input MoviePeopleDirectedUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleDirectedConnectFieldInput!]
  disconnect: [MoviePeopleDirectedDisconnectFieldInput!]
  create: [MoviePeopleDirectedCreateFieldInput!]
  update: MoviePeopleDirectedUpdateConnectionInput
  delete: [MoviePeopleDirectedDeleteFieldInput!]
}

input MoviePeopleProducedAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [MoviePeopleProducedAggregateInput!]
  OR: [MoviePeopleProducedAggregateInput!]
  NOT: MoviePeopleProducedAggregateInput
  node: MoviePeopleProducedNodeAggregationWhereInput
}

input MoviePeopleProducedConnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonConnectWhere
  connect: [PersonConnectInput!]
}

input MoviePeopleProducedConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [MoviePeopleProducedConnectionAggregateInput!]
  OR: [MoviePeopleProducedConnectionAggregateInput!]
  NOT: MoviePeopleProducedConnectionAggregateInput
  node: MoviePeopleProducedNodeAggregationWhereInput
}

input MoviePeopleProducedConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return Movies where all of the related MoviePeopleProducedConnections match this filter
  """
  all: MoviePeopleProducedConnectionWhere
  """
  Return Movies where none of the related MoviePeopleProducedConnections match this filter
  """
  none: MoviePeopleProducedConnectionWhere
  """
  Return Movies where one of the related MoviePeopleProducedConnections match this filter
  """
  single: MoviePeopleProducedConnectionWhere
  """
  Return Movies where some of the related MoviePeopleProducedConnections match this filter
  """
  some: MoviePeopleProducedConnectionWhere
  """
  Filter Movies by aggregating results on related MoviePeopleProducedConnections
  """
  aggregate: MoviePeopleProducedConnectionAggregateInput
}

input MoviePeopleProducedConnectionSort @join__type(graph: MOVIES)  {
  node: PersonSort
}

input MoviePeopleProducedConnectionWhere @join__type(graph: MOVIES)  {
  AND: [MoviePeopleProducedConnectionWhere!]
  OR: [MoviePeopleProducedConnectionWhere!]
  NOT: MoviePeopleProducedConnectionWhere
  node: PersonWhere
}

input MoviePeopleProducedCreateFieldInput @join__type(graph: MOVIES)  {
  node: PersonCreateInput!
}

input MoviePeopleProducedDeleteFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleProducedConnectionWhere
  delete: PersonDeleteInput
}

input MoviePeopleProducedDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleProducedConnectionWhere
  disconnect: PersonDisconnectInput
}

input MoviePeopleProducedFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleProducedConnectFieldInput!]
  create: [MoviePeopleProducedCreateFieldInput!]
}

input MoviePeopleProducedNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [MoviePeopleProducedNodeAggregationWhereInput!]
  OR: [MoviePeopleProducedNodeAggregationWhereInput!]
  NOT: MoviePeopleProducedNodeAggregationWhereInput
  born_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead."
  )
  born_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead."
  )
  born_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead."
  )
  born_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead."
  )
  born_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead."
  )
  born_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead."
  )
  born_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead."
  )
  born_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead."
  )
  born_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead."
  )
  born_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead."
  )
  born_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead."
  )
  born_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead."
  )
  born_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead."
  )
  born_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead."
  )
  born_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead."
  )
  born_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead."
  )
  born_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead."
  )
  born_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead."
  )
  born_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead."
  )
  born_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead."
  )
  born: BigIntScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead."
  )
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead."
  )
  name: StringScalarAggregationFilters
}

input MoviePeopleProducedUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: PersonUpdateInput
  where: MoviePeopleProducedConnectionWhere
}

input MoviePeopleProducedUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleProducedConnectFieldInput!]
  disconnect: [MoviePeopleProducedDisconnectFieldInput!]
  create: [MoviePeopleProducedCreateFieldInput!]
  update: MoviePeopleProducedUpdateConnectionInput
  delete: [MoviePeopleProducedDeleteFieldInput!]
}

input MoviePeopleReviewedAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [MoviePeopleReviewedAggregateInput!]
  OR: [MoviePeopleReviewedAggregateInput!]
  NOT: MoviePeopleReviewedAggregateInput
  node: MoviePeopleReviewedNodeAggregationWhereInput
  edge: ReviewedPropertiesAggregationWhereInput
}

input MoviePeopleReviewedConnectFieldInput @join__type(graph: MOVIES)  {
  edge: ReviewedPropertiesCreateInput!
  where: PersonConnectWhere
  connect: [PersonConnectInput!]
}

input MoviePeopleReviewedConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [MoviePeopleReviewedConnectionAggregateInput!]
  OR: [MoviePeopleReviewedConnectionAggregateInput!]
  NOT: MoviePeopleReviewedConnectionAggregateInput
  node: MoviePeopleReviewedNodeAggregationWhereInput
  edge: ReviewedPropertiesAggregationWhereInput
}

input MoviePeopleReviewedConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return Movies where all of the related MoviePeopleReviewedConnections match this filter
  """
  all: MoviePeopleReviewedConnectionWhere
  """
  Return Movies where none of the related MoviePeopleReviewedConnections match this filter
  """
  none: MoviePeopleReviewedConnectionWhere
  """
  Return Movies where one of the related MoviePeopleReviewedConnections match this filter
  """
  single: MoviePeopleReviewedConnectionWhere
  """
  Return Movies where some of the related MoviePeopleReviewedConnections match this filter
  """
  some: MoviePeopleReviewedConnectionWhere
  """
  Filter Movies by aggregating results on related MoviePeopleReviewedConnections
  """
  aggregate: MoviePeopleReviewedConnectionAggregateInput
}

input MoviePeopleReviewedConnectionSort @join__type(graph: MOVIES)  {
  node: PersonSort
  edge: ReviewedPropertiesSort
}

input MoviePeopleReviewedConnectionWhere @join__type(graph: MOVIES)  {
  AND: [MoviePeopleReviewedConnectionWhere!]
  OR: [MoviePeopleReviewedConnectionWhere!]
  NOT: MoviePeopleReviewedConnectionWhere
  node: PersonWhere
  edge: ReviewedPropertiesWhere
}

input MoviePeopleReviewedCreateFieldInput @join__type(graph: MOVIES)  {
  edge: ReviewedPropertiesCreateInput!
  node: PersonCreateInput!
}

input MoviePeopleReviewedDeleteFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleReviewedConnectionWhere
  delete: PersonDeleteInput
}

input MoviePeopleReviewedDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleReviewedConnectionWhere
  disconnect: PersonDisconnectInput
}

input MoviePeopleReviewedFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleReviewedConnectFieldInput!]
  create: [MoviePeopleReviewedCreateFieldInput!]
}

input MoviePeopleReviewedNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [MoviePeopleReviewedNodeAggregationWhereInput!]
  OR: [MoviePeopleReviewedNodeAggregationWhereInput!]
  NOT: MoviePeopleReviewedNodeAggregationWhereInput
  born_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead."
  )
  born_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead."
  )
  born_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead."
  )
  born_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead."
  )
  born_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead."
  )
  born_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead."
  )
  born_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead."
  )
  born_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead."
  )
  born_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead."
  )
  born_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead."
  )
  born_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead."
  )
  born_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead."
  )
  born_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead."
  )
  born_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead."
  )
  born_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead."
  )
  born_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead."
  )
  born_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead."
  )
  born_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead."
  )
  born_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead."
  )
  born_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead."
  )
  born: BigIntScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead."
  )
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead."
  )
  name: StringScalarAggregationFilters
}

input MoviePeopleReviewedUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: PersonUpdateInput
  where: MoviePeopleReviewedConnectionWhere
  edge: ReviewedPropertiesUpdateInput
}

input MoviePeopleReviewedUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleReviewedConnectFieldInput!]
  disconnect: [MoviePeopleReviewedDisconnectFieldInput!]
  create: [MoviePeopleReviewedCreateFieldInput!]
  update: MoviePeopleReviewedUpdateConnectionInput
  delete: [MoviePeopleReviewedDeleteFieldInput!]
}

input MoviePeopleWroteAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [MoviePeopleWroteAggregateInput!]
  OR: [MoviePeopleWroteAggregateInput!]
  NOT: MoviePeopleWroteAggregateInput
  node: MoviePeopleWroteNodeAggregationWhereInput
}

input MoviePeopleWroteConnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonConnectWhere
  connect: [PersonConnectInput!]
}

input MoviePeopleWroteConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [MoviePeopleWroteConnectionAggregateInput!]
  OR: [MoviePeopleWroteConnectionAggregateInput!]
  NOT: MoviePeopleWroteConnectionAggregateInput
  node: MoviePeopleWroteNodeAggregationWhereInput
}

input MoviePeopleWroteConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return Movies where all of the related MoviePeopleWroteConnections match this filter
  """
  all: MoviePeopleWroteConnectionWhere
  """
  Return Movies where none of the related MoviePeopleWroteConnections match this filter
  """
  none: MoviePeopleWroteConnectionWhere
  """
  Return Movies where one of the related MoviePeopleWroteConnections match this filter
  """
  single: MoviePeopleWroteConnectionWhere
  """
  Return Movies where some of the related MoviePeopleWroteConnections match this filter
  """
  some: MoviePeopleWroteConnectionWhere
  """
  Filter Movies by aggregating results on related MoviePeopleWroteConnections
  """
  aggregate: MoviePeopleWroteConnectionAggregateInput
}

input MoviePeopleWroteConnectionSort @join__type(graph: MOVIES)  {
  node: PersonSort
}

input MoviePeopleWroteConnectionWhere @join__type(graph: MOVIES)  {
  AND: [MoviePeopleWroteConnectionWhere!]
  OR: [MoviePeopleWroteConnectionWhere!]
  NOT: MoviePeopleWroteConnectionWhere
  node: PersonWhere
}

input MoviePeopleWroteCreateFieldInput @join__type(graph: MOVIES)  {
  node: PersonCreateInput!
}

input MoviePeopleWroteDeleteFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleWroteConnectionWhere
  delete: PersonDeleteInput
}

input MoviePeopleWroteDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: MoviePeopleWroteConnectionWhere
  disconnect: PersonDisconnectInput
}

input MoviePeopleWroteFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleWroteConnectFieldInput!]
  create: [MoviePeopleWroteCreateFieldInput!]
}

input MoviePeopleWroteNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [MoviePeopleWroteNodeAggregationWhereInput!]
  OR: [MoviePeopleWroteNodeAggregationWhereInput!]
  NOT: MoviePeopleWroteNodeAggregationWhereInput
  born_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead."
  )
  born_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead."
  )
  born_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead."
  )
  born_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead."
  )
  born_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead."
  )
  born_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead."
  )
  born_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead."
  )
  born_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead."
  )
  born_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead."
  )
  born_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead."
  )
  born_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead."
  )
  born_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead."
  )
  born_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead."
  )
  born_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead."
  )
  born_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead."
  )
  born_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead."
  )
  born_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead."
  )
  born_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead."
  )
  born_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead."
  )
  born_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead."
  )
  born: BigIntScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead."
  )
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead."
  )
  name: StringScalarAggregationFilters
}

input MoviePeopleWroteUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: PersonUpdateInput
  where: MoviePeopleWroteConnectionWhere
}

input MoviePeopleWroteUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [MoviePeopleWroteConnectFieldInput!]
  disconnect: [MoviePeopleWroteDisconnectFieldInput!]
  create: [MoviePeopleWroteCreateFieldInput!]
  update: MoviePeopleWroteUpdateConnectionInput
  delete: [MoviePeopleWroteDeleteFieldInput!]
}

input MovieRelationshipFilters @join__type(graph: MOVIES)  {
  """
  Filter type where all of the related Movies match this filter
  """
  all: MovieWhere
  """
  Filter type where none of the related Movies match this filter
  """
  none: MovieWhere
  """
  Filter type where one of the related Movies match this filter
  """
  single: MovieWhere
  """
  Filter type where some of the related Movies match this filter
  """
  some: MovieWhere
}

"""
Fields to sort Movies by. The order in which sorts are applied is not guaranteed when specifying many fields in one MovieSort object.
"""
input MovieSort @join__type(graph: MOVIES)  {
  released: SortDirection
  tagline: SortDirection
  title: SortDirection
}

input MovieUpdateInput @join__type(graph: MOVIES)  {
  released: BigIntScalarMutations
  released_SET: BigInt
  released_INCREMENT: BigInt @deprecated(
    reason: "Please use the relevant generic mutation 'released: { increment: ... } }' instead."
  )
  released_DECREMENT: BigInt @deprecated(
    reason: "Please use the relevant generic mutation 'released: { decrement: ... } }' instead."
  )
  tagline: StringScalarMutations
  tagline_SET: String
  title: StringScalarMutations
  title_SET: String
  peopleActedIn: [MoviePeopleActedInUpdateFieldInput!]
  peopleDirected: [MoviePeopleDirectedUpdateFieldInput!]
  peopleProduced: [MoviePeopleProducedUpdateFieldInput!]
  peopleReviewed: [MoviePeopleReviewedUpdateFieldInput!]
  peopleWrote: [MoviePeopleWroteUpdateFieldInput!]
}

input MovieWhere @join__type(graph: MOVIES)  {
  released: BigIntScalarFilters
  released_EQ: BigInt @deprecated(reason: "Please use the relevant generic filter released: { eq: ... }") 
  released_IN: [BigInt!] @deprecated(reason: "Please use the relevant generic filter released: { in: ... }") 
  released_LT: BigInt @deprecated(reason: "Please use the relevant generic filter released: { lt: ... }") 
  released_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter released: { lte: ... }") 
  released_GT: BigInt @deprecated(reason: "Please use the relevant generic filter released: { gt: ... }") 
  released_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter released: { gte: ... }") 
  tagline: StringScalarFilters
  tagline_EQ: String @deprecated(reason: "Please use the relevant generic filter tagline: { eq: ... }") 
  tagline_IN: [String] @deprecated(reason: "Please use the relevant generic filter tagline: { in: ... }") 
  tagline_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter tagline: { contains: ... }") 
  tagline_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter tagline: { startsWith: ... }") 
  tagline_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter tagline: { endsWith: ... }") 
  title: StringScalarFilters
  title_EQ: String @deprecated(reason: "Please use the relevant generic filter title: { eq: ... }") 
  title_IN: [String!] @deprecated(reason: "Please use the relevant generic filter title: { in: ... }") 
  title_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter title: { contains: ... }") 
  title_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter title: { startsWith: ... }") 
  title_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter title: { endsWith: ... }") 
  OR: [MovieWhere!]
  AND: [MovieWhere!]
  NOT: MovieWhere
  peopleActedIn: PersonRelationshipFilters
  """
  Return Movies where all of the related People match this filter
  """
  peopleActedIn_ALL: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedIn: { all: ... }' instead."
  )
  """
  Return Movies where none of the related People match this filter
  """
  peopleActedIn_NONE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedIn: { none: ... }' instead."
  )
  """
  Return Movies where one of the related People match this filter
  """
  peopleActedIn_SINGLE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedIn: {  single: ... }' instead."
  )
  """
  Return Movies where some of the related People match this filter
  """
  peopleActedIn_SOME: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedIn: {  some: ... }' instead."
  )
  """
  Return Movies where all of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_ALL: MoviePeopleActedInConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedInConnection: { all: { node: ... } } }' instead."
  )
  """
  Return Movies where none of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_NONE: MoviePeopleActedInConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedInConnection: { none: { node: ... } } }' instead."
  )
  """
  Return Movies where one of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SINGLE: MoviePeopleActedInConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedInConnection: { single: { node: ... } } }' instead."
  )
  """
  Return Movies where some of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SOME: MoviePeopleActedInConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleActedInConnection: { some: { node: ... } } }' instead."
  )
  peopleActedInConnection: MoviePeopleActedInConnectionFilters
  peopleActedInAggregate: MoviePeopleActedInAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the peopleActedInConnection filter, please use { peopleActedInConnection: { aggregate: {...} } } instead"
  )
  peopleDirected: PersonRelationshipFilters
  """
  Return Movies where all of the related People match this filter
  """
  peopleDirected_ALL: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirected: { all: ... }' instead."
  )
  """
  Return Movies where none of the related People match this filter
  """
  peopleDirected_NONE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirected: { none: ... }' instead."
  )
  """
  Return Movies where one of the related People match this filter
  """
  peopleDirected_SINGLE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirected: {  single: ... }' instead."
  )
  """
  Return Movies where some of the related People match this filter
  """
  peopleDirected_SOME: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirected: {  some: ... }' instead."
  )
  """
  Return Movies where all of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_ALL: MoviePeopleDirectedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirectedConnection: { all: { node: ... } } }' instead."
  )
  """
  Return Movies where none of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_NONE: MoviePeopleDirectedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirectedConnection: { none: { node: ... } } }' instead."
  )
  """
  Return Movies where one of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SINGLE: MoviePeopleDirectedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirectedConnection: { single: { node: ... } } }' instead."
  )
  """
  Return Movies where some of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SOME: MoviePeopleDirectedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleDirectedConnection: { some: { node: ... } } }' instead."
  )
  peopleDirectedConnection: MoviePeopleDirectedConnectionFilters
  peopleDirectedAggregate: MoviePeopleDirectedAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the peopleDirectedConnection filter, please use { peopleDirectedConnection: { aggregate: {...} } } instead"
  )
  peopleProduced: PersonRelationshipFilters
  """
  Return Movies where all of the related People match this filter
  """
  peopleProduced_ALL: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProduced: { all: ... }' instead."
  )
  """
  Return Movies where none of the related People match this filter
  """
  peopleProduced_NONE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProduced: { none: ... }' instead."
  )
  """
  Return Movies where one of the related People match this filter
  """
  peopleProduced_SINGLE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProduced: {  single: ... }' instead."
  )
  """
  Return Movies where some of the related People match this filter
  """
  peopleProduced_SOME: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProduced: {  some: ... }' instead."
  )
  """
  Return Movies where all of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_ALL: MoviePeopleProducedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProducedConnection: { all: { node: ... } } }' instead."
  )
  """
  Return Movies where none of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_NONE: MoviePeopleProducedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProducedConnection: { none: { node: ... } } }' instead."
  )
  """
  Return Movies where one of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SINGLE: MoviePeopleProducedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProducedConnection: { single: { node: ... } } }' instead."
  )
  """
  Return Movies where some of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SOME: MoviePeopleProducedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleProducedConnection: { some: { node: ... } } }' instead."
  )
  peopleProducedConnection: MoviePeopleProducedConnectionFilters
  peopleProducedAggregate: MoviePeopleProducedAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the peopleProducedConnection filter, please use { peopleProducedConnection: { aggregate: {...} } } instead"
  )
  peopleReviewed: PersonRelationshipFilters
  """
  Return Movies where all of the related People match this filter
  """
  peopleReviewed_ALL: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewed: { all: ... }' instead."
  )
  """
  Return Movies where none of the related People match this filter
  """
  peopleReviewed_NONE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewed: { none: ... }' instead."
  )
  """
  Return Movies where one of the related People match this filter
  """
  peopleReviewed_SINGLE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewed: {  single: ... }' instead."
  )
  """
  Return Movies where some of the related People match this filter
  """
  peopleReviewed_SOME: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewed: {  some: ... }' instead."
  )
  """
  Return Movies where all of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_ALL: MoviePeopleReviewedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewedConnection: { all: { node: ... } } }' instead."
  )
  """
  Return Movies where none of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_NONE: MoviePeopleReviewedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewedConnection: { none: { node: ... } } }' instead."
  )
  """
  Return Movies where one of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SINGLE: MoviePeopleReviewedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewedConnection: { single: { node: ... } } }' instead."
  )
  """
  Return Movies where some of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SOME: MoviePeopleReviewedConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleReviewedConnection: { some: { node: ... } } }' instead."
  )
  peopleReviewedConnection: MoviePeopleReviewedConnectionFilters
  peopleReviewedAggregate: MoviePeopleReviewedAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the peopleReviewedConnection filter, please use { peopleReviewedConnection: { aggregate: {...} } } instead"
  )
  peopleWrote: PersonRelationshipFilters
  """
  Return Movies where all of the related People match this filter
  """
  peopleWrote_ALL: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWrote: { all: ... }' instead."
  )
  """
  Return Movies where none of the related People match this filter
  """
  peopleWrote_NONE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWrote: { none: ... }' instead."
  )
  """
  Return Movies where one of the related People match this filter
  """
  peopleWrote_SINGLE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWrote: {  single: ... }' instead."
  )
  """
  Return Movies where some of the related People match this filter
  """
  peopleWrote_SOME: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWrote: {  some: ... }' instead."
  )
  """
  Return Movies where all of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_ALL: MoviePeopleWroteConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWroteConnection: { all: { node: ... } } }' instead."
  )
  """
  Return Movies where none of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_NONE: MoviePeopleWroteConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWroteConnection: { none: { node: ... } } }' instead."
  )
  """
  Return Movies where one of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SINGLE: MoviePeopleWroteConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWroteConnection: { single: { node: ... } } }' instead."
  )
  """
  Return Movies where some of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SOME: MoviePeopleWroteConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleWroteConnection: { some: { node: ... } } }' instead."
  )
  peopleWroteConnection: MoviePeopleWroteConnectionFilters
  peopleWroteAggregate: MoviePeopleWroteAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the peopleWroteConnection filter, please use { peopleWroteConnection: { aggregate: {...} } } instead"
  )
}

input PersonActedInMoviesAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [PersonActedInMoviesAggregateInput!]
  OR: [PersonActedInMoviesAggregateInput!]
  NOT: PersonActedInMoviesAggregateInput
  node: PersonActedInMoviesNodeAggregationWhereInput
}

input PersonActedInMoviesConnectFieldInput @join__type(graph: MOVIES)  {
  edge: ActedInPropertiesCreateInput!
  where: MovieConnectWhere
  connect: [MovieConnectInput!]
}

input PersonActedInMoviesConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [PersonActedInMoviesConnectionAggregateInput!]
  OR: [PersonActedInMoviesConnectionAggregateInput!]
  NOT: PersonActedInMoviesConnectionAggregateInput
  node: PersonActedInMoviesNodeAggregationWhereInput
}

input PersonActedInMoviesConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return People where all of the related PersonActedInMoviesConnections match this filter
  """
  all: PersonActedInMoviesConnectionWhere
  """
  Return People where none of the related PersonActedInMoviesConnections match this filter
  """
  none: PersonActedInMoviesConnectionWhere
  """
  Return People where one of the related PersonActedInMoviesConnections match this filter
  """
  single: PersonActedInMoviesConnectionWhere
  """
  Return People where some of the related PersonActedInMoviesConnections match this filter
  """
  some: PersonActedInMoviesConnectionWhere
  """
  Filter People by aggregating results on related PersonActedInMoviesConnections
  """
  aggregate: PersonActedInMoviesConnectionAggregateInput
}

input PersonActedInMoviesConnectionSort @join__type(graph: MOVIES)  {
  node: MovieSort
  edge: ActedInPropertiesSort
}

input PersonActedInMoviesConnectionWhere @join__type(graph: MOVIES)  {
  AND: [PersonActedInMoviesConnectionWhere!]
  OR: [PersonActedInMoviesConnectionWhere!]
  NOT: PersonActedInMoviesConnectionWhere
  node: MovieWhere
  edge: ActedInPropertiesWhere
}

input PersonActedInMoviesCreateFieldInput @join__type(graph: MOVIES)  {
  edge: ActedInPropertiesCreateInput!
  node: MovieCreateInput!
}

input PersonActedInMoviesDeleteFieldInput @join__type(graph: MOVIES)  {
  where: PersonActedInMoviesConnectionWhere
  delete: MovieDeleteInput
}

input PersonActedInMoviesDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonActedInMoviesConnectionWhere
  disconnect: MovieDisconnectInput
}

input PersonActedInMoviesFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonActedInMoviesConnectFieldInput!]
  create: [PersonActedInMoviesCreateFieldInput!]
}

input PersonActedInMoviesNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [PersonActedInMoviesNodeAggregationWhereInput!]
  OR: [PersonActedInMoviesNodeAggregationWhereInput!]
  NOT: PersonActedInMoviesNodeAggregationWhereInput
  released_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead."
  )
  released_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead."
  )
  released_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead."
  )
  released_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead."
  )
  released_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead."
  )
  released_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead."
  )
  released_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead."
  )
  released_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead."
  )
  released_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead."
  )
  released_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead."
  )
  released_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead."
  )
  released_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead."
  )
  released_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead."
  )
  released_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead."
  )
  released_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead."
  )
  released_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead."
  )
  released_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead."
  )
  released_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead."
  )
  released_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead."
  )
  released_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead."
  )
  released: BigIntScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead."
  )
  tagline: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead."
  )
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead."
  )
  title: StringScalarAggregationFilters
}

input PersonActedInMoviesUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: MovieUpdateInput
  where: PersonActedInMoviesConnectionWhere
  edge: ActedInPropertiesUpdateInput
}

input PersonActedInMoviesUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonActedInMoviesConnectFieldInput!]
  disconnect: [PersonActedInMoviesDisconnectFieldInput!]
  create: [PersonActedInMoviesCreateFieldInput!]
  update: PersonActedInMoviesUpdateConnectionInput
  delete: [PersonActedInMoviesDeleteFieldInput!]
}

input PersonConnectInput @join__type(graph: MOVIES)  {
  actedInMovies: [PersonActedInMoviesConnectFieldInput!]
  directedMovies: [PersonDirectedMoviesConnectFieldInput!]
  followsPeople: [PersonFollowsPeopleConnectFieldInput!]
  peopleFollows: [PersonPeopleFollowsConnectFieldInput!]
  producedMovies: [PersonProducedMoviesConnectFieldInput!]
  reviewedMovies: [PersonReviewedMoviesConnectFieldInput!]
  wroteMovies: [PersonWroteMoviesConnectFieldInput!]
}

input PersonConnectWhere @join__type(graph: MOVIES)  {
  node: PersonWhere!
}

input PersonCreateInput @join__type(graph: MOVIES)  {
  born: BigInt
  name: String!
  actedInMovies: PersonActedInMoviesFieldInput
  directedMovies: PersonDirectedMoviesFieldInput
  followsPeople: PersonFollowsPeopleFieldInput
  peopleFollows: PersonPeopleFollowsFieldInput
  producedMovies: PersonProducedMoviesFieldInput
  reviewedMovies: PersonReviewedMoviesFieldInput
  wroteMovies: PersonWroteMoviesFieldInput
}

input PersonDeleteInput @join__type(graph: MOVIES)  {
  actedInMovies: [PersonActedInMoviesDeleteFieldInput!]
  directedMovies: [PersonDirectedMoviesDeleteFieldInput!]
  followsPeople: [PersonFollowsPeopleDeleteFieldInput!]
  peopleFollows: [PersonPeopleFollowsDeleteFieldInput!]
  producedMovies: [PersonProducedMoviesDeleteFieldInput!]
  reviewedMovies: [PersonReviewedMoviesDeleteFieldInput!]
  wroteMovies: [PersonWroteMoviesDeleteFieldInput!]
}

input PersonDirectedMoviesAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [PersonDirectedMoviesAggregateInput!]
  OR: [PersonDirectedMoviesAggregateInput!]
  NOT: PersonDirectedMoviesAggregateInput
  node: PersonDirectedMoviesNodeAggregationWhereInput
}

input PersonDirectedMoviesConnectFieldInput @join__type(graph: MOVIES)  {
  where: MovieConnectWhere
  connect: [MovieConnectInput!]
}

input PersonDirectedMoviesConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [PersonDirectedMoviesConnectionAggregateInput!]
  OR: [PersonDirectedMoviesConnectionAggregateInput!]
  NOT: PersonDirectedMoviesConnectionAggregateInput
  node: PersonDirectedMoviesNodeAggregationWhereInput
}

input PersonDirectedMoviesConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return People where all of the related PersonDirectedMoviesConnections match this filter
  """
  all: PersonDirectedMoviesConnectionWhere
  """
  Return People where none of the related PersonDirectedMoviesConnections match this filter
  """
  none: PersonDirectedMoviesConnectionWhere
  """
  Return People where one of the related PersonDirectedMoviesConnections match this filter
  """
  single: PersonDirectedMoviesConnectionWhere
  """
  Return People where some of the related PersonDirectedMoviesConnections match this filter
  """
  some: PersonDirectedMoviesConnectionWhere
  """
  Filter People by aggregating results on related PersonDirectedMoviesConnections
  """
  aggregate: PersonDirectedMoviesConnectionAggregateInput
}

input PersonDirectedMoviesConnectionSort @join__type(graph: MOVIES)  {
  node: MovieSort
}

input PersonDirectedMoviesConnectionWhere @join__type(graph: MOVIES)  {
  AND: [PersonDirectedMoviesConnectionWhere!]
  OR: [PersonDirectedMoviesConnectionWhere!]
  NOT: PersonDirectedMoviesConnectionWhere
  node: MovieWhere
}

input PersonDirectedMoviesCreateFieldInput @join__type(graph: MOVIES)  {
  node: MovieCreateInput!
}

input PersonDirectedMoviesDeleteFieldInput @join__type(graph: MOVIES)  {
  where: PersonDirectedMoviesConnectionWhere
  delete: MovieDeleteInput
}

input PersonDirectedMoviesDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonDirectedMoviesConnectionWhere
  disconnect: MovieDisconnectInput
}

input PersonDirectedMoviesFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonDirectedMoviesConnectFieldInput!]
  create: [PersonDirectedMoviesCreateFieldInput!]
}

input PersonDirectedMoviesNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [PersonDirectedMoviesNodeAggregationWhereInput!]
  OR: [PersonDirectedMoviesNodeAggregationWhereInput!]
  NOT: PersonDirectedMoviesNodeAggregationWhereInput
  released_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead."
  )
  released_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead."
  )
  released_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead."
  )
  released_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead."
  )
  released_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead."
  )
  released_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead."
  )
  released_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead."
  )
  released_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead."
  )
  released_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead."
  )
  released_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead."
  )
  released_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead."
  )
  released_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead."
  )
  released_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead."
  )
  released_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead."
  )
  released_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead."
  )
  released_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead."
  )
  released_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead."
  )
  released_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead."
  )
  released_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead."
  )
  released_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead."
  )
  released: BigIntScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead."
  )
  tagline: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead."
  )
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead."
  )
  title: StringScalarAggregationFilters
}

input PersonDirectedMoviesUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: MovieUpdateInput
  where: PersonDirectedMoviesConnectionWhere
}

input PersonDirectedMoviesUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonDirectedMoviesConnectFieldInput!]
  disconnect: [PersonDirectedMoviesDisconnectFieldInput!]
  create: [PersonDirectedMoviesCreateFieldInput!]
  update: PersonDirectedMoviesUpdateConnectionInput
  delete: [PersonDirectedMoviesDeleteFieldInput!]
}

input PersonDisconnectInput @join__type(graph: MOVIES)  {
  actedInMovies: [PersonActedInMoviesDisconnectFieldInput!]
  directedMovies: [PersonDirectedMoviesDisconnectFieldInput!]
  followsPeople: [PersonFollowsPeopleDisconnectFieldInput!]
  peopleFollows: [PersonPeopleFollowsDisconnectFieldInput!]
  producedMovies: [PersonProducedMoviesDisconnectFieldInput!]
  reviewedMovies: [PersonReviewedMoviesDisconnectFieldInput!]
  wroteMovies: [PersonWroteMoviesDisconnectFieldInput!]
}

input PersonFollowsPeopleAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [PersonFollowsPeopleAggregateInput!]
  OR: [PersonFollowsPeopleAggregateInput!]
  NOT: PersonFollowsPeopleAggregateInput
  node: PersonFollowsPeopleNodeAggregationWhereInput
}

input PersonFollowsPeopleConnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonConnectWhere
  connect: [PersonConnectInput!]
}

input PersonFollowsPeopleConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [PersonFollowsPeopleConnectionAggregateInput!]
  OR: [PersonFollowsPeopleConnectionAggregateInput!]
  NOT: PersonFollowsPeopleConnectionAggregateInput
  node: PersonFollowsPeopleNodeAggregationWhereInput
}

input PersonFollowsPeopleConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return People where all of the related PersonFollowsPeopleConnections match this filter
  """
  all: PersonFollowsPeopleConnectionWhere
  """
  Return People where none of the related PersonFollowsPeopleConnections match this filter
  """
  none: PersonFollowsPeopleConnectionWhere
  """
  Return People where one of the related PersonFollowsPeopleConnections match this filter
  """
  single: PersonFollowsPeopleConnectionWhere
  """
  Return People where some of the related PersonFollowsPeopleConnections match this filter
  """
  some: PersonFollowsPeopleConnectionWhere
  """
  Filter People by aggregating results on related PersonFollowsPeopleConnections
  """
  aggregate: PersonFollowsPeopleConnectionAggregateInput
}

input PersonFollowsPeopleConnectionSort @join__type(graph: MOVIES)  {
  node: PersonSort
}

input PersonFollowsPeopleConnectionWhere @join__type(graph: MOVIES)  {
  AND: [PersonFollowsPeopleConnectionWhere!]
  OR: [PersonFollowsPeopleConnectionWhere!]
  NOT: PersonFollowsPeopleConnectionWhere
  node: PersonWhere
}

input PersonFollowsPeopleCreateFieldInput @join__type(graph: MOVIES)  {
  node: PersonCreateInput!
}

input PersonFollowsPeopleDeleteFieldInput @join__type(graph: MOVIES)  {
  where: PersonFollowsPeopleConnectionWhere
  delete: PersonDeleteInput
}

input PersonFollowsPeopleDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonFollowsPeopleConnectionWhere
  disconnect: PersonDisconnectInput
}

input PersonFollowsPeopleFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonFollowsPeopleConnectFieldInput!]
  create: [PersonFollowsPeopleCreateFieldInput!]
}

input PersonFollowsPeopleNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [PersonFollowsPeopleNodeAggregationWhereInput!]
  OR: [PersonFollowsPeopleNodeAggregationWhereInput!]
  NOT: PersonFollowsPeopleNodeAggregationWhereInput
  born_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead."
  )
  born_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead."
  )
  born_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead."
  )
  born_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead."
  )
  born_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead."
  )
  born_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead."
  )
  born_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead."
  )
  born_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead."
  )
  born_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead."
  )
  born_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead."
  )
  born_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead."
  )
  born_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead."
  )
  born_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead."
  )
  born_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead."
  )
  born_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead."
  )
  born_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead."
  )
  born_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead."
  )
  born_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead."
  )
  born_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead."
  )
  born_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead."
  )
  born: BigIntScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead."
  )
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead."
  )
  name: StringScalarAggregationFilters
}

input PersonFollowsPeopleUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: PersonUpdateInput
  where: PersonFollowsPeopleConnectionWhere
}

input PersonFollowsPeopleUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonFollowsPeopleConnectFieldInput!]
  disconnect: [PersonFollowsPeopleDisconnectFieldInput!]
  create: [PersonFollowsPeopleCreateFieldInput!]
  update: PersonFollowsPeopleUpdateConnectionInput
  delete: [PersonFollowsPeopleDeleteFieldInput!]
}

input PersonPeopleFollowsAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [PersonPeopleFollowsAggregateInput!]
  OR: [PersonPeopleFollowsAggregateInput!]
  NOT: PersonPeopleFollowsAggregateInput
  node: PersonPeopleFollowsNodeAggregationWhereInput
}

input PersonPeopleFollowsConnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonConnectWhere
  connect: [PersonConnectInput!]
}

input PersonPeopleFollowsConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [PersonPeopleFollowsConnectionAggregateInput!]
  OR: [PersonPeopleFollowsConnectionAggregateInput!]
  NOT: PersonPeopleFollowsConnectionAggregateInput
  node: PersonPeopleFollowsNodeAggregationWhereInput
}

input PersonPeopleFollowsConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return People where all of the related PersonPeopleFollowsConnections match this filter
  """
  all: PersonPeopleFollowsConnectionWhere
  """
  Return People where none of the related PersonPeopleFollowsConnections match this filter
  """
  none: PersonPeopleFollowsConnectionWhere
  """
  Return People where one of the related PersonPeopleFollowsConnections match this filter
  """
  single: PersonPeopleFollowsConnectionWhere
  """
  Return People where some of the related PersonPeopleFollowsConnections match this filter
  """
  some: PersonPeopleFollowsConnectionWhere
  """
  Filter People by aggregating results on related PersonPeopleFollowsConnections
  """
  aggregate: PersonPeopleFollowsConnectionAggregateInput
}

input PersonPeopleFollowsConnectionSort @join__type(graph: MOVIES)  {
  node: PersonSort
}

input PersonPeopleFollowsConnectionWhere @join__type(graph: MOVIES)  {
  AND: [PersonPeopleFollowsConnectionWhere!]
  OR: [PersonPeopleFollowsConnectionWhere!]
  NOT: PersonPeopleFollowsConnectionWhere
  node: PersonWhere
}

input PersonPeopleFollowsCreateFieldInput @join__type(graph: MOVIES)  {
  node: PersonCreateInput!
}

input PersonPeopleFollowsDeleteFieldInput @join__type(graph: MOVIES)  {
  where: PersonPeopleFollowsConnectionWhere
  delete: PersonDeleteInput
}

input PersonPeopleFollowsDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonPeopleFollowsConnectionWhere
  disconnect: PersonDisconnectInput
}

input PersonPeopleFollowsFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonPeopleFollowsConnectFieldInput!]
  create: [PersonPeopleFollowsCreateFieldInput!]
}

input PersonPeopleFollowsNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [PersonPeopleFollowsNodeAggregationWhereInput!]
  OR: [PersonPeopleFollowsNodeAggregationWhereInput!]
  NOT: PersonPeopleFollowsNodeAggregationWhereInput
  born_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead."
  )
  born_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead."
  )
  born_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead."
  )
  born_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead."
  )
  born_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead."
  )
  born_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead."
  )
  born_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead."
  )
  born_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead."
  )
  born_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead."
  )
  born_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead."
  )
  born_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead."
  )
  born_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead."
  )
  born_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead."
  )
  born_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead."
  )
  born_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead."
  )
  born_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead."
  )
  born_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead."
  )
  born_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead."
  )
  born_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead."
  )
  born_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead."
  )
  born: BigIntScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead."
  )
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead."
  )
  name_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead."
  )
  name_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead."
  )
  name_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead."
  )
  name: StringScalarAggregationFilters
}

input PersonPeopleFollowsUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: PersonUpdateInput
  where: PersonPeopleFollowsConnectionWhere
}

input PersonPeopleFollowsUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonPeopleFollowsConnectFieldInput!]
  disconnect: [PersonPeopleFollowsDisconnectFieldInput!]
  create: [PersonPeopleFollowsCreateFieldInput!]
  update: PersonPeopleFollowsUpdateConnectionInput
  delete: [PersonPeopleFollowsDeleteFieldInput!]
}

input PersonProducedMoviesAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [PersonProducedMoviesAggregateInput!]
  OR: [PersonProducedMoviesAggregateInput!]
  NOT: PersonProducedMoviesAggregateInput
  node: PersonProducedMoviesNodeAggregationWhereInput
}

input PersonProducedMoviesConnectFieldInput @join__type(graph: MOVIES)  {
  where: MovieConnectWhere
  connect: [MovieConnectInput!]
}

input PersonProducedMoviesConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [PersonProducedMoviesConnectionAggregateInput!]
  OR: [PersonProducedMoviesConnectionAggregateInput!]
  NOT: PersonProducedMoviesConnectionAggregateInput
  node: PersonProducedMoviesNodeAggregationWhereInput
}

input PersonProducedMoviesConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return People where all of the related PersonProducedMoviesConnections match this filter
  """
  all: PersonProducedMoviesConnectionWhere
  """
  Return People where none of the related PersonProducedMoviesConnections match this filter
  """
  none: PersonProducedMoviesConnectionWhere
  """
  Return People where one of the related PersonProducedMoviesConnections match this filter
  """
  single: PersonProducedMoviesConnectionWhere
  """
  Return People where some of the related PersonProducedMoviesConnections match this filter
  """
  some: PersonProducedMoviesConnectionWhere
  """
  Filter People by aggregating results on related PersonProducedMoviesConnections
  """
  aggregate: PersonProducedMoviesConnectionAggregateInput
}

input PersonProducedMoviesConnectionSort @join__type(graph: MOVIES)  {
  node: MovieSort
}

input PersonProducedMoviesConnectionWhere @join__type(graph: MOVIES)  {
  AND: [PersonProducedMoviesConnectionWhere!]
  OR: [PersonProducedMoviesConnectionWhere!]
  NOT: PersonProducedMoviesConnectionWhere
  node: MovieWhere
}

input PersonProducedMoviesCreateFieldInput @join__type(graph: MOVIES)  {
  node: MovieCreateInput!
}

input PersonProducedMoviesDeleteFieldInput @join__type(graph: MOVIES)  {
  where: PersonProducedMoviesConnectionWhere
  delete: MovieDeleteInput
}

input PersonProducedMoviesDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonProducedMoviesConnectionWhere
  disconnect: MovieDisconnectInput
}

input PersonProducedMoviesFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonProducedMoviesConnectFieldInput!]
  create: [PersonProducedMoviesCreateFieldInput!]
}

input PersonProducedMoviesNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [PersonProducedMoviesNodeAggregationWhereInput!]
  OR: [PersonProducedMoviesNodeAggregationWhereInput!]
  NOT: PersonProducedMoviesNodeAggregationWhereInput
  released_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead."
  )
  released_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead."
  )
  released_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead."
  )
  released_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead."
  )
  released_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead."
  )
  released_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead."
  )
  released_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead."
  )
  released_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead."
  )
  released_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead."
  )
  released_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead."
  )
  released_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead."
  )
  released_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead."
  )
  released_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead."
  )
  released_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead."
  )
  released_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead."
  )
  released_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead."
  )
  released_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead."
  )
  released_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead."
  )
  released_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead."
  )
  released_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead."
  )
  released: BigIntScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead."
  )
  tagline: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead."
  )
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead."
  )
  title: StringScalarAggregationFilters
}

input PersonProducedMoviesUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: MovieUpdateInput
  where: PersonProducedMoviesConnectionWhere
}

input PersonProducedMoviesUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonProducedMoviesConnectFieldInput!]
  disconnect: [PersonProducedMoviesDisconnectFieldInput!]
  create: [PersonProducedMoviesCreateFieldInput!]
  update: PersonProducedMoviesUpdateConnectionInput
  delete: [PersonProducedMoviesDeleteFieldInput!]
}

input PersonRelationshipFilters @join__type(graph: MOVIES)  {
  """
  Filter type where all of the related People match this filter
  """
  all: PersonWhere
  """
  Filter type where none of the related People match this filter
  """
  none: PersonWhere
  """
  Filter type where one of the related People match this filter
  """
  single: PersonWhere
  """
  Filter type where some of the related People match this filter
  """
  some: PersonWhere
}

input PersonReviewedMoviesAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [PersonReviewedMoviesAggregateInput!]
  OR: [PersonReviewedMoviesAggregateInput!]
  NOT: PersonReviewedMoviesAggregateInput
  node: PersonReviewedMoviesNodeAggregationWhereInput
  edge: ReviewedPropertiesAggregationWhereInput
}

input PersonReviewedMoviesConnectFieldInput @join__type(graph: MOVIES)  {
  edge: ReviewedPropertiesCreateInput!
  where: MovieConnectWhere
  connect: [MovieConnectInput!]
}

input PersonReviewedMoviesConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [PersonReviewedMoviesConnectionAggregateInput!]
  OR: [PersonReviewedMoviesConnectionAggregateInput!]
  NOT: PersonReviewedMoviesConnectionAggregateInput
  node: PersonReviewedMoviesNodeAggregationWhereInput
  edge: ReviewedPropertiesAggregationWhereInput
}

input PersonReviewedMoviesConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return People where all of the related PersonReviewedMoviesConnections match this filter
  """
  all: PersonReviewedMoviesConnectionWhere
  """
  Return People where none of the related PersonReviewedMoviesConnections match this filter
  """
  none: PersonReviewedMoviesConnectionWhere
  """
  Return People where one of the related PersonReviewedMoviesConnections match this filter
  """
  single: PersonReviewedMoviesConnectionWhere
  """
  Return People where some of the related PersonReviewedMoviesConnections match this filter
  """
  some: PersonReviewedMoviesConnectionWhere
  """
  Filter People by aggregating results on related PersonReviewedMoviesConnections
  """
  aggregate: PersonReviewedMoviesConnectionAggregateInput
}

input PersonReviewedMoviesConnectionSort @join__type(graph: MOVIES)  {
  node: MovieSort
  edge: ReviewedPropertiesSort
}

input PersonReviewedMoviesConnectionWhere @join__type(graph: MOVIES)  {
  AND: [PersonReviewedMoviesConnectionWhere!]
  OR: [PersonReviewedMoviesConnectionWhere!]
  NOT: PersonReviewedMoviesConnectionWhere
  node: MovieWhere
  edge: ReviewedPropertiesWhere
}

input PersonReviewedMoviesCreateFieldInput @join__type(graph: MOVIES)  {
  edge: ReviewedPropertiesCreateInput!
  node: MovieCreateInput!
}

input PersonReviewedMoviesDeleteFieldInput @join__type(graph: MOVIES)  {
  where: PersonReviewedMoviesConnectionWhere
  delete: MovieDeleteInput
}

input PersonReviewedMoviesDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonReviewedMoviesConnectionWhere
  disconnect: MovieDisconnectInput
}

input PersonReviewedMoviesFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonReviewedMoviesConnectFieldInput!]
  create: [PersonReviewedMoviesCreateFieldInput!]
}

input PersonReviewedMoviesNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [PersonReviewedMoviesNodeAggregationWhereInput!]
  OR: [PersonReviewedMoviesNodeAggregationWhereInput!]
  NOT: PersonReviewedMoviesNodeAggregationWhereInput
  released_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead."
  )
  released_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead."
  )
  released_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead."
  )
  released_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead."
  )
  released_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead."
  )
  released_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead."
  )
  released_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead."
  )
  released_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead."
  )
  released_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead."
  )
  released_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead."
  )
  released_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead."
  )
  released_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead."
  )
  released_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead."
  )
  released_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead."
  )
  released_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead."
  )
  released_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead."
  )
  released_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead."
  )
  released_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead."
  )
  released_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead."
  )
  released_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead."
  )
  released: BigIntScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead."
  )
  tagline: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead."
  )
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead."
  )
  title: StringScalarAggregationFilters
}

input PersonReviewedMoviesUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: MovieUpdateInput
  where: PersonReviewedMoviesConnectionWhere
  edge: ReviewedPropertiesUpdateInput
}

input PersonReviewedMoviesUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonReviewedMoviesConnectFieldInput!]
  disconnect: [PersonReviewedMoviesDisconnectFieldInput!]
  create: [PersonReviewedMoviesCreateFieldInput!]
  update: PersonReviewedMoviesUpdateConnectionInput
  delete: [PersonReviewedMoviesDeleteFieldInput!]
}

"""
Fields to sort People by. The order in which sorts are applied is not guaranteed when specifying many fields in one PersonSort object.
"""
input PersonSort @join__type(graph: MOVIES)  {
  born: SortDirection
  name: SortDirection
}

input PersonUpdateInput @join__type(graph: MOVIES)  {
  born: BigIntScalarMutations
  born_SET: BigInt
  born_INCREMENT: BigInt @deprecated(
    reason: "Please use the relevant generic mutation 'born: { increment: ... } }' instead."
  )
  born_DECREMENT: BigInt @deprecated(
    reason: "Please use the relevant generic mutation 'born: { decrement: ... } }' instead."
  )
  name: StringScalarMutations
  name_SET: String
  actedInMovies: [PersonActedInMoviesUpdateFieldInput!]
  directedMovies: [PersonDirectedMoviesUpdateFieldInput!]
  followsPeople: [PersonFollowsPeopleUpdateFieldInput!]
  peopleFollows: [PersonPeopleFollowsUpdateFieldInput!]
  producedMovies: [PersonProducedMoviesUpdateFieldInput!]
  reviewedMovies: [PersonReviewedMoviesUpdateFieldInput!]
  wroteMovies: [PersonWroteMoviesUpdateFieldInput!]
}

input PersonWhere @join__type(graph: MOVIES)  {
  born: BigIntScalarFilters
  born_EQ: BigInt @deprecated(reason: "Please use the relevant generic filter born: { eq: ... }") 
  born_IN: [BigInt] @deprecated(reason: "Please use the relevant generic filter born: { in: ... }") 
  born_LT: BigInt @deprecated(reason: "Please use the relevant generic filter born: { lt: ... }") 
  born_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter born: { lte: ... }") 
  born_GT: BigInt @deprecated(reason: "Please use the relevant generic filter born: { gt: ... }") 
  born_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter born: { gte: ... }") 
  name: StringScalarFilters
  name_EQ: String @deprecated(reason: "Please use the relevant generic filter name: { eq: ... }") 
  name_IN: [String!] @deprecated(reason: "Please use the relevant generic filter name: { in: ... }") 
  name_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter name: { contains: ... }") 
  name_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter name: { startsWith: ... }") 
  name_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter name: { endsWith: ... }") 
  OR: [PersonWhere!]
  AND: [PersonWhere!]
  NOT: PersonWhere
  actedInMovies: MovieRelationshipFilters
  """
  Return People where all of the related Movies match this filter
  """
  actedInMovies_ALL: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMovies: { all: ... }' instead."
  )
  """
  Return People where none of the related Movies match this filter
  """
  actedInMovies_NONE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMovies: { none: ... }' instead."
  )
  """
  Return People where one of the related Movies match this filter
  """
  actedInMovies_SINGLE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMovies: {  single: ... }' instead."
  )
  """
  Return People where some of the related Movies match this filter
  """
  actedInMovies_SOME: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMovies: {  some: ... }' instead."
  )
  """
  Return People where all of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_ALL: PersonActedInMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMoviesConnection: { all: { node: ... } } }' instead."
  )
  """
  Return People where none of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_NONE: PersonActedInMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMoviesConnection: { none: { node: ... } } }' instead."
  )
  """
  Return People where one of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SINGLE: PersonActedInMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMoviesConnection: { single: { node: ... } } }' instead."
  )
  """
  Return People where some of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SOME: PersonActedInMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'actedInMoviesConnection: { some: { node: ... } } }' instead."
  )
  actedInMoviesConnection: PersonActedInMoviesConnectionFilters
  actedInMoviesAggregate: PersonActedInMoviesAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the actedInMoviesConnection filter, please use { actedInMoviesConnection: { aggregate: {...} } } instead"
  )
  directedMovies: MovieRelationshipFilters
  """
  Return People where all of the related Movies match this filter
  """
  directedMovies_ALL: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMovies: { all: ... }' instead."
  )
  """
  Return People where none of the related Movies match this filter
  """
  directedMovies_NONE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMovies: { none: ... }' instead."
  )
  """
  Return People where one of the related Movies match this filter
  """
  directedMovies_SINGLE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMovies: {  single: ... }' instead."
  )
  """
  Return People where some of the related Movies match this filter
  """
  directedMovies_SOME: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMovies: {  some: ... }' instead."
  )
  """
  Return People where all of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_ALL: PersonDirectedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMoviesConnection: { all: { node: ... } } }' instead."
  )
  """
  Return People where none of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_NONE: PersonDirectedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMoviesConnection: { none: { node: ... } } }' instead."
  )
  """
  Return People where one of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SINGLE: PersonDirectedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMoviesConnection: { single: { node: ... } } }' instead."
  )
  """
  Return People where some of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SOME: PersonDirectedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'directedMoviesConnection: { some: { node: ... } } }' instead."
  )
  directedMoviesConnection: PersonDirectedMoviesConnectionFilters
  directedMoviesAggregate: PersonDirectedMoviesAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the directedMoviesConnection filter, please use { directedMoviesConnection: { aggregate: {...} } } instead"
  )
  followsPeople: PersonRelationshipFilters
  """
  Return People where all of the related People match this filter
  """
  followsPeople_ALL: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeople: { all: ... }' instead."
  )
  """
  Return People where none of the related People match this filter
  """
  followsPeople_NONE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeople: { none: ... }' instead."
  )
  """
  Return People where one of the related People match this filter
  """
  followsPeople_SINGLE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeople: {  single: ... }' instead."
  )
  """
  Return People where some of the related People match this filter
  """
  followsPeople_SOME: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeople: {  some: ... }' instead."
  )
  """
  Return People where all of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_ALL: PersonFollowsPeopleConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeopleConnection: { all: { node: ... } } }' instead."
  )
  """
  Return People where none of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_NONE: PersonFollowsPeopleConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeopleConnection: { none: { node: ... } } }' instead."
  )
  """
  Return People where one of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SINGLE: PersonFollowsPeopleConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeopleConnection: { single: { node: ... } } }' instead."
  )
  """
  Return People where some of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SOME: PersonFollowsPeopleConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'followsPeopleConnection: { some: { node: ... } } }' instead."
  )
  followsPeopleConnection: PersonFollowsPeopleConnectionFilters
  followsPeopleAggregate: PersonFollowsPeopleAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the followsPeopleConnection filter, please use { followsPeopleConnection: { aggregate: {...} } } instead"
  )
  peopleFollows: PersonRelationshipFilters
  """
  Return People where all of the related People match this filter
  """
  peopleFollows_ALL: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollows: { all: ... }' instead."
  )
  """
  Return People where none of the related People match this filter
  """
  peopleFollows_NONE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollows: { none: ... }' instead."
  )
  """
  Return People where one of the related People match this filter
  """
  peopleFollows_SINGLE: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollows: {  single: ... }' instead."
  )
  """
  Return People where some of the related People match this filter
  """
  peopleFollows_SOME: PersonWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollows: {  some: ... }' instead."
  )
  """
  Return People where all of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_ALL: PersonPeopleFollowsConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollowsConnection: { all: { node: ... } } }' instead."
  )
  """
  Return People where none of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_NONE: PersonPeopleFollowsConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollowsConnection: { none: { node: ... } } }' instead."
  )
  """
  Return People where one of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SINGLE: PersonPeopleFollowsConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollowsConnection: { single: { node: ... } } }' instead."
  )
  """
  Return People where some of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SOME: PersonPeopleFollowsConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'peopleFollowsConnection: { some: { node: ... } } }' instead."
  )
  peopleFollowsConnection: PersonPeopleFollowsConnectionFilters
  peopleFollowsAggregate: PersonPeopleFollowsAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the peopleFollowsConnection filter, please use { peopleFollowsConnection: { aggregate: {...} } } instead"
  )
  producedMovies: MovieRelationshipFilters
  """
  Return People where all of the related Movies match this filter
  """
  producedMovies_ALL: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMovies: { all: ... }' instead."
  )
  """
  Return People where none of the related Movies match this filter
  """
  producedMovies_NONE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMovies: { none: ... }' instead."
  )
  """
  Return People where one of the related Movies match this filter
  """
  producedMovies_SINGLE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMovies: {  single: ... }' instead."
  )
  """
  Return People where some of the related Movies match this filter
  """
  producedMovies_SOME: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMovies: {  some: ... }' instead."
  )
  """
  Return People where all of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_ALL: PersonProducedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMoviesConnection: { all: { node: ... } } }' instead."
  )
  """
  Return People where none of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_NONE: PersonProducedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMoviesConnection: { none: { node: ... } } }' instead."
  )
  """
  Return People where one of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SINGLE: PersonProducedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMoviesConnection: { single: { node: ... } } }' instead."
  )
  """
  Return People where some of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SOME: PersonProducedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'producedMoviesConnection: { some: { node: ... } } }' instead."
  )
  producedMoviesConnection: PersonProducedMoviesConnectionFilters
  producedMoviesAggregate: PersonProducedMoviesAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the producedMoviesConnection filter, please use { producedMoviesConnection: { aggregate: {...} } } instead"
  )
  reviewedMovies: MovieRelationshipFilters
  """
  Return People where all of the related Movies match this filter
  """
  reviewedMovies_ALL: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMovies: { all: ... }' instead."
  )
  """
  Return People where none of the related Movies match this filter
  """
  reviewedMovies_NONE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMovies: { none: ... }' instead."
  )
  """
  Return People where one of the related Movies match this filter
  """
  reviewedMovies_SINGLE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMovies: {  single: ... }' instead."
  )
  """
  Return People where some of the related Movies match this filter
  """
  reviewedMovies_SOME: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMovies: {  some: ... }' instead."
  )
  """
  Return People where all of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_ALL: PersonReviewedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { all: { node: ... } } }' instead."
  )
  """
  Return People where none of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_NONE: PersonReviewedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { none: { node: ... } } }' instead."
  )
  """
  Return People where one of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SINGLE: PersonReviewedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { single: { node: ... } } }' instead."
  )
  """
  Return People where some of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SOME: PersonReviewedMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { some: { node: ... } } }' instead."
  )
  reviewedMoviesConnection: PersonReviewedMoviesConnectionFilters
  reviewedMoviesAggregate: PersonReviewedMoviesAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the reviewedMoviesConnection filter, please use { reviewedMoviesConnection: { aggregate: {...} } } instead"
  )
  wroteMovies: MovieRelationshipFilters
  """
  Return People where all of the related Movies match this filter
  """
  wroteMovies_ALL: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMovies: { all: ... }' instead."
  )
  """
  Return People where none of the related Movies match this filter
  """
  wroteMovies_NONE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMovies: { none: ... }' instead."
  )
  """
  Return People where one of the related Movies match this filter
  """
  wroteMovies_SINGLE: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMovies: {  single: ... }' instead."
  )
  """
  Return People where some of the related Movies match this filter
  """
  wroteMovies_SOME: MovieWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMovies: {  some: ... }' instead."
  )
  """
  Return People where all of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_ALL: PersonWroteMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMoviesConnection: { all: { node: ... } } }' instead."
  )
  """
  Return People where none of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_NONE: PersonWroteMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMoviesConnection: { none: { node: ... } } }' instead."
  )
  """
  Return People where one of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SINGLE: PersonWroteMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMoviesConnection: { single: { node: ... } } }' instead."
  )
  """
  Return People where some of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SOME: PersonWroteMoviesConnectionWhere @deprecated(
    reason: "Please use the relevant generic filter 'wroteMoviesConnection: { some: { node: ... } } }' instead."
  )
  wroteMoviesConnection: PersonWroteMoviesConnectionFilters
  wroteMoviesAggregate: PersonWroteMoviesAggregateInput @deprecated(
    reason: "Aggregate filters are moved inside the wroteMoviesConnection filter, please use { wroteMoviesConnection: { aggregate: {...} } } instead"
  )
}

input PersonWroteMoviesAggregateInput @join__type(graph: MOVIES)  {
  count_EQ: Int
  count_LT: Int
  count_LTE: Int
  count_GT: Int
  count_GTE: Int
  count: IntScalarFilters
  AND: [PersonWroteMoviesAggregateInput!]
  OR: [PersonWroteMoviesAggregateInput!]
  NOT: PersonWroteMoviesAggregateInput
  node: PersonWroteMoviesNodeAggregationWhereInput
}

input PersonWroteMoviesConnectFieldInput @join__type(graph: MOVIES)  {
  where: MovieConnectWhere
  connect: [MovieConnectInput!]
}

input PersonWroteMoviesConnectionAggregateInput @join__type(graph: MOVIES)  {
  count: ConnectionAggregationCountFilterInput
  AND: [PersonWroteMoviesConnectionAggregateInput!]
  OR: [PersonWroteMoviesConnectionAggregateInput!]
  NOT: PersonWroteMoviesConnectionAggregateInput
  node: PersonWroteMoviesNodeAggregationWhereInput
}

input PersonWroteMoviesConnectionFilters @join__type(graph: MOVIES)  {
  """
  Return People where all of the related PersonWroteMoviesConnections match this filter
  """
  all: PersonWroteMoviesConnectionWhere
  """
  Return People where none of the related PersonWroteMoviesConnections match this filter
  """
  none: PersonWroteMoviesConnectionWhere
  """
  Return People where one of the related PersonWroteMoviesConnections match this filter
  """
  single: PersonWroteMoviesConnectionWhere
  """
  Return People where some of the related PersonWroteMoviesConnections match this filter
  """
  some: PersonWroteMoviesConnectionWhere
  """
  Filter People by aggregating results on related PersonWroteMoviesConnections
  """
  aggregate: PersonWroteMoviesConnectionAggregateInput
}

input PersonWroteMoviesConnectionSort @join__type(graph: MOVIES)  {
  node: MovieSort
}

input PersonWroteMoviesConnectionWhere @join__type(graph: MOVIES)  {
  AND: [PersonWroteMoviesConnectionWhere!]
  OR: [PersonWroteMoviesConnectionWhere!]
  NOT: PersonWroteMoviesConnectionWhere
  node: MovieWhere
}

input PersonWroteMoviesCreateFieldInput @join__type(graph: MOVIES)  {
  node: MovieCreateInput!
}

input PersonWroteMoviesDeleteFieldInput @join__type(graph: MOVIES)  {
  where: PersonWroteMoviesConnectionWhere
  delete: MovieDeleteInput
}

input PersonWroteMoviesDisconnectFieldInput @join__type(graph: MOVIES)  {
  where: PersonWroteMoviesConnectionWhere
  disconnect: MovieDisconnectInput
}

input PersonWroteMoviesFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonWroteMoviesConnectFieldInput!]
  create: [PersonWroteMoviesCreateFieldInput!]
}

input PersonWroteMoviesNodeAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [PersonWroteMoviesNodeAggregationWhereInput!]
  OR: [PersonWroteMoviesNodeAggregationWhereInput!]
  NOT: PersonWroteMoviesNodeAggregationWhereInput
  released_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead."
  )
  released_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead."
  )
  released_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead."
  )
  released_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead."
  )
  released_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead."
  )
  released_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead."
  )
  released_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead."
  )
  released_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead."
  )
  released_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead."
  )
  released_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead."
  )
  released_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead."
  )
  released_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead."
  )
  released_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead."
  )
  released_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead."
  )
  released_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead."
  )
  released_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead."
  )
  released_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead."
  )
  released_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead."
  )
  released_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead."
  )
  released_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead."
  )
  released: BigIntScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead."
  )
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead."
  )
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead."
  )
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead."
  )
  tagline: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead."
  )
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead."
  )
  title_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead."
  )
  title_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead."
  )
  title_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead."
  )
  title: StringScalarAggregationFilters
}

input PersonWroteMoviesUpdateConnectionInput @join__type(graph: MOVIES)  {
  node: MovieUpdateInput
  where: PersonWroteMoviesConnectionWhere
}

input PersonWroteMoviesUpdateFieldInput @join__type(graph: MOVIES)  {
  connect: [PersonWroteMoviesConnectFieldInput!]
  disconnect: [PersonWroteMoviesDisconnectFieldInput!]
  create: [PersonWroteMoviesCreateFieldInput!]
  update: PersonWroteMoviesUpdateConnectionInput
  delete: [PersonWroteMoviesDeleteFieldInput!]
}

input ReviewedPropertiesAggregationWhereInput @join__type(graph: MOVIES)  {
  AND: [ReviewedPropertiesAggregationWhereInput!]
  OR: [ReviewedPropertiesAggregationWhereInput!]
  NOT: ReviewedPropertiesAggregationWhereInput
  rating_MIN_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { min: { eq: ... } } }' instead."
  )
  rating_MAX_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { max: { eq: ... } } }' instead."
  )
  rating_SUM_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { sum: { eq: ... } } }' instead."
  )
  rating_AVERAGE_EQUAL: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { average: { eq: ... } } }' instead."
  )
  rating_MIN_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { min: { gt: ... } } }' instead."
  )
  rating_MAX_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { max: { gt: ... } } }' instead."
  )
  rating_SUM_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { sum: { gt: ... } } }' instead."
  )
  rating_AVERAGE_GT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { average: { gt: ... } } }' instead."
  )
  rating_MIN_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { min: { gte: ... } } }' instead."
  )
  rating_MAX_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { max: { gte: ... } } }' instead."
  )
  rating_SUM_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { sum: { gte: ... } } }' instead."
  )
  rating_AVERAGE_GTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { average: { gte: ... } } }' instead."
  )
  rating_MIN_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { min: { lt: ... } } }' instead."
  )
  rating_MAX_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { max: { lt: ... } } }' instead."
  )
  rating_SUM_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { sum: { lt: ... } } }' instead."
  )
  rating_AVERAGE_LT: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { average: { lt: ... } } }' instead."
  )
  rating_MIN_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { min: { lte: ... } } }' instead."
  )
  rating_MAX_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { max: { lte: ... } } }' instead."
  )
  rating_SUM_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { sum: { lte: ... } } }' instead."
  )
  rating_AVERAGE_LTE: BigInt @deprecated(
    reason: "Please use the relevant generic filter 'rating: { average: { lte: ... } } }' instead."
  )
  rating: BigIntScalarAggregationFilters
  summary_AVERAGE_LENGTH_EQUAL: Float @deprecated(
    reason: "Please use the relevant generic filter 'summary: { averageLength: { eq: ... } } }' instead."
  )
  summary_LONGEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { longestLength: { eq: ... } } }' instead."
  )
  summary_SHORTEST_LENGTH_EQUAL: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { shortestLength: { eq: ... } } }' instead."
  )
  summary_AVERAGE_LENGTH_GT: Float @deprecated(
    reason: "Please use the relevant generic filter 'summary: { averageLength: { gt: ... } } }' instead."
  )
  summary_LONGEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { longestLength: { gt: ... } } }' instead."
  )
  summary_SHORTEST_LENGTH_GT: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { shortestLength: { gt: ... } } }' instead."
  )
  summary_AVERAGE_LENGTH_GTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'summary: { averageLength: { gte: ... } } }' instead."
  )
  summary_LONGEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { longestLength: { gte: ... } } }' instead."
  )
  summary_SHORTEST_LENGTH_GTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { shortestLength: { gte: ... } } }' instead."
  )
  summary_AVERAGE_LENGTH_LT: Float @deprecated(
    reason: "Please use the relevant generic filter 'summary: { averageLength: { lt: ... } } }' instead."
  )
  summary_LONGEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { longestLength: { lt: ... } } }' instead."
  )
  summary_SHORTEST_LENGTH_LT: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { shortestLength: { lt: ... } } }' instead."
  )
  summary_AVERAGE_LENGTH_LTE: Float @deprecated(
    reason: "Please use the relevant generic filter 'summary: { averageLength: { lte: ... } } }' instead."
  )
  summary_LONGEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { longestLength: { lte: ... } } }' instead."
  )
  summary_SHORTEST_LENGTH_LTE: Int @deprecated(
    reason: "Please use the relevant generic filter 'summary: { shortestLength: { lte: ... } } }' instead."
  )
  summary: StringScalarAggregationFilters
}

input ReviewedPropertiesCreateInput @join__type(graph: MOVIES)  {
  rating: BigInt!
  summary: String!
}

input ReviewedPropertiesSort @join__type(graph: MOVIES)  {
  rating: SortDirection
  summary: SortDirection
}

input ReviewedPropertiesUpdateInput @join__type(graph: MOVIES)  {
  rating: BigIntScalarMutations
  rating_SET: BigInt
  rating_INCREMENT: BigInt @deprecated(
    reason: "Please use the relevant generic mutation 'rating: { increment: ... } }' instead."
  )
  rating_DECREMENT: BigInt @deprecated(
    reason: "Please use the relevant generic mutation 'rating: { decrement: ... } }' instead."
  )
  summary: StringScalarMutations
  summary_SET: String
}

input ReviewedPropertiesWhere @join__type(graph: MOVIES)  {
  rating: BigIntScalarFilters
  rating_EQ: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { eq: ... }") 
  rating_IN: [BigInt!] @deprecated(reason: "Please use the relevant generic filter rating: { in: ... }") 
  rating_LT: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { lt: ... }") 
  rating_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { lte: ... }") 
  rating_GT: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { gt: ... }") 
  rating_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { gte: ... }") 
  summary: StringScalarFilters
  summary_EQ: String @deprecated(reason: "Please use the relevant generic filter summary: { eq: ... }") 
  summary_IN: [String!] @deprecated(reason: "Please use the relevant generic filter summary: { in: ... }") 
  summary_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter summary: { contains: ... }") 
  summary_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter summary: { startsWith: ... }") 
  summary_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter summary: { endsWith: ... }") 
  OR: [ReviewedPropertiesWhere!]
  AND: [ReviewedPropertiesWhere!]
  NOT: ReviewedPropertiesWhere
}

"""
String list filters
"""
input StringListFilters @join__type(graph: MOVIES)  {
  eq: [String!]
  includes: String
}

"""
Filters for an aggregation of a string field
"""
input StringScalarAggregationFilters @join__type(graph: MOVIES)  {
  averageLength: FloatScalarFilters
  shortestLength: IntScalarFilters
  longestLength: IntScalarFilters
}

"""
String filters
"""
input StringScalarFilters @join__type(graph: MOVIES)  {
  eq: String
  in: [String!]
  contains: String
  endsWith: String
  startsWith: String
}

"""
String mutations
"""
input StringScalarMutations @join__type(graph: MOVIES)  {
  set: String
}
"
`;

exports[`should execute MovieWithActedIn 1`] = `
{
  "data": {
    "movies": [
      {
        "peopleActedIn": [
          {
            "name": "Emil Eifrem",
          },
          {
            "name": "Hugo Weaving",
          },
        ],
        "released": 1999,
        "tagline": "Welcome to the Real World",
        "title": "The Matrix",
      },
      {
        "peopleActedIn": [
          {
            "name": "Hugo Weaving",
          },
          {
            "name": "Laurence Fishburne",
          },
        ],
        "released": 2003,
        "tagline": "Free your mind",
        "title": "The Matrix Reloaded",
      },
    ],
  },
}
`;
