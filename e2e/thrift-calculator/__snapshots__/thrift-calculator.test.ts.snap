// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@fieldTypeMap", "@extraSchemaDefinitionDirective"]
)
{
  query: Query
  
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    \`SECURITY\` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    \`EXECUTION\` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  CALCULATOR @join__graph(name: "calculator", url: "http://0.0.0.0:<calculator_port>/thrift") 
}

directive @fieldTypeMap(subgraph: String, fieldTypeMap: FieldTypeMap)  repeatable on FIELD_DEFINITION

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

scalar FieldTypeMap @join__type(graph: CALCULATOR) 

scalar _DirectiveExtensions @join__type(graph: CALCULATOR) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{subgraph: "calculator", kind: "thrift", location: "http://0.0.0.0:<calculator_port>/thrift", headers: {}, options: {clientAnnotations: {serviceName: "Calculator", annotations: {}, methodNames: ["add", "subtract"], methodAnnotations: {add: {annotations: {}, fieldAnnotations: {}}, subtract: {annotations: {}, fieldAnnotations: {}}}, methodParameters: {add: 2, subtract: 3}}, topTypeMap: {AddRequest: {id: 0, name: "AddRequest", type: 12, fields: {left: {type: 8, id: 1}, right: {type: 8, id: 2}}}}}}]}
) @join__type(graph: CALCULATOR)  {
  add(request: AddRequestInput) : Int @fieldTypeMap(
    subgraph: "calculator"
    fieldTypeMap: {request: {name: "AddRequest", type: "ref", id: 1}}
  )
  subtract(left: Int, right: Int) : Int @fieldTypeMap(
    subgraph: "calculator"
    fieldTypeMap: {left: {type: 8, id: 1}, right: {type: 8, id: 2}}
  )
}

input AddRequestInput @join__type(graph: CALCULATOR)  {
  left: Int!
  right: Int!
}
    
"
`;

exports[`should execute Add 1`] = `
{
  "data": {
    "add": 5,
  },
}
`;
