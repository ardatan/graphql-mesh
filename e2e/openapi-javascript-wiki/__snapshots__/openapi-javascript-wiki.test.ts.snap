// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compose the appropriate schema 1`] = `
"schema @link(url: "https://specs.apollo.dev/link/v1.0") @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) @link(url: "https://the-guild.dev/graphql/mesh/spec/v1.0", import: ["@resolveRootField", "@enum", "@httpOperation", "@transport", "@extraSchemaDefinitionDirective", "@extraEnumValueDirective"]) {
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @resolveRootField(subgraph: String, field: String) repeatable on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @enum(subgraph: String, value: String) repeatable on ENUM_VALUE

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) repeatable on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions) repeatable on OBJECT

directive @extraEnumValueDirective(name: String!, value: String!, directives: _DirectiveExtensions) repeatable on OBJECT

directive @additionalField on FIELD_DEFINITION

scalar join__FieldSet

scalar link__Import

enum link__Purpose {
  """
  \`SECURITY\` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """
  \`EXECUTION\` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

enum join__Graph {
  WIKI @join__graph(name: "Wiki", url: "https://wikimedia.org/api/rest_v1")
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @join__type(graph: WIKI) @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString @join__type(graph: WIKI)

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @join__type(graph: WIKI)

scalar ObjMap @join__type(graph: WIKI)

scalar _DirectiveExtensions @join__type(graph: WIKI)

type Query @extraSchemaDefinitionDirective(directives: {transport: [{subgraph: "Wiki", kind: "rest", location: "https://wikimedia.org/api/rest_v1"}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "all_activity_levels", directives: {enum: [{subgraph: "Wiki", value: "\\"all-activity-levels\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_1__4_edits", directives: {enum: [{subgraph: "Wiki", value: "\\"1..4-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_5__24_edits", directives: {enum: [{subgraph: "Wiki", value: "\\"5..24-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_25__99_edits", directives: {enum: [{subgraph: "Wiki", value: "\\"25..99-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_100___edits", directives: {enum: [{subgraph: "Wiki", value: "\\"100..-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "all_activity_levels", directives: {enum: [{subgraph: "Wiki", value: "\\"all-activity-levels\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_1__4_edits", directives: {enum: [{subgraph: "Wiki", value: "\\"1..4-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_5__24_edits", directives: {enum: [{subgraph: "Wiki", value: "\\"5..24-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_25__99_edits", directives: {enum: [{subgraph: "Wiki", value: "\\"25..99-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level", value: "_100___edits", directives: {enum: [{subgraph: "Wiki", value: "\\"100..-edits\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "all_page_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-page-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type", value: "non_content", directives: {enum: [{subgraph: "Wiki", value: "\\"non-content\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "all_editor_types", directives: {enum: [{subgraph: "Wiki", value: "\\"all-editor-types\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "group_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"group-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type", value: "name_bot", directives: {enum: [{subgraph: "Wiki", value: "\\"name-bot\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_access_site", value: "all_sites", directives: {enum: [{subgraph: "Wiki", value: "\\"all-sites\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_access_site", value: "desktop_site", directives: {enum: [{subgraph: "Wiki", value: "\\"desktop-site\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_access_site", value: "mobile_site", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-site\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_access", value: "all_access", directives: {enum: [{subgraph: "Wiki", value: "\\"all-access\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_access", value: "mobile_app", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-app\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_access", value: "mobile_web", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-web\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_agent", value: "all_agents", directives: {enum: [{subgraph: "Wiki", value: "\\"all-agents\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_access", value: "all_access", directives: {enum: [{subgraph: "Wiki", value: "\\"all-access\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_access", value: "mobile_app", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-app\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_access", value: "mobile_web", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-web\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_agent", value: "all_agents", directives: {enum: [{subgraph: "Wiki", value: "\\"all-agents\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_access", value: "all_access", directives: {enum: [{subgraph: "Wiki", value: "\\"all-access\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_access", value: "mobile_app", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-app\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_access", value: "mobile_web", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-web\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_access", value: "all_access", directives: {enum: [{subgraph: "Wiki", value: "\\"all-access\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_access", value: "mobile_app", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-app\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_access", value: "mobile_web", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-web\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_access_site", value: "all_sites", directives: {enum: [{subgraph: "Wiki", value: "\\"all-sites\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_access_site", value: "desktop_site", directives: {enum: [{subgraph: "Wiki", value: "\\"desktop-site\\""}]}) @extraEnumValueDirective(name: "queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_access_site", value: "mobile_site", directives: {enum: [{subgraph: "Wiki", value: "\\"mobile-site\\""}]}) @extraEnumValueDirective(name: "mutationInput_post_media_math_check_by_type_type", value: "inline_tex", directives: {enum: [{subgraph: "Wiki", value: "\\"inline-tex\\""}]}) @join__type(graph: WIKI) {
  """
  Gets availability of featured feed content for the apps by wiki domain.
  
  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  """
  feed_availability: availability @httpOperation(subgraph: "Wiki", path: "/feed/availability", operationSpecificHeaders: [["Accept", "application/json; charset=utf-8; profile=\\"https://www.mediawiki.org/wiki/Specs/Availability/1.0.1\\", application/problem+json"]], httpMethod: GET)
  """
  Returns the previously-stored formula via \`/media/math/check/{type}\` for
  the given hash.
  
  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
  """
  media_math_formula_by_hash(
    """The hash string of the previous POST data"""
    hash: NonEmptyString!
  ): JSON @httpOperation(subgraph: "Wiki", path: "/media/math/formula/{args.hash}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a request hash, renders a TeX formula into its mathematic
  representation in the given format. When a request is issued to the
  \`/media/math/check/{format}\` POST endpoint, the response contains the
  \`x-resource-location\` header denoting the hash ID of the POST data. Once
  obtained, this endpoint has to be used to obtain the actual render.
  
  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
  """
  media_math_render_by_format_by_hash(
    format: queryInput_media_math_render_by_format_by_hash_format!
    """The hash string of the previous POST data"""
    hash: NonEmptyString!
  ): JSON @httpOperation(subgraph: "Wiki", path: "/media/math/render/{args.format}/{args.hash}", operationSpecificHeaders: [["Accept", "image/svg+xml, application/mathml+xml, image/png, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date range, returns a timeseries of absolute bytes
  difference sums. You can filter by editors-type (all-editor-types, anonymous, group-bot,
  name-bot, user) and page-type (all-page-types, content, non-content). You can choose
  between daily and monthly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org. If you're interested in the aggregation of all projects, use
    all-projects.
    """
    project: String!
    editor_type: queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!
    page_type: queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!
    granularity: queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): absolute_bytes_difference @httpOperation(subgraph: "Wiki", path: "/metrics/bytes-difference/absolute/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project, a page-title prefixed with canonical namespace (for
  instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes
  difference absolute sums. You can filter by editors-type (all-editor-types, anonymous,
  group-bot, name-bot, user). You can choose between daily and monthly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    """
    The page-title to request absolute bytes-difference for. Should be prefixed with the
    page canonical namespace.
    """
    page_title: String!
    editor_type: queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type!
    granularity: queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): absolute_bytes_difference_per_page @httpOperation(subgraph: "Wiki", path: "/metrics/bytes-difference/absolute/per-page/{args.project}/{args.page_title}/{args.editor_type}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date range, returns a timeseries of bytes difference net
  sums. You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot,
  user) and page-type (all-page-types, content or non-content). You can choose between
  daily and monthly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org. If you're interested in the aggregation of all projects, use
    all-projects.
    """
    project: String!
    editor_type: queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!
    page_type: queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!
    granularity: queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): net_bytes_difference @httpOperation(subgraph: "Wiki", path: "/metrics/bytes-difference/net/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project, a page-title prefixed with canonical namespace (for
  instance 'User:Jimbo_Wales') and a date range, returns a timeseries of bytes
  difference net sums. You can filter by editors-type (all-editor-types, anonymous,
  group-bot, name-bot, user). You can choose between daily and monthly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    """
    The page-title to request net bytes-difference for. Should be prefixed with the
    page canonical namespace.
    """
    page_title: String!
    editor_type: queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type!
    granularity: queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): net_bytes_difference_per_page @httpOperation(subgraph: "Wiki", path: "/metrics/bytes-difference/net/per-page/{args.project}/{args.page_title}/{args.editor_type}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date range, returns a timeseries of its edited-pages counts.
  You can filter by editor-type (all-editor-types, anonymous, group-bot, name-bot, user),
  page-type (all-page-types, content or non-content) or activity-level (1..4-edits,
  5..24-edits, 25..99-edits, 100..-edits). You can choose between daily and monthly
  granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off.  For projects like commons without language codes, use commons.wikimedia.
    For projects like www.mediawiki.org, you can use that full string, or just use
    mediawiki or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type!
    page_type: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type!
    activity_level: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level!
    granularity: queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): edited_pages @httpOperation(subgraph: "Wiki", path: "/metrics/edited-pages/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.activity_level}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date range, returns a timeseries of its new pages counts.
  You can filter by editor type (all-editor-types, anonymous, group-bot, name-bot, user)
  or page-type (all-page-types, content or non-content). You can choose between daily and
  monthly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off.  For projects like commons without language codes, use commons.wikimedia.
    For projects like www.mediawiki.org, you can use that full string, or just use
    mediawiki or mediawiki.org. If you're interested in the aggregation of all
    projects, use all-projects.
    """
    project: String!
    editor_type: queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!
    page_type: queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!
    granularity: queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): new_pages @httpOperation(subgraph: "Wiki", path: "/metrics/edited-pages/new/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
  edited-pages by absolute bytes-difference. You can filter by editor-type (all-editor-types,
  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!
    page_type: queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!
    """
    The year of the date for which to retrieve top edited-pages, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
    """
    month: String!
    """
    The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
    """
    day: String!
  ): top_edited_pages_by_abs_bytes_diff @httpOperation(subgraph: "Wiki", path: "/metrics/edited-pages/top-by-absolute-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date (day or month), returns a timeseries of the top
  100 edited-pages by edits count. You can filter by editor-type (all-editor-types,
  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or
  non-content).
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!
    page_type: queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!
    """
    The year of the date for which to retrieve top edited-pages, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
    """
    month: String!
    """
    The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
    """
    day: String!
  ): top_edited_pages_by_edits @httpOperation(subgraph: "Wiki", path: "/metrics/edited-pages/top-by-edits/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
  edited-pages by net bytes-difference. You can filter by editor-type (all-editor-types,
  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!
    page_type: queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!
    """
    The year of the date for which to retrieve top edited-pages, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top edited-pages, in MM format. If you want to get the top edited-pages of a whole month, the day parameter should be all-days.
    """
    month: String!
    """
    The day of the date for which to retrieve top edited-pages, in DD format, or all-days for a monthly value.
    """
    day: String!
  ): top_edited_pages_by_net_bytes_diff @httpOperation(subgraph: "Wiki", path: "/metrics/edited-pages/top-by-net-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date range, returns a timeseries of its editors counts.
  You can filter by editory-type (all-editor-types, anonymous, group-bot, name-bot, user),
  page-type (all-page-types, content or non-content) or activity-level (1..4-edits,
  5..24-edits, 25..99-edits or 100..-edits). You can choose between daily and monthly
  granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off.  For projects like commons without language codes, use commons.wikimedia.
    For projects like www.mediawiki.org, you can use that full string, or just use
    mediawiki or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type!
    page_type: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type!
    activity_level: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level!
    granularity: queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): editors @httpOperation(subgraph: "Wiki", path: "/metrics/editors/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.activity_level}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
  editors by absolute bytes-difference. You can filter by editor-type (all-editor-types,
  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or non-content).
  The user_text returned is either the mediawiki user_text if the user is registered, or
  null if user is anonymous.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!
    page_type: queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!
    """
    The year of the date for which to retrieve top editors, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
    """
    month: String!
    """
    The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
    """
    day: String!
  ): top_editors_by_abs_bytes_diff @httpOperation(subgraph: "Wiki", path: "/metrics/editors/top-by-absolute-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date (day or month), returns a timeseries of the top
  100 editors by edits count. You can filter by editor-type (all-editor-types,
  anonymous, group-bot, name-bot, user) or page-type (all-page-types, content or
  non-content). The user_text returned is either the mediawiki user_text if the user is
  registered, or null if user is anonymous.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!
    page_type: queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!
    """
    The year of the date for which to retrieve top editors, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
    """
    month: String!
    """
    The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
    """
    day: String!
  ): top_editors_by_edits @httpOperation(subgraph: "Wiki", path: "/metrics/editors/top-by-edits/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date (day or month), returns a timeseries of the top 100
  editors by net bytes-difference. You can filter by editor-type (all-editor-types, anonymous,
  group-bot, name-bot, user) or page-type (all-page-types, content or non-content). The
  user_text returned is either the mediawiki user_text if the user is registered, or
  "Anonymous Editor" if user is anonymous.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    editor_type: queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type!
    page_type: queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type!
    """
    The year of the date for which to retrieve top editors, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top editors, in MM format. If you want to get the top editors of a whole month, the day parameter should be all-days.
    """
    month: String!
    """
    The day of the date for which to retrieve top editors, in DD format, or all-days for a monthly value.
    """
    day: String!
  ): top_editors_by_net_bytes_diff @httpOperation(subgraph: "Wiki", path: "/metrics/editors/top-by-net-bytes-difference/{args.project}/{args.editor_type}/{args.page_type}/{args.year}/{args.month}/{args.day}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date range, returns a timeseries of edits counts.
  You can filter by editors-type (all-editor-types, anonymous, bot, registered) and
  page-type (all-page-types, content or non-content). You can choose between daily and
  monthly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off.  For projects like commons without language codes, use commons.wikimedia.
    For projects like www.mediawiki.org, you can use that full string, or just use
    mediawiki or mediawiki.org. If you're interested in the aggregation of
    all projects, use all-projects.
    """
    project: String!
    editor_type: queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type!
    page_type: queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type!
    granularity: queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): edits @httpOperation(subgraph: "Wiki", path: "/metrics/edits/aggregate/{args.project}/{args.editor_type}/{args.page_type}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project, a page-title prefixed with its canonical namespace (for
  instance 'User:Jimbo_Wales') and a date range, returns a timeseries of edit counts.
  You can filter by editors-type (all-editor-types, anonymous, group-bot, name-bot, user).
  You can choose between daily and monthly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia. For
    projects like www.mediawiki.org, you can use that full string, or just use mediawiki
    or mediawiki.org.
    """
    project: String!
    """
    The page-title to request edits for. It should be prefixed with canonical namespace.
    Spaces will be converted to underscores.
    """
    page_title: String!
    editor_type: queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type!
    granularity: queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): edits_per_page @httpOperation(subgraph: "Wiki", path: "/metrics/edits/per-page/{args.project}/{args.page_title}/{args.editor_type}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a project and a date range, returns a timeseries of pagecounts.
  You can filter by access site (mobile or desktop) and you can choose between monthly,
  daily and hourly granularity as well.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 100 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off. For projects like commons without language codes, use commons.wikimedia.
    """
    project: String!
    access_site: queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_access_site!
    granularity: queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_granularity!
    """
    The timestamp of the first hour/day/month to include, in YYYYMMDDHH format.
    """
    start: String!
    """
    The timestamp of the last hour/day/month to include, in YYYYMMDDHH format.
    In hourly and daily granularities this value is inclusive, in the monthly granularity
    this value is exclusive.
    """
    end: String!
  ): pagecounts_project @httpOperation(subgraph: "Wiki", path: "/metrics/legacy/pagecounts/aggregate/{args.project}/{args.access_site}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a date range, returns a timeseries of pageview counts. You can filter by project,
  access method and/or agent type. You can choose between daily and hourly granularity
  as well.
  
  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
  - Rate limit: 100 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end(
    """
    If you want to filter by project, use the domain of any Wikimedia project,
    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
    If you are interested in all pageviews regardless of project, use all-projects.
    """
    project: String!
    access: queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_access!
    agent: queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_agent!
    granularity: queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_granularity!
    """
    The timestamp of the first hour/day/month to include, in YYYYMMDDHH format
    """
    start: String!
    """
    The timestamp of the last hour/day/month to include, in YYYYMMDDHH format
    """
    end: String!
  ): pageview_project @httpOperation(subgraph: "Wiki", path: "/metrics/pageviews/aggregate/{args.project}/{args.access}/{args.agent}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki article and a date range, returns a daily timeseries of its pageview
  counts. You can also filter by access method and/or agent type.
  
  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
  - Rate limit: 100 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end(
    """
    If you want to filter by project, use the domain of any Wikimedia project,
    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
    """
    project: String!
    access: queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_access!
    agent: queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_agent!
    """
    'The title of any article in the specified project. Any spaces should be replaced
    with underscores. It also should be URI-encoded, so that non-URI-safe characters like
    %, / or ? are accepted. Example: Are_You_the_One%3F'.
    """
    article: String!
    granularity: queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format"""
    end: String!
  ): pageview_article @httpOperation(subgraph: "Wiki", path: "/metrics/pageviews/per-article/{args.project}/{args.access}/{args.agent}/{args.article}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Lists the pageviews to this project, split by country of origin for a given month.
  Because of privacy reasons, pageviews are given in a bucketed format, and countries
  with less than 100 views do not get reported.
  Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 100 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month(
    """
    If you want to filter by project, use the domain of any Wikimedia project,
    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
    """
    project: String!
    access: queryInput_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_access!
    """
    The year of the date for which to retrieve top countries, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top countries, in MM format.
    """
    month: String!
  ): by_country @httpOperation(subgraph: "Wiki", path: "/metrics/pageviews/top-by-country/{args.project}/{args.access}/{args.year}/{args.month}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Lists the 1000 most viewed articles for a given project and timespan (month or day).
  You can filter by access method.
  
  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
  - Rate limit: 100 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day(
    """
    If you want to filter by project, use the domain of any Wikimedia project,
    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
    """
    project: String!
    access: queryInput_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_access!
    """
    The year of the date for which to retrieve top articles, in YYYY format.
    """
    year: String!
    """
    The month of the date for which to retrieve top articles, in MM format. If you want
    to get the top articles of a whole month, the day parameter should be all-days.
    """
    month: String!
    """The day of the date for which to retrieve top articles, in DD format."""
    day: String!
  ): pageview_tops @httpOperation(subgraph: "Wiki", path: "/metrics/pageviews/top/{args.project}/{args.access}/{args.year}/{args.month}/{args.day}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a Mediawiki project and a date range, returns a timeseries of its newly registered
  users counts. You can choose between daily and monthly granularity. The newly registered
  users value is computed with self-created users only, not auto-login created ones.
  
  - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
  - Rate limit: 25 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_registered_users_new_by_project_by_granularity_by_start_by_end(
    """
    The name of any Wikimedia project formatted like {language code}.{project name},
    for example en.wikipedia. You may pass en.wikipedia.org and the .org will be stripped
    off.  For projects like commons without language codes, use commons.wikimedia.
    For projects like www.mediawiki.org, you can use that full string, or just use
    mediawiki or mediawiki.org. If you're interested in the aggregation of
    all projects, use all.
    """
    project: String!
    granularity: queryInput_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_granularity!
    """The date of the first day to include, in YYYYMMDD format"""
    start: String!
    """The date of the last day to include, in YYYYMMDD format"""
    end: String!
  ): new_registered_users @httpOperation(subgraph: "Wiki", path: "/metrics/registered-users/new/{args.project}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Given a project and a date range, returns a timeseries of unique devices counts.
  You need to specify a project, and can filter by accessed site (mobile or desktop).
  You can choose between daily and hourly granularity as well.
  
  - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
  - Rate limit: 100 req/s
  - License: Data accessible via this endpoint is available under the
    [CC0 1.0 license](https://creativecommons.org/publicdomain/zero/1.0/).
  """
  metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end(
    """
    If you want to filter by project, use the domain of any Wikimedia project,
    for example 'en.wikipedia.org', 'www.mediawiki.org' or 'commons.wikimedia.org'.
    """
    project: String!
    access_site: queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_access_site!
    granularity: queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_granularity!
    """The timestamp of the first day/month to include, in YYYYMMDD format"""
    start: String!
    """The timestamp of the last day/month to include, in YYYYMMDD format"""
    end: String!
  ): unique_devices @httpOperation(subgraph: "Wiki", path: "/metrics/unique-devices/{args.project}/{args.access_site}/{args.granularity}/{args.start}/{args.end}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Fetches the list of language pairs the back-end service can translate
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  transform_list_languagepairs: cx_languagepairs @httpOperation(subgraph: "Wiki", path: "/transform/list/languagepairs/", operationSpecificHeaders: [["Accept", "application/json"]], httpMethod: GET)
  """
  Fetches the list of tools that are available for the given pair of languages.
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  transform_list_pair_by_from_by_to(
    """The source language code"""
    from: String!
    """The target language code"""
    to: String!
  ): cx_list_tools @httpOperation(subgraph: "Wiki", path: "/transform/list/pair/{args.from}/{args.to}/", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Fetches the list of tools and all of the language pairs it can translate
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  transform_list_tool_by_tool(tool: queryInput_transform_list_tool_by_tool_tool!): JSON @httpOperation(subgraph: "Wiki", path: "/transform/list/tool/{args.tool}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Fetches the list of tools and all of the language pairs it can translate
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  transform_list_tool_by_tool_by_from(
    tool: queryInput_transform_list_tool_by_tool_by_from_tool!
    """The source language code"""
    from: String!
  ): JSON @httpOperation(subgraph: "Wiki", path: "/transform/list/tool/{args.tool}/{args.from}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Fetches the list of tools and all of the language pairs it can translate
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  transform_list_tool_by_tool_by_from_by_to(
    tool: queryInput_transform_list_tool_by_tool_by_from_by_to_tool!
    """The source language code"""
    from: String!
    """The target language code"""
    to: String!
  ): JSON @httpOperation(subgraph: "Wiki", path: "/transform/list/tool/{args.tool}/{args.from}/{args.to}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Fetches the dictionary meaning of a word from a language and displays
  it in the target language.
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  transform_word_from_by_from_lang_to_by_to_lang_by_word(
    """The source language code"""
    from_lang: String!
    """The target language code"""
    to_lang: String!
    """The word to lookup"""
    word: String!
  ): cx_dict @httpOperation(subgraph: "Wiki", path: "/transform/word/from/{args.from_lang}/to/{args.to_lang}/{args.word}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  """
  Fetches the dictionary meaning of a word from a language and displays
  it in the target language.
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider(
    """The source language code"""
    from_lang: String!
    """The target language code"""
    to_lang: String!
    """The word to lookup"""
    word: String!
    provider: queryInput_transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider_provider!
  ): cx_dict @httpOperation(subgraph: "Wiki", path: "/transform/word/from/{args.from_lang}/to/{args.to_lang}/{args.word}/{args.provider}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: GET)
  viewsInPastMonth(project: String!): Int! @additionalField
}

type availability @join__type(graph: WIKI) {
  """
  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
  """
  in_the_news: [String]!
  """
  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
  """
  most_read: [String]!
  """
  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
  """
  on_this_day: [String]!
  """
  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
  """
  picture_of_the_day: [String]!
  """
  domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
  """
  todays_featured_article: [String]!
}

type absolute_bytes_difference @join__type(graph: WIKI) {
  items: [query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items]
}

type query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  abs_bytes_diff: BigInt
  timestamp: String
}

type absolute_bytes_difference_per_page @join__type(graph: WIKI) {
  items: [query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items]
}

type query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_title: String @resolveRootField(subgraph: "Wiki", field: "page-title")
  project: String
  results: [query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  abs_bytes_diff: BigInt
  timestamp: String
}

type net_bytes_difference @join__type(graph: WIKI) {
  items: [query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items]
}

type query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  net_bytes_diff: BigInt
  timestamp: String
}

type net_bytes_difference_per_page @join__type(graph: WIKI) {
  items: [query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items]
}

type query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_title: String @resolveRootField(subgraph: "Wiki", field: "page-title")
  project: String
  results: [query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  net_bytes_diff: BigInt
  timestamp: String
}

type edited_pages @join__type(graph: WIKI) {
  items: [query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items]
}

type query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  activity_level: String @resolveRootField(subgraph: "Wiki", field: "activity-level")
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  edited_pages: Int
  timestamp: String
}

type new_pages @join__type(graph: WIKI) {
  items: [query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items]
}

type query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  new_pages: Int
  timestamp: String
}

type top_edited_pages_by_abs_bytes_diff @join__type(graph: WIKI) {
  items: [query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items]
}

type query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items]
}

type query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items @join__type(graph: WIKI) {
  timestamp: String
  top: [query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items]
}

type query_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items @join__type(graph: WIKI) {
  abs_bytes_diff: BigInt
  page_title: String
  rank: Int
}

type top_edited_pages_by_edits @join__type(graph: WIKI) {
  items: [query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items]
}

type query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items]
}

type query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items @join__type(graph: WIKI) {
  timestamp: String
  top: [query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items]
}

type query_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items @join__type(graph: WIKI) {
  edits: BigInt
  page_title: String
  rank: Int
}

type top_edited_pages_by_net_bytes_diff @join__type(graph: WIKI) {
  items: [query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items]
}

type query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items]
}

type query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items @join__type(graph: WIKI) {
  timestamp: String
  top: [query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items]
}

type query_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items @join__type(graph: WIKI) {
  net_bytes_diff: BigInt
  page_title: String
  rank: Int
}

type editors @join__type(graph: WIKI) {
  items: [query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items]
}

type query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  activity_level: String @resolveRootField(subgraph: "Wiki", field: "activity-level")
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  editors: Int
  timestamp: String
}

type top_editors_by_abs_bytes_diff @join__type(graph: WIKI) {
  items: [query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items]
}

type query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items]
}

type query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items @join__type(graph: WIKI) {
  timestamp: String
  top: [query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items]
}

type query_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items @join__type(graph: WIKI) {
  abs_bytes_diff: BigInt
  rank: Int
  user_text: String
}

type top_editors_by_edits @join__type(graph: WIKI) {
  items: [query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items]
}

type query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items]
}

type query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items @join__type(graph: WIKI) {
  timestamp: String
  top: [query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items]
}

type query_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items @join__type(graph: WIKI) {
  edits: BigInt
  rank: Int
  user_text: String
}

type top_editors_by_net_bytes_diff @join__type(graph: WIKI) {
  items: [query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items]
}

type query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items]
}

type query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items @join__type(graph: WIKI) {
  timestamp: String
  top: [query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items]
}

type query_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_items_items_results_items_top_items @join__type(graph: WIKI) {
  net_bytes_diff: BigInt
  rank: Int
  user_text: String
}

type edits @join__type(graph: WIKI) {
  items: [query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items]
}

type query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_type: String @resolveRootField(subgraph: "Wiki", field: "page-type")
  project: String
  results: [query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  edits: BigInt
  timestamp: String
}

type edits_per_page @join__type(graph: WIKI) {
  items: [query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items]
}

type query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  editor_type: String @resolveRootField(subgraph: "Wiki", field: "editor-type")
  granularity: String
  page_title: String @resolveRootField(subgraph: "Wiki", field: "page-title")
  project: String
  results: [query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  edits: BigInt
  timestamp: String
}

type pagecounts_project @join__type(graph: WIKI) {
  items: [query_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_items_items]
}

type query_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  access_site: String @resolveRootField(subgraph: "Wiki", field: "access-site")
  count: BigInt
  granularity: String
  project: String
  timestamp: String
}

type pageview_project @join__type(graph: WIKI) {
  items: [query_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_items_items]
}

type query_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  access: String
  agent: String
  granularity: String
  project: String
  timestamp: String
  views: BigInt
}

type pageview_article @join__type(graph: WIKI) {
  items: [query_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_items_items]
}

type query_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  access: String
  agent: String
  article: String
  granularity: String
  project: String
  timestamp: String
  views: BigInt
}

type by_country @join__type(graph: WIKI) {
  items: [query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_items_items]
}

type query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_items_items @join__type(graph: WIKI) {
  access: String
  countries: [query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_items_items_countries_items]
  month: String
  project: String
  year: String
}

type query_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_items_items_countries_items @join__type(graph: WIKI) {
  country: String
  rank: Int
  views: BigInt
}

type pageview_tops @join__type(graph: WIKI) {
  items: [query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_items_items]
}

type query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_items_items @join__type(graph: WIKI) {
  access: String
  articles: [query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_items_items_articles_items]
  day: String
  month: String
  project: String
  year: String
}

type query_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_items_items_articles_items @join__type(graph: WIKI) {
  article: String
  rank: Int
  views: BigInt
}

type new_registered_users @join__type(graph: WIKI) {
  items: [query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_items_items]
}

type query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  granularity: String
  project: String
  results: [query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_items_items_results_items]
}

type query_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_items_items_results_items @join__type(graph: WIKI) {
  new_registered_users: Int
  timestamp: String
}

type unique_devices @join__type(graph: WIKI) {
  items: [query_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_items_items]
}

type query_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_items_items @join__type(graph: WIKI) {
  access_site: String @resolveRootField(subgraph: "Wiki", field: "access-site")
  devices: BigInt
  granularity: String
  project: String
  timestamp: String
}

type cx_languagepairs @join__type(graph: WIKI) {
  """the list of available source languages"""
  source: [String]
  """the list of available destination languages"""
  target: [String]
}

type cx_list_tools @join__type(graph: WIKI) {
  """the list of tools available for the given language pair"""
  tools: [String]
}

type cx_dict @join__type(graph: WIKI) {
  """the original word to look up"""
  source: String
  """the translations found"""
  translations: [query_transform_word_from_by_from_lang_to_by_to_lang_by_word_translations_items]
}

type query_transform_word_from_by_from_lang_to_by_to_lang_by_word_translations_items @join__type(graph: WIKI) {
  """extra information about the phrase"""
  info: String
  """the translated phrase"""
  phrase: String
  """the source dictionary used for the translation"""
  sources: String
}

type Mutation @join__type(graph: WIKI) {
  """
  Checks the supplied TeX formula for correctness and returns the
  normalised formula representation as well as information about
  identifiers. Available types are tex and inline-tex. The response
  contains the \`x-resource-location\` header which can be used to retrieve
  the render of the checked formula in one of the supported rendering
  formats. Just append the value of the header to \`/media/math/{format}/\`
  and perform a GET request against that URL.
  
  Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
  """
  post_media_math_check_by_type(type: mutationInput_post_media_math_check_by_type_type!): JSON @httpOperation(subgraph: "Wiki", path: "/media/math/check/{args.type}", operationSpecificHeaders: [["Accept", "application/json, application/problem+json"]], httpMethod: POST)
  """
  Fetches the machine translation for the posted content from the source
  to the destination language.
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  post_transform_html_from_by_from_lang_to_by_to_lang(
    """The source language code"""
    from_lang: String!
    """The target language code"""
    to_lang: String!
  ): cx_mt @httpOperation(subgraph: "Wiki", path: "/transform/html/from/{args.from_lang}/to/{args.to_lang}", operationSpecificHeaders: [["Content-Type", "application/x-www-form-urlencoded"], ["Accept", "application/json, application/problem+json"]], httpMethod: POST)
  """
  Fetches the machine translation for the posted content from the source
  to the destination language.
  
  Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
  """
  post_transform_html_from_by_from_lang_to_by_to_lang_by_provider(
    """The source language code"""
    from_lang: String!
    """The target language code"""
    to_lang: String!
    provider: mutationInput_post_transform_html_from_by_from_lang_to_by_to_lang_by_provider_provider!
  ): cx_mt @httpOperation(subgraph: "Wiki", path: "/transform/html/from/{args.from_lang}/to/{args.to_lang}/{args.provider}", operationSpecificHeaders: [["Content-Type", "application/x-www-form-urlencoded"], ["Accept", "application/json, application/problem+json"]], httpMethod: POST)
}

type cx_mt @join__type(graph: WIKI) {
  """the translated content"""
  contents: String
}

"""The output format; can be svg or mml"""
enum queryInput_media_math_render_by_format_by_hash_format @join__type(graph: WIKI) {
  svg @join__enumValue(graph: WIKI)
  mml @join__enumValue(graph: WIKI)
  png @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
Time unit for the response data. As of today, supported values are daily and monthly
"""
enum queryInput_metrics_bytes_difference_absolute_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
Time unit for the response data. As of today, supported values are daily and monthly
"""
enum queryInput_metrics_bytes_difference_absolute_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
Time unit for the response data. As of today, supported values are daily and monthly
"""
enum queryInput_metrics_bytes_difference_net_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
Time unit for the response data. As of today, supported values are daily and monthly
"""
enum queryInput_metrics_bytes_difference_net_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edited-pages in content
namespaces) or non-content (edited-pages in non-content namespaces). If you are
interested in edited-pages regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,
25..99-edits or 100..-edits. If you are interested in edited-pages regardless
of their activity level, use all-activity-levels.
"""
enum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level @join__type(graph: WIKI) {
  all_activity_levels @join__enumValue(graph: WIKI)
  _1__4_edits @join__enumValue(graph: WIKI)
  _5__24_edits @join__enumValue(graph: WIKI)
  _25__99_edits @join__enumValue(graph: WIKI)
  _100___edits @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, supported values are
daily and monthly.
"""
enum queryInput_metrics_edited_pages_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging
to the bot group but having bot-like names) or user (registered account not in bot
group nor having bot-like name). If you are interested in edits regardless of
their editor-type, use all-editor-types.
"""
enum queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (new pages in content
namespaces) or non-content (new pages in non-content namespaces). If you are
interested in new-articles regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, supported values are
daily and monthly.
"""
enum queryInput_metrics_edited_pages_new_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_edited_pages_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_edited_pages_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_edited_pages_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging
to the bot group but having bot-like names) or user (registered account not in bot
group nor having bot-like name). If you are interested in edits regardless
of their editor-type, use all-editor-types.
"""
enum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits made in content
namespaces) or non-content (edits made in non-content namespaces). If you are
interested in editors regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by activity-level, use one of 1..4-edits, 5..24-edits,
25..99-edits or 100..-edits. If you are interested in editors regardless
of their activity-level, use all-activity-levels.
"""
enum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_activity_level @join__type(graph: WIKI) {
  all_activity_levels @join__enumValue(graph: WIKI)
  _1__4_edits @join__enumValue(graph: WIKI)
  _5__24_edits @join__enumValue(graph: WIKI)
  _25__99_edits @join__enumValue(graph: WIKI)
  _100___edits @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, supported values are
daily and monthly.
"""
enum queryInput_metrics_editors_aggregate_by_project_by_editor_type_by_page_type_by_activity_level_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_editors_top_by_absolute_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_editors_top_by_edits_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_editors_top_by_net_bytes_difference_by_project_by_editor_type_by_page_type_by_year_by_month_by_day_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging
to the bot group but having bot-like names) or user (registered account not in bot
group nor having bot-like name). If you are interested in edits regardless
of their editor-type, use all-editor-types.
"""
enum queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
If you want to filter by page-type, use one of content (edits on pages in content
namespaces) or non-content (edits on pages in non-content namespaces). If you are
interested in edits regardless of their page-type, use all-page-types.
"""
enum queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_page_type @join__type(graph: WIKI) {
  all_page_types @join__enumValue(graph: WIKI)
  content @join__enumValue(graph: WIKI)
  non_content @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, supported values are
daily and monthly.
"""
enum queryInput_metrics_edits_aggregate_by_project_by_editor_type_by_page_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by editor-type, use one of anonymous, group-bot (registered
accounts belonging to the bot group), name-bot (registered accounts not belonging to
the bot group but having bot-like names) or user (registered account not in bot group
nor having bot-like name). If you are interested in edits regardless of their
editor-type, use all-editor-types.
"""
enum queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_editor_type @join__type(graph: WIKI) {
  all_editor_types @join__enumValue(graph: WIKI)
  anonymous @join__enumValue(graph: WIKI)
  group_bot @join__enumValue(graph: WIKI)
  name_bot @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
}

"""
Time unit for the response data. As of today, supported values are daily and monthly
"""
enum queryInput_metrics_edits_per_page_by_project_by_page_title_by_editor_type_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by access site, use one of desktop-site or mobile-site. If you are interested in pagecounts regardless of access site use all-sites.
"""
enum queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_access_site @join__type(graph: WIKI) {
  all_sites @join__enumValue(graph: WIKI)
  desktop_site @join__enumValue(graph: WIKI)
  mobile_site @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, the supported granularities for
this endpoint are hourly, daily and monthly.
"""
enum queryInput_metrics_legacy_pagecounts_aggregate_by_project_by_access_site_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  hourly @join__enumValue(graph: WIKI)
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
If you are interested in pageviews regardless of access method, use all-access.
"""
enum queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_access @join__type(graph: WIKI) {
  all_access @join__enumValue(graph: WIKI)
  desktop @join__enumValue(graph: WIKI)
  mobile_app @join__enumValue(graph: WIKI)
  mobile_web @join__enumValue(graph: WIKI)
}

"""
If you want to filter by agent type, use one of user or spider. If you are interested
in pageviews regardless of agent type, use all-agents.
"""
enum queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_agent @join__type(graph: WIKI) {
  all_agents @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
  spider @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, the supported granularities for this
endpoint are hourly, daily, and monthly.
"""
enum queryInput_metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  hourly @join__enumValue(graph: WIKI)
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by access method, use one of desktop, mobile-app
or mobile-web. If you are interested in pageviews regardless of access method,
use all-access.
"""
enum queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_access @join__type(graph: WIKI) {
  all_access @join__enumValue(graph: WIKI)
  desktop @join__enumValue(graph: WIKI)
  mobile_app @join__enumValue(graph: WIKI)
  mobile_web @join__enumValue(graph: WIKI)
}

"""
If you want to filter by agent type, use one of user, bot or spider. If you are
interested in pageviews regardless of agent type, use all-agents.
"""
enum queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_agent @join__type(graph: WIKI) {
  all_agents @join__enumValue(graph: WIKI)
  user @join__enumValue(graph: WIKI)
  spider @join__enumValue(graph: WIKI)
  bot @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, the only supported granularity for
this endpoint is daily and monthly.
"""
enum queryInput_metrics_pageviews_per_article_by_project_by_access_by_agent_by_article_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
If you are interested in pageviews regardless of access method, use all-access.
"""
enum queryInput_metrics_pageviews_top_by_country_by_project_by_access_by_year_by_month_access @join__type(graph: WIKI) {
  all_access @join__enumValue(graph: WIKI)
  desktop @join__enumValue(graph: WIKI)
  mobile_app @join__enumValue(graph: WIKI)
  mobile_web @join__enumValue(graph: WIKI)
}

"""
If you want to filter by access method, use one of desktop, mobile-app or mobile-web.
If you are interested in pageviews regardless of access method, use all-access.
"""
enum queryInput_metrics_pageviews_top_by_project_by_access_by_year_by_month_by_day_access @join__type(graph: WIKI) {
  all_access @join__enumValue(graph: WIKI)
  desktop @join__enumValue(graph: WIKI)
  mobile_app @join__enumValue(graph: WIKI)
  mobile_web @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, supported values are
daily and monthly.
"""
enum queryInput_metrics_registered_users_new_by_project_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""
If you want to filter by accessed site, use one of desktop-site or mobile-site.
If you are interested in unique devices regardless of accessed site, use or all-sites.
"""
enum queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_access_site @join__type(graph: WIKI) {
  all_sites @join__enumValue(graph: WIKI)
  desktop_site @join__enumValue(graph: WIKI)
  mobile_site @join__enumValue(graph: WIKI)
}

"""
The time unit for the response data. As of today, the supported granularities
for this endpoint are daily and monthly.
"""
enum queryInput_metrics_unique_devices_by_project_by_access_site_by_granularity_by_start_by_end_granularity @join__type(graph: WIKI) {
  daily @join__enumValue(graph: WIKI)
  monthly @join__enumValue(graph: WIKI)
}

"""The tool category to list tools and language pairs for"""
enum queryInput_transform_list_tool_by_tool_tool @join__type(graph: WIKI) {
  mt @join__enumValue(graph: WIKI)
  dictionary @join__enumValue(graph: WIKI)
}

"""The tool category to list tools and language pairs for"""
enum queryInput_transform_list_tool_by_tool_by_from_tool @join__type(graph: WIKI) {
  mt @join__enumValue(graph: WIKI)
  dictionary @join__enumValue(graph: WIKI)
}

"""The tool category to list tools and language pairs for"""
enum queryInput_transform_list_tool_by_tool_by_from_by_to_tool @join__type(graph: WIKI) {
  mt @join__enumValue(graph: WIKI)
  dictionary @join__enumValue(graph: WIKI)
}

"""The dictionary provider id"""
enum queryInput_transform_word_from_by_from_lang_to_by_to_lang_by_word_by_provider_provider @join__type(graph: WIKI) {
  JsonDict @join__enumValue(graph: WIKI)
  Dictd @join__enumValue(graph: WIKI)
}

"""The input type of the given formula; can be tex or inline-tex"""
enum mutationInput_post_media_math_check_by_type_type @join__type(graph: WIKI) {
  tex @join__enumValue(graph: WIKI)
  inline_tex @join__enumValue(graph: WIKI)
  chem @join__enumValue(graph: WIKI)
}

"""The machine translation provider id"""
enum mutationInput_post_transform_html_from_by_from_lang_to_by_to_lang_by_provider_provider @join__type(graph: WIKI) {
  Apertium @join__enumValue(graph: WIKI)
  Yandex @join__enumValue(graph: WIKI)
  Youdao @join__enumValue(graph: WIKI)
}

enum HTTPMethod @join__type(graph: WIKI) {
  GET @join__enumValue(graph: WIKI)
  HEAD @join__enumValue(graph: WIKI)
  POST @join__enumValue(graph: WIKI)
  PUT @join__enumValue(graph: WIKI)
  DELETE @join__enumValue(graph: WIKI)
  CONNECT @join__enumValue(graph: WIKI)
  OPTIONS @join__enumValue(graph: WIKI)
  TRACE @join__enumValue(graph: WIKI)
  PATCH @join__enumValue(graph: WIKI)
}
"
`;

exports[`should execute Metrics 1`] = `
{
  "data": {
    "metrics_pageviews_aggregate_by_project_by_access_by_agent_by_granularity_by_start_by_end": {
      "items": [
        {
          "views": 251269426,
        },
        {
          "views": 268920258,
        },
        {
          "views": 264139157,
        },
        {
          "views": 263223806,
        },
        {
          "views": 281644795,
        },
        {
          "views": 288258779,
        },
        {
          "views": 274868425,
        },
        {
          "views": 265674834,
        },
        {
          "views": 262894974,
        },
        {
          "views": 257460877,
        },
        {
          "views": 260429193,
        },
        {
          "views": 278575834,
        },
        {
          "views": 277540873,
        },
        {
          "views": 271661525,
        },
        {
          "views": 261316738,
        },
        {
          "views": 262574894,
        },
        {
          "views": 253126793,
        },
        {
          "views": 255096104,
        },
        {
          "views": 277613184,
        },
        {
          "views": 281145569,
        },
        {
          "views": 268440458,
        },
        {
          "views": 263249933,
        },
        {
          "views": 262433466,
        },
        {
          "views": 257384061,
        },
        {
          "views": 255541977,
        },
        {
          "views": 278443117,
        },
        {
          "views": 292464883,
        },
        {
          "views": 270772229,
        },
        {
          "views": 260524308,
        },
        {
          "views": 257732732,
        },
        {
          "views": 248206663,
        },
        {
          "views": 244934940,
        },
        {
          "views": 265318374,
        },
        {
          "views": 276224331,
        },
        {
          "views": 261069365,
        },
        {
          "views": 262715392,
        },
        {
          "views": 259931201,
        },
        {
          "views": 247873441,
        },
        {
          "views": 263134092,
        },
        {
          "views": 278995396,
        },
        {
          "views": 293768484,
        },
        {
          "views": 267073808,
        },
        {
          "views": 260339950,
        },
        {
          "views": 258557598,
        },
        {
          "views": 245577997,
        },
        {
          "views": 256179598,
        },
        {
          "views": 276950447,
        },
        {
          "views": 274320398,
        },
        {
          "views": 270860495,
        },
        {
          "views": 265142387,
        },
        {
          "views": 260041466,
        },
        {
          "views": 247876009,
        },
        {
          "views": 247227677,
        },
        {
          "views": 267332134,
        },
        {
          "views": 269889291,
        },
        {
          "views": 261068472,
        },
        {
          "views": 258661981,
        },
      ],
    },
  },
}
`;

exports[`should execute ViewsInPastMonth 1`] = `
{
  "data": {
    "viewsInPastMonth": 244752383,
  },
}
`;
