name: Tests

on:
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Master
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: 17
      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-17-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-17-node-modules-

      - name: Install Dependencies using Yarn
        run: yarn install --ignore-engines && git checkout yarn.lock
      - name: Lint
        run: yarn lint
  typecheck:
    name: TypeScript Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Master
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: 17
      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-17-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-17-node-modules-

      - name: Install Dependencies using Yarn
        run: yarn install --ignore-engines && git checkout yarn.lock
      - name: Type Checking
        run: yarn transpile-ts --noEmit # We need build for playground

  test:
    name: Testing on Node ${{matrix.node-version}}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12, 17]
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: docker
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      mysql:
        image: genschsa/mysql-employees
        env:
          MYSQL_ROOT_PASSWORD: passwd
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Master
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node ${{matrix.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{matrix.node-version}}-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{matrix.node-version}}-node-modules-
      - name: Install Dependencies using Yarn
        run: yarn install --ignore-engines && git checkout yarn.lock
      - name: Cache Jest
        uses: actions/cache@v3
        with:
          path: .cache/jest
          key: ${{ runner.os }}-${{matrix.node-version}}-jest-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{matrix.node-version}}-jest-
      - name: Download Postgres Dump
        run: 'curl https://raw.githubusercontent.com/morenoh149/postgresDBSamples/master/worldDB-1.0/world.sql -o /tmp/backup.sql'
      - name: Load Postgres Data
        uses: tj-actions/pg-restore@v4.5
        with:
          database_url: 'postgres://postgres:docker@localhost:5432/postgres'
          backup_file: '/tmp/backup.sql'
      - name: Build
        run: yarn build
      - name: Build Test Artifacts
        run: yarn build-test-artifacts
      - name: Test
        run: yarn test
        env:
          CI: true
          NODE_TLS_REJECT_UNAUTHORIZED: 0
          GH_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: en-US
