name: test
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  CI: true
  NODE_TLS_REJECT_UNAUTHORIZED: 0
  GH_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  LC_ALL: en-US
  REDIS_HOST: localhost
  REDIS_PORT: 6379
jobs:
  lint:
    uses: the-guild-org/shared-config/.github/workflows/lint.yml@main
    with:
      script: yarn prettier:check && yarn ci:lint
      packageManagerVersion: modern
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}

  typecheck:
    name: typecheck
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - uses: the-guild-org/shared-config/setup@main
        name: setup env
        with:
          packageManagerVersion: modern
      - name: typecheck
        run: yarn typecheck

  unit:
    name: unit / node ${{matrix.node-version}}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20, 21]

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install Required Libraries
        run: sudo apt update && sudo apt install -y libcurl4-openssl-dev libssl-dev

      - uses: the-guild-org/shared-config/setup@main
        name: setup env
        with:
          nodeVersion: ${{matrix.node-version}}
          packageManagerVersion: modern

      - name: Cache Jest
        uses: actions/cache@v4
        with:
          path: .cache/jest
          key: ${{ runner.os }}-${{matrix.node-version}}-jest-unit-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-${{matrix.node-version}}-jest-unit-

      - name: Run Tests
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: yarn test

  unit-leaks:
    name: unit / leak / node ${{matrix.node-version}}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18]

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install Required Libraries
        run: sudo apt update && sudo apt install -y libcurl4-openssl-dev libssl-dev

      - name: Use Node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Remove node-libcurl
        run: node scripts/remove-node-libcurl.cjs

      - uses: the-guild-org/shared-config/setup@main
        name: setup env
        with:
          nodeVersion: ${{matrix.node-version}}
          packageManagerVersion: modern

      - name: Cache Jest
        uses: actions/cache@v4
        with:
          path: .cache/jest
          key: ${{ runner.os }}-${{matrix.node-version}}-jest-unit-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-${{matrix.node-version}}-jest-unit-

      - name: Remove node-libcurl
        run: rm -rf node_modules/node-libcurl

      - name: Run Tests
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: yarn test:leak

  integration:
    name: integration / node ${{matrix.node-version}}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20, 21]
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: docker
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      mysql:
        image: genschsa/mysql-employees
        env:
          MYSQL_ROOT_PASSWORD: passwd
        ports:
          - 33306:3306
        options:
          --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s
          --health-retries=3
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install Required Libraries
        run: sudo apt update && sudo apt install -y libcurl4-openssl-dev libssl-dev

      - uses: the-guild-org/shared-config/setup@main
        name: setup env
        with:
          nodeVersion: ${{matrix.node-version}}
          packageManagerVersion: modern

      - name: Cache Jest
        uses: actions/cache@v4
        with:
          path: .cache/jest
          key:
            ${{ runner.os }}-${{matrix.node-version}}-jest-integration-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-${{matrix.node-version}}-jest-integration-

      - name: Download Postgres Dump
        run:
          'curl
          https://raw.githubusercontent.com/morenoh149/postgresDBSamples/master/worldDB-1.0/world.sql
          -o /tmp/backup.sql'
      - name: Load Postgres Data
        uses: tj-actions/pg-restore@v6.0
        with:
          database_url: 'postgres://postgres:docker@localhost:5432/postgres'
          backup_file: '/tmp/backup.sql'
      - name: Build
        run: yarn build
      - name: Build Test Artifacts
        run: yarn build-test-artifacts
      - name: Test
        run: yarn test:integration

  integration-leak:
    name: integration / leak / node ${{matrix.node-version}}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18]
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: docker
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      mysql:
        image: genschsa/mysql-employees
        env:
          MYSQL_ROOT_PASSWORD: passwd
        ports:
          - 33306:3306
        options:
          --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s
          --health-retries=3
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install Required Libraries
        run: sudo apt update && sudo apt install -y libcurl4-openssl-dev libssl-dev

      - name: Use Node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Remove node-libcurl
        run: node scripts/remove-node-libcurl.cjs

      - uses: the-guild-org/shared-config/setup@main
        name: setup env
        with:
          nodeVersion: ${{matrix.node-version}}
          packageManagerVersion: modern

      - name: Cache Jest
        uses: actions/cache@v4
        with:
          path: .cache/jest
          key:
            ${{ runner.os }}-${{matrix.node-version}}-jest-integration-leak-${{
            hashFiles('yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-${{matrix.node-version}}-jest-integration-leak-

      - name: Download Postgres Dump
        run:
          'curl
          https://raw.githubusercontent.com/morenoh149/postgresDBSamples/master/worldDB-1.0/world.sql
          -o /tmp/backup.sql'
      - name: Load Postgres Data
        uses: tj-actions/pg-restore@v6.0
        with:
          database_url: 'postgres://postgres:docker@localhost:5432/postgres'
          backup_file: '/tmp/backup.sql'
      - name: Build
        run: yarn build
      - name: Build Test Artifacts
        run: yarn build-test-artifacts
      - name: Remove node-libcurl
        run: rm -rf node_modules/node-libcurl
      - name: Run Tests
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: yarn test:integration:leak

  integrity-check:
    name: integrity-check / node ${{matrix.node-version}}
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20, 21]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Install Required Libraries
        run: sudo apt update && sudo apt install -y libcurl4-openssl-dev libssl-dev

      - uses: the-guild-org/shared-config/setup@main
        name: setup env
        with:
          nodeVersion: ${{matrix.node-version}}
          packageManagerVersion: modern
      - name: Build
        run: yarn build
      - name: Node.js integrity check
        run: yarn bob check

  e2e:
    name: e2e / node ${{matrix.node-version}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20, 21]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - uses: the-guild-org/shared-config/setup@main
        name: setup env
        with:
          nodeVersion: ${{matrix.node-version}}
          packageManagerVersion: modern
      - name: build
        run: yarn build
      - name: test
        run: yarn test:e2e
