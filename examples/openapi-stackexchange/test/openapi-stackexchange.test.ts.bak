import { readFile } from 'fs/promises';
import { join } from 'path';
import { findAndParseConfig } from '@graphql-mesh/cli';
import { getMesh, MeshInstance } from '@graphql-mesh/runtime';
import { printSchemaWithDirectives } from '@graphql-tools/utils';

describe.skip('Stack Exchange', () => {
  let mesh: MeshInstance;
  beforeAll(async () => {
    const config = await findAndParseConfig({
      dir: join(__dirname, '..'),
    });
    mesh = await getMesh(config);
  });
  afterAll(() => {
    mesh.destroy();
  });
  it('should generate correct schema', async () => {
    expect(printSchemaWithDirectives(mesh.schema)).toMatchSnapshot();
  });
  it('should return the correct data', async () => {
    const listQuestionsQuery = await readFile(
      join(__dirname, '..', 'list-questions.query.graphql'),
      'utf-8',
    );
    const result = await mesh.execute(listQuestionsQuery);
    expect(result).toMatchObject({
      data: {
        listUnansweredQuestions: {
          items: expect.arrayContaining([
            expect.objectContaining({
              title: expect.any(String),
              tags: expect.arrayContaining([expect.any(String)]),
              is_answered: expect.any(Boolean),
              answer_count: expect.any(Number),
              link: expect.any(String),
            }),
          ]),
        },
      },
    });
  });
});
