// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Location Weather should generate correct schema: location-weather-schema 1`] = `
"directive @resolveTo(additionalArgs: ResolveToSourceArgs, filterBy: String, keyField: String, keysArg: String, pubsubTopic: String, requiredSelectionSet: String, result: String, resultType: String, sourceArgs: ResolveToSourceArgs, sourceFieldName: String!, sourceName: String!, sourceSelectionSet: String, sourceTypeName: String!) on FIELD_DEFINITION

type AQCurrent {
  """Cloud cover as a percentage (%)"""
  aqi: Int

  """Concentration of NO2 (µg/m³)"""
  no2: Float

  """Concentration of O3 (µg/m³)"""
  o3: Float

  """Concentration of PM 10 (µg/m³)"""
  pm10: Float

  """Concentration of PM 2.5 (µg/m³)"""
  pm25: Float

  """Concentration of SO2 (µg/m³)"""
  so2: Float
}

type AQCurrentGroup {
  """City Name"""
  city_name: String

  """Country Abbreviation"""
  country_code: String
  data: [AQCurrent]

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """State Abbreviation"""
  state_code: String

  """Local IANA time zone"""
  timezone: String
}

type AQHour {
  """Cloud cover as a percentage (%)"""
  aqi: Int

  """Concentration of NO2 (µg/m³)"""
  no2: Float

  """Concentration of O3 (µg/m³)"""
  o3: Float

  """Concentration of PM 10 (µg/m³)"""
  pm10: Float

  """Concentration of PM 2.5 (µg/m³)"""
  pm25: Float

  """Concentration of SO2 (µg/m³)"""
  so2: Float

  """Timestamp in local time"""
  timestamp_local: String

  """Timestamp UTC"""
  timestamp_utc: String

  """Unix Timestamp"""
  ts: Float
}

type AQHourly {
  """City Name"""
  city_name: String

  """Country Abbreviation"""
  country_code: String
  data: [AQHour]

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """State Abbreviation"""
  state_code: String

  """Local IANA time zone"""
  timezone: String
}

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""An error that occurred processing the request"""
type CitiesError {
  code: ErrorCode
  message: String
}

"""A list of countries"""
type Countries_Response {
  data: [Country_Summary]
  errors: [CitiesError]
  links: [Link]
  metadata: Metadata
}

"""Full country details"""
type Country_Details {
  """The ISO-3166 country code"""
  code: String

  """A list of supported ISO-4217 currency codes"""
  currencyCodes: [String]

  """The country flag image"""
  flagImageUri: String

  """The country name (varies by languageCode)"""
  name: String

  """The number of regions in this country"""
  numRegions: Int

  """The country WikiData id"""
  wikiDataId: String
}

"""Full country region details"""
type Country_Region_Details {
  """The region's capital city (varies by languageCode)"""
  capital: String

  """An ISO-3166 country code"""
  countryCode: String

  """The FIPS 10-4 region code"""
  fipsCode: String

  """The ISO region code"""
  isoCode: String

  """The region name (varies by languageCode)"""
  name: String

  """The number of cities in this region"""
  numCities: Int

  """The region WikiData id"""
  wikiDataId: String
}

"""Country region details response"""
type Country_Region_Response {
  data: Country_Region_Details
  errors: [CitiesError]
}

"""Minimal country region info"""
type Country_Region_Summary {
  """An ISO-3166 country code"""
  countryCode: String

  """The FIPS 10-4 region code"""
  fipsCode: String

  """The ISO region code"""
  isoCode: String

  """The region name (varies by languageCode)"""
  name: String

  """The region WikiData id"""
  wikiDataId: String
}

"""A list of country regions"""
type Country_Regions_Response {
  """A list of RegionSummaries"""
  data: [Country_Region_Summary]
  errors: [CitiesError]
  links: [Link]
  metadata: Metadata
}

"""Country details response"""
type Country_Response {
  data: Country_Details
  errors: [CitiesError]
}

"""Minimal country info"""
type Country_Summary {
  """The ISO-3166 country code"""
  code: String

  """A list of supported ISO-4217 currency codes"""
  currencyCodes: [String]

  """The country name (varies by languageCode)"""
  name: String

  """The country WikiData id"""
  wikiDataId: String
}

"""A list of currencies"""
type Currencies_Response {
  data: [Currency]
  errors: [CitiesError]
  links: [Link]
  metadata: Metadata
}

"""Currency info"""
type Currency {
  """The ISO-4217 currency code"""
  code: String

  """A list of ISO-3166 country codes of countries supporting this currency"""
  countryCodes: [String]

  """The currency symbol"""
  symbol: String
}

type CurrentObs {
  """Apparent temperature - Default (C)"""
  app_temp: Float

  """Air quality index (US EPA standard 0 to +500)"""
  aqi: Float

  """City name (closest)"""
  city_name: String

  """Cloud cover (%)"""
  clouds: Int

  """Country abbreviation"""
  country_code: String

  """Cycle Hour (UTC) of observation"""
  datetime: String

  """Dew point temperature - default (C)"""
  dewpt: Float

  """Diffuse horizontal irradiance (W/m^2)"""
  dhi: Float

  """Direct normal irradiance (W/m^2)"""
  dni: Float

  """Current solar elevation angle (Degrees)"""
  elev_angle: Float

  """Global horizontal irradiance (W/m^2)"""
  ghi: Float

  """Current solar hour angle (Degrees)"""
  hour_angle: Float

  """Latitude"""
  lat: Float

  """Longitude"""
  lon: Float

  """Full time (UTC) of observation (YYYY-MM-DD HH:MM)"""
  ob_time: String

  """Part of the day (d = day, n = night)"""
  pod: String

  """Precipitation in last hour - Default (mm)"""
  precip: Float

  """Pressure (mb)"""
  pres: Float

  """Relative humidity (%)"""
  rh: Int

  """Mean sea level pressure in millibars (mb)"""
  slp: Float

  """Snowfall in last hour - Default (mm)"""
  snow: Float

  """Estimated solar radiation (W/m^2)"""
  solar_rad: Float

  """State abbreviation"""
  state_code: String

  """Source Station ID"""
  station: String

  """Time (UTC) of Sunrise (HH:MM)"""
  sunrise: String

  """Time (UTC) of Sunset (HH:MM)"""
  sunset: String

  """Temperature - Default (C)"""
  temp: Float

  """Local IANA time zone"""
  timezone: String

  """Unix Timestamp"""
  ts: Float

  """UV Index"""
  uv: Float

  """Visibility - default (M)"""
  vis: Int
  weather: query_current_by_cities_data_items_weather

  """Cardinal wind direction"""
  wind_cdir: String

  """Cardinal wind direction (text)"""
  wind_cdir_full: String

  """Wind direction (degrees)"""
  wind_dir: Int

  """Wind speed - Default (m/s)"""
  wind_speed: Float
}

type CurrentObsGroup {
  """Count of found observations"""
  count: Int
  data: [CurrentObs]
}

"""Represents date values"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An ISO-6801 date-time response"""
type Date_Time_Response {
  """The date-time in ISO-6801 format: yyyyMMdd'T'HHmmssZ"""
  data: DateTime
  errors: [CitiesError]
}

"""A decimal distance (in miles or kilometers)"""
type Distance_Response {
  """
  The distance in units as set by the distanceUnit param (defaults to miles)
  """
  data: Float
  errors: [CitiesError]
}

type EnergyObs {
  """Cooling degree days"""
  cdd: Float

  """City name (closest)"""
  city_name: String

  """Average cloud cover (%)"""
  clouds: Int

  """Country abbreviation"""
  country_code: String

  """Average dew point temperature - Default (C)"""
  dewpt: Float

  """Heating degree days"""
  hdd: Float

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """Total precipitation in period - Default (mm)"""
  precip: Float

  """Average Relative humidity (%)"""
  rh: Int

  """Total snowfall in period - Default (mm)"""
  snow: Float

  """State abbreviation"""
  state_code: String

  """Source Station ID"""
  station_id: String

  """
  Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2
  """
  sun_hours: Float

  """Total diffuse horizontal solar irradiance (W/m^2)"""
  t_dhi: Float

  """Total direct normal solar irradiance (W/m^2)"""
  t_dni: Float

  """Total global horizontal solar irradiance (W/m^2)"""
  t_ghi: Float

  """Average temperature - Default (C)"""
  temp: Float

  """Local IANA time zone"""
  timezone: String

  """Average wind direction (Degrees)"""
  wind_dir: Int

  """Average wind speed - Default (m/s)"""
  wind_speed: Float
}

type EnergyObsGroup {
  """Count of found observations"""
  count: Int
  data: [EnergyObs]

  """End Date"""
  end_date: Int

  """Start Date"""
  start_date: Int
}

type EnergyObsGroupForecast {
  """City name (closest)"""
  city_name: String

  """Country abbreviation"""
  country_code: String
  data: [EnergyObsSeries]

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """State abbreviation"""
  state_code: String

  """Degree day threshold units"""
  threshold_units: String

  """Degree day threshold"""
  threshold_value: String

  """Local IANA time zone"""
  timezone: String
}

type EnergyObsSeries {
  """Cooling degree days"""
  cdd: Float

  """Average cloud cover (%)"""
  clouds: Int

  """Date"""
  date: Date

  """Average dew point temperature - Default (C)"""
  dewpt: Float

  """Heating degree days"""
  hdd: Float

  """Total precipitation in period - Default (mm)"""
  precip: Float

  """Average Relative humidity (%)"""
  rh: Int

  """Total snowfall in period - Default (mm)"""
  snow: Float

  """
  Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2
  """
  sun_hours: Float

  """Total diffuse horizontal solar irradiance (W/m^2)"""
  t_dhi: Float

  """Total direct normal solar irradiance (W/m^2)"""
  t_dni: Float

  """Total global horizontal solar irradiance (W/m^2)"""
  t_ghi: Float

  """Average temperature - Default (C)"""
  temp: Float

  """Average wind direction (Degrees)"""
  wind_dir: Int

  """Average wind speed - Default (m/s)"""
  wind_speed: Float
}

"""
One of a set of enumerated error codes representing the types of errors that can occur processing a
request
"""
enum ErrorCode {
  ACCESS_DENIED
  ENTITY_NOT_FOUND
  INCOMPATIBLE
  PARAMS_MUTUALLY_EXCLUSIVE
  PARAM_INVALID
  REQUEST_UNPROCESSABLE
}

type Forecast {
  """Apparent Maximum daily Temperature - default (C)"""
  app_max_temp: Float

  """Apparent Minimum daily Temperature - default (C)"""
  app_min_temp: Float

  """Cloud cover as a percentage (%)"""
  clouds: Int

  """Date in format "YYYY-MM-DD:HH". All datetime is in (UTC)"""
  datetime: String

  """Dewpoint (Average) - default (C)"""
  dewpt: Float

  """[Deprecated] Max direct component of solar insolation (W/m^2)"""
  max_dhi: Float

  """Maximum daily Temperature - default (C)"""
  max_temp: Float

  """Minimum daily Temperature - default (C)"""
  min_temp: Float

  """Moon phase"""
  moon_phase: Float

  """Moonrise unix timestamp"""
  moonrise_ts: Int

  """Moonset unix timestamp"""
  moonset_ts: Int

  """Part of the day (d = day, n = night)"""
  pod: String

  """Chance of Precipitation as a percentage (%)"""
  pop: Float

  """Accumulated precipitation since last forecast point - default (mm)"""
  precip: Float

  """Pressure (mb)"""
  pres: Float

  """Relative Humidity as a percentage (%)"""
  rh: Int

  """Mean Sea level pressure (mb)"""
  slp: Float

  """Accumulated snowfall since last forecast point - default (mm)"""
  snow: Float

  """Snow Depth - default (mm)"""
  snow_depth: Float

  """Sunrise unix timestamp"""
  sunrise_ts: Int

  """Sunset unix timestamp"""
  sunset_ts: Int

  """Temperature (Average) - default (C)"""
  temp: Float

  """Timestamp in local time"""
  timestamp_local: String

  """Timestamp UTC"""
  timestamp_utc: String

  """Unix Timestamp"""
  ts: Float

  """UV Index"""
  uv: Float

  """Average Visibility default (KM)"""
  vis: Float
  weather: query_forecast_daily_by_city_by_country_data_items_weather

  """Cardinal wind direction"""
  wind_cdir: String

  """Cardinal wind direction (text)"""
  wind_cdir_full: String

  """Wind direction"""
  wind_dir: Int

  """Wind Speed (default m/s)"""
  wind_spd: Float
}

type ForecastDay {
  """City Name"""
  city_name: String

  """Country Abbreviation"""
  country_code: String
  data: [Forecast]

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """State Abbreviation"""
  state_code: String

  """Local IANA time zone"""
  timezone: String
}

type ForecastHour {
  """Apparent Temperature - Default (C)"""
  app_temp: Float

  """Cloud cover as a percentage (%)"""
  clouds: Int

  """Date in format "YYYY-MM-DD:HH". All datetime is in (UTC)"""
  datetime: String

  """Dewpoint - Default (C)"""
  dewpt: Float

  """Diffuse normal solar irradiance (W/m^2)"""
  dhi: Float

  """Direct normal solar irradiance (W/m^2)"""
  dni: Float

  """Global horizontal solar irradiance (W/m^2)"""
  ghi: Float

  """Part of day (d = day, n = night)"""
  pod: String

  """Chance of Precipitation as a percentage (%)"""
  pop: Float

  """Accumulated precipitation since last forecast point. Default (mm)"""
  precip: Float

  """Pressure (mb)"""
  pres: Float

  """Relative Humidity as a percentage (%)"""
  rh: Int

  """Mean Sea level pressure (mb)"""
  slp: Float

  """Accumulated snowfall since last forecast point - Default (mm)"""
  snow: Float

  """6 hour accumulated snowfall. Default (mm)"""
  snow6h: Float

  """Snow depth - Default (mm)"""
  snow_depth: Float

  """Estimated solar radiation (W/m^2)"""
  solar_rad: Float

  """Temperature - Default (C)"""
  temp: Float

  """Timestamp in local time"""
  timestamp_local: String

  """Timestamp UTC"""
  timestamp_utc: String

  """Unix Timestamp"""
  ts: Float

  """UV Index"""
  uv: Float

  """Visibility - Default (KM)"""
  vis: Float
  weather: query_forecast_3hourly_by_city_by_country_data_items_weather

  """Cardinal wind direction"""
  wind_cdir: String

  """Cardinal wind direction (text)"""
  wind_cdir_full: String

  """Wind direction"""
  wind_dir: Int

  """Wind Speed - Default (m/s)"""
  wind_spd: Float
}

type ForecastHourly {
  """City Name"""
  city_name: String

  """Country Abbreviation"""
  country_code: String
  data: [ForecastHour]

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """State Abbreviation"""
  state_code: String

  """Local IANA time zone"""
  timezone: String
}

enum HTTPMethod {
  CONNECT
  DELETE
  GET
  HEAD
  OPTIONS
  PATCH
  POST
  PUT
  TRACE
}

type History {
  """City name (Closest)"""
  city_name: String

  """Country abbreviation"""
  country_code: String
  data: [HistoryObj]

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """Weather stations used in response"""
  sources: [String]

  """State abbreviation"""
  state_code: String

  """Local IANA time zone"""
  timezone: String
}

type HistoryDay {
  """City name (Closest)"""
  city_name: String

  """Country abbreviation"""
  country_code: String
  data: [HistoryDayObj]

  """Latitude"""
  lat: String

  """Longitude"""
  lon: String

  """Weather stations used in response"""
  sources: [String]

  """State abbreviation"""
  state_code: String

  """Local IANA time zone"""
  timezone: String
}

type HistoryDayObj {
  """Date in format "YYYY-MM-DD". All datetime is in (UTC)"""
  datetime: Date

  """Average dewpoint - Default (C)"""
  dewpt: Float

  """Average hourly diffuse horizontal solar irradiance (W/m^2)"""
  dhi: Int

  """Average direct normal solar irradiance (W/m^2)"""
  dni: Int

  """Average hourly global horizontal solar irradiance (W/m^2)"""
  ghi: Int

  """Max temperature - Default (C)"""
  max_temp: Float

  """Time of max memperature - Unix Timestamp"""
  max_temp_ts: Float

  """Max UV Index (1-11+)"""
  max_uv: Float

  """Direction of wind at time of max 2min wind (degrees)"""
  max_wind_dir: Int

  """Max 2min Wind Speed - default (m/s)"""
  max_wind_spd: Float

  """Time of max 2min wind - unix timestamp"""
  max_wind_spd_ts: Float

  """Min temperature - Default (C)"""
  min_temp: Float

  """Time of max temperature - unix timestamp"""
  min_temp_ts: Float

  """Liquid equivalent precipitation - default (mm)"""
  precip: Float

  """Satellite estimated liquid equivalent precipitation - default (mm)"""
  precip_gpm: Float

  """Average pressure (mb)"""
  pres: Float

  """Average relative humidity as a percentage (%)"""
  rh: Int

  """Average sea level pressure (mb)"""
  slp: Float

  """Snowfall - default (mm)"""
  snow: Float

  """Snow Depth - default (mm)"""
  snow_depth: Float

  """Total diffuse horizontal solar irradiance (W/m^2)"""
  t_dhi: Int

  """Total direct normal solar irradiance (W/m^2)"""
  t_dni: Int

  """Total global horizontal solar irradiance (W/m^2)"""
  t_ghi: Int

  """Average temperature - Default (C)"""
  temp: Float

  """Unix timestamp of datetime (Midnight UTC)"""
  ts: Int

  """Average wind direction (degrees)"""
  wind_dir: Int

  """Wind gust speed - default (m/s)"""
  wind_gust_spd: Float

  """Average wind speed - default (m/s)"""
  wind_spd: Float
}

type HistoryObj {
  """Date in format "YYYY-MM-DD:HH". All datetime is in (UTC)"""
  datetime: String

  """Dew point (Default Celcius)"""
  dewpt: Int

  """Diffuse normal solar irradiance (W/m^2)"""
  dhi: Float

  """Direct normal solar irradiance (W/m^2)"""
  dni: Float

  """Solar elevation angle (Degrees)"""
  elev_angle: Float

  """Global horizontal solar irradiance (W/m^2)"""
  ghi: Float

  """Solar hour angle (Degrees)"""
  h_angle: Float

  """Part of the day (d = day, n = night)"""
  pod: String

  """Liquid equivalent precipitation - Default (mm)"""
  precip: Float

  """Pressure (mb)"""
  pres: Float

  """Relative Humidity as a percentage (%)"""
  rh: Int

  """Sea level pressure (mb)"""
  slp: Float

  """Snowfall - Default (mm)"""
  snow: Float

  """Snowfall in last 6 hours - Default (mm)"""
  snow6h: Float

  """Estimated solar radiation (W/m^2)"""
  solar_rad: Float

  """Temperature (Default Celcius)"""
  temp: Float

  """Timestamp in local time"""
  timestamp_local: String

  """Timestamp UTC"""
  timestamp_utc: String

  """Unix Timestamp"""
  ts: Float

  """UV Index (1-11+)"""
  uv: Float
  weather: query_history_hourly_by_city_by_country_data_items_weather

  """Wind direction (Degrees)"""
  wind_dir: Int

  """Wind Speed (Default m/s)"""
  wind_spd: Float
}

"""
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A language supported by the service"""
type Language {
  code: query_getLanguagesUsingGET_allOf_1_data_items_code
  name: String
}

"""A list of languages supported by the system"""
type Languages_Response {
  data: [Language]
  errors: [CitiesError]
  links: [Link]
  metadata: Metadata
}

"""A HATEAOS link"""
type Link {
  href: String
  rel: String
}

"""A locale representing a language/region combination"""
type Locale {
  """The locale code"""
  code: String
}

"""A list of locales"""
type Locales_Response {
  data: [Locale]
  errors: [CitiesError]
  links: [Link]
  metadata: Metadata
}

"""Result metadata (currently only associated with collection results)"""
type Metadata {
  """The zero-ary offset into the results (0 is the first result)"""
  currentOffset: BigInt

  """The total number of results across pages"""
  totalCount: BigInt
}

scalar ObjMap

"""Minimal populated-place info"""
type PopulatedPlaceSummary {
  """The country name (varies by languageCode)"""
  country: String

  """The ISO-3166 country code"""
  countryCode: String
  dailyForecast: [Forecast]

  """Included if this is the result of a distance query"""
  distance: Float

  """The place GeoDB native id"""
  id: Int

  """The place latittude (-90.0 to 90.0)"""
  latitude: Float

  """The place longitude (-180.0 to 180.0)"""
  longitude: Float

  """The place name (varies by languageCode)"""
  name: String

  """The place population"""
  population: Int

  """The region name (varies by languageCode)"""
  region: String

  """The ISO or FIPS region code"""
  regionCode: String
  todayForecast: Forecast
  type: PopulatedPlaceType

  """The place WikiData id"""
  wikiDataId: String
}

"""
One of a set of enumerated populated-place types known by the service (currently only level-2 admin divisions and
cities)
"""
enum PopulatedPlaceType {
  ADM2
  CITY
}

"""Full populated-place details"""
type Populated_Place_Details {
  """The country name (varies by languageCode)"""
  country: String

  """The ISO-3166 country code"""
  countryCode: String

  """If this place has been soft-deleted"""
  deleted: Boolean

  """The place elevation (meters) above sea level"""
  elevationMeters: Int

  """The place GeoDB native id"""
  id: Int

  """The place latittude (-90.0 to 90.0)"""
  latitude: Float

  """The place longitude (-180.0 to 180.0)"""
  longitude: Float

  """The place name (varies by languageCode)"""
  name: String

  """The place population"""
  population: Int

  """The region name (varies by languageCode)"""
  region: String

  """The ISO or FIPS region code"""
  regionCode: String

  """The place timezone id"""
  timezone: String
  type: PopulatedPlaceType

  """The place WikiData id"""
  wikiDataId: String
}

"""Populated-place details response"""
type Populated_Place_Response {
  data: Populated_Place_Details
  errors: [CitiesError]
}

"""A list of populated places"""
type Populated_Places_Response {
  data: [PopulatedPlaceSummary]
  errors: [CitiesError]
  links: [Link]
  metadata: Metadata
}

type Query {
  """
  Returns severe weather alerts issued by meteorological agencies - given a lat, and a lon.
  """
  alerts_by_lat_by_lon(
    """Wraps return in jsonp callback - Example - callback=func"""
    callback: String

    """Your registered API key."""
    key: String!

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
  ): WeatherAlert

  """
  **(Advanceed/Enterprise plans only)** Downloads bulk data files - OPTIONS: ( current.json.gz - Current observations for cities > 1000 population). Units are Metric (Celcius, m/s, etc).
  """
  bulk_files_by_file(
    """Filename (ie. current.json.gz)"""
    file: String!

    """Your registered API key."""
    key: String!
  ): JSON

  """Returns current air quality conditions."""
  current_airquality_by_city_by_country(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """Your registered API key."""
    key: String!

    """Full name of state."""
    state: String
  ): AQCurrentGroup

  """Returns current air quality conditions."""
  current_airquality_by_city_id(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: Int!

    """Your registered API key."""
    key: String!
  ): AQCurrentGroup

  """Returns current air quality conditions."""
  current_airquality_by_lat_by_lon(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Your registered API key."""
    key: String!

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
  ): AQCurrentGroup

  """Returns current air quality conditions."""
  current_airquality_by_postal_code(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """Your registered API key."""
    key: String!

    """Postal Code. Example: 28546"""
    postal_code: Int!
  ): AQCurrentGroup

  """Returns a group of Current Observations - Given a list of City IDs. """
  current_by_cities(
    """Wraps return in jsonp callback - Example - callback=func"""
    callback: String

    """Comma separated list of City ID's. Example: 4487042, 4494942, 4504871"""
    cities: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_current_by_cities_lang
    marine: t_const
    units: queryInput_current_by_cities_units
  ): CurrentObsGroup

  """
  Returns a Current Observation - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.
  """
  current_by_city_by_country(
    """Wraps return in jsonp callback - Example - callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!
    include: minutely_const

    """Your registered API key."""
    key: String!
    lang: queryInput_current_by_city_by_country_lang
    marine: t_const

    """Full name of state."""
    state: String
    units: queryInput_current_by_city_by_country_units
  ): CurrentObsGroup

  """Returns current weather observation - Given a City ID. """
  current_by_city_id(
    """Wraps return in jsonp callback - Example - callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: String!
    include: minutely_const

    """Your registered API key."""
    key: String!
    lang: queryInput_current_by_city_id_lang
    marine: t_const
    units: queryInput_current_by_city_id_units
  ): CurrentObsGroup

  """Returns a Current Observation - given a lat, and a lon."""
  current_by_lat_by_lon(
    """Wraps return in jsonp callback - Example - callback=func"""
    callback: String
    include: minutely_const

    """Your registered API key."""
    key: String!
    lang: queryInput_current_by_lat_by_lon_lang

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
    marine: t_const
    units: queryInput_current_by_lat_by_lon_units
  ): CurrentObsGroup

  """Returns current weather observation - Given a Postal Code. """
  current_by_postal_code(
    """Wraps return in jsonp callback - Example - callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String
    include: minutely_const

    """Your registered API key."""
    key: String!
    lang: queryInput_current_by_postal_code_lang
    marine: t_const

    """Postal Code. Example: 28546"""
    postal_code: String!
    units: queryInput_current_by_postal_code_units
  ): CurrentObsGroup

  """Returns a Current Observation - Given a station ID."""
  current_by_station(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String
    include: minutely_const

    """Your registered API key."""
    key: String!
    lang: queryInput_current_by_station_lang

    """Station Call ID."""
    station: String!
    units: queryInput_current_by_station_units
  ): CurrentObsGroup

  """
  Returns a group of Current Observations - Given a list of Station Call IDs. 
  """
  current_by_stations(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """Your registered API key."""
    key: String!
    lang: queryInput_current_by_stations_lang

    """Comma separated list of Station Call ID's. Example: KRDU,KBFI,KVNY"""
    stations: String!
    units: queryInput_current_by_stations_units
  ): CurrentObsGroup

  "Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all\\nknown divisions.\\n"
  findAdminDivisionsUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """
    Only places in these countries (comma-delimited country codes or WikiData ids)
    """
    countryIds: String

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """
    Only places NOT in these countries (comma-delimited country codes or WikiData ids)
    """
    excludedCountryIds: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """
    Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
    """
    location: String

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """The location radius within which to find places"""
    radius: Int

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String
  ): Populated_Places_Response

  "Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you\\nwill get back all known cities.\\n"
  findCitiesNearAdminDivisionUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """
    Only places in these countries (comma-delimited country codes or WikiData ids)
    """
    countryIds: String

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """An admin-division id (either native 'id' or 'wikiDataId')"""
    divisionId: String!

    """
    Only places NOT in these countries (comma-delimited country codes or WikiData ids)
    """
    excludedCountryIds: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """The location radius within which to find places"""
    radius: Int

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String

    """Only places for these types (comma-delimited): CITY | ADM2"""
    types: String
  ): Populated_Places_Response

  "Find cities near the given origin city, filtering by optional criteria. If no criteria are set, you will get\\nback all known cities.\\n"
  findCitiesNearCityUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """A city id (either native 'id' or 'wikiDataId')"""
    cityId: String!

    """
    Only places in these countries (comma-delimited country codes or WikiData ids)
    """
    countryIds: String

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """
    Only places NOT in these countries (comma-delimited country codes or WikiData ids)
    """
    excludedCountryIds: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """The location radius within which to find places"""
    radius: Int

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String

    """Only places for these types (comma-delimited): CITY | ADM2"""
    types: String
  ): Populated_Places_Response

  "Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back\\nall known cities.\\n"
  findCitiesNearLocationUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """
    Only places in these countries (comma-delimited country codes or WikiData ids)
    """
    countryIds: String

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """
    Only places NOT in these countries (comma-delimited country codes or WikiData ids)
    """
    excludedCountryIds: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD"""
    locationId: String!

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """The location radius within which to find places"""
    radius: Int

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String

    """Only places for these types (comma-delimited): CITY | ADM2"""
    types: String
  ): Populated_Places_Response

  "Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities.\\n"
  findCitiesUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """
    Only places in these countries (comma-delimited country codes or WikiData ids)
    """
    countryIds: String

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """
    Only places NOT in these countries (comma-delimited country codes or WikiData ids)
    """
    excludedCountryIds: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """
    Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD
    """
    location: String

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """The location radius within which to find places"""
    radius: Int

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String

    """Only places for these types (comma-delimited): CITY | ADM2"""
    types: String
  ): Populated_Places_Response

  "Find administrative divisions near the given origin division, filtering by optional criteria. If no criteria\\nare set, you will get back all known divisions.\\n"
  findDivisionsNearAdminDivisionUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """
    Only places in these countries (comma-delimited country codes or WikiData ids)
    """
    countryIds: String

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """An admin-division id (either native 'id' or 'wikiDataId')"""
    divisionId: String!

    """
    Only places NOT in these countries (comma-delimited country codes or WikiData ids)
    """
    excludedCountryIds: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """The location radius within which to find places"""
    radius: Int

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String
  ): Populated_Places_Response

  "Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set,\\nyou will get back all known divisions.\\n"
  findDivisionsNearLocationUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """
    Only places in these countries (comma-delimited country codes or WikiData ids)
    """
    countryIds: String

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """
    Only places NOT in these countries (comma-delimited country codes or WikiData ids)
    """
    excludedCountryIds: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD"""
    locationId: String!

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """The location radius within which to find places"""
    radius: Int

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = countryCode | elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String
  ): Populated_Places_Response

  "Get the cities in a specific country region. The country and region info is omitted in the response.\\n"
  findRegionCitiesUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """An ISO-3166 country code or WikiData id"""
    countryId: String!

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """An ISO-3166 or FIPS region code"""
    regionCode: String!

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String

    """Only places for these types (comma-delimited): CITY | ADM2"""
    types: String
  ): Populated_Places_Response

  "Get the administrative divisions in a specific country region. The country and region info is omitted in the\\nresponse.\\n"
  findRegionDivisionsUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """An ISO-3166 country code or WikiData id"""
    countryId: String!

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """
    Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE
    """
    includeDeleted: String = "NONE"

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """Only places having no more than this population"""
    maxPopulation: Int

    """Only places having at least this population"""
    minPopulation: Int

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int

    """An ISO-3166 or FIPS region code"""
    regionCode: String!

    """
    How to sort place results. 
    'Format: ±SORT_FIELD,±SORT_FIELD' 
    where SORT_FIELD = elevation | name | population
    """
    sort: String

    """Only places in these time-zones (comma-delimited)"""
    timeZoneIds: String
  ): Populated_Places_Response

  "Returns a 3-hourly forecast, where each point represents a three hour   period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC.\\n"
  forecast_3hourly_by_city_by_country(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """Number of days to return. Default 5."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_3hourly_by_city_by_country_lang

    """Full name of state."""
    state: String
    units: queryInput_forecast_3hourly_by_city_by_country_units
  ): ForecastHourly

  "Returns a 3-hourly forecast, where each point represents a three hour   period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC.\\n"
  forecast_3hourly_by_city_id(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: Int!

    """Number of days to return. Default 5."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_3hourly_by_city_id_lang
    units: queryInput_forecast_3hourly_by_city_id_units
  ): ForecastHourly

  "Returns a 3-hourly forecast, where each point represents a three hour   period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC.\\n"
  forecast_3hourly_by_lat_by_lon(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Number of days to return. Default 5."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_3hourly_by_lat_by_lon_lang

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
    units: queryInput_forecast_3hourly_by_lat_by_lon_units
  ): ForecastHourly

  "Returns a 3-hourly forecast, where each point represents a three hour period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC.\\n"
  forecast_3hourly_by_postal_code(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """Number of days to return. Default 5."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_3hourly_by_postal_code_lang

    """Postal Code. Example: 28546"""
    postal_code: Int!
    units: queryInput_forecast_3hourly_by_postal_code_units
  ): ForecastHourly

  """
  Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
  """
  forecast_airquality_by_city_by_country(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!

    """Full name of state."""
    state: String
  ): AQHourly

  """
  Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
  """
  forecast_airquality_by_city_id(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: Int!

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!
  ): AQHourly

  """
  Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
  """
  forecast_airquality_by_lat_by_lon(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
  ): AQHourly

  """
  Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period.
  """
  forecast_airquality_by_postal_code(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!

    """Postal Code. Example: 28546"""
    postal_code: Int!
  ): AQHourly

  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \\"YYYY-MM-DD\\". One day begins at 00:00 UTC, and ends at 23:59 UTC. Accepts a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.\\n"
  forecast_daily_by_city_by_country(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """Number of days to return. Default 16."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_daily_by_city_by_country_lang

    """Full name of state."""
    state: String
    units: queryInput_forecast_daily_by_city_by_country_units
  ): ForecastDay

  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \\"YYYY-MM-DD\\". One day begins at 00:00 UTC, and ends at 23:59 UTC.\\n"
  forecast_daily_by_city_id(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: Int!

    """Number of days to return. Default 16."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_daily_by_city_id_lang
    units: queryInput_forecast_daily_by_city_id_units
  ): ForecastDay

  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \\"YYYY-MM-DD\\". One day begins at 00:00 UTC, and ends at 23:59 UTC. \\n"
  forecast_daily_by_lat_by_lon(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """Number of days to return. Default 16."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_daily_by_lat_by_lon_lang

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
    units: queryInput_forecast_daily_by_lat_by_lon_units
  ): ForecastDay

  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \\"YYYY-MM-DD\\". One day begins at 00:00 UTC, and ends at 23:59 UTC.\\n"
  forecast_daily_by_postal_code(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """Number of days to return. Default 16."""
    days: Float

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_daily_by_postal_code_lang

    """Postal Code. Example: 28546"""
    postal_code: Int!
    units: queryInput_forecast_daily_by_postal_code_units
  ): ForecastDay

  """
  Retrieve an 8 day forecast relevant to te Energy Sector (degree days, solar radiation, precipitation, wind).
  """
  forecast_energy_by_lat_by_lon(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """Your registered API key."""
    key: String!

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!

    """Temperature threshold to use to calculate degree days (default 18 C)"""
    threshold: Float
    tp: queryInput_forecast_energy_by_lat_by_lon_tp
    units: queryInput_forecast_energy_by_lat_by_lon_units
  ): EnergyObsGroupForecast

  " Returns an hourly forecast, where each point represents a one hour   period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC. Accepts a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.\\n"
  forecast_hourly_by_city_by_country(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_hourly_by_city_by_country_lang

    """Full name of state."""
    state: String
    units: queryInput_forecast_hourly_by_city_by_country_units
  ): ForecastHourly

  " Returns an hourly forecast, where each point represents a one hour   period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC. \\n"
  forecast_hourly_by_city_id(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: Int!

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_hourly_by_city_id_lang
    units: queryInput_forecast_hourly_by_city_id_units
  ): ForecastHourly

  "Returns an hourly forecast, where each point represents a one hour period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC. \\n"
  forecast_hourly_by_lat_by_lon(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_hourly_by_lat_by_lon_lang

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
    units: queryInput_forecast_hourly_by_lat_by_lon_units
  ): ForecastHourly

  " Returns an hourly forecast, where each point represents a one hour   period. Every point has a datetime string in the format \\"YYYY-MM-DD:HH\\". Time is UTC. \\n"
  forecast_hourly_by_postal_code(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """Number of hours to return."""
    hours: Int

    """Your registered API key."""
    key: String!
    lang: queryInput_forecast_hourly_by_postal_code_lang

    """Postal Code. Example: 28546"""
    postal_code: Int!
    units: queryInput_forecast_hourly_by_postal_code_units
  ): ForecastHourly

  "Get the details for a specific administrative division, including location coordinates, population, and\\nelevation above sea-level (if available).\\n"
  getAdminDivisionUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """An admin-division id (either native 'id' or 'wikiDataId')"""
    divisionId: String!

    """Display results in this language"""
    languageCode: String
  ): Populated_Place_Response

  """Get city date-time"""
  getCityDateTimeUsingGET(
    """A city id (either native 'id' or 'wikiDataId')"""
    cityId: String!
  ): Date_Time_Response

  """Get distance from the given city"""
  getCityDistanceUsingGET(
    """A city id (either native 'id' or 'wikiDataId')"""
    cityId: String!

    """The unit of distance: MI | KM"""
    distanceUnit: String = "MI"

    """Distance to this city"""
    toCityId: String!
  ): Distance_Response

  "Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level\\n(if available).\\n"
  getCityLocatedInUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """A city id (either native 'id' or 'wikiDataId')"""
    cityId: String!

    """Display results in this language"""
    languageCode: String
  ): Populated_Place_Response

  """Get city time"""
  getCityTimeUsingGET(
    """A city id (either native 'id' or 'wikiDataId')"""
    cityId: String!
  ): Time_Response

  "Get the details for a specific city, including location coordinates, population, and elevation above sea-level\\n(if available).\\n"
  getCityUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """A city id (either native 'id' or 'wikiDataId')"""
    cityId: String!

    """Display results in this language"""
    languageCode: String
  ): Populated_Place_Response

  "Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries.\\n"
  getCountriesUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """Only countries supporting this currency"""
    currencyCode: String

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int
  ): Countries_Response

  """Get the details for a specific country, including number of regions."""
  getCountryUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """An ISO-3166 country code or WikiData id"""
    countryId: String!

    """Display results in this language"""
    languageCode: String
  ): Country_Response

  """
  Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies.
  """
  getCurrenciesUsingGET(
    """Currencies for this country id"""
    countryId: String!

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """The zero-ary offset index into the results"""
    offset: Int
  ): Currencies_Response

  """Get all supported languages"""
  getLanguagesUsingGET(
    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """The zero-ary offset index into the results"""
    offset: Int
  ): Languages_Response

  """Get all known locales"""
  getLocalesUsingGET(
    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """The zero-ary offset index into the results"""
    offset: Int
  ): Locales_Response

  """
  Get the details of a specific country region, including number of cities.
  """
  getRegionUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """An ISO-3166 country code or WikiData id"""
    countryId: String!

    """Display results in this language"""
    languageCode: String

    """An ISO-3166 or FIPS region code"""
    regionCode: String!
  ): Country_Region_Response

  "Get all regions in a specific country. These could be states, provinces, districts, or otherwise major\\npolitical divisions.\\n"
  getRegionsUsingGET(
    """Display results using ASCII characters"""
    asciiMode: Boolean

    """An ISO-3166 country code or WikiData id"""
    countryId: String!

    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """Display results in this language"""
    languageCode: String

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """
    Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name
    as it appears in that language.
    """
    namePrefix: String

    """The zero-ary offset index into the results"""
    offset: Int
  ): Country_Regions_Response

  """Get time-zone date-time"""
  getTimeZoneDateTimeUsingGET(
    """A time-zone id"""
    zoneId: String!
  ): Date_Time_Response

  """Get time-zone time"""
  getTimeZoneTimeUsingGET(
    """A time-zone id"""
    zoneId: String!
  ): Time_Response

  """Get all known time-zones"""
  getTimezonesUsingGET(
    """Include HATEOAS-style links in results"""
    hateoasMode: Boolean = true

    """The maximum number of results to retrieve"""
    limit: Int = 10

    """The zero-ary offset index into the results"""
    offset: Int
  ): Time_Zones_Response

  """Returns historical air quality conditions."""
  history_airquality_by_city_by_country(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """Your registered API key."""
    key: String!

    """Full name of state."""
    state: String
  ): AQCurrentGroup

  """Returns historical air quality conditions."""
  history_airquality_by_city_id(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """City ID."""
    city_id: Float!

    """Your registered API key."""
    key: String!
  ): AQCurrentGroup

  """Returns historical air quality conditions."""
  history_airquality_by_lat_by_lon(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Your registered API key."""
    key: String!

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!
  ): AQCurrentGroup

  """Returns historical air quality conditions."""
  history_airquality_by_postal_code(
    """Wraps return in jsonp callback. Example - callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """Your registered API key."""
    key: String!

    """Postal Code. Example: 28546"""
    postal_code: Int!
  ): AQCurrentGroup

  """
  Returns Historical Observations - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_daily_by_city_by_country(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """
    City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_daily_by_city_by_country_lang

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!

    """Full name of state."""
    state: String
    units: queryInput_history_daily_by_city_by_country_units
  ): HistoryDay

  """
  Returns Historical Observations - Given a City ID. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_daily_by_city_id(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: String!

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_daily_by_city_id_lang

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    start_date: String!
    units: queryInput_history_daily_by_city_id_units
  ): HistoryDay

  """
  Returns Historical Observations - Given a lat, and lon. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_daily_by_lat_by_lon(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_daily_by_lat_by_lon_lang

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!
    units: queryInput_history_daily_by_lat_by_lon_units
  ): HistoryDay

  """
  Returns Historical Observations - Given a Postal Code. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_daily_by_postal_code(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_daily_by_postal_code_lang

    """Postal Code. Example: 28546"""
    postal_code: String!

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    start_date: String!
    units: queryInput_history_daily_by_postal_code_units
  ): HistoryDay

  """
  Returns Historical Observations - Given a station ID. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_daily_by_station(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_daily_by_station_lang

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!

    """Station ID."""
    station: String!
    units: queryInput_history_daily_by_station_units
  ): HistoryDay

  """
  Returns aggregate energy specific historical weather fields, over a specified time period. Supply a bounding box ex: lat1=40&lon1=-78&lat2=38&lon2=-80. This API will return UP TO 150 stations, aggregated by the specified time period start_date to end_date. 
  """
  history_energy_bbox_by_lat1_by_lon1_by_lat2_by_lon2(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!

    """Latitude of upper left corner."""
    lat1: Float!

    """Latitude of lower right corner."""
    lat2: Float!

    """Longitude of upper left corner."""
    lon1: Float!

    """Longitude of lower right corner."""
    lon2: Float!

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!

    """Temperature threshold to use to calculate degree days (default 18 C)"""
    threshold: Float
    units: queryInput_history_energy_bbox_by_lat1_by_lon1_by_lat2_by_lon2_units
  ): EnergyObsGroup

  """
  Returns aggregate energy specific historical weather fields, over a specified time period.
  """
  history_energy_by_lat_by_lon(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!

    """Temperature threshold to use to calculate degree days (default 18 C)"""
    threshold: Float
    tp: queryInput_history_energy_by_lat_by_lon_tp
    units: queryInput_history_energy_by_lat_by_lon_units
  ): EnergyObsGroup

  """
  Returns Historical Observations - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_hourly_by_city_by_country(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """
    City search. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR
    """
    city: String!

    """Country Code (2 letter)."""
    country: String!

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_hourly_by_city_by_country_lang

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!

    """Full name of state."""
    state: String
    tz: queryInput_history_hourly_by_city_by_country_tz
    units: queryInput_history_hourly_by_city_by_country_units
  ): History

  """
  Returns Historical Observations - Given a City ID. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_hourly_by_city_id(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """City ID. Example: 4487042"""
    city_id: String!

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_hourly_by_city_id_lang

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    start_date: String!
    tz: queryInput_history_hourly_by_city_id_tz
    units: queryInput_history_hourly_by_city_id_units
  ): History

  """
  Returns Historical Observations - Given a lat, and lon. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_hourly_by_lat_by_lon(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_hourly_by_lat_by_lon_lang

    """Latitude component of location."""
    lat: Float!

    """Longitude component of location."""
    lon: Float!

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!
    tz: queryInput_history_hourly_by_lat_by_lon_tz
    units: queryInput_history_hourly_by_lat_by_lon_units
  ): History

  """
  Returns Historical Observations - Given a Postal Code. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_hourly_by_postal_code(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """Country Code (2 letter)."""
    country: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_hourly_by_postal_code_lang

    """Postal Code. Example: 28546"""
    postal_code: String!

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"""
    start_date: String!
    tz: queryInput_history_hourly_by_postal_code_tz
    units: queryInput_history_hourly_by_postal_code_units
  ): History

  """
  Returns Historical Observations - Given a station ID. **(LIMIT 1 day for Free plan. LIMIT 7 days for Developer. LIMIT 30 days for Advanced/Advanced+/Enterprise)**
  """
  history_hourly_by_station(
    """Wraps return in jsonp callback. Example: callback=func"""
    callback: String

    """End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    end_date: String!

    """Your registered API key."""
    key: String!
    lang: queryInput_history_hourly_by_station_lang

    """Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."""
    start_date: String!

    """Station ID."""
    station: String!
    tz: queryInput_history_hourly_by_station_tz
    units: queryInput_history_hourly_by_station_units
  ): History
}

scalar ResolveToSourceArgs

"""An ISO-8601 time response"""
type Time_Response {
  """The time in ISO-8601 format: HHmmss.SSSZ"""
  data: String
  errors: [CitiesError]
}

"""A time-zone"""
type Time_Zone {
  """The time-zone id"""
  id: String

  """The time-zone name"""
  name: String

  """The number of hours this time-zone is offset from UTC"""
  rawUtcOffsetHours: Int
}

"""A list of time-zones"""
type Time_Zones_Response {
  data: [Time_Zone]
  errors: [CitiesError]
  links: [Link]
  metadata: Metadata
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type WeatherAlert {
  alerts: [WeatherAlertGroup]

  """Latitude"""
  lat: Float

  """Longitude"""
  lon: Float
}

type WeatherAlertGroup {
  alerts: [String]

  """Full description of weather alert"""
  description: String

  """Issued time local"""
  effective_local: String

  """Issued time UTC"""
  effective_utc: String

  """Expiration time local"""
  expires_local: String

  """Expiration time UTC"""
  expires_utc: String

  """Severity of weather. (Advisory | Watch | Warning)"""
  severity: String

  """Brief description of weather alert"""
  title: String

  """URI to weather alert"""
  uri: URL
}

enum minutely_const {
  minutely
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_current_by_cities_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_current_by_cities_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_current_by_city_by_country_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_current_by_city_by_country_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_current_by_city_id_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_current_by_city_id_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_current_by_lat_by_lon_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_current_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_current_by_postal_code_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_current_by_postal_code_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_current_by_station_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_current_by_station_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_current_by_stations_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_current_by_stations_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_3hourly_by_city_by_country_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_3hourly_by_city_by_country_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_3hourly_by_city_id_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_3hourly_by_city_id_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_3hourly_by_lat_by_lon_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_3hourly_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_3hourly_by_postal_code_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_3hourly_by_postal_code_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_daily_by_city_by_country_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_daily_by_city_by_country_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_daily_by_city_id_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_daily_by_city_id_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_daily_by_lat_by_lon_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_daily_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_daily_by_postal_code_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_daily_by_postal_code_units {
  I
  S
}

"""Time period (default: daily)"""
enum queryInput_forecast_energy_by_lat_by_lon_tp {
  daily
  hourly
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_energy_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_hourly_by_city_by_country_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_hourly_by_city_by_country_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_hourly_by_city_id_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_hourly_by_city_id_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_hourly_by_lat_by_lon_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_hourly_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_forecast_hourly_by_postal_code_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_forecast_hourly_by_postal_code_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_daily_by_city_by_country_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_daily_by_city_by_country_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_daily_by_city_id_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_daily_by_city_id_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_daily_by_lat_by_lon_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_daily_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_daily_by_postal_code_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_daily_by_postal_code_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_daily_by_station_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_daily_by_station_units {
  I
  S
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_energy_bbox_by_lat1_by_lon1_by_lat2_by_lon2_units {
  I
  S
}

"""Time period to aggregate by (daily, monthly)"""
enum queryInput_history_energy_by_lat_by_lon_tp {
  daily
  hourly
  monthly
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_energy_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_hourly_by_city_by_country_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""Assume utc (default) or local time for start_date, end_date"""
enum queryInput_history_hourly_by_city_by_country_tz {
  local
  utc
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_hourly_by_city_by_country_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_hourly_by_city_id_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""Assume utc (default) or local time for start_date, end_date"""
enum queryInput_history_hourly_by_city_id_tz {
  local
  utc
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_hourly_by_city_id_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_hourly_by_lat_by_lon_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""Assume utc (default) or local time for start_date, end_date"""
enum queryInput_history_hourly_by_lat_by_lon_tz {
  local
  utc
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_hourly_by_lat_by_lon_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_hourly_by_postal_code_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""Assume utc (default) or local time for start_date, end_date"""
enum queryInput_history_hourly_by_postal_code_tz {
  local
  utc
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_hourly_by_postal_code_units {
  I
  S
}

"""
Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>
"""
enum queryInput_history_hourly_by_station_lang {
  ar
  az
  be
  bg
  bs
  ca
  cs
  de
  el
  es
  et
  fi
  fr
  hr
  hu
  id
  is
  it
  kw
  nb
  nl
  pl
  pt
  ro
  ru
  sk
  sl
  sr
  sv
  tr
  uk
  zh
  zh_tw
}

"""Assume utc (default) or local time for start_date, end_date"""
enum queryInput_history_hourly_by_station_tz {
  local
  utc
}

"""
Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>
"""
enum queryInput_history_hourly_by_station_units {
  I
  S
}

type query_current_by_cities_data_items_weather {
  """Weather Condition code"""
  code: String

  """Weather Condition description"""
  description: String

  """Icon code for forecast image display"""
  icon: String
}

type query_forecast_3hourly_by_city_by_country_data_items_weather {
  """Weather Condition code"""
  code: String

  """Weather Condition description"""
  description: String

  """Icon code for forecast image display"""
  icon: String
}

type query_forecast_daily_by_city_by_country_data_items_weather {
  """Weather Condition code"""
  code: String

  """Weather Condition description"""
  description: String

  """Icon code for forecast image display"""
  icon: String
}

enum query_getLanguagesUsingGET_allOf_1_data_items_code {
  aa
  ab
  ae
  af
  ak
  am
  an
  ar
  as
  av
  ay
  az
  ba
  be
  bg
  bh
  bi
  bm
  bn
  bo
  br
  bs
  ca
  ce
  ch
  co
  cr
  cs
  cu
  cv
  cy
  da
  de
  dv
  dz
  ee
  el
  en
  eo
  es
  et
  eu
  fa
  ff
  fi
  fj
  fo
  fr
  fy
  ga
  gd
  gl
  gn
  gu
  gv
  ha
  he
  hi
  ho
  hr
  ht
  hu
  hy
  hz
  ia
  id
  ie
  ig
  ii
  ik
  io
  is
  it
  iu
  ja
  jv
  ka
  kg
  ki
  kj
  kk
  kl
  km
  kn
  ko
  kr
  ks
  ku
  kv
  kw
  ky
  la
  lb
  lg
  li
  ln
  lo
  lt
  lu
  lv
  mg
  mh
  mi
  mk
  ml
  mn
  mr
  ms
  mt
  my
  na
  nb
  nd
  ne
  ng
  nl
  nn
  no
  nr
  nv
  ny
  oc
  oj
  om
  or
  os
  pa
  pi
  pl
  ps
  pt
  qu
  rm
  rn
  ro
  ru
  rw
  sa
  sc
  sd
  se
  sg
  si
  sk
  sl
  sm
  sn
  so
  sq
  sr
  ss
  st
  su
  sv
  sw
  ta
  te
  tg
  th
  ti
  tk
  tl
  tn
  to
  tr
  ts
  tt
  tw
  ty
  ug
  uk
  undefined
  ur
  uz
  ve
  vi
  vo
  wa
  wo
  xh
  yi
  yo
  za
  zh
  zu
}

type query_history_hourly_by_city_by_country_data_items_weather {
  """Weather Condition code"""
  code: String

  """Weather Condition description"""
  description: String

  """Icon code for forecast image display"""
  icon: String
}

enum t_const {
  t
}"
`;
