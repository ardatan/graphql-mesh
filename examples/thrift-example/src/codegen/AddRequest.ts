/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IAddRequest {
    left: number;
    right: number;
}
export interface IAddRequestArgs {
    left: number;
    right: number;
}
export const AddRequestCodec: thrift.IStructCodec<IAddRequestArgs, IAddRequest> = {
    encode(args: IAddRequestArgs, output: thrift.TProtocol): void {
        const obj: any = {
            left: args.left,
            right: args.right
        };
        output.writeStructBegin("AddRequest");
        if (obj.left != null) {
            output.writeFieldBegin("left", thrift.TType.I32, 1);
            output.writeI32(obj.left);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[left] is unset!");
        }
        if (obj.right != null) {
            output.writeFieldBegin("right", thrift.TType.I32, 2);
            output.writeI32(obj.right);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[right] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAddRequest {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.left = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: number = input.readI32();
                        _args.right = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.left !== undefined && _args.right !== undefined) {
            return {
                left: _args.left,
                right: _args.right
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddRequest from input");
        }
    }
};
export class AddRequest extends thrift.StructLike implements IAddRequest {
    public left: number;
    public right: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAddRequestArgs) {
        super();
        if (args.left != null) {
            const value_3: number = args.left;
            this.left = value_3;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[left] is unset!");
        }
        if (args.right != null) {
            const value_4: number = args.right;
            this.right = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[right] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): AddRequest {
        return new AddRequest(AddRequestCodec.decode(input));
    }
    public static write(args: IAddRequestArgs, output: thrift.TProtocol): void {
        return AddRequestCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AddRequestCodec.encode(this, output);
    }
}
