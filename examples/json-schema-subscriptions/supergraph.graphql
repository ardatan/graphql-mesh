schema
  @transport(
    subgraph: "Example"
    kind: "rest"
    location: "http://localhost:4002"
    headers: "{\"Content-Type\":\"application/json\"}"
  ) {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @example(
  subgraph: String
  value: ObjMap
) repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @httpOperation(
  subgraph: String
  path: String
  operationSpecificHeaders: ObjMap
  httpMethod: HTTPMethod
  isBinary: Boolean
  requestBaseBody: ObjMap
  queryParamArgMap: ObjMap
  queryStringOptionsByParam: ObjMap
  jsonApiFields: Boolean
) on FIELD_DEFINITION

directive @pubsubOperation(subgraph: String, pubsubTopic: String) on FIELD_DEFINITION

directive @transport(
  subgraph: String
  kind: String
  location: String
  headers: ObjMap
  queryStringOptions: ObjMap
  queryParams: ObjMap
) on OBJECT

directive @live on QUERY

type Query {
  todos: [query_todos_items]
    @httpOperation(subgraph: "Example", path: "/todos", httpMethod: GET)
    @resolver(subgraph: "Example", operation: "query todos { todos }")
    @source(subgraph: "Example", name: "todos", type: "[query_todos_items]")
}

type query_todos_items @source(subgraph: "Example", name: "query_todos_items") {
  id: Int @source(subgraph: "Example", name: "id", type: "Int")
  name: String @source(subgraph: "Example", name: "name", type: "String")
  content: String @source(subgraph: "Example", name: "content", type: "String")
}

type Mutation {
  addTodo(input: mutationInput_addTodo_input_Input): mutation_addTodo
    @httpOperation(subgraph: "Example", path: "/todo", httpMethod: POST)
    @resolver(
      subgraph: "Example"
      operation: "mutation mutationaddTodo($input: mutationInput_addTodo_input_Input) { addTodo(input: $input) }"
    )
    @source(subgraph: "Example", name: "addTodo", type: "mutation_addTodo")
}

type mutation_addTodo
  @example(
    subgraph: "Example"
    value: "\"{\\\"id\\\":0,\\\"name\\\":\\\"TodoName\\\",\\\"content\\\":\\\"TodoContent\\\"}\""
  )
  @source(subgraph: "Example", name: "mutation_addTodo") {
  id: Int @source(subgraph: "Example", name: "id", type: "Int")
  name: String @source(subgraph: "Example", name: "name", type: "String")
  content: String @source(subgraph: "Example", name: "content", type: "String")
}

input mutationInput_addTodo_input_Input
  @example(
    subgraph: "Example"
    value: "\"{\\\"name\\\":\\\"TodoName\\\",\\\"content\\\":\\\"TodoContent\\\"}\""
  )
  @source(subgraph: "Example", name: "mutationInput_addTodo_input_Input") {
  name: String @source(subgraph: "Example", name: "name", type: "String")
  content: String @source(subgraph: "Example", name: "content", type: "String")
}

type Subscription {
  """
  PubSub Topic: webhook:post:/webhooks/todo_added
  """
  todoAdded: subscription_todoAdded
    @pubsubOperation(subgraph: "Example", pubsubTopic: "webhook:post:/webhooks/todo_added")
    @resolver(subgraph: "Example", operation: "subscription subscriptiontodoAdded { todoAdded }")
    @source(subgraph: "Example", name: "todoAdded", type: "subscription_todoAdded")
}

type subscription_todoAdded
  @example(
    subgraph: "Example"
    value: "\"{\\\"id\\\":0,\\\"name\\\":\\\"TodoName\\\",\\\"content\\\":\\\"TodoContent\\\"}\""
  )
  @source(subgraph: "Example", name: "subscription_todoAdded") {
  id: Int @source(subgraph: "Example", name: "id", type: "Int")
  name: String @source(subgraph: "Example", name: "name", type: "String")
  content: String @source(subgraph: "Example", name: "content", type: "String")
}

scalar ObjMap
  @source(subgraph: "Example", name: "ObjMap")
  @source(subgraph: "Example", name: "ObjMap")

enum HTTPMethod @source(subgraph: "Example", name: "HTTPMethod") {
  GET @source(subgraph: "Example", name: "GET")
  HEAD @source(subgraph: "Example", name: "HEAD")
  POST @source(subgraph: "Example", name: "POST")
  PUT @source(subgraph: "Example", name: "PUT")
  DELETE @source(subgraph: "Example", name: "DELETE")
  CONNECT @source(subgraph: "Example", name: "CONNECT")
  OPTIONS @source(subgraph: "Example", name: "OPTIONS")
  TRACE @source(subgraph: "Example", name: "TRACE")
  PATCH @source(subgraph: "Example", name: "PATCH")
}
