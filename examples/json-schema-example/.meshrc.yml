sources:
  - name: Fake API
    handler:
      jsonSchema:
        baseUrl: https://not-existing-api.com/API
        operations:
          - type: Query
            field: me
            path: /me
            method: GET
            responseSchema: ./json-schemas/user.json
          - type: Query
            field: company
            path: /company/{args.id}
            method: GET
            responseSchema: ./json-schemas/company.json
            argTypeMap:
              id: ID!
          - type: Mutation
            field: createUser
            path: /user
            method: PUT
            requestSample: ./json-samples/user-input.json
            responseSchema: ./json-schemas/user.json
          - type: Mutation
            field: updateUser
            path: /user/{args.id}
            argTypeMap:
              id: ID!
            method: POST
            requestSample: ./json-samples/user-input.json
            responseSchema: ./json-schemas/user.json # This can be `responseSample` with a sample JSON file
additionalTypeDefs: |
  extend type User {
    company: Company
  }
  extend type Company {
    employers: [User]
  }

transforms:
  - mock:
      mocks:
        - apply: User.firstName
          faker: '{{name.firstName}}'
        - apply: User.lastName
          faker: '{{name.lastName}}'
        - apply: User.jobTitle
          faker: '{{name.jobTitle}}'
        - apply: Company.name
          faker: '{{company.companyName}}'

serve:
  exampleQuery: example-query.graphql
