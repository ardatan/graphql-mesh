// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PostgresGeoDB should generate correct schema: postgres-geodb-schema 1`] = `
"\\"\\"\\"
A floating point number that requires more precision than IEEE 754 binary 64
\\"\\"\\"
scalar GeoBigFloat

\\"\\"\\"A connection to a list of \`City\` values.\\"\\"\\"
type GeoCitiesConnection {
  \\"\\"\\"
  A list of edges which contains the \`City\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [GeoCitiesEdge!]!

  \\"\\"\\"A list of \`City\` objects.\\"\\"\\"
  nodes: [GeoCity]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GeoPageInfo!

  \\"\\"\\"The count of *all* \`City\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`City\` edge in the connection.\\"\\"\\"
type GeoCitiesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: GeoCursor

  \\"\\"\\"The \`City\` at the end of the edge.\\"\\"\\"
  node: GeoCity
}

\\"\\"\\"Methods to use when ordering \`City\`.\\"\\"\\"
enum GeoCitiesOrderBy {
  COUNTRYCODE_ASC
  COUNTRYCODE_DESC
  DISTRICT_ASC
  DISTRICT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  POPULATION_ASC
  POPULATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type GeoCity implements GeoNode {
  \\"\\"\\"Reads and enables pagination through a set of \`Country\`.\\"\\"\\"
  countriesByCapital(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCountryCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Country\`.\\"\\"\\"
    orderBy: [GeoCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountriesConnection!
  countrycode: String!
  developers(limit: Int = 10): GithubUserConnection
  district: String!
  id: Int!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  population: Int!
}

\\"\\"\\"
A condition to be used against \`City\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input GeoCityCondition {
  \\"\\"\\"Checks for equality with the object’s \`countrycode\` field.\\"\\"\\"
  countrycode: String

  \\"\\"\\"Checks for equality with the object’s \`district\` field.\\"\\"\\"
  district: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`population\` field.\\"\\"\\"
  population: Int
}

\\"\\"\\"An input for mutations affecting \`City\`\\"\\"\\"
input GeoCityInput {
  countrycode: String!
  district: String!
  id: Int!
  name: String!
  population: Int!
}

\\"\\"\\"Represents an update to a \`City\`. Fields that are set will be updated.\\"\\"\\"
input GeoCityPatch {
  countrycode: String
  district: String
  id: Int
  name: String
  population: Int
}

\\"\\"\\"A connection to a list of \`Country\` values.\\"\\"\\"
type GeoCountriesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Country\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [GeoCountriesEdge!]!

  \\"\\"\\"A list of \`Country\` objects.\\"\\"\\"
  nodes: [GeoCountry]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GeoPageInfo!

  \\"\\"\\"The count of *all* \`Country\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Country\` edge in the connection.\\"\\"\\"
type GeoCountriesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: GeoCursor

  \\"\\"\\"The \`Country\` at the end of the edge.\\"\\"\\"
  node: GeoCountry
}

\\"\\"\\"Methods to use when ordering \`Country\`.\\"\\"\\"
enum GeoCountriesOrderBy {
  CAPITAL_ASC
  CAPITAL_DESC
  CODE2_ASC
  CODE2_DESC
  CODE_ASC
  CODE_DESC
  CONTINENT_ASC
  CONTINENT_DESC
  GNPOLD_ASC
  GNPOLD_DESC
  GNP_ASC
  GNP_DESC
  GOVERNMENTFORM_ASC
  GOVERNMENTFORM_DESC
  HEADOFSTATE_ASC
  HEADOFSTATE_DESC
  INDEPYEAR_ASC
  INDEPYEAR_DESC
  LIFEEXPECTANCY_ASC
  LIFEEXPECTANCY_DESC
  LOCALNAME_ASC
  LOCALNAME_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  POPULATION_ASC
  POPULATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGION_ASC
  REGION_DESC
  SURFACEAREA_ASC
  SURFACEAREA_DESC
}

type GeoCountry implements GeoNode {
  capital: Int

  \\"\\"\\"Reads a single \`City\` that is related to this \`Country\`.\\"\\"\\"
  cityByCapital: GeoCity
  code: String!
  code2: String!
  continent: String!

  \\"\\"\\"Reads and enables pagination through a set of \`Countrylanguage\`.\\"\\"\\"
  countrylanguagesByCountrycode(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCountrylanguageCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Countrylanguage\`.\\"\\"\\"
    orderBy: [GeoCountrylanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountrylanguagesConnection!
  gnp: GeoBigFloat
  gnpold: GeoBigFloat
  governmentform: String!
  headofstate: String
  indepyear: Int
  lifeexpectancy: Float
  localname: String!
  name: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  population: Int!
  region: String!
  surfacearea: Float!
}

\\"\\"\\"
A condition to be used against \`Country\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input GeoCountryCondition {
  \\"\\"\\"Checks for equality with the object’s \`capital\` field.\\"\\"\\"
  capital: Int

  \\"\\"\\"Checks for equality with the object’s \`code\` field.\\"\\"\\"
  code: String

  \\"\\"\\"Checks for equality with the object’s \`code2\` field.\\"\\"\\"
  code2: String

  \\"\\"\\"Checks for equality with the object’s \`continent\` field.\\"\\"\\"
  continent: String

  \\"\\"\\"Checks for equality with the object’s \`gnp\` field.\\"\\"\\"
  gnp: GeoBigFloat

  \\"\\"\\"Checks for equality with the object’s \`gnpold\` field.\\"\\"\\"
  gnpold: GeoBigFloat

  \\"\\"\\"Checks for equality with the object’s \`governmentform\` field.\\"\\"\\"
  governmentform: String

  \\"\\"\\"Checks for equality with the object’s \`headofstate\` field.\\"\\"\\"
  headofstate: String

  \\"\\"\\"Checks for equality with the object’s \`indepyear\` field.\\"\\"\\"
  indepyear: Int

  \\"\\"\\"Checks for equality with the object’s \`lifeexpectancy\` field.\\"\\"\\"
  lifeexpectancy: Float

  \\"\\"\\"Checks for equality with the object’s \`localname\` field.\\"\\"\\"
  localname: String

  \\"\\"\\"Checks for equality with the object’s \`name\` field.\\"\\"\\"
  name: String

  \\"\\"\\"Checks for equality with the object’s \`population\` field.\\"\\"\\"
  population: Int

  \\"\\"\\"Checks for equality with the object’s \`region\` field.\\"\\"\\"
  region: String

  \\"\\"\\"Checks for equality with the object’s \`surfacearea\` field.\\"\\"\\"
  surfacearea: Float
}

\\"\\"\\"An input for mutations affecting \`Country\`\\"\\"\\"
input GeoCountryInput {
  capital: Int
  code: String!
  code2: String!
  continent: String!
  gnp: GeoBigFloat
  gnpold: GeoBigFloat
  governmentform: String!
  headofstate: String
  indepyear: Int
  lifeexpectancy: Float
  localname: String!
  name: String!
  population: Int!
  region: String!
  surfacearea: Float!
}

\\"\\"\\"
Represents an update to a \`Country\`. Fields that are set will be updated.
\\"\\"\\"
input GeoCountryPatch {
  capital: Int
  code: String
  code2: String
  continent: String
  gnp: GeoBigFloat
  gnpold: GeoBigFloat
  governmentform: String
  headofstate: String
  indepyear: Int
  lifeexpectancy: Float
  localname: String
  name: String
  population: Int
  region: String
  surfacearea: Float
}

type GeoCountrylanguage implements GeoNode {
  \\"\\"\\"Reads a single \`Country\` that is related to this \`Countrylanguage\`.\\"\\"\\"
  countryByCountrycode: GeoCountry
  countrycode: String!
  isofficial: Boolean!
  language: String!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
  percentage: Float!
}

\\"\\"\\"
A condition to be used against \`Countrylanguage\` object types. All fields are
tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input GeoCountrylanguageCondition {
  \\"\\"\\"Checks for equality with the object’s \`countrycode\` field.\\"\\"\\"
  countrycode: String

  \\"\\"\\"Checks for equality with the object’s \`isofficial\` field.\\"\\"\\"
  isofficial: Boolean

  \\"\\"\\"Checks for equality with the object’s \`language\` field.\\"\\"\\"
  language: String

  \\"\\"\\"Checks for equality with the object’s \`percentage\` field.\\"\\"\\"
  percentage: Float
}

\\"\\"\\"An input for mutations affecting \`Countrylanguage\`\\"\\"\\"
input GeoCountrylanguageInput {
  countrycode: String!
  isofficial: Boolean!
  language: String!
  percentage: Float!
}

\\"\\"\\"
Represents an update to a \`Countrylanguage\`. Fields that are set will be updated.
\\"\\"\\"
input GeoCountrylanguagePatch {
  countrycode: String
  isofficial: Boolean
  language: String
  percentage: Float
}

\\"\\"\\"A connection to a list of \`Countrylanguage\` values.\\"\\"\\"
type GeoCountrylanguagesConnection {
  \\"\\"\\"
  A list of edges which contains the \`Countrylanguage\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [GeoCountrylanguagesEdge!]!

  \\"\\"\\"A list of \`Countrylanguage\` objects.\\"\\"\\"
  nodes: [GeoCountrylanguage]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GeoPageInfo!

  \\"\\"\\"
  The count of *all* \`Countrylanguage\` you could get from the connection.
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`Countrylanguage\` edge in the connection.\\"\\"\\"
type GeoCountrylanguagesEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: GeoCursor

  \\"\\"\\"The \`Countrylanguage\` at the end of the edge.\\"\\"\\"
  node: GeoCountrylanguage
}

\\"\\"\\"Methods to use when ordering \`Countrylanguage\`.\\"\\"\\"
enum GeoCountrylanguagesOrderBy {
  COUNTRYCODE_ASC
  COUNTRYCODE_DESC
  ISOFFICIAL_ASC
  ISOFFICIAL_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  NATURAL
  PERCENTAGE_ASC
  PERCENTAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"All input for the create \`City\` mutation.\\"\\"\\"
input GeoCreateCityInput {
  \\"\\"\\"The \`City\` to be created by this mutation.\\"\\"\\"
  city: GeoCityInput!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"The output of our create \`City\` mutation.\\"\\"\\"
type GeoCreateCityPayload {
  \\"\\"\\"The \`City\` that was created by this mutation.\\"\\"\\"
  city: GeoCity

  \\"\\"\\"An edge for our \`City\`. May be used by Relay 1.\\"\\"\\"
  cityEdge(
    \\"\\"\\"The method to use when ordering \`City\`.\\"\\"\\"
    orderBy: [GeoCitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCitiesEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Country\` mutation.\\"\\"\\"
input GeoCreateCountryInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Country\` to be created by this mutation.\\"\\"\\"
  country: GeoCountryInput!
}

\\"\\"\\"The output of our create \`Country\` mutation.\\"\\"\\"
type GeoCreateCountryPayload {
  \\"\\"\\"Reads a single \`City\` that is related to this \`Country\`.\\"\\"\\"
  cityByCapital: GeoCity

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Country\` that was created by this mutation.\\"\\"\\"
  country: GeoCountry

  \\"\\"\\"An edge for our \`Country\`. May be used by Relay 1.\\"\\"\\"
  countryEdge(
    \\"\\"\\"The method to use when ordering \`Country\`.\\"\\"\\"
    orderBy: [GeoCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountriesEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the create \`Countrylanguage\` mutation.\\"\\"\\"
input GeoCreateCountrylanguageInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Countrylanguage\` to be created by this mutation.\\"\\"\\"
  countrylanguage: GeoCountrylanguageInput!
}

\\"\\"\\"The output of our create \`Countrylanguage\` mutation.\\"\\"\\"
type GeoCreateCountrylanguagePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Country\` that is related to this \`Countrylanguage\`.\\"\\"\\"
  countryByCountrycode: GeoCountry

  \\"\\"\\"The \`Countrylanguage\` that was created by this mutation.\\"\\"\\"
  countrylanguage: GeoCountrylanguage

  \\"\\"\\"An edge for our \`Countrylanguage\`. May be used by Relay 1.\\"\\"\\"
  countrylanguageEdge(
    \\"\\"\\"The method to use when ordering \`Countrylanguage\`.\\"\\"\\"
    orderBy: [GeoCountrylanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountrylanguagesEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar GeoCursor

\\"\\"\\"All input for the \`deleteCityById\` mutation.\\"\\"\\"
input GeoDeleteCityByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deleteCity\` mutation.\\"\\"\\"
input GeoDeleteCityInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`City\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`City\` mutation.\\"\\"\\"
type GeoDeleteCityPayload {
  \\"\\"\\"The \`City\` that was deleted by this mutation.\\"\\"\\"
  city: GeoCity

  \\"\\"\\"An edge for our \`City\`. May be used by Relay 1.\\"\\"\\"
  cityEdge(
    \\"\\"\\"The method to use when ordering \`City\`.\\"\\"\\"
    orderBy: [GeoCitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCitiesEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedCityId: ID

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`deleteCountryByCode\` mutation.\\"\\"\\"
input GeoDeleteCountryByCodeInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  code: String!
}

\\"\\"\\"All input for the \`deleteCountry\` mutation.\\"\\"\\"
input GeoDeleteCountryInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Country\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Country\` mutation.\\"\\"\\"
type GeoDeleteCountryPayload {
  \\"\\"\\"Reads a single \`City\` that is related to this \`Country\`.\\"\\"\\"
  cityByCapital: GeoCity

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Country\` that was deleted by this mutation.\\"\\"\\"
  country: GeoCountry

  \\"\\"\\"An edge for our \`Country\`. May be used by Relay 1.\\"\\"\\"
  countryEdge(
    \\"\\"\\"The method to use when ordering \`Country\`.\\"\\"\\"
    orderBy: [GeoCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountriesEdge
  deletedCountryId: ID

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"
All input for the \`deleteCountrylanguageByCountrycodeAndLanguage\` mutation.
\\"\\"\\"
input GeoDeleteCountrylanguageByCountrycodeAndLanguageInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  countrycode: String!
  language: String!
}

\\"\\"\\"All input for the \`deleteCountrylanguage\` mutation.\\"\\"\\"
input GeoDeleteCountrylanguageInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Countrylanguage\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Countrylanguage\` mutation.\\"\\"\\"
type GeoDeleteCountrylanguagePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Country\` that is related to this \`Countrylanguage\`.\\"\\"\\"
  countryByCountrycode: GeoCountry

  \\"\\"\\"The \`Countrylanguage\` that was deleted by this mutation.\\"\\"\\"
  countrylanguage: GeoCountrylanguage

  \\"\\"\\"An edge for our \`Countrylanguage\`. May be used by Relay 1.\\"\\"\\"
  countrylanguageEdge(
    \\"\\"\\"The method to use when ordering \`Countrylanguage\`.\\"\\"\\"
    orderBy: [GeoCountrylanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountrylanguagesEdge
  deletedCountrylanguageId: ID

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface GeoNode {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type GeoPageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: GeoCursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: GeoCursor
}

\\"\\"\\"All input for the \`updateCityById\` mutation.\\"\\"\\"
input GeoUpdateCityByIdInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`City\` being updated.
  \\"\\"\\"
  cityPatch: GeoCityPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`updateCity\` mutation.\\"\\"\\"
input GeoUpdateCityInput {
  \\"\\"\\"
  An object where the defined keys will be set on the \`City\` being updated.
  \\"\\"\\"
  cityPatch: GeoCityPatch!

  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`City\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`City\` mutation.\\"\\"\\"
type GeoUpdateCityPayload {
  \\"\\"\\"The \`City\` that was updated by this mutation.\\"\\"\\"
  city: GeoCity

  \\"\\"\\"An edge for our \`City\`. May be used by Relay 1.\\"\\"\\"
  cityEdge(
    \\"\\"\\"The method to use when ordering \`City\`.\\"\\"\\"
    orderBy: [GeoCitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCitiesEdge

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"All input for the \`updateCountryByCode\` mutation.\\"\\"\\"
input GeoUpdateCountryByCodeInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  code: String!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Country\` being updated.
  \\"\\"\\"
  countryPatch: GeoCountryPatch!
}

\\"\\"\\"All input for the \`updateCountry\` mutation.\\"\\"\\"
input GeoUpdateCountryInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Country\` being updated.
  \\"\\"\\"
  countryPatch: GeoCountryPatch!

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Country\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`Country\` mutation.\\"\\"\\"
type GeoUpdateCountryPayload {
  \\"\\"\\"Reads a single \`City\` that is related to this \`Country\`.\\"\\"\\"
  cityByCapital: GeoCity

  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Country\` that was updated by this mutation.\\"\\"\\"
  country: GeoCountry

  \\"\\"\\"An edge for our \`Country\`. May be used by Relay 1.\\"\\"\\"
  countryEdge(
    \\"\\"\\"The method to use when ordering \`Country\`.\\"\\"\\"
    orderBy: [GeoCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountriesEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"
All input for the \`updateCountrylanguageByCountrycodeAndLanguage\` mutation.
\\"\\"\\"
input GeoUpdateCountrylanguageByCountrycodeAndLanguageInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  countrycode: String!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Countrylanguage\` being updated.
  \\"\\"\\"
  countrylanguagePatch: GeoCountrylanguagePatch!
  language: String!
}

\\"\\"\\"All input for the \`updateCountrylanguage\` mutation.\\"\\"\\"
input GeoUpdateCountrylanguageInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`Countrylanguage\` being updated.
  \\"\\"\\"
  countrylanguagePatch: GeoCountrylanguagePatch!

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Countrylanguage\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`Countrylanguage\` mutation.\\"\\"\\"
type GeoUpdateCountrylanguagePayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Reads a single \`Country\` that is related to this \`Countrylanguage\`.\\"\\"\\"
  countryByCountrycode: GeoCountry

  \\"\\"\\"The \`Countrylanguage\` that was updated by this mutation.\\"\\"\\"
  countrylanguage: GeoCountrylanguage

  \\"\\"\\"An edge for our \`Countrylanguage\`. May be used by Relay 1.\\"\\"\\"
  countrylanguageEdge(
    \\"\\"\\"The method to use when ordering \`Countrylanguage\`.\\"\\"\\"
    orderBy: [GeoCountrylanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountrylanguagesEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"Autogenerated input type of AcceptEnterpriseAdministratorInvitation\\"\\"\\"
input GithubAcceptEnterpriseAdministratorInvitationInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the invitation being accepted\\"\\"\\"
  invitationId: ID!
}

\\"\\"\\"Autogenerated return type of AcceptEnterpriseAdministratorInvitation\\"\\"\\"
type GithubAcceptEnterpriseAdministratorInvitationPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The invitation that was accepted.\\"\\"\\"
  invitation: GithubEnterpriseAdministratorInvitation

  \\"\\"\\"
  A message confirming the result of accepting an administrator invitation.
  \\"\\"\\"
  message: String
}

\\"\\"\\"Autogenerated input type of AcceptTopicSuggestion\\"\\"\\"
input GithubAcceptTopicSuggestionInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of the suggested topic.\\"\\"\\"
  name: String!

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of AcceptTopicSuggestion\\"\\"\\"
type GithubAcceptTopicSuggestionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The accepted topic.\\"\\"\\"
  topic: GithubTopic
}

\\"\\"\\"
Represents an object which can take actions on GitHub. Typically a User or Bot.
\\"\\"\\"
interface GithubActor {
  \\"\\"\\"A URL pointing to the actor's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"The username of the actor.\\"\\"\\"
  login: String!

  \\"\\"\\"The HTTP path for this actor.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this actor.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Location information for an actor\\"\\"\\"
type GithubActorLocation {
  \\"\\"\\"City\\"\\"\\"
  city: String

  \\"\\"\\"Country name\\"\\"\\"
  country: String

  \\"\\"\\"Country code\\"\\"\\"
  countryCode: String

  \\"\\"\\"Region name\\"\\"\\"
  region: String

  \\"\\"\\"Region or state code\\"\\"\\"
  regionCode: String
}

\\"\\"\\"Autogenerated input type of AddAssigneesToAssignable\\"\\"\\"
input GithubAddAssigneesToAssignableInput {
  \\"\\"\\"The id of the assignable object to add assignees to.\\"\\"\\"
  assignableId: ID!

  \\"\\"\\"The id of users to add as assignees.\\"\\"\\"
  assigneeIds: [ID!]!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated return type of AddAssigneesToAssignable\\"\\"\\"
type GithubAddAssigneesToAssignablePayload {
  \\"\\"\\"The item that was assigned.\\"\\"\\"
  assignable: GithubAssignable

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of AddComment\\"\\"\\"
input GithubAddCommentInput {
  \\"\\"\\"The contents of the comment.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the subject to modify.\\"\\"\\"
  subjectId: ID!
}

\\"\\"\\"Autogenerated return type of AddComment\\"\\"\\"
type GithubAddCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The edge from the subject's comment connection.\\"\\"\\"
  commentEdge: GithubIssueCommentEdge

  \\"\\"\\"The subject\\"\\"\\"
  subject: GithubNode

  \\"\\"\\"The edge from the subject's timeline connection.\\"\\"\\"
  timelineEdge: GithubIssueTimelineItemEdge
}

\\"\\"\\"Autogenerated input type of AddDiscussionComment\\"\\"\\"
input GithubAddDiscussionCommentInput {
  \\"\\"\\"The contents of the comment.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion to comment on.\\"\\"\\"
  discussionId: ID!

  \\"\\"\\"
  The Node ID of the discussion comment within this discussion to reply to.
  \\"\\"\\"
  replyToId: ID
}

\\"\\"\\"Autogenerated return type of AddDiscussionComment\\"\\"\\"
type GithubAddDiscussionCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The newly created discussion comment.\\"\\"\\"
  comment: GithubDiscussionComment
}

\\"\\"\\"Autogenerated input type of AddEnterpriseSupportEntitlement\\"\\"\\"
input GithubAddEnterpriseSupportEntitlementInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the Enterprise which the admin belongs to.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The login of a member who will receive the support entitlement.\\"\\"\\"
  login: String!
}

\\"\\"\\"Autogenerated return type of AddEnterpriseSupportEntitlement\\"\\"\\"
type GithubAddEnterpriseSupportEntitlementPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"A message confirming the result of adding the support entitlement.\\"\\"\\"
  message: String
}

\\"\\"\\"Autogenerated input type of AddLabelsToLabelable\\"\\"\\"
input GithubAddLabelsToLabelableInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ids of the labels to add.\\"\\"\\"
  labelIds: [ID!]!

  \\"\\"\\"The id of the labelable object to add labels to.\\"\\"\\"
  labelableId: ID!
}

\\"\\"\\"Autogenerated return type of AddLabelsToLabelable\\"\\"\\"
type GithubAddLabelsToLabelablePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The item that was labeled.\\"\\"\\"
  labelable: GithubLabelable
}

\\"\\"\\"Autogenerated input type of AddProjectCard\\"\\"\\"
input GithubAddProjectCardInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The content of the card. Must be a member of the ProjectCardItem union\\"\\"\\"
  contentId: ID

  \\"\\"\\"The note on the card.\\"\\"\\"
  note: String

  \\"\\"\\"The Node ID of the ProjectColumn.\\"\\"\\"
  projectColumnId: ID!
}

\\"\\"\\"Autogenerated return type of AddProjectCard\\"\\"\\"
type GithubAddProjectCardPayload {
  \\"\\"\\"The edge from the ProjectColumn's card connection.\\"\\"\\"
  cardEdge: GithubProjectCardEdge

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ProjectColumn\\"\\"\\"
  projectColumn: GithubProjectColumn
}

\\"\\"\\"Autogenerated input type of AddProjectColumn\\"\\"\\"
input GithubAddProjectColumnInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of the column.\\"\\"\\"
  name: String!

  \\"\\"\\"The Node ID of the project.\\"\\"\\"
  projectId: ID!
}

\\"\\"\\"Autogenerated return type of AddProjectColumn\\"\\"\\"
type GithubAddProjectColumnPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The edge from the project's column connection.\\"\\"\\"
  columnEdge: GithubProjectColumnEdge

  \\"\\"\\"The project\\"\\"\\"
  project: GithubProject
}

\\"\\"\\"Autogenerated input type of AddPullRequestReviewComment\\"\\"\\"
input GithubAddPullRequestReviewCommentInput {
  \\"\\"\\"The text of the comment.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The SHA of the commit to comment on.\\"\\"\\"
  commitOID: GithubGitObjectID

  \\"\\"\\"The comment id to reply to.\\"\\"\\"
  inReplyTo: ID

  \\"\\"\\"The relative path of the file to comment on.\\"\\"\\"
  path: String

  \\"\\"\\"The line index in the diff to comment on.\\"\\"\\"
  position: Int

  \\"\\"\\"The node ID of the pull request reviewing\\"\\"\\"
  pullRequestId: ID

  \\"\\"\\"The Node ID of the review to modify.\\"\\"\\"
  pullRequestReviewId: ID
}

\\"\\"\\"Autogenerated return type of AddPullRequestReviewComment\\"\\"\\"
type GithubAddPullRequestReviewCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The newly created comment.\\"\\"\\"
  comment: GithubPullRequestReviewComment

  \\"\\"\\"The edge from the review's comment connection.\\"\\"\\"
  commentEdge: GithubPullRequestReviewCommentEdge
}

\\"\\"\\"Autogenerated input type of AddPullRequestReview\\"\\"\\"
input GithubAddPullRequestReviewInput {
  \\"\\"\\"The contents of the review body comment.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The review line comments.\\"\\"\\"
  comments: [GithubDraftPullRequestReviewComment]

  \\"\\"\\"The commit OID the review pertains to.\\"\\"\\"
  commitOID: GithubGitObjectID

  \\"\\"\\"The event to perform on the pull request review.\\"\\"\\"
  event: GithubPullRequestReviewEvent

  \\"\\"\\"The Node ID of the pull request to modify.\\"\\"\\"
  pullRequestId: ID!

  \\"\\"\\"The review line comment threads.\\"\\"\\"
  threads: [GithubDraftPullRequestReviewThread]
}

\\"\\"\\"Autogenerated return type of AddPullRequestReview\\"\\"\\"
type GithubAddPullRequestReviewPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The newly created pull request review.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview

  \\"\\"\\"The edge from the pull request's review connection.\\"\\"\\"
  reviewEdge: GithubPullRequestReviewEdge
}

\\"\\"\\"Autogenerated input type of AddPullRequestReviewThread\\"\\"\\"
input GithubAddPullRequestReviewThreadInput {
  \\"\\"\\"Body of the thread's first comment.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  \\"\\"\\"
  line: Int!

  \\"\\"\\"Path to the file being commented on.\\"\\"\\"
  path: String!

  \\"\\"\\"The node ID of the pull request reviewing\\"\\"\\"
  pullRequestId: ID

  \\"\\"\\"The Node ID of the review to modify.\\"\\"\\"
  pullRequestReviewId: ID

  \\"\\"\\"
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  \\"\\"\\"
  side: GithubDiffSide = RIGHT

  \\"\\"\\"The first line of the range to which the comment refers.\\"\\"\\"
  startLine: Int

  \\"\\"\\"The side of the diff on which the start line resides.\\"\\"\\"
  startSide: GithubDiffSide = RIGHT
}

\\"\\"\\"Autogenerated return type of AddPullRequestReviewThread\\"\\"\\"
type GithubAddPullRequestReviewThreadPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The newly created thread.\\"\\"\\"
  thread: GithubPullRequestReviewThread
}

\\"\\"\\"Autogenerated input type of AddReaction\\"\\"\\"
input GithubAddReactionInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of the emoji to react with.\\"\\"\\"
  content: GithubReactionContent!

  \\"\\"\\"The Node ID of the subject to modify.\\"\\"\\"
  subjectId: ID!
}

\\"\\"\\"Autogenerated return type of AddReaction\\"\\"\\"
type GithubAddReactionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The reaction object.\\"\\"\\"
  reaction: GithubReaction

  \\"\\"\\"The reactable subject.\\"\\"\\"
  subject: GithubReactable
}

\\"\\"\\"Autogenerated input type of AddStar\\"\\"\\"
input GithubAddStarInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Starrable ID to star.\\"\\"\\"
  starrableId: ID!
}

\\"\\"\\"Autogenerated return type of AddStar\\"\\"\\"
type GithubAddStarPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The starrable.\\"\\"\\"
  starrable: GithubStarrable
}

\\"\\"\\"Autogenerated input type of AddUpvote\\"\\"\\"
input GithubAddUpvoteInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion or comment to upvote.\\"\\"\\"
  subjectId: ID!
}

\\"\\"\\"Autogenerated return type of AddUpvote\\"\\"\\"
type GithubAddUpvotePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The votable subject.\\"\\"\\"
  subject: GithubVotable
}

\\"\\"\\"Autogenerated input type of AddVerifiableDomain\\"\\"\\"
input GithubAddVerifiableDomainInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The URL of the domain\\"\\"\\"
  domain: GithubURI!

  \\"\\"\\"The ID of the owner to add the domain to\\"\\"\\"
  ownerId: ID!
}

\\"\\"\\"Autogenerated return type of AddVerifiableDomain\\"\\"\\"
type GithubAddVerifiableDomainPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The verifiable domain that was added.\\"\\"\\"
  domain: GithubVerifiableDomain
}

\\"\\"\\"
Represents a 'added_to_project' event on a given issue or pull request.
\\"\\"\\"
type GithubAddedToProjectEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!
}

\\"\\"\\"A GitHub App.\\"\\"\\"
type GithubApp implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The description of the app.\\"\\"\\"
  description: String
  id: ID!

  \\"\\"\\"The hex color code, without the leading '#', for the logo background.\\"\\"\\"
  logoBackgroundColor: String!

  \\"\\"\\"A URL pointing to the app's logo.\\"\\"\\"
  logoUrl(
    \\"\\"\\"The size of the resulting image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"The name of the app.\\"\\"\\"
  name: String!

  \\"\\"\\"A slug based on the name of the app for use in URLs.\\"\\"\\"
  slug: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The URL to the app's homepage.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Autogenerated input type of ApproveDeployments\\"\\"\\"
input GithubApproveDeploymentsInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Optional comment for approving deployments\\"\\"\\"
  comment: String = \\"\\"

  \\"\\"\\"The ids of environments to reject deployments\\"\\"\\"
  environmentIds: [ID!]!

  \\"\\"\\"The node ID of the workflow run containing the pending deployments.\\"\\"\\"
  workflowRunId: ID!
}

\\"\\"\\"Autogenerated return type of ApproveDeployments\\"\\"\\"
type GithubApproveDeploymentsPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The affected deployments.\\"\\"\\"
  deployments: [GithubDeployment!]
}

\\"\\"\\"Autogenerated input type of ApproveVerifiableDomain\\"\\"\\"
input GithubApproveVerifiableDomainInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the verifiable domain to approve.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of ApproveVerifiableDomain\\"\\"\\"
type GithubApproveVerifiableDomainPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The verifiable domain that was approved.\\"\\"\\"
  domain: GithubVerifiableDomain
}

\\"\\"\\"Autogenerated input type of ArchiveRepository\\"\\"\\"
input GithubArchiveRepositoryInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the repository to mark as archived.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of ArchiveRepository\\"\\"\\"
type GithubArchiveRepositoryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The repository that was marked as archived.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"An object that can have users assigned to it.\\"\\"\\"
interface GithubAssignable {
  \\"\\"\\"A list of Users assigned to this object.\\"\\"\\"
  assignees(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!
}

\\"\\"\\"Represents an 'assigned' event on any assignable object.\\"\\"\\"
type GithubAssignedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the assignable associated with the event.\\"\\"\\"
  assignable: GithubAssignable!

  \\"\\"\\"Identifies the user or mannequin that was assigned.\\"\\"\\"
  assignee: GithubAssignee

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the user who was assigned.\\"\\"\\"
  user: GithubUser @deprecated(reason: \\"Assignees can now be mannequins. Use the \`assignee\` field instead. Removal on 2020-01-01 UTC.\\")
}

\\"\\"\\"Types that can be assigned to issues.\\"\\"\\"
union GithubAssignee = GithubBot | GithubMannequin | GithubOrganization | GithubUser

\\"\\"\\"An entry in the audit log.\\"\\"\\"
interface GithubAuditEntry {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Types that can initiate an audit log event.\\"\\"\\"
union GithubAuditEntryActor = GithubBot | GithubOrganization | GithubUser

\\"\\"\\"Ordering options for Audit Log connections.\\"\\"\\"
input GithubAuditLogOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection

  \\"\\"\\"The field to order Audit Logs by.\\"\\"\\"
  field: GithubAuditLogOrderField
}

\\"\\"\\"Properties by which Audit Log connections can be ordered.\\"\\"\\"
enum GithubAuditLogOrderField {
  \\"\\"\\"Order audit log entries by timestamp\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"Represents a 'auto_merge_disabled' event on a given pull request.\\"\\"\\"
type GithubAutoMergeDisabledEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The user who disabled auto-merge for this Pull Request\\"\\"\\"
  disabler: GithubUser
  id: ID!

  \\"\\"\\"PullRequest referenced by event\\"\\"\\"
  pullRequest: GithubPullRequest

  \\"\\"\\"The reason auto-merge was disabled\\"\\"\\"
  reason: String

  \\"\\"\\"The reason_code relating to why auto-merge was disabled\\"\\"\\"
  reasonCode: String
}

\\"\\"\\"Represents a 'auto_merge_enabled' event on a given pull request.\\"\\"\\"
type GithubAutoMergeEnabledEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The user who enabled auto-merge for this Pull Request\\"\\"\\"
  enabler: GithubUser
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Represents an auto-merge request for a pull request\\"\\"\\"
type GithubAutoMergeRequest {
  \\"\\"\\"The email address of the author of this auto-merge request.\\"\\"\\"
  authorEmail: String

  \\"\\"\\"The commit message of the auto-merge request.\\"\\"\\"
  commitBody: String

  \\"\\"\\"The commit title of the auto-merge request.\\"\\"\\"
  commitHeadline: String

  \\"\\"\\"When was this auto-merge request was enabled.\\"\\"\\"
  enabledAt: GithubDateTime

  \\"\\"\\"The actor who created the auto-merge request.\\"\\"\\"
  enabledBy: GithubActor

  \\"\\"\\"The merge method of the auto-merge request.\\"\\"\\"
  mergeMethod: GithubPullRequestMergeMethod!

  \\"\\"\\"The pull request that this auto-merge request is set against.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"Represents a 'auto_rebase_enabled' event on a given pull request.\\"\\"\\"
type GithubAutoRebaseEnabledEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The user who enabled auto-merge (rebase) for this Pull Request\\"\\"\\"
  enabler: GithubUser
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Represents a 'auto_squash_enabled' event on a given pull request.\\"\\"\\"
type GithubAutoSquashEnabledEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The user who enabled auto-merge (squash) for this Pull Request\\"\\"\\"
  enabler: GithubUser
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"
Represents a 'automatic_base_change_failed' event on a given pull request.
\\"\\"\\"
type GithubAutomaticBaseChangeFailedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"The new base for this PR\\"\\"\\"
  newBase: String!

  \\"\\"\\"The old base for this PR\\"\\"\\"
  oldBase: String!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"
Represents a 'automatic_base_change_succeeded' event on a given pull request.
\\"\\"\\"
type GithubAutomaticBaseChangeSucceededEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"The new base for this PR\\"\\"\\"
  newBase: String!

  \\"\\"\\"The old base for this PR\\"\\"\\"
  oldBase: String!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"
Represents a 'base_ref_changed' event on a given issue or pull request.
\\"\\"\\"
type GithubBaseRefChangedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"
  Identifies the name of the base ref for the pull request after it was changed.
  \\"\\"\\"
  currentRefName: String!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"
  Identifies the name of the base ref for the pull request before it was changed.
  \\"\\"\\"
  previousRefName: String!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"Represents a 'base_ref_deleted' event on a given pull request.\\"\\"\\"
type GithubBaseRefDeletedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"
  Identifies the name of the Ref associated with the \`base_ref_deleted\` event.
  \\"\\"\\"
  baseRefName: String

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Represents a 'base_ref_force_pushed' event on a given pull request.\\"\\"\\"
type GithubBaseRefForcePushedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the after commit SHA for the 'base_ref_force_pushed' event.\\"\\"\\"
  afterCommit: GithubCommit

  \\"\\"\\"
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  \\"\\"\\"
  beforeCommit: GithubCommit

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  \\"\\"\\"
  ref: GithubRef
}

\\"\\"\\"Represents a Git blame.\\"\\"\\"
type GithubBlame {
  \\"\\"\\"The list of ranges from a Git blame.\\"\\"\\"
  ranges: [GithubBlameRange!]!
}

\\"\\"\\"Represents a range of information from a Git blame.\\"\\"\\"
type GithubBlameRange {
  \\"\\"\\"
  Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
  \\"\\"\\"
  age: Int!

  \\"\\"\\"Identifies the line author\\"\\"\\"
  commit: GithubCommit!

  \\"\\"\\"The ending line for the range\\"\\"\\"
  endingLine: Int!

  \\"\\"\\"The starting line for the range\\"\\"\\"
  startingLine: Int!
}

\\"\\"\\"Represents a Git blob.\\"\\"\\"
type GithubBlob implements GithubGitObject & GithubNode {
  \\"\\"\\"An abbreviated version of the Git object ID\\"\\"\\"
  abbreviatedOid: String!

  \\"\\"\\"Byte size of Blob object\\"\\"\\"
  byteSize: Int!

  \\"\\"\\"The HTTP path for this Git object\\"\\"\\"
  commitResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this Git object\\"\\"\\"
  commitUrl: GithubURI!
  id: ID!

  \\"\\"\\"
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  \\"\\"\\"
  isBinary: Boolean

  \\"\\"\\"Indicates whether the contents is truncated\\"\\"\\"
  isTruncated: Boolean!

  \\"\\"\\"The Git object ID\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The Repository the Git object belongs to\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"UTF8 text data or null if the Blob is binary\\"\\"\\"
  text: String
}

\\"\\"\\"A special type of user which takes actions on behalf of GitHub Apps.\\"\\"\\"
type GithubBot implements GithubActor & GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"A URL pointing to the GitHub App's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The username of the actor.\\"\\"\\"
  login: String!

  \\"\\"\\"The HTTP path for this bot\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this bot\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"A branch protection rule.\\"\\"\\"
type GithubBranchProtectionRule implements GithubNode {
  \\"\\"\\"Can this branch be deleted.\\"\\"\\"
  allowsDeletions: Boolean!

  \\"\\"\\"Are force pushes allowed on this branch.\\"\\"\\"
  allowsForcePushes: Boolean!

  \\"\\"\\"
  A list of conflicts matching branches protection rule and other branch protection rules
  \\"\\"\\"
  branchProtectionRuleConflicts(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubBranchProtectionRuleConflictConnection!

  \\"\\"\\"The actor who created this branch protection rule.\\"\\"\\"
  creator: GithubActor

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"
  Will new commits pushed to matching branches dismiss pull request review approvals.
  \\"\\"\\"
  dismissesStaleReviews: Boolean!
  id: ID!

  \\"\\"\\"Can admins overwrite branch protection.\\"\\"\\"
  isAdminEnforced: Boolean!

  \\"\\"\\"Repository refs that are protected by this rule\\"\\"\\"
  matchingRefs(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filters refs with query on name\\"\\"\\"
    query: String
  ): GithubRefConnection!

  \\"\\"\\"Identifies the protection rule pattern.\\"\\"\\"
  pattern: String!

  \\"\\"\\"A list push allowances for this branch protection rule.\\"\\"\\"
  pushAllowances(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPushAllowanceConnection!

  \\"\\"\\"The repository associated with this branch protection rule.\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"Number of approving reviews required to update matching branches.\\"\\"\\"
  requiredApprovingReviewCount: Int

  \\"\\"\\"
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  \\"\\"\\"
  requiredStatusCheckContexts: [String]

  \\"\\"\\"Are approving reviews required to update matching branches.\\"\\"\\"
  requiresApprovingReviews: Boolean!

  \\"\\"\\"Are reviews from code owners required to update matching branches.\\"\\"\\"
  requiresCodeOwnerReviews: Boolean!

  \\"\\"\\"Are commits required to be signed.\\"\\"\\"
  requiresCommitSignatures: Boolean!

  \\"\\"\\"Are merge commits prohibited from being pushed to this branch.\\"\\"\\"
  requiresLinearHistory: Boolean!

  \\"\\"\\"Are status checks required to update matching branches.\\"\\"\\"
  requiresStatusChecks: Boolean!

  \\"\\"\\"Are branches required to be up to date before merging.\\"\\"\\"
  requiresStrictStatusChecks: Boolean!

  \\"\\"\\"Is pushing to matching branches restricted.\\"\\"\\"
  restrictsPushes: Boolean!

  \\"\\"\\"Is dismissal of pull request reviews restricted.\\"\\"\\"
  restrictsReviewDismissals: Boolean!

  \\"\\"\\"A list review dismissal allowances for this branch protection rule.\\"\\"\\"
  reviewDismissalAllowances(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubReviewDismissalAllowanceConnection!
}

\\"\\"\\"A conflict between two branch protection rules.\\"\\"\\"
type GithubBranchProtectionRuleConflict {
  \\"\\"\\"Identifies the branch protection rule.\\"\\"\\"
  branchProtectionRule: GithubBranchProtectionRule

  \\"\\"\\"Identifies the conflicting branch protection rule.\\"\\"\\"
  conflictingBranchProtectionRule: GithubBranchProtectionRule

  \\"\\"\\"Identifies the branch ref that has conflicting rules\\"\\"\\"
  ref: GithubRef
}

\\"\\"\\"The connection type for BranchProtectionRuleConflict.\\"\\"\\"
type GithubBranchProtectionRuleConflictConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubBranchProtectionRuleConflictEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubBranchProtectionRuleConflict]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubBranchProtectionRuleConflictEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubBranchProtectionRuleConflict
}

\\"\\"\\"The connection type for BranchProtectionRule.\\"\\"\\"
type GithubBranchProtectionRuleConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubBranchProtectionRuleEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubBranchProtectionRule]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubBranchProtectionRuleEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubBranchProtectionRule
}

\\"\\"\\"The Common Vulnerability Scoring System\\"\\"\\"
type GithubCVSS {
  \\"\\"\\"The CVSS score associated with this advisory\\"\\"\\"
  score: Float!

  \\"\\"\\"The CVSS vector string associated with this advisory\\"\\"\\"
  vectorString: String
}

\\"\\"\\"A common weakness enumeration\\"\\"\\"
type GithubCWE implements GithubNode {
  \\"\\"\\"The id of the CWE\\"\\"\\"
  cweId: String!

  \\"\\"\\"A detailed description of this CWE\\"\\"\\"
  description: String!

  \\"\\"\\"ID of the object.\\"\\"\\"
  id: ID!

  \\"\\"\\"The name of this CWE\\"\\"\\"
  name: String!
}

\\"\\"\\"The connection type for CWE.\\"\\"\\"
type GithubCWEConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCWEEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCWE]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCWEEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCWE
}

\\"\\"\\"Autogenerated input type of CancelEnterpriseAdminInvitation\\"\\"\\"
input GithubCancelEnterpriseAdminInvitationInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the pending enterprise administrator invitation.\\"\\"\\"
  invitationId: ID!
}

\\"\\"\\"Autogenerated return type of CancelEnterpriseAdminInvitation\\"\\"\\"
type GithubCancelEnterpriseAdminInvitationPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The invitation that was canceled.\\"\\"\\"
  invitation: GithubEnterpriseAdministratorInvitation

  \\"\\"\\"
  A message confirming the result of canceling an administrator invitation.
  \\"\\"\\"
  message: String
}

\\"\\"\\"Autogenerated input type of ChangeUserStatus\\"\\"\\"
input GithubChangeUserStatusInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  \\"\\"\\"
  emoji: String

  \\"\\"\\"If set, the user status will not be shown after this date.\\"\\"\\"
  expiresAt: GithubDateTime

  \\"\\"\\"
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  \\"\\"\\"
  limitedAvailability: Boolean = false

  \\"\\"\\"A short description of your current status.\\"\\"\\"
  message: String

  \\"\\"\\"
  The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
  \\"\\"\\"
  organizationId: ID
}

\\"\\"\\"Autogenerated return type of ChangeUserStatus\\"\\"\\"
type GithubChangeUserStatusPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Your updated status.\\"\\"\\"
  status: GithubUserStatus
}

\\"\\"\\"A single check annotation.\\"\\"\\"
type GithubCheckAnnotation {
  \\"\\"\\"The annotation's severity level.\\"\\"\\"
  annotationLevel: GithubCheckAnnotationLevel

  \\"\\"\\"The path to the file that this annotation was made on.\\"\\"\\"
  blobUrl: GithubURI!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The position of this annotation.\\"\\"\\"
  location: GithubCheckAnnotationSpan!

  \\"\\"\\"The annotation's message.\\"\\"\\"
  message: String!

  \\"\\"\\"The path that this annotation was made on.\\"\\"\\"
  path: String!

  \\"\\"\\"Additional information about the annotation.\\"\\"\\"
  rawDetails: String

  \\"\\"\\"The annotation's title\\"\\"\\"
  title: String
}

\\"\\"\\"The connection type for CheckAnnotation.\\"\\"\\"
type GithubCheckAnnotationConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCheckAnnotationEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCheckAnnotation]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Information from a check run analysis to specific lines of code.\\"\\"\\"
input GithubCheckAnnotationData {
  \\"\\"\\"Represents an annotation's information level\\"\\"\\"
  annotationLevel: GithubCheckAnnotationLevel!

  \\"\\"\\"The location of the annotation\\"\\"\\"
  location: GithubCheckAnnotationRange!

  \\"\\"\\"A short description of the feedback for these lines of code.\\"\\"\\"
  message: String!

  \\"\\"\\"The path of the file to add an annotation to.\\"\\"\\"
  path: String!

  \\"\\"\\"Details about this annotation.\\"\\"\\"
  rawDetails: String

  \\"\\"\\"The title that represents the annotation.\\"\\"\\"
  title: String
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCheckAnnotationEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCheckAnnotation
}

\\"\\"\\"Represents an annotation's information level.\\"\\"\\"
enum GithubCheckAnnotationLevel {
  \\"\\"\\"An annotation indicating an inescapable error.\\"\\"\\"
  FAILURE

  \\"\\"\\"An annotation indicating some information.\\"\\"\\"
  NOTICE

  \\"\\"\\"An annotation indicating an ignorable error.\\"\\"\\"
  WARNING
}

\\"\\"\\"A character position in a check annotation.\\"\\"\\"
type GithubCheckAnnotationPosition {
  \\"\\"\\"Column number (1 indexed).\\"\\"\\"
  column: Int

  \\"\\"\\"Line number (1 indexed).\\"\\"\\"
  line: Int!
}

\\"\\"\\"Information from a check run analysis to specific lines of code.\\"\\"\\"
input GithubCheckAnnotationRange {
  \\"\\"\\"The ending column of the range.\\"\\"\\"
  endColumn: Int

  \\"\\"\\"The ending line of the range.\\"\\"\\"
  endLine: Int!

  \\"\\"\\"The starting column of the range.\\"\\"\\"
  startColumn: Int

  \\"\\"\\"The starting line of the range.\\"\\"\\"
  startLine: Int!
}

\\"\\"\\"An inclusive pair of positions for a check annotation.\\"\\"\\"
type GithubCheckAnnotationSpan {
  \\"\\"\\"End position (inclusive).\\"\\"\\"
  end: GithubCheckAnnotationPosition!

  \\"\\"\\"Start position (inclusive).\\"\\"\\"
  start: GithubCheckAnnotationPosition!
}

\\"\\"\\"The possible states for a check suite or run conclusion.\\"\\"\\"
enum GithubCheckConclusionState {
  \\"\\"\\"The check suite or run requires action.\\"\\"\\"
  ACTION_REQUIRED

  \\"\\"\\"The check suite or run has been cancelled.\\"\\"\\"
  CANCELLED

  \\"\\"\\"The check suite or run has failed.\\"\\"\\"
  FAILURE

  \\"\\"\\"The check suite or run was neutral.\\"\\"\\"
  NEUTRAL

  \\"\\"\\"The check suite or run was skipped.\\"\\"\\"
  SKIPPED

  \\"\\"\\"
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  \\"\\"\\"
  STALE

  \\"\\"\\"The check suite or run has failed at startup.\\"\\"\\"
  STARTUP_FAILURE

  \\"\\"\\"The check suite or run has succeeded.\\"\\"\\"
  SUCCESS

  \\"\\"\\"The check suite or run has timed out.\\"\\"\\"
  TIMED_OUT
}

\\"\\"\\"A check run.\\"\\"\\"
type GithubCheckRun implements GithubNode & GithubRequirableByPullRequest & GithubUniformResourceLocatable {
  \\"\\"\\"The check run's annotations\\"\\"\\"
  annotations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCheckAnnotationConnection

  \\"\\"\\"The check suite that this run is a part of.\\"\\"\\"
  checkSuite: GithubCheckSuite!

  \\"\\"\\"Identifies the date and time when the check run was completed.\\"\\"\\"
  completedAt: GithubDateTime

  \\"\\"\\"The conclusion of the check run.\\"\\"\\"
  conclusion: GithubCheckConclusionState

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The corresponding deployment for this job, if any\\"\\"\\"
  deployment: GithubDeployment

  \\"\\"\\"
  The URL from which to find full details of the check run on the integrator's site.
  \\"\\"\\"
  detailsUrl: GithubURI

  \\"\\"\\"A reference for the check run on the integrator's system.\\"\\"\\"
  externalId: String
  id: ID!

  \\"\\"\\"
  Whether this is required to pass before merging for a specific pull request.
  \\"\\"\\"
  isRequired(
    \\"\\"\\"The id of the pull request this is required for\\"\\"\\"
    pullRequestId: ID

    \\"\\"\\"The number of the pull request this is required for\\"\\"\\"
    pullRequestNumber: Int
  ): Boolean!

  \\"\\"\\"The name of the check for this check run.\\"\\"\\"
  name: String!

  \\"\\"\\"Information about a pending deployment, if any, in this check run\\"\\"\\"
  pendingDeploymentRequest: GithubDeploymentRequest

  \\"\\"\\"The permalink to the check run summary.\\"\\"\\"
  permalink: GithubURI!

  \\"\\"\\"The repository associated with this check run.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this check run.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the check run was started.\\"\\"\\"
  startedAt: GithubDateTime

  \\"\\"\\"The current status of the check run.\\"\\"\\"
  status: GithubCheckStatusState!

  \\"\\"\\"The check run's steps\\"\\"\\"
  steps(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Step number\\"\\"\\"
    number: Int
  ): GithubCheckStepConnection

  \\"\\"\\"A string representing the check run's summary\\"\\"\\"
  summary: String

  \\"\\"\\"A string representing the check run's text\\"\\"\\"
  text: String

  \\"\\"\\"A string representing the check run\\"\\"\\"
  title: String

  \\"\\"\\"The HTTP URL for this check run.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Possible further actions the integrator can perform.\\"\\"\\"
input GithubCheckRunAction {
  \\"\\"\\"A short explanation of what this action would do.\\"\\"\\"
  description: String!

  \\"\\"\\"A reference for the action on the integrator's system. \\"\\"\\"
  identifier: String!

  \\"\\"\\"The text to be displayed on a button in the web UI.\\"\\"\\"
  label: String!
}

\\"\\"\\"The connection type for CheckRun.\\"\\"\\"
type GithubCheckRunConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCheckRunEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCheckRun]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCheckRunEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCheckRun
}

\\"\\"\\"The filters that are available when fetching check runs.\\"\\"\\"
input GithubCheckRunFilter {
  \\"\\"\\"Filters the check runs created by this application ID.\\"\\"\\"
  appId: Int

  \\"\\"\\"Filters the check runs by this name.\\"\\"\\"
  checkName: String

  \\"\\"\\"Filters the check runs by this type.\\"\\"\\"
  checkType: GithubCheckRunType

  \\"\\"\\"Filters the check runs by this status.\\"\\"\\"
  status: GithubCheckStatusState
}

\\"\\"\\"Descriptive details about the check run.\\"\\"\\"
input GithubCheckRunOutput {
  \\"\\"\\"The annotations that are made as part of the check run.\\"\\"\\"
  annotations: [GithubCheckAnnotationData!]

  \\"\\"\\"
  Images attached to the check run output displayed in the GitHub pull request UI.
  \\"\\"\\"
  images: [GithubCheckRunOutputImage!]

  \\"\\"\\"The summary of the check run (supports Commonmark).\\"\\"\\"
  summary: String!

  \\"\\"\\"The details of the check run (supports Commonmark).\\"\\"\\"
  text: String

  \\"\\"\\"A title to provide for this check run.\\"\\"\\"
  title: String!
}

\\"\\"\\"
Images attached to the check run output displayed in the GitHub pull request UI.
\\"\\"\\"
input GithubCheckRunOutputImage {
  \\"\\"\\"The alternative text for the image.\\"\\"\\"
  alt: String!

  \\"\\"\\"A short image description.\\"\\"\\"
  caption: String

  \\"\\"\\"The full URL of the image.\\"\\"\\"
  imageUrl: GithubURI!
}

\\"\\"\\"The possible types of check runs.\\"\\"\\"
enum GithubCheckRunType {
  \\"\\"\\"Every check run available.\\"\\"\\"
  ALL

  \\"\\"\\"The latest check run.\\"\\"\\"
  LATEST
}

\\"\\"\\"The possible states for a check suite or run status.\\"\\"\\"
enum GithubCheckStatusState {
  \\"\\"\\"The check suite or run has been completed.\\"\\"\\"
  COMPLETED

  \\"\\"\\"The check suite or run is in progress.\\"\\"\\"
  IN_PROGRESS

  \\"\\"\\"The check suite or run is in pending state.\\"\\"\\"
  PENDING

  \\"\\"\\"The check suite or run has been queued.\\"\\"\\"
  QUEUED

  \\"\\"\\"The check suite or run has been requested.\\"\\"\\"
  REQUESTED

  \\"\\"\\"The check suite or run is in waiting state.\\"\\"\\"
  WAITING
}

\\"\\"\\"A single check step.\\"\\"\\"
type GithubCheckStep {
  \\"\\"\\"Identifies the date and time when the check step was completed.\\"\\"\\"
  completedAt: GithubDateTime

  \\"\\"\\"The conclusion of the check step.\\"\\"\\"
  conclusion: GithubCheckConclusionState

  \\"\\"\\"A reference for the check step on the integrator's system.\\"\\"\\"
  externalId: String

  \\"\\"\\"The step's name.\\"\\"\\"
  name: String!

  \\"\\"\\"The index of the step in the list of steps of the parent check run.\\"\\"\\"
  number: Int!

  \\"\\"\\"Number of seconds to completion.\\"\\"\\"
  secondsToCompletion: Int

  \\"\\"\\"Identifies the date and time when the check step was started.\\"\\"\\"
  startedAt: GithubDateTime

  \\"\\"\\"The current status of the check step.\\"\\"\\"
  status: GithubCheckStatusState!
}

\\"\\"\\"The connection type for CheckStep.\\"\\"\\"
type GithubCheckStepConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCheckStepEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCheckStep]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCheckStepEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCheckStep
}

\\"\\"\\"A check suite.\\"\\"\\"
type GithubCheckSuite implements GithubNode {
  \\"\\"\\"The GitHub App which created this check suite.\\"\\"\\"
  app: GithubApp

  \\"\\"\\"The name of the branch for this check suite.\\"\\"\\"
  branch: GithubRef

  \\"\\"\\"The check runs associated with a check suite.\\"\\"\\"
  checkRuns(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Filters the check runs by this type.\\"\\"\\"
    filterBy: GithubCheckRunFilter

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCheckRunConnection

  \\"\\"\\"The commit for this check suite\\"\\"\\"
  commit: GithubCommit!

  \\"\\"\\"The conclusion of this check suite.\\"\\"\\"
  conclusion: GithubCheckConclusionState

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The user who triggered the check suite.\\"\\"\\"
  creator: GithubUser

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"A list of open pull requests matching the check suite.\\"\\"\\"
  matchingPullRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"The base ref name to filter the pull requests by.\\"\\"\\"
    baseRefName: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"The head ref name to filter the pull requests by.\\"\\"\\"
    headRefName: String

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for pull requests returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the pull requests by.\\"\\"\\"
    states: [GithubPullRequestState!]
  ): GithubPullRequestConnection

  \\"\\"\\"The push that triggered this check suite.\\"\\"\\"
  push: GithubPush

  \\"\\"\\"The repository associated with this check suite.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this check suite\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The status of this check suite.\\"\\"\\"
  status: GithubCheckStatusState!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this check suite\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"The workflow run associated with this check suite.\\"\\"\\"
  workflowRun: GithubWorkflowRun
}

\\"\\"\\"The auto-trigger preferences that are available for check suites.\\"\\"\\"
input GithubCheckSuiteAutoTriggerPreference {
  \\"\\"\\"The node ID of the application that owns the check suite.\\"\\"\\"
  appId: ID!

  \\"\\"\\"
  Set to \`true\` to enable automatic creation of CheckSuite events upon pushes to the repository.
  \\"\\"\\"
  setting: Boolean!
}

\\"\\"\\"The connection type for CheckSuite.\\"\\"\\"
type GithubCheckSuiteConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCheckSuiteEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCheckSuite]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCheckSuiteEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCheckSuite
}

\\"\\"\\"The filters that are available when fetching check suites.\\"\\"\\"
input GithubCheckSuiteFilter {
  \\"\\"\\"Filters the check suites created by this application ID.\\"\\"\\"
  appId: Int

  \\"\\"\\"Filters the check suites by this name.\\"\\"\\"
  checkName: String
}

\\"\\"\\"Autogenerated input type of ClearLabelsFromLabelable\\"\\"\\"
input GithubClearLabelsFromLabelableInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the labelable object to clear the labels from.\\"\\"\\"
  labelableId: ID!
}

\\"\\"\\"Autogenerated return type of ClearLabelsFromLabelable\\"\\"\\"
type GithubClearLabelsFromLabelablePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The item that was unlabeled.\\"\\"\\"
  labelable: GithubLabelable
}

\\"\\"\\"Autogenerated input type of CloneProject\\"\\"\\"
input GithubCloneProjectInput {
  \\"\\"\\"The description of the project.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Whether or not to clone the source project's workflows.\\"\\"\\"
  includeWorkflows: Boolean!

  \\"\\"\\"The name of the project.\\"\\"\\"
  name: String!

  \\"\\"\\"The visibility of the project, defaults to false (private).\\"\\"\\"
  public: Boolean

  \\"\\"\\"The source project to clone.\\"\\"\\"
  sourceId: ID!

  \\"\\"\\"The owner ID to create the project under.\\"\\"\\"
  targetOwnerId: ID!
}

\\"\\"\\"Autogenerated return type of CloneProject\\"\\"\\"
type GithubCloneProjectPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the JobStatus for populating cloned fields.\\"\\"\\"
  jobStatusId: String

  \\"\\"\\"The new cloned project.\\"\\"\\"
  project: GithubProject
}

\\"\\"\\"Autogenerated input type of CloneTemplateRepository\\"\\"\\"
input GithubCloneTemplateRepositoryInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"A short description of the new repository.\\"\\"\\"
  description: String

  \\"\\"\\"
  Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
  \\"\\"\\"
  includeAllBranches: Boolean = false

  \\"\\"\\"The name of the new repository.\\"\\"\\"
  name: String!

  \\"\\"\\"The ID of the owner for the new repository.\\"\\"\\"
  ownerId: ID!

  \\"\\"\\"The Node ID of the template repository.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"Indicates the repository's visibility level.\\"\\"\\"
  visibility: GithubRepositoryVisibility!
}

\\"\\"\\"Autogenerated return type of CloneTemplateRepository\\"\\"\\"
type GithubCloneTemplateRepositoryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new repository.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"An object that can be closed\\"\\"\\"
interface GithubClosable {
  \\"\\"\\"
  \`true\` if the object is closed (definition of closed may depend on type)
  \\"\\"\\"
  closed: Boolean!

  \\"\\"\\"Identifies the date and time when the object was closed.\\"\\"\\"
  closedAt: GithubDateTime
}

\\"\\"\\"Autogenerated input type of CloseIssue\\"\\"\\"
input GithubCloseIssueInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the issue to be closed.\\"\\"\\"
  issueId: ID!
}

\\"\\"\\"Autogenerated return type of CloseIssue\\"\\"\\"
type GithubCloseIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The issue that was closed.\\"\\"\\"
  issue: GithubIssue
}

\\"\\"\\"Autogenerated input type of ClosePullRequest\\"\\"\\"
input GithubClosePullRequestInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the pull request to be closed.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of ClosePullRequest\\"\\"\\"
type GithubClosePullRequestPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request that was closed.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Represents a 'closed' event on any \`Closable\`.\\"\\"\\"
type GithubClosedEvent implements GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Object that was closed.\\"\\"\\"
  closable: GithubClosable!

  \\"\\"\\"Object which triggered the creation of this event.\\"\\"\\"
  closer: GithubCloser

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"The HTTP path for this closed event.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this closed event.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The object which triggered a \`ClosedEvent\`.\\"\\"\\"
union GithubCloser = GithubCommit | GithubPullRequest

\\"\\"\\"The Code of Conduct for a repository\\"\\"\\"
type GithubCodeOfConduct implements GithubNode {
  \\"\\"\\"The body of the Code of Conduct\\"\\"\\"
  body: String
  id: ID!

  \\"\\"\\"The key for the Code of Conduct\\"\\"\\"
  key: String!

  \\"\\"\\"The formal name of the Code of Conduct\\"\\"\\"
  name: String!

  \\"\\"\\"The HTTP path for this Code of Conduct\\"\\"\\"
  resourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this Code of Conduct\\"\\"\\"
  url: GithubURI
}

\\"\\"\\"Collaborators affiliation level with a subject.\\"\\"\\"
enum GithubCollaboratorAffiliation {
  \\"\\"\\"All collaborators the authenticated user can see.\\"\\"\\"
  ALL

  \\"\\"\\"
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  \\"\\"\\"
  DIRECT

  \\"\\"\\"All outside collaborators of an organization-owned subject.\\"\\"\\"
  OUTSIDE
}

\\"\\"\\"Represents a comment.\\"\\"\\"
interface GithubComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"The body as Markdown.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!
}

\\"\\"\\"A comment author association with repository.\\"\\"\\"
enum GithubCommentAuthorAssociation {
  \\"\\"\\"Author has been invited to collaborate on the repository.\\"\\"\\"
  COLLABORATOR

  \\"\\"\\"Author has previously committed to the repository.\\"\\"\\"
  CONTRIBUTOR

  \\"\\"\\"Author has not previously committed to GitHub.\\"\\"\\"
  FIRST_TIMER

  \\"\\"\\"Author has not previously committed to the repository.\\"\\"\\"
  FIRST_TIME_CONTRIBUTOR

  \\"\\"\\"Author is a placeholder for an unclaimed user.\\"\\"\\"
  MANNEQUIN

  \\"\\"\\"Author is a member of the organization that owns the repository.\\"\\"\\"
  MEMBER

  \\"\\"\\"Author has no association with the repository.\\"\\"\\"
  NONE

  \\"\\"\\"Author is the owner of the repository.\\"\\"\\"
  OWNER
}

\\"\\"\\"The possible errors that will prevent a user from updating a comment.\\"\\"\\"
enum GithubCommentCannotUpdateReason {
  \\"\\"\\"Unable to create comment because repository is archived.\\"\\"\\"
  ARCHIVED

  \\"\\"\\"You cannot update this comment\\"\\"\\"
  DENIED

  \\"\\"\\"
  You must be the author or have write access to this repository to update this comment.
  \\"\\"\\"
  INSUFFICIENT_ACCESS

  \\"\\"\\"Unable to create comment because issue is locked.\\"\\"\\"
  LOCKED

  \\"\\"\\"You must be logged in to update this comment.\\"\\"\\"
  LOGIN_REQUIRED

  \\"\\"\\"Repository is under maintenance.\\"\\"\\"
  MAINTENANCE

  \\"\\"\\"At least one email address must be verified to update this comment.\\"\\"\\"
  VERIFIED_EMAIL_REQUIRED
}

\\"\\"\\"Represents a 'comment_deleted' event on a given issue or pull request.\\"\\"\\"
type GithubCommentDeletedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The user who authored the deleted comment.\\"\\"\\"
  deletedCommentAuthor: GithubActor
  id: ID!
}

\\"\\"\\"Represents a Git commit.\\"\\"\\"
type GithubCommit implements GithubGitObject & GithubNode & GithubSubscribable & GithubUniformResourceLocatable {
  \\"\\"\\"An abbreviated version of the Git object ID\\"\\"\\"
  abbreviatedOid: String!

  \\"\\"\\"The number of additions in this commit.\\"\\"\\"
  additions: Int!

  \\"\\"\\"
  The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit
  \\"\\"\\"
  associatedPullRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for pull requests.\\"\\"\\"
    orderBy: GithubPullRequestOrder = {direction: ASC, field: CREATED_AT}
  ): GithubPullRequestConnection

  \\"\\"\\"Authorship details of the commit.\\"\\"\\"
  author: GithubGitActor

  \\"\\"\\"Check if the committer and the author match.\\"\\"\\"
  authoredByCommitter: Boolean!

  \\"\\"\\"The datetime when this commit was authored.\\"\\"\\"
  authoredDate: GithubDateTime!

  \\"\\"\\"
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  
  \\"\\"\\"
  authors(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubGitActorConnection!

  \\"\\"\\"Fetches \`git blame\` information.\\"\\"\\"
  blame(
    \\"\\"\\"The file whose Git blame information you want.\\"\\"\\"
    path: String!
  ): GithubBlame!

  \\"\\"\\"The number of changed files in this commit.\\"\\"\\"
  changedFiles: Int!

  \\"\\"\\"The check suites associated with a commit.\\"\\"\\"
  checkSuites(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Filters the check suites by this type.\\"\\"\\"
    filterBy: GithubCheckSuiteFilter

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCheckSuiteConnection

  \\"\\"\\"Comments made on the commit.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCommitCommentConnection!

  \\"\\"\\"The HTTP path for this Git object\\"\\"\\"
  commitResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this Git object\\"\\"\\"
  commitUrl: GithubURI!

  \\"\\"\\"The datetime when this commit was committed.\\"\\"\\"
  committedDate: GithubDateTime!

  \\"\\"\\"Check if committed via GitHub web UI.\\"\\"\\"
  committedViaWeb: Boolean!

  \\"\\"\\"Committer details of the commit.\\"\\"\\"
  committer: GithubGitActor

  \\"\\"\\"The number of deletions in this commit.\\"\\"\\"
  deletions: Int!

  \\"\\"\\"The deployments associated with a commit.\\"\\"\\"
  deployments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Environments to list deployments for\\"\\"\\"
    environments: [String!]

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for deployments returned from the connection.\\"\\"\\"
    orderBy: GithubDeploymentOrder = {direction: ASC, field: CREATED_AT}
  ): GithubDeploymentConnection

  \\"\\"\\"The tree entry representing the file located at the given path.\\"\\"\\"
  file(
    \\"\\"\\"The path for the file\\"\\"\\"
    path: String!
  ): GithubTreeEntry

  \\"\\"\\"
  The linear commit history starting from (and including) this commit, in the same order as \`git log\`.
  \\"\\"\\"
  history(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    If non-null, filters history to only show commits with matching authorship.
    \\"\\"\\"
    author: GithubCommitAuthor

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    If non-null, filters history to only show commits touching files under this path.
    \\"\\"\\"
    path: String

    \\"\\"\\"Allows specifying a beginning time or date for fetching commits.\\"\\"\\"
    since: GithubGitTimestamp

    \\"\\"\\"Allows specifying an ending time or date for fetching commits.\\"\\"\\"
    until: GithubGitTimestamp
  ): GithubCommitHistoryConnection!
  id: ID!

  \\"\\"\\"The Git commit message\\"\\"\\"
  message: String!

  \\"\\"\\"The Git commit message body\\"\\"\\"
  messageBody: String!

  \\"\\"\\"The commit message body rendered to HTML.\\"\\"\\"
  messageBodyHTML: GithubHTML!

  \\"\\"\\"The Git commit message headline\\"\\"\\"
  messageHeadline: String!

  \\"\\"\\"The commit message headline rendered to HTML.\\"\\"\\"
  messageHeadlineHTML: GithubHTML!

  \\"\\"\\"The Git object ID\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The organization this commit was made on behalf of.\\"\\"\\"
  onBehalfOf: GithubOrganization

  \\"\\"\\"The parents of a commit.\\"\\"\\"
  parents(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCommitConnection!

  \\"\\"\\"The datetime when this commit was pushed.\\"\\"\\"
  pushedDate: GithubDateTime

  \\"\\"\\"The Repository this commit belongs to\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this commit\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Commit signing information, if present.\\"\\"\\"
  signature: GithubGitSignature

  \\"\\"\\"Status information for this commit\\"\\"\\"
  status: GithubStatus

  \\"\\"\\"Check and Status rollup information for this commit.\\"\\"\\"
  statusCheckRollup: GithubStatusCheckRollup

  \\"\\"\\"
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  \\"\\"\\"
  submodules(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubSubmoduleConnection!

  \\"\\"\\"
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  \\"\\"\\"
  tarballUrl: GithubURI!

  \\"\\"\\"Commit's root Tree\\"\\"\\"
  tree: GithubTree!

  \\"\\"\\"The HTTP path for the tree of this commit\\"\\"\\"
  treeResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for the tree of this commit\\"\\"\\"
  treeUrl: GithubURI!

  \\"\\"\\"The HTTP URL for this commit\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState

  \\"\\"\\"
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  \\"\\"\\"
  zipballUrl: GithubURI!
}

\\"\\"\\"Specifies an author for filtering Git commits.\\"\\"\\"
input GithubCommitAuthor {
  \\"\\"\\"
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  \\"\\"\\"
  emails: [String!]

  \\"\\"\\"
  ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
  \\"\\"\\"
  id: ID
}

\\"\\"\\"Represents a comment on a given Commit.\\"\\"\\"
type GithubCommitComment implements GithubComment & GithubDeletable & GithubMinimizable & GithubNode & GithubReactable & GithubRepositoryNode & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"Identifies the comment body.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"
  Identifies the commit associated with the comment, if the commit exists.
  \\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"Returns whether or not a comment has been minimized.\\"\\"\\"
  isMinimized: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Returns why the comment was minimized.\\"\\"\\"
  minimizedReason: String

  \\"\\"\\"Identifies the file path associated with the comment.\\"\\"\\"
  path: String

  \\"\\"\\"Identifies the line position associated with the comment.\\"\\"\\"
  position: Int

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path permalink for this commit comment.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL permalink for this commit comment.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Check if the current viewer can minimize this object.\\"\\"\\"
  viewerCanMinimize: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!
}

\\"\\"\\"The connection type for CommitComment.\\"\\"\\"
type GithubCommitCommentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCommitCommentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCommitComment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCommitCommentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCommitComment
}

\\"\\"\\"A thread of comments on a commit.\\"\\"\\"
type GithubCommitCommentThread implements GithubNode & GithubRepositoryNode {
  \\"\\"\\"The comments that exist in this thread.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCommitCommentConnection!

  \\"\\"\\"The commit the comments were made on.\\"\\"\\"
  commit: GithubCommit
  id: ID!

  \\"\\"\\"The file the comments were made on.\\"\\"\\"
  path: String

  \\"\\"\\"The position in the diff for the commit that the comment was made on.\\"\\"\\"
  position: Int

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"The connection type for Commit.\\"\\"\\"
type GithubCommitConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCommitEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCommit]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Ordering options for commit contribution connections.\\"\\"\\"
input GithubCommitContributionOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field by which to order commit contributions.\\"\\"\\"
  field: GithubCommitContributionOrderField!
}

\\"\\"\\"Properties by which commit contribution connections can be ordered.\\"\\"\\"
enum GithubCommitContributionOrderField {
  \\"\\"\\"Order commit contributions by how many commits they represent.\\"\\"\\"
  COMMIT_COUNT

  \\"\\"\\"Order commit contributions by when they were made.\\"\\"\\"
  OCCURRED_AT
}

\\"\\"\\"This aggregates commits made by a user within one repository.\\"\\"\\"
type GithubCommitContributionsByRepository {
  \\"\\"\\"The commit contributions, each representing a day.\\"\\"\\"
  contributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for commit contributions returned from the connection.
    \\"\\"\\"
    orderBy: GithubCommitContributionOrder = {direction: DESC, field: OCCURRED_AT}
  ): GithubCreatedCommitContributionConnection!

  \\"\\"\\"The repository in which the commits were made.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"
  The HTTP path for the user's commits to the repository in this time range.
  \\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"
  The HTTP URL for the user's commits to the repository in this time range.
  \\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCommitEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCommit
}

\\"\\"\\"The connection type for Commit.\\"\\"\\"
type GithubCommitHistoryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCommitEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCommit]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a 'connected' event on a given issue or pull request.\\"\\"\\"
type GithubConnectedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Reference originated in a different repository.\\"\\"\\"
  isCrossRepository: Boolean!

  \\"\\"\\"Issue or pull request that made the reference.\\"\\"\\"
  source: GithubReferencedSubject!

  \\"\\"\\"Issue or pull request which was connected.\\"\\"\\"
  subject: GithubReferencedSubject!
}

\\"\\"\\"
Represents a contribution a user made on GitHub, such as opening an issue.
\\"\\"\\"
interface GithubContribution {
  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"A calendar of contributions made on GitHub by a user.\\"\\"\\"
type GithubContributionCalendar {
  \\"\\"\\"
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  \\"\\"\\"
  colors: [String!]!

  \\"\\"\\"
  Determine if the color set was chosen because it's currently Halloween.
  \\"\\"\\"
  isHalloween: Boolean!

  \\"\\"\\"A list of the months of contributions in this calendar.\\"\\"\\"
  months: [GithubContributionCalendarMonth!]!

  \\"\\"\\"The count of total contributions in the calendar.\\"\\"\\"
  totalContributions: Int!

  \\"\\"\\"A list of the weeks of contributions in this calendar.\\"\\"\\"
  weeks: [GithubContributionCalendarWeek!]!
}

\\"\\"\\"Represents a single day of contributions on GitHub by a user.\\"\\"\\"
type GithubContributionCalendarDay {
  \\"\\"\\"
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  \\"\\"\\"
  color: String!

  \\"\\"\\"How many contributions were made by the user on this day.\\"\\"\\"
  contributionCount: Int!

  \\"\\"\\"
  Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar.
  \\"\\"\\"
  contributionLevel: GithubContributionLevel!

  \\"\\"\\"The day this square represents.\\"\\"\\"
  date: GithubDate!

  \\"\\"\\"
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  \\"\\"\\"
  weekday: Int!
}

\\"\\"\\"A month of contributions in a user's contribution graph.\\"\\"\\"
type GithubContributionCalendarMonth {
  \\"\\"\\"The date of the first day of this month.\\"\\"\\"
  firstDay: GithubDate!

  \\"\\"\\"The name of the month.\\"\\"\\"
  name: String!

  \\"\\"\\"How many weeks started in this month.\\"\\"\\"
  totalWeeks: Int!

  \\"\\"\\"The year the month occurred in.\\"\\"\\"
  year: Int!
}

\\"\\"\\"A week of contributions in a user's contribution graph.\\"\\"\\"
type GithubContributionCalendarWeek {
  \\"\\"\\"The days of contributions in this week.\\"\\"\\"
  contributionDays: [GithubContributionCalendarDay!]!

  \\"\\"\\"The date of the earliest square in this week.\\"\\"\\"
  firstDay: GithubDate!
}

\\"\\"\\"Varying levels of contributions from none to many.\\"\\"\\"
enum GithubContributionLevel {
  \\"\\"\\"Lowest 25% of days of contributions.\\"\\"\\"
  FIRST_QUARTILE

  \\"\\"\\"
  Highest 25% of days of contributions. More contributions than the third quartile.
  \\"\\"\\"
  FOURTH_QUARTILE

  \\"\\"\\"No contributions occurred.\\"\\"\\"
  NONE

  \\"\\"\\"
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  \\"\\"\\"
  SECOND_QUARTILE

  \\"\\"\\"
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  \\"\\"\\"
  THIRD_QUARTILE
}

\\"\\"\\"Ordering options for contribution connections.\\"\\"\\"
input GithubContributionOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!
}

\\"\\"\\"
A contributions collection aggregates contributions such as opened issues and commits created by a user.
\\"\\"\\"
type GithubContributionsCollection {
  \\"\\"\\"Commit contributions made by the user, grouped by repository.\\"\\"\\"
  commitContributionsByRepository(
    \\"\\"\\"How many repositories should be included.\\"\\"\\"
    maxRepositories: Int = 25
  ): [GithubCommitContributionsByRepository!]!

  \\"\\"\\"A calendar of this user's contributions on GitHub.\\"\\"\\"
  contributionCalendar: GithubContributionCalendar!

  \\"\\"\\"
  The years the user has been making contributions with the most recent year first.
  \\"\\"\\"
  contributionYears: [Int!]!

  \\"\\"\\"
  Determine if this collection's time span ends in the current month.
  
  \\"\\"\\"
  doesEndInCurrentMonth: Boolean!

  \\"\\"\\"
  The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
  \\"\\"\\"
  earliestRestrictedContributionDate: GithubDate

  \\"\\"\\"The ending date and time of this collection.\\"\\"\\"
  endedAt: GithubDateTime!

  \\"\\"\\"
  The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
  \\"\\"\\"
  firstIssueContribution: GithubCreatedIssueOrRestrictedContribution

  \\"\\"\\"
  The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
  \\"\\"\\"
  firstPullRequestContribution: GithubCreatedPullRequestOrRestrictedContribution

  \\"\\"\\"
  The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
  \\"\\"\\"
  firstRepositoryContribution: GithubCreatedRepositoryOrRestrictedContribution

  \\"\\"\\"
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  \\"\\"\\"
  hasActivityInThePast: Boolean!

  \\"\\"\\"Determine if there are any contributions in this collection.\\"\\"\\"
  hasAnyContributions: Boolean!

  \\"\\"\\"
  Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
  \\"\\"\\"
  hasAnyRestrictedContributions: Boolean!

  \\"\\"\\"Whether or not the collector's time span is all within the same day.\\"\\"\\"
  isSingleDay: Boolean!

  \\"\\"\\"A list of issues the user opened.\\"\\"\\"
  issueContributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Should the user's first issue ever be excluded from the result.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"Should the user's most commented issue be excluded from the result.\\"\\"\\"
    excludePopular: Boolean = false

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for contributions returned from the connection.\\"\\"\\"
    orderBy: GithubContributionOrder = {direction: DESC}
  ): GithubCreatedIssueContributionConnection!

  \\"\\"\\"Issue contributions made by the user, grouped by repository.\\"\\"\\"
  issueContributionsByRepository(
    \\"\\"\\"Should the user's first issue ever be excluded from the result.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"Should the user's most commented issue be excluded from the result.\\"\\"\\"
    excludePopular: Boolean = false

    \\"\\"\\"How many repositories should be included.\\"\\"\\"
    maxRepositories: Int = 25
  ): [GithubIssueContributionsByRepository!]!

  \\"\\"\\"
  When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
  \\"\\"\\"
  joinedGitHubContribution: GithubJoinedGitHubContribution

  \\"\\"\\"
  The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
  \\"\\"\\"
  latestRestrictedContributionDate: GithubDate

  \\"\\"\\"
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  
  \\"\\"\\"
  mostRecentCollectionWithActivity: GithubContributionsCollection

  \\"\\"\\"
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  
  \\"\\"\\"
  mostRecentCollectionWithoutActivity: GithubContributionsCollection

  \\"\\"\\"
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  
  \\"\\"\\"
  popularIssueContribution: GithubCreatedIssueContribution

  \\"\\"\\"
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  
  \\"\\"\\"
  popularPullRequestContribution: GithubCreatedPullRequestContribution

  \\"\\"\\"Pull request contributions made by the user.\\"\\"\\"
  pullRequestContributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Should the user's first pull request ever be excluded from the result.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"
    Should the user's most commented pull request be excluded from the result.
    \\"\\"\\"
    excludePopular: Boolean = false

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for contributions returned from the connection.\\"\\"\\"
    orderBy: GithubContributionOrder = {direction: DESC}
  ): GithubCreatedPullRequestContributionConnection!

  \\"\\"\\"Pull request contributions made by the user, grouped by repository.\\"\\"\\"
  pullRequestContributionsByRepository(
    \\"\\"\\"Should the user's first pull request ever be excluded from the result.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"
    Should the user's most commented pull request be excluded from the result.
    \\"\\"\\"
    excludePopular: Boolean = false

    \\"\\"\\"How many repositories should be included.\\"\\"\\"
    maxRepositories: Int = 25
  ): [GithubPullRequestContributionsByRepository!]!

  \\"\\"\\"Pull request review contributions made by the user.\\"\\"\\"
  pullRequestReviewContributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for contributions returned from the connection.\\"\\"\\"
    orderBy: GithubContributionOrder = {direction: DESC}
  ): GithubCreatedPullRequestReviewContributionConnection!

  \\"\\"\\"
  Pull request review contributions made by the user, grouped by repository.
  \\"\\"\\"
  pullRequestReviewContributionsByRepository(
    \\"\\"\\"How many repositories should be included.\\"\\"\\"
    maxRepositories: Int = 25
  ): [GithubPullRequestReviewContributionsByRepository!]!

  \\"\\"\\"
  A list of repositories owned by the user that the user created in this time range.
  \\"\\"\\"
  repositoryContributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Should the user's first repository ever be excluded from the result.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for contributions returned from the connection.\\"\\"\\"
    orderBy: GithubContributionOrder = {direction: DESC}
  ): GithubCreatedRepositoryContributionConnection!

  \\"\\"\\"
  A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
  \\"\\"\\"
  restrictedContributionsCount: Int!

  \\"\\"\\"The beginning date and time of this collection.\\"\\"\\"
  startedAt: GithubDateTime!

  \\"\\"\\"How many commits were made by the user in this time span.\\"\\"\\"
  totalCommitContributions: Int!

  \\"\\"\\"How many issues the user opened.\\"\\"\\"
  totalIssueContributions(
    \\"\\"\\"Should the user's first issue ever be excluded from this count.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"Should the user's most commented issue be excluded from this count.\\"\\"\\"
    excludePopular: Boolean = false
  ): Int!

  \\"\\"\\"How many pull requests the user opened.\\"\\"\\"
  totalPullRequestContributions(
    \\"\\"\\"Should the user's first pull request ever be excluded from this count.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"
    Should the user's most commented pull request be excluded from this count.
    \\"\\"\\"
    excludePopular: Boolean = false
  ): Int!

  \\"\\"\\"How many pull request reviews the user left.\\"\\"\\"
  totalPullRequestReviewContributions: Int!

  \\"\\"\\"How many different repositories the user committed to.\\"\\"\\"
  totalRepositoriesWithContributedCommits: Int!

  \\"\\"\\"How many different repositories the user opened issues in.\\"\\"\\"
  totalRepositoriesWithContributedIssues(
    \\"\\"\\"Should the user's first issue ever be excluded from this count.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"Should the user's most commented issue be excluded from this count.\\"\\"\\"
    excludePopular: Boolean = false
  ): Int!

  \\"\\"\\"How many different repositories the user left pull request reviews in.\\"\\"\\"
  totalRepositoriesWithContributedPullRequestReviews: Int!

  \\"\\"\\"How many different repositories the user opened pull requests in.\\"\\"\\"
  totalRepositoriesWithContributedPullRequests(
    \\"\\"\\"Should the user's first pull request ever be excluded from this count.\\"\\"\\"
    excludeFirst: Boolean = false

    \\"\\"\\"
    Should the user's most commented pull request be excluded from this count.
    \\"\\"\\"
    excludePopular: Boolean = false
  ): Int!

  \\"\\"\\"How many repositories the user created.\\"\\"\\"
  totalRepositoryContributions(
    \\"\\"\\"Should the user's first repository ever be excluded from this count.\\"\\"\\"
    excludeFirst: Boolean = false
  ): Int!

  \\"\\"\\"The user who made the contributions in this collection.\\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"Autogenerated input type of ConvertProjectCardNoteToIssue\\"\\"\\"
input GithubConvertProjectCardNoteToIssueInput {
  \\"\\"\\"The body of the newly created issue.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ProjectCard ID to convert.\\"\\"\\"
  projectCardId: ID!

  \\"\\"\\"The ID of the repository to create the issue in.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"
  The title of the newly created issue. Defaults to the card's note text.
  \\"\\"\\"
  title: String
}

\\"\\"\\"Autogenerated return type of ConvertProjectCardNoteToIssue\\"\\"\\"
type GithubConvertProjectCardNoteToIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated ProjectCard.\\"\\"\\"
  projectCard: GithubProjectCard
}

\\"\\"\\"Autogenerated input type of ConvertPullRequestToDraft\\"\\"\\"
input GithubConvertPullRequestToDraftInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the pull request to convert to draft\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of ConvertPullRequestToDraft\\"\\"\\"
type GithubConvertPullRequestToDraftPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request that is now a draft.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Represents a 'convert_to_draft' event on a given pull request.\\"\\"\\"
type GithubConvertToDraftEvent implements GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The HTTP path for this convert to draft event.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this convert to draft event.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"
Represents a 'converted_note_to_issue' event on a given issue or pull request.
\\"\\"\\"
type GithubConvertedNoteToIssueEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!
}

\\"\\"\\"Autogenerated input type of CreateBranchProtectionRule\\"\\"\\"
input GithubCreateBranchProtectionRuleInput {
  \\"\\"\\"Can this branch be deleted.\\"\\"\\"
  allowsDeletions: Boolean

  \\"\\"\\"Are force pushes allowed on this branch.\\"\\"\\"
  allowsForcePushes: Boolean

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Will new commits pushed to matching branches dismiss pull request review approvals.
  \\"\\"\\"
  dismissesStaleReviews: Boolean

  \\"\\"\\"Can admins overwrite branch protection.\\"\\"\\"
  isAdminEnforced: Boolean

  \\"\\"\\"The glob-like pattern used to determine matching branches.\\"\\"\\"
  pattern: String!

  \\"\\"\\"A list of User, Team or App IDs allowed to push to matching branches.\\"\\"\\"
  pushActorIds: [ID!]

  \\"\\"\\"
  The global relay id of the repository in which a new branch protection rule should be created in.
  \\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"Number of approving reviews required to update matching branches.\\"\\"\\"
  requiredApprovingReviewCount: Int

  \\"\\"\\"
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  \\"\\"\\"
  requiredStatusCheckContexts: [String!]

  \\"\\"\\"Are approving reviews required to update matching branches.\\"\\"\\"
  requiresApprovingReviews: Boolean

  \\"\\"\\"Are reviews from code owners required to update matching branches.\\"\\"\\"
  requiresCodeOwnerReviews: Boolean

  \\"\\"\\"Are commits required to be signed.\\"\\"\\"
  requiresCommitSignatures: Boolean

  \\"\\"\\"Are merge commits prohibited from being pushed to this branch.\\"\\"\\"
  requiresLinearHistory: Boolean

  \\"\\"\\"Are status checks required to update matching branches.\\"\\"\\"
  requiresStatusChecks: Boolean

  \\"\\"\\"Are branches required to be up to date before merging.\\"\\"\\"
  requiresStrictStatusChecks: Boolean

  \\"\\"\\"Is pushing to matching branches restricted.\\"\\"\\"
  restrictsPushes: Boolean

  \\"\\"\\"Is dismissal of pull request reviews restricted.\\"\\"\\"
  restrictsReviewDismissals: Boolean

  \\"\\"\\"
  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  \\"\\"\\"
  reviewDismissalActorIds: [ID!]
}

\\"\\"\\"Autogenerated return type of CreateBranchProtectionRule\\"\\"\\"
type GithubCreateBranchProtectionRulePayload {
  \\"\\"\\"The newly created BranchProtectionRule.\\"\\"\\"
  branchProtectionRule: GithubBranchProtectionRule

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of CreateCheckRun\\"\\"\\"
input GithubCreateCheckRunInput {
  \\"\\"\\"
  Possible further actions the integrator can perform, which a user may trigger.
  \\"\\"\\"
  actions: [GithubCheckRunAction!]

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The time that the check run finished.\\"\\"\\"
  completedAt: GithubDateTime

  \\"\\"\\"The final conclusion of the check.\\"\\"\\"
  conclusion: GithubCheckConclusionState

  \\"\\"\\"
  The URL of the integrator's site that has the full details of the check.
  \\"\\"\\"
  detailsUrl: GithubURI

  \\"\\"\\"A reference for the run on the integrator's system.\\"\\"\\"
  externalId: String

  \\"\\"\\"The SHA of the head commit.\\"\\"\\"
  headSha: GithubGitObjectID!

  \\"\\"\\"The name of the check.\\"\\"\\"
  name: String!

  \\"\\"\\"Descriptive details about the run.\\"\\"\\"
  output: GithubCheckRunOutput

  \\"\\"\\"The node ID of the repository.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"The time that the check run began.\\"\\"\\"
  startedAt: GithubDateTime

  \\"\\"\\"The current status.\\"\\"\\"
  status: GithubRequestableCheckStatusState
}

\\"\\"\\"Autogenerated return type of CreateCheckRun\\"\\"\\"
type GithubCreateCheckRunPayload {
  \\"\\"\\"The newly created check run.\\"\\"\\"
  checkRun: GithubCheckRun

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of CreateCheckSuite\\"\\"\\"
input GithubCreateCheckSuiteInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The SHA of the head commit.\\"\\"\\"
  headSha: GithubGitObjectID!

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of CreateCheckSuite\\"\\"\\"
type GithubCreateCheckSuitePayload {
  \\"\\"\\"The newly created check suite.\\"\\"\\"
  checkSuite: GithubCheckSuite

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of CreateDiscussion\\"\\"\\"
input GithubCreateDiscussionInput {
  \\"\\"\\"The body of the discussion.\\"\\"\\"
  body: String!

  \\"\\"\\"The id of the discussion category to associate with this discussion.\\"\\"\\"
  categoryId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the repository on which to create the discussion.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"The title of the discussion.\\"\\"\\"
  title: String!
}

\\"\\"\\"Autogenerated return type of CreateDiscussion\\"\\"\\"
type GithubCreateDiscussionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The discussion that was just created.\\"\\"\\"
  discussion: GithubDiscussion
}

\\"\\"\\"Autogenerated input type of CreateEnterpriseOrganization\\"\\"\\"
input GithubCreateEnterpriseOrganizationInput {
  \\"\\"\\"The logins for the administrators of the new organization.\\"\\"\\"
  adminLogins: [String!]!

  \\"\\"\\"The email used for sending billing receipts.\\"\\"\\"
  billingEmail: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the enterprise owning the new organization.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The login of the new organization.\\"\\"\\"
  login: String!

  \\"\\"\\"The profile name of the new organization.\\"\\"\\"
  profileName: String!
}

\\"\\"\\"Autogenerated return type of CreateEnterpriseOrganization\\"\\"\\"
type GithubCreateEnterpriseOrganizationPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The enterprise that owns the created organization.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"The organization that was created.\\"\\"\\"
  organization: GithubOrganization
}

\\"\\"\\"Autogenerated input type of CreateEnvironment\\"\\"\\"
input GithubCreateEnvironmentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of the environment.\\"\\"\\"
  name: String!

  \\"\\"\\"The node ID of the repository.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of CreateEnvironment\\"\\"\\"
type GithubCreateEnvironmentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new or existing environment.\\"\\"\\"
  environment: GithubEnvironment
}

\\"\\"\\"Autogenerated input type of CreateIpAllowListEntry\\"\\"\\"
input GithubCreateIpAllowListEntryInput {
  \\"\\"\\"An IP address or range of addresses in CIDR notation.\\"\\"\\"
  allowListValue: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Whether the IP allow list entry is active when an IP allow list is enabled.
  \\"\\"\\"
  isActive: Boolean!

  \\"\\"\\"An optional name for the IP allow list entry.\\"\\"\\"
  name: String

  \\"\\"\\"The ID of the owner for which to create the new IP allow list entry.\\"\\"\\"
  ownerId: ID!
}

\\"\\"\\"Autogenerated return type of CreateIpAllowListEntry\\"\\"\\"
type GithubCreateIpAllowListEntryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The IP allow list entry that was created.\\"\\"\\"
  ipAllowListEntry: GithubIpAllowListEntry
}

\\"\\"\\"Autogenerated input type of CreateIssue\\"\\"\\"
input GithubCreateIssueInput {
  \\"\\"\\"The Node ID for the user assignee for this issue.\\"\\"\\"
  assigneeIds: [ID!]

  \\"\\"\\"The body for the issue description.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  \\"\\"\\"
  issueTemplate: String

  \\"\\"\\"An array of Node IDs of labels for this issue.\\"\\"\\"
  labelIds: [ID!]

  \\"\\"\\"The Node ID of the milestone for this issue.\\"\\"\\"
  milestoneId: ID

  \\"\\"\\"An array of Node IDs for projects associated with this issue.\\"\\"\\"
  projectIds: [ID!]

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"The title for the issue.\\"\\"\\"
  title: String!
}

\\"\\"\\"Autogenerated return type of CreateIssue\\"\\"\\"
type GithubCreateIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new issue.\\"\\"\\"
  issue: GithubIssue
}

\\"\\"\\"Autogenerated input type of CreateProject\\"\\"\\"
input GithubCreateProjectInput {
  \\"\\"\\"The description of project.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of project.\\"\\"\\"
  name: String!

  \\"\\"\\"The owner ID to create the project under.\\"\\"\\"
  ownerId: ID!

  \\"\\"\\"
  A list of repository IDs to create as linked repositories for the project
  \\"\\"\\"
  repositoryIds: [ID!]

  \\"\\"\\"The name of the GitHub-provided template.\\"\\"\\"
  template: GithubProjectTemplate
}

\\"\\"\\"Autogenerated return type of CreateProject\\"\\"\\"
type GithubCreateProjectPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new project.\\"\\"\\"
  project: GithubProject
}

\\"\\"\\"Autogenerated input type of CreatePullRequest\\"\\"\\"
input GithubCreatePullRequestInput {
  \\"\\"\\"
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  
  \\"\\"\\"
  baseRefName: String!

  \\"\\"\\"The contents of the pull request.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Indicates whether this pull request should be a draft.\\"\\"\\"
  draft: Boolean = false

  \\"\\"\\"
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace \`head_ref_name\` with a user like this: \`username:branch\`.
  
  \\"\\"\\"
  headRefName: String!

  \\"\\"\\"Indicates whether maintainers can modify the pull request.\\"\\"\\"
  maintainerCanModify: Boolean = true

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"The title of the pull request.\\"\\"\\"
  title: String!
}

\\"\\"\\"Autogenerated return type of CreatePullRequest\\"\\"\\"
type GithubCreatePullRequestPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new pull request.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Autogenerated input type of CreateRef\\"\\"\\"
input GithubCreateRefInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The fully qualified name of the new Ref (ie: \`refs/heads/my_new_branch\`).
  \\"\\"\\"
  name: String!

  \\"\\"\\"The GitObjectID that the new Ref shall target. Must point to a commit.\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The Node ID of the Repository to create the Ref in.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of CreateRef\\"\\"\\"
type GithubCreateRefPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The newly created ref.\\"\\"\\"
  ref: GithubRef
}

\\"\\"\\"Autogenerated input type of CreateRepository\\"\\"\\"
input GithubCreateRepositoryInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"A short description of the new repository.\\"\\"\\"
  description: String

  \\"\\"\\"Indicates if the repository should have the issues feature enabled.\\"\\"\\"
  hasIssuesEnabled: Boolean = true

  \\"\\"\\"Indicates if the repository should have the wiki feature enabled.\\"\\"\\"
  hasWikiEnabled: Boolean = false

  \\"\\"\\"The URL for a web page about this repository.\\"\\"\\"
  homepageUrl: GithubURI

  \\"\\"\\"The name of the new repository.\\"\\"\\"
  name: String!

  \\"\\"\\"The ID of the owner for the new repository.\\"\\"\\"
  ownerId: ID

  \\"\\"\\"
  When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
  \\"\\"\\"
  teamId: ID

  \\"\\"\\"
  Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
  \\"\\"\\"
  template: Boolean = false

  \\"\\"\\"Indicates the repository's visibility level.\\"\\"\\"
  visibility: GithubRepositoryVisibility!
}

\\"\\"\\"Autogenerated return type of CreateRepository\\"\\"\\"
type GithubCreateRepositoryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new repository.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Autogenerated input type of CreateTeamDiscussionComment\\"\\"\\"
input GithubCreateTeamDiscussionCommentInput {
  \\"\\"\\"The content of the comment.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the discussion to which the comment belongs.\\"\\"\\"
  discussionId: ID!
}

\\"\\"\\"Autogenerated return type of CreateTeamDiscussionComment\\"\\"\\"
type GithubCreateTeamDiscussionCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new comment.\\"\\"\\"
  teamDiscussionComment: GithubTeamDiscussionComment
}

\\"\\"\\"Autogenerated input type of CreateTeamDiscussion\\"\\"\\"
input GithubCreateTeamDiscussionInput {
  \\"\\"\\"The content of the discussion.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
  \\"\\"\\"
  private: Boolean

  \\"\\"\\"The ID of the team to which the discussion belongs.\\"\\"\\"
  teamId: ID!

  \\"\\"\\"The title of the discussion.\\"\\"\\"
  title: String!
}

\\"\\"\\"Autogenerated return type of CreateTeamDiscussion\\"\\"\\"
type GithubCreateTeamDiscussionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new discussion.\\"\\"\\"
  teamDiscussion: GithubTeamDiscussion
}

\\"\\"\\"Represents the contribution a user made by committing to a repository.\\"\\"\\"
type GithubCreatedCommitContribution implements GithubContribution {
  \\"\\"\\"How many commits were made on this day to this repository by the user.\\"\\"\\"
  commitCount: Int!

  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The repository the user made a commit in.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"The connection type for CreatedCommitContribution.\\"\\"\\"
type GithubCreatedCommitContributionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCreatedCommitContributionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCreatedCommitContribution]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"
  Identifies the total count of commits across days and repositories in the connection.
  
  \\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCreatedCommitContributionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCreatedCommitContribution
}

\\"\\"\\"Represents the contribution a user made on GitHub by opening an issue.\\"\\"\\"
type GithubCreatedIssueContribution implements GithubContribution {
  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"The issue that was opened.\\"\\"\\"
  issue: GithubIssue!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"The connection type for CreatedIssueContribution.\\"\\"\\"
type GithubCreatedIssueContributionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCreatedIssueContributionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCreatedIssueContribution]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCreatedIssueContributionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCreatedIssueContribution
}

\\"\\"\\"
Represents either a issue the viewer can access or a restricted contribution.
\\"\\"\\"
union GithubCreatedIssueOrRestrictedContribution = GithubCreatedIssueContribution | GithubRestrictedContribution

\\"\\"\\"
Represents the contribution a user made on GitHub by opening a pull request.
\\"\\"\\"
type GithubCreatedPullRequestContribution implements GithubContribution {
  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The pull request that was opened.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"The connection type for CreatedPullRequestContribution.\\"\\"\\"
type GithubCreatedPullRequestContributionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCreatedPullRequestContributionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCreatedPullRequestContribution]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCreatedPullRequestContributionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCreatedPullRequestContribution
}

\\"\\"\\"
Represents either a pull request the viewer can access or a restricted contribution.
\\"\\"\\"
union GithubCreatedPullRequestOrRestrictedContribution = GithubCreatedPullRequestContribution | GithubRestrictedContribution

\\"\\"\\"
Represents the contribution a user made by leaving a review on a pull request.
\\"\\"\\"
type GithubCreatedPullRequestReviewContribution implements GithubContribution {
  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The pull request the user reviewed.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The review the user left on the pull request.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview!

  \\"\\"\\"The repository containing the pull request that the user reviewed.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"The connection type for CreatedPullRequestReviewContribution.\\"\\"\\"
type GithubCreatedPullRequestReviewContributionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCreatedPullRequestReviewContributionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCreatedPullRequestReviewContribution]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCreatedPullRequestReviewContributionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCreatedPullRequestReviewContribution
}

\\"\\"\\"
Represents the contribution a user made on GitHub by creating a repository.
\\"\\"\\"
type GithubCreatedRepositoryContribution implements GithubContribution {
  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The repository that was created.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"The connection type for CreatedRepositoryContribution.\\"\\"\\"
type GithubCreatedRepositoryContributionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubCreatedRepositoryContributionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubCreatedRepositoryContribution]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubCreatedRepositoryContributionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubCreatedRepositoryContribution
}

\\"\\"\\"
Represents either a repository the viewer can access or a restricted contribution.
\\"\\"\\"
union GithubCreatedRepositoryOrRestrictedContribution = GithubCreatedRepositoryContribution | GithubRestrictedContribution

\\"\\"\\"Represents a mention made by one issue or pull request to another.\\"\\"\\"
type GithubCrossReferencedEvent implements GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Reference originated in a different repository.\\"\\"\\"
  isCrossRepository: Boolean!

  \\"\\"\\"Identifies when the reference was made.\\"\\"\\"
  referencedAt: GithubDateTime!

  \\"\\"\\"The HTTP path for this pull request.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Issue or pull request that made the reference.\\"\\"\\"
  source: GithubReferencedSubject!

  \\"\\"\\"Issue or pull request to which the reference was made.\\"\\"\\"
  target: GithubReferencedSubject!

  \\"\\"\\"The HTTP URL for this pull request.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"Checks if the target will be closed when the source is merged.\\"\\"\\"
  willCloseTarget: Boolean!
}

\\"\\"\\"An ISO-8601 encoded date string.\\"\\"\\"
scalar GithubDate

\\"\\"\\"An ISO-8601 encoded UTC date string.\\"\\"\\"
scalar GithubDateTime

\\"\\"\\"Autogenerated input type of DeclineTopicSuggestion\\"\\"\\"
input GithubDeclineTopicSuggestionInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of the suggested topic.\\"\\"\\"
  name: String!

  \\"\\"\\"The reason why the suggested topic is declined.\\"\\"\\"
  reason: GithubTopicSuggestionDeclineReason!

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of DeclineTopicSuggestion\\"\\"\\"
type GithubDeclineTopicSuggestionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The declined topic.\\"\\"\\"
  topic: GithubTopic
}

\\"\\"\\"The possible default permissions for repositories.\\"\\"\\"
enum GithubDefaultRepositoryPermissionField {
  \\"\\"\\"Can read, write, and administrate repos by default\\"\\"\\"
  ADMIN

  \\"\\"\\"No access\\"\\"\\"
  NONE

  \\"\\"\\"Can read repos by default\\"\\"\\"
  READ

  \\"\\"\\"Can read and write repos by default\\"\\"\\"
  WRITE
}

\\"\\"\\"Entities that can be deleted.\\"\\"\\"
interface GithubDeletable {
  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!
}

\\"\\"\\"Autogenerated input type of DeleteBranchProtectionRule\\"\\"\\"
input GithubDeleteBranchProtectionRuleInput {
  \\"\\"\\"The global relay id of the branch protection rule to be deleted.\\"\\"\\"
  branchProtectionRuleId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated return type of DeleteBranchProtectionRule\\"\\"\\"
type GithubDeleteBranchProtectionRulePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of DeleteDeployment\\"\\"\\"
input GithubDeleteDeploymentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the deployment to be deleted.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteDeployment\\"\\"\\"
type GithubDeleteDeploymentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of DeleteDiscussionComment\\"\\"\\"
input GithubDeleteDiscussionCommentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node id of the discussion comment to delete.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteDiscussionComment\\"\\"\\"
type GithubDeleteDiscussionCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The discussion comment that was just deleted.\\"\\"\\"
  comment: GithubDiscussionComment
}

\\"\\"\\"Autogenerated input type of DeleteDiscussion\\"\\"\\"
input GithubDeleteDiscussionInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the discussion to delete.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteDiscussion\\"\\"\\"
type GithubDeleteDiscussionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The discussion that was just deleted.\\"\\"\\"
  discussion: GithubDiscussion
}

\\"\\"\\"Autogenerated input type of DeleteEnvironment\\"\\"\\"
input GithubDeleteEnvironmentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the environment to be deleted.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteEnvironment\\"\\"\\"
type GithubDeleteEnvironmentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of DeleteIpAllowListEntry\\"\\"\\"
input GithubDeleteIpAllowListEntryInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the IP allow list entry to delete.\\"\\"\\"
  ipAllowListEntryId: ID!
}

\\"\\"\\"Autogenerated return type of DeleteIpAllowListEntry\\"\\"\\"
type GithubDeleteIpAllowListEntryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The IP allow list entry that was deleted.\\"\\"\\"
  ipAllowListEntry: GithubIpAllowListEntry
}

\\"\\"\\"Autogenerated input type of DeleteIssueComment\\"\\"\\"
input GithubDeleteIssueCommentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the comment to delete.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteIssueComment\\"\\"\\"
type GithubDeleteIssueCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of DeleteIssue\\"\\"\\"
input GithubDeleteIssueInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the issue to delete.\\"\\"\\"
  issueId: ID!
}

\\"\\"\\"Autogenerated return type of DeleteIssue\\"\\"\\"
type GithubDeleteIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The repository the issue belonged to\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Autogenerated input type of DeleteProjectCard\\"\\"\\"
input GithubDeleteProjectCardInput {
  \\"\\"\\"The id of the card to delete.\\"\\"\\"
  cardId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated return type of DeleteProjectCard\\"\\"\\"
type GithubDeleteProjectCardPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The column the deleted card was in.\\"\\"\\"
  column: GithubProjectColumn

  \\"\\"\\"The deleted card ID.\\"\\"\\"
  deletedCardId: ID
}

\\"\\"\\"Autogenerated input type of DeleteProjectColumn\\"\\"\\"
input GithubDeleteProjectColumnInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the column to delete.\\"\\"\\"
  columnId: ID!
}

\\"\\"\\"Autogenerated return type of DeleteProjectColumn\\"\\"\\"
type GithubDeleteProjectColumnPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The deleted column ID.\\"\\"\\"
  deletedColumnId: ID

  \\"\\"\\"The project the deleted column was in.\\"\\"\\"
  project: GithubProject
}

\\"\\"\\"Autogenerated input type of DeleteProject\\"\\"\\"
input GithubDeleteProjectInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Project ID to update.\\"\\"\\"
  projectId: ID!
}

\\"\\"\\"Autogenerated return type of DeleteProject\\"\\"\\"
type GithubDeleteProjectPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The repository or organization the project was removed from.\\"\\"\\"
  owner: GithubProjectOwner
}

\\"\\"\\"Autogenerated input type of DeletePullRequestReviewComment\\"\\"\\"
input GithubDeletePullRequestReviewCommentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the comment to delete.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeletePullRequestReviewComment\\"\\"\\"
type GithubDeletePullRequestReviewCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request review the deleted comment belonged to.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview
}

\\"\\"\\"Autogenerated input type of DeletePullRequestReview\\"\\"\\"
input GithubDeletePullRequestReviewInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the pull request review to delete.\\"\\"\\"
  pullRequestReviewId: ID!
}

\\"\\"\\"Autogenerated return type of DeletePullRequestReview\\"\\"\\"
type GithubDeletePullRequestReviewPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The deleted pull request review.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview
}

\\"\\"\\"Autogenerated input type of DeleteRef\\"\\"\\"
input GithubDeleteRefInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the Ref to be deleted.\\"\\"\\"
  refId: ID!
}

\\"\\"\\"Autogenerated return type of DeleteRef\\"\\"\\"
type GithubDeleteRefPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of DeleteTeamDiscussionComment\\"\\"\\"
input GithubDeleteTeamDiscussionCommentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the comment to delete.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteTeamDiscussionComment\\"\\"\\"
type GithubDeleteTeamDiscussionCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of DeleteTeamDiscussion\\"\\"\\"
input GithubDeleteTeamDiscussionInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The discussion ID to delete.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteTeamDiscussion\\"\\"\\"
type GithubDeleteTeamDiscussionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of DeleteVerifiableDomain\\"\\"\\"
input GithubDeleteVerifiableDomainInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the verifiable domain to delete.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of DeleteVerifiableDomain\\"\\"\\"
type GithubDeleteVerifiableDomainPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The owning account from which the domain was deleted.\\"\\"\\"
  owner: GithubVerifiableDomainOwner
}

\\"\\"\\"Represents a 'demilestoned' event on a given issue or pull request.\\"\\"\\"
type GithubDemilestonedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"
  Identifies the milestone title associated with the 'demilestoned' event.
  \\"\\"\\"
  milestoneTitle: String!

  \\"\\"\\"Object referenced by event.\\"\\"\\"
  subject: GithubMilestoneItem!
}

\\"\\"\\"A repository deploy key.\\"\\"\\"
type GithubDeployKey implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"The deploy key.\\"\\"\\"
  key: String!

  \\"\\"\\"Whether or not the deploy key is read only.\\"\\"\\"
  readOnly: Boolean!

  \\"\\"\\"The deploy key title.\\"\\"\\"
  title: String!

  \\"\\"\\"Whether or not the deploy key has been verified.\\"\\"\\"
  verified: Boolean!
}

\\"\\"\\"The connection type for DeployKey.\\"\\"\\"
type GithubDeployKeyConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDeployKeyEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDeployKey]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDeployKeyEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDeployKey
}

\\"\\"\\"Represents a 'deployed' event on a given pull request.\\"\\"\\"
type GithubDeployedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The deployment associated with the 'deployed' event.\\"\\"\\"
  deployment: GithubDeployment!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The ref associated with the 'deployed' event.\\"\\"\\"
  ref: GithubRef
}

\\"\\"\\"Represents triggered deployment instance.\\"\\"\\"
type GithubDeployment implements GithubNode {
  \\"\\"\\"Identifies the commit sha of the deployment.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  \\"\\"\\"
  commitOid: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the actor who triggered the deployment.\\"\\"\\"
  creator: GithubActor!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The deployment description.\\"\\"\\"
  description: String

  \\"\\"\\"The latest environment to which this deployment was made.\\"\\"\\"
  environment: String
  id: ID!

  \\"\\"\\"The latest environment to which this deployment was made.\\"\\"\\"
  latestEnvironment: String

  \\"\\"\\"The latest status of this deployment.\\"\\"\\"
  latestStatus: GithubDeploymentStatus

  \\"\\"\\"The original environment to which this deployment was made.\\"\\"\\"
  originalEnvironment: String

  \\"\\"\\"Extra information that a deployment system might need.\\"\\"\\"
  payload: String

  \\"\\"\\"
  Identifies the Ref of the deployment, if the deployment was created by ref.
  \\"\\"\\"
  ref: GithubRef

  \\"\\"\\"Identifies the repository associated with the deployment.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The current state of the deployment.\\"\\"\\"
  state: GithubDeploymentState

  \\"\\"\\"A list of statuses associated with the deployment.\\"\\"\\"
  statuses(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDeploymentStatusConnection

  \\"\\"\\"The deployment task.\\"\\"\\"
  task: String

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"The connection type for Deployment.\\"\\"\\"
type GithubDeploymentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDeploymentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDeployment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDeploymentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDeployment
}

\\"\\"\\"
Represents a 'deployment_environment_changed' event on a given pull request.
\\"\\"\\"
type GithubDeploymentEnvironmentChangedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The deployment status that updated the deployment environment.\\"\\"\\"
  deploymentStatus: GithubDeploymentStatus!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"Ordering options for deployment connections\\"\\"\\"
input GithubDeploymentOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order deployments by.\\"\\"\\"
  field: GithubDeploymentOrderField!
}

\\"\\"\\"Properties by which deployment connections can be ordered.\\"\\"\\"
enum GithubDeploymentOrderField {
  \\"\\"\\"Order collection by creation time\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"A protection rule.\\"\\"\\"
type GithubDeploymentProtectionRule implements GithubNode {
  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The teams or users that can review the deployment\\"\\"\\"
  reviewers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDeploymentReviewerConnection!

  \\"\\"\\"The timeout in minutes for this protection rule.\\"\\"\\"
  timeout: Int!

  \\"\\"\\"The type of protection rule.\\"\\"\\"
  type: GithubDeploymentProtectionRuleType!
}

\\"\\"\\"The connection type for DeploymentProtectionRule.\\"\\"\\"
type GithubDeploymentProtectionRuleConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDeploymentProtectionRuleEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDeploymentProtectionRule]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDeploymentProtectionRuleEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDeploymentProtectionRule
}

\\"\\"\\"The possible protection rule types.\\"\\"\\"
enum GithubDeploymentProtectionRuleType {
  \\"\\"\\"Required reviewers\\"\\"\\"
  REQUIRED_REVIEWERS

  \\"\\"\\"Wait timer\\"\\"\\"
  WAIT_TIMER
}

\\"\\"\\"A request to deploy a workflow run to an environment.\\"\\"\\"
type GithubDeploymentRequest {
  \\"\\"\\"Whether or not the current user can approve the deployment\\"\\"\\"
  currentUserCanApprove: Boolean!

  \\"\\"\\"The target environment of the deployment\\"\\"\\"
  environment: GithubEnvironment!

  \\"\\"\\"The teams or users that can review the deployment\\"\\"\\"
  reviewers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDeploymentReviewerConnection!

  \\"\\"\\"The wait timer in minutes configured in the environment\\"\\"\\"
  waitTimer: Int!

  \\"\\"\\"The wait timer in minutes configured in the environment\\"\\"\\"
  waitTimerStartedAt: GithubDateTime
}

\\"\\"\\"The connection type for DeploymentRequest.\\"\\"\\"
type GithubDeploymentRequestConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDeploymentRequestEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDeploymentRequest]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDeploymentRequestEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDeploymentRequest
}

\\"\\"\\"A deployment review.\\"\\"\\"
type GithubDeploymentReview implements GithubNode {
  \\"\\"\\"The comment the user left.\\"\\"\\"
  comment: String!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The environments approved or rejected\\"\\"\\"
  environments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubEnvironmentConnection!
  id: ID!

  \\"\\"\\"The decision of the user.\\"\\"\\"
  state: GithubDeploymentReviewState!

  \\"\\"\\"The user that reviewed the deployment.\\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"The connection type for DeploymentReview.\\"\\"\\"
type GithubDeploymentReviewConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDeploymentReviewEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDeploymentReview]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDeploymentReviewEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDeploymentReview
}

\\"\\"\\"The possible states for a deployment review.\\"\\"\\"
enum GithubDeploymentReviewState {
  \\"\\"\\"The deployment was approved.\\"\\"\\"
  APPROVED

  \\"\\"\\"The deployment was rejected.\\"\\"\\"
  REJECTED
}

\\"\\"\\"Users and teams.\\"\\"\\"
union GithubDeploymentReviewer = GithubTeam | GithubUser

\\"\\"\\"The connection type for DeploymentReviewer.\\"\\"\\"
type GithubDeploymentReviewerConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDeploymentReviewerEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDeploymentReviewer]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDeploymentReviewerEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDeploymentReviewer
}

\\"\\"\\"The possible states in which a deployment can be.\\"\\"\\"
enum GithubDeploymentState {
  \\"\\"\\"The pending deployment was not updated after 30 minutes.\\"\\"\\"
  ABANDONED

  \\"\\"\\"The deployment is currently active.\\"\\"\\"
  ACTIVE

  \\"\\"\\"An inactive transient deployment.\\"\\"\\"
  DESTROYED

  \\"\\"\\"The deployment experienced an error.\\"\\"\\"
  ERROR

  \\"\\"\\"The deployment has failed.\\"\\"\\"
  FAILURE

  \\"\\"\\"The deployment is inactive.\\"\\"\\"
  INACTIVE

  \\"\\"\\"The deployment is in progress.\\"\\"\\"
  IN_PROGRESS

  \\"\\"\\"The deployment is pending.\\"\\"\\"
  PENDING

  \\"\\"\\"The deployment has queued\\"\\"\\"
  QUEUED

  \\"\\"\\"The deployment is waiting.\\"\\"\\"
  WAITING
}

\\"\\"\\"Describes the status of a given deployment attempt.\\"\\"\\"
type GithubDeploymentStatus implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the actor who triggered the deployment.\\"\\"\\"
  creator: GithubActor!

  \\"\\"\\"Identifies the deployment associated with status.\\"\\"\\"
  deployment: GithubDeployment!

  \\"\\"\\"Identifies the description of the deployment.\\"\\"\\"
  description: String

  \\"\\"\\"Identifies the environment URL of the deployment.\\"\\"\\"
  environmentUrl: GithubURI
  id: ID!

  \\"\\"\\"Identifies the log URL of the deployment.\\"\\"\\"
  logUrl: GithubURI

  \\"\\"\\"Identifies the current state of the deployment.\\"\\"\\"
  state: GithubDeploymentStatusState!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"The connection type for DeploymentStatus.\\"\\"\\"
type GithubDeploymentStatusConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDeploymentStatusEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDeploymentStatus]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDeploymentStatusEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDeploymentStatus
}

\\"\\"\\"The possible states for a deployment status.\\"\\"\\"
enum GithubDeploymentStatusState {
  \\"\\"\\"The deployment experienced an error.\\"\\"\\"
  ERROR

  \\"\\"\\"The deployment has failed.\\"\\"\\"
  FAILURE

  \\"\\"\\"The deployment is inactive.\\"\\"\\"
  INACTIVE

  \\"\\"\\"The deployment is in progress.\\"\\"\\"
  IN_PROGRESS

  \\"\\"\\"The deployment is pending.\\"\\"\\"
  PENDING

  \\"\\"\\"The deployment is queued\\"\\"\\"
  QUEUED

  \\"\\"\\"The deployment was successful.\\"\\"\\"
  SUCCESS

  \\"\\"\\"The deployment is waiting.\\"\\"\\"
  WAITING
}

\\"\\"\\"The possible sides of a diff.\\"\\"\\"
enum GithubDiffSide {
  \\"\\"\\"The left side of the diff.\\"\\"\\"
  LEFT

  \\"\\"\\"The right side of the diff.\\"\\"\\"
  RIGHT
}

\\"\\"\\"Autogenerated input type of DisablePullRequestAutoMerge\\"\\"\\"
input GithubDisablePullRequestAutoMergeInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the pull request to disable auto merge on.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of DisablePullRequestAutoMerge\\"\\"\\"
type GithubDisablePullRequestAutoMergePayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request auto merge was disabled on.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Represents a 'disconnected' event on a given issue or pull request.\\"\\"\\"
type GithubDisconnectedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Reference originated in a different repository.\\"\\"\\"
  isCrossRepository: Boolean!

  \\"\\"\\"Issue or pull request from which the issue was disconnected.\\"\\"\\"
  source: GithubReferencedSubject!

  \\"\\"\\"Issue or pull request which was disconnected.\\"\\"\\"
  subject: GithubReferencedSubject!
}

\\"\\"\\"A discussion in a repository.\\"\\"\\"
type GithubDiscussion implements GithubComment & GithubDeletable & GithubLabelable & GithubLockable & GithubNode & GithubReactable & GithubRepositoryNode & GithubSubscribable & GithubUpdatable & GithubVotable {
  \\"\\"\\"Reason that the conversation was locked.\\"\\"\\"
  activeLockReason: GithubLockReason

  \\"\\"\\"The comment chosen as this discussion's answer, if any.\\"\\"\\"
  answer: GithubDiscussionComment

  \\"\\"\\"The time when a user chose this discussion's answer, if answered.\\"\\"\\"
  answerChosenAt: GithubDateTime

  \\"\\"\\"The user who chose this discussion's answer, if answered.\\"\\"\\"
  answerChosenBy: GithubActor

  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"The main text of the discussion post.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"The category for this discussion.\\"\\"\\"
  category: GithubDiscussionCategory!

  \\"\\"\\"The replies to the discussion.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDiscussionCommentConnection!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"A list of labels associated with the object.\\"\\"\\"
  labels(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for labels returned from the connection.\\"\\"\\"
    orderBy: GithubLabelOrder = {direction: ASC, field: CREATED_AT}
  ): GithubLabelConnection

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"\`true\` if the object is locked\\"\\"\\"
  locked: Boolean!

  \\"\\"\\"The number identifying this discussion within the repository.\\"\\"\\"
  number: Int!

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The path for this discussion.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The title of this discussion.\\"\\"\\"
  title: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"Number of upvotes that this subject has received.\\"\\"\\"
  upvoteCount: Int!

  \\"\\"\\"The URL for this discussion.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"
  Whether or not the current user can add or remove an upvote on this subject.
  \\"\\"\\"
  viewerCanUpvote: Boolean!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!

  \\"\\"\\"Whether or not the current user has already upvoted this subject.\\"\\"\\"
  viewerHasUpvoted: Boolean!

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState
}

\\"\\"\\"A category for discussions in a repository.\\"\\"\\"
type GithubDiscussionCategory implements GithubNode & GithubRepositoryNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"A description of this category.\\"\\"\\"
  description: String

  \\"\\"\\"An emoji representing this category.\\"\\"\\"
  emoji: String!

  \\"\\"\\"This category's emoji rendered as HTML.\\"\\"\\"
  emojiHTML: GithubHTML!
  id: ID!

  \\"\\"\\"
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  \\"\\"\\"
  isAnswerable: Boolean!

  \\"\\"\\"The name of this category.\\"\\"\\"
  name: String!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"The connection type for DiscussionCategory.\\"\\"\\"
type GithubDiscussionCategoryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDiscussionCategoryEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDiscussionCategory]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDiscussionCategoryEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDiscussionCategory
}

\\"\\"\\"A comment on a discussion.\\"\\"\\"
type GithubDiscussionComment implements GithubComment & GithubDeletable & GithubMinimizable & GithubNode & GithubReactable & GithubUpdatable & GithubUpdatableComment & GithubVotable {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"The body as Markdown.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The time when this replied-to comment was deleted\\"\\"\\"
  deletedAt: GithubDateTime

  \\"\\"\\"The discussion this comment was created in\\"\\"\\"
  discussion: GithubDiscussion

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"Has this comment been chosen as the answer of its discussion?\\"\\"\\"
  isAnswer: Boolean!

  \\"\\"\\"Returns whether or not a comment has been minimized.\\"\\"\\"
  isMinimized: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Returns why the comment was minimized.\\"\\"\\"
  minimizedReason: String

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The threaded replies to this comment.\\"\\"\\"
  replies(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDiscussionCommentConnection!

  \\"\\"\\"The discussion comment this comment is a reply to\\"\\"\\"
  replyTo: GithubDiscussionComment

  \\"\\"\\"The path for this discussion comment.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"Number of upvotes that this subject has received.\\"\\"\\"
  upvoteCount: Int!

  \\"\\"\\"The URL for this discussion comment.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Can the current user mark this comment as an answer?\\"\\"\\"
  viewerCanMarkAsAnswer: Boolean!

  \\"\\"\\"Check if the current viewer can minimize this object.\\"\\"\\"
  viewerCanMinimize: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"Can the current user unmark this comment as an answer?\\"\\"\\"
  viewerCanUnmarkAsAnswer: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"
  Whether or not the current user can add or remove an upvote on this subject.
  \\"\\"\\"
  viewerCanUpvote: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!

  \\"\\"\\"Whether or not the current user has already upvoted this subject.\\"\\"\\"
  viewerHasUpvoted: Boolean!
}

\\"\\"\\"The connection type for DiscussionComment.\\"\\"\\"
type GithubDiscussionCommentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDiscussionCommentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDiscussionComment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDiscussionCommentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDiscussionComment
}

\\"\\"\\"The connection type for Discussion.\\"\\"\\"
type GithubDiscussionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubDiscussionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubDiscussion]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubDiscussionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubDiscussion
}

\\"\\"\\"Ways in which lists of discussions can be ordered upon return.\\"\\"\\"
input GithubDiscussionOrder {
  \\"\\"\\"The direction in which to order discussions by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field by which to order discussions.\\"\\"\\"
  field: GithubDiscussionOrderField!
}

\\"\\"\\"Properties by which discussion connections can be ordered.\\"\\"\\"
enum GithubDiscussionOrderField {
  \\"\\"\\"Order discussions by creation time.\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order discussions by most recent modification time.\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"Autogenerated input type of DismissPullRequestReview\\"\\"\\"
input GithubDismissPullRequestReviewInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The contents of the pull request review dismissal message.\\"\\"\\"
  message: String!

  \\"\\"\\"The Node ID of the pull request review to modify.\\"\\"\\"
  pullRequestReviewId: ID!
}

\\"\\"\\"Autogenerated return type of DismissPullRequestReview\\"\\"\\"
type GithubDismissPullRequestReviewPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The dismissed pull request review.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview
}

\\"\\"\\"Specifies a review comment to be left with a Pull Request Review.\\"\\"\\"
input GithubDraftPullRequestReviewComment {
  \\"\\"\\"Body of the comment to leave.\\"\\"\\"
  body: String!

  \\"\\"\\"Path to the file being commented on.\\"\\"\\"
  path: String!

  \\"\\"\\"Position in the file to leave a comment on.\\"\\"\\"
  position: Int!
}

\\"\\"\\"
Specifies a review comment thread to be left with a Pull Request Review.
\\"\\"\\"
input GithubDraftPullRequestReviewThread {
  \\"\\"\\"Body of the comment to leave.\\"\\"\\"
  body: String!

  \\"\\"\\"
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  \\"\\"\\"
  line: Int!

  \\"\\"\\"Path to the file being commented on.\\"\\"\\"
  path: String!

  \\"\\"\\"
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  \\"\\"\\"
  side: GithubDiffSide = RIGHT

  \\"\\"\\"The first line of the range to which the comment refers.\\"\\"\\"
  startLine: Int

  \\"\\"\\"The side of the diff on which the start line resides.\\"\\"\\"
  startSide: GithubDiffSide = RIGHT
}

\\"\\"\\"Autogenerated input type of EnablePullRequestAutoMerge\\"\\"\\"
input GithubEnablePullRequestAutoMergeInput {
  \\"\\"\\"The email address to associate with this merge.\\"\\"\\"
  authorEmail: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used.
  \\"\\"\\"
  commitBody: String

  \\"\\"\\"
  Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used.
  \\"\\"\\"
  commitHeadline: String

  \\"\\"\\"The merge method to use. If omitted, defaults to 'MERGE'\\"\\"\\"
  mergeMethod: GithubPullRequestMergeMethod = MERGE

  \\"\\"\\"ID of the pull request to enable auto-merge on.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of EnablePullRequestAutoMerge\\"\\"\\"
type GithubEnablePullRequestAutoMergePayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request auto-merge was enabled on.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"
An account to manage multiple organizations with consolidated policy and billing.
\\"\\"\\"
type GithubEnterprise implements GithubNode {
  \\"\\"\\"A URL pointing to the enterprise's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"Enterprise billing information visible to enterprise billing managers.\\"\\"\\"
  billingInfo: GithubEnterpriseBillingInfo

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The description of the enterprise.\\"\\"\\"
  description: String

  \\"\\"\\"The description of the enterprise as HTML.\\"\\"\\"
  descriptionHTML: GithubHTML!
  id: ID!

  \\"\\"\\"The location of the enterprise.\\"\\"\\"
  location: String

  \\"\\"\\"A list of users who are members of this enterprise.\\"\\"\\"
  members(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Only return members within the selected GitHub Enterprise deployment\\"\\"\\"
    deployment: GithubEnterpriseUserDeployment

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for members returned from the connection.\\"\\"\\"
    orderBy: GithubEnterpriseMemberOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"Only return members within the organizations with these logins\\"\\"\\"
    organizationLogins: [String!]

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String

    \\"\\"\\"The role of the user in the enterprise organization or server.\\"\\"\\"
    role: GithubEnterpriseUserAccountMembershipRole
  ): GithubEnterpriseMemberConnection!

  \\"\\"\\"The name of the enterprise.\\"\\"\\"
  name: String!

  \\"\\"\\"A list of organizations that belong to this enterprise.\\"\\"\\"
  organizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations returned from the connection.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String
  ): GithubOrganizationConnection!

  \\"\\"\\"Enterprise information only visible to enterprise owners.\\"\\"\\"
  ownerInfo: GithubEnterpriseOwnerInfo

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The URL-friendly identifier for the enterprise.\\"\\"\\"
  slug: String!

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of user accounts on this enterprise.\\"\\"\\"
  userAccounts(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubEnterpriseUserAccountConnection!

  \\"\\"\\"Is the current viewer an admin of this enterprise?\\"\\"\\"
  viewerIsAdmin: Boolean!

  \\"\\"\\"The URL of the enterprise website.\\"\\"\\"
  websiteUrl: GithubURI
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubEnterpriseAdministratorConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseAdministratorEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A User who is an administrator of an enterprise.\\"\\"\\"
type GithubEnterpriseAdministratorEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubUser

  \\"\\"\\"The role of the administrator.\\"\\"\\"
  role: GithubEnterpriseAdministratorRole!
}

\\"\\"\\"
An invitation for a user to become an owner or billing manager of an enterprise.
\\"\\"\\"
type GithubEnterpriseAdministratorInvitation implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The email of the person who was invited to the enterprise.\\"\\"\\"
  email: String

  \\"\\"\\"The enterprise the invitation is for.\\"\\"\\"
  enterprise: GithubEnterprise!
  id: ID!

  \\"\\"\\"The user who was invited to the enterprise.\\"\\"\\"
  invitee: GithubUser

  \\"\\"\\"The user who created the invitation.\\"\\"\\"
  inviter: GithubUser

  \\"\\"\\"
  The invitee's pending role in the enterprise (owner or billing_manager).
  \\"\\"\\"
  role: GithubEnterpriseAdministratorRole!
}

\\"\\"\\"The connection type for EnterpriseAdministratorInvitation.\\"\\"\\"
type GithubEnterpriseAdministratorInvitationConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseAdministratorInvitationEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseAdministratorInvitation]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnterpriseAdministratorInvitationEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseAdministratorInvitation
}

\\"\\"\\"Ordering options for enterprise administrator invitation connections\\"\\"\\"
input GithubEnterpriseAdministratorInvitationOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order enterprise administrator invitations by.\\"\\"\\"
  field: GithubEnterpriseAdministratorInvitationOrderField!
}

\\"\\"\\"
Properties by which enterprise administrator invitation connections can be ordered.
\\"\\"\\"
enum GithubEnterpriseAdministratorInvitationOrderField {
  \\"\\"\\"Order enterprise administrator member invitations by creation time\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"The possible administrator roles in an enterprise account.\\"\\"\\"
enum GithubEnterpriseAdministratorRole {
  \\"\\"\\"Represents a billing manager of the enterprise account.\\"\\"\\"
  BILLING_MANAGER

  \\"\\"\\"Represents an owner of the enterprise account.\\"\\"\\"
  OWNER
}

\\"\\"\\"Metadata for an audit entry containing enterprise account information.\\"\\"\\"
interface GithubEnterpriseAuditEntryData {
  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
}

\\"\\"\\"
Enterprise billing information visible to enterprise billing managers and owners.
\\"\\"\\"
type GithubEnterpriseBillingInfo {
  \\"\\"\\"The number of licenseable users/emails across the enterprise.\\"\\"\\"
  allLicensableUsersCount: Int!

  \\"\\"\\"
  The number of data packs used by all organizations owned by the enterprise.
  \\"\\"\\"
  assetPacks: Int!

  \\"\\"\\"
  The number of available seats across all owned organizations based on the unique number of billable users.
  \\"\\"\\"
  availableSeats: Int! @deprecated(reason: \\"\`availableSeats\` will be replaced with \`totalAvailableLicenses\` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.\\")

  \\"\\"\\"
  The bandwidth quota in GB for all organizations owned by the enterprise.
  \\"\\"\\"
  bandwidthQuota: Float!

  \\"\\"\\"
  The bandwidth usage in GB for all organizations owned by the enterprise.
  \\"\\"\\"
  bandwidthUsage: Float!

  \\"\\"\\"The bandwidth usage as a percentage of the bandwidth quota.\\"\\"\\"
  bandwidthUsagePercentage: Int!

  \\"\\"\\"The total seats across all organizations owned by the enterprise.\\"\\"\\"
  seats: Int! @deprecated(reason: \\"\`seats\` will be replaced with \`totalLicenses\` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.\\")

  \\"\\"\\"The storage quota in GB for all organizations owned by the enterprise.\\"\\"\\"
  storageQuota: Float!

  \\"\\"\\"The storage usage in GB for all organizations owned by the enterprise.\\"\\"\\"
  storageUsage: Float!

  \\"\\"\\"The storage usage as a percentage of the storage quota.\\"\\"\\"
  storageUsagePercentage: Int!

  \\"\\"\\"
  The number of available licenses across all owned organizations based on the unique number of billable users.
  \\"\\"\\"
  totalAvailableLicenses: Int!

  \\"\\"\\"The total number of licenses allocated.\\"\\"\\"
  totalLicenses: Int!
}

\\"\\"\\"
The possible values for the enterprise default repository permission setting.
\\"\\"\\"
enum GithubEnterpriseDefaultRepositoryPermissionSettingValue {
  \\"\\"\\"
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  \\"\\"\\"
  ADMIN

  \\"\\"\\"
  Organization members will only be able to clone and pull public repositories.
  \\"\\"\\"
  NONE

  \\"\\"\\"
  Organizations in the enterprise choose default repository permissions for their members.
  \\"\\"\\"
  NO_POLICY

  \\"\\"\\"
  Organization members will be able to clone and pull all organization repositories.
  \\"\\"\\"
  READ

  \\"\\"\\"
  Organization members will be able to clone, pull, and push all organization repositories.
  \\"\\"\\"
  WRITE
}

\\"\\"\\"The possible values for an enabled/disabled enterprise setting.\\"\\"\\"
enum GithubEnterpriseEnabledDisabledSettingValue {
  \\"\\"\\"The setting is disabled for organizations in the enterprise.\\"\\"\\"
  DISABLED

  \\"\\"\\"The setting is enabled for organizations in the enterprise.\\"\\"\\"
  ENABLED

  \\"\\"\\"There is no policy set for organizations in the enterprise.\\"\\"\\"
  NO_POLICY
}

\\"\\"\\"The possible values for an enabled/no policy enterprise setting.\\"\\"\\"
enum GithubEnterpriseEnabledSettingValue {
  \\"\\"\\"The setting is enabled for organizations in the enterprise.\\"\\"\\"
  ENABLED

  \\"\\"\\"There is no policy set for organizations in the enterprise.\\"\\"\\"
  NO_POLICY
}

\\"\\"\\"
An identity provider configured to provision identities for an enterprise.
\\"\\"\\"
type GithubEnterpriseIdentityProvider implements GithubNode {
  \\"\\"\\"
  The digest algorithm used to sign SAML requests for the identity provider.
  \\"\\"\\"
  digestMethod: GithubSamlDigestAlgorithm

  \\"\\"\\"The enterprise this identity provider belongs to.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"ExternalIdentities provisioned by this identity provider.\\"\\"\\"
  externalIdentities(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubExternalIdentityConnection!
  id: ID!

  \\"\\"\\"
  The x509 certificate used by the identity provider to sign assertions and responses.
  \\"\\"\\"
  idpCertificate: GithubX509Certificate

  \\"\\"\\"The Issuer Entity ID for the SAML identity provider.\\"\\"\\"
  issuer: String

  \\"\\"\\"
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  \\"\\"\\"
  recoveryCodes: [String!]

  \\"\\"\\"
  The signature algorithm used to sign SAML requests for the identity provider.
  \\"\\"\\"
  signatureMethod: GithubSamlSignatureAlgorithm

  \\"\\"\\"The URL endpoint for the identity provider's SAML SSO.\\"\\"\\"
  ssoUrl: GithubURI
}

\\"\\"\\"An object that is a member of an enterprise.\\"\\"\\"
union GithubEnterpriseMember = GithubEnterpriseUserAccount | GithubUser

\\"\\"\\"The connection type for EnterpriseMember.\\"\\"\\"
type GithubEnterpriseMemberConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseMemberEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseMember]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"
A User who is a member of an enterprise through one or more organizations.
\\"\\"\\"
type GithubEnterpriseMemberEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"Whether the user does not have a license for the enterprise.\\"\\"\\"
  isUnlicensed: Boolean! @deprecated(reason: \\"All members consume a license Removal on 2021-01-01 UTC.\\")

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseMember
}

\\"\\"\\"Ordering options for enterprise member connections.\\"\\"\\"
input GithubEnterpriseMemberOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order enterprise members by.\\"\\"\\"
  field: GithubEnterpriseMemberOrderField!
}

\\"\\"\\"Properties by which enterprise member connections can be ordered.\\"\\"\\"
enum GithubEnterpriseMemberOrderField {
  \\"\\"\\"Order enterprise members by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order enterprise members by login\\"\\"\\"
  LOGIN
}

\\"\\"\\"
The possible values for the enterprise members can create repositories setting.
\\"\\"\\"
enum GithubEnterpriseMembersCanCreateRepositoriesSettingValue {
  \\"\\"\\"Members will be able to create public and private repositories.\\"\\"\\"
  ALL

  \\"\\"\\"Members will not be able to create public or private repositories.\\"\\"\\"
  DISABLED

  \\"\\"\\"
  Organization administrators choose whether to allow members to create repositories.
  \\"\\"\\"
  NO_POLICY

  \\"\\"\\"Members will be able to create only private repositories.\\"\\"\\"
  PRIVATE

  \\"\\"\\"Members will be able to create only public repositories.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"The possible values for the members can make purchases setting.\\"\\"\\"
enum GithubEnterpriseMembersCanMakePurchasesSettingValue {
  \\"\\"\\"The setting is disabled for organizations in the enterprise.\\"\\"\\"
  DISABLED

  \\"\\"\\"The setting is enabled for organizations in the enterprise.\\"\\"\\"
  ENABLED
}

\\"\\"\\"The connection type for Organization.\\"\\"\\"
type GithubEnterpriseOrganizationMembershipConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseOrganizationMembershipEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubOrganization]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An enterprise organization that a user is a member of.\\"\\"\\"
type GithubEnterpriseOrganizationMembershipEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubOrganization

  \\"\\"\\"The role of the user in the enterprise membership.\\"\\"\\"
  role: GithubEnterpriseUserAccountMembershipRole!
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubEnterpriseOutsideCollaboratorConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseOutsideCollaboratorEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"
A User who is an outside collaborator of an enterprise through one or more organizations.
\\"\\"\\"
type GithubEnterpriseOutsideCollaboratorEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"
  Whether the outside collaborator does not have a license for the enterprise.
  \\"\\"\\"
  isUnlicensed: Boolean! @deprecated(reason: \\"All outside collaborators consume a license Removal on 2021-01-01 UTC.\\")

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubUser

  \\"\\"\\"The enterprise organization repositories this user is a member of.\\"\\"\\"
  repositories(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories.\\"\\"\\"
    orderBy: GithubRepositoryOrder = {direction: ASC, field: NAME}
  ): GithubEnterpriseRepositoryInfoConnection!
}

\\"\\"\\"Enterprise information only visible to enterprise owners.\\"\\"\\"
type GithubEnterpriseOwnerInfo {
  \\"\\"\\"A list of all of the administrators for this enterprise.\\"\\"\\"
  admins(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for administrators returned from the connection.\\"\\"\\"
    orderBy: GithubEnterpriseMemberOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String

    \\"\\"\\"The role to filter by.\\"\\"\\"
    role: GithubEnterpriseAdministratorRole
  ): GithubEnterpriseAdministratorConnection!

  \\"\\"\\"
  A list of users in the enterprise who currently have two-factor authentication disabled.
  \\"\\"\\"
  affiliatedUsersWithTwoFactorDisabled(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!

  \\"\\"\\"
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  \\"\\"\\"
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  \\"\\"\\"
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  \\"\\"\\"
  allowPrivateRepositoryForkingSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided private repository forking setting value.
  \\"\\"\\"
  allowPrivateRepositoryForkingSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  The setting value for base repository permissions for organizations in this enterprise.
  \\"\\"\\"
  defaultRepositoryPermissionSetting: GithubEnterpriseDefaultRepositoryPermissionSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided default repository permission.
  \\"\\"\\"
  defaultRepositoryPermissionSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The permission to find organizations for.\\"\\"\\"
    value: GithubDefaultRepositoryPermissionField!
  ): GithubOrganizationConnection!

  \\"\\"\\"A list of domains owned by the enterprise.\\"\\"\\"
  domains(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Filter whether or not the domain is approved.\\"\\"\\"
    isApproved: Boolean = null

    \\"\\"\\"Filter whether or not the domain is verified.\\"\\"\\"
    isVerified: Boolean = null

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for verifiable domains returned.\\"\\"\\"
    orderBy: GithubVerifiableDomainOrder = {direction: ASC, field: DOMAIN}
  ): GithubVerifiableDomainConnection!

  \\"\\"\\"Enterprise Server installations owned by the enterprise.\\"\\"\\"
  enterpriseServerInstallations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"
    Whether or not to only return installations discovered via GitHub Connect.
    \\"\\"\\"
    connectedOnly: Boolean = false

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for Enterprise Server installations returned.\\"\\"\\"
    orderBy: GithubEnterpriseServerInstallationOrder = {direction: ASC, field: HOST_NAME}
  ): GithubEnterpriseServerInstallationConnection!

  \\"\\"\\"
  The setting value for whether the enterprise has an IP allow list enabled.
  \\"\\"\\"
  ipAllowListEnabledSetting: GithubIpAllowListEnabledSettingValue!

  \\"\\"\\"
  The IP addresses that are allowed to access resources owned by the enterprise.
  \\"\\"\\"
  ipAllowListEntries(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for IP allow list entries returned.\\"\\"\\"
    orderBy: GithubIpAllowListEntryOrder = {direction: ASC, field: ALLOW_LIST_VALUE}
  ): GithubIpAllowListEntryConnection!

  \\"\\"\\"
  Whether or not the default repository permission is currently being updated.
  \\"\\"\\"
  isUpdatingDefaultRepositoryPermission: Boolean!

  \\"\\"\\"
  Whether the two-factor authentication requirement is currently being enforced.
  \\"\\"\\"
  isUpdatingTwoFactorRequirement: Boolean!

  \\"\\"\\"
  The setting value for whether organization members with admin permissions on a repository can change repository visibility.
  \\"\\"\\"
  membersCanChangeRepositoryVisibilitySetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided can change repository visibility setting value.
  \\"\\"\\"
  membersCanChangeRepositoryVisibilitySettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  The setting value for whether members of organizations in the enterprise can create internal repositories.
  \\"\\"\\"
  membersCanCreateInternalRepositoriesSetting: Boolean

  \\"\\"\\"
  The setting value for whether members of organizations in the enterprise can create private repositories.
  \\"\\"\\"
  membersCanCreatePrivateRepositoriesSetting: Boolean

  \\"\\"\\"
  The setting value for whether members of organizations in the enterprise can create public repositories.
  \\"\\"\\"
  membersCanCreatePublicRepositoriesSetting: Boolean

  \\"\\"\\"
  The setting value for whether members of organizations in the enterprise can create repositories.
  \\"\\"\\"
  membersCanCreateRepositoriesSetting: GithubEnterpriseMembersCanCreateRepositoriesSettingValue

  \\"\\"\\"
  A list of enterprise organizations configured with the provided repository creation setting value.
  \\"\\"\\"
  membersCanCreateRepositoriesSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting to find organizations for.\\"\\"\\"
    value: GithubOrganizationMembersCanCreateRepositoriesSettingValue!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  The setting value for whether members with admin permissions for repositories can delete issues.
  \\"\\"\\"
  membersCanDeleteIssuesSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided members can delete issues setting value.
  \\"\\"\\"
  membersCanDeleteIssuesSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
  \\"\\"\\"
  membersCanDeleteRepositoriesSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided members can delete repositories setting value.
  \\"\\"\\"
  membersCanDeleteRepositoriesSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  The setting value for whether members of organizations in the enterprise can invite outside collaborators.
  \\"\\"\\"
  membersCanInviteCollaboratorsSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided members can invite collaborators setting value.
  \\"\\"\\"
  membersCanInviteCollaboratorsSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
  \\"\\"\\"
  membersCanMakePurchasesSetting: GithubEnterpriseMembersCanMakePurchasesSettingValue!

  \\"\\"\\"
  The setting value for whether members with admin permissions for repositories can update protected branches.
  \\"\\"\\"
  membersCanUpdateProtectedBranchesSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided members can update protected branches setting value.
  \\"\\"\\"
  membersCanUpdateProtectedBranchesSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"The setting value for whether members can view dependency insights.\\"\\"\\"
  membersCanViewDependencyInsightsSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided members can view dependency insights setting value.
  \\"\\"\\"
  membersCanViewDependencyInsightsSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
  \\"\\"\\"
  notificationDeliveryRestrictionEnabledSetting: GithubNotificationRestrictionSettingValue!

  \\"\\"\\"
  The setting value for whether organization projects are enabled for organizations in this enterprise.
  \\"\\"\\"
  organizationProjectsSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided organization projects setting value.
  \\"\\"\\"
  organizationProjectsSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  A list of outside collaborators across the repositories in the enterprise.
  \\"\\"\\"
  outsideCollaborators(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"The login of one specific outside collaborator.\\"\\"\\"
    login: String

    \\"\\"\\"
    Ordering options for outside collaborators returned from the connection.
    \\"\\"\\"
    orderBy: GithubEnterpriseMemberOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String

    \\"\\"\\"
    Only return outside collaborators on repositories with this visibility.
    \\"\\"\\"
    visibility: GithubRepositoryVisibility
  ): GithubEnterpriseOutsideCollaboratorConnection!

  \\"\\"\\"A list of pending administrator invitations for the enterprise.\\"\\"\\"
  pendingAdminInvitations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for pending enterprise administrator invitations returned from the connection.
    \\"\\"\\"
    orderBy: GithubEnterpriseAdministratorInvitationOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String

    \\"\\"\\"The role to filter by.\\"\\"\\"
    role: GithubEnterpriseAdministratorRole
  ): GithubEnterpriseAdministratorInvitationConnection!

  \\"\\"\\"
  A list of pending collaborator invitations across the repositories in the enterprise.
  \\"\\"\\"
  pendingCollaboratorInvitations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for pending repository collaborator invitations returned from the connection.
    \\"\\"\\"
    orderBy: GithubRepositoryInvitationOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String
  ): GithubRepositoryInvitationConnection!

  \\"\\"\\"
  A list of pending collaborators across the repositories in the enterprise.
  \\"\\"\\"
  pendingCollaborators(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for pending repository collaborator invitations returned from the connection.
    \\"\\"\\"
    orderBy: GithubRepositoryInvitationOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String
  ): GithubEnterprisePendingCollaboratorConnection! @deprecated(reason: \\"Repository invitations can now be associated with an email, not only an invitee. Use the \`pendingCollaboratorInvitations\` field instead. Removal on 2020-10-01 UTC.\\")

  \\"\\"\\"
  A list of pending member invitations for organizations in the enterprise.
  \\"\\"\\"
  pendingMemberInvitations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String
  ): GithubEnterprisePendingMemberInvitationConnection!

  \\"\\"\\"
  The setting value for whether repository projects are enabled in this enterprise.
  \\"\\"\\"
  repositoryProjectsSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided repository projects setting value.
  \\"\\"\\"
  repositoryProjectsSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"The SAML Identity Provider for the enterprise.\\"\\"\\"
  samlIdentityProvider: GithubEnterpriseIdentityProvider

  \\"\\"\\"
  A list of enterprise organizations configured with the SAML single sign-on setting value.
  \\"\\"\\"
  samlIdentityProviderSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: GithubIdentityProviderConfigurationState!
  ): GithubOrganizationConnection!

  \\"\\"\\"A list of members with a support entitlement.\\"\\"\\"
  supportEntitlements(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for support entitlement users returned from the connection.
    \\"\\"\\"
    orderBy: GithubEnterpriseMemberOrder = {direction: ASC, field: LOGIN}
  ): GithubEnterpriseMemberConnection!

  \\"\\"\\"
  The setting value for whether team discussions are enabled for organizations in this enterprise.
  \\"\\"\\"
  teamDiscussionsSetting: GithubEnterpriseEnabledDisabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the provided team discussions setting value.
  \\"\\"\\"
  teamDiscussionsSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!

  \\"\\"\\"
  The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
  \\"\\"\\"
  twoFactorRequiredSetting: GithubEnterpriseEnabledSettingValue!

  \\"\\"\\"
  A list of enterprise organizations configured with the two-factor authentication setting value.
  \\"\\"\\"
  twoFactorRequiredSettingOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations with this setting.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The setting value to find organizations for.\\"\\"\\"
    value: Boolean!
  ): GithubOrganizationConnection!
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubEnterprisePendingCollaboratorConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterprisePendingCollaboratorEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"
A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
\\"\\"\\"
type GithubEnterprisePendingCollaboratorEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"
  Whether the invited collaborator does not have a license for the enterprise.
  \\"\\"\\"
  isUnlicensed: Boolean! @deprecated(reason: \\"All pending collaborators consume a license Removal on 2021-01-01 UTC.\\")

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubUser

  \\"\\"\\"The enterprise organization repositories this user is a member of.\\"\\"\\"
  repositories(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories.\\"\\"\\"
    orderBy: GithubRepositoryOrder = {direction: ASC, field: NAME}
  ): GithubEnterpriseRepositoryInfoConnection!
}

\\"\\"\\"The connection type for OrganizationInvitation.\\"\\"\\"
type GithubEnterprisePendingMemberInvitationConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterprisePendingMemberInvitationEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubOrganizationInvitation]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!

  \\"\\"\\"Identifies the total count of unique users in the connection.\\"\\"\\"
  totalUniqueUserCount: Int!
}

\\"\\"\\"An invitation to be a member in an enterprise organization.\\"\\"\\"
type GithubEnterprisePendingMemberInvitationEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"Whether the invitation has a license for the enterprise.\\"\\"\\"
  isUnlicensed: Boolean! @deprecated(reason: \\"All pending members consume a license Removal on 2020-07-01 UTC.\\")

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubOrganizationInvitation
}

\\"\\"\\"A subset of repository information queryable from an enterprise.\\"\\"\\"
type GithubEnterpriseRepositoryInfo implements GithubNode {
  id: ID!

  \\"\\"\\"Identifies if the repository is private or internal.\\"\\"\\"
  isPrivate: Boolean!

  \\"\\"\\"The repository's name.\\"\\"\\"
  name: String!

  \\"\\"\\"The repository's name with owner.\\"\\"\\"
  nameWithOwner: String!
}

\\"\\"\\"The connection type for EnterpriseRepositoryInfo.\\"\\"\\"
type GithubEnterpriseRepositoryInfoConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseRepositoryInfoEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseRepositoryInfo]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnterpriseRepositoryInfoEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseRepositoryInfo
}

\\"\\"\\"An Enterprise Server installation.\\"\\"\\"
type GithubEnterpriseServerInstallation implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The customer name to which the Enterprise Server installation belongs.\\"\\"\\"
  customerName: String!

  \\"\\"\\"The host name of the Enterprise Server installation.\\"\\"\\"
  hostName: String!
  id: ID!

  \\"\\"\\"
  Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
  \\"\\"\\"
  isConnected: Boolean!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"User accounts on this Enterprise Server installation.\\"\\"\\"
  userAccounts(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for Enterprise Server user accounts returned from the connection.
    \\"\\"\\"
    orderBy: GithubEnterpriseServerUserAccountOrder = {direction: ASC, field: LOGIN}
  ): GithubEnterpriseServerUserAccountConnection!

  \\"\\"\\"User accounts uploads for the Enterprise Server installation.\\"\\"\\"
  userAccountsUploads(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for Enterprise Server user accounts uploads returned from the connection.
    \\"\\"\\"
    orderBy: GithubEnterpriseServerUserAccountsUploadOrder = {direction: DESC, field: CREATED_AT}
  ): GithubEnterpriseServerUserAccountsUploadConnection!
}

\\"\\"\\"The connection type for EnterpriseServerInstallation.\\"\\"\\"
type GithubEnterpriseServerInstallationConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseServerInstallationEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseServerInstallation]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnterpriseServerInstallationEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseServerInstallation
}

\\"\\"\\"Ordering options for Enterprise Server installation connections.\\"\\"\\"
input GithubEnterpriseServerInstallationOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order Enterprise Server installations by.\\"\\"\\"
  field: GithubEnterpriseServerInstallationOrderField!
}

\\"\\"\\"
Properties by which Enterprise Server installation connections can be ordered.
\\"\\"\\"
enum GithubEnterpriseServerInstallationOrderField {
  \\"\\"\\"Order Enterprise Server installations by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order Enterprise Server installations by customer name\\"\\"\\"
  CUSTOMER_NAME

  \\"\\"\\"Order Enterprise Server installations by host name\\"\\"\\"
  HOST_NAME
}

\\"\\"\\"A user account on an Enterprise Server installation.\\"\\"\\"
type GithubEnterpriseServerUserAccount implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"User emails belonging to this user account.\\"\\"\\"
  emails(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for Enterprise Server user account emails returned from the connection.
    \\"\\"\\"
    orderBy: GithubEnterpriseServerUserAccountEmailOrder = {direction: ASC, field: EMAIL}
  ): GithubEnterpriseServerUserAccountEmailConnection!

  \\"\\"\\"The Enterprise Server installation on which this user account exists.\\"\\"\\"
  enterpriseServerInstallation: GithubEnterpriseServerInstallation!
  id: ID!

  \\"\\"\\"
  Whether the user account is a site administrator on the Enterprise Server installation.
  \\"\\"\\"
  isSiteAdmin: Boolean!

  \\"\\"\\"The login of the user account on the Enterprise Server installation.\\"\\"\\"
  login: String!

  \\"\\"\\"
  The profile name of the user account on the Enterprise Server installation.
  \\"\\"\\"
  profileName: String

  \\"\\"\\"
  The date and time when the user account was created on the Enterprise Server installation.
  \\"\\"\\"
  remoteCreatedAt: GithubDateTime!

  \\"\\"\\"The ID of the user account on the Enterprise Server installation.\\"\\"\\"
  remoteUserId: Int!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"The connection type for EnterpriseServerUserAccount.\\"\\"\\"
type GithubEnterpriseServerUserAccountConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseServerUserAccountEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseServerUserAccount]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnterpriseServerUserAccountEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseServerUserAccount
}

\\"\\"\\"
An email belonging to a user account on an Enterprise Server installation.
\\"\\"\\"
type GithubEnterpriseServerUserAccountEmail implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The email address.\\"\\"\\"
  email: String!
  id: ID!

  \\"\\"\\"
  Indicates whether this is the primary email of the associated user account.
  \\"\\"\\"
  isPrimary: Boolean!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The user account to which the email belongs.\\"\\"\\"
  userAccount: GithubEnterpriseServerUserAccount!
}

\\"\\"\\"The connection type for EnterpriseServerUserAccountEmail.\\"\\"\\"
type GithubEnterpriseServerUserAccountEmailConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseServerUserAccountEmailEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseServerUserAccountEmail]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnterpriseServerUserAccountEmailEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseServerUserAccountEmail
}

\\"\\"\\"Ordering options for Enterprise Server user account email connections.\\"\\"\\"
input GithubEnterpriseServerUserAccountEmailOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order emails by.\\"\\"\\"
  field: GithubEnterpriseServerUserAccountEmailOrderField!
}

\\"\\"\\"
Properties by which Enterprise Server user account email connections can be ordered.
\\"\\"\\"
enum GithubEnterpriseServerUserAccountEmailOrderField {
  \\"\\"\\"Order emails by email\\"\\"\\"
  EMAIL
}

\\"\\"\\"Ordering options for Enterprise Server user account connections.\\"\\"\\"
input GithubEnterpriseServerUserAccountOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order user accounts by.\\"\\"\\"
  field: GithubEnterpriseServerUserAccountOrderField!
}

\\"\\"\\"
Properties by which Enterprise Server user account connections can be ordered.
\\"\\"\\"
enum GithubEnterpriseServerUserAccountOrderField {
  \\"\\"\\"Order user accounts by login\\"\\"\\"
  LOGIN

  \\"\\"\\"
  Order user accounts by creation time on the Enterprise Server installation
  \\"\\"\\"
  REMOTE_CREATED_AT
}

\\"\\"\\"A user accounts upload from an Enterprise Server installation.\\"\\"\\"
type GithubEnterpriseServerUserAccountsUpload implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The enterprise to which this upload belongs.\\"\\"\\"
  enterprise: GithubEnterprise!

  \\"\\"\\"
  The Enterprise Server installation for which this upload was generated.
  \\"\\"\\"
  enterpriseServerInstallation: GithubEnterpriseServerInstallation!
  id: ID!

  \\"\\"\\"The name of the file uploaded.\\"\\"\\"
  name: String!

  \\"\\"\\"The synchronization state of the upload\\"\\"\\"
  syncState: GithubEnterpriseServerUserAccountsUploadSyncState!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"The connection type for EnterpriseServerUserAccountsUpload.\\"\\"\\"
type GithubEnterpriseServerUserAccountsUploadConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseServerUserAccountsUploadEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseServerUserAccountsUpload]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnterpriseServerUserAccountsUploadEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseServerUserAccountsUpload
}

\\"\\"\\"
Ordering options for Enterprise Server user accounts upload connections.
\\"\\"\\"
input GithubEnterpriseServerUserAccountsUploadOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order user accounts uploads by.\\"\\"\\"
  field: GithubEnterpriseServerUserAccountsUploadOrderField!
}

\\"\\"\\"
Properties by which Enterprise Server user accounts upload connections can be ordered.
\\"\\"\\"
enum GithubEnterpriseServerUserAccountsUploadOrderField {
  \\"\\"\\"Order user accounts uploads by creation time\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"Synchronization state of the Enterprise Server user accounts upload\\"\\"\\"
enum GithubEnterpriseServerUserAccountsUploadSyncState {
  \\"\\"\\"The synchronization of the upload failed.\\"\\"\\"
  FAILURE

  \\"\\"\\"The synchronization of the upload is pending.\\"\\"\\"
  PENDING

  \\"\\"\\"The synchronization of the upload succeeded.\\"\\"\\"
  SUCCESS
}

\\"\\"\\"
An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
\\"\\"\\"
type GithubEnterpriseUserAccount implements GithubActor & GithubNode {
  \\"\\"\\"A URL pointing to the enterprise user account's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The enterprise in which this user account exists.\\"\\"\\"
  enterprise: GithubEnterprise!
  id: ID!

  \\"\\"\\"
  An identifier for the enterprise user account, a login or email address
  \\"\\"\\"
  login: String!

  \\"\\"\\"The name of the enterprise user account\\"\\"\\"
  name: String

  \\"\\"\\"A list of enterprise organizations this user is a member of.\\"\\"\\"
  organizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for organizations returned from the connection.\\"\\"\\"
    orderBy: GithubOrganizationOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String

    \\"\\"\\"The role of the user in the enterprise organization.\\"\\"\\"
    role: GithubEnterpriseUserAccountMembershipRole
  ): GithubEnterpriseOrganizationMembershipConnection!

  \\"\\"\\"The HTTP path for this user.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this user.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"The user within the enterprise.\\"\\"\\"
  user: GithubUser
}

\\"\\"\\"The connection type for EnterpriseUserAccount.\\"\\"\\"
type GithubEnterpriseUserAccountConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnterpriseUserAccountEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnterpriseUserAccount]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnterpriseUserAccountEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnterpriseUserAccount
}

\\"\\"\\"The possible roles for enterprise membership.\\"\\"\\"
enum GithubEnterpriseUserAccountMembershipRole {
  \\"\\"\\"The user is a member of the enterprise membership.\\"\\"\\"
  MEMBER

  \\"\\"\\"The user is an owner of the enterprise membership.\\"\\"\\"
  OWNER
}

\\"\\"\\"The possible GitHub Enterprise deployments where this user can exist.\\"\\"\\"
enum GithubEnterpriseUserDeployment {
  \\"\\"\\"The user is part of a GitHub Enterprise Cloud deployment.\\"\\"\\"
  CLOUD

  \\"\\"\\"The user is part of a GitHub Enterprise Server deployment.\\"\\"\\"
  SERVER
}

\\"\\"\\"An environment.\\"\\"\\"
type GithubEnvironment implements GithubNode {
  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The name of the environment\\"\\"\\"
  name: String!

  \\"\\"\\"The protection rules defined for this environment\\"\\"\\"
  protectionRules(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDeploymentProtectionRuleConnection!
}

\\"\\"\\"The connection type for Environment.\\"\\"\\"
type GithubEnvironmentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubEnvironmentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubEnvironment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubEnvironmentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubEnvironment
}

\\"\\"\\"An external identity provisioned by SAML SSO or SCIM.\\"\\"\\"
type GithubExternalIdentity implements GithubNode {
  \\"\\"\\"The GUID for this identity\\"\\"\\"
  guid: String!
  id: ID!

  \\"\\"\\"Organization invitation for this SCIM-provisioned external identity\\"\\"\\"
  organizationInvitation: GithubOrganizationInvitation

  \\"\\"\\"SAML Identity attributes\\"\\"\\"
  samlIdentity: GithubExternalIdentitySamlAttributes

  \\"\\"\\"SCIM Identity attributes\\"\\"\\"
  scimIdentity: GithubExternalIdentityScimAttributes

  \\"\\"\\"
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  \\"\\"\\"
  user: GithubUser
}

\\"\\"\\"The connection type for ExternalIdentity.\\"\\"\\"
type GithubExternalIdentityConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubExternalIdentityEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubExternalIdentity]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubExternalIdentityEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubExternalIdentity
}

\\"\\"\\"SAML attributes for the External Identity\\"\\"\\"
type GithubExternalIdentitySamlAttributes {
  \\"\\"\\"The emails associated with the SAML identity\\"\\"\\"
  emails: [GithubUserEmailMetadata!]

  \\"\\"\\"Family name of the SAML identity\\"\\"\\"
  familyName: String

  \\"\\"\\"Given name of the SAML identity\\"\\"\\"
  givenName: String

  \\"\\"\\"The groups linked to this identity in IDP\\"\\"\\"
  groups: [String!]

  \\"\\"\\"The NameID of the SAML identity\\"\\"\\"
  nameId: String

  \\"\\"\\"The userName of the SAML identity\\"\\"\\"
  username: String
}

\\"\\"\\"SCIM attributes for the External Identity\\"\\"\\"
type GithubExternalIdentityScimAttributes {
  \\"\\"\\"The emails associated with the SCIM identity\\"\\"\\"
  emails: [GithubUserEmailMetadata!]

  \\"\\"\\"Family name of the SCIM identity\\"\\"\\"
  familyName: String

  \\"\\"\\"Given name of the SCIM identity\\"\\"\\"
  givenName: String

  \\"\\"\\"The groups linked to this identity in IDP\\"\\"\\"
  groups: [String!]

  \\"\\"\\"The userName of the SCIM identity\\"\\"\\"
  username: String
}

\\"\\"\\"The possible viewed states of a file .\\"\\"\\"
enum GithubFileViewedState {
  \\"\\"\\"The file has new changes since last viewed.\\"\\"\\"
  DISMISSED

  \\"\\"\\"The file has not been marked as viewed.\\"\\"\\"
  UNVIEWED

  \\"\\"\\"The file has been marked as viewed.\\"\\"\\"
  VIEWED
}

\\"\\"\\"Autogenerated input type of FollowUser\\"\\"\\"
input GithubFollowUserInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the user to follow.\\"\\"\\"
  userId: ID!
}

\\"\\"\\"Autogenerated return type of FollowUser\\"\\"\\"
type GithubFollowUserPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The user that was followed.\\"\\"\\"
  user: GithubUser
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubFollowerConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubUserEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubFollowingConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubUserEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A funding platform link for a repository.\\"\\"\\"
type GithubFundingLink {
  \\"\\"\\"The funding platform this link is for.\\"\\"\\"
  platform: GithubFundingPlatform!

  \\"\\"\\"The configured URL for this funding link.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The possible funding platforms for repository funding links.\\"\\"\\"
enum GithubFundingPlatform {
  \\"\\"\\"Community Bridge funding platform.\\"\\"\\"
  COMMUNITY_BRIDGE

  \\"\\"\\"Custom funding platform.\\"\\"\\"
  CUSTOM

  \\"\\"\\"GitHub funding platform.\\"\\"\\"
  GITHUB

  \\"\\"\\"IssueHunt funding platform.\\"\\"\\"
  ISSUEHUNT

  \\"\\"\\"Ko-fi funding platform.\\"\\"\\"
  KO_FI

  \\"\\"\\"Liberapay funding platform.\\"\\"\\"
  LIBERAPAY

  \\"\\"\\"Open Collective funding platform.\\"\\"\\"
  OPEN_COLLECTIVE

  \\"\\"\\"Otechie funding platform.\\"\\"\\"
  OTECHIE

  \\"\\"\\"Patreon funding platform.\\"\\"\\"
  PATREON

  \\"\\"\\"Tidelift funding platform.\\"\\"\\"
  TIDELIFT
}

\\"\\"\\"A generic hovercard context with a message and icon\\"\\"\\"
type GithubGenericHovercardContext implements GithubHovercardContext {
  \\"\\"\\"A string describing this context\\"\\"\\"
  message: String!

  \\"\\"\\"An octicon to accompany this context\\"\\"\\"
  octicon: String!
}

\\"\\"\\"A Gist.\\"\\"\\"
type GithubGist implements GithubNode & GithubStarrable & GithubUniformResourceLocatable {
  \\"\\"\\"A list of comments associated with the gist\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubGistCommentConnection!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The gist description.\\"\\"\\"
  description: String

  \\"\\"\\"The files in this gist.\\"\\"\\"
  files(
    \\"\\"\\"The maximum number of files to return.\\"\\"\\"
    limit: Int = 10

    \\"\\"\\"The oid of the files to return\\"\\"\\"
    oid: GithubGitObjectID
  ): [GithubGistFile]

  \\"\\"\\"A list of forks associated with the gist\\"\\"\\"
  forks(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for gists returned from the connection\\"\\"\\"
    orderBy: GithubGistOrder
  ): GithubGistConnection!
  id: ID!

  \\"\\"\\"Identifies if the gist is a fork.\\"\\"\\"
  isFork: Boolean!

  \\"\\"\\"Whether the gist is public or not.\\"\\"\\"
  isPublic: Boolean!

  \\"\\"\\"The gist name.\\"\\"\\"
  name: String!

  \\"\\"\\"The gist owner.\\"\\"\\"
  owner: GithubRepositoryOwner

  \\"\\"\\"Identifies when the gist was last pushed to.\\"\\"\\"
  pushedAt: GithubDateTime

  \\"\\"\\"The HTML path to this resource.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"
  Returns a count of how many stargazers there are on this object
  
  \\"\\"\\"
  stargazerCount: Int!

  \\"\\"\\"A list of users who have starred this starrable.\\"\\"\\"
  stargazers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubStarOrder
  ): GithubStargazerConnection!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this Gist.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  Returns a boolean indicating whether the viewing user has starred this starrable.
  \\"\\"\\"
  viewerHasStarred: Boolean!
}

\\"\\"\\"Represents a comment on an Gist.\\"\\"\\"
type GithubGistComment implements GithubComment & GithubDeletable & GithubMinimizable & GithubNode & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the gist.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"Identifies the comment body.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor

  \\"\\"\\"The associated gist.\\"\\"\\"
  gist: GithubGist!
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"Returns whether or not a comment has been minimized.\\"\\"\\"
  isMinimized: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Returns why the comment was minimized.\\"\\"\\"
  minimizedReason: String

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Check if the current viewer can minimize this object.\\"\\"\\"
  viewerCanMinimize: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!
}

\\"\\"\\"The connection type for GistComment.\\"\\"\\"
type GithubGistCommentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubGistCommentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubGistComment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubGistCommentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubGistComment
}

\\"\\"\\"The connection type for Gist.\\"\\"\\"
type GithubGistConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubGistEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubGist]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubGistEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubGist
}

\\"\\"\\"A file in a gist.\\"\\"\\"
type GithubGistFile {
  \\"\\"\\"
  The file name encoded to remove characters that are invalid in URL paths.
  \\"\\"\\"
  encodedName: String

  \\"\\"\\"The gist file encoding.\\"\\"\\"
  encoding: String

  \\"\\"\\"The file extension from the file name.\\"\\"\\"
  extension: String

  \\"\\"\\"Indicates if this file is an image.\\"\\"\\"
  isImage: Boolean!

  \\"\\"\\"Whether the file's contents were truncated.\\"\\"\\"
  isTruncated: Boolean!

  \\"\\"\\"The programming language this file is written in.\\"\\"\\"
  language: GithubLanguage

  \\"\\"\\"The gist file name.\\"\\"\\"
  name: String

  \\"\\"\\"The gist file size in bytes.\\"\\"\\"
  size: Int

  \\"\\"\\"UTF8 text data or null if the file is binary\\"\\"\\"
  text(
    \\"\\"\\"Optionally truncate the returned file to this length.\\"\\"\\"
    truncate: Int
  ): String
}

\\"\\"\\"Ordering options for gist connections\\"\\"\\"
input GithubGistOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order repositories by.\\"\\"\\"
  field: GithubGistOrderField!
}

\\"\\"\\"Properties by which gist connections can be ordered.\\"\\"\\"
enum GithubGistOrderField {
  \\"\\"\\"Order gists by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order gists by push time\\"\\"\\"
  PUSHED_AT

  \\"\\"\\"Order gists by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"The privacy of a Gist\\"\\"\\"
enum GithubGistPrivacy {
  \\"\\"\\"Gists that are public and secret\\"\\"\\"
  ALL

  \\"\\"\\"Public\\"\\"\\"
  PUBLIC

  \\"\\"\\"Secret\\"\\"\\"
  SECRET
}

\\"\\"\\"Represents an actor in a Git commit (ie. an author or committer).\\"\\"\\"
type GithubGitActor {
  \\"\\"\\"A URL pointing to the author's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"The timestamp of the Git action (authoring or committing).\\"\\"\\"
  date: GithubGitTimestamp

  \\"\\"\\"The email in the Git commit.\\"\\"\\"
  email: String

  \\"\\"\\"The name in the Git commit.\\"\\"\\"
  name: String

  \\"\\"\\"
  The GitHub user corresponding to the email field. Null if no such user exists.
  \\"\\"\\"
  user: GithubUser
}

\\"\\"\\"The connection type for GitActor.\\"\\"\\"
type GithubGitActorConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubGitActorEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubGitActor]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubGitActorEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubGitActor
}

\\"\\"\\"Represents information about the GitHub instance.\\"\\"\\"
type GithubGitHubMetadata {
  \\"\\"\\"Returns a String that's a SHA of \`github-services\`\\"\\"\\"
  gitHubServicesSha: GithubGitObjectID!

  \\"\\"\\"IP addresses that users connect to for git operations\\"\\"\\"
  gitIpAddresses: [String!]

  \\"\\"\\"IP addresses that service hooks are sent from\\"\\"\\"
  hookIpAddresses: [String!]

  \\"\\"\\"IP addresses that the importer connects from\\"\\"\\"
  importerIpAddresses: [String!]

  \\"\\"\\"Whether or not users are verified\\"\\"\\"
  isPasswordAuthenticationVerifiable: Boolean!

  \\"\\"\\"IP addresses for GitHub Pages' A records\\"\\"\\"
  pagesIpAddresses: [String!]
}

\\"\\"\\"Represents a Git object.\\"\\"\\"
interface GithubGitObject {
  \\"\\"\\"An abbreviated version of the Git object ID\\"\\"\\"
  abbreviatedOid: String!

  \\"\\"\\"The HTTP path for this Git object\\"\\"\\"
  commitResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this Git object\\"\\"\\"
  commitUrl: GithubURI!
  id: ID!

  \\"\\"\\"The Git object ID\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The Repository the Git object belongs to\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"A Git object ID.\\"\\"\\"
scalar GithubGitObjectID

\\"\\"\\"Git SSH string\\"\\"\\"
scalar GithubGitSSHRemote

\\"\\"\\"Information about a signature (GPG or S/MIME) on a Commit or Tag.\\"\\"\\"
interface GithubGitSignature {
  \\"\\"\\"Email used to sign this object.\\"\\"\\"
  email: String!

  \\"\\"\\"True if the signature is valid and verified by GitHub.\\"\\"\\"
  isValid: Boolean!

  \\"\\"\\"
  Payload for GPG signing object. Raw ODB object without the signature header.
  \\"\\"\\"
  payload: String!

  \\"\\"\\"ASCII-armored signature header from object.\\"\\"\\"
  signature: String!

  \\"\\"\\"GitHub user corresponding to the email signing this commit.\\"\\"\\"
  signer: GithubUser

  \\"\\"\\"
  The state of this signature. \`VALID\` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  \\"\\"\\"
  state: GithubGitSignatureState!

  \\"\\"\\"True if the signature was made with GitHub's signing key.\\"\\"\\"
  wasSignedByGitHub: Boolean!
}

\\"\\"\\"The state of a Git signature.\\"\\"\\"
enum GithubGitSignatureState {
  \\"\\"\\"The signing certificate or its chain could not be verified\\"\\"\\"
  BAD_CERT

  \\"\\"\\"Invalid email used for signing\\"\\"\\"
  BAD_EMAIL

  \\"\\"\\"Signing key expired\\"\\"\\"
  EXPIRED_KEY

  \\"\\"\\"Internal error - the GPG verification service misbehaved\\"\\"\\"
  GPGVERIFY_ERROR

  \\"\\"\\"
  Internal error - the GPG verification service is unavailable at the moment
  \\"\\"\\"
  GPGVERIFY_UNAVAILABLE

  \\"\\"\\"Invalid signature\\"\\"\\"
  INVALID

  \\"\\"\\"Malformed signature\\"\\"\\"
  MALFORMED_SIG

  \\"\\"\\"The usage flags for the key that signed this don't allow signing\\"\\"\\"
  NOT_SIGNING_KEY

  \\"\\"\\"Email used for signing not known to GitHub\\"\\"\\"
  NO_USER

  \\"\\"\\"Valid signature, though certificate revocation check failed\\"\\"\\"
  OCSP_ERROR

  \\"\\"\\"Valid signature, pending certificate revocation checking\\"\\"\\"
  OCSP_PENDING

  \\"\\"\\"One or more certificates in chain has been revoked\\"\\"\\"
  OCSP_REVOKED

  \\"\\"\\"Key used for signing not known to GitHub\\"\\"\\"
  UNKNOWN_KEY

  \\"\\"\\"Unknown signature type\\"\\"\\"
  UNKNOWN_SIG_TYPE

  \\"\\"\\"Unsigned\\"\\"\\"
  UNSIGNED

  \\"\\"\\"Email used for signing unverified on GitHub\\"\\"\\"
  UNVERIFIED_EMAIL

  \\"\\"\\"Valid signature and verified by GitHub\\"\\"\\"
  VALID
}

\\"\\"\\"
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
\\"\\"\\"
scalar GithubGitTimestamp

\\"\\"\\"Represents a GPG signature on a Commit or Tag.\\"\\"\\"
type GithubGpgSignature implements GithubGitSignature {
  \\"\\"\\"Email used to sign this object.\\"\\"\\"
  email: String!

  \\"\\"\\"True if the signature is valid and verified by GitHub.\\"\\"\\"
  isValid: Boolean!

  \\"\\"\\"Hex-encoded ID of the key that signed this object.\\"\\"\\"
  keyId: String

  \\"\\"\\"
  Payload for GPG signing object. Raw ODB object without the signature header.
  \\"\\"\\"
  payload: String!

  \\"\\"\\"ASCII-armored signature header from object.\\"\\"\\"
  signature: String!

  \\"\\"\\"GitHub user corresponding to the email signing this commit.\\"\\"\\"
  signer: GithubUser

  \\"\\"\\"
  The state of this signature. \`VALID\` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  \\"\\"\\"
  state: GithubGitSignatureState!

  \\"\\"\\"True if the signature was made with GitHub's signing key.\\"\\"\\"
  wasSignedByGitHub: Boolean!
}

\\"\\"\\"A string containing HTML code.\\"\\"\\"
scalar GithubHTML

\\"\\"\\"Represents a 'head_ref_deleted' event on a given pull request.\\"\\"\\"
type GithubHeadRefDeletedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the Ref associated with the \`head_ref_deleted\` event.\\"\\"\\"
  headRef: GithubRef

  \\"\\"\\"
  Identifies the name of the Ref associated with the \`head_ref_deleted\` event.
  \\"\\"\\"
  headRefName: String!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"Represents a 'head_ref_force_pushed' event on a given pull request.\\"\\"\\"
type GithubHeadRefForcePushedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the after commit SHA for the 'head_ref_force_pushed' event.\\"\\"\\"
  afterCommit: GithubCommit

  \\"\\"\\"
  Identifies the before commit SHA for the 'head_ref_force_pushed' event.
  \\"\\"\\"
  beforeCommit: GithubCommit

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"
  Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
  \\"\\"\\"
  ref: GithubRef
}

\\"\\"\\"Represents a 'head_ref_restored' event on a given pull request.\\"\\"\\"
type GithubHeadRefRestoredEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"Detail needed to display a hovercard for a user\\"\\"\\"
type GithubHovercard {
  \\"\\"\\"Each of the contexts for this hovercard\\"\\"\\"
  contexts: [GithubHovercardContext!]!
}

\\"\\"\\"An individual line of a hovercard\\"\\"\\"
interface GithubHovercardContext {
  \\"\\"\\"A string describing this context\\"\\"\\"
  message: String!

  \\"\\"\\"An octicon to accompany this context\\"\\"\\"
  octicon: String!
}

\\"\\"\\"
The possible states in which authentication can be configured with an identity provider.
\\"\\"\\"
enum GithubIdentityProviderConfigurationState {
  \\"\\"\\"
  Authentication with an identity provider is configured but not enforced.
  \\"\\"\\"
  CONFIGURED

  \\"\\"\\"Authentication with an identity provider is configured and enforced.\\"\\"\\"
  ENFORCED

  \\"\\"\\"Authentication with an identity provider is not configured.\\"\\"\\"
  UNCONFIGURED
}

\\"\\"\\"Autogenerated input type of InviteEnterpriseAdmin\\"\\"\\"
input GithubInviteEnterpriseAdminInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The email of the person to invite as an administrator.\\"\\"\\"
  email: String

  \\"\\"\\"The ID of the enterprise to which you want to invite an administrator.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The login of a user to invite as an administrator.\\"\\"\\"
  invitee: String

  \\"\\"\\"The role of the administrator.\\"\\"\\"
  role: GithubEnterpriseAdministratorRole
}

\\"\\"\\"Autogenerated return type of InviteEnterpriseAdmin\\"\\"\\"
type GithubInviteEnterpriseAdminPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The created enterprise administrator invitation.\\"\\"\\"
  invitation: GithubEnterpriseAdministratorInvitation
}

\\"\\"\\"The possible values for the IP allow list enabled setting.\\"\\"\\"
enum GithubIpAllowListEnabledSettingValue {
  \\"\\"\\"The setting is disabled for the owner.\\"\\"\\"
  DISABLED

  \\"\\"\\"The setting is enabled for the owner.\\"\\"\\"
  ENABLED
}

\\"\\"\\"
An IP address or range of addresses that is allowed to access an owner's resources.
\\"\\"\\"
type GithubIpAllowListEntry implements GithubNode {
  \\"\\"\\"A single IP address or range of IP addresses in CIDR notation.\\"\\"\\"
  allowListValue: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Whether the entry is currently active.\\"\\"\\"
  isActive: Boolean!

  \\"\\"\\"The name of the IP allow list entry.\\"\\"\\"
  name: String

  \\"\\"\\"The owner of the IP allow list entry.\\"\\"\\"
  owner: GithubIpAllowListOwner!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"The connection type for IpAllowListEntry.\\"\\"\\"
type GithubIpAllowListEntryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubIpAllowListEntryEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubIpAllowListEntry]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubIpAllowListEntryEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubIpAllowListEntry
}

\\"\\"\\"Ordering options for IP allow list entry connections.\\"\\"\\"
input GithubIpAllowListEntryOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order IP allow list entries by.\\"\\"\\"
  field: GithubIpAllowListEntryOrderField!
}

\\"\\"\\"Properties by which IP allow list entry connections can be ordered.\\"\\"\\"
enum GithubIpAllowListEntryOrderField {
  \\"\\"\\"Order IP allow list entries by the allow list value.\\"\\"\\"
  ALLOW_LIST_VALUE

  \\"\\"\\"Order IP allow list entries by creation time.\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"Types that can own an IP allow list.\\"\\"\\"
union GithubIpAllowListOwner = GithubEnterprise | GithubOrganization

\\"\\"\\"
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
\\"\\"\\"
type GithubIssue implements GithubAssignable & GithubClosable & GithubComment & GithubLabelable & GithubLockable & GithubNode & GithubReactable & GithubRepositoryNode & GithubSubscribable & GithubUniformResourceLocatable & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"Reason that the conversation was locked.\\"\\"\\"
  activeLockReason: GithubLockReason

  \\"\\"\\"A list of Users assigned to this object.\\"\\"\\"
  assignees(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!

  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"Identifies the body of the issue.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The http path for this issue body\\"\\"\\"
  bodyResourcePath: GithubURI!

  \\"\\"\\"Identifies the body of the issue rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"The http URL for this issue body\\"\\"\\"
  bodyUrl: GithubURI!

  \\"\\"\\"
  \`true\` if the object is closed (definition of closed may depend on type)
  \\"\\"\\"
  closed: Boolean!

  \\"\\"\\"Identifies the date and time when the object was closed.\\"\\"\\"
  closedAt: GithubDateTime

  \\"\\"\\"A list of comments associated with the Issue.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issue comments returned from the connection.\\"\\"\\"
    orderBy: GithubIssueCommentOrder
  ): GithubIssueCommentConnection!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor

  \\"\\"\\"The hovercard information for this issue\\"\\"\\"
  hovercard(
    \\"\\"\\"Whether or not to include notification contexts\\"\\"\\"
    includeNotificationContexts: Boolean = true
  ): GithubHovercard!
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"
  Indicates whether or not this issue is currently pinned to the repository issues list
  \\"\\"\\"
  isPinned: Boolean

  \\"\\"\\"Is this issue read by the viewer\\"\\"\\"
  isReadByViewer: Boolean

  \\"\\"\\"A list of labels associated with the object.\\"\\"\\"
  labels(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for labels returned from the connection.\\"\\"\\"
    orderBy: GithubLabelOrder = {direction: ASC, field: CREATED_AT}
  ): GithubLabelConnection

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"\`true\` if the object is locked\\"\\"\\"
  locked: Boolean!

  \\"\\"\\"Identifies the milestone associated with the issue.\\"\\"\\"
  milestone: GithubMilestone

  \\"\\"\\"Identifies the issue number.\\"\\"\\"
  number: Int!

  \\"\\"\\"A list of Users that are participating in the Issue conversation.\\"\\"\\"
  participants(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!

  \\"\\"\\"List of project cards associated with this issue.\\"\\"\\"
  projectCards(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"A list of archived states to filter the cards by\\"\\"\\"
    archivedStates: [GithubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubProjectCardConnection!

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this issue\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the state of the issue.\\"\\"\\"
  state: GithubIssueState!

  \\"\\"\\"A list of events, comments, commits, etc. associated with the issue.\\"\\"\\"
  timeline(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows filtering timeline events by a \`since\` timestamp.\\"\\"\\"
    since: GithubDateTime
  ): GithubIssueTimelineConnection! @deprecated(reason: \\"\`timeline\` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.\\")

  \\"\\"\\"A list of events, comments, commits, etc. associated with the issue.\\"\\"\\"
  timelineItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Filter timeline items by type.\\"\\"\\"
    itemTypes: [GithubIssueTimelineItemsItemType!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter timeline items by a \`since\` timestamp.\\"\\"\\"
    since: GithubDateTime

    \\"\\"\\"Skips the first _n_ elements in the list.\\"\\"\\"
    skip: Int
  ): GithubIssueTimelineItemsConnection!

  \\"\\"\\"Identifies the issue title.\\"\\"\\"
  title: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this issue\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState
}

\\"\\"\\"Represents a comment on an Issue.\\"\\"\\"
type GithubIssueComment implements GithubComment & GithubDeletable & GithubMinimizable & GithubNode & GithubReactable & GithubRepositoryNode & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"The body as Markdown.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"Returns whether or not a comment has been minimized.\\"\\"\\"
  isMinimized: Boolean!

  \\"\\"\\"Identifies the issue associated with the comment.\\"\\"\\"
  issue: GithubIssue!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Returns why the comment was minimized.\\"\\"\\"
  minimizedReason: String

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  
  \\"\\"\\"
  pullRequest: GithubPullRequest

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this issue comment\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this issue comment\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Check if the current viewer can minimize this object.\\"\\"\\"
  viewerCanMinimize: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!
}

\\"\\"\\"The connection type for IssueComment.\\"\\"\\"
type GithubIssueCommentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubIssueCommentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubIssueComment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubIssueCommentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubIssueComment
}

\\"\\"\\"Ways in which lists of issue comments can be ordered upon return.\\"\\"\\"
input GithubIssueCommentOrder {
  \\"\\"\\"The direction in which to order issue comments by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order issue comments by.\\"\\"\\"
  field: GithubIssueCommentOrderField!
}

\\"\\"\\"Properties by which issue comment connections can be ordered.\\"\\"\\"
enum GithubIssueCommentOrderField {
  \\"\\"\\"Order issue comments by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"The connection type for Issue.\\"\\"\\"
type GithubIssueConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubIssueEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubIssue]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"This aggregates issues opened by a user within one repository.\\"\\"\\"
type GithubIssueContributionsByRepository {
  \\"\\"\\"The issue contributions.\\"\\"\\"
  contributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for contributions returned from the connection.\\"\\"\\"
    orderBy: GithubContributionOrder = {direction: DESC}
  ): GithubCreatedIssueContributionConnection!

  \\"\\"\\"The repository in which the issues were opened.\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubIssueEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubIssue
}

\\"\\"\\"Ways in which to filter lists of issues.\\"\\"\\"
input GithubIssueFilters {
  \\"\\"\\"
  List issues assigned to given name. Pass in \`null\` for issues with no assigned user, and \`*\` for issues assigned to any user.
  \\"\\"\\"
  assignee: String

  \\"\\"\\"List issues created by given name.\\"\\"\\"
  createdBy: String

  \\"\\"\\"List issues where the list of label names exist on the issue.\\"\\"\\"
  labels: [String!]

  \\"\\"\\"List issues where the given name is mentioned in the issue.\\"\\"\\"
  mentioned: String

  \\"\\"\\"
  List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in \`null\` for issues with no milestone, and \`*\` for issues that are assigned to any milestone.
  \\"\\"\\"
  milestone: String

  \\"\\"\\"List issues that have been updated at or after the given date.\\"\\"\\"
  since: GithubDateTime

  \\"\\"\\"List issues filtered by the list of states given.\\"\\"\\"
  states: [GithubIssueState!]

  \\"\\"\\"List issues subscribed to by viewer.\\"\\"\\"
  viewerSubscribed: Boolean = false
}

\\"\\"\\"Used for return value of Repository.issueOrPullRequest.\\"\\"\\"
union GithubIssueOrPullRequest = GithubIssue | GithubPullRequest

\\"\\"\\"Ways in which lists of issues can be ordered upon return.\\"\\"\\"
input GithubIssueOrder {
  \\"\\"\\"The direction in which to order issues by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order issues by.\\"\\"\\"
  field: GithubIssueOrderField!
}

\\"\\"\\"Properties by which issue connections can be ordered.\\"\\"\\"
enum GithubIssueOrderField {
  \\"\\"\\"Order issues by comment count\\"\\"\\"
  COMMENTS

  \\"\\"\\"Order issues by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order issues by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"The possible states of an issue.\\"\\"\\"
enum GithubIssueState {
  \\"\\"\\"An issue that has been closed\\"\\"\\"
  CLOSED

  \\"\\"\\"An issue that is still open\\"\\"\\"
  OPEN
}

\\"\\"\\"A repository issue template.\\"\\"\\"
type GithubIssueTemplate {
  \\"\\"\\"The template purpose.\\"\\"\\"
  about: String

  \\"\\"\\"The suggested issue body.\\"\\"\\"
  body: String

  \\"\\"\\"The template name.\\"\\"\\"
  name: String!

  \\"\\"\\"The suggested issue title.\\"\\"\\"
  title: String
}

\\"\\"\\"The connection type for IssueTimelineItem.\\"\\"\\"
type GithubIssueTimelineConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubIssueTimelineItemEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubIssueTimelineItem]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An item in an issue timeline\\"\\"\\"
union GithubIssueTimelineItem = GithubAssignedEvent | GithubClosedEvent | GithubCommit | GithubCrossReferencedEvent | GithubDemilestonedEvent | GithubIssueComment | GithubLabeledEvent | GithubLockedEvent | GithubMilestonedEvent | GithubReferencedEvent | GithubRenamedTitleEvent | GithubReopenedEvent | GithubSubscribedEvent | GithubTransferredEvent | GithubUnassignedEvent | GithubUnlabeledEvent | GithubUnlockedEvent | GithubUnsubscribedEvent | GithubUserBlockedEvent

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubIssueTimelineItemEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubIssueTimelineItem
}

\\"\\"\\"An item in an issue timeline\\"\\"\\"
union GithubIssueTimelineItems = GithubAddedToProjectEvent | GithubAssignedEvent | GithubClosedEvent | GithubCommentDeletedEvent | GithubConnectedEvent | GithubConvertedNoteToIssueEvent | GithubCrossReferencedEvent | GithubDemilestonedEvent | GithubDisconnectedEvent | GithubIssueComment | GithubLabeledEvent | GithubLockedEvent | GithubMarkedAsDuplicateEvent | GithubMentionedEvent | GithubMilestonedEvent | GithubMovedColumnsInProjectEvent | GithubPinnedEvent | GithubReferencedEvent | GithubRemovedFromProjectEvent | GithubRenamedTitleEvent | GithubReopenedEvent | GithubSubscribedEvent | GithubTransferredEvent | GithubUnassignedEvent | GithubUnlabeledEvent | GithubUnlockedEvent | GithubUnmarkedAsDuplicateEvent | GithubUnpinnedEvent | GithubUnsubscribedEvent | GithubUserBlockedEvent

\\"\\"\\"The connection type for IssueTimelineItems.\\"\\"\\"
type GithubIssueTimelineItemsConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubIssueTimelineItemsEdge]

  \\"\\"\\"
  Identifies the count of items after applying \`before\` and \`after\` filters.
  \\"\\"\\"
  filteredCount: Int!

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubIssueTimelineItems]

  \\"\\"\\"
  Identifies the count of items after applying \`before\`/\`after\` filters and \`first\`/\`last\`/\`skip\` slicing.
  \\"\\"\\"
  pageCount: Int!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!

  \\"\\"\\"Identifies the date and time when the timeline was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubIssueTimelineItemsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubIssueTimelineItems
}

\\"\\"\\"The possible item types found in a timeline.\\"\\"\\"
enum GithubIssueTimelineItemsItemType {
  \\"\\"\\"
  Represents a 'added_to_project' event on a given issue or pull request.
  \\"\\"\\"
  ADDED_TO_PROJECT_EVENT

  \\"\\"\\"Represents an 'assigned' event on any assignable object.\\"\\"\\"
  ASSIGNED_EVENT

  \\"\\"\\"Represents a 'closed' event on any \`Closable\`.\\"\\"\\"
  CLOSED_EVENT

  \\"\\"\\"Represents a 'comment_deleted' event on a given issue or pull request.\\"\\"\\"
  COMMENT_DELETED_EVENT

  \\"\\"\\"Represents a 'connected' event on a given issue or pull request.\\"\\"\\"
  CONNECTED_EVENT

  \\"\\"\\"
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  \\"\\"\\"
  CONVERTED_NOTE_TO_ISSUE_EVENT

  \\"\\"\\"Represents a mention made by one issue or pull request to another.\\"\\"\\"
  CROSS_REFERENCED_EVENT

  \\"\\"\\"Represents a 'demilestoned' event on a given issue or pull request.\\"\\"\\"
  DEMILESTONED_EVENT

  \\"\\"\\"Represents a 'disconnected' event on a given issue or pull request.\\"\\"\\"
  DISCONNECTED_EVENT

  \\"\\"\\"Represents a comment on an Issue.\\"\\"\\"
  ISSUE_COMMENT

  \\"\\"\\"Represents a 'labeled' event on a given issue or pull request.\\"\\"\\"
  LABELED_EVENT

  \\"\\"\\"Represents a 'locked' event on a given issue or pull request.\\"\\"\\"
  LOCKED_EVENT

  \\"\\"\\"
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  \\"\\"\\"
  MARKED_AS_DUPLICATE_EVENT

  \\"\\"\\"Represents a 'mentioned' event on a given issue or pull request.\\"\\"\\"
  MENTIONED_EVENT

  \\"\\"\\"Represents a 'milestoned' event on a given issue or pull request.\\"\\"\\"
  MILESTONED_EVENT

  \\"\\"\\"
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  \\"\\"\\"
  MOVED_COLUMNS_IN_PROJECT_EVENT

  \\"\\"\\"Represents a 'pinned' event on a given issue or pull request.\\"\\"\\"
  PINNED_EVENT

  \\"\\"\\"Represents a 'referenced' event on a given \`ReferencedSubject\`.\\"\\"\\"
  REFERENCED_EVENT

  \\"\\"\\"
  Represents a 'removed_from_project' event on a given issue or pull request.
  \\"\\"\\"
  REMOVED_FROM_PROJECT_EVENT

  \\"\\"\\"Represents a 'renamed' event on a given issue or pull request\\"\\"\\"
  RENAMED_TITLE_EVENT

  \\"\\"\\"Represents a 'reopened' event on any \`Closable\`.\\"\\"\\"
  REOPENED_EVENT

  \\"\\"\\"Represents a 'subscribed' event on a given \`Subscribable\`.\\"\\"\\"
  SUBSCRIBED_EVENT

  \\"\\"\\"Represents a 'transferred' event on a given issue or pull request.\\"\\"\\"
  TRANSFERRED_EVENT

  \\"\\"\\"Represents an 'unassigned' event on any assignable object.\\"\\"\\"
  UNASSIGNED_EVENT

  \\"\\"\\"Represents an 'unlabeled' event on a given issue or pull request.\\"\\"\\"
  UNLABELED_EVENT

  \\"\\"\\"Represents an 'unlocked' event on a given issue or pull request.\\"\\"\\"
  UNLOCKED_EVENT

  \\"\\"\\"
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  \\"\\"\\"
  UNMARKED_AS_DUPLICATE_EVENT

  \\"\\"\\"Represents an 'unpinned' event on a given issue or pull request.\\"\\"\\"
  UNPINNED_EVENT

  \\"\\"\\"Represents an 'unsubscribed' event on a given \`Subscribable\`.\\"\\"\\"
  UNSUBSCRIBED_EVENT

  \\"\\"\\"Represents a 'user_blocked' event on a given user.\\"\\"\\"
  USER_BLOCKED_EVENT
}

\\"\\"\\"Represents a user signing up for a GitHub account.\\"\\"\\"
type GithubJoinedGitHubContribution implements GithubContribution {
  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"
A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
\\"\\"\\"
type GithubLabel implements GithubNode {
  \\"\\"\\"Identifies the label color.\\"\\"\\"
  color: String!

  \\"\\"\\"Identifies the date and time when the label was created.\\"\\"\\"
  createdAt: GithubDateTime

  \\"\\"\\"A brief description of this label.\\"\\"\\"
  description: String
  id: ID!

  \\"\\"\\"Indicates whether or not this is a default label.\\"\\"\\"
  isDefault: Boolean!

  \\"\\"\\"A list of issues associated with this label.\\"\\"\\"
  issues(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Filtering options for issues returned from the connection.\\"\\"\\"
    filterBy: GithubIssueFilters

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issues returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the issues by.\\"\\"\\"
    states: [GithubIssueState!]
  ): GithubIssueConnection!

  \\"\\"\\"Identifies the label name.\\"\\"\\"
  name: String!

  \\"\\"\\"A list of pull requests associated with this label.\\"\\"\\"
  pullRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"The base ref name to filter the pull requests by.\\"\\"\\"
    baseRefName: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"The head ref name to filter the pull requests by.\\"\\"\\"
    headRefName: String

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for pull requests returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the pull requests by.\\"\\"\\"
    states: [GithubPullRequestState!]
  ): GithubPullRequestConnection!

  \\"\\"\\"The repository associated with this label.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this label.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the label was last updated.\\"\\"\\"
  updatedAt: GithubDateTime

  \\"\\"\\"The HTTP URL for this label.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The connection type for Label.\\"\\"\\"
type GithubLabelConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubLabelEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubLabel]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubLabelEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubLabel
}

\\"\\"\\"Ways in which lists of labels can be ordered upon return.\\"\\"\\"
input GithubLabelOrder {
  \\"\\"\\"The direction in which to order labels by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order labels by.\\"\\"\\"
  field: GithubLabelOrderField!
}

\\"\\"\\"Properties by which label connections can be ordered.\\"\\"\\"
enum GithubLabelOrderField {
  \\"\\"\\"Order labels by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order labels by name \\"\\"\\"
  NAME
}

\\"\\"\\"An object that can have labels assigned to it.\\"\\"\\"
interface GithubLabelable {
  \\"\\"\\"A list of labels associated with the object.\\"\\"\\"
  labels(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for labels returned from the connection.\\"\\"\\"
    orderBy: GithubLabelOrder = {direction: ASC, field: CREATED_AT}
  ): GithubLabelConnection
}

\\"\\"\\"Represents a 'labeled' event on a given issue or pull request.\\"\\"\\"
type GithubLabeledEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the label associated with the 'labeled' event.\\"\\"\\"
  label: GithubLabel!

  \\"\\"\\"Identifies the \`Labelable\` associated with the event.\\"\\"\\"
  labelable: GithubLabelable!
}

\\"\\"\\"Represents a given language found in repositories.\\"\\"\\"
type GithubLanguage implements GithubNode {
  \\"\\"\\"The color defined for the current language.\\"\\"\\"
  color: String
  id: ID!

  \\"\\"\\"The name of the current language.\\"\\"\\"
  name: String!
}

\\"\\"\\"A list of languages associated with the parent.\\"\\"\\"
type GithubLanguageConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubLanguageEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubLanguage]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!

  \\"\\"\\"The total size in bytes of files written in that language.\\"\\"\\"
  totalSize: Int!
}

\\"\\"\\"Represents the language of a repository.\\"\\"\\"
type GithubLanguageEdge {
  cursor: String!
  node: GithubLanguage!

  \\"\\"\\"The number of bytes of code written in the language.\\"\\"\\"
  size: Int!
}

\\"\\"\\"Ordering options for language connections.\\"\\"\\"
input GithubLanguageOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order languages by.\\"\\"\\"
  field: GithubLanguageOrderField!
}

\\"\\"\\"Properties by which language connections can be ordered.\\"\\"\\"
enum GithubLanguageOrderField {
  \\"\\"\\"Order languages by the size of all files containing the language\\"\\"\\"
  SIZE
}

\\"\\"\\"A repository's open source license\\"\\"\\"
type GithubLicense implements GithubNode {
  \\"\\"\\"The full text of the license\\"\\"\\"
  body: String!

  \\"\\"\\"The conditions set by the license\\"\\"\\"
  conditions: [GithubLicenseRule]!

  \\"\\"\\"A human-readable description of the license\\"\\"\\"
  description: String

  \\"\\"\\"Whether the license should be featured\\"\\"\\"
  featured: Boolean!

  \\"\\"\\"Whether the license should be displayed in license pickers\\"\\"\\"
  hidden: Boolean!
  id: ID!

  \\"\\"\\"Instructions on how to implement the license\\"\\"\\"
  implementation: String

  \\"\\"\\"The lowercased SPDX ID of the license\\"\\"\\"
  key: String!

  \\"\\"\\"The limitations set by the license\\"\\"\\"
  limitations: [GithubLicenseRule]!

  \\"\\"\\"The license full name specified by <https://spdx.org/licenses>\\"\\"\\"
  name: String!

  \\"\\"\\"Customary short name if applicable (e.g, GPLv3)\\"\\"\\"
  nickname: String

  \\"\\"\\"The permissions set by the license\\"\\"\\"
  permissions: [GithubLicenseRule]!

  \\"\\"\\"
  Whether the license is a pseudo-license placeholder (e.g., other, no-license)
  \\"\\"\\"
  pseudoLicense: Boolean!

  \\"\\"\\"Short identifier specified by <https://spdx.org/licenses>\\"\\"\\"
  spdxId: String

  \\"\\"\\"URL to the license on <https://choosealicense.com>\\"\\"\\"
  url: GithubURI
}

\\"\\"\\"Describes a License's conditions, permissions, and limitations\\"\\"\\"
type GithubLicenseRule {
  \\"\\"\\"A description of the rule\\"\\"\\"
  description: String!

  \\"\\"\\"The machine-readable rule key\\"\\"\\"
  key: String!

  \\"\\"\\"The human-readable rule label\\"\\"\\"
  label: String!
}

\\"\\"\\"Autogenerated input type of LinkRepositoryToProject\\"\\"\\"
input GithubLinkRepositoryToProjectInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the Project to link to a Repository\\"\\"\\"
  projectId: ID!

  \\"\\"\\"The ID of the Repository to link to a Project.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of LinkRepositoryToProject\\"\\"\\"
type GithubLinkRepositoryToProjectPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The linked Project.\\"\\"\\"
  project: GithubProject

  \\"\\"\\"The linked Repository.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Autogenerated input type of LockLockable\\"\\"\\"
input GithubLockLockableInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"A reason for why the item will be locked.\\"\\"\\"
  lockReason: GithubLockReason

  \\"\\"\\"ID of the item to be locked.\\"\\"\\"
  lockableId: ID!
}

\\"\\"\\"Autogenerated return type of LockLockable\\"\\"\\"
type GithubLockLockablePayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The item that was locked.\\"\\"\\"
  lockedRecord: GithubLockable
}

\\"\\"\\"The possible reasons that an issue or pull request was locked.\\"\\"\\"
enum GithubLockReason {
  \\"\\"\\"
  The issue or pull request was locked because the conversation was off-topic.
  \\"\\"\\"
  OFF_TOPIC

  \\"\\"\\"
  The issue or pull request was locked because the conversation was resolved.
  \\"\\"\\"
  RESOLVED

  \\"\\"\\"
  The issue or pull request was locked because the conversation was spam.
  \\"\\"\\"
  SPAM

  \\"\\"\\"
  The issue or pull request was locked because the conversation was too heated.
  \\"\\"\\"
  TOO_HEATED
}

\\"\\"\\"An object that can be locked.\\"\\"\\"
interface GithubLockable {
  \\"\\"\\"Reason that the conversation was locked.\\"\\"\\"
  activeLockReason: GithubLockReason

  \\"\\"\\"\`true\` if the object is locked\\"\\"\\"
  locked: Boolean!
}

\\"\\"\\"Represents a 'locked' event on a given issue or pull request.\\"\\"\\"
type GithubLockedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Reason that the conversation was locked (optional).\\"\\"\\"
  lockReason: GithubLockReason

  \\"\\"\\"Object that was locked.\\"\\"\\"
  lockable: GithubLockable!
}

\\"\\"\\"A placeholder user for attribution of imported data on GitHub.\\"\\"\\"
type GithubMannequin implements GithubActor & GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"A URL pointing to the GitHub App's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"The user that has claimed the data attributed to this mannequin.\\"\\"\\"
  claimant: GithubUser

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The mannequin's email on the source instance.\\"\\"\\"
  email: String
  id: ID!

  \\"\\"\\"The username of the actor.\\"\\"\\"
  login: String!

  \\"\\"\\"The HTML path to this resource.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The URL to this resource.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Autogenerated input type of MarkDiscussionCommentAsAnswer\\"\\"\\"
input GithubMarkDiscussionCommentAsAnswerInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion comment to mark as an answer.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of MarkDiscussionCommentAsAnswer\\"\\"\\"
type GithubMarkDiscussionCommentAsAnswerPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The discussion that includes the chosen comment.\\"\\"\\"
  discussion: GithubDiscussion
}

\\"\\"\\"Autogenerated input type of MarkFileAsViewed\\"\\"\\"
input GithubMarkFileAsViewedInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The path of the file to mark as viewed\\"\\"\\"
  path: String!

  \\"\\"\\"The Node ID of the pull request.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of MarkFileAsViewed\\"\\"\\"
type GithubMarkFileAsViewedPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated pull request.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Autogenerated input type of MarkPullRequestReadyForReview\\"\\"\\"
input GithubMarkPullRequestReadyForReviewInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the pull request to be marked as ready for review.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of MarkPullRequestReadyForReview\\"\\"\\"
type GithubMarkPullRequestReadyForReviewPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request that is ready for review.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"
Represents a 'marked_as_duplicate' event on a given issue or pull request.
\\"\\"\\"
type GithubMarkedAsDuplicateEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"
  The authoritative issue or pull request which has been duplicated by another.
  \\"\\"\\"
  canonical: GithubIssueOrPullRequest

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"
  The issue or pull request which has been marked as a duplicate of another.
  \\"\\"\\"
  duplicate: GithubIssueOrPullRequest
  id: ID!

  \\"\\"\\"Canonical and duplicate belong to different repositories.\\"\\"\\"
  isCrossRepository: Boolean!
}

\\"\\"\\"A public description of a Marketplace category.\\"\\"\\"
type GithubMarketplaceCategory implements GithubNode {
  \\"\\"\\"The category's description.\\"\\"\\"
  description: String

  \\"\\"\\"
  The technical description of how apps listed in this category work with GitHub.
  \\"\\"\\"
  howItWorks: String
  id: ID!

  \\"\\"\\"The category's name.\\"\\"\\"
  name: String!

  \\"\\"\\"How many Marketplace listings have this as their primary category.\\"\\"\\"
  primaryListingCount: Int!

  \\"\\"\\"The HTTP path for this Marketplace category.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"How many Marketplace listings have this as their secondary category.\\"\\"\\"
  secondaryListingCount: Int!

  \\"\\"\\"The short name of the category used in its URL.\\"\\"\\"
  slug: String!

  \\"\\"\\"The HTTP URL for this Marketplace category.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"A listing in the GitHub integration marketplace.\\"\\"\\"
type GithubMarketplaceListing implements GithubNode {
  \\"\\"\\"The GitHub App this listing represents.\\"\\"\\"
  app: GithubApp

  \\"\\"\\"URL to the listing owner's company site.\\"\\"\\"
  companyUrl: GithubURI

  \\"\\"\\"
  The HTTP path for configuring access to the listing's integration or OAuth app
  \\"\\"\\"
  configurationResourcePath: GithubURI!

  \\"\\"\\"
  The HTTP URL for configuring access to the listing's integration or OAuth app
  \\"\\"\\"
  configurationUrl: GithubURI!

  \\"\\"\\"URL to the listing's documentation.\\"\\"\\"
  documentationUrl: GithubURI

  \\"\\"\\"The listing's detailed description.\\"\\"\\"
  extendedDescription: String

  \\"\\"\\"The listing's detailed description rendered to HTML.\\"\\"\\"
  extendedDescriptionHTML: GithubHTML!

  \\"\\"\\"The listing's introductory description.\\"\\"\\"
  fullDescription: String!

  \\"\\"\\"The listing's introductory description rendered to HTML.\\"\\"\\"
  fullDescriptionHTML: GithubHTML!

  \\"\\"\\"Does this listing have any plans with a free trial?\\"\\"\\"
  hasPublishedFreeTrialPlans: Boolean!

  \\"\\"\\"Does this listing have a terms of service link?\\"\\"\\"
  hasTermsOfService: Boolean!

  \\"\\"\\"Whether the creator of the app is a verified org\\"\\"\\"
  hasVerifiedOwner: Boolean!

  \\"\\"\\"A technical description of how this app works with GitHub.\\"\\"\\"
  howItWorks: String

  \\"\\"\\"The listing's technical description rendered to HTML.\\"\\"\\"
  howItWorksHTML: GithubHTML!
  id: ID!

  \\"\\"\\"URL to install the product to the viewer's account or organization.\\"\\"\\"
  installationUrl: GithubURI

  \\"\\"\\"Whether this listing's app has been installed for the current viewer\\"\\"\\"
  installedForViewer: Boolean!

  \\"\\"\\"Whether this listing has been removed from the Marketplace.\\"\\"\\"
  isArchived: Boolean!

  \\"\\"\\"
  Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
  \\"\\"\\"
  isDraft: Boolean!

  \\"\\"\\"
  Whether the product this listing represents is available as part of a paid plan.
  \\"\\"\\"
  isPaid: Boolean!

  \\"\\"\\"Whether this listing has been approved for display in the Marketplace.\\"\\"\\"
  isPublic: Boolean!

  \\"\\"\\"
  Whether this listing has been rejected by GitHub for display in the Marketplace.
  \\"\\"\\"
  isRejected: Boolean!

  \\"\\"\\"
  Whether this listing has been approved for unverified display in the Marketplace.
  \\"\\"\\"
  isUnverified: Boolean!

  \\"\\"\\"
  Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
  \\"\\"\\"
  isUnverifiedPending: Boolean!

  \\"\\"\\"
  Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  \\"\\"\\"
  isVerificationPendingFromDraft: Boolean!

  \\"\\"\\"
  Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  \\"\\"\\"
  isVerificationPendingFromUnverified: Boolean!

  \\"\\"\\"
  Whether this listing has been approved for verified display in the Marketplace.
  \\"\\"\\"
  isVerified: Boolean!

  \\"\\"\\"The hex color code, without the leading '#', for the logo background.\\"\\"\\"
  logoBackgroundColor: String!

  \\"\\"\\"URL for the listing's logo image.\\"\\"\\"
  logoUrl(
    \\"\\"\\"The size in pixels of the resulting square image.\\"\\"\\"
    size: Int = 400
  ): GithubURI

  \\"\\"\\"The listing's full name.\\"\\"\\"
  name: String!

  \\"\\"\\"
  The listing's very short description without a trailing period or ampersands.
  \\"\\"\\"
  normalizedShortDescription: String!

  \\"\\"\\"URL to the listing's detailed pricing.\\"\\"\\"
  pricingUrl: GithubURI

  \\"\\"\\"The category that best describes the listing.\\"\\"\\"
  primaryCategory: GithubMarketplaceCategory!

  \\"\\"\\"
  URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
  \\"\\"\\"
  privacyPolicyUrl: GithubURI!

  \\"\\"\\"The HTTP path for the Marketplace listing.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The URLs for the listing's screenshots.\\"\\"\\"
  screenshotUrls: [String]!

  \\"\\"\\"An alternate category that describes the listing.\\"\\"\\"
  secondaryCategory: GithubMarketplaceCategory

  \\"\\"\\"The listing's very short description.\\"\\"\\"
  shortDescription: String!

  \\"\\"\\"The short name of the listing used in its URL.\\"\\"\\"
  slug: String!

  \\"\\"\\"URL to the listing's status page.\\"\\"\\"
  statusUrl: GithubURI

  \\"\\"\\"An email address for support for this listing's app.\\"\\"\\"
  supportEmail: String

  \\"\\"\\"
  Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
  \\"\\"\\"
  supportUrl: GithubURI!

  \\"\\"\\"URL to the listing's terms of service.\\"\\"\\"
  termsOfServiceUrl: GithubURI

  \\"\\"\\"The HTTP URL for the Marketplace listing.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"Can the current viewer add plans for this Marketplace listing.\\"\\"\\"
  viewerCanAddPlans: Boolean!

  \\"\\"\\"Can the current viewer approve this Marketplace listing.\\"\\"\\"
  viewerCanApprove: Boolean!

  \\"\\"\\"Can the current viewer delist this Marketplace listing.\\"\\"\\"
  viewerCanDelist: Boolean!

  \\"\\"\\"Can the current viewer edit this Marketplace listing.\\"\\"\\"
  viewerCanEdit: Boolean!

  \\"\\"\\"
  Can the current viewer edit the primary and secondary category of this
  Marketplace listing.
  
  \\"\\"\\"
  viewerCanEditCategories: Boolean!

  \\"\\"\\"Can the current viewer edit the plans for this Marketplace listing.\\"\\"\\"
  viewerCanEditPlans: Boolean!

  \\"\\"\\"
  Can the current viewer return this Marketplace listing to draft state
  so it becomes editable again.
  
  \\"\\"\\"
  viewerCanRedraft: Boolean!

  \\"\\"\\"
  Can the current viewer reject this Marketplace listing by returning it to
  an editable draft state or rejecting it entirely.
  
  \\"\\"\\"
  viewerCanReject: Boolean!

  \\"\\"\\"
  Can the current viewer request this listing be reviewed for display in
  the Marketplace as verified.
  
  \\"\\"\\"
  viewerCanRequestApproval: Boolean!

  \\"\\"\\"
  Indicates whether the current user has an active subscription to this Marketplace listing.
  
  \\"\\"\\"
  viewerHasPurchased: Boolean!

  \\"\\"\\"
  Indicates if the current user has purchased a subscription to this Marketplace listing
  for all of the organizations the user owns.
  
  \\"\\"\\"
  viewerHasPurchasedForAllOrganizations: Boolean!

  \\"\\"\\"
  Does the current viewer role allow them to administer this Marketplace listing.
  
  \\"\\"\\"
  viewerIsListingAdmin: Boolean!
}

\\"\\"\\"Look up Marketplace Listings\\"\\"\\"
type GithubMarketplaceListingConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubMarketplaceListingEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubMarketplaceListing]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubMarketplaceListingEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubMarketplaceListing
}

\\"\\"\\"Entities that have members who can set status messages.\\"\\"\\"
interface GithubMemberStatusable {
  \\"\\"\\"
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  \\"\\"\\"
  memberStatuses(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for user statuses returned from the connection.\\"\\"\\"
    orderBy: GithubUserStatusOrder = {direction: DESC, field: UPDATED_AT}
  ): GithubUserStatusConnection!
}

\\"\\"\\"Audit log entry for a members_can_delete_repos.clear event.\\"\\"\\"
type GithubMembersCanDeleteReposClearAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a members_can_delete_repos.disable event.\\"\\"\\"
type GithubMembersCanDeleteReposDisableAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a members_can_delete_repos.enable event.\\"\\"\\"
type GithubMembersCanDeleteReposEnableAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Represents a 'mentioned' event on a given issue or pull request.\\"\\"\\"
type GithubMentionedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!
}

\\"\\"\\"Autogenerated input type of MergeBranch\\"\\"\\"
input GithubMergeBranchInput {
  \\"\\"\\"The email address to associate with this commit.\\"\\"\\"
  authorEmail: String

  \\"\\"\\"
  The name of the base branch that the provided head will be merged into.
  \\"\\"\\"
  base: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Message to use for the merge commit. If omitted, a default will be used.
  \\"\\"\\"
  commitMessage: String

  \\"\\"\\"
  The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
  \\"\\"\\"
  head: String!

  \\"\\"\\"
  The Node ID of the Repository containing the base branch that will be modified.
  \\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of MergeBranch\\"\\"\\"
type GithubMergeBranchPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The resulting merge Commit.\\"\\"\\"
  mergeCommit: GithubCommit
}

\\"\\"\\"Autogenerated input type of MergePullRequest\\"\\"\\"
input GithubMergePullRequestInput {
  \\"\\"\\"The email address to associate with this merge.\\"\\"\\"
  authorEmail: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Commit body to use for the merge commit; if omitted, a default message will be used
  \\"\\"\\"
  commitBody: String

  \\"\\"\\"
  Commit headline to use for the merge commit; if omitted, a default message will be used.
  \\"\\"\\"
  commitHeadline: String

  \\"\\"\\"
  OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
  \\"\\"\\"
  expectedHeadOid: GithubGitObjectID

  \\"\\"\\"The merge method to use. If omitted, defaults to 'MERGE'\\"\\"\\"
  mergeMethod: GithubPullRequestMergeMethod = MERGE

  \\"\\"\\"ID of the pull request to be merged.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of MergePullRequest\\"\\"\\"
type GithubMergePullRequestPayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request that was merged.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Whether or not a PullRequest can be merged.\\"\\"\\"
enum GithubMergeableState {
  \\"\\"\\"The pull request cannot be merged due to merge conflicts.\\"\\"\\"
  CONFLICTING

  \\"\\"\\"The pull request can be merged.\\"\\"\\"
  MERGEABLE

  \\"\\"\\"The mergeability of the pull request is still being calculated.\\"\\"\\"
  UNKNOWN
}

\\"\\"\\"Represents a 'merged' event on a given pull request.\\"\\"\\"
type GithubMergedEvent implements GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the commit associated with the \`merge\` event.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the Ref associated with the \`merge\` event.\\"\\"\\"
  mergeRef: GithubRef

  \\"\\"\\"Identifies the name of the Ref associated with the \`merge\` event.\\"\\"\\"
  mergeRefName: String!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The HTTP path for this merged event.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this merged event.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Represents a Milestone object on a given repository.\\"\\"\\"
type GithubMilestone implements GithubClosable & GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"
  \`true\` if the object is closed (definition of closed may depend on type)
  \\"\\"\\"
  closed: Boolean!

  \\"\\"\\"Identifies the date and time when the object was closed.\\"\\"\\"
  closedAt: GithubDateTime

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the actor who created the milestone.\\"\\"\\"
  creator: GithubActor

  \\"\\"\\"Identifies the description of the milestone.\\"\\"\\"
  description: String

  \\"\\"\\"Identifies the due date of the milestone.\\"\\"\\"
  dueOn: GithubDateTime
  id: ID!

  \\"\\"\\"A list of issues associated with the milestone.\\"\\"\\"
  issues(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Filtering options for issues returned from the connection.\\"\\"\\"
    filterBy: GithubIssueFilters

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issues returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the issues by.\\"\\"\\"
    states: [GithubIssueState!]
  ): GithubIssueConnection!

  \\"\\"\\"Identifies the number of the milestone.\\"\\"\\"
  number: Int!

  \\"\\"\\"Identifies the percentage complete for the milestone\\"\\"\\"
  progressPercentage: Float!

  \\"\\"\\"A list of pull requests associated with the milestone.\\"\\"\\"
  pullRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"The base ref name to filter the pull requests by.\\"\\"\\"
    baseRefName: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"The head ref name to filter the pull requests by.\\"\\"\\"
    headRefName: String

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for pull requests returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the pull requests by.\\"\\"\\"
    states: [GithubPullRequestState!]
  ): GithubPullRequestConnection!

  \\"\\"\\"The repository associated with this milestone.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this milestone\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the state of the milestone.\\"\\"\\"
  state: GithubMilestoneState!

  \\"\\"\\"Identifies the title of the milestone.\\"\\"\\"
  title: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this milestone\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The connection type for Milestone.\\"\\"\\"
type GithubMilestoneConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubMilestoneEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubMilestone]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubMilestoneEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubMilestone
}

\\"\\"\\"Types that can be inside a Milestone.\\"\\"\\"
union GithubMilestoneItem = GithubIssue | GithubPullRequest

\\"\\"\\"Ordering options for milestone connections.\\"\\"\\"
input GithubMilestoneOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order milestones by.\\"\\"\\"
  field: GithubMilestoneOrderField!
}

\\"\\"\\"Properties by which milestone connections can be ordered.\\"\\"\\"
enum GithubMilestoneOrderField {
  \\"\\"\\"Order milestones by when they were created.\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order milestones by when they are due.\\"\\"\\"
  DUE_DATE

  \\"\\"\\"Order milestones by their number.\\"\\"\\"
  NUMBER

  \\"\\"\\"Order milestones by when they were last updated.\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"The possible states of a milestone.\\"\\"\\"
enum GithubMilestoneState {
  \\"\\"\\"A milestone that has been closed.\\"\\"\\"
  CLOSED

  \\"\\"\\"A milestone that is still open.\\"\\"\\"
  OPEN
}

\\"\\"\\"Represents a 'milestoned' event on a given issue or pull request.\\"\\"\\"
type GithubMilestonedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the milestone title associated with the 'milestoned' event.\\"\\"\\"
  milestoneTitle: String!

  \\"\\"\\"Object referenced by event.\\"\\"\\"
  subject: GithubMilestoneItem!
}

\\"\\"\\"Entities that can be minimized.\\"\\"\\"
interface GithubMinimizable {
  \\"\\"\\"Returns whether or not a comment has been minimized.\\"\\"\\"
  isMinimized: Boolean!

  \\"\\"\\"Returns why the comment was minimized.\\"\\"\\"
  minimizedReason: String

  \\"\\"\\"Check if the current viewer can minimize this object.\\"\\"\\"
  viewerCanMinimize: Boolean!
}

\\"\\"\\"Autogenerated input type of MinimizeComment\\"\\"\\"
input GithubMinimizeCommentInput {
  \\"\\"\\"The classification of comment\\"\\"\\"
  classifier: GithubReportedContentClassifiers!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the subject to modify.\\"\\"\\"
  subjectId: ID!
}

\\"\\"\\"Autogenerated return type of MinimizeComment\\"\\"\\"
type GithubMinimizeCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The comment that was minimized.\\"\\"\\"
  minimizedComment: GithubMinimizable
}

\\"\\"\\"Autogenerated input type of MoveProjectCard\\"\\"\\"
input GithubMoveProjectCardInput {
  \\"\\"\\"
  Place the new card after the card with this id. Pass null to place it at the top.
  \\"\\"\\"
  afterCardId: ID

  \\"\\"\\"The id of the card to move.\\"\\"\\"
  cardId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the column to move it into.\\"\\"\\"
  columnId: ID!
}

\\"\\"\\"Autogenerated return type of MoveProjectCard\\"\\"\\"
type GithubMoveProjectCardPayload {
  \\"\\"\\"The new edge of the moved card.\\"\\"\\"
  cardEdge: GithubProjectCardEdge

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of MoveProjectColumn\\"\\"\\"
input GithubMoveProjectColumnInput {
  \\"\\"\\"
  Place the new column after the column with this id. Pass null to place it at the front.
  \\"\\"\\"
  afterColumnId: ID

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The id of the column to move.\\"\\"\\"
  columnId: ID!
}

\\"\\"\\"Autogenerated return type of MoveProjectColumn\\"\\"\\"
type GithubMoveProjectColumnPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new edge of the moved column.\\"\\"\\"
  columnEdge: GithubProjectColumnEdge
}

\\"\\"\\"
Represents a 'moved_columns_in_project' event on a given issue or pull request.
\\"\\"\\"
type GithubMovedColumnsInProjectEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!
}

\\"\\"\\"An object with an ID.\\"\\"\\"
interface GithubNode {
  \\"\\"\\"ID of the object.\\"\\"\\"
  id: ID!
}

\\"\\"\\"The possible values for the notification restriction setting.\\"\\"\\"
enum GithubNotificationRestrictionSettingValue {
  \\"\\"\\"The setting is disabled for the owner.\\"\\"\\"
  DISABLED

  \\"\\"\\"The setting is enabled for the owner.\\"\\"\\"
  ENABLED
}

\\"\\"\\"Metadata for an audit entry with action oauth_application.*\\"\\"\\"
interface GithubOauthApplicationAuditEntryData {
  \\"\\"\\"The name of the OAuth Application.\\"\\"\\"
  oauthApplicationName: String

  \\"\\"\\"The HTTP path for the OAuth Application\\"\\"\\"
  oauthApplicationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the OAuth Application\\"\\"\\"
  oauthApplicationUrl: GithubURI
}

\\"\\"\\"Audit log entry for a oauth_application.create event.\\"\\"\\"
type GithubOauthApplicationCreateAuditEntry implements GithubAuditEntry & GithubNode & GithubOauthApplicationAuditEntryData & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The application URL of the OAuth Application.\\"\\"\\"
  applicationUrl: GithubURI

  \\"\\"\\"The callback URL of the OAuth Application.\\"\\"\\"
  callbackUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The name of the OAuth Application.\\"\\"\\"
  oauthApplicationName: String

  \\"\\"\\"The HTTP path for the OAuth Application\\"\\"\\"
  oauthApplicationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the OAuth Application\\"\\"\\"
  oauthApplicationUrl: GithubURI

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The rate limit of the OAuth Application.\\"\\"\\"
  rateLimit: Int

  \\"\\"\\"The state of the OAuth Application.\\"\\"\\"
  state: GithubOauthApplicationCreateAuditEntryState

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The state of an OAuth Application when it was created.\\"\\"\\"
enum GithubOauthApplicationCreateAuditEntryState {
  \\"\\"\\"The OAuth Application was active and allowed to have OAuth Accesses.\\"\\"\\"
  ACTIVE

  \\"\\"\\"The OAuth Application was in the process of being deleted.\\"\\"\\"
  PENDING_DELETION

  \\"\\"\\"
  The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  \\"\\"\\"
  SUSPENDED
}

\\"\\"\\"The corresponding operation type for the action\\"\\"\\"
enum GithubOperationType {
  \\"\\"\\"An existing resource was accessed\\"\\"\\"
  ACCESS

  \\"\\"\\"A resource performed an authentication event\\"\\"\\"
  AUTHENTICATION

  \\"\\"\\"A new resource was created\\"\\"\\"
  CREATE

  \\"\\"\\"An existing resource was modified\\"\\"\\"
  MODIFY

  \\"\\"\\"An existing resource was removed\\"\\"\\"
  REMOVE

  \\"\\"\\"An existing resource was restored\\"\\"\\"
  RESTORE

  \\"\\"\\"An existing resource was transferred between multiple resources\\"\\"\\"
  TRANSFER
}

\\"\\"\\"
Possible directions in which to order a list of items when provided an \`orderBy\` argument.
\\"\\"\\"
enum GithubOrderDirection {
  \\"\\"\\"Specifies an ascending order for a given \`orderBy\` argument.\\"\\"\\"
  ASC

  \\"\\"\\"Specifies a descending order for a given \`orderBy\` argument.\\"\\"\\"
  DESC
}

\\"\\"\\"Audit log entry for a org.add_billing_manager\\"\\"\\"
type GithubOrgAddBillingManagerAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"
  The email address used to invite a billing manager for the organization.
  \\"\\"\\"
  invitationEmail: String

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.add_member\\"\\"\\"
type GithubOrgAddMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The permission level of the member added to the organization.\\"\\"\\"
  permission: GithubOrgAddMemberAuditEntryPermission

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The permissions available to members on an Organization.\\"\\"\\"
enum GithubOrgAddMemberAuditEntryPermission {
  \\"\\"\\"Can read, clone, push, and add collaborators to repositories.\\"\\"\\"
  ADMIN

  \\"\\"\\"Can read and clone repositories.\\"\\"\\"
  READ
}

\\"\\"\\"Audit log entry for a org.block_user\\"\\"\\"
type GithubOrgBlockUserAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The blocked user.\\"\\"\\"
  blockedUser: GithubUser

  \\"\\"\\"The username of the blocked user.\\"\\"\\"
  blockedUserName: String

  \\"\\"\\"The HTTP path for the blocked user.\\"\\"\\"
  blockedUserResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the blocked user.\\"\\"\\"
  blockedUserUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.config.disable_collaborators_only event.\\"\\"\\"
type GithubOrgConfigDisableCollaboratorsOnlyAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.config.enable_collaborators_only event.\\"\\"\\"
type GithubOrgConfigEnableCollaboratorsOnlyAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.create event.\\"\\"\\"
type GithubOrgCreateAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The billing plan for the Organization.\\"\\"\\"
  billingPlan: GithubOrgCreateAuditEntryBillingPlan

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The billing plans available for organizations.\\"\\"\\"
enum GithubOrgCreateAuditEntryBillingPlan {
  \\"\\"\\"Team Plan\\"\\"\\"
  BUSINESS

  \\"\\"\\"Enterprise Cloud Plan\\"\\"\\"
  BUSINESS_PLUS

  \\"\\"\\"Free Plan\\"\\"\\"
  FREE

  \\"\\"\\"Tiered Per Seat Plan\\"\\"\\"
  TIERED_PER_SEAT

  \\"\\"\\"Legacy Unlimited Plan\\"\\"\\"
  UNLIMITED
}

\\"\\"\\"Audit log entry for a org.disable_oauth_app_restrictions event.\\"\\"\\"
type GithubOrgDisableOauthAppRestrictionsAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.disable_saml event.\\"\\"\\"
type GithubOrgDisableSamlAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The SAML provider's digest algorithm URL.\\"\\"\\"
  digestMethodUrl: GithubURI
  id: ID!

  \\"\\"\\"The SAML provider's issuer URL.\\"\\"\\"
  issuerUrl: GithubURI

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The SAML provider's signature algorithm URL.\\"\\"\\"
  signatureMethodUrl: GithubURI

  \\"\\"\\"The SAML provider's single sign-on URL.\\"\\"\\"
  singleSignOnUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.disable_two_factor_requirement event.\\"\\"\\"
type GithubOrgDisableTwoFactorRequirementAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.enable_oauth_app_restrictions event.\\"\\"\\"
type GithubOrgEnableOauthAppRestrictionsAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.enable_saml event.\\"\\"\\"
type GithubOrgEnableSamlAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The SAML provider's digest algorithm URL.\\"\\"\\"
  digestMethodUrl: GithubURI
  id: ID!

  \\"\\"\\"The SAML provider's issuer URL.\\"\\"\\"
  issuerUrl: GithubURI

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The SAML provider's signature algorithm URL.\\"\\"\\"
  signatureMethodUrl: GithubURI

  \\"\\"\\"The SAML provider's single sign-on URL.\\"\\"\\"
  singleSignOnUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.enable_two_factor_requirement event.\\"\\"\\"
type GithubOrgEnableTwoFactorRequirementAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.invite_member event.\\"\\"\\"
type GithubOrgInviteMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The email address of the organization invitation.\\"\\"\\"
  email: String
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The organization invitation.\\"\\"\\"
  organizationInvitation: GithubOrganizationInvitation

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.invite_to_business event.\\"\\"\\"
type GithubOrgInviteToBusinessAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.oauth_app_access_approved event.\\"\\"\\"
type GithubOrgOauthAppAccessApprovedAuditEntry implements GithubAuditEntry & GithubNode & GithubOauthApplicationAuditEntryData & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The name of the OAuth Application.\\"\\"\\"
  oauthApplicationName: String

  \\"\\"\\"The HTTP path for the OAuth Application\\"\\"\\"
  oauthApplicationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the OAuth Application\\"\\"\\"
  oauthApplicationUrl: GithubURI

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.oauth_app_access_denied event.\\"\\"\\"
type GithubOrgOauthAppAccessDeniedAuditEntry implements GithubAuditEntry & GithubNode & GithubOauthApplicationAuditEntryData & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The name of the OAuth Application.\\"\\"\\"
  oauthApplicationName: String

  \\"\\"\\"The HTTP path for the OAuth Application\\"\\"\\"
  oauthApplicationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the OAuth Application\\"\\"\\"
  oauthApplicationUrl: GithubURI

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.oauth_app_access_requested event.\\"\\"\\"
type GithubOrgOauthAppAccessRequestedAuditEntry implements GithubAuditEntry & GithubNode & GithubOauthApplicationAuditEntryData & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The name of the OAuth Application.\\"\\"\\"
  oauthApplicationName: String

  \\"\\"\\"The HTTP path for the OAuth Application\\"\\"\\"
  oauthApplicationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the OAuth Application\\"\\"\\"
  oauthApplicationUrl: GithubURI

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.remove_billing_manager event.\\"\\"\\"
type GithubOrgRemoveBillingManagerAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The reason for the billing manager being removed.\\"\\"\\"
  reason: GithubOrgRemoveBillingManagerAuditEntryReason

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The reason a billing manager was removed from an Organization.\\"\\"\\"
enum GithubOrgRemoveBillingManagerAuditEntryReason {
  \\"\\"\\"SAML external identity missing\\"\\"\\"
  SAML_EXTERNAL_IDENTITY_MISSING

  \\"\\"\\"SAML SSO enforcement requires an external identity\\"\\"\\"
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY

  \\"\\"\\"
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  \\"\\"\\"
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

\\"\\"\\"Audit log entry for a org.remove_member event.\\"\\"\\"
type GithubOrgRemoveMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The types of membership the member has with the organization.\\"\\"\\"
  membershipTypes: [GithubOrgRemoveMemberAuditEntryMembershipType!]

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The reason for the member being removed.\\"\\"\\"
  reason: GithubOrgRemoveMemberAuditEntryReason

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The type of membership a user has with an Organization.\\"\\"\\"
enum GithubOrgRemoveMemberAuditEntryMembershipType {
  \\"\\"\\"
  Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories.
  \\"\\"\\"
  ADMIN

  \\"\\"\\"
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  \\"\\"\\"
  BILLING_MANAGER

  \\"\\"\\"A direct member is a user that is a member of the Organization.\\"\\"\\"
  DIRECT_MEMBER

  \\"\\"\\"
  An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
  \\"\\"\\"
  OUTSIDE_COLLABORATOR

  \\"\\"\\"
  An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
  \\"\\"\\"
  UNAFFILIATED
}

\\"\\"\\"The reason a member was removed from an Organization.\\"\\"\\"
enum GithubOrgRemoveMemberAuditEntryReason {
  \\"\\"\\"SAML external identity missing\\"\\"\\"
  SAML_EXTERNAL_IDENTITY_MISSING

  \\"\\"\\"SAML SSO enforcement requires an external identity\\"\\"\\"
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY

  \\"\\"\\"User was removed from organization during account recovery\\"\\"\\"
  TWO_FACTOR_ACCOUNT_RECOVERY

  \\"\\"\\"
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  \\"\\"\\"
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  \\"\\"\\"User account has been deleted\\"\\"\\"
  USER_ACCOUNT_DELETED
}

\\"\\"\\"Audit log entry for a org.remove_outside_collaborator event.\\"\\"\\"
type GithubOrgRemoveOutsideCollaboratorAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"
  The types of membership the outside collaborator has with the organization.
  \\"\\"\\"
  membershipTypes: [GithubOrgRemoveOutsideCollaboratorAuditEntryMembershipType!]

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"
  The reason for the outside collaborator being removed from the Organization.
  \\"\\"\\"
  reason: GithubOrgRemoveOutsideCollaboratorAuditEntryReason

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The type of membership a user has with an Organization.\\"\\"\\"
enum GithubOrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  \\"\\"\\"
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  \\"\\"\\"
  BILLING_MANAGER

  \\"\\"\\"
  An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
  \\"\\"\\"
  OUTSIDE_COLLABORATOR

  \\"\\"\\"
  An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
  \\"\\"\\"
  UNAFFILIATED
}

\\"\\"\\"The reason an outside collaborator was removed from an Organization.\\"\\"\\"
enum GithubOrgRemoveOutsideCollaboratorAuditEntryReason {
  \\"\\"\\"SAML external identity missing\\"\\"\\"
  SAML_EXTERNAL_IDENTITY_MISSING

  \\"\\"\\"
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  \\"\\"\\"
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
}

\\"\\"\\"Audit log entry for a org.restore_member event.\\"\\"\\"
type GithubOrgRestoreMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The number of custom email routings for the restored member.\\"\\"\\"
  restoredCustomEmailRoutingsCount: Int

  \\"\\"\\"The number of issue assignments for the restored member.\\"\\"\\"
  restoredIssueAssignmentsCount: Int

  \\"\\"\\"Restored organization membership objects.\\"\\"\\"
  restoredMemberships: [GithubOrgRestoreMemberAuditEntryMembership!]

  \\"\\"\\"The number of restored memberships.\\"\\"\\"
  restoredMembershipsCount: Int

  \\"\\"\\"The number of repositories of the restored member.\\"\\"\\"
  restoredRepositoriesCount: Int

  \\"\\"\\"The number of starred repositories for the restored member.\\"\\"\\"
  restoredRepositoryStarsCount: Int

  \\"\\"\\"The number of watched repositories for the restored member.\\"\\"\\"
  restoredRepositoryWatchesCount: Int

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Types of memberships that can be restored for an Organization member.\\"\\"\\"
union GithubOrgRestoreMemberAuditEntryMembership = GithubOrgRestoreMemberMembershipOrganizationAuditEntryData | GithubOrgRestoreMemberMembershipRepositoryAuditEntryData | GithubOrgRestoreMemberMembershipTeamAuditEntryData

\\"\\"\\"Metadata for an organization membership for org.restore_member actions\\"\\"\\"
type GithubOrgRestoreMemberMembershipOrganizationAuditEntryData implements GithubOrganizationAuditEntryData {
  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI
}

\\"\\"\\"Metadata for a repository membership for org.restore_member actions\\"\\"\\"
type GithubOrgRestoreMemberMembershipRepositoryAuditEntryData implements GithubRepositoryAuditEntryData {
  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI
}

\\"\\"\\"Metadata for a team membership for org.restore_member actions\\"\\"\\"
type GithubOrgRestoreMemberMembershipTeamAuditEntryData implements GithubTeamAuditEntryData {
  \\"\\"\\"The team associated with the action\\"\\"\\"
  team: GithubTeam

  \\"\\"\\"The name of the team\\"\\"\\"
  teamName: String

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  teamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  teamUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.unblock_user\\"\\"\\"
type GithubOrgUnblockUserAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The user being unblocked by the organization.\\"\\"\\"
  blockedUser: GithubUser

  \\"\\"\\"The username of the blocked user.\\"\\"\\"
  blockedUserName: String

  \\"\\"\\"The HTTP path for the blocked user.\\"\\"\\"
  blockedUserResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the blocked user.\\"\\"\\"
  blockedUserUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a org.update_default_repository_permission\\"\\"\\"
type GithubOrgUpdateDefaultRepositoryPermissionAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The new default repository permission level for the organization.\\"\\"\\"
  permission: GithubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  \\"\\"\\"The former default repository permission level for the organization.\\"\\"\\"
  permissionWas: GithubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The default permission a repository can have in an Organization.\\"\\"\\"
enum GithubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  \\"\\"\\"Can read, clone, push, and add collaborators to repositories.\\"\\"\\"
  ADMIN

  \\"\\"\\"No default permission value.\\"\\"\\"
  NONE

  \\"\\"\\"Can read and clone repositories.\\"\\"\\"
  READ

  \\"\\"\\"Can read, clone and push to repositories.\\"\\"\\"
  WRITE
}

\\"\\"\\"Audit log entry for a org.update_member event.\\"\\"\\"
type GithubOrgUpdateMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The new member permission level for the organization.\\"\\"\\"
  permission: GithubOrgUpdateMemberAuditEntryPermission

  \\"\\"\\"The former member permission level for the organization.\\"\\"\\"
  permissionWas: GithubOrgUpdateMemberAuditEntryPermission

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The permissions available to members on an Organization.\\"\\"\\"
enum GithubOrgUpdateMemberAuditEntryPermission {
  \\"\\"\\"Can read, clone, push, and add collaborators to repositories.\\"\\"\\"
  ADMIN

  \\"\\"\\"Can read and clone repositories.\\"\\"\\"
  READ
}

\\"\\"\\"
Audit log entry for a org.update_member_repository_creation_permission event.
\\"\\"\\"
type GithubOrgUpdateMemberRepositoryCreationPermissionAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"Can members create repositories in the organization.\\"\\"\\"
  canCreateRepositories: Boolean

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI

  \\"\\"\\"
  The permission for visibility level of repositories for this organization.
  \\"\\"\\"
  visibility: GithubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

\\"\\"\\"The permissions available for repository creation on an Organization.\\"\\"\\"
enum GithubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  \\"\\"\\"
  All organization members are restricted from creating any repositories.
  \\"\\"\\"
  ALL

  \\"\\"\\"
  All organization members are restricted from creating internal repositories.
  \\"\\"\\"
  INTERNAL

  \\"\\"\\"All organization members are allowed to create any repositories.\\"\\"\\"
  NONE

  \\"\\"\\"
  All organization members are restricted from creating private repositories.
  \\"\\"\\"
  PRIVATE

  \\"\\"\\"
  All organization members are restricted from creating private or internal repositories.
  \\"\\"\\"
  PRIVATE_INTERNAL

  \\"\\"\\"
  All organization members are restricted from creating public repositories.
  \\"\\"\\"
  PUBLIC

  \\"\\"\\"
  All organization members are restricted from creating public or internal repositories.
  \\"\\"\\"
  PUBLIC_INTERNAL

  \\"\\"\\"
  All organization members are restricted from creating public or private repositories.
  \\"\\"\\"
  PUBLIC_PRIVATE
}

\\"\\"\\"
Audit log entry for a org.update_member_repository_invitation_permission event.
\\"\\"\\"
type GithubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"
  Can outside collaborators be invited to repositories in the organization.
  \\"\\"\\"
  canInviteOutsideCollaboratorsToRepositories: Boolean

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"
An account on GitHub, with one or more owners, that has repositories, members and teams.
\\"\\"\\"
type GithubOrganization implements GithubActor & GithubMemberStatusable & GithubNode & GithubPackageOwner & GithubProfileOwner & GithubProjectOwner & GithubRepositoryDiscussionAuthor & GithubRepositoryDiscussionCommentAuthor & GithubRepositoryOwner & GithubSponsorable & GithubUniformResourceLocatable {
  \\"\\"\\"
  Determine if this repository owner has any items that can be pinned to their profile.
  \\"\\"\\"
  anyPinnableItems(
    \\"\\"\\"Filter to only a particular kind of pinnable item.\\"\\"\\"
    type: GithubPinnableItemType
  ): Boolean!

  \\"\\"\\"Audit log entries of the organization\\"\\"\\"
  auditLog(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for the returned audit log entries.\\"\\"\\"
    orderBy: GithubAuditLogOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"The query string to filter audit entries\\"\\"\\"
    query: String
  ): GithubOrganizationAuditEntryConnection!

  \\"\\"\\"A URL pointing to the organization's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The organization's public profile description.\\"\\"\\"
  description: String

  \\"\\"\\"The organization's public profile description rendered to HTML.\\"\\"\\"
  descriptionHTML: String

  \\"\\"\\"A list of domains owned by the organization.\\"\\"\\"
  domains(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Filter by if the domain is approved.\\"\\"\\"
    isApproved: Boolean = null

    \\"\\"\\"Filter by if the domain is verified.\\"\\"\\"
    isVerified: Boolean = null

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for verifiable domains returned.\\"\\"\\"
    orderBy: GithubVerifiableDomainOrder = {direction: ASC, field: DOMAIN}
  ): GithubVerifiableDomainConnection

  \\"\\"\\"The organization's public email.\\"\\"\\"
  email: String

  \\"\\"\\"True if this user/organization has a GitHub Sponsors listing.\\"\\"\\"
  hasSponsorsListing: Boolean!
  id: ID!

  \\"\\"\\"The interaction ability settings for this organization.\\"\\"\\"
  interactionAbility: GithubRepositoryInteractionAbility

  \\"\\"\\"
  The setting value for whether the organization has an IP allow list enabled.
  \\"\\"\\"
  ipAllowListEnabledSetting: GithubIpAllowListEnabledSettingValue!

  \\"\\"\\"
  The IP addresses that are allowed to access resources owned by the organization.
  \\"\\"\\"
  ipAllowListEntries(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for IP allow list entries returned.\\"\\"\\"
    orderBy: GithubIpAllowListEntryOrder = {direction: ASC, field: ALLOW_LIST_VALUE}
  ): GithubIpAllowListEntryConnection!

  \\"\\"\\"Check if the given account is sponsoring this user/organization.\\"\\"\\"
  isSponsoredBy(
    \\"\\"\\"The target account's login.\\"\\"\\"
    accountLogin: String!
  ): Boolean!

  \\"\\"\\"True if the viewer is sponsored by this user/organization.\\"\\"\\"
  isSponsoringViewer: Boolean!

  \\"\\"\\"Whether the organization has verified its profile email and website.\\"\\"\\"
  isVerified: Boolean!

  \\"\\"\\"
  Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
  \\"\\"\\"
  itemShowcase: GithubProfileItemShowcase!

  \\"\\"\\"The organization's public profile location.\\"\\"\\"
  location: String

  \\"\\"\\"The organization's login name.\\"\\"\\"
  login: String!

  \\"\\"\\"
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  \\"\\"\\"
  memberStatuses(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for user statuses returned from the connection.\\"\\"\\"
    orderBy: GithubUserStatusOrder = {direction: DESC, field: UPDATED_AT}
  ): GithubUserStatusConnection!

  \\"\\"\\"A list of users who are members of this organization.\\"\\"\\"
  membersWithRole(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubOrganizationMemberConnection!

  \\"\\"\\"The organization's public profile name.\\"\\"\\"
  name: String

  \\"\\"\\"The HTTP path creating a new team\\"\\"\\"
  newTeamResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL creating a new team\\"\\"\\"
  newTeamUrl: GithubURI!

  \\"\\"\\"
  Indicates if email notification delivery for this organization is restricted to verified or approved domains.
  \\"\\"\\"
  notificationDeliveryRestrictionEnabledSetting: GithubNotificationRestrictionSettingValue!

  \\"\\"\\"The billing email for the organization.\\"\\"\\"
  organizationBillingEmail: String

  \\"\\"\\"A list of packages under the owner.\\"\\"\\"
  packages(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Find packages by their names.\\"\\"\\"
    names: [String]

    \\"\\"\\"Ordering of the returned packages.\\"\\"\\"
    orderBy: GithubPackageOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"Filter registry package by type.\\"\\"\\"
    packageType: GithubPackageType

    \\"\\"\\"Find packages in a repository by ID.\\"\\"\\"
    repositoryId: ID
  ): GithubPackageConnection!

  \\"\\"\\"A list of users who have been invited to join this organization.\\"\\"\\"
  pendingMembers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!

  \\"\\"\\"
  A list of repositories and gists this profile owner can pin to their profile.
  \\"\\"\\"
  pinnableItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter the types of pinnable items that are returned.\\"\\"\\"
    types: [GithubPinnableItemType!]
  ): GithubPinnableItemConnection!

  \\"\\"\\"
  A list of repositories and gists this profile owner has pinned to their profile
  \\"\\"\\"
  pinnedItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter the types of pinned items that are returned.\\"\\"\\"
    types: [GithubPinnableItemType!]
  ): GithubPinnableItemConnection!

  \\"\\"\\"
  Returns how many more items this profile owner can pin to their profile.
  \\"\\"\\"
  pinnedItemsRemaining: Int!

  \\"\\"\\"Find project by number.\\"\\"\\"
  project(
    \\"\\"\\"The project number to find.\\"\\"\\"
    number: Int!
  ): GithubProject

  \\"\\"\\"A list of projects under the owner.\\"\\"\\"
  projects(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for projects returned from the connection\\"\\"\\"
    orderBy: GithubProjectOrder

    \\"\\"\\"Query to search projects by, currently only searching by name.\\"\\"\\"
    search: String

    \\"\\"\\"A list of states to filter the projects by.\\"\\"\\"
    states: [GithubProjectState!]
  ): GithubProjectConnection!

  \\"\\"\\"The HTTP path listing organization's projects\\"\\"\\"
  projectsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL listing organization's projects\\"\\"\\"
  projectsUrl: GithubURI!

  \\"\\"\\"A list of repositories that the user owns.\\"\\"\\"
  repositories(
    \\"\\"\\"
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    \\"\\"\\"
    affiliations: [GithubRepositoryAffiliation]

    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"
    If non-null, filters repositories according to whether they are forks of another repository
    \\"\\"\\"
    isFork: Boolean

    \\"\\"\\"
    If non-null, filters repositories according to whether they have been locked
    \\"\\"\\"
    isLocked: Boolean

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories returned from the connection\\"\\"\\"
    orderBy: GithubRepositoryOrder

    \\"\\"\\"
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    \\"\\"\\"
    ownerAffiliations: [GithubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    \\"\\"\\"If non-null, filters repositories according to privacy\\"\\"\\"
    privacy: GithubRepositoryPrivacy
  ): GithubRepositoryConnection!

  \\"\\"\\"Find Repository.\\"\\"\\"
  repository(
    \\"\\"\\"Name of Repository to find.\\"\\"\\"
    name: String!
  ): GithubRepository

  \\"\\"\\"Discussion comments this user has authored.\\"\\"\\"
  repositoryDiscussionComments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Filter discussion comments to only those that were marked as the answer
    \\"\\"\\"
    onlyAnswers: Boolean = false

    \\"\\"\\"Filter discussion comments to only those in a specific repository.\\"\\"\\"
    repositoryId: ID
  ): GithubDiscussionCommentConnection!

  \\"\\"\\"Discussions this user has started.\\"\\"\\"
  repositoryDiscussions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
    \\"\\"\\"
    answered: Boolean = null

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for discussions returned from the connection.\\"\\"\\"
    orderBy: GithubDiscussionOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"Filter discussions to only those in a specific repository.\\"\\"\\"
    repositoryId: ID
  ): GithubDiscussionConnection!

  \\"\\"\\"
  When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
  \\"\\"\\"
  requiresTwoFactorAuthentication: Boolean

  \\"\\"\\"The HTTP path for this organization.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The Organization's SAML identity providers\\"\\"\\"
  samlIdentityProvider: GithubOrganizationIdentityProvider

  \\"\\"\\"The GitHub Sponsors listing for this user or organization.\\"\\"\\"
  sponsorsListing: GithubSponsorsListing

  \\"\\"\\"The viewer's sponsorship of this entity.\\"\\"\\"
  sponsorshipForViewerAsSponsor: GithubSponsorship

  \\"\\"\\"This object's sponsorships as the maintainer.\\"\\"\\"
  sponsorshipsAsMaintainer(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Whether or not to include private sponsorships in the result set\\"\\"\\"
    includePrivate: Boolean = false

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    \\"\\"\\"
    orderBy: GithubSponsorshipOrder
  ): GithubSponsorshipConnection!

  \\"\\"\\"This object's sponsorships as the sponsor.\\"\\"\\"
  sponsorshipsAsSponsor(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    \\"\\"\\"
    orderBy: GithubSponsorshipOrder
  ): GithubSponsorshipConnection!

  \\"\\"\\"Find an organization's team by its slug.\\"\\"\\"
  team(
    \\"\\"\\"The name or slug of the team to find.\\"\\"\\"
    slug: String!
  ): GithubTeam

  \\"\\"\\"A list of teams in this organization.\\"\\"\\"
  teams(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    \\"\\"\\"
    ldapMapped: Boolean

    \\"\\"\\"Ordering options for teams returned from the connection\\"\\"\\"
    orderBy: GithubTeamOrder

    \\"\\"\\"If non-null, filters teams according to privacy\\"\\"\\"
    privacy: GithubTeamPrivacy

    \\"\\"\\"If non-null, filters teams with query on team name and team slug\\"\\"\\"
    query: String

    \\"\\"\\"
    If non-null, filters teams according to whether the viewer is an admin or member on team
    \\"\\"\\"
    role: GithubTeamRole

    \\"\\"\\"If true, restrict to only root teams\\"\\"\\"
    rootTeamsOnly: Boolean = false

    \\"\\"\\"User logins to filter by\\"\\"\\"
    userLogins: [String!]
  ): GithubTeamConnection!

  \\"\\"\\"The HTTP path listing organization's teams\\"\\"\\"
  teamsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL listing organization's teams\\"\\"\\"
  teamsUrl: GithubURI!

  \\"\\"\\"The organization's Twitter username.\\"\\"\\"
  twitterUsername: String

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this organization.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"Organization is adminable by the viewer.\\"\\"\\"
  viewerCanAdminister: Boolean!

  \\"\\"\\"Can the viewer pin repositories and gists to the profile?\\"\\"\\"
  viewerCanChangePinnedItems: Boolean!

  \\"\\"\\"Can the current viewer create new projects on this owner.\\"\\"\\"
  viewerCanCreateProjects: Boolean!

  \\"\\"\\"Viewer can create repositories on this organization\\"\\"\\"
  viewerCanCreateRepositories: Boolean!

  \\"\\"\\"Viewer can create teams on this organization.\\"\\"\\"
  viewerCanCreateTeams: Boolean!

  \\"\\"\\"Whether or not the viewer is able to sponsor this user/organization.\\"\\"\\"
  viewerCanSponsor: Boolean!

  \\"\\"\\"Viewer is an active member of this organization.\\"\\"\\"
  viewerIsAMember: Boolean!

  \\"\\"\\"True if the viewer is sponsoring this user/organization.\\"\\"\\"
  viewerIsSponsoring: Boolean!

  \\"\\"\\"The organization's public profile URL.\\"\\"\\"
  websiteUrl: GithubURI
}

\\"\\"\\"An audit entry in an organization audit log.\\"\\"\\"
union GithubOrganizationAuditEntry = GithubMembersCanDeleteReposClearAuditEntry | GithubMembersCanDeleteReposDisableAuditEntry | GithubMembersCanDeleteReposEnableAuditEntry | GithubOauthApplicationCreateAuditEntry | GithubOrgAddBillingManagerAuditEntry | GithubOrgAddMemberAuditEntry | GithubOrgBlockUserAuditEntry | GithubOrgConfigDisableCollaboratorsOnlyAuditEntry | GithubOrgConfigEnableCollaboratorsOnlyAuditEntry | GithubOrgCreateAuditEntry | GithubOrgDisableOauthAppRestrictionsAuditEntry | GithubOrgDisableSamlAuditEntry | GithubOrgDisableTwoFactorRequirementAuditEntry | GithubOrgEnableOauthAppRestrictionsAuditEntry | GithubOrgEnableSamlAuditEntry | GithubOrgEnableTwoFactorRequirementAuditEntry | GithubOrgInviteMemberAuditEntry | GithubOrgInviteToBusinessAuditEntry | GithubOrgOauthAppAccessApprovedAuditEntry | GithubOrgOauthAppAccessDeniedAuditEntry | GithubOrgOauthAppAccessRequestedAuditEntry | GithubOrgRemoveBillingManagerAuditEntry | GithubOrgRemoveMemberAuditEntry | GithubOrgRemoveOutsideCollaboratorAuditEntry | GithubOrgRestoreMemberAuditEntry | GithubOrgUnblockUserAuditEntry | GithubOrgUpdateDefaultRepositoryPermissionAuditEntry | GithubOrgUpdateMemberAuditEntry | GithubOrgUpdateMemberRepositoryCreationPermissionAuditEntry | GithubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry | GithubPrivateRepositoryForkingDisableAuditEntry | GithubPrivateRepositoryForkingEnableAuditEntry | GithubRepoAccessAuditEntry | GithubRepoAddMemberAuditEntry | GithubRepoAddTopicAuditEntry | GithubRepoArchivedAuditEntry | GithubRepoChangeMergeSettingAuditEntry | GithubRepoConfigDisableAnonymousGitAccessAuditEntry | GithubRepoConfigDisableCollaboratorsOnlyAuditEntry | GithubRepoConfigDisableContributorsOnlyAuditEntry | GithubRepoConfigDisableSockpuppetDisallowedAuditEntry | GithubRepoConfigEnableAnonymousGitAccessAuditEntry | GithubRepoConfigEnableCollaboratorsOnlyAuditEntry | GithubRepoConfigEnableContributorsOnlyAuditEntry | GithubRepoConfigEnableSockpuppetDisallowedAuditEntry | GithubRepoConfigLockAnonymousGitAccessAuditEntry | GithubRepoConfigUnlockAnonymousGitAccessAuditEntry | GithubRepoCreateAuditEntry | GithubRepoDestroyAuditEntry | GithubRepoRemoveMemberAuditEntry | GithubRepoRemoveTopicAuditEntry | GithubRepositoryVisibilityChangeDisableAuditEntry | GithubRepositoryVisibilityChangeEnableAuditEntry | GithubTeamAddMemberAuditEntry | GithubTeamAddRepositoryAuditEntry | GithubTeamChangeParentTeamAuditEntry | GithubTeamRemoveMemberAuditEntry | GithubTeamRemoveRepositoryAuditEntry

\\"\\"\\"The connection type for OrganizationAuditEntry.\\"\\"\\"
type GithubOrganizationAuditEntryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubOrganizationAuditEntryEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubOrganizationAuditEntry]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Metadata for an audit entry with action org.*\\"\\"\\"
interface GithubOrganizationAuditEntryData {
  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubOrganizationAuditEntryEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubOrganizationAuditEntry
}

\\"\\"\\"The connection type for Organization.\\"\\"\\"
type GithubOrganizationConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubOrganizationEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubOrganization]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubOrganizationEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubOrganization
}

\\"\\"\\"
An Identity Provider configured to provision SAML and SCIM identities for Organizations
\\"\\"\\"
type GithubOrganizationIdentityProvider implements GithubNode {
  \\"\\"\\"
  The digest algorithm used to sign SAML requests for the Identity Provider.
  \\"\\"\\"
  digestMethod: GithubURI

  \\"\\"\\"External Identities provisioned by this Identity Provider\\"\\"\\"
  externalIdentities(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubExternalIdentityConnection!
  id: ID!

  \\"\\"\\"
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  \\"\\"\\"
  idpCertificate: GithubX509Certificate

  \\"\\"\\"The Issuer Entity ID for the SAML Identity Provider\\"\\"\\"
  issuer: String

  \\"\\"\\"Organization this Identity Provider belongs to\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"
  The signature algorithm used to sign SAML requests for the Identity Provider.
  \\"\\"\\"
  signatureMethod: GithubURI

  \\"\\"\\"The URL endpoint for the Identity Provider's SAML SSO.\\"\\"\\"
  ssoUrl: GithubURI
}

\\"\\"\\"An Invitation for a user to an organization.\\"\\"\\"
type GithubOrganizationInvitation implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The email address of the user invited to the organization.\\"\\"\\"
  email: String
  id: ID!

  \\"\\"\\"The type of invitation that was sent (e.g. email, user).\\"\\"\\"
  invitationType: GithubOrganizationInvitationType!

  \\"\\"\\"The user who was invited to the organization.\\"\\"\\"
  invitee: GithubUser

  \\"\\"\\"The user who created the invitation.\\"\\"\\"
  inviter: GithubUser!

  \\"\\"\\"The organization the invite is for\\"\\"\\"
  organization: GithubOrganization!

  \\"\\"\\"The user's pending role in the organization (e.g. member, owner).\\"\\"\\"
  role: GithubOrganizationInvitationRole!
}

\\"\\"\\"The connection type for OrganizationInvitation.\\"\\"\\"
type GithubOrganizationInvitationConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubOrganizationInvitationEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubOrganizationInvitation]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubOrganizationInvitationEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubOrganizationInvitation
}

\\"\\"\\"The possible organization invitation roles.\\"\\"\\"
enum GithubOrganizationInvitationRole {
  \\"\\"\\"The user is invited to be an admin of the organization.\\"\\"\\"
  ADMIN

  \\"\\"\\"The user is invited to be a billing manager of the organization.\\"\\"\\"
  BILLING_MANAGER

  \\"\\"\\"The user is invited to be a direct member of the organization.\\"\\"\\"
  DIRECT_MEMBER

  \\"\\"\\"The user's previous role will be reinstated.\\"\\"\\"
  REINSTATE
}

\\"\\"\\"The possible organization invitation types.\\"\\"\\"
enum GithubOrganizationInvitationType {
  \\"\\"\\"The invitation was to an email address.\\"\\"\\"
  EMAIL

  \\"\\"\\"The invitation was to an existing user.\\"\\"\\"
  USER
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubOrganizationMemberConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubOrganizationMemberEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a user within an organization.\\"\\"\\"
type GithubOrganizationMemberEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"
  Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
  \\"\\"\\"
  hasTwoFactorEnabled: Boolean

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubUser

  \\"\\"\\"The role this user has in the organization.\\"\\"\\"
  role: GithubOrganizationMemberRole
}

\\"\\"\\"The possible roles within an organization for its members.\\"\\"\\"
enum GithubOrganizationMemberRole {
  \\"\\"\\"The user is an administrator of the organization.\\"\\"\\"
  ADMIN

  \\"\\"\\"The user is a member of the organization.\\"\\"\\"
  MEMBER
}

\\"\\"\\"
The possible values for the members can create repositories setting on an organization.
\\"\\"\\"
enum GithubOrganizationMembersCanCreateRepositoriesSettingValue {
  \\"\\"\\"Members will be able to create public and private repositories.\\"\\"\\"
  ALL

  \\"\\"\\"Members will not be able to create public or private repositories.\\"\\"\\"
  DISABLED

  \\"\\"\\"Members will be able to create only private repositories.\\"\\"\\"
  PRIVATE
}

\\"\\"\\"Ordering options for organization connections.\\"\\"\\"
input GithubOrganizationOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order organizations by.\\"\\"\\"
  field: GithubOrganizationOrderField!
}

\\"\\"\\"Properties by which organization connections can be ordered.\\"\\"\\"
enum GithubOrganizationOrderField {
  \\"\\"\\"Order organizations by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order organizations by login\\"\\"\\"
  LOGIN
}

\\"\\"\\"An organization teams hovercard context\\"\\"\\"
type GithubOrganizationTeamsHovercardContext implements GithubHovercardContext {
  \\"\\"\\"A string describing this context\\"\\"\\"
  message: String!

  \\"\\"\\"An octicon to accompany this context\\"\\"\\"
  octicon: String!

  \\"\\"\\"Teams in this organization the user is a member of that are relevant\\"\\"\\"
  relevantTeams(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubTeamConnection!

  \\"\\"\\"The path for the full team list for this user\\"\\"\\"
  teamsResourcePath: GithubURI!

  \\"\\"\\"The URL for the full team list for this user\\"\\"\\"
  teamsUrl: GithubURI!

  \\"\\"\\"The total number of teams the user is on in the organization\\"\\"\\"
  totalTeamCount: Int!
}

\\"\\"\\"An organization list hovercard context\\"\\"\\"
type GithubOrganizationsHovercardContext implements GithubHovercardContext {
  \\"\\"\\"A string describing this context\\"\\"\\"
  message: String!

  \\"\\"\\"An octicon to accompany this context\\"\\"\\"
  octicon: String!

  \\"\\"\\"Organizations this user is a member of that are relevant\\"\\"\\"
  relevantOrganizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubOrganizationConnection!

  \\"\\"\\"The total number of organizations this user is in\\"\\"\\"
  totalOrganizationCount: Int!
}

\\"\\"\\"Information for an uploaded package.\\"\\"\\"
type GithubPackage implements GithubNode {
  id: ID!

  \\"\\"\\"Find the latest version for the package.\\"\\"\\"
  latestVersion: GithubPackageVersion

  \\"\\"\\"Identifies the name of the package.\\"\\"\\"
  name: String!

  \\"\\"\\"Identifies the type of the package.\\"\\"\\"
  packageType: GithubPackageType!

  \\"\\"\\"The repository this package belongs to.\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"Statistics about package activity.\\"\\"\\"
  statistics: GithubPackageStatistics

  \\"\\"\\"Find package version by version string.\\"\\"\\"
  version(
    \\"\\"\\"The package version.\\"\\"\\"
    version: String!
  ): GithubPackageVersion

  \\"\\"\\"list of versions for this package\\"\\"\\"
  versions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering of the returned packages.\\"\\"\\"
    orderBy: GithubPackageVersionOrder = {direction: DESC, field: CREATED_AT}
  ): GithubPackageVersionConnection!
}

\\"\\"\\"The connection type for Package.\\"\\"\\"
type GithubPackageConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPackageEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPackage]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPackageEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPackage
}

\\"\\"\\"A file in a package version.\\"\\"\\"
type GithubPackageFile implements GithubNode {
  id: ID!

  \\"\\"\\"MD5 hash of the file.\\"\\"\\"
  md5: String

  \\"\\"\\"Name of the file.\\"\\"\\"
  name: String!

  \\"\\"\\"The package version this file belongs to.\\"\\"\\"
  packageVersion: GithubPackageVersion

  \\"\\"\\"SHA1 hash of the file.\\"\\"\\"
  sha1: String

  \\"\\"\\"SHA256 hash of the file.\\"\\"\\"
  sha256: String

  \\"\\"\\"Size of the file in bytes.\\"\\"\\"
  size: Int

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"URL to download the asset.\\"\\"\\"
  url: GithubURI
}

\\"\\"\\"The connection type for PackageFile.\\"\\"\\"
type GithubPackageFileConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPackageFileEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPackageFile]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPackageFileEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPackageFile
}

\\"\\"\\"Ways in which lists of package files can be ordered upon return.\\"\\"\\"
input GithubPackageFileOrder {
  \\"\\"\\"The direction in which to order package files by the specified field.\\"\\"\\"
  direction: GithubOrderDirection

  \\"\\"\\"The field in which to order package files by.\\"\\"\\"
  field: GithubPackageFileOrderField
}

\\"\\"\\"Properties by which package file connections can be ordered.\\"\\"\\"
enum GithubPackageFileOrderField {
  \\"\\"\\"Order package files by creation time\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"Ways in which lists of packages can be ordered upon return.\\"\\"\\"
input GithubPackageOrder {
  \\"\\"\\"The direction in which to order packages by the specified field.\\"\\"\\"
  direction: GithubOrderDirection

  \\"\\"\\"The field in which to order packages by.\\"\\"\\"
  field: GithubPackageOrderField
}

\\"\\"\\"Properties by which package connections can be ordered.\\"\\"\\"
enum GithubPackageOrderField {
  \\"\\"\\"Order packages by creation time\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"Represents an owner of a package.\\"\\"\\"
interface GithubPackageOwner {
  id: ID!

  \\"\\"\\"A list of packages under the owner.\\"\\"\\"
  packages(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Find packages by their names.\\"\\"\\"
    names: [String]

    \\"\\"\\"Ordering of the returned packages.\\"\\"\\"
    orderBy: GithubPackageOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"Filter registry package by type.\\"\\"\\"
    packageType: GithubPackageType

    \\"\\"\\"Find packages in a repository by ID.\\"\\"\\"
    repositoryId: ID
  ): GithubPackageConnection!
}

\\"\\"\\"
Represents a object that contains package activity statistics such as downloads.
\\"\\"\\"
type GithubPackageStatistics {
  \\"\\"\\"Number of times the package was downloaded since it was created.\\"\\"\\"
  downloadsTotalCount: Int!
}

\\"\\"\\"A version tag contains the mapping between a tag name and a version.\\"\\"\\"
type GithubPackageTag implements GithubNode {
  id: ID!

  \\"\\"\\"Identifies the tag name of the version.\\"\\"\\"
  name: String!

  \\"\\"\\"Version that the tag is associated with.\\"\\"\\"
  version: GithubPackageVersion
}

\\"\\"\\"The possible types of a package.\\"\\"\\"
enum GithubPackageType {
  \\"\\"\\"A debian package.\\"\\"\\"
  DEBIAN

  \\"\\"\\"A docker image.\\"\\"\\"
  DOCKER @deprecated(reason: \\"DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC.\\")

  \\"\\"\\"A maven package.\\"\\"\\"
  MAVEN

  \\"\\"\\"An npm package.\\"\\"\\"
  NPM

  \\"\\"\\"A nuget package.\\"\\"\\"
  NUGET

  \\"\\"\\"A python package.\\"\\"\\"
  PYPI

  \\"\\"\\"A rubygems package.\\"\\"\\"
  RUBYGEMS
}

\\"\\"\\"Information about a specific package version.\\"\\"\\"
type GithubPackageVersion implements GithubNode {
  \\"\\"\\"List of files associated with this package version\\"\\"\\"
  files(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering of the returned package files.\\"\\"\\"
    orderBy: GithubPackageFileOrder = {direction: ASC, field: CREATED_AT}
  ): GithubPackageFileConnection!
  id: ID!

  \\"\\"\\"The package associated with this version.\\"\\"\\"
  package: GithubPackage

  \\"\\"\\"The platform this version was built for.\\"\\"\\"
  platform: String

  \\"\\"\\"Whether or not this version is a pre-release.\\"\\"\\"
  preRelease: Boolean!

  \\"\\"\\"The README of this package version.\\"\\"\\"
  readme: String

  \\"\\"\\"The release associated with this package version.\\"\\"\\"
  release: GithubRelease

  \\"\\"\\"Statistics about package activity.\\"\\"\\"
  statistics: GithubPackageVersionStatistics

  \\"\\"\\"The package version summary.\\"\\"\\"
  summary: String

  \\"\\"\\"The version string.\\"\\"\\"
  version: String!
}

\\"\\"\\"The connection type for PackageVersion.\\"\\"\\"
type GithubPackageVersionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPackageVersionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPackageVersion]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPackageVersionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPackageVersion
}

\\"\\"\\"Ways in which lists of package versions can be ordered upon return.\\"\\"\\"
input GithubPackageVersionOrder {
  \\"\\"\\"
  The direction in which to order package versions by the specified field.
  \\"\\"\\"
  direction: GithubOrderDirection

  \\"\\"\\"The field in which to order package versions by.\\"\\"\\"
  field: GithubPackageVersionOrderField
}

\\"\\"\\"Properties by which package version connections can be ordered.\\"\\"\\"
enum GithubPackageVersionOrderField {
  \\"\\"\\"Order package versions by creation time\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"
Represents a object that contains package version activity statistics such as downloads.
\\"\\"\\"
type GithubPackageVersionStatistics {
  \\"\\"\\"Number of times the package was downloaded since it was created.\\"\\"\\"
  downloadsTotalCount: Int!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type GithubPageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String
}

\\"\\"\\"Types that can grant permissions on a repository to a user\\"\\"\\"
union GithubPermissionGranter = GithubOrganization | GithubRepository | GithubTeam

\\"\\"\\"A level of permission and source for a user's access to a repository.\\"\\"\\"
type GithubPermissionSource {
  \\"\\"\\"The organization the repository belongs to.\\"\\"\\"
  organization: GithubOrganization!

  \\"\\"\\"The level of access this source has granted to the user.\\"\\"\\"
  permission: GithubDefaultRepositoryPermissionField!

  \\"\\"\\"The source of this permission.\\"\\"\\"
  source: GithubPermissionGranter!
}

\\"\\"\\"Autogenerated input type of PinIssue\\"\\"\\"
input GithubPinIssueInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the issue to be pinned\\"\\"\\"
  issueId: ID!
}

\\"\\"\\"Autogenerated return type of PinIssue\\"\\"\\"
type GithubPinIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The issue that was pinned\\"\\"\\"
  issue: GithubIssue
}

\\"\\"\\"Types that can be pinned to a profile page.\\"\\"\\"
union GithubPinnableItem = GithubGist | GithubRepository

\\"\\"\\"The connection type for PinnableItem.\\"\\"\\"
type GithubPinnableItemConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPinnableItemEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPinnableItem]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPinnableItemEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPinnableItem
}

\\"\\"\\"Represents items that can be pinned to a profile page or dashboard.\\"\\"\\"
enum GithubPinnableItemType {
  \\"\\"\\"A gist.\\"\\"\\"
  GIST

  \\"\\"\\"An issue.\\"\\"\\"
  ISSUE

  \\"\\"\\"An organization.\\"\\"\\"
  ORGANIZATION

  \\"\\"\\"A project.\\"\\"\\"
  PROJECT

  \\"\\"\\"A pull request.\\"\\"\\"
  PULL_REQUEST

  \\"\\"\\"A repository.\\"\\"\\"
  REPOSITORY

  \\"\\"\\"A team.\\"\\"\\"
  TEAM

  \\"\\"\\"A user.\\"\\"\\"
  USER
}

\\"\\"\\"
A Pinned Discussion is a discussion pinned to a repository's index page.
\\"\\"\\"
type GithubPinnedDiscussion implements GithubNode & GithubRepositoryNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The discussion that was pinned.\\"\\"\\"
  discussion: GithubDiscussion!

  \\"\\"\\"Color stops of the chosen gradient\\"\\"\\"
  gradientStopColors: [String!]!
  id: ID!

  \\"\\"\\"Background texture pattern\\"\\"\\"
  pattern: GithubPinnedDiscussionPattern!

  \\"\\"\\"The actor that pinned this discussion.\\"\\"\\"
  pinnedBy: GithubActor!

  \\"\\"\\"Preconfigured background gradient option\\"\\"\\"
  preconfiguredGradient: GithubPinnedDiscussionGradient

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"The connection type for PinnedDiscussion.\\"\\"\\"
type GithubPinnedDiscussionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPinnedDiscussionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPinnedDiscussion]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPinnedDiscussionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPinnedDiscussion
}

\\"\\"\\"
Preconfigured gradients that may be used to style discussions pinned within a repository.
\\"\\"\\"
enum GithubPinnedDiscussionGradient {
  \\"\\"\\"A gradient of blue to mint\\"\\"\\"
  BLUE_MINT

  \\"\\"\\"A gradient of blue to purple\\"\\"\\"
  BLUE_PURPLE

  \\"\\"\\"A gradient of pink to blue\\"\\"\\"
  PINK_BLUE

  \\"\\"\\"A gradient of purple to coral\\"\\"\\"
  PURPLE_CORAL

  \\"\\"\\"A gradient of red to orange\\"\\"\\"
  RED_ORANGE
}

\\"\\"\\"
Preconfigured background patterns that may be used to style discussions pinned within a repository.
\\"\\"\\"
enum GithubPinnedDiscussionPattern {
  \\"\\"\\"An upward-facing chevron pattern\\"\\"\\"
  CHEVRON_UP

  \\"\\"\\"A hollow dot pattern\\"\\"\\"
  DOT

  \\"\\"\\"A solid dot pattern\\"\\"\\"
  DOT_FILL

  \\"\\"\\"A heart pattern\\"\\"\\"
  HEART_FILL

  \\"\\"\\"A plus sign pattern\\"\\"\\"
  PLUS

  \\"\\"\\"A lightning bolt pattern\\"\\"\\"
  ZAP
}

\\"\\"\\"Represents a 'pinned' event on a given issue or pull request.\\"\\"\\"
type GithubPinnedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the issue associated with the event.\\"\\"\\"
  issue: GithubIssue!
}

\\"\\"\\"A Pinned Issue is a issue pinned to a repository's index page.\\"\\"\\"
type GithubPinnedIssue implements GithubNode {
  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The issue that was pinned.\\"\\"\\"
  issue: GithubIssue!

  \\"\\"\\"The actor that pinned this issue.\\"\\"\\"
  pinnedBy: GithubActor!

  \\"\\"\\"The repository that this issue was pinned to.\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"The connection type for PinnedIssue.\\"\\"\\"
type GithubPinnedIssueConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPinnedIssueEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPinnedIssue]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPinnedIssueEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPinnedIssue
}

\\"\\"\\"An ISO-8601 encoded UTC date string with millisecond precision.\\"\\"\\"
scalar GithubPreciseDateTime

\\"\\"\\"Audit log entry for a private_repository_forking.disable event.\\"\\"\\"
type GithubPrivateRepositoryForkingDisableAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a private_repository_forking.enable event.\\"\\"\\"
type GithubPrivateRepositoryForkingEnableAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"
A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
\\"\\"\\"
type GithubProfileItemShowcase {
  \\"\\"\\"Whether or not the owner has pinned any repositories or gists.\\"\\"\\"
  hasPinnedItems: Boolean!

  \\"\\"\\"
  The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
  \\"\\"\\"
  items(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPinnableItemConnection!
}

\\"\\"\\"Represents any entity on GitHub that has a profile page.\\"\\"\\"
interface GithubProfileOwner {
  \\"\\"\\"
  Determine if this repository owner has any items that can be pinned to their profile.
  \\"\\"\\"
  anyPinnableItems(
    \\"\\"\\"Filter to only a particular kind of pinnable item.\\"\\"\\"
    type: GithubPinnableItemType
  ): Boolean!

  \\"\\"\\"The public profile email.\\"\\"\\"
  email: String
  id: ID!

  \\"\\"\\"
  Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
  \\"\\"\\"
  itemShowcase: GithubProfileItemShowcase!

  \\"\\"\\"The public profile location.\\"\\"\\"
  location: String

  \\"\\"\\"The username used to login.\\"\\"\\"
  login: String!

  \\"\\"\\"The public profile name.\\"\\"\\"
  name: String

  \\"\\"\\"
  A list of repositories and gists this profile owner can pin to their profile.
  \\"\\"\\"
  pinnableItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter the types of pinnable items that are returned.\\"\\"\\"
    types: [GithubPinnableItemType!]
  ): GithubPinnableItemConnection!

  \\"\\"\\"
  A list of repositories and gists this profile owner has pinned to their profile
  \\"\\"\\"
  pinnedItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter the types of pinned items that are returned.\\"\\"\\"
    types: [GithubPinnableItemType!]
  ): GithubPinnableItemConnection!

  \\"\\"\\"
  Returns how many more items this profile owner can pin to their profile.
  \\"\\"\\"
  pinnedItemsRemaining: Int!

  \\"\\"\\"Can the viewer pin repositories and gists to the profile?\\"\\"\\"
  viewerCanChangePinnedItems: Boolean!

  \\"\\"\\"The public profile website URL.\\"\\"\\"
  websiteUrl: GithubURI
}

\\"\\"\\"
Projects manage issues, pull requests and notes within a project owner.
\\"\\"\\"
type GithubProject implements GithubClosable & GithubNode & GithubUpdatable {
  \\"\\"\\"The project's description body.\\"\\"\\"
  body: String

  \\"\\"\\"The projects description body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"
  \`true\` if the object is closed (definition of closed may depend on type)
  \\"\\"\\"
  closed: Boolean!

  \\"\\"\\"Identifies the date and time when the object was closed.\\"\\"\\"
  closedAt: GithubDateTime

  \\"\\"\\"List of columns in the project\\"\\"\\"
  columns(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubProjectColumnConnection!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The actor who originally created the project.\\"\\"\\"
  creator: GithubActor

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The project's name.\\"\\"\\"
  name: String!

  \\"\\"\\"The project's number.\\"\\"\\"
  number: Int!

  \\"\\"\\"
  The project's owner. Currently limited to repositories, organizations, and users.
  \\"\\"\\"
  owner: GithubProjectOwner!

  \\"\\"\\"List of pending cards in this project\\"\\"\\"
  pendingCards(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"A list of archived states to filter the cards by\\"\\"\\"
    archivedStates: [GithubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubProjectCardConnection!

  \\"\\"\\"Project progress details.\\"\\"\\"
  progress: GithubProjectProgress!

  \\"\\"\\"The HTTP path for this project\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Whether the project is open or closed.\\"\\"\\"
  state: GithubProjectState!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this project\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!
}

\\"\\"\\"A card in a project.\\"\\"\\"
type GithubProjectCard implements GithubNode {
  \\"\\"\\"
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  
  \\"\\"\\"
  column: GithubProjectColumn

  \\"\\"\\"The card content item\\"\\"\\"
  content: GithubProjectCardItem

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The actor who created this card\\"\\"\\"
  creator: GithubActor

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"Whether the card is archived\\"\\"\\"
  isArchived: Boolean!

  \\"\\"\\"The card note\\"\\"\\"
  note: String

  \\"\\"\\"The project that contains this card.\\"\\"\\"
  project: GithubProject!

  \\"\\"\\"The HTTP path for this card\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The state of ProjectCard\\"\\"\\"
  state: GithubProjectCardState

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this card\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The possible archived states of a project card.\\"\\"\\"
enum GithubProjectCardArchivedState {
  \\"\\"\\"A project card that is archived\\"\\"\\"
  ARCHIVED

  \\"\\"\\"A project card that is not archived\\"\\"\\"
  NOT_ARCHIVED
}

\\"\\"\\"The connection type for ProjectCard.\\"\\"\\"
type GithubProjectCardConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubProjectCardEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubProjectCard]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubProjectCardEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubProjectCard
}

\\"\\"\\"Types that can be inside Project Cards.\\"\\"\\"
union GithubProjectCardItem = GithubIssue | GithubPullRequest

\\"\\"\\"Various content states of a ProjectCard\\"\\"\\"
enum GithubProjectCardState {
  \\"\\"\\"The card has content only.\\"\\"\\"
  CONTENT_ONLY

  \\"\\"\\"The card has a note only.\\"\\"\\"
  NOTE_ONLY

  \\"\\"\\"The card is redacted.\\"\\"\\"
  REDACTED
}

\\"\\"\\"A column inside a project.\\"\\"\\"
type GithubProjectColumn implements GithubNode {
  \\"\\"\\"List of cards in the column\\"\\"\\"
  cards(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"A list of archived states to filter the cards by\\"\\"\\"
    archivedStates: [GithubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubProjectCardConnection!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The project column's name.\\"\\"\\"
  name: String!

  \\"\\"\\"The project that contains this column.\\"\\"\\"
  project: GithubProject!

  \\"\\"\\"The semantic purpose of the column\\"\\"\\"
  purpose: GithubProjectColumnPurpose

  \\"\\"\\"The HTTP path for this project column\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this project column\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The connection type for ProjectColumn.\\"\\"\\"
type GithubProjectColumnConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubProjectColumnEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubProjectColumn]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubProjectColumnEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubProjectColumn
}

\\"\\"\\"The semantic purpose of the column - todo, in progress, or done.\\"\\"\\"
enum GithubProjectColumnPurpose {
  \\"\\"\\"The column contains cards which are complete\\"\\"\\"
  DONE

  \\"\\"\\"The column contains cards which are currently being worked on\\"\\"\\"
  IN_PROGRESS

  \\"\\"\\"The column contains cards still to be worked on\\"\\"\\"
  TODO
}

\\"\\"\\"A list of projects associated with the owner.\\"\\"\\"
type GithubProjectConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubProjectEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubProject]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubProjectEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubProject
}

\\"\\"\\"Ways in which lists of projects can be ordered upon return.\\"\\"\\"
input GithubProjectOrder {
  \\"\\"\\"The direction in which to order projects by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order projects by.\\"\\"\\"
  field: GithubProjectOrderField!
}

\\"\\"\\"Properties by which project connections can be ordered.\\"\\"\\"
enum GithubProjectOrderField {
  \\"\\"\\"Order projects by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order projects by name\\"\\"\\"
  NAME

  \\"\\"\\"Order projects by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"Represents an owner of a Project.\\"\\"\\"
interface GithubProjectOwner {
  id: ID!

  \\"\\"\\"Find project by number.\\"\\"\\"
  project(
    \\"\\"\\"The project number to find.\\"\\"\\"
    number: Int!
  ): GithubProject

  \\"\\"\\"A list of projects under the owner.\\"\\"\\"
  projects(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for projects returned from the connection\\"\\"\\"
    orderBy: GithubProjectOrder

    \\"\\"\\"Query to search projects by, currently only searching by name.\\"\\"\\"
    search: String

    \\"\\"\\"A list of states to filter the projects by.\\"\\"\\"
    states: [GithubProjectState!]
  ): GithubProjectConnection!

  \\"\\"\\"The HTTP path listing owners projects\\"\\"\\"
  projectsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL listing owners projects\\"\\"\\"
  projectsUrl: GithubURI!

  \\"\\"\\"Can the current viewer create new projects on this owner.\\"\\"\\"
  viewerCanCreateProjects: Boolean!
}

\\"\\"\\"Project progress stats.\\"\\"\\"
type GithubProjectProgress {
  \\"\\"\\"The number of done cards.\\"\\"\\"
  doneCount: Int!

  \\"\\"\\"The percentage of done cards.\\"\\"\\"
  donePercentage: Float!

  \\"\\"\\"
  Whether progress tracking is enabled and cards with purpose exist for this project
  \\"\\"\\"
  enabled: Boolean!

  \\"\\"\\"The number of in-progress cards.\\"\\"\\"
  inProgressCount: Int!

  \\"\\"\\"The percentage of in-progress cards.\\"\\"\\"
  inProgressPercentage: Float!

  \\"\\"\\"The number of to do cards.\\"\\"\\"
  todoCount: Int!

  \\"\\"\\"The percentage of to do cards.\\"\\"\\"
  todoPercentage: Float!
}

\\"\\"\\"State of the project; either 'open' or 'closed'\\"\\"\\"
enum GithubProjectState {
  \\"\\"\\"The project is closed.\\"\\"\\"
  CLOSED

  \\"\\"\\"The project is open.\\"\\"\\"
  OPEN
}

\\"\\"\\"GitHub-provided templates for Projects\\"\\"\\"
enum GithubProjectTemplate {
  \\"\\"\\"
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  \\"\\"\\"
  AUTOMATED_KANBAN_V2

  \\"\\"\\"
  Create a board with triggers to automatically move cards across columns with review automation.
  \\"\\"\\"
  AUTOMATED_REVIEWS_KANBAN

  \\"\\"\\"Create a board with columns for To do, In progress and Done.\\"\\"\\"
  BASIC_KANBAN

  \\"\\"\\"
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  \\"\\"\\"
  BUG_TRIAGE
}

\\"\\"\\"A user's public key.\\"\\"\\"
type GithubPublicKey implements GithubNode {
  \\"\\"\\"
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  \\"\\"\\"
  accessedAt: GithubDateTime

  \\"\\"\\"
  Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  \\"\\"\\"
  createdAt: GithubDateTime

  \\"\\"\\"The fingerprint for this PublicKey.\\"\\"\\"
  fingerprint: String!
  id: ID!

  \\"\\"\\"
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  \\"\\"\\"
  isReadOnly: Boolean

  \\"\\"\\"The public key string.\\"\\"\\"
  key: String!

  \\"\\"\\"
  Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
  \\"\\"\\"
  updatedAt: GithubDateTime
}

\\"\\"\\"The connection type for PublicKey.\\"\\"\\"
type GithubPublicKeyConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPublicKeyEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPublicKey]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPublicKeyEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPublicKey
}

\\"\\"\\"A repository pull request.\\"\\"\\"
type GithubPullRequest implements GithubAssignable & GithubClosable & GithubComment & GithubLabelable & GithubLockable & GithubNode & GithubReactable & GithubRepositoryNode & GithubSubscribable & GithubUniformResourceLocatable & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"Reason that the conversation was locked.\\"\\"\\"
  activeLockReason: GithubLockReason

  \\"\\"\\"The number of additions in this pull request.\\"\\"\\"
  additions: Int!

  \\"\\"\\"A list of Users assigned to this object.\\"\\"\\"
  assignees(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!

  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"
  Returns the auto-merge request object if one exists for this pull request.
  \\"\\"\\"
  autoMergeRequest: GithubAutoMergeRequest

  \\"\\"\\"Identifies the base Ref associated with the pull request.\\"\\"\\"
  baseRef: GithubRef

  \\"\\"\\"
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  \\"\\"\\"
  baseRefName: String!

  \\"\\"\\"
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  \\"\\"\\"
  baseRefOid: GithubGitObjectID!

  \\"\\"\\"The repository associated with this pull request's base Ref.\\"\\"\\"
  baseRepository: GithubRepository

  \\"\\"\\"The body as Markdown.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"The number of changed files in this pull request.\\"\\"\\"
  changedFiles: Int!

  \\"\\"\\"The HTTP path for the checks of this pull request.\\"\\"\\"
  checksResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for the checks of this pull request.\\"\\"\\"
  checksUrl: GithubURI!

  \\"\\"\\"\`true\` if the pull request is closed\\"\\"\\"
  closed: Boolean!

  \\"\\"\\"Identifies the date and time when the object was closed.\\"\\"\\"
  closedAt: GithubDateTime

  \\"\\"\\"List of issues that were may be closed by this pull request\\"\\"\\"
  closingIssuesReferences(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issues returned from the connection\\"\\"\\"
    orderBy: GithubIssueOrder
  ): GithubIssueConnection

  \\"\\"\\"A list of comments associated with the pull request.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issue comments returned from the connection.\\"\\"\\"
    orderBy: GithubIssueCommentOrder
  ): GithubIssueCommentConnection!

  \\"\\"\\"
  A list of commits present in this pull request's head branch not present in the base branch.
  \\"\\"\\"
  commits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPullRequestCommitConnection!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The number of deletions in this pull request.\\"\\"\\"
  deletions: Int!

  \\"\\"\\"The actor who edited this pull request's body.\\"\\"\\"
  editor: GithubActor

  \\"\\"\\"Lists the files changed within this pull request.\\"\\"\\"
  files(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPullRequestChangedFileConnection

  \\"\\"\\"Identifies the head Ref associated with the pull request.\\"\\"\\"
  headRef: GithubRef

  \\"\\"\\"
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  \\"\\"\\"
  headRefName: String!

  \\"\\"\\"
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  \\"\\"\\"
  headRefOid: GithubGitObjectID!

  \\"\\"\\"The repository associated with this pull request's head Ref.\\"\\"\\"
  headRepository: GithubRepository

  \\"\\"\\"
  The owner of the repository associated with this pull request's head Ref.
  \\"\\"\\"
  headRepositoryOwner: GithubRepositoryOwner

  \\"\\"\\"The hovercard information for this issue\\"\\"\\"
  hovercard(
    \\"\\"\\"Whether or not to include notification contexts\\"\\"\\"
    includeNotificationContexts: Boolean = true
  ): GithubHovercard!
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"The head and base repositories are different.\\"\\"\\"
  isCrossRepository: Boolean!

  \\"\\"\\"Identifies if the pull request is a draft.\\"\\"\\"
  isDraft: Boolean!

  \\"\\"\\"Is this pull request read by the viewer\\"\\"\\"
  isReadByViewer: Boolean

  \\"\\"\\"A list of labels associated with the object.\\"\\"\\"
  labels(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for labels returned from the connection.\\"\\"\\"
    orderBy: GithubLabelOrder = {direction: ASC, field: CREATED_AT}
  ): GithubLabelConnection

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"A list of latest reviews per user associated with the pull request.\\"\\"\\"
  latestOpinionatedReviews(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Only return reviews from user who have write access to the repository\\"\\"\\"
    writersOnly: Boolean = false
  ): GithubPullRequestReviewConnection

  \\"\\"\\"
  A list of latest reviews per user associated with the pull request that are not also pending review.
  \\"\\"\\"
  latestReviews(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPullRequestReviewConnection

  \\"\\"\\"\`true\` if the pull request is locked\\"\\"\\"
  locked: Boolean!

  \\"\\"\\"Indicates whether maintainers can modify the pull request.\\"\\"\\"
  maintainerCanModify: Boolean!

  \\"\\"\\"The commit that was created when this pull request was merged.\\"\\"\\"
  mergeCommit: GithubCommit

  \\"\\"\\"
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  \\"\\"\\"
  mergeable: GithubMergeableState!

  \\"\\"\\"Whether or not the pull request was merged.\\"\\"\\"
  merged: Boolean!

  \\"\\"\\"The date and time that the pull request was merged.\\"\\"\\"
  mergedAt: GithubDateTime

  \\"\\"\\"The actor who merged the pull request.\\"\\"\\"
  mergedBy: GithubActor

  \\"\\"\\"Identifies the milestone associated with the pull request.\\"\\"\\"
  milestone: GithubMilestone

  \\"\\"\\"Identifies the pull request number.\\"\\"\\"
  number: Int!

  \\"\\"\\"
  A list of Users that are participating in the Pull Request conversation.
  \\"\\"\\"
  participants(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!

  \\"\\"\\"The permalink to the pull request.\\"\\"\\"
  permalink: GithubURI!

  \\"\\"\\"
  The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the \`mergeable\` field for more details on the mergeability of the pull request.
  \\"\\"\\"
  potentialMergeCommit: GithubCommit

  \\"\\"\\"List of project cards associated with this pull request.\\"\\"\\"
  projectCards(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"A list of archived states to filter the cards by\\"\\"\\"
    archivedStates: [GithubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubProjectCardConnection!

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this pull request.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP path for reverting this pull request.\\"\\"\\"
  revertResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for reverting this pull request.\\"\\"\\"
  revertUrl: GithubURI!

  \\"\\"\\"The current status of this pull request with respect to code review.\\"\\"\\"
  reviewDecision: GithubPullRequestReviewDecision

  \\"\\"\\"A list of review requests associated with the pull request.\\"\\"\\"
  reviewRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubReviewRequestConnection

  \\"\\"\\"The list of all review threads for this pull request.\\"\\"\\"
  reviewThreads(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPullRequestReviewThreadConnection!

  \\"\\"\\"A list of reviews associated with the pull request.\\"\\"\\"
  reviews(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Filter by author of the review.\\"\\"\\"
    author: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"A list of states to filter the reviews.\\"\\"\\"
    states: [GithubPullRequestReviewState!]
  ): GithubPullRequestReviewConnection

  \\"\\"\\"Identifies the state of the pull request.\\"\\"\\"
  state: GithubPullRequestState!

  \\"\\"\\"
  A list of reviewer suggestions based on commit history and past review comments.
  \\"\\"\\"
  suggestedReviewers: [GithubSuggestedReviewer]!

  \\"\\"\\"
  A list of events, comments, commits, etc. associated with the pull request.
  \\"\\"\\"
  timeline(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows filtering timeline events by a \`since\` timestamp.\\"\\"\\"
    since: GithubDateTime
  ): GithubPullRequestTimelineConnection! @deprecated(reason: \\"\`timeline\` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.\\")

  \\"\\"\\"
  A list of events, comments, commits, etc. associated with the pull request.
  \\"\\"\\"
  timelineItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Filter timeline items by type.\\"\\"\\"
    itemTypes: [GithubPullRequestTimelineItemsItemType!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter timeline items by a \`since\` timestamp.\\"\\"\\"
    since: GithubDateTime

    \\"\\"\\"Skips the first _n_ elements in the list.\\"\\"\\"
    skip: Int
  ): GithubPullRequestTimelineItemsConnection!

  \\"\\"\\"Identifies the pull request title.\\"\\"\\"
  title: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this pull request.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Whether or not the viewer can apply suggestion.\\"\\"\\"
  viewerCanApplySuggestion: Boolean!

  \\"\\"\\"Check if the viewer can restore the deleted head ref.\\"\\"\\"
  viewerCanDeleteHeadRef: Boolean!

  \\"\\"\\"Whether or not the viewer can disable auto-merge\\"\\"\\"
  viewerCanDisableAutoMerge: Boolean!

  \\"\\"\\"Whether or not the viewer can enable auto-merge\\"\\"\\"
  viewerCanEnableAutoMerge: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!

  \\"\\"\\"The latest review given from the viewer.\\"\\"\\"
  viewerLatestReview: GithubPullRequestReview

  \\"\\"\\"
  The person who has requested the viewer for review on this pull request.
  \\"\\"\\"
  viewerLatestReviewRequest: GithubReviewRequest

  \\"\\"\\"The merge body text for the viewer and method.\\"\\"\\"
  viewerMergeBodyText(
    \\"\\"\\"The merge method for the message.\\"\\"\\"
    mergeType: GithubPullRequestMergeMethod
  ): String!

  \\"\\"\\"The merge headline text for the viewer and method.\\"\\"\\"
  viewerMergeHeadlineText(
    \\"\\"\\"The merge method for the message.\\"\\"\\"
    mergeType: GithubPullRequestMergeMethod
  ): String!

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState
}

\\"\\"\\"A file changed in a pull request.\\"\\"\\"
type GithubPullRequestChangedFile {
  \\"\\"\\"The number of additions to the file.\\"\\"\\"
  additions: Int!

  \\"\\"\\"The number of deletions to the file.\\"\\"\\"
  deletions: Int!

  \\"\\"\\"The path of the file.\\"\\"\\"
  path: String!

  \\"\\"\\"The state of the file for the viewer.\\"\\"\\"
  viewerViewedState: GithubFileViewedState!
}

\\"\\"\\"The connection type for PullRequestChangedFile.\\"\\"\\"
type GithubPullRequestChangedFileConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestChangedFileEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequestChangedFile]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestChangedFileEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequestChangedFile
}

\\"\\"\\"Represents a Git commit part of a pull request.\\"\\"\\"
type GithubPullRequestCommit implements GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"The Git commit object\\"\\"\\"
  commit: GithubCommit!
  id: ID!

  \\"\\"\\"The pull request this commit belongs to\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The HTTP path for this pull request commit\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this pull request commit\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Represents a commit comment thread part of a pull request.\\"\\"\\"
type GithubPullRequestCommitCommentThread implements GithubNode & GithubRepositoryNode {
  \\"\\"\\"The comments that exist in this thread.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCommitCommentConnection!

  \\"\\"\\"The commit the comments were made on.\\"\\"\\"
  commit: GithubCommit!
  id: ID!

  \\"\\"\\"The file the comments were made on.\\"\\"\\"
  path: String

  \\"\\"\\"The position in the diff for the commit that the comment was made on.\\"\\"\\"
  position: Int

  \\"\\"\\"The pull request this commit comment thread belongs to\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"The connection type for PullRequestCommit.\\"\\"\\"
type GithubPullRequestCommitConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestCommitEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequestCommit]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestCommitEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequestCommit
}

\\"\\"\\"The connection type for PullRequest.\\"\\"\\"
type GithubPullRequestConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequest]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"This aggregates pull requests opened by a user within one repository.\\"\\"\\"
type GithubPullRequestContributionsByRepository {
  \\"\\"\\"The pull request contributions.\\"\\"\\"
  contributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for contributions returned from the connection.\\"\\"\\"
    orderBy: GithubContributionOrder = {direction: DESC}
  ): GithubCreatedPullRequestContributionConnection!

  \\"\\"\\"The repository in which the pull requests were opened.\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequest
}

\\"\\"\\"
Represents available types of methods to use when merging a pull request.
\\"\\"\\"
enum GithubPullRequestMergeMethod {
  \\"\\"\\"
  Add all commits from the head branch to the base branch with a merge commit.
  \\"\\"\\"
  MERGE

  \\"\\"\\"
  Add all commits from the head branch onto the base branch individually.
  \\"\\"\\"
  REBASE

  \\"\\"\\"
  Combine all commits from the head branch into a single commit in the base branch.
  \\"\\"\\"
  SQUASH
}

\\"\\"\\"Ways in which lists of issues can be ordered upon return.\\"\\"\\"
input GithubPullRequestOrder {
  \\"\\"\\"The direction in which to order pull requests by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order pull requests by.\\"\\"\\"
  field: GithubPullRequestOrderField!
}

\\"\\"\\"Properties by which pull_requests connections can be ordered.\\"\\"\\"
enum GithubPullRequestOrderField {
  \\"\\"\\"Order pull_requests by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order pull_requests by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"A review object for a given pull request.\\"\\"\\"
type GithubPullRequestReview implements GithubComment & GithubDeletable & GithubNode & GithubReactable & GithubRepositoryNode & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"
  Indicates whether the author of this review has push access to the repository.
  \\"\\"\\"
  authorCanPushToRepository: Boolean!

  \\"\\"\\"Identifies the pull request review body.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body of this review rendered as plain text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"A list of review comments for the current pull request review.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPullRequestReviewCommentConnection!

  \\"\\"\\"Identifies the commit associated with this pull request review.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"A list of teams that this review was made on behalf of.\\"\\"\\"
  onBehalfOf(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubTeamConnection!

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"Identifies the pull request associated with this pull request review.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path permalink for this PullRequestReview.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the current state of the pull request review.\\"\\"\\"
  state: GithubPullRequestReviewState!

  \\"\\"\\"Identifies when the Pull Request Review was submitted\\"\\"\\"
  submittedAt: GithubDateTime

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL permalink for this PullRequestReview.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!
}

\\"\\"\\"A review comment associated with a given repository pull request.\\"\\"\\"
type GithubPullRequestReviewComment implements GithubComment & GithubDeletable & GithubMinimizable & GithubNode & GithubReactable & GithubRepositoryNode & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the subject of the comment.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"The comment body of this review comment.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The comment body of this review comment rendered as plain text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"Identifies the commit associated with the comment.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"Identifies when the comment was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The diff hunk to which the comment applies.\\"\\"\\"
  diffHunk: String!

  \\"\\"\\"Identifies when the comment was created in a draft state.\\"\\"\\"
  draftedAt: GithubDateTime!

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"Returns whether or not a comment has been minimized.\\"\\"\\"
  isMinimized: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Returns why the comment was minimized.\\"\\"\\"
  minimizedReason: String

  \\"\\"\\"Identifies the original commit associated with the comment.\\"\\"\\"
  originalCommit: GithubCommit

  \\"\\"\\"The original line index in the diff to which the comment applies.\\"\\"\\"
  originalPosition: Int!

  \\"\\"\\"Identifies when the comment body is outdated\\"\\"\\"
  outdated: Boolean!

  \\"\\"\\"The path to which the comment applies.\\"\\"\\"
  path: String!

  \\"\\"\\"The line index in the diff to which the comment applies.\\"\\"\\"
  position: Int

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"The pull request associated with this review comment.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The pull request review associated with this review comment.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The comment this is a reply to.\\"\\"\\"
  replyTo: GithubPullRequestReviewComment

  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path permalink for this review comment.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the state of the comment.\\"\\"\\"
  state: GithubPullRequestReviewCommentState!

  \\"\\"\\"Identifies when the comment was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL permalink for this review comment.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Check if the current viewer can minimize this object.\\"\\"\\"
  viewerCanMinimize: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!
}

\\"\\"\\"The connection type for PullRequestReviewComment.\\"\\"\\"
type GithubPullRequestReviewCommentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestReviewCommentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequestReviewComment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestReviewCommentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequestReviewComment
}

\\"\\"\\"The possible states of a pull request review comment.\\"\\"\\"
enum GithubPullRequestReviewCommentState {
  \\"\\"\\"A comment that is part of a pending review\\"\\"\\"
  PENDING

  \\"\\"\\"A comment that is part of a submitted review\\"\\"\\"
  SUBMITTED
}

\\"\\"\\"The connection type for PullRequestReview.\\"\\"\\"
type GithubPullRequestReviewConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestReviewEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequestReview]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"
This aggregates pull request reviews made by a user within one repository.
\\"\\"\\"
type GithubPullRequestReviewContributionsByRepository {
  \\"\\"\\"The pull request review contributions.\\"\\"\\"
  contributions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for contributions returned from the connection.\\"\\"\\"
    orderBy: GithubContributionOrder = {direction: DESC}
  ): GithubCreatedPullRequestReviewContributionConnection!

  \\"\\"\\"The repository in which the pull request reviews were made.\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"The review status of a pull request.\\"\\"\\"
enum GithubPullRequestReviewDecision {
  \\"\\"\\"The pull request has received an approving review.\\"\\"\\"
  APPROVED

  \\"\\"\\"Changes have been requested on the pull request.\\"\\"\\"
  CHANGES_REQUESTED

  \\"\\"\\"A review is required before the pull request can be merged.\\"\\"\\"
  REVIEW_REQUIRED
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestReviewEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequestReview
}

\\"\\"\\"The possible events to perform on a pull request review.\\"\\"\\"
enum GithubPullRequestReviewEvent {
  \\"\\"\\"Submit feedback and approve merging these changes.\\"\\"\\"
  APPROVE

  \\"\\"\\"Submit general feedback without explicit approval.\\"\\"\\"
  COMMENT

  \\"\\"\\"Dismiss review so it now longer effects merging.\\"\\"\\"
  DISMISS

  \\"\\"\\"Submit feedback that must be addressed before merging.\\"\\"\\"
  REQUEST_CHANGES
}

\\"\\"\\"The possible states of a pull request review.\\"\\"\\"
enum GithubPullRequestReviewState {
  \\"\\"\\"A review allowing the pull request to merge.\\"\\"\\"
  APPROVED

  \\"\\"\\"A review blocking the pull request from merging.\\"\\"\\"
  CHANGES_REQUESTED

  \\"\\"\\"An informational review.\\"\\"\\"
  COMMENTED

  \\"\\"\\"A review that has been dismissed.\\"\\"\\"
  DISMISSED

  \\"\\"\\"A review that has not yet been submitted.\\"\\"\\"
  PENDING
}

\\"\\"\\"A threaded list of comments for a given pull request.\\"\\"\\"
type GithubPullRequestReviewThread implements GithubNode {
  \\"\\"\\"A list of pull request comments associated with the thread.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Skips the first _n_ elements in the list.\\"\\"\\"
    skip: Int
  ): GithubPullRequestReviewCommentConnection!

  \\"\\"\\"The side of the diff on which this thread was placed.\\"\\"\\"
  diffSide: GithubDiffSide!
  id: ID!

  \\"\\"\\"Whether or not the thread has been collapsed (outdated or resolved)\\"\\"\\"
  isCollapsed: Boolean!

  \\"\\"\\"Indicates whether this thread was outdated by newer changes.\\"\\"\\"
  isOutdated: Boolean!

  \\"\\"\\"Whether this thread has been resolved\\"\\"\\"
  isResolved: Boolean!

  \\"\\"\\"The line in the file to which this thread refers\\"\\"\\"
  line: Int

  \\"\\"\\"The original line in the file to which this thread refers.\\"\\"\\"
  originalLine: Int

  \\"\\"\\"
  The original start line in the file to which this thread refers (multi-line only).
  \\"\\"\\"
  originalStartLine: Int

  \\"\\"\\"Identifies the file path of this thread.\\"\\"\\"
  path: String!

  \\"\\"\\"Identifies the pull request associated with this thread.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"Identifies the repository associated with this thread.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The user who resolved this thread\\"\\"\\"
  resolvedBy: GithubUser

  \\"\\"\\"
  The side of the diff that the first line of the thread starts on (multi-line only)
  \\"\\"\\"
  startDiffSide: GithubDiffSide

  \\"\\"\\"
  The start line in the file to which this thread refers (multi-line only)
  \\"\\"\\"
  startLine: Int

  \\"\\"\\"Indicates whether the current viewer can reply to this thread.\\"\\"\\"
  viewerCanReply: Boolean!

  \\"\\"\\"Whether or not the viewer can resolve this thread\\"\\"\\"
  viewerCanResolve: Boolean!

  \\"\\"\\"Whether or not the viewer can unresolve this thread\\"\\"\\"
  viewerCanUnresolve: Boolean!
}

\\"\\"\\"Review comment threads for a pull request review.\\"\\"\\"
type GithubPullRequestReviewThreadConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestReviewThreadEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequestReviewThread]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestReviewThreadEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequestReviewThread
}

\\"\\"\\"
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
\\"\\"\\"
type GithubPullRequestRevisionMarker {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The last commit the viewer has seen.\\"\\"\\"
  lastSeenCommit: GithubCommit!

  \\"\\"\\"The pull request to which the marker belongs.\\"\\"\\"
  pullRequest: GithubPullRequest!
}

\\"\\"\\"The possible states of a pull request.\\"\\"\\"
enum GithubPullRequestState {
  \\"\\"\\"A pull request that has been closed without being merged.\\"\\"\\"
  CLOSED

  \\"\\"\\"A pull request that has been closed by being merged.\\"\\"\\"
  MERGED

  \\"\\"\\"A pull request that is still open.\\"\\"\\"
  OPEN
}

\\"\\"\\"A repository pull request template.\\"\\"\\"
type GithubPullRequestTemplate {
  \\"\\"\\"The body of the template\\"\\"\\"
  body: String

  \\"\\"\\"The filename of the template\\"\\"\\"
  filename: String

  \\"\\"\\"The repository the template belongs to\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"The connection type for PullRequestTimelineItem.\\"\\"\\"
type GithubPullRequestTimelineConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestTimelineItemEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequestTimelineItem]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An item in a pull request timeline\\"\\"\\"
union GithubPullRequestTimelineItem = GithubAssignedEvent | GithubBaseRefDeletedEvent | GithubBaseRefForcePushedEvent | GithubClosedEvent | GithubCommit | GithubCommitCommentThread | GithubCrossReferencedEvent | GithubDemilestonedEvent | GithubDeployedEvent | GithubDeploymentEnvironmentChangedEvent | GithubHeadRefDeletedEvent | GithubHeadRefForcePushedEvent | GithubHeadRefRestoredEvent | GithubIssueComment | GithubLabeledEvent | GithubLockedEvent | GithubMergedEvent | GithubMilestonedEvent | GithubPullRequestReview | GithubPullRequestReviewComment | GithubPullRequestReviewThread | GithubReferencedEvent | GithubRenamedTitleEvent | GithubReopenedEvent | GithubReviewDismissedEvent | GithubReviewRequestRemovedEvent | GithubReviewRequestedEvent | GithubSubscribedEvent | GithubUnassignedEvent | GithubUnlabeledEvent | GithubUnlockedEvent | GithubUnsubscribedEvent | GithubUserBlockedEvent

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestTimelineItemEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequestTimelineItem
}

\\"\\"\\"An item in a pull request timeline\\"\\"\\"
union GithubPullRequestTimelineItems = GithubAddedToProjectEvent | GithubAssignedEvent | GithubAutoMergeDisabledEvent | GithubAutoMergeEnabledEvent | GithubAutoRebaseEnabledEvent | GithubAutoSquashEnabledEvent | GithubAutomaticBaseChangeFailedEvent | GithubAutomaticBaseChangeSucceededEvent | GithubBaseRefChangedEvent | GithubBaseRefDeletedEvent | GithubBaseRefForcePushedEvent | GithubClosedEvent | GithubCommentDeletedEvent | GithubConnectedEvent | GithubConvertToDraftEvent | GithubConvertedNoteToIssueEvent | GithubCrossReferencedEvent | GithubDemilestonedEvent | GithubDeployedEvent | GithubDeploymentEnvironmentChangedEvent | GithubDisconnectedEvent | GithubHeadRefDeletedEvent | GithubHeadRefForcePushedEvent | GithubHeadRefRestoredEvent | GithubIssueComment | GithubLabeledEvent | GithubLockedEvent | GithubMarkedAsDuplicateEvent | GithubMentionedEvent | GithubMergedEvent | GithubMilestonedEvent | GithubMovedColumnsInProjectEvent | GithubPinnedEvent | GithubPullRequestCommit | GithubPullRequestCommitCommentThread | GithubPullRequestReview | GithubPullRequestReviewThread | GithubPullRequestRevisionMarker | GithubReadyForReviewEvent | GithubReferencedEvent | GithubRemovedFromProjectEvent | GithubRenamedTitleEvent | GithubReopenedEvent | GithubReviewDismissedEvent | GithubReviewRequestRemovedEvent | GithubReviewRequestedEvent | GithubSubscribedEvent | GithubTransferredEvent | GithubUnassignedEvent | GithubUnlabeledEvent | GithubUnlockedEvent | GithubUnmarkedAsDuplicateEvent | GithubUnpinnedEvent | GithubUnsubscribedEvent | GithubUserBlockedEvent

\\"\\"\\"The connection type for PullRequestTimelineItems.\\"\\"\\"
type GithubPullRequestTimelineItemsConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPullRequestTimelineItemsEdge]

  \\"\\"\\"
  Identifies the count of items after applying \`before\` and \`after\` filters.
  \\"\\"\\"
  filteredCount: Int!

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPullRequestTimelineItems]

  \\"\\"\\"
  Identifies the count of items after applying \`before\`/\`after\` filters and \`first\`/\`last\`/\`skip\` slicing.
  \\"\\"\\"
  pageCount: Int!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!

  \\"\\"\\"Identifies the date and time when the timeline was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPullRequestTimelineItemsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPullRequestTimelineItems
}

\\"\\"\\"The possible item types found in a timeline.\\"\\"\\"
enum GithubPullRequestTimelineItemsItemType {
  \\"\\"\\"
  Represents a 'added_to_project' event on a given issue or pull request.
  \\"\\"\\"
  ADDED_TO_PROJECT_EVENT

  \\"\\"\\"Represents an 'assigned' event on any assignable object.\\"\\"\\"
  ASSIGNED_EVENT

  \\"\\"\\"
  Represents a 'automatic_base_change_failed' event on a given pull request.
  \\"\\"\\"
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT

  \\"\\"\\"
  Represents a 'automatic_base_change_succeeded' event on a given pull request.
  \\"\\"\\"
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT

  \\"\\"\\"Represents a 'auto_merge_disabled' event on a given pull request.\\"\\"\\"
  AUTO_MERGE_DISABLED_EVENT

  \\"\\"\\"Represents a 'auto_merge_enabled' event on a given pull request.\\"\\"\\"
  AUTO_MERGE_ENABLED_EVENT

  \\"\\"\\"Represents a 'auto_rebase_enabled' event on a given pull request.\\"\\"\\"
  AUTO_REBASE_ENABLED_EVENT

  \\"\\"\\"Represents a 'auto_squash_enabled' event on a given pull request.\\"\\"\\"
  AUTO_SQUASH_ENABLED_EVENT

  \\"\\"\\"
  Represents a 'base_ref_changed' event on a given issue or pull request.
  \\"\\"\\"
  BASE_REF_CHANGED_EVENT

  \\"\\"\\"Represents a 'base_ref_deleted' event on a given pull request.\\"\\"\\"
  BASE_REF_DELETED_EVENT

  \\"\\"\\"Represents a 'base_ref_force_pushed' event on a given pull request.\\"\\"\\"
  BASE_REF_FORCE_PUSHED_EVENT

  \\"\\"\\"Represents a 'closed' event on any \`Closable\`.\\"\\"\\"
  CLOSED_EVENT

  \\"\\"\\"Represents a 'comment_deleted' event on a given issue or pull request.\\"\\"\\"
  COMMENT_DELETED_EVENT

  \\"\\"\\"Represents a 'connected' event on a given issue or pull request.\\"\\"\\"
  CONNECTED_EVENT

  \\"\\"\\"
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  \\"\\"\\"
  CONVERTED_NOTE_TO_ISSUE_EVENT

  \\"\\"\\"Represents a 'convert_to_draft' event on a given pull request.\\"\\"\\"
  CONVERT_TO_DRAFT_EVENT

  \\"\\"\\"Represents a mention made by one issue or pull request to another.\\"\\"\\"
  CROSS_REFERENCED_EVENT

  \\"\\"\\"Represents a 'demilestoned' event on a given issue or pull request.\\"\\"\\"
  DEMILESTONED_EVENT

  \\"\\"\\"Represents a 'deployed' event on a given pull request.\\"\\"\\"
  DEPLOYED_EVENT

  \\"\\"\\"
  Represents a 'deployment_environment_changed' event on a given pull request.
  \\"\\"\\"
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT

  \\"\\"\\"Represents a 'disconnected' event on a given issue or pull request.\\"\\"\\"
  DISCONNECTED_EVENT

  \\"\\"\\"Represents a 'head_ref_deleted' event on a given pull request.\\"\\"\\"
  HEAD_REF_DELETED_EVENT

  \\"\\"\\"Represents a 'head_ref_force_pushed' event on a given pull request.\\"\\"\\"
  HEAD_REF_FORCE_PUSHED_EVENT

  \\"\\"\\"Represents a 'head_ref_restored' event on a given pull request.\\"\\"\\"
  HEAD_REF_RESTORED_EVENT

  \\"\\"\\"Represents a comment on an Issue.\\"\\"\\"
  ISSUE_COMMENT

  \\"\\"\\"Represents a 'labeled' event on a given issue or pull request.\\"\\"\\"
  LABELED_EVENT

  \\"\\"\\"Represents a 'locked' event on a given issue or pull request.\\"\\"\\"
  LOCKED_EVENT

  \\"\\"\\"
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  \\"\\"\\"
  MARKED_AS_DUPLICATE_EVENT

  \\"\\"\\"Represents a 'mentioned' event on a given issue or pull request.\\"\\"\\"
  MENTIONED_EVENT

  \\"\\"\\"Represents a 'merged' event on a given pull request.\\"\\"\\"
  MERGED_EVENT

  \\"\\"\\"Represents a 'milestoned' event on a given issue or pull request.\\"\\"\\"
  MILESTONED_EVENT

  \\"\\"\\"
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  \\"\\"\\"
  MOVED_COLUMNS_IN_PROJECT_EVENT

  \\"\\"\\"Represents a 'pinned' event on a given issue or pull request.\\"\\"\\"
  PINNED_EVENT

  \\"\\"\\"Represents a Git commit part of a pull request.\\"\\"\\"
  PULL_REQUEST_COMMIT

  \\"\\"\\"Represents a commit comment thread part of a pull request.\\"\\"\\"
  PULL_REQUEST_COMMIT_COMMENT_THREAD

  \\"\\"\\"A review object for a given pull request.\\"\\"\\"
  PULL_REQUEST_REVIEW

  \\"\\"\\"A threaded list of comments for a given pull request.\\"\\"\\"
  PULL_REQUEST_REVIEW_THREAD

  \\"\\"\\"
  Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
  \\"\\"\\"
  PULL_REQUEST_REVISION_MARKER

  \\"\\"\\"Represents a 'ready_for_review' event on a given pull request.\\"\\"\\"
  READY_FOR_REVIEW_EVENT

  \\"\\"\\"Represents a 'referenced' event on a given \`ReferencedSubject\`.\\"\\"\\"
  REFERENCED_EVENT

  \\"\\"\\"
  Represents a 'removed_from_project' event on a given issue or pull request.
  \\"\\"\\"
  REMOVED_FROM_PROJECT_EVENT

  \\"\\"\\"Represents a 'renamed' event on a given issue or pull request\\"\\"\\"
  RENAMED_TITLE_EVENT

  \\"\\"\\"Represents a 'reopened' event on any \`Closable\`.\\"\\"\\"
  REOPENED_EVENT

  \\"\\"\\"
  Represents a 'review_dismissed' event on a given issue or pull request.
  \\"\\"\\"
  REVIEW_DISMISSED_EVENT

  \\"\\"\\"Represents an 'review_requested' event on a given pull request.\\"\\"\\"
  REVIEW_REQUESTED_EVENT

  \\"\\"\\"Represents an 'review_request_removed' event on a given pull request.\\"\\"\\"
  REVIEW_REQUEST_REMOVED_EVENT

  \\"\\"\\"Represents a 'subscribed' event on a given \`Subscribable\`.\\"\\"\\"
  SUBSCRIBED_EVENT

  \\"\\"\\"Represents a 'transferred' event on a given issue or pull request.\\"\\"\\"
  TRANSFERRED_EVENT

  \\"\\"\\"Represents an 'unassigned' event on any assignable object.\\"\\"\\"
  UNASSIGNED_EVENT

  \\"\\"\\"Represents an 'unlabeled' event on a given issue or pull request.\\"\\"\\"
  UNLABELED_EVENT

  \\"\\"\\"Represents an 'unlocked' event on a given issue or pull request.\\"\\"\\"
  UNLOCKED_EVENT

  \\"\\"\\"
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  \\"\\"\\"
  UNMARKED_AS_DUPLICATE_EVENT

  \\"\\"\\"Represents an 'unpinned' event on a given issue or pull request.\\"\\"\\"
  UNPINNED_EVENT

  \\"\\"\\"Represents an 'unsubscribed' event on a given \`Subscribable\`.\\"\\"\\"
  UNSUBSCRIBED_EVENT

  \\"\\"\\"Represents a 'user_blocked' event on a given user.\\"\\"\\"
  USER_BLOCKED_EVENT
}

\\"\\"\\"The possible target states when updating a pull request.\\"\\"\\"
enum GithubPullRequestUpdateState {
  \\"\\"\\"A pull request that has been closed without being merged.\\"\\"\\"
  CLOSED

  \\"\\"\\"A pull request that is still open.\\"\\"\\"
  OPEN
}

\\"\\"\\"A Git push.\\"\\"\\"
type GithubPush implements GithubNode {
  id: ID!

  \\"\\"\\"The SHA after the push\\"\\"\\"
  nextSha: GithubGitObjectID

  \\"\\"\\"The permalink for this push.\\"\\"\\"
  permalink: GithubURI!

  \\"\\"\\"The SHA before the push\\"\\"\\"
  previousSha: GithubGitObjectID

  \\"\\"\\"The user who pushed\\"\\"\\"
  pusher: GithubUser!

  \\"\\"\\"The repository that was pushed to\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"A team, user or app who has the ability to push to a protected branch.\\"\\"\\"
type GithubPushAllowance implements GithubNode {
  \\"\\"\\"The actor that can push.\\"\\"\\"
  actor: GithubPushAllowanceActor

  \\"\\"\\"
  Identifies the branch protection rule associated with the allowed user or team.
  \\"\\"\\"
  branchProtectionRule: GithubBranchProtectionRule
  id: ID!
}

\\"\\"\\"Types that can be an actor.\\"\\"\\"
union GithubPushAllowanceActor = GithubApp | GithubTeam | GithubUser

\\"\\"\\"The connection type for PushAllowance.\\"\\"\\"
type GithubPushAllowanceConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubPushAllowanceEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubPushAllowance]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubPushAllowanceEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubPushAllowance
}

\\"\\"\\"Represents the client's rate limit.\\"\\"\\"
type GithubRateLimit {
  \\"\\"\\"The point cost for the current query counting against the rate limit.\\"\\"\\"
  cost: Int!

  \\"\\"\\"
  The maximum number of points the client is permitted to consume in a 60 minute window.
  \\"\\"\\"
  limit: Int!

  \\"\\"\\"The maximum number of nodes this query may return\\"\\"\\"
  nodeCount: Int!

  \\"\\"\\"The number of points remaining in the current rate limit window.\\"\\"\\"
  remaining: Int!

  \\"\\"\\"
  The time at which the current rate limit window resets in UTC epoch seconds.
  \\"\\"\\"
  resetAt: GithubDateTime!

  \\"\\"\\"The number of points used in the current rate limit window.\\"\\"\\"
  used: Int!
}

\\"\\"\\"Represents a subject that can be reacted on.\\"\\"\\"
interface GithubReactable {
  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubReactingUserConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubReactingUserEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a user that's made a reaction.\\"\\"\\"
type GithubReactingUserEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!
  node: GithubUser!

  \\"\\"\\"The moment when the user made the reaction.\\"\\"\\"
  reactedAt: GithubDateTime!
}

\\"\\"\\"An emoji reaction to a particular piece of content.\\"\\"\\"
type GithubReaction implements GithubNode {
  \\"\\"\\"Identifies the emoji reaction.\\"\\"\\"
  content: GithubReactionContent!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The reactable piece of content\\"\\"\\"
  reactable: GithubReactable!

  \\"\\"\\"Identifies the user who created this reaction.\\"\\"\\"
  user: GithubUser
}

\\"\\"\\"A list of reactions that have been left on the subject.\\"\\"\\"
type GithubReactionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubReactionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubReaction]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!

  \\"\\"\\"
  Whether or not the authenticated user has left a reaction on the subject.
  \\"\\"\\"
  viewerHasReacted: Boolean!
}

\\"\\"\\"Emojis that can be attached to Issues, Pull Requests and Comments.\\"\\"\\"
enum GithubReactionContent {
  \\"\\"\\"Represents the \`:confused:\` emoji.\\"\\"\\"
  CONFUSED

  \\"\\"\\"Represents the \`:eyes:\` emoji.\\"\\"\\"
  EYES

  \\"\\"\\"Represents the \`:heart:\` emoji.\\"\\"\\"
  HEART

  \\"\\"\\"Represents the \`:hooray:\` emoji.\\"\\"\\"
  HOORAY

  \\"\\"\\"Represents the \`:laugh:\` emoji.\\"\\"\\"
  LAUGH

  \\"\\"\\"Represents the \`:rocket:\` emoji.\\"\\"\\"
  ROCKET

  \\"\\"\\"Represents the \`:-1:\` emoji.\\"\\"\\"
  THUMBS_DOWN

  \\"\\"\\"Represents the \`:+1:\` emoji.\\"\\"\\"
  THUMBS_UP
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubReactionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubReaction
}

\\"\\"\\"A group of emoji reactions to a particular piece of content.\\"\\"\\"
type GithubReactionGroup {
  \\"\\"\\"Identifies the emoji reaction.\\"\\"\\"
  content: GithubReactionContent!

  \\"\\"\\"Identifies when the reaction was created.\\"\\"\\"
  createdAt: GithubDateTime

  \\"\\"\\"The subject that was reacted to.\\"\\"\\"
  subject: GithubReactable!

  \\"\\"\\"
  Users who have reacted to the reaction subject with the emotion represented by this reaction group
  \\"\\"\\"
  users(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubReactingUserConnection!

  \\"\\"\\"
  Whether or not the authenticated user has left a reaction on the subject.
  \\"\\"\\"
  viewerHasReacted: Boolean!
}

\\"\\"\\"Ways in which lists of reactions can be ordered upon return.\\"\\"\\"
input GithubReactionOrder {
  \\"\\"\\"The direction in which to order reactions by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order reactions by.\\"\\"\\"
  field: GithubReactionOrderField!
}

\\"\\"\\"A list of fields that reactions can be ordered by.\\"\\"\\"
enum GithubReactionOrderField {
  \\"\\"\\"Allows ordering a list of reactions by when they were created.\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"Represents a 'ready_for_review' event on a given pull request.\\"\\"\\"
type GithubReadyForReviewEvent implements GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The HTTP path for this ready for review event.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this ready for review event.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Represents a Git reference.\\"\\"\\"
type GithubRef implements GithubNode {
  \\"\\"\\"A list of pull requests with this ref as the head ref.\\"\\"\\"
  associatedPullRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"The base ref name to filter the pull requests by.\\"\\"\\"
    baseRefName: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"The head ref name to filter the pull requests by.\\"\\"\\"
    headRefName: String

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for pull requests returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the pull requests by.\\"\\"\\"
    states: [GithubPullRequestState!]
  ): GithubPullRequestConnection!

  \\"\\"\\"Branch protection rules for this ref\\"\\"\\"
  branchProtectionRule: GithubBranchProtectionRule
  id: ID!

  \\"\\"\\"The ref name.\\"\\"\\"
  name: String!

  \\"\\"\\"The ref's prefix, such as \`refs/heads/\` or \`refs/tags/\`.\\"\\"\\"
  prefix: String!

  \\"\\"\\"Branch protection rules that are viewable by non-admins\\"\\"\\"
  refUpdateRule: GithubRefUpdateRule

  \\"\\"\\"The repository the ref belongs to.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The object the ref points to. Returns null when object does not exist.\\"\\"\\"
  target: GithubGitObject
}

\\"\\"\\"The connection type for Ref.\\"\\"\\"
type GithubRefConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubRefEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRef]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubRefEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubRef
}

\\"\\"\\"Ways in which lists of git refs can be ordered upon return.\\"\\"\\"
input GithubRefOrder {
  \\"\\"\\"The direction in which to order refs by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order refs by.\\"\\"\\"
  field: GithubRefOrderField!
}

\\"\\"\\"Properties by which ref connections can be ordered.\\"\\"\\"
enum GithubRefOrderField {
  \\"\\"\\"Order refs by their alphanumeric name\\"\\"\\"
  ALPHABETICAL

  \\"\\"\\"Order refs by underlying commit date if the ref prefix is refs/tags/\\"\\"\\"
  TAG_COMMIT_DATE
}

\\"\\"\\"A ref update rules for a viewer.\\"\\"\\"
type GithubRefUpdateRule {
  \\"\\"\\"Can this branch be deleted.\\"\\"\\"
  allowsDeletions: Boolean!

  \\"\\"\\"Are force pushes allowed on this branch.\\"\\"\\"
  allowsForcePushes: Boolean!

  \\"\\"\\"Identifies the protection rule pattern.\\"\\"\\"
  pattern: String!

  \\"\\"\\"Number of approving reviews required to update matching branches.\\"\\"\\"
  requiredApprovingReviewCount: Int

  \\"\\"\\"
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  \\"\\"\\"
  requiredStatusCheckContexts: [String]

  \\"\\"\\"Are reviews from code owners required to update matching branches.\\"\\"\\"
  requiresCodeOwnerReviews: Boolean!

  \\"\\"\\"Are merge commits prohibited from being pushed to this branch.\\"\\"\\"
  requiresLinearHistory: Boolean!

  \\"\\"\\"Are commits required to be signed.\\"\\"\\"
  requiresSignatures: Boolean!

  \\"\\"\\"Is the viewer allowed to dismiss reviews.\\"\\"\\"
  viewerAllowedToDismissReviews: Boolean!

  \\"\\"\\"Can the viewer push to the branch\\"\\"\\"
  viewerCanPush: Boolean!
}

\\"\\"\\"Represents a 'referenced' event on a given \`ReferencedSubject\`.\\"\\"\\"
type GithubReferencedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the commit associated with the 'referenced' event.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"Identifies the repository associated with the 'referenced' event.\\"\\"\\"
  commitRepository: GithubRepository!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Reference originated in a different repository.\\"\\"\\"
  isCrossRepository: Boolean!

  \\"\\"\\"
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  \\"\\"\\"
  isDirectReference: Boolean!

  \\"\\"\\"Object referenced by event.\\"\\"\\"
  subject: GithubReferencedSubject!
}

\\"\\"\\"Any referencable object\\"\\"\\"
union GithubReferencedSubject = GithubIssue | GithubPullRequest

\\"\\"\\"
Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
\\"\\"\\"
input GithubRegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the enterprise on which to set an identity provider.\\"\\"\\"
  enterpriseId: ID!
}

\\"\\"\\"
Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
\\"\\"\\"
type GithubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The identity provider for the enterprise.\\"\\"\\"
  identityProvider: GithubEnterpriseIdentityProvider
}

\\"\\"\\"Autogenerated input type of RegenerateVerifiableDomainToken\\"\\"\\"
input GithubRegenerateVerifiableDomainTokenInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the verifiable domain to regenerate the verification token of.
  \\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of RegenerateVerifiableDomainToken\\"\\"\\"
type GithubRegenerateVerifiableDomainTokenPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The verification token that was generated.\\"\\"\\"
  verificationToken: String
}

\\"\\"\\"Autogenerated input type of RejectDeployments\\"\\"\\"
input GithubRejectDeploymentsInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Optional comment for rejecting deployments\\"\\"\\"
  comment: String = \\"\\"

  \\"\\"\\"The ids of environments to reject deployments\\"\\"\\"
  environmentIds: [ID!]!

  \\"\\"\\"The node ID of the workflow run containing the pending deployments.\\"\\"\\"
  workflowRunId: ID!
}

\\"\\"\\"Autogenerated return type of RejectDeployments\\"\\"\\"
type GithubRejectDeploymentsPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The affected deployments.\\"\\"\\"
  deployments: [GithubDeployment!]
}

\\"\\"\\"A release contains the content for a release.\\"\\"\\"
type GithubRelease implements GithubNode & GithubReactable & GithubUniformResourceLocatable {
  \\"\\"\\"The author of the release\\"\\"\\"
  author: GithubUser

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The description of the release.\\"\\"\\"
  description: String

  \\"\\"\\"The description of this release rendered to HTML.\\"\\"\\"
  descriptionHTML: GithubHTML
  id: ID!

  \\"\\"\\"Whether or not the release is a draft\\"\\"\\"
  isDraft: Boolean!

  \\"\\"\\"Whether or not the release is the latest releast\\"\\"\\"
  isLatest: Boolean!

  \\"\\"\\"Whether or not the release is a prerelease\\"\\"\\"
  isPrerelease: Boolean!

  \\"\\"\\"The title of the release.\\"\\"\\"
  name: String

  \\"\\"\\"Identifies the date and time when the release was created.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"List of releases assets which are dependent on this release.\\"\\"\\"
  releaseAssets(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"A list of names to filter the assets by.\\"\\"\\"
    name: String
  ): GithubReleaseAssetConnection!

  \\"\\"\\"The repository that the release belongs to.\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The HTTP path for this issue\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"
  A description of the release, rendered to HTML without any links in it.
  \\"\\"\\"
  shortDescriptionHTML(
    \\"\\"\\"How many characters to return.\\"\\"\\"
    limit: Int = 200
  ): GithubHTML

  \\"\\"\\"The Git tag the release points to\\"\\"\\"
  tag: GithubRef

  \\"\\"\\"The tag commit for this release.\\"\\"\\"
  tagCommit: GithubCommit

  \\"\\"\\"The name of the release's Git tag\\"\\"\\"
  tagName: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this issue\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!
}

\\"\\"\\"A release asset contains the content for a release asset.\\"\\"\\"
type GithubReleaseAsset implements GithubNode {
  \\"\\"\\"The asset's content-type\\"\\"\\"
  contentType: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The number of times this asset was downloaded\\"\\"\\"
  downloadCount: Int!

  \\"\\"\\"
  Identifies the URL where you can download the release asset via the browser.
  \\"\\"\\"
  downloadUrl: GithubURI!
  id: ID!

  \\"\\"\\"Identifies the title of the release asset.\\"\\"\\"
  name: String!

  \\"\\"\\"Release that the asset is associated with\\"\\"\\"
  release: GithubRelease

  \\"\\"\\"The size (in bytes) of the asset\\"\\"\\"
  size: Int!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The user that performed the upload\\"\\"\\"
  uploadedBy: GithubUser!

  \\"\\"\\"Identifies the URL of the release asset.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The connection type for ReleaseAsset.\\"\\"\\"
type GithubReleaseAssetConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubReleaseAssetEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubReleaseAsset]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubReleaseAssetEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubReleaseAsset
}

\\"\\"\\"The connection type for Release.\\"\\"\\"
type GithubReleaseConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubReleaseEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRelease]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubReleaseEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubRelease
}

\\"\\"\\"Ways in which lists of releases can be ordered upon return.\\"\\"\\"
input GithubReleaseOrder {
  \\"\\"\\"The direction in which to order releases by the specified field.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order releases by.\\"\\"\\"
  field: GithubReleaseOrderField!
}

\\"\\"\\"Properties by which release connections can be ordered.\\"\\"\\"
enum GithubReleaseOrderField {
  \\"\\"\\"Order releases by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order releases alphabetically by name\\"\\"\\"
  NAME
}

\\"\\"\\"Autogenerated input type of RemoveAssigneesFromAssignable\\"\\"\\"
input GithubRemoveAssigneesFromAssignableInput {
  \\"\\"\\"The id of the assignable object to remove assignees from.\\"\\"\\"
  assignableId: ID!

  \\"\\"\\"The id of users to remove as assignees.\\"\\"\\"
  assigneeIds: [ID!]!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated return type of RemoveAssigneesFromAssignable\\"\\"\\"
type GithubRemoveAssigneesFromAssignablePayload {
  \\"\\"\\"The item that was unassigned.\\"\\"\\"
  assignable: GithubAssignable

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of RemoveEnterpriseAdmin\\"\\"\\"
input GithubRemoveEnterpriseAdminInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Enterprise ID from which to remove the administrator.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The login of the user to remove as an administrator.\\"\\"\\"
  login: String!
}

\\"\\"\\"Autogenerated return type of RemoveEnterpriseAdmin\\"\\"\\"
type GithubRemoveEnterpriseAdminPayload {
  \\"\\"\\"The user who was removed as an administrator.\\"\\"\\"
  admin: GithubUser

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated enterprise.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"A message confirming the result of removing an administrator.\\"\\"\\"
  message: String

  \\"\\"\\"The viewer performing the mutation.\\"\\"\\"
  viewer: GithubUser
}

\\"\\"\\"Autogenerated input type of RemoveEnterpriseIdentityProvider\\"\\"\\"
input GithubRemoveEnterpriseIdentityProviderInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the enterprise from which to remove the identity provider.\\"\\"\\"
  enterpriseId: ID!
}

\\"\\"\\"Autogenerated return type of RemoveEnterpriseIdentityProvider\\"\\"\\"
type GithubRemoveEnterpriseIdentityProviderPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The identity provider that was removed from the enterprise.\\"\\"\\"
  identityProvider: GithubEnterpriseIdentityProvider
}

\\"\\"\\"Autogenerated input type of RemoveEnterpriseOrganization\\"\\"\\"
input GithubRemoveEnterpriseOrganizationInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise from which the organization should be removed.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The ID of the organization to remove from the enterprise.\\"\\"\\"
  organizationId: ID!
}

\\"\\"\\"Autogenerated return type of RemoveEnterpriseOrganization\\"\\"\\"
type GithubRemoveEnterpriseOrganizationPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated enterprise.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"The organization that was removed from the enterprise.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The viewer performing the mutation.\\"\\"\\"
  viewer: GithubUser
}

\\"\\"\\"Autogenerated input type of RemoveEnterpriseSupportEntitlement\\"\\"\\"
input GithubRemoveEnterpriseSupportEntitlementInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the Enterprise which the admin belongs to.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The login of a member who will lose the support entitlement.\\"\\"\\"
  login: String!
}

\\"\\"\\"Autogenerated return type of RemoveEnterpriseSupportEntitlement\\"\\"\\"
type GithubRemoveEnterpriseSupportEntitlementPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"A message confirming the result of removing the support entitlement.\\"\\"\\"
  message: String
}

\\"\\"\\"Autogenerated input type of RemoveLabelsFromLabelable\\"\\"\\"
input GithubRemoveLabelsFromLabelableInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ids of labels to remove.\\"\\"\\"
  labelIds: [ID!]!

  \\"\\"\\"The id of the Labelable to remove labels from.\\"\\"\\"
  labelableId: ID!
}

\\"\\"\\"Autogenerated return type of RemoveLabelsFromLabelable\\"\\"\\"
type GithubRemoveLabelsFromLabelablePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Labelable the labels were removed from.\\"\\"\\"
  labelable: GithubLabelable
}

\\"\\"\\"Autogenerated input type of RemoveOutsideCollaborator\\"\\"\\"
input GithubRemoveOutsideCollaboratorInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the organization to remove the outside collaborator from.\\"\\"\\"
  organizationId: ID!

  \\"\\"\\"The ID of the outside collaborator to remove.\\"\\"\\"
  userId: ID!
}

\\"\\"\\"Autogenerated return type of RemoveOutsideCollaborator\\"\\"\\"
type GithubRemoveOutsideCollaboratorPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The user that was removed as an outside collaborator.\\"\\"\\"
  removedUser: GithubUser
}

\\"\\"\\"Autogenerated input type of RemoveReaction\\"\\"\\"
input GithubRemoveReactionInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of the emoji reaction to remove.\\"\\"\\"
  content: GithubReactionContent!

  \\"\\"\\"The Node ID of the subject to modify.\\"\\"\\"
  subjectId: ID!
}

\\"\\"\\"Autogenerated return type of RemoveReaction\\"\\"\\"
type GithubRemoveReactionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The reaction object.\\"\\"\\"
  reaction: GithubReaction

  \\"\\"\\"The reactable subject.\\"\\"\\"
  subject: GithubReactable
}

\\"\\"\\"Autogenerated input type of RemoveStar\\"\\"\\"
input GithubRemoveStarInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Starrable ID to unstar.\\"\\"\\"
  starrableId: ID!
}

\\"\\"\\"Autogenerated return type of RemoveStar\\"\\"\\"
type GithubRemoveStarPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The starrable.\\"\\"\\"
  starrable: GithubStarrable
}

\\"\\"\\"Autogenerated input type of RemoveUpvote\\"\\"\\"
input GithubRemoveUpvoteInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion or comment to remove upvote.\\"\\"\\"
  subjectId: ID!
}

\\"\\"\\"Autogenerated return type of RemoveUpvote\\"\\"\\"
type GithubRemoveUpvotePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The votable subject.\\"\\"\\"
  subject: GithubVotable
}

\\"\\"\\"
Represents a 'removed_from_project' event on a given issue or pull request.
\\"\\"\\"
type GithubRemovedFromProjectEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!
}

\\"\\"\\"Represents a 'renamed' event on a given issue or pull request\\"\\"\\"
type GithubRenamedTitleEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the current title of the issue or pull request.\\"\\"\\"
  currentTitle: String!
  id: ID!

  \\"\\"\\"Identifies the previous title of the issue or pull request.\\"\\"\\"
  previousTitle: String!

  \\"\\"\\"Subject that was renamed.\\"\\"\\"
  subject: GithubRenamedTitleSubject!
}

\\"\\"\\"An object which has a renamable title\\"\\"\\"
union GithubRenamedTitleSubject = GithubIssue | GithubPullRequest

\\"\\"\\"Autogenerated input type of ReopenIssue\\"\\"\\"
input GithubReopenIssueInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the issue to be opened.\\"\\"\\"
  issueId: ID!
}

\\"\\"\\"Autogenerated return type of ReopenIssue\\"\\"\\"
type GithubReopenIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The issue that was opened.\\"\\"\\"
  issue: GithubIssue
}

\\"\\"\\"Autogenerated input type of ReopenPullRequest\\"\\"\\"
input GithubReopenPullRequestInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the pull request to be reopened.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of ReopenPullRequest\\"\\"\\"
type GithubReopenPullRequestPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request that was reopened.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Represents a 'reopened' event on any \`Closable\`.\\"\\"\\"
type GithubReopenedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Object that was reopened.\\"\\"\\"
  closable: GithubClosable!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!
}

\\"\\"\\"Audit log entry for a repo.access event.\\"\\"\\"
type GithubRepoAccessAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI

  \\"\\"\\"The visibility of the repository\\"\\"\\"
  visibility: GithubRepoAccessAuditEntryVisibility
}

\\"\\"\\"The privacy of a repository\\"\\"\\"
enum GithubRepoAccessAuditEntryVisibility {
  \\"\\"\\"The repository is visible only to users in the same business.\\"\\"\\"
  INTERNAL

  \\"\\"\\"The repository is visible only to those with explicit access.\\"\\"\\"
  PRIVATE

  \\"\\"\\"The repository is visible to everyone.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Audit log entry for a repo.add_member event.\\"\\"\\"
type GithubRepoAddMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI

  \\"\\"\\"The visibility of the repository\\"\\"\\"
  visibility: GithubRepoAddMemberAuditEntryVisibility
}

\\"\\"\\"The privacy of a repository\\"\\"\\"
enum GithubRepoAddMemberAuditEntryVisibility {
  \\"\\"\\"The repository is visible only to users in the same business.\\"\\"\\"
  INTERNAL

  \\"\\"\\"The repository is visible only to those with explicit access.\\"\\"\\"
  PRIVATE

  \\"\\"\\"The repository is visible to everyone.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Audit log entry for a repo.add_topic event.\\"\\"\\"
type GithubRepoAddTopicAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData & GithubTopicAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The name of the topic added to the repository\\"\\"\\"
  topic: GithubTopic

  \\"\\"\\"The name of the topic added to the repository\\"\\"\\"
  topicName: String

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.archived event.\\"\\"\\"
type GithubRepoArchivedAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI

  \\"\\"\\"The visibility of the repository\\"\\"\\"
  visibility: GithubRepoArchivedAuditEntryVisibility
}

\\"\\"\\"The privacy of a repository\\"\\"\\"
enum GithubRepoArchivedAuditEntryVisibility {
  \\"\\"\\"The repository is visible only to users in the same business.\\"\\"\\"
  INTERNAL

  \\"\\"\\"The repository is visible only to those with explicit access.\\"\\"\\"
  PRIVATE

  \\"\\"\\"The repository is visible to everyone.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Audit log entry for a repo.change_merge_setting event.\\"\\"\\"
type GithubRepoChangeMergeSettingAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"
  Whether the change was to enable (true) or disable (false) the merge type
  \\"\\"\\"
  isEnabled: Boolean

  \\"\\"\\"The merge method affected by the change\\"\\"\\"
  mergeType: GithubRepoChangeMergeSettingAuditEntryMergeType

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The merge options available for pull requests to this repository.\\"\\"\\"
enum GithubRepoChangeMergeSettingAuditEntryMergeType {
  \\"\\"\\"The pull request is added to the base branch in a merge commit.\\"\\"\\"
  MERGE

  \\"\\"\\"
  Commits from the pull request are added onto the base branch individually without a merge commit.
  \\"\\"\\"
  REBASE

  \\"\\"\\"
  The pull request's commits are squashed into a single commit before they are merged to the base branch.
  \\"\\"\\"
  SQUASH
}

\\"\\"\\"Audit log entry for a repo.config.disable_anonymous_git_access event.\\"\\"\\"
type GithubRepoConfigDisableAnonymousGitAccessAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.disable_collaborators_only event.\\"\\"\\"
type GithubRepoConfigDisableCollaboratorsOnlyAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.disable_contributors_only event.\\"\\"\\"
type GithubRepoConfigDisableContributorsOnlyAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.disable_sockpuppet_disallowed event.\\"\\"\\"
type GithubRepoConfigDisableSockpuppetDisallowedAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.enable_anonymous_git_access event.\\"\\"\\"
type GithubRepoConfigEnableAnonymousGitAccessAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.enable_collaborators_only event.\\"\\"\\"
type GithubRepoConfigEnableCollaboratorsOnlyAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.enable_contributors_only event.\\"\\"\\"
type GithubRepoConfigEnableContributorsOnlyAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.enable_sockpuppet_disallowed event.\\"\\"\\"
type GithubRepoConfigEnableSockpuppetDisallowedAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.lock_anonymous_git_access event.\\"\\"\\"
type GithubRepoConfigLockAnonymousGitAccessAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.config.unlock_anonymous_git_access event.\\"\\"\\"
type GithubRepoConfigUnlockAnonymousGitAccessAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repo.create event.\\"\\"\\"
type GithubRepoCreateAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The name of the parent repository for this forked repository.\\"\\"\\"
  forkParentName: String

  \\"\\"\\"The name of the root repository for this network.\\"\\"\\"
  forkSourceName: String
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI

  \\"\\"\\"The visibility of the repository\\"\\"\\"
  visibility: GithubRepoCreateAuditEntryVisibility
}

\\"\\"\\"The privacy of a repository\\"\\"\\"
enum GithubRepoCreateAuditEntryVisibility {
  \\"\\"\\"The repository is visible only to users in the same business.\\"\\"\\"
  INTERNAL

  \\"\\"\\"The repository is visible only to those with explicit access.\\"\\"\\"
  PRIVATE

  \\"\\"\\"The repository is visible to everyone.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Audit log entry for a repo.destroy event.\\"\\"\\"
type GithubRepoDestroyAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI

  \\"\\"\\"The visibility of the repository\\"\\"\\"
  visibility: GithubRepoDestroyAuditEntryVisibility
}

\\"\\"\\"The privacy of a repository\\"\\"\\"
enum GithubRepoDestroyAuditEntryVisibility {
  \\"\\"\\"The repository is visible only to users in the same business.\\"\\"\\"
  INTERNAL

  \\"\\"\\"The repository is visible only to those with explicit access.\\"\\"\\"
  PRIVATE

  \\"\\"\\"The repository is visible to everyone.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Audit log entry for a repo.remove_member event.\\"\\"\\"
type GithubRepoRemoveMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI

  \\"\\"\\"The visibility of the repository\\"\\"\\"
  visibility: GithubRepoRemoveMemberAuditEntryVisibility
}

\\"\\"\\"The privacy of a repository\\"\\"\\"
enum GithubRepoRemoveMemberAuditEntryVisibility {
  \\"\\"\\"The repository is visible only to users in the same business.\\"\\"\\"
  INTERNAL

  \\"\\"\\"The repository is visible only to those with explicit access.\\"\\"\\"
  PRIVATE

  \\"\\"\\"The repository is visible to everyone.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Audit log entry for a repo.remove_topic event.\\"\\"\\"
type GithubRepoRemoveTopicAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData & GithubTopicAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The name of the topic added to the repository\\"\\"\\"
  topic: GithubTopic

  \\"\\"\\"The name of the topic added to the repository\\"\\"\\"
  topicName: String

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The reasons a piece of content can be reported or minimized.\\"\\"\\"
enum GithubReportedContentClassifiers {
  \\"\\"\\"An abusive or harassing piece of content\\"\\"\\"
  ABUSE

  \\"\\"\\"A duplicated piece of content\\"\\"\\"
  DUPLICATE

  \\"\\"\\"An irrelevant piece of content\\"\\"\\"
  OFF_TOPIC

  \\"\\"\\"An outdated piece of content\\"\\"\\"
  OUTDATED

  \\"\\"\\"The content has been resolved\\"\\"\\"
  RESOLVED

  \\"\\"\\"A spammy piece of content\\"\\"\\"
  SPAM
}

\\"\\"\\"A repository contains the content for a project.\\"\\"\\"
type GithubRepository implements GithubNode & GithubPackageOwner & GithubProjectOwner & GithubRepositoryInfo & GithubStarrable & GithubSubscribable & GithubUniformResourceLocatable {
  \\"\\"\\"A list of users that can be assigned to issues in this repository.\\"\\"\\"
  assignableUsers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filters users with query on user name and login\\"\\"\\"
    query: String
  ): GithubUserConnection!

  \\"\\"\\"A list of branch protection rules for this repository.\\"\\"\\"
  branchProtectionRules(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubBranchProtectionRuleConnection!

  \\"\\"\\"Returns the code of conduct for this repository\\"\\"\\"
  codeOfConduct: GithubCodeOfConduct

  \\"\\"\\"A list of collaborators associated with the repository.\\"\\"\\"
  collaborators(
    \\"\\"\\"Collaborators affiliation level with a repository.\\"\\"\\"
    affiliation: GithubCollaboratorAffiliation

    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filters users with query on user name and login\\"\\"\\"
    query: String
  ): GithubRepositoryCollaboratorConnection

  \\"\\"\\"A list of commit comments associated with the repository.\\"\\"\\"
  commitComments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCommitCommentConnection!

  \\"\\"\\"Returns a list of contact links associated to the repository\\"\\"\\"
  contactLinks: [GithubRepositoryContactLink!]

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The Ref associated with the repository's default branch.\\"\\"\\"
  defaultBranchRef: GithubRef

  \\"\\"\\"
  Whether or not branches are automatically deleted when merged in this repository.
  \\"\\"\\"
  deleteBranchOnMerge: Boolean!

  \\"\\"\\"A list of deploy keys that are on this repository.\\"\\"\\"
  deployKeys(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDeployKeyConnection!

  \\"\\"\\"Deployments associated with the repository\\"\\"\\"
  deployments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Environments to list deployments for\\"\\"\\"
    environments: [String!]

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for deployments returned from the connection.\\"\\"\\"
    orderBy: GithubDeploymentOrder = {direction: ASC, field: CREATED_AT}
  ): GithubDeploymentConnection!

  \\"\\"\\"The description of the repository.\\"\\"\\"
  description: String

  \\"\\"\\"The description of the repository rendered to HTML.\\"\\"\\"
  descriptionHTML: GithubHTML!

  \\"\\"\\"Returns a single discussion from the current repository by number.\\"\\"\\"
  discussion(
    \\"\\"\\"The number for the discussion to be returned.\\"\\"\\"
    number: Int!
  ): GithubDiscussion

  \\"\\"\\"A list of discussion categories that are available in the repository.\\"\\"\\"
  discussionCategories(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDiscussionCategoryConnection!

  \\"\\"\\"A list of discussions that have been opened in the repository.\\"\\"\\"
  discussions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Only include discussions that belong to the category with this ID.\\"\\"\\"
    categoryId: ID = null

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for discussions returned from the connection.\\"\\"\\"
    orderBy: GithubDiscussionOrder = {direction: DESC, field: UPDATED_AT}
  ): GithubDiscussionConnection!

  \\"\\"\\"The number of kilobytes this repository occupies on disk.\\"\\"\\"
  diskUsage: Int

  \\"\\"\\"
  Returns a single active environment from the current repository by name.
  \\"\\"\\"
  environment(
    \\"\\"\\"The name of the environment to be returned.\\"\\"\\"
    name: String!
  ): GithubEnvironment

  \\"\\"\\"A list of environments that are in this repository.\\"\\"\\"
  environments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubEnvironmentConnection!

  \\"\\"\\"
  Returns how many forks there are of this repository in the whole network.
  \\"\\"\\"
  forkCount: Int!

  \\"\\"\\"A list of direct forked repositories.\\"\\"\\"
  forks(
    \\"\\"\\"
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    \\"\\"\\"
    affiliations: [GithubRepositoryAffiliation]

    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"
    If non-null, filters repositories according to whether they have been locked
    \\"\\"\\"
    isLocked: Boolean

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories returned from the connection\\"\\"\\"
    orderBy: GithubRepositoryOrder

    \\"\\"\\"
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    \\"\\"\\"
    ownerAffiliations: [GithubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    \\"\\"\\"If non-null, filters repositories according to privacy\\"\\"\\"
    privacy: GithubRepositoryPrivacy
  ): GithubRepositoryConnection!

  \\"\\"\\"The funding links for this repository\\"\\"\\"
  fundingLinks: [GithubFundingLink!]!

  \\"\\"\\"Indicates if the repository has issues feature enabled.\\"\\"\\"
  hasIssuesEnabled: Boolean!

  \\"\\"\\"Indicates if the repository has the Projects feature enabled.\\"\\"\\"
  hasProjectsEnabled: Boolean!

  \\"\\"\\"Indicates if the repository has wiki feature enabled.\\"\\"\\"
  hasWikiEnabled: Boolean!

  \\"\\"\\"The repository's URL.\\"\\"\\"
  homepageUrl: GithubURI
  id: ID!

  \\"\\"\\"The interaction ability settings for this repository.\\"\\"\\"
  interactionAbility: GithubRepositoryInteractionAbility

  \\"\\"\\"Indicates if the repository is unmaintained.\\"\\"\\"
  isArchived: Boolean!

  \\"\\"\\"Returns true if blank issue creation is allowed\\"\\"\\"
  isBlankIssuesEnabled: Boolean!

  \\"\\"\\"Returns whether or not this repository disabled.\\"\\"\\"
  isDisabled: Boolean!

  \\"\\"\\"Returns whether or not this repository is empty.\\"\\"\\"
  isEmpty: Boolean!

  \\"\\"\\"Identifies if the repository is a fork.\\"\\"\\"
  isFork: Boolean!

  \\"\\"\\"
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  \\"\\"\\"
  isInOrganization: Boolean!

  \\"\\"\\"Indicates if the repository has been locked or not.\\"\\"\\"
  isLocked: Boolean!

  \\"\\"\\"Identifies if the repository is a mirror.\\"\\"\\"
  isMirror: Boolean!

  \\"\\"\\"Identifies if the repository is private or internal.\\"\\"\\"
  isPrivate: Boolean!

  \\"\\"\\"Returns true if this repository has a security policy\\"\\"\\"
  isSecurityPolicyEnabled: Boolean

  \\"\\"\\"
  Identifies if the repository is a template that can be used to generate new repositories.
  \\"\\"\\"
  isTemplate: Boolean!

  \\"\\"\\"Is this repository a user configuration repository?\\"\\"\\"
  isUserConfigurationRepository: Boolean!

  \\"\\"\\"Returns a single issue from the current repository by number.\\"\\"\\"
  issue(
    \\"\\"\\"The number for the issue to be returned.\\"\\"\\"
    number: Int!
  ): GithubIssue

  \\"\\"\\"
  Returns a single issue-like object from the current repository by number.
  \\"\\"\\"
  issueOrPullRequest(
    \\"\\"\\"The number for the issue to be returned.\\"\\"\\"
    number: Int!
  ): GithubIssueOrPullRequest

  \\"\\"\\"Returns a list of issue templates associated to the repository\\"\\"\\"
  issueTemplates: [GithubIssueTemplate!]

  \\"\\"\\"A list of issues that have been opened in the repository.\\"\\"\\"
  issues(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Filtering options for issues returned from the connection.\\"\\"\\"
    filterBy: GithubIssueFilters

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issues returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the issues by.\\"\\"\\"
    states: [GithubIssueState!]
  ): GithubIssueConnection!

  \\"\\"\\"Returns a single label by name\\"\\"\\"
  label(
    \\"\\"\\"Label name\\"\\"\\"
    name: String!
  ): GithubLabel

  \\"\\"\\"A list of labels associated with the repository.\\"\\"\\"
  labels(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for labels returned from the connection.\\"\\"\\"
    orderBy: GithubLabelOrder = {direction: ASC, field: CREATED_AT}

    \\"\\"\\"If provided, searches labels by name and description.\\"\\"\\"
    query: String
  ): GithubLabelConnection

  \\"\\"\\"
  A list containing a breakdown of the language composition of the repository.
  \\"\\"\\"
  languages(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubLanguageOrder
  ): GithubLanguageConnection

  \\"\\"\\"Get the latest release for the repository if one exists.\\"\\"\\"
  latestRelease: GithubRelease

  \\"\\"\\"The license associated with the repository\\"\\"\\"
  licenseInfo: GithubLicense

  \\"\\"\\"The reason the repository has been locked.\\"\\"\\"
  lockReason: GithubRepositoryLockReason

  \\"\\"\\"
  A list of Users that can be mentioned in the context of the repository.
  \\"\\"\\"
  mentionableUsers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filters users with query on user name and login\\"\\"\\"
    query: String
  ): GithubUserConnection!

  \\"\\"\\"Whether or not PRs are merged with a merge commit on this repository.\\"\\"\\"
  mergeCommitAllowed: Boolean!

  \\"\\"\\"Returns a single milestone from the current repository by number.\\"\\"\\"
  milestone(
    \\"\\"\\"The number for the milestone to be returned.\\"\\"\\"
    number: Int!
  ): GithubMilestone

  \\"\\"\\"A list of milestones associated with the repository.\\"\\"\\"
  milestones(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for milestones.\\"\\"\\"
    orderBy: GithubMilestoneOrder

    \\"\\"\\"Filters milestones with a query on the title\\"\\"\\"
    query: String

    \\"\\"\\"Filter by the state of the milestones.\\"\\"\\"
    states: [GithubMilestoneState!]
  ): GithubMilestoneConnection

  \\"\\"\\"The repository's original mirror URL.\\"\\"\\"
  mirrorUrl: GithubURI

  \\"\\"\\"The name of the repository.\\"\\"\\"
  name: String!

  \\"\\"\\"The repository's name with owner.\\"\\"\\"
  nameWithOwner: String!

  \\"\\"\\"A Git object in the repository\\"\\"\\"
  object(
    \\"\\"\\"A Git revision expression suitable for rev-parse\\"\\"\\"
    expression: String

    \\"\\"\\"The Git object ID\\"\\"\\"
    oid: GithubGitObjectID
  ): GithubGitObject

  \\"\\"\\"The image used to represent this repository in Open Graph data.\\"\\"\\"
  openGraphImageUrl: GithubURI!

  \\"\\"\\"The User owner of the repository.\\"\\"\\"
  owner: GithubRepositoryOwner!

  \\"\\"\\"A list of packages under the owner.\\"\\"\\"
  packages(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Find packages by their names.\\"\\"\\"
    names: [String]

    \\"\\"\\"Ordering of the returned packages.\\"\\"\\"
    orderBy: GithubPackageOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"Filter registry package by type.\\"\\"\\"
    packageType: GithubPackageType

    \\"\\"\\"Find packages in a repository by ID.\\"\\"\\"
    repositoryId: ID
  ): GithubPackageConnection!

  \\"\\"\\"The repository parent, if this is a fork.\\"\\"\\"
  parent: GithubRepository

  \\"\\"\\"A list of discussions that have been pinned in this repository.\\"\\"\\"
  pinnedDiscussions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPinnedDiscussionConnection!

  \\"\\"\\"A list of pinned issues for this repository.\\"\\"\\"
  pinnedIssues(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPinnedIssueConnection

  \\"\\"\\"The primary language of the repository's code.\\"\\"\\"
  primaryLanguage: GithubLanguage

  \\"\\"\\"Find project by number.\\"\\"\\"
  project(
    \\"\\"\\"The project number to find.\\"\\"\\"
    number: Int!
  ): GithubProject

  \\"\\"\\"A list of projects under the owner.\\"\\"\\"
  projects(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for projects returned from the connection\\"\\"\\"
    orderBy: GithubProjectOrder

    \\"\\"\\"Query to search projects by, currently only searching by name.\\"\\"\\"
    search: String

    \\"\\"\\"A list of states to filter the projects by.\\"\\"\\"
    states: [GithubProjectState!]
  ): GithubProjectConnection!

  \\"\\"\\"The HTTP path listing the repository's projects\\"\\"\\"
  projectsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL listing the repository's projects\\"\\"\\"
  projectsUrl: GithubURI!

  \\"\\"\\"Returns a single pull request from the current repository by number.\\"\\"\\"
  pullRequest(
    \\"\\"\\"The number for the pull request to be returned.\\"\\"\\"
    number: Int!
  ): GithubPullRequest

  \\"\\"\\"Returns a list of pull request templates associated to the repository\\"\\"\\"
  pullRequestTemplates: [GithubPullRequestTemplate!]

  \\"\\"\\"A list of pull requests that have been opened in the repository.\\"\\"\\"
  pullRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"The base ref name to filter the pull requests by.\\"\\"\\"
    baseRefName: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"The head ref name to filter the pull requests by.\\"\\"\\"
    headRefName: String

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for pull requests returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the pull requests by.\\"\\"\\"
    states: [GithubPullRequestState!]
  ): GithubPullRequestConnection!

  \\"\\"\\"Identifies when the repository was last pushed to.\\"\\"\\"
  pushedAt: GithubDateTime

  \\"\\"\\"Whether or not rebase-merging is enabled on this repository.\\"\\"\\"
  rebaseMergeAllowed: Boolean!

  \\"\\"\\"Fetch a given ref from the repository\\"\\"\\"
  ref(
    \\"\\"\\"
    The ref to retrieve. Fully qualified matches are checked in order (\`refs/heads/master\`) before falling back onto checks for short name matches (\`master\`).
    \\"\\"\\"
    qualifiedName: String!
  ): GithubRef

  \\"\\"\\"Fetch a list of refs from the repository\\"\\"\\"
  refs(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"DEPRECATED: use orderBy. The ordering direction.\\"\\"\\"
    direction: GithubOrderDirection

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for refs returned from the connection.\\"\\"\\"
    orderBy: GithubRefOrder

    \\"\\"\\"Filters refs with query on name\\"\\"\\"
    query: String

    \\"\\"\\"A ref name prefix like \`refs/heads/\`, \`refs/tags/\`, etc.\\"\\"\\"
    refPrefix: String!
  ): GithubRefConnection

  \\"\\"\\"Lookup a single release given various criteria.\\"\\"\\"
  release(
    \\"\\"\\"The name of the Tag the Release was created from\\"\\"\\"
    tagName: String!
  ): GithubRelease

  \\"\\"\\"List of releases which are dependent on this repository.\\"\\"\\"
  releases(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubReleaseOrder
  ): GithubReleaseConnection!

  \\"\\"\\"A list of applied repository-topic associations for this repository.\\"\\"\\"
  repositoryTopics(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubRepositoryTopicConnection!

  \\"\\"\\"The HTTP path for this repository\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The security policy URL.\\"\\"\\"
  securityPolicyUrl: GithubURI

  \\"\\"\\"
  A description of the repository, rendered to HTML without any links in it.
  \\"\\"\\"
  shortDescriptionHTML(
    \\"\\"\\"How many characters to return.\\"\\"\\"
    limit: Int = 200
  ): GithubHTML!

  \\"\\"\\"Whether or not squash-merging is enabled on this repository.\\"\\"\\"
  squashMergeAllowed: Boolean!

  \\"\\"\\"The SSH URL to clone this repository\\"\\"\\"
  sshUrl: GithubGitSSHRemote!

  \\"\\"\\"
  Returns a count of how many stargazers there are on this object
  
  \\"\\"\\"
  stargazerCount: Int!

  \\"\\"\\"A list of users who have starred this starrable.\\"\\"\\"
  stargazers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubStarOrder
  ): GithubStargazerConnection!

  \\"\\"\\"
  Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
  \\"\\"\\"
  submodules(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubSubmoduleConnection!

  \\"\\"\\"Temporary authentication token for cloning this repository.\\"\\"\\"
  tempCloneToken: String

  \\"\\"\\"The repository from which this repository was generated, if any.\\"\\"\\"
  templateRepository: GithubRepository

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this repository\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  \\"\\"\\"
  usesCustomOpenGraphImage: Boolean!

  \\"\\"\\"Indicates whether the viewer has admin permissions on this repository.\\"\\"\\"
  viewerCanAdminister: Boolean!

  \\"\\"\\"Can the current viewer create new projects on this owner.\\"\\"\\"
  viewerCanCreateProjects: Boolean!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"Indicates whether the viewer can update the topics of this repository.\\"\\"\\"
  viewerCanUpdateTopics: Boolean!

  \\"\\"\\"The last commit email for the viewer.\\"\\"\\"
  viewerDefaultCommitEmail: String

  \\"\\"\\"
  The last used merge method by the viewer or the default for the repository.
  \\"\\"\\"
  viewerDefaultMergeMethod: GithubPullRequestMergeMethod!

  \\"\\"\\"
  Returns a boolean indicating whether the viewing user has starred this starrable.
  \\"\\"\\"
  viewerHasStarred: Boolean!

  \\"\\"\\"
  The users permission level on the repository. Will return null if authenticated as an GitHub App.
  \\"\\"\\"
  viewerPermission: GithubRepositoryPermission

  \\"\\"\\"A list of emails this viewer can commit with.\\"\\"\\"
  viewerPossibleCommitEmails: [String!]

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState

  \\"\\"\\"A list of vulnerability alerts that are on this repository.\\"\\"\\"
  vulnerabilityAlerts(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubRepositoryVulnerabilityAlertConnection

  \\"\\"\\"A list of users watching the repository.\\"\\"\\"
  watchers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserConnection!
}

\\"\\"\\"The affiliation of a user to a repository\\"\\"\\"
enum GithubRepositoryAffiliation {
  \\"\\"\\"Repositories that the user has been added to as a collaborator.\\"\\"\\"
  COLLABORATOR

  \\"\\"\\"
  Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
  \\"\\"\\"
  ORGANIZATION_MEMBER

  \\"\\"\\"Repositories that are owned by the authenticated user.\\"\\"\\"
  OWNER
}

\\"\\"\\"Metadata for an audit entry with action repo.*\\"\\"\\"
interface GithubRepositoryAuditEntryData {
  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubRepositoryCollaboratorConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubRepositoryCollaboratorEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a user who is a collaborator of a repository.\\"\\"\\"
type GithubRepositoryCollaboratorEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!
  node: GithubUser!

  \\"\\"\\"The permission the user has on the repository.\\"\\"\\"
  permission: GithubRepositoryPermission!

  \\"\\"\\"A list of sources for the user's access to the repository.\\"\\"\\"
  permissionSources: [GithubPermissionSource!]
}

\\"\\"\\"A list of repositories owned by the subject.\\"\\"\\"
type GithubRepositoryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubRepositoryEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRepository]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!

  \\"\\"\\"The total size in kilobytes of all repositories in the connection.\\"\\"\\"
  totalDiskUsage: Int!
}

\\"\\"\\"A repository contact link.\\"\\"\\"
type GithubRepositoryContactLink {
  \\"\\"\\"The contact link purpose.\\"\\"\\"
  about: String!

  \\"\\"\\"The contact link name.\\"\\"\\"
  name: String!

  \\"\\"\\"The contact link URL.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The reason a repository is listed as 'contributed'.\\"\\"\\"
enum GithubRepositoryContributionType {
  \\"\\"\\"Created a commit\\"\\"\\"
  COMMIT

  \\"\\"\\"Created an issue\\"\\"\\"
  ISSUE

  \\"\\"\\"Created a pull request\\"\\"\\"
  PULL_REQUEST

  \\"\\"\\"Reviewed a pull request\\"\\"\\"
  PULL_REQUEST_REVIEW

  \\"\\"\\"Created the repository\\"\\"\\"
  REPOSITORY
}

\\"\\"\\"Represents an author of discussions in repositories.\\"\\"\\"
interface GithubRepositoryDiscussionAuthor {
  \\"\\"\\"Discussions this user has started.\\"\\"\\"
  repositoryDiscussions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
    \\"\\"\\"
    answered: Boolean = null

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for discussions returned from the connection.\\"\\"\\"
    orderBy: GithubDiscussionOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"Filter discussions to only those in a specific repository.\\"\\"\\"
    repositoryId: ID
  ): GithubDiscussionConnection!
}

\\"\\"\\"Represents an author of discussion comments in repositories.\\"\\"\\"
interface GithubRepositoryDiscussionCommentAuthor {
  \\"\\"\\"Discussion comments this user has authored.\\"\\"\\"
  repositoryDiscussionComments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Filter discussion comments to only those that were marked as the answer
    \\"\\"\\"
    onlyAnswers: Boolean = false

    \\"\\"\\"Filter discussion comments to only those in a specific repository.\\"\\"\\"
    repositoryId: ID
  ): GithubDiscussionCommentConnection!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubRepositoryEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubRepository
}

\\"\\"\\"A subset of repository info.\\"\\"\\"
interface GithubRepositoryInfo {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The description of the repository.\\"\\"\\"
  description: String

  \\"\\"\\"The description of the repository rendered to HTML.\\"\\"\\"
  descriptionHTML: GithubHTML!

  \\"\\"\\"
  Returns how many forks there are of this repository in the whole network.
  \\"\\"\\"
  forkCount: Int!

  \\"\\"\\"Indicates if the repository has issues feature enabled.\\"\\"\\"
  hasIssuesEnabled: Boolean!

  \\"\\"\\"Indicates if the repository has the Projects feature enabled.\\"\\"\\"
  hasProjectsEnabled: Boolean!

  \\"\\"\\"Indicates if the repository has wiki feature enabled.\\"\\"\\"
  hasWikiEnabled: Boolean!

  \\"\\"\\"The repository's URL.\\"\\"\\"
  homepageUrl: GithubURI

  \\"\\"\\"Indicates if the repository is unmaintained.\\"\\"\\"
  isArchived: Boolean!

  \\"\\"\\"Identifies if the repository is a fork.\\"\\"\\"
  isFork: Boolean!

  \\"\\"\\"
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  \\"\\"\\"
  isInOrganization: Boolean!

  \\"\\"\\"Indicates if the repository has been locked or not.\\"\\"\\"
  isLocked: Boolean!

  \\"\\"\\"Identifies if the repository is a mirror.\\"\\"\\"
  isMirror: Boolean!

  \\"\\"\\"Identifies if the repository is private or internal.\\"\\"\\"
  isPrivate: Boolean!

  \\"\\"\\"
  Identifies if the repository is a template that can be used to generate new repositories.
  \\"\\"\\"
  isTemplate: Boolean!

  \\"\\"\\"The license associated with the repository\\"\\"\\"
  licenseInfo: GithubLicense

  \\"\\"\\"The reason the repository has been locked.\\"\\"\\"
  lockReason: GithubRepositoryLockReason

  \\"\\"\\"The repository's original mirror URL.\\"\\"\\"
  mirrorUrl: GithubURI

  \\"\\"\\"The name of the repository.\\"\\"\\"
  name: String!

  \\"\\"\\"The repository's name with owner.\\"\\"\\"
  nameWithOwner: String!

  \\"\\"\\"The image used to represent this repository in Open Graph data.\\"\\"\\"
  openGraphImageUrl: GithubURI!

  \\"\\"\\"The User owner of the repository.\\"\\"\\"
  owner: GithubRepositoryOwner!

  \\"\\"\\"Identifies when the repository was last pushed to.\\"\\"\\"
  pushedAt: GithubDateTime

  \\"\\"\\"The HTTP path for this repository\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"
  A description of the repository, rendered to HTML without any links in it.
  \\"\\"\\"
  shortDescriptionHTML(
    \\"\\"\\"How many characters to return.\\"\\"\\"
    limit: Int = 200
  ): GithubHTML!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this repository\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  \\"\\"\\"
  usesCustomOpenGraphImage: Boolean!
}

\\"\\"\\"Repository interaction limit that applies to this object.\\"\\"\\"
type GithubRepositoryInteractionAbility {
  \\"\\"\\"The time the currently active limit expires.\\"\\"\\"
  expiresAt: GithubDateTime

  \\"\\"\\"The current limit that is enabled on this object.\\"\\"\\"
  limit: GithubRepositoryInteractionLimit!

  \\"\\"\\"The origin of the currently active interaction limit.\\"\\"\\"
  origin: GithubRepositoryInteractionLimitOrigin!
}

\\"\\"\\"A repository interaction limit.\\"\\"\\"
enum GithubRepositoryInteractionLimit {
  \\"\\"\\"
  Users that are not collaborators will not be able to interact with the repository.
  \\"\\"\\"
  COLLABORATORS_ONLY

  \\"\\"\\"
  Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
  \\"\\"\\"
  CONTRIBUTORS_ONLY

  \\"\\"\\"
  Users that have recently created their account will be unable to interact with the repository.
  \\"\\"\\"
  EXISTING_USERS

  \\"\\"\\"No interaction limits are enabled.\\"\\"\\"
  NO_LIMIT
}

\\"\\"\\"The length for a repository interaction limit to be enabled for.\\"\\"\\"
enum GithubRepositoryInteractionLimitExpiry {
  \\"\\"\\"The interaction limit will expire after 1 day.\\"\\"\\"
  ONE_DAY

  \\"\\"\\"The interaction limit will expire after 1 month.\\"\\"\\"
  ONE_MONTH

  \\"\\"\\"The interaction limit will expire after 1 week.\\"\\"\\"
  ONE_WEEK

  \\"\\"\\"The interaction limit will expire after 6 months.\\"\\"\\"
  SIX_MONTHS

  \\"\\"\\"The interaction limit will expire after 3 days.\\"\\"\\"
  THREE_DAYS
}

\\"\\"\\"Indicates where an interaction limit is configured.\\"\\"\\"
enum GithubRepositoryInteractionLimitOrigin {
  \\"\\"\\"A limit that is configured at the organization level.\\"\\"\\"
  ORGANIZATION

  \\"\\"\\"A limit that is configured at the repository level.\\"\\"\\"
  REPOSITORY

  \\"\\"\\"A limit that is configured at the user-wide level.\\"\\"\\"
  USER
}

\\"\\"\\"An invitation for a user to be added to a repository.\\"\\"\\"
type GithubRepositoryInvitation implements GithubNode {
  \\"\\"\\"The email address that received the invitation.\\"\\"\\"
  email: String
  id: ID!

  \\"\\"\\"The user who received the invitation.\\"\\"\\"
  invitee: GithubUser

  \\"\\"\\"The user who created the invitation.\\"\\"\\"
  inviter: GithubUser!

  \\"\\"\\"The permalink for this repository invitation.\\"\\"\\"
  permalink: GithubURI!

  \\"\\"\\"The permission granted on this repository by this invitation.\\"\\"\\"
  permission: GithubRepositoryPermission!

  \\"\\"\\"The Repository the user is invited to.\\"\\"\\"
  repository: GithubRepositoryInfo
}

\\"\\"\\"The connection type for RepositoryInvitation.\\"\\"\\"
type GithubRepositoryInvitationConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubRepositoryInvitationEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRepositoryInvitation]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubRepositoryInvitationEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubRepositoryInvitation
}

\\"\\"\\"Ordering options for repository invitation connections.\\"\\"\\"
input GithubRepositoryInvitationOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order repository invitations by.\\"\\"\\"
  field: GithubRepositoryInvitationOrderField!
}

\\"\\"\\"Properties by which repository invitation connections can be ordered.\\"\\"\\"
enum GithubRepositoryInvitationOrderField {
  \\"\\"\\"Order repository invitations by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order repository invitations by invitee login\\"\\"\\"
  INVITEE_LOGIN @deprecated(reason: \\"\`INVITEE_LOGIN\` is no longer a valid field value. Repository invitations can now be associated with an email, not only an invitee. Removal on 2020-10-01 UTC.\\")
}

\\"\\"\\"The possible reasons a given repository could be in a locked state.\\"\\"\\"
enum GithubRepositoryLockReason {
  \\"\\"\\"The repository is locked due to a billing related reason.\\"\\"\\"
  BILLING

  \\"\\"\\"The repository is locked due to a migration.\\"\\"\\"
  MIGRATING

  \\"\\"\\"The repository is locked due to a move.\\"\\"\\"
  MOVING

  \\"\\"\\"The repository is locked due to a rename.\\"\\"\\"
  RENAME
}

\\"\\"\\"Represents a object that belongs to a repository.\\"\\"\\"
interface GithubRepositoryNode {
  \\"\\"\\"The repository associated with this node.\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"Ordering options for repository connections\\"\\"\\"
input GithubRepositoryOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order repositories by.\\"\\"\\"
  field: GithubRepositoryOrderField!
}

\\"\\"\\"Properties by which repository connections can be ordered.\\"\\"\\"
enum GithubRepositoryOrderField {
  \\"\\"\\"Order repositories by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order repositories by name\\"\\"\\"
  NAME

  \\"\\"\\"Order repositories by push time\\"\\"\\"
  PUSHED_AT

  \\"\\"\\"Order repositories by number of stargazers\\"\\"\\"
  STARGAZERS

  \\"\\"\\"Order repositories by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"Represents an owner of a Repository.\\"\\"\\"
interface GithubRepositoryOwner {
  \\"\\"\\"A URL pointing to the owner's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!
  id: ID!

  \\"\\"\\"The username used to login.\\"\\"\\"
  login: String!

  \\"\\"\\"A list of repositories that the user owns.\\"\\"\\"
  repositories(
    \\"\\"\\"
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    \\"\\"\\"
    affiliations: [GithubRepositoryAffiliation]

    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"
    If non-null, filters repositories according to whether they are forks of another repository
    \\"\\"\\"
    isFork: Boolean

    \\"\\"\\"
    If non-null, filters repositories according to whether they have been locked
    \\"\\"\\"
    isLocked: Boolean

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories returned from the connection\\"\\"\\"
    orderBy: GithubRepositoryOrder

    \\"\\"\\"
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    \\"\\"\\"
    ownerAffiliations: [GithubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    \\"\\"\\"If non-null, filters repositories according to privacy\\"\\"\\"
    privacy: GithubRepositoryPrivacy
  ): GithubRepositoryConnection!

  \\"\\"\\"Find Repository.\\"\\"\\"
  repository(
    \\"\\"\\"Name of Repository to find.\\"\\"\\"
    name: String!
  ): GithubRepository

  \\"\\"\\"The HTTP URL for the owner.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for the owner.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The access level to a repository\\"\\"\\"
enum GithubRepositoryPermission {
  \\"\\"\\"
  Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators
  \\"\\"\\"
  ADMIN

  \\"\\"\\"
  Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
  \\"\\"\\"
  MAINTAIN

  \\"\\"\\"
  Can read and clone this repository. Can also open and comment on issues and pull requests
  \\"\\"\\"
  READ

  \\"\\"\\"
  Can read and clone this repository. Can also manage issues and pull requests
  \\"\\"\\"
  TRIAGE

  \\"\\"\\"
  Can read, clone, and push to this repository. Can also manage issues and pull requests
  \\"\\"\\"
  WRITE
}

\\"\\"\\"The privacy of a repository\\"\\"\\"
enum GithubRepositoryPrivacy {
  \\"\\"\\"Private\\"\\"\\"
  PRIVATE

  \\"\\"\\"Public\\"\\"\\"
  PUBLIC
}

\\"\\"\\"A repository-topic connects a repository to a topic.\\"\\"\\"
type GithubRepositoryTopic implements GithubNode & GithubUniformResourceLocatable {
  id: ID!

  \\"\\"\\"The HTTP path for this repository-topic.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The topic.\\"\\"\\"
  topic: GithubTopic!

  \\"\\"\\"The HTTP URL for this repository-topic.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"The connection type for RepositoryTopic.\\"\\"\\"
type GithubRepositoryTopicConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubRepositoryTopicEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRepositoryTopic]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubRepositoryTopicEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubRepositoryTopic
}

\\"\\"\\"The repository's visibility level.\\"\\"\\"
enum GithubRepositoryVisibility {
  \\"\\"\\"The repository is visible only to users in the same business.\\"\\"\\"
  INTERNAL

  \\"\\"\\"The repository is visible only to those with explicit access.\\"\\"\\"
  PRIVATE

  \\"\\"\\"The repository is visible to everyone.\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Audit log entry for a repository_visibility_change.disable event.\\"\\"\\"
type GithubRepositoryVisibilityChangeDisableAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a repository_visibility_change.enable event.\\"\\"\\"
type GithubRepositoryVisibilityChangeEnableAuditEntry implements GithubAuditEntry & GithubEnterpriseAuditEntryData & GithubNode & GithubOrganizationAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!

  \\"\\"\\"The HTTP path for this enterprise.\\"\\"\\"
  enterpriseResourcePath: GithubURI

  \\"\\"\\"The slug of the enterprise.\\"\\"\\"
  enterpriseSlug: String

  \\"\\"\\"The HTTP URL for this enterprise.\\"\\"\\"
  enterpriseUrl: GithubURI
  id: ID!

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"A alert for a repository with an affected vulnerability.\\"\\"\\"
type GithubRepositoryVulnerabilityAlert implements GithubNode & GithubRepositoryNode {
  \\"\\"\\"When was the alert created?\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The reason the alert was dismissed\\"\\"\\"
  dismissReason: String

  \\"\\"\\"When was the alert dismissed?\\"\\"\\"
  dismissedAt: GithubDateTime

  \\"\\"\\"The user who dismissed the alert\\"\\"\\"
  dismisser: GithubUser
  id: ID!

  \\"\\"\\"The associated repository\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"The associated security advisory\\"\\"\\"
  securityAdvisory: GithubSecurityAdvisory

  \\"\\"\\"The associated security vulnerability\\"\\"\\"
  securityVulnerability: GithubSecurityVulnerability

  \\"\\"\\"The vulnerable manifest filename\\"\\"\\"
  vulnerableManifestFilename: String!

  \\"\\"\\"The vulnerable manifest path\\"\\"\\"
  vulnerableManifestPath: String!

  \\"\\"\\"The vulnerable requirements\\"\\"\\"
  vulnerableRequirements: String
}

\\"\\"\\"The connection type for RepositoryVulnerabilityAlert.\\"\\"\\"
type GithubRepositoryVulnerabilityAlertConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubRepositoryVulnerabilityAlertEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRepositoryVulnerabilityAlert]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubRepositoryVulnerabilityAlertEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubRepositoryVulnerabilityAlert
}

\\"\\"\\"Autogenerated input type of RequestReviews\\"\\"\\"
input GithubRequestReviewsInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the pull request to modify.\\"\\"\\"
  pullRequestId: ID!

  \\"\\"\\"The Node IDs of the team to request.\\"\\"\\"
  teamIds: [ID!]

  \\"\\"\\"Add users to the set rather than replace.\\"\\"\\"
  union: Boolean

  \\"\\"\\"The Node IDs of the user to request.\\"\\"\\"
  userIds: [ID!]
}

\\"\\"\\"Autogenerated return type of RequestReviews\\"\\"\\"
type GithubRequestReviewsPayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The pull request that is getting requests.\\"\\"\\"
  pullRequest: GithubPullRequest

  \\"\\"\\"The edge from the pull request to the requested reviewers.\\"\\"\\"
  requestedReviewersEdge: GithubUserEdge
}

\\"\\"\\"The possible states that can be requested when creating a check run.\\"\\"\\"
enum GithubRequestableCheckStatusState {
  \\"\\"\\"The check suite or run has been completed.\\"\\"\\"
  COMPLETED

  \\"\\"\\"The check suite or run is in progress.\\"\\"\\"
  IN_PROGRESS

  \\"\\"\\"The check suite or run is in pending state.\\"\\"\\"
  PENDING

  \\"\\"\\"The check suite or run has been queued.\\"\\"\\"
  QUEUED

  \\"\\"\\"The check suite or run is in waiting state.\\"\\"\\"
  WAITING
}

\\"\\"\\"Types that can be requested reviewers.\\"\\"\\"
union GithubRequestedReviewer = GithubMannequin | GithubTeam | GithubUser

\\"\\"\\"Represents a type that can be required by a pull request for merging.\\"\\"\\"
interface GithubRequirableByPullRequest {
  \\"\\"\\"
  Whether this is required to pass before merging for a specific pull request.
  \\"\\"\\"
  isRequired(
    \\"\\"\\"The id of the pull request this is required for\\"\\"\\"
    pullRequestId: ID

    \\"\\"\\"The number of the pull request this is required for\\"\\"\\"
    pullRequestNumber: Int
  ): Boolean!
}

\\"\\"\\"Autogenerated input type of RerequestCheckSuite\\"\\"\\"
input GithubRerequestCheckSuiteInput {
  \\"\\"\\"The Node ID of the check suite.\\"\\"\\"
  checkSuiteId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of RerequestCheckSuite\\"\\"\\"
type GithubRerequestCheckSuitePayload {
  \\"\\"\\"The requested check suite.\\"\\"\\"
  checkSuite: GithubCheckSuite

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of ResolveReviewThread\\"\\"\\"
input GithubResolveReviewThreadInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the thread to resolve\\"\\"\\"
  threadId: ID!
}

\\"\\"\\"Autogenerated return type of ResolveReviewThread\\"\\"\\"
type GithubResolveReviewThreadPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The thread to resolve.\\"\\"\\"
  thread: GithubPullRequestReviewThread
}

\\"\\"\\"Represents a private contribution a user made on GitHub.\\"\\"\\"
type GithubRestrictedContribution implements GithubContribution {
  \\"\\"\\"
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  \\"\\"\\"
  isRestricted: Boolean!

  \\"\\"\\"When this contribution was made.\\"\\"\\"
  occurredAt: GithubDateTime!

  \\"\\"\\"The HTTP path for this contribution.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this contribution.\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"
  The user who made this contribution.
  
  \\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"
A team or user who has the ability to dismiss a review on a protected branch.
\\"\\"\\"
type GithubReviewDismissalAllowance implements GithubNode {
  \\"\\"\\"The actor that can dismiss.\\"\\"\\"
  actor: GithubReviewDismissalAllowanceActor

  \\"\\"\\"
  Identifies the branch protection rule associated with the allowed user or team.
  \\"\\"\\"
  branchProtectionRule: GithubBranchProtectionRule
  id: ID!
}

\\"\\"\\"Types that can be an actor.\\"\\"\\"
union GithubReviewDismissalAllowanceActor = GithubTeam | GithubUser

\\"\\"\\"The connection type for ReviewDismissalAllowance.\\"\\"\\"
type GithubReviewDismissalAllowanceConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubReviewDismissalAllowanceEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubReviewDismissalAllowance]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubReviewDismissalAllowanceEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubReviewDismissalAllowance
}

\\"\\"\\"
Represents a 'review_dismissed' event on a given issue or pull request.
\\"\\"\\"
type GithubReviewDismissedEvent implements GithubNode & GithubUniformResourceLocatable {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"
  Identifies the optional message associated with the 'review_dismissed' event.
  \\"\\"\\"
  dismissalMessage: String

  \\"\\"\\"
  Identifies the optional message associated with the event, rendered to HTML.
  \\"\\"\\"
  dismissalMessageHTML: String
  id: ID!

  \\"\\"\\"
  Identifies the previous state of the review with the 'review_dismissed' event.
  \\"\\"\\"
  previousReviewState: GithubPullRequestReviewState!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"Identifies the commit which caused the review to become stale.\\"\\"\\"
  pullRequestCommit: GithubPullRequestCommit

  \\"\\"\\"The HTTP path for this review dismissed event.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the review associated with the 'review_dismissed' event.\\"\\"\\"
  review: GithubPullRequestReview

  \\"\\"\\"The HTTP URL for this review dismissed event.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"A request for a user to review a pull request.\\"\\"\\"
type GithubReviewRequest implements GithubNode {
  \\"\\"\\"Whether this request was created for a code owner\\"\\"\\"
  asCodeOwner: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"Identifies the pull request associated with this review request.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"The reviewer that is requested.\\"\\"\\"
  requestedReviewer: GithubRequestedReviewer
}

\\"\\"\\"The connection type for ReviewRequest.\\"\\"\\"
type GithubReviewRequestConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubReviewRequestEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubReviewRequest]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubReviewRequestEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubReviewRequest
}

\\"\\"\\"Represents an 'review_request_removed' event on a given pull request.\\"\\"\\"
type GithubReviewRequestRemovedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"Identifies the reviewer whose review request was removed.\\"\\"\\"
  requestedReviewer: GithubRequestedReviewer
}

\\"\\"\\"Represents an 'review_requested' event on a given pull request.\\"\\"\\"
type GithubReviewRequestedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"PullRequest referenced by event.\\"\\"\\"
  pullRequest: GithubPullRequest!

  \\"\\"\\"Identifies the reviewer whose review was requested.\\"\\"\\"
  requestedReviewer: GithubRequestedReviewer
}

\\"\\"\\"
A hovercard context with a message describing the current code review state of the pull
request.

\\"\\"\\"
type GithubReviewStatusHovercardContext implements GithubHovercardContext {
  \\"\\"\\"A string describing this context\\"\\"\\"
  message: String!

  \\"\\"\\"An octicon to accompany this context\\"\\"\\"
  octicon: String!

  \\"\\"\\"The current status of the pull request with respect to code review.\\"\\"\\"
  reviewDecision: GithubPullRequestReviewDecision
}

\\"\\"\\"
The possible digest algorithms used to sign SAML requests for an identity provider.
\\"\\"\\"
enum GithubSamlDigestAlgorithm {
  \\"\\"\\"SHA1\\"\\"\\"
  SHA1

  \\"\\"\\"SHA256\\"\\"\\"
  SHA256

  \\"\\"\\"SHA384\\"\\"\\"
  SHA384

  \\"\\"\\"SHA512\\"\\"\\"
  SHA512
}

\\"\\"\\"
The possible signature algorithms used to sign SAML requests for a Identity Provider.
\\"\\"\\"
enum GithubSamlSignatureAlgorithm {
  \\"\\"\\"RSA-SHA1\\"\\"\\"
  RSA_SHA1

  \\"\\"\\"RSA-SHA256\\"\\"\\"
  RSA_SHA256

  \\"\\"\\"RSA-SHA384\\"\\"\\"
  RSA_SHA384

  \\"\\"\\"RSA-SHA512\\"\\"\\"
  RSA_SHA512
}

\\"\\"\\"A Saved Reply is text a user can use to reply quickly.\\"\\"\\"
type GithubSavedReply implements GithubNode {
  \\"\\"\\"The body of the saved reply.\\"\\"\\"
  body: String!

  \\"\\"\\"The saved reply body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The title of the saved reply.\\"\\"\\"
  title: String!

  \\"\\"\\"The user that saved this reply.\\"\\"\\"
  user: GithubActor
}

\\"\\"\\"The connection type for SavedReply.\\"\\"\\"
type GithubSavedReplyConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSavedReplyEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSavedReply]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSavedReplyEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSavedReply
}

\\"\\"\\"Ordering options for saved reply connections.\\"\\"\\"
input GithubSavedReplyOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order saved replies by.\\"\\"\\"
  field: GithubSavedReplyOrderField!
}

\\"\\"\\"Properties by which saved reply connections can be ordered.\\"\\"\\"
enum GithubSavedReplyOrderField {
  \\"\\"\\"Order saved reply by when they were updated.\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"The results of a search.\\"\\"\\"
union GithubSearchResultItem = GithubApp | GithubDiscussion | GithubIssue | GithubMarketplaceListing | GithubOrganization | GithubPullRequest | GithubRepository | GithubUser

\\"\\"\\"A list of results that matched against a search query.\\"\\"\\"
type GithubSearchResultItemConnection {
  \\"\\"\\"The number of pieces of code that matched the search query.\\"\\"\\"
  codeCount: Int!

  \\"\\"\\"The number of discussions that matched the search query.\\"\\"\\"
  discussionCount: Int!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSearchResultItemEdge]

  \\"\\"\\"The number of issues that matched the search query.\\"\\"\\"
  issueCount: Int!

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSearchResultItem]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"The number of repositories that matched the search query.\\"\\"\\"
  repositoryCount: Int!

  \\"\\"\\"The number of users that matched the search query.\\"\\"\\"
  userCount: Int!

  \\"\\"\\"The number of wiki pages that matched the search query.\\"\\"\\"
  wikiCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSearchResultItemEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSearchResultItem

  \\"\\"\\"Text matches on the result found.\\"\\"\\"
  textMatches: [GithubTextMatch]
}

\\"\\"\\"Represents the individual results of a search.\\"\\"\\"
enum GithubSearchType {
  \\"\\"\\"Returns matching discussions in repositories.\\"\\"\\"
  DISCUSSION

  \\"\\"\\"Returns results matching issues in repositories.\\"\\"\\"
  ISSUE

  \\"\\"\\"Returns results matching repositories.\\"\\"\\"
  REPOSITORY

  \\"\\"\\"Returns results matching users and organizations on GitHub.\\"\\"\\"
  USER
}

\\"\\"\\"A GitHub Security Advisory\\"\\"\\"
type GithubSecurityAdvisory implements GithubNode {
  \\"\\"\\"The CVSS associated with this advisory\\"\\"\\"
  cvss: GithubCVSS!

  \\"\\"\\"CWEs associated with this Advisory\\"\\"\\"
  cwes(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCWEConnection!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"This is a long plaintext description of the advisory\\"\\"\\"
  description: String!

  \\"\\"\\"The GitHub Security Advisory ID\\"\\"\\"
  ghsaId: String!
  id: ID!

  \\"\\"\\"A list of identifiers for this advisory\\"\\"\\"
  identifiers: [GithubSecurityAdvisoryIdentifier!]!

  \\"\\"\\"The permalink for the advisory's dependabot alerts page\\"\\"\\"
  notificationsPermalink: GithubURI

  \\"\\"\\"The organization that originated the advisory\\"\\"\\"
  origin: String!

  \\"\\"\\"The permalink for the advisory\\"\\"\\"
  permalink: GithubURI

  \\"\\"\\"When the advisory was published\\"\\"\\"
  publishedAt: GithubDateTime!

  \\"\\"\\"A list of references for this advisory\\"\\"\\"
  references: [GithubSecurityAdvisoryReference!]!

  \\"\\"\\"The severity of the advisory\\"\\"\\"
  severity: GithubSecurityAdvisorySeverity!

  \\"\\"\\"A short plaintext summary of the advisory\\"\\"\\"
  summary: String!

  \\"\\"\\"When the advisory was last updated\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"Vulnerabilities associated with this Advisory\\"\\"\\"
  vulnerabilities(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"An ecosystem to filter vulnerabilities by.\\"\\"\\"
    ecosystem: GithubSecurityAdvisoryEcosystem

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for the returned topics.\\"\\"\\"
    orderBy: GithubSecurityVulnerabilityOrder = {direction: DESC, field: UPDATED_AT}

    \\"\\"\\"A package name to filter vulnerabilities by.\\"\\"\\"
    package: String

    \\"\\"\\"A list of severities to filter vulnerabilities by.\\"\\"\\"
    severities: [GithubSecurityAdvisorySeverity!]
  ): GithubSecurityVulnerabilityConnection!

  \\"\\"\\"When the advisory was withdrawn, if it has been withdrawn\\"\\"\\"
  withdrawnAt: GithubDateTime
}

\\"\\"\\"The connection type for SecurityAdvisory.\\"\\"\\"
type GithubSecurityAdvisoryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSecurityAdvisoryEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSecurityAdvisory]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"The possible ecosystems of a security vulnerability's package.\\"\\"\\"
enum GithubSecurityAdvisoryEcosystem {
  \\"\\"\\"PHP packages hosted at packagist.org\\"\\"\\"
  COMPOSER

  \\"\\"\\"Go modules\\"\\"\\"
  GO

  \\"\\"\\"Java artifacts hosted at the Maven central repository\\"\\"\\"
  MAVEN

  \\"\\"\\"JavaScript packages hosted at npmjs.com\\"\\"\\"
  NPM

  \\"\\"\\".NET packages hosted at the NuGet Gallery\\"\\"\\"
  NUGET

  \\"\\"\\"Python packages hosted at PyPI.org\\"\\"\\"
  PIP

  \\"\\"\\"Ruby gems hosted at RubyGems.org\\"\\"\\"
  RUBYGEMS
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSecurityAdvisoryEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSecurityAdvisory
}

\\"\\"\\"A GitHub Security Advisory Identifier\\"\\"\\"
type GithubSecurityAdvisoryIdentifier {
  \\"\\"\\"The identifier type, e.g. GHSA, CVE\\"\\"\\"
  type: String!

  \\"\\"\\"The identifier\\"\\"\\"
  value: String!
}

\\"\\"\\"An advisory identifier to filter results on.\\"\\"\\"
input GithubSecurityAdvisoryIdentifierFilter {
  \\"\\"\\"The identifier type.\\"\\"\\"
  type: GithubSecurityAdvisoryIdentifierType!

  \\"\\"\\"The identifier string. Supports exact or partial matching.\\"\\"\\"
  value: String!
}

\\"\\"\\"Identifier formats available for advisories.\\"\\"\\"
enum GithubSecurityAdvisoryIdentifierType {
  \\"\\"\\"Common Vulnerabilities and Exposures Identifier.\\"\\"\\"
  CVE

  \\"\\"\\"GitHub Security Advisory ID.\\"\\"\\"
  GHSA
}

\\"\\"\\"Ordering options for security advisory connections\\"\\"\\"
input GithubSecurityAdvisoryOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order security advisories by.\\"\\"\\"
  field: GithubSecurityAdvisoryOrderField!
}

\\"\\"\\"Properties by which security advisory connections can be ordered.\\"\\"\\"
enum GithubSecurityAdvisoryOrderField {
  \\"\\"\\"Order advisories by publication time\\"\\"\\"
  PUBLISHED_AT

  \\"\\"\\"Order advisories by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"An individual package\\"\\"\\"
type GithubSecurityAdvisoryPackage {
  \\"\\"\\"The ecosystem the package belongs to, e.g. RUBYGEMS, NPM\\"\\"\\"
  ecosystem: GithubSecurityAdvisoryEcosystem!

  \\"\\"\\"The package name\\"\\"\\"
  name: String!
}

\\"\\"\\"An individual package version\\"\\"\\"
type GithubSecurityAdvisoryPackageVersion {
  \\"\\"\\"The package name or version\\"\\"\\"
  identifier: String!
}

\\"\\"\\"A GitHub Security Advisory Reference\\"\\"\\"
type GithubSecurityAdvisoryReference {
  \\"\\"\\"A publicly accessible reference\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Severity of the vulnerability.\\"\\"\\"
enum GithubSecurityAdvisorySeverity {
  \\"\\"\\"Critical.\\"\\"\\"
  CRITICAL

  \\"\\"\\"High.\\"\\"\\"
  HIGH

  \\"\\"\\"Low.\\"\\"\\"
  LOW

  \\"\\"\\"Moderate.\\"\\"\\"
  MODERATE
}

\\"\\"\\"An individual vulnerability within an Advisory\\"\\"\\"
type GithubSecurityVulnerability {
  \\"\\"\\"The Advisory associated with this Vulnerability\\"\\"\\"
  advisory: GithubSecurityAdvisory!

  \\"\\"\\"The first version containing a fix for the vulnerability\\"\\"\\"
  firstPatchedVersion: GithubSecurityAdvisoryPackageVersion

  \\"\\"\\"A description of the vulnerable package\\"\\"\\"
  package: GithubSecurityAdvisoryPackage!

  \\"\\"\\"The severity of the vulnerability within this package\\"\\"\\"
  severity: GithubSecurityAdvisorySeverity!

  \\"\\"\\"When the vulnerability was last updated\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + \`= 0.2.0\` denotes a single vulnerable version.
  + \`<= 1.0.8\` denotes a version range up to and including the specified version
  + \`< 0.1.11\` denotes a version range up to, but excluding, the specified version
  + \`>= 4.3.0, < 4.3.5\` denotes a version range with a known minimum and maximum version.
  + \`>= 0.0.1\` denotes a version range with a known minimum, but no known maximum
  
  \\"\\"\\"
  vulnerableVersionRange: String!
}

\\"\\"\\"The connection type for SecurityVulnerability.\\"\\"\\"
type GithubSecurityVulnerabilityConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSecurityVulnerabilityEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSecurityVulnerability]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSecurityVulnerabilityEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSecurityVulnerability
}

\\"\\"\\"Ordering options for security vulnerability connections\\"\\"\\"
input GithubSecurityVulnerabilityOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order security vulnerabilities by.\\"\\"\\"
  field: GithubSecurityVulnerabilityOrderField!
}

\\"\\"\\"Properties by which security vulnerability connections can be ordered.\\"\\"\\"
enum GithubSecurityVulnerabilityOrderField {
  \\"\\"\\"Order vulnerability by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"Autogenerated input type of SetEnterpriseIdentityProvider\\"\\"\\"
input GithubSetEnterpriseIdentityProviderInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The digest algorithm used to sign SAML requests for the identity provider.
  \\"\\"\\"
  digestMethod: GithubSamlDigestAlgorithm!

  \\"\\"\\"The ID of the enterprise on which to set an identity provider.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The x509 certificate used by the identity provider to sign assertions and responses.
  \\"\\"\\"
  idpCertificate: String!

  \\"\\"\\"The Issuer Entity ID for the SAML identity provider\\"\\"\\"
  issuer: String

  \\"\\"\\"
  The signature algorithm used to sign SAML requests for the identity provider.
  \\"\\"\\"
  signatureMethod: GithubSamlSignatureAlgorithm!

  \\"\\"\\"The URL endpoint for the identity provider's SAML SSO.\\"\\"\\"
  ssoUrl: GithubURI!
}

\\"\\"\\"Autogenerated return type of SetEnterpriseIdentityProvider\\"\\"\\"
type GithubSetEnterpriseIdentityProviderPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The identity provider for the enterprise.\\"\\"\\"
  identityProvider: GithubEnterpriseIdentityProvider
}

\\"\\"\\"Autogenerated input type of SetOrganizationInteractionLimit\\"\\"\\"
input GithubSetOrganizationInteractionLimitInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"When this limit should expire.\\"\\"\\"
  expiry: GithubRepositoryInteractionLimitExpiry

  \\"\\"\\"The limit to set.\\"\\"\\"
  limit: GithubRepositoryInteractionLimit!

  \\"\\"\\"The ID of the organization to set a limit for.\\"\\"\\"
  organizationId: ID!
}

\\"\\"\\"Autogenerated return type of SetOrganizationInteractionLimit\\"\\"\\"
type GithubSetOrganizationInteractionLimitPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The organization that the interaction limit was set for.\\"\\"\\"
  organization: GithubOrganization
}

\\"\\"\\"Autogenerated input type of SetRepositoryInteractionLimit\\"\\"\\"
input GithubSetRepositoryInteractionLimitInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"When this limit should expire.\\"\\"\\"
  expiry: GithubRepositoryInteractionLimitExpiry

  \\"\\"\\"The limit to set.\\"\\"\\"
  limit: GithubRepositoryInteractionLimit!

  \\"\\"\\"The ID of the repository to set a limit for.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of SetRepositoryInteractionLimit\\"\\"\\"
type GithubSetRepositoryInteractionLimitPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The repository that the interaction limit was set for.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Autogenerated input type of SetUserInteractionLimit\\"\\"\\"
input GithubSetUserInteractionLimitInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"When this limit should expire.\\"\\"\\"
  expiry: GithubRepositoryInteractionLimitExpiry

  \\"\\"\\"The limit to set.\\"\\"\\"
  limit: GithubRepositoryInteractionLimit!

  \\"\\"\\"The ID of the user to set a limit for.\\"\\"\\"
  userId: ID!
}

\\"\\"\\"Autogenerated return type of SetUserInteractionLimit\\"\\"\\"
type GithubSetUserInteractionLimitPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The user that the interaction limit was set for.\\"\\"\\"
  user: GithubUser
}

\\"\\"\\"Represents an S/MIME signature on a Commit or Tag.\\"\\"\\"
type GithubSmimeSignature implements GithubGitSignature {
  \\"\\"\\"Email used to sign this object.\\"\\"\\"
  email: String!

  \\"\\"\\"True if the signature is valid and verified by GitHub.\\"\\"\\"
  isValid: Boolean!

  \\"\\"\\"
  Payload for GPG signing object. Raw ODB object without the signature header.
  \\"\\"\\"
  payload: String!

  \\"\\"\\"ASCII-armored signature header from object.\\"\\"\\"
  signature: String!

  \\"\\"\\"GitHub user corresponding to the email signing this commit.\\"\\"\\"
  signer: GithubUser

  \\"\\"\\"
  The state of this signature. \`VALID\` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  \\"\\"\\"
  state: GithubGitSignatureState!

  \\"\\"\\"True if the signature was made with GitHub's signing key.\\"\\"\\"
  wasSignedByGitHub: Boolean!
}

\\"\\"\\"Entities that can sponsor others via GitHub Sponsors\\"\\"\\"
union GithubSponsor = GithubOrganization | GithubUser

\\"\\"\\"Entities that can be sponsored through GitHub Sponsors\\"\\"\\"
interface GithubSponsorable {
  \\"\\"\\"True if this user/organization has a GitHub Sponsors listing.\\"\\"\\"
  hasSponsorsListing: Boolean!

  \\"\\"\\"Check if the given account is sponsoring this user/organization.\\"\\"\\"
  isSponsoredBy(
    \\"\\"\\"The target account's login.\\"\\"\\"
    accountLogin: String!
  ): Boolean!

  \\"\\"\\"True if the viewer is sponsored by this user/organization.\\"\\"\\"
  isSponsoringViewer: Boolean!

  \\"\\"\\"The GitHub Sponsors listing for this user or organization.\\"\\"\\"
  sponsorsListing: GithubSponsorsListing

  \\"\\"\\"The viewer's sponsorship of this entity.\\"\\"\\"
  sponsorshipForViewerAsSponsor: GithubSponsorship

  \\"\\"\\"This object's sponsorships as the maintainer.\\"\\"\\"
  sponsorshipsAsMaintainer(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Whether or not to include private sponsorships in the result set\\"\\"\\"
    includePrivate: Boolean = false

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    \\"\\"\\"
    orderBy: GithubSponsorshipOrder
  ): GithubSponsorshipConnection!

  \\"\\"\\"This object's sponsorships as the sponsor.\\"\\"\\"
  sponsorshipsAsSponsor(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    \\"\\"\\"
    orderBy: GithubSponsorshipOrder
  ): GithubSponsorshipConnection!

  \\"\\"\\"Whether or not the viewer is able to sponsor this user/organization.\\"\\"\\"
  viewerCanSponsor: Boolean!

  \\"\\"\\"True if the viewer is sponsoring this user/organization.\\"\\"\\"
  viewerIsSponsoring: Boolean!
}

\\"\\"\\"Entities that can be sponsored via GitHub Sponsors\\"\\"\\"
union GithubSponsorableItem = GithubOrganization | GithubUser

\\"\\"\\"The connection type for SponsorableItem.\\"\\"\\"
type GithubSponsorableItemConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSponsorableItemEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSponsorableItem]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSponsorableItemEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSponsorableItem
}

\\"\\"\\"
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
\\"\\"\\"
input GithubSponsorableOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order sponsorable entities by.\\"\\"\\"
  field: GithubSponsorableOrderField!
}

\\"\\"\\"Properties by which sponsorable connections can be ordered.\\"\\"\\"
enum GithubSponsorableOrderField {
  \\"\\"\\"Order sponsorable entities by login (username).\\"\\"\\"
  LOGIN
}

\\"\\"\\"
A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
\\"\\"\\"
type GithubSponsorsGoal {
  \\"\\"\\"A description of the goal from the maintainer.\\"\\"\\"
  description: String

  \\"\\"\\"What the objective of this goal is.\\"\\"\\"
  kind: GithubSponsorsGoalKind!

  \\"\\"\\"The percentage representing how complete this goal is, between 0-100.\\"\\"\\"
  percentComplete: Int!

  \\"\\"\\"
  What the goal amount is. Represents a dollar amount for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
  \\"\\"\\"
  targetValue: Int!

  \\"\\"\\"A brief summary of the kind and target value of this goal.\\"\\"\\"
  title: String!
}

\\"\\"\\"The different kinds of goals a GitHub Sponsors member can have.\\"\\"\\"
enum GithubSponsorsGoalKind {
  \\"\\"\\"
  The goal is about getting a certain dollar amount from sponsorships each month.
  \\"\\"\\"
  MONTHLY_SPONSORSHIP_AMOUNT

  \\"\\"\\"The goal is about reaching a certain number of sponsors.\\"\\"\\"
  TOTAL_SPONSORS_COUNT
}

\\"\\"\\"A GitHub Sponsors listing.\\"\\"\\"
type GithubSponsorsListing implements GithubNode {
  \\"\\"\\"
  The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
  \\"\\"\\"
  activeGoal: GithubSponsorsGoal

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The full description of the listing.\\"\\"\\"
  fullDescription: String!

  \\"\\"\\"The full description of the listing rendered to HTML.\\"\\"\\"
  fullDescriptionHTML: GithubHTML!
  id: ID!

  \\"\\"\\"The listing's full name.\\"\\"\\"
  name: String!

  \\"\\"\\"The short description of the listing.\\"\\"\\"
  shortDescription: String!

  \\"\\"\\"The short name of the listing.\\"\\"\\"
  slug: String!

  \\"\\"\\"The published tiers for this GitHub Sponsors listing.\\"\\"\\"
  tiers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for Sponsors tiers returned from the connection.\\"\\"\\"
    orderBy: GithubSponsorsTierOrder = {direction: ASC, field: MONTHLY_PRICE_IN_CENTS}
  ): GithubSponsorsTierConnection
}

\\"\\"\\"A GitHub Sponsors tier associated with a GitHub Sponsors listing.\\"\\"\\"
type GithubSponsorsTier implements GithubNode {
  \\"\\"\\"
  SponsorsTier information only visible to users that can administer the associated Sponsors listing.
  \\"\\"\\"
  adminInfo: GithubSponsorsTierAdminInfo

  \\"\\"\\"
  Get a different tier for this tier's maintainer that is at the same frequency as this tier but with a lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
  \\"\\"\\"
  closestLesserValueTier: GithubSponsorsTier

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The description of the tier.\\"\\"\\"
  description: String!

  \\"\\"\\"The tier description rendered to HTML\\"\\"\\"
  descriptionHTML: GithubHTML!
  id: ID!

  \\"\\"\\"
  Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing.
  \\"\\"\\"
  isCustomAmount: Boolean!

  \\"\\"\\"Whether this tier is only for use with one-time sponsorships.\\"\\"\\"
  isOneTime: Boolean!

  \\"\\"\\"How much this tier costs per month in cents.\\"\\"\\"
  monthlyPriceInCents: Int!

  \\"\\"\\"How much this tier costs per month in dollars.\\"\\"\\"
  monthlyPriceInDollars: Int!

  \\"\\"\\"The name of the tier.\\"\\"\\"
  name: String!

  \\"\\"\\"The sponsors listing that this tier belongs to.\\"\\"\\"
  sponsorsListing: GithubSponsorsListing!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"
SponsorsTier information only visible to users that can administer the associated Sponsors listing.
\\"\\"\\"
type GithubSponsorsTierAdminInfo {
  \\"\\"\\"The sponsorships associated with this tier.\\"\\"\\"
  sponsorships(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Whether or not to include private sponsorships in the result set\\"\\"\\"
    includePrivate: Boolean = false

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    \\"\\"\\"
    orderBy: GithubSponsorshipOrder
  ): GithubSponsorshipConnection!
}

\\"\\"\\"The connection type for SponsorsTier.\\"\\"\\"
type GithubSponsorsTierConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSponsorsTierEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSponsorsTier]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSponsorsTierEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSponsorsTier
}

\\"\\"\\"Ordering options for Sponsors tiers connections.\\"\\"\\"
input GithubSponsorsTierOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order tiers by.\\"\\"\\"
  field: GithubSponsorsTierOrderField!
}

\\"\\"\\"Properties by which Sponsors tiers connections can be ordered.\\"\\"\\"
enum GithubSponsorsTierOrderField {
  \\"\\"\\"Order tiers by creation time.\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order tiers by their monthly price in cents\\"\\"\\"
  MONTHLY_PRICE_IN_CENTS
}

\\"\\"\\"A sponsorship relationship between a sponsor and a maintainer\\"\\"\\"
type GithubSponsorship implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  \\"\\"\\"
  isOneTimePayment: Boolean!

  \\"\\"\\"The entity that is being sponsored\\"\\"\\"
  maintainer: GithubUser! @deprecated(reason: \\"\`Sponsorship.maintainer\` will be removed. Use \`Sponsorship.sponsorable\` instead. Removal on 2020-04-01 UTC.\\")

  \\"\\"\\"The privacy level for this sponsorship.\\"\\"\\"
  privacyLevel: GithubSponsorshipPrivacy!

  \\"\\"\\"
  The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
  \\"\\"\\"
  sponsor: GithubUser @deprecated(reason: \\"\`Sponsorship.sponsor\` will be removed. Use \`Sponsorship.sponsorEntity\` instead. Removal on 2020-10-01 UTC.\\")

  \\"\\"\\"
  The user or organization that is sponsoring, if you have permission to view them.
  \\"\\"\\"
  sponsorEntity: GithubSponsor

  \\"\\"\\"The entity that is being sponsored\\"\\"\\"
  sponsorable: GithubSponsorable!

  \\"\\"\\"The associated sponsorship tier\\"\\"\\"
  tier: GithubSponsorsTier

  \\"\\"\\"
  Identifies the date and time when the current tier was chosen for this sponsorship.
  \\"\\"\\"
  tierSelectedAt: GithubDateTime
}

\\"\\"\\"The connection type for Sponsorship.\\"\\"\\"
type GithubSponsorshipConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSponsorshipEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSponsorship]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!

  \\"\\"\\"
  The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
  \\"\\"\\"
  totalRecurringMonthlyPriceInCents: Int!

  \\"\\"\\"
  The total dollar amount of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
  \\"\\"\\"
  totalRecurringMonthlyPriceInDollars: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSponsorshipEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSponsorship
}

\\"\\"\\"Ordering options for sponsorship connections.\\"\\"\\"
input GithubSponsorshipOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order sponsorship by.\\"\\"\\"
  field: GithubSponsorshipOrderField!
}

\\"\\"\\"Properties by which sponsorship connections can be ordered.\\"\\"\\"
enum GithubSponsorshipOrderField {
  \\"\\"\\"Order sponsorship by creation time.\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"The privacy of a sponsorship\\"\\"\\"
enum GithubSponsorshipPrivacy {
  \\"\\"\\"Private\\"\\"\\"
  PRIVATE

  \\"\\"\\"Public\\"\\"\\"
  PUBLIC
}

\\"\\"\\"Ways in which star connections can be ordered.\\"\\"\\"
input GithubStarOrder {
  \\"\\"\\"The direction in which to order nodes.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order nodes by.\\"\\"\\"
  field: GithubStarOrderField!
}

\\"\\"\\"Properties by which star connections can be ordered.\\"\\"\\"
enum GithubStarOrderField {
  \\"\\"\\"Allows ordering a list of stars by when they were created.\\"\\"\\"
  STARRED_AT
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubStargazerConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubStargazerEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a user that's starred a repository.\\"\\"\\"
type GithubStargazerEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!
  node: GithubUser!

  \\"\\"\\"Identifies when the item was starred.\\"\\"\\"
  starredAt: GithubDateTime!
}

\\"\\"\\"Things that can be starred.\\"\\"\\"
interface GithubStarrable {
  id: ID!

  \\"\\"\\"
  Returns a count of how many stargazers there are on this object
  
  \\"\\"\\"
  stargazerCount: Int!

  \\"\\"\\"A list of users who have starred this starrable.\\"\\"\\"
  stargazers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubStarOrder
  ): GithubStargazerConnection!

  \\"\\"\\"
  Returns a boolean indicating whether the viewing user has starred this starrable.
  \\"\\"\\"
  viewerHasStarred: Boolean!
}

\\"\\"\\"The connection type for Repository.\\"\\"\\"
type GithubStarredRepositoryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubStarredRepositoryEdge]

  \\"\\"\\"
  Is the list of stars for this user truncated? This is true for users that have many stars.
  \\"\\"\\"
  isOverLimit: Boolean!

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRepository]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a starred repository.\\"\\"\\"
type GithubStarredRepositoryEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!
  node: GithubRepository!

  \\"\\"\\"Identifies when the item was starred.\\"\\"\\"
  starredAt: GithubDateTime!
}

\\"\\"\\"Represents a commit status.\\"\\"\\"
type GithubStatus implements GithubNode {
  \\"\\"\\"A list of status contexts and check runs for this commit.\\"\\"\\"
  combinedContexts(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubStatusCheckRollupContextConnection!

  \\"\\"\\"The commit this status is attached to.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"Looks up an individual status context by context name.\\"\\"\\"
  context(
    \\"\\"\\"The context name.\\"\\"\\"
    name: String!
  ): GithubStatusContext

  \\"\\"\\"The individual status contexts for this commit.\\"\\"\\"
  contexts: [GithubStatusContext!]!
  id: ID!

  \\"\\"\\"The combined commit status.\\"\\"\\"
  state: GithubStatusState!
}

\\"\\"\\"Represents the rollup for both the check runs and status for a commit.\\"\\"\\"
type GithubStatusCheckRollup implements GithubNode {
  \\"\\"\\"The commit the status and check runs are attached to.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"A list of status contexts and check runs for this commit.\\"\\"\\"
  contexts(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubStatusCheckRollupContextConnection!
  id: ID!

  \\"\\"\\"The combined status for the commit.\\"\\"\\"
  state: GithubStatusState!
}

\\"\\"\\"Types that can be inside a StatusCheckRollup context.\\"\\"\\"
union GithubStatusCheckRollupContext = GithubCheckRun | GithubStatusContext

\\"\\"\\"The connection type for StatusCheckRollupContext.\\"\\"\\"
type GithubStatusCheckRollupContextConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubStatusCheckRollupContextEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubStatusCheckRollupContext]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubStatusCheckRollupContextEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubStatusCheckRollupContext
}

\\"\\"\\"Represents an individual commit status context\\"\\"\\"
type GithubStatusContext implements GithubNode & GithubRequirableByPullRequest {
  \\"\\"\\"
  The avatar of the OAuth application or the user that created the status
  \\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int = 40
  ): GithubURI

  \\"\\"\\"This commit this status context is attached to.\\"\\"\\"
  commit: GithubCommit

  \\"\\"\\"The name of this status context.\\"\\"\\"
  context: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The actor who created this status context.\\"\\"\\"
  creator: GithubActor

  \\"\\"\\"The description for this status context.\\"\\"\\"
  description: String
  id: ID!

  \\"\\"\\"
  Whether this is required to pass before merging for a specific pull request.
  \\"\\"\\"
  isRequired(
    \\"\\"\\"The id of the pull request this is required for\\"\\"\\"
    pullRequestId: ID

    \\"\\"\\"The number of the pull request this is required for\\"\\"\\"
    pullRequestNumber: Int
  ): Boolean!

  \\"\\"\\"The state of this status context.\\"\\"\\"
  state: GithubStatusState!

  \\"\\"\\"The URL for this status context.\\"\\"\\"
  targetUrl: GithubURI
}

\\"\\"\\"The possible commit status states.\\"\\"\\"
enum GithubStatusState {
  \\"\\"\\"Status is errored.\\"\\"\\"
  ERROR

  \\"\\"\\"Status is expected.\\"\\"\\"
  EXPECTED

  \\"\\"\\"Status is failing.\\"\\"\\"
  FAILURE

  \\"\\"\\"Status is pending.\\"\\"\\"
  PENDING

  \\"\\"\\"Status is successful.\\"\\"\\"
  SUCCESS
}

\\"\\"\\"Autogenerated input type of SubmitPullRequestReview\\"\\"\\"
input GithubSubmitPullRequestReviewInput {
  \\"\\"\\"The text field to set on the Pull Request Review.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The event to send to the Pull Request Review.\\"\\"\\"
  event: GithubPullRequestReviewEvent!

  \\"\\"\\"The Pull Request ID to submit any pending reviews.\\"\\"\\"
  pullRequestId: ID

  \\"\\"\\"The Pull Request Review ID to submit.\\"\\"\\"
  pullRequestReviewId: ID
}

\\"\\"\\"Autogenerated return type of SubmitPullRequestReview\\"\\"\\"
type GithubSubmitPullRequestReviewPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The submitted pull request review.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview
}

\\"\\"\\"
A pointer to a repository at a specific revision embedded inside another repository.
\\"\\"\\"
type GithubSubmodule {
  \\"\\"\\"The branch of the upstream submodule for tracking updates\\"\\"\\"
  branch: String

  \\"\\"\\"The git URL of the submodule repository\\"\\"\\"
  gitUrl: GithubURI!

  \\"\\"\\"The name of the submodule in .gitmodules\\"\\"\\"
  name: String!

  \\"\\"\\"The path in the superproject that this submodule is located in\\"\\"\\"
  path: String!

  \\"\\"\\"
  The commit revision of the subproject repository being tracked by the submodule
  \\"\\"\\"
  subprojectCommitOid: GithubGitObjectID
}

\\"\\"\\"The connection type for Submodule.\\"\\"\\"
type GithubSubmoduleConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubSubmoduleEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubSubmodule]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubSubmoduleEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubSubmodule
}

\\"\\"\\"Entities that can be subscribed to for web and email notifications.\\"\\"\\"
interface GithubSubscribable {
  id: ID!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState
}

\\"\\"\\"Represents a 'subscribed' event on a given \`Subscribable\`.\\"\\"\\"
type GithubSubscribedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Object referenced by event.\\"\\"\\"
  subscribable: GithubSubscribable!
}

\\"\\"\\"The possible states of a subscription.\\"\\"\\"
enum GithubSubscriptionState {
  \\"\\"\\"The User is never notified.\\"\\"\\"
  IGNORED

  \\"\\"\\"The User is notified of all conversations.\\"\\"\\"
  SUBSCRIBED

  \\"\\"\\"The User is only notified when participating or @mentioned.\\"\\"\\"
  UNSUBSCRIBED
}

\\"\\"\\"
A suggestion to review a pull request based on a user's commit history and review comments.
\\"\\"\\"
type GithubSuggestedReviewer {
  \\"\\"\\"Is this suggestion based on past commits?\\"\\"\\"
  isAuthor: Boolean!

  \\"\\"\\"Is this suggestion based on past review comments?\\"\\"\\"
  isCommenter: Boolean!

  \\"\\"\\"Identifies the user suggested to review the pull request.\\"\\"\\"
  reviewer: GithubUser!
}

\\"\\"\\"Represents a Git tag.\\"\\"\\"
type GithubTag implements GithubGitObject & GithubNode {
  \\"\\"\\"An abbreviated version of the Git object ID\\"\\"\\"
  abbreviatedOid: String!

  \\"\\"\\"The HTTP path for this Git object\\"\\"\\"
  commitResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this Git object\\"\\"\\"
  commitUrl: GithubURI!
  id: ID!

  \\"\\"\\"The Git tag message.\\"\\"\\"
  message: String

  \\"\\"\\"The Git tag name.\\"\\"\\"
  name: String!

  \\"\\"\\"The Git object ID\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The Repository the Git object belongs to\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"Details about the tag author.\\"\\"\\"
  tagger: GithubGitActor

  \\"\\"\\"The Git object the tag points to.\\"\\"\\"
  target: GithubGitObject!
}

\\"\\"\\"A team of users in an organization.\\"\\"\\"
type GithubTeam implements GithubMemberStatusable & GithubNode & GithubSubscribable {
  \\"\\"\\"A list of teams that are ancestors of this team.\\"\\"\\"
  ancestors(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubTeamConnection!

  \\"\\"\\"A URL pointing to the team's avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size in pixels of the resulting square image.\\"\\"\\"
    size: Int = 400
  ): GithubURI

  \\"\\"\\"List of child teams belonging to this team\\"\\"\\"
  childTeams(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Whether to list immediate child teams or all descendant child teams.\\"\\"\\"
    immediateOnly: Boolean = true

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubTeamOrder

    \\"\\"\\"User logins to filter by\\"\\"\\"
    userLogins: [String!]
  ): GithubTeamConnection!

  \\"\\"\\"The slug corresponding to the organization and team.\\"\\"\\"
  combinedSlug: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The description of the team.\\"\\"\\"
  description: String

  \\"\\"\\"Find a team discussion by its number.\\"\\"\\"
  discussion(
    \\"\\"\\"The sequence number of the discussion to find.\\"\\"\\"
    number: Int!
  ): GithubTeamDiscussion

  \\"\\"\\"A list of team discussions.\\"\\"\\"
  discussions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"
    If provided, filters discussions according to whether or not they are pinned.
    \\"\\"\\"
    isPinned: Boolean

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubTeamDiscussionOrder
  ): GithubTeamDiscussionConnection!

  \\"\\"\\"The HTTP path for team discussions\\"\\"\\"
  discussionsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for team discussions\\"\\"\\"
  discussionsUrl: GithubURI!

  \\"\\"\\"The HTTP path for editing this team\\"\\"\\"
  editTeamResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for editing this team\\"\\"\\"
  editTeamUrl: GithubURI!
  id: ID!

  \\"\\"\\"A list of pending invitations for users to this team\\"\\"\\"
  invitations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubOrganizationInvitationConnection

  \\"\\"\\"
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  \\"\\"\\"
  memberStatuses(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for user statuses returned from the connection.\\"\\"\\"
    orderBy: GithubUserStatusOrder = {direction: DESC, field: UPDATED_AT}
  ): GithubUserStatusConnection!

  \\"\\"\\"A list of users who are members of this team.\\"\\"\\"
  members(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter by membership type\\"\\"\\"
    membership: GithubTeamMembershipType = ALL

    \\"\\"\\"Order for the connection.\\"\\"\\"
    orderBy: GithubTeamMemberOrder

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String

    \\"\\"\\"Filter by team member role\\"\\"\\"
    role: GithubTeamMemberRole
  ): GithubTeamMemberConnection!

  \\"\\"\\"The HTTP path for the team' members\\"\\"\\"
  membersResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for the team' members\\"\\"\\"
  membersUrl: GithubURI!

  \\"\\"\\"The name of the team.\\"\\"\\"
  name: String!

  \\"\\"\\"The HTTP path creating a new team\\"\\"\\"
  newTeamResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL creating a new team\\"\\"\\"
  newTeamUrl: GithubURI!

  \\"\\"\\"The organization that owns this team.\\"\\"\\"
  organization: GithubOrganization!

  \\"\\"\\"The parent team of the team.\\"\\"\\"
  parentTeam: GithubTeam

  \\"\\"\\"The level of privacy the team has.\\"\\"\\"
  privacy: GithubTeamPrivacy!

  \\"\\"\\"A list of repositories this team has access to.\\"\\"\\"
  repositories(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for the connection.\\"\\"\\"
    orderBy: GithubTeamRepositoryOrder

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String
  ): GithubTeamRepositoryConnection!

  \\"\\"\\"The HTTP path for this team's repositories\\"\\"\\"
  repositoriesResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this team's repositories\\"\\"\\"
  repositoriesUrl: GithubURI!

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The slug corresponding to the team.\\"\\"\\"
  slug: String!

  \\"\\"\\"The HTTP path for this team's teams\\"\\"\\"
  teamsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this team's teams\\"\\"\\"
  teamsUrl: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"Team is adminable by the viewer.\\"\\"\\"
  viewerCanAdminister: Boolean!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState
}

\\"\\"\\"Audit log entry for a team.add_member event.\\"\\"\\"
type GithubTeamAddMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubTeamAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"Whether the team was mapped to an LDAP Group.\\"\\"\\"
  isLdapMapped: Boolean

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The team associated with the action\\"\\"\\"
  team: GithubTeam

  \\"\\"\\"The name of the team\\"\\"\\"
  teamName: String

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  teamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  teamUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a team.add_repository event.\\"\\"\\"
type GithubTeamAddRepositoryAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData & GithubTeamAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"Whether the team was mapped to an LDAP Group.\\"\\"\\"
  isLdapMapped: Boolean

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The team associated with the action\\"\\"\\"
  team: GithubTeam

  \\"\\"\\"The name of the team\\"\\"\\"
  teamName: String

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  teamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  teamUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Metadata for an audit entry with action team.*\\"\\"\\"
interface GithubTeamAuditEntryData {
  \\"\\"\\"The team associated with the action\\"\\"\\"
  team: GithubTeam

  \\"\\"\\"The name of the team\\"\\"\\"
  teamName: String

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  teamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  teamUrl: GithubURI
}

\\"\\"\\"Audit log entry for a team.change_parent_team event.\\"\\"\\"
type GithubTeamChangeParentTeamAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubTeamAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"Whether the team was mapped to an LDAP Group.\\"\\"\\"
  isLdapMapped: Boolean

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The new parent team.\\"\\"\\"
  parentTeam: GithubTeam

  \\"\\"\\"The name of the new parent team\\"\\"\\"
  parentTeamName: String

  \\"\\"\\"The name of the former parent team\\"\\"\\"
  parentTeamNameWas: String

  \\"\\"\\"The HTTP path for the parent team\\"\\"\\"
  parentTeamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the parent team\\"\\"\\"
  parentTeamUrl: GithubURI

  \\"\\"\\"The former parent team.\\"\\"\\"
  parentTeamWas: GithubTeam

  \\"\\"\\"The HTTP path for the previous parent team\\"\\"\\"
  parentTeamWasResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the previous parent team\\"\\"\\"
  parentTeamWasUrl: GithubURI

  \\"\\"\\"The team associated with the action\\"\\"\\"
  team: GithubTeam

  \\"\\"\\"The name of the team\\"\\"\\"
  teamName: String

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  teamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  teamUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The connection type for Team.\\"\\"\\"
type GithubTeamConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubTeamEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubTeam]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A team discussion.\\"\\"\\"
type GithubTeamDiscussion implements GithubComment & GithubDeletable & GithubNode & GithubReactable & GithubSubscribable & GithubUniformResourceLocatable & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the discussion's team.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"The body as Markdown.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"Identifies the discussion body hash.\\"\\"\\"
  bodyVersion: String!

  \\"\\"\\"A list of comments on this discussion.\\"\\"\\"
  comments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"
    When provided, filters the connection such that results begin with the comment with this number.
    \\"\\"\\"
    fromComment: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubTeamDiscussionCommentOrder
  ): GithubTeamDiscussionCommentConnection!

  \\"\\"\\"The HTTP path for discussion comments\\"\\"\\"
  commentsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for discussion comments\\"\\"\\"
  commentsUrl: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"Whether or not the discussion is pinned.\\"\\"\\"
  isPinned: Boolean!

  \\"\\"\\"
  Whether or not the discussion is only visible to team members and org admins.
  \\"\\"\\"
  isPrivate: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Identifies the discussion within its team.\\"\\"\\"
  number: Int!

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The HTTP path for this discussion\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The team that defines the context of this discussion.\\"\\"\\"
  team: GithubTeam!

  \\"\\"\\"The title of the discussion\\"\\"\\"
  title: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this discussion\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Whether or not the current viewer can pin this discussion.\\"\\"\\"
  viewerCanPin: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"
  Check if the viewer is able to change their subscription status for the repository.
  \\"\\"\\"
  viewerCanSubscribe: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!

  \\"\\"\\"
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  \\"\\"\\"
  viewerSubscription: GithubSubscriptionState
}

\\"\\"\\"A comment on a team discussion.\\"\\"\\"
type GithubTeamDiscussionComment implements GithubComment & GithubDeletable & GithubNode & GithubReactable & GithubUniformResourceLocatable & GithubUpdatable & GithubUpdatableComment {
  \\"\\"\\"The actor who authored the comment.\\"\\"\\"
  author: GithubActor

  \\"\\"\\"Author's association with the comment's team.\\"\\"\\"
  authorAssociation: GithubCommentAuthorAssociation!

  \\"\\"\\"The body as Markdown.\\"\\"\\"
  body: String!

  \\"\\"\\"The body rendered to HTML.\\"\\"\\"
  bodyHTML: GithubHTML!

  \\"\\"\\"The body rendered to text.\\"\\"\\"
  bodyText: String!

  \\"\\"\\"The current version of the body content.\\"\\"\\"
  bodyVersion: String!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Check if this comment was created via an email reply.\\"\\"\\"
  createdViaEmail: Boolean!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The discussion this comment is about.\\"\\"\\"
  discussion: GithubTeamDiscussion!

  \\"\\"\\"The actor who edited the comment.\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"
  Check if this comment was edited and includes an edit with the creation data
  \\"\\"\\"
  includesCreatedEdit: Boolean!

  \\"\\"\\"The moment the editor made the last edit\\"\\"\\"
  lastEditedAt: GithubDateTime

  \\"\\"\\"Identifies the comment number.\\"\\"\\"
  number: Int!

  \\"\\"\\"Identifies when the comment was published at.\\"\\"\\"
  publishedAt: GithubDateTime

  \\"\\"\\"A list of reactions grouped by content left on the subject.\\"\\"\\"
  reactionGroups: [GithubReactionGroup!]

  \\"\\"\\"A list of Reactions left on the Issue.\\"\\"\\"
  reactions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Allows filtering Reactions by emoji.\\"\\"\\"
    content: GithubReactionContent

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Allows specifying the order in which reactions are returned.\\"\\"\\"
    orderBy: GithubReactionOrder
  ): GithubReactionConnection!

  \\"\\"\\"The HTTP path for this comment\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this comment\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"A list of edits to this content.\\"\\"\\"
  userContentEdits(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubUserContentEditConnection

  \\"\\"\\"Check if the current viewer can delete this object.\\"\\"\\"
  viewerCanDelete: Boolean!

  \\"\\"\\"Can user react to this subject\\"\\"\\"
  viewerCanReact: Boolean!

  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!

  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!

  \\"\\"\\"Did the viewer author this comment.\\"\\"\\"
  viewerDidAuthor: Boolean!
}

\\"\\"\\"The connection type for TeamDiscussionComment.\\"\\"\\"
type GithubTeamDiscussionCommentConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubTeamDiscussionCommentEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubTeamDiscussionComment]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubTeamDiscussionCommentEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubTeamDiscussionComment
}

\\"\\"\\"Ways in which team discussion comment connections can be ordered.\\"\\"\\"
input GithubTeamDiscussionCommentOrder {
  \\"\\"\\"The direction in which to order nodes.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field by which to order nodes.\\"\\"\\"
  field: GithubTeamDiscussionCommentOrderField!
}

\\"\\"\\"
Properties by which team discussion comment connections can be ordered.
\\"\\"\\"
enum GithubTeamDiscussionCommentOrderField {
  \\"\\"\\"
  Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
  \\"\\"\\"
  NUMBER
}

\\"\\"\\"The connection type for TeamDiscussion.\\"\\"\\"
type GithubTeamDiscussionConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubTeamDiscussionEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubTeamDiscussion]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubTeamDiscussionEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubTeamDiscussion
}

\\"\\"\\"Ways in which team discussion connections can be ordered.\\"\\"\\"
input GithubTeamDiscussionOrder {
  \\"\\"\\"The direction in which to order nodes.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field by which to order nodes.\\"\\"\\"
  field: GithubTeamDiscussionOrderField!
}

\\"\\"\\"Properties by which team discussion connections can be ordered.\\"\\"\\"
enum GithubTeamDiscussionOrderField {
  \\"\\"\\"Allows chronological ordering of team discussions.\\"\\"\\"
  CREATED_AT
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubTeamEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubTeam
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubTeamMemberConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubTeamMemberEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a user who is a member of a team.\\"\\"\\"
type GithubTeamMemberEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The HTTP path to the organization's member access page.\\"\\"\\"
  memberAccessResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL to the organization's member access page.\\"\\"\\"
  memberAccessUrl: GithubURI!
  node: GithubUser!

  \\"\\"\\"The role the member has on the team.\\"\\"\\"
  role: GithubTeamMemberRole!
}

\\"\\"\\"Ordering options for team member connections\\"\\"\\"
input GithubTeamMemberOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order team members by.\\"\\"\\"
  field: GithubTeamMemberOrderField!
}

\\"\\"\\"Properties by which team member connections can be ordered.\\"\\"\\"
enum GithubTeamMemberOrderField {
  \\"\\"\\"Order team members by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order team members by login\\"\\"\\"
  LOGIN
}

\\"\\"\\"The possible team member roles; either 'maintainer' or 'member'.\\"\\"\\"
enum GithubTeamMemberRole {
  \\"\\"\\"A team maintainer has permission to add and remove team members.\\"\\"\\"
  MAINTAINER

  \\"\\"\\"A team member has no administrative permissions on the team.\\"\\"\\"
  MEMBER
}

\\"\\"\\"
Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
\\"\\"\\"
enum GithubTeamMembershipType {
  \\"\\"\\"Includes immediate and child team members for the team.\\"\\"\\"
  ALL

  \\"\\"\\"Includes only child team members for the team.\\"\\"\\"
  CHILD_TEAM

  \\"\\"\\"Includes only immediate members of the team.\\"\\"\\"
  IMMEDIATE
}

\\"\\"\\"Ways in which team connections can be ordered.\\"\\"\\"
input GithubTeamOrder {
  \\"\\"\\"The direction in which to order nodes.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field in which to order nodes by.\\"\\"\\"
  field: GithubTeamOrderField!
}

\\"\\"\\"Properties by which team connections can be ordered.\\"\\"\\"
enum GithubTeamOrderField {
  \\"\\"\\"Allows ordering a list of teams by name.\\"\\"\\"
  NAME
}

\\"\\"\\"The possible team privacy values.\\"\\"\\"
enum GithubTeamPrivacy {
  \\"\\"\\"A secret team can only be seen by its members.\\"\\"\\"
  SECRET

  \\"\\"\\"
  A visible team can be seen and @mentioned by every member of the organization.
  \\"\\"\\"
  VISIBLE
}

\\"\\"\\"Audit log entry for a team.remove_member event.\\"\\"\\"
type GithubTeamRemoveMemberAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubTeamAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"Whether the team was mapped to an LDAP Group.\\"\\"\\"
  isLdapMapped: Boolean

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The team associated with the action\\"\\"\\"
  team: GithubTeam

  \\"\\"\\"The name of the team\\"\\"\\"
  teamName: String

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  teamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  teamUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"Audit log entry for a team.remove_repository event.\\"\\"\\"
type GithubTeamRemoveRepositoryAuditEntry implements GithubAuditEntry & GithubNode & GithubOrganizationAuditEntryData & GithubRepositoryAuditEntryData & GithubTeamAuditEntryData {
  \\"\\"\\"The action name\\"\\"\\"
  action: String!

  \\"\\"\\"The user who initiated the action\\"\\"\\"
  actor: GithubAuditEntryActor

  \\"\\"\\"The IP address of the actor\\"\\"\\"
  actorIp: String

  \\"\\"\\"A readable representation of the actor's location\\"\\"\\"
  actorLocation: GithubActorLocation

  \\"\\"\\"The username of the user who initiated the action\\"\\"\\"
  actorLogin: String

  \\"\\"\\"The HTTP path for the actor.\\"\\"\\"
  actorResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the actor.\\"\\"\\"
  actorUrl: GithubURI

  \\"\\"\\"The time the action was initiated\\"\\"\\"
  createdAt: GithubPreciseDateTime!
  id: ID!

  \\"\\"\\"Whether the team was mapped to an LDAP Group.\\"\\"\\"
  isLdapMapped: Boolean

  \\"\\"\\"The corresponding operation type for the action\\"\\"\\"
  operationType: GithubOperationType

  \\"\\"\\"The Organization associated with the Audit Entry.\\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"The name of the Organization.\\"\\"\\"
  organizationName: String

  \\"\\"\\"The HTTP path for the organization\\"\\"\\"
  organizationResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the organization\\"\\"\\"
  organizationUrl: GithubURI

  \\"\\"\\"The repository associated with the action\\"\\"\\"
  repository: GithubRepository

  \\"\\"\\"The name of the repository\\"\\"\\"
  repositoryName: String

  \\"\\"\\"The HTTP path for the repository\\"\\"\\"
  repositoryResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the repository\\"\\"\\"
  repositoryUrl: GithubURI

  \\"\\"\\"The team associated with the action\\"\\"\\"
  team: GithubTeam

  \\"\\"\\"The name of the team\\"\\"\\"
  teamName: String

  \\"\\"\\"The HTTP path for this team\\"\\"\\"
  teamResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for this team\\"\\"\\"
  teamUrl: GithubURI

  \\"\\"\\"The user affected by the action\\"\\"\\"
  user: GithubUser

  \\"\\"\\"
  For actions involving two users, the actor is the initiator and the user is the affected user.
  \\"\\"\\"
  userLogin: String

  \\"\\"\\"The HTTP path for the user.\\"\\"\\"
  userResourcePath: GithubURI

  \\"\\"\\"The HTTP URL for the user.\\"\\"\\"
  userUrl: GithubURI
}

\\"\\"\\"The connection type for Repository.\\"\\"\\"
type GithubTeamRepositoryConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubTeamRepositoryEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubRepository]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"Represents a team repository.\\"\\"\\"
type GithubTeamRepositoryEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!
  node: GithubRepository!

  \\"\\"\\"The permission level the team has on the repository\\"\\"\\"
  permission: GithubRepositoryPermission!
}

\\"\\"\\"Ordering options for team repository connections\\"\\"\\"
input GithubTeamRepositoryOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order repositories by.\\"\\"\\"
  field: GithubTeamRepositoryOrderField!
}

\\"\\"\\"Properties by which team repository connections can be ordered.\\"\\"\\"
enum GithubTeamRepositoryOrderField {
  \\"\\"\\"Order repositories by creation time\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order repositories by name\\"\\"\\"
  NAME

  \\"\\"\\"Order repositories by permission\\"\\"\\"
  PERMISSION

  \\"\\"\\"Order repositories by push time\\"\\"\\"
  PUSHED_AT

  \\"\\"\\"Order repositories by number of stargazers\\"\\"\\"
  STARGAZERS

  \\"\\"\\"Order repositories by update time\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"The role of a user on a team.\\"\\"\\"
enum GithubTeamRole {
  \\"\\"\\"User has admin rights on the team.\\"\\"\\"
  ADMIN

  \\"\\"\\"User is a member of the team.\\"\\"\\"
  MEMBER
}

\\"\\"\\"A text match within a search result.\\"\\"\\"
type GithubTextMatch {
  \\"\\"\\"The specific text fragment within the property matched on.\\"\\"\\"
  fragment: String!

  \\"\\"\\"Highlights within the matched fragment.\\"\\"\\"
  highlights: [GithubTextMatchHighlight!]!

  \\"\\"\\"The property matched on.\\"\\"\\"
  property: String!
}

\\"\\"\\"Represents a single highlight in a search result match.\\"\\"\\"
type GithubTextMatchHighlight {
  \\"\\"\\"The indice in the fragment where the matched text begins.\\"\\"\\"
  beginIndice: Int!

  \\"\\"\\"The indice in the fragment where the matched text ends.\\"\\"\\"
  endIndice: Int!

  \\"\\"\\"The text matched.\\"\\"\\"
  text: String!
}

\\"\\"\\"A topic aggregates entities that are related to a subject.\\"\\"\\"
type GithubTopic implements GithubNode & GithubStarrable {
  id: ID!

  \\"\\"\\"The topic's name.\\"\\"\\"
  name: String!

  \\"\\"\\"
  A list of related topics, including aliases of this topic, sorted with the most relevant
  first. Returns up to 10 Topics.
  
  \\"\\"\\"
  relatedTopics(
    \\"\\"\\"How many topics to return.\\"\\"\\"
    first: Int = 3
  ): [GithubTopic!]!

  \\"\\"\\"
  Returns a count of how many stargazers there are on this object
  
  \\"\\"\\"
  stargazerCount: Int!

  \\"\\"\\"A list of users who have starred this starrable.\\"\\"\\"
  stargazers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubStarOrder
  ): GithubStargazerConnection!

  \\"\\"\\"
  Returns a boolean indicating whether the viewing user has starred this starrable.
  \\"\\"\\"
  viewerHasStarred: Boolean!
}

\\"\\"\\"Metadata for an audit entry with a topic.\\"\\"\\"
interface GithubTopicAuditEntryData {
  \\"\\"\\"The name of the topic added to the repository\\"\\"\\"
  topic: GithubTopic

  \\"\\"\\"The name of the topic added to the repository\\"\\"\\"
  topicName: String
}

\\"\\"\\"Reason that the suggested topic is declined.\\"\\"\\"
enum GithubTopicSuggestionDeclineReason {
  \\"\\"\\"The suggested topic is not relevant to the repository.\\"\\"\\"
  NOT_RELEVANT

  \\"\\"\\"The viewer does not like the suggested topic.\\"\\"\\"
  PERSONAL_PREFERENCE

  \\"\\"\\"The suggested topic is too general for the repository.\\"\\"\\"
  TOO_GENERAL

  \\"\\"\\"
  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  \\"\\"\\"
  TOO_SPECIFIC
}

\\"\\"\\"Autogenerated input type of TransferIssue\\"\\"\\"
input GithubTransferIssueInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the issue to be transferred\\"\\"\\"
  issueId: ID!

  \\"\\"\\"The Node ID of the repository the issue should be transferred to\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of TransferIssue\\"\\"\\"
type GithubTransferIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The issue that was transferred\\"\\"\\"
  issue: GithubIssue
}

\\"\\"\\"Represents a 'transferred' event on a given issue or pull request.\\"\\"\\"
type GithubTransferredEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"The repository this came from\\"\\"\\"
  fromRepository: GithubRepository
  id: ID!

  \\"\\"\\"Identifies the issue associated with the event.\\"\\"\\"
  issue: GithubIssue!
}

\\"\\"\\"Represents a Git tree.\\"\\"\\"
type GithubTree implements GithubGitObject & GithubNode {
  \\"\\"\\"An abbreviated version of the Git object ID\\"\\"\\"
  abbreviatedOid: String!

  \\"\\"\\"The HTTP path for this Git object\\"\\"\\"
  commitResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL for this Git object\\"\\"\\"
  commitUrl: GithubURI!

  \\"\\"\\"A list of tree entries.\\"\\"\\"
  entries: [GithubTreeEntry!]
  id: ID!

  \\"\\"\\"The Git object ID\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The Repository the Git object belongs to\\"\\"\\"
  repository: GithubRepository!
}

\\"\\"\\"Represents a Git tree entry.\\"\\"\\"
type GithubTreeEntry {
  \\"\\"\\"The extension of the file\\"\\"\\"
  extension: String

  \\"\\"\\"Whether or not this tree entry is generated\\"\\"\\"
  isGenerated: Boolean!

  \\"\\"\\"Entry file mode.\\"\\"\\"
  mode: Int!

  \\"\\"\\"Entry file name.\\"\\"\\"
  name: String!

  \\"\\"\\"Entry file object.\\"\\"\\"
  object: GithubGitObject

  \\"\\"\\"Entry file Git object ID.\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The full path of the file.\\"\\"\\"
  path: String

  \\"\\"\\"The Repository the tree entry belongs to\\"\\"\\"
  repository: GithubRepository!

  \\"\\"\\"
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  \\"\\"\\"
  submodule: GithubSubmodule

  \\"\\"\\"Entry file type.\\"\\"\\"
  type: String!
}

\\"\\"\\"An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.\\"\\"\\"
scalar GithubURI

\\"\\"\\"Autogenerated input type of UnarchiveRepository\\"\\"\\"
input GithubUnarchiveRepositoryInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the repository to unarchive.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of UnarchiveRepository\\"\\"\\"
type GithubUnarchiveRepositoryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The repository that was unarchived.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Represents an 'unassigned' event on any assignable object.\\"\\"\\"
type GithubUnassignedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the assignable associated with the event.\\"\\"\\"
  assignable: GithubAssignable!

  \\"\\"\\"Identifies the user or mannequin that was unassigned.\\"\\"\\"
  assignee: GithubAssignee

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the subject (user) who was unassigned.\\"\\"\\"
  user: GithubUser @deprecated(reason: \\"Assignees can now be mannequins. Use the \`assignee\` field instead. Removal on 2020-01-01 UTC.\\")
}

\\"\\"\\"Autogenerated input type of UnfollowUser\\"\\"\\"
input GithubUnfollowUserInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the user to unfollow.\\"\\"\\"
  userId: ID!
}

\\"\\"\\"Autogenerated return type of UnfollowUser\\"\\"\\"
type GithubUnfollowUserPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The user that was unfollowed.\\"\\"\\"
  user: GithubUser
}

\\"\\"\\"Represents a type that can be retrieved by a URL.\\"\\"\\"
interface GithubUniformResourceLocatable {
  \\"\\"\\"The HTML path to this resource.\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"The URL to this resource.\\"\\"\\"
  url: GithubURI!
}

\\"\\"\\"Represents an unknown signature on a Commit or Tag.\\"\\"\\"
type GithubUnknownSignature implements GithubGitSignature {
  \\"\\"\\"Email used to sign this object.\\"\\"\\"
  email: String!

  \\"\\"\\"True if the signature is valid and verified by GitHub.\\"\\"\\"
  isValid: Boolean!

  \\"\\"\\"
  Payload for GPG signing object. Raw ODB object without the signature header.
  \\"\\"\\"
  payload: String!

  \\"\\"\\"ASCII-armored signature header from object.\\"\\"\\"
  signature: String!

  \\"\\"\\"GitHub user corresponding to the email signing this commit.\\"\\"\\"
  signer: GithubUser

  \\"\\"\\"
  The state of this signature. \`VALID\` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  \\"\\"\\"
  state: GithubGitSignatureState!

  \\"\\"\\"True if the signature was made with GitHub's signing key.\\"\\"\\"
  wasSignedByGitHub: Boolean!
}

\\"\\"\\"Represents an 'unlabeled' event on a given issue or pull request.\\"\\"\\"
type GithubUnlabeledEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the label associated with the 'unlabeled' event.\\"\\"\\"
  label: GithubLabel!

  \\"\\"\\"Identifies the \`Labelable\` associated with the event.\\"\\"\\"
  labelable: GithubLabelable!
}

\\"\\"\\"Autogenerated input type of UnlinkRepositoryFromProject\\"\\"\\"
input GithubUnlinkRepositoryFromProjectInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the Project linked to the Repository.\\"\\"\\"
  projectId: ID!

  \\"\\"\\"The ID of the Repository linked to the Project.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of UnlinkRepositoryFromProject\\"\\"\\"
type GithubUnlinkRepositoryFromProjectPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The linked Project.\\"\\"\\"
  project: GithubProject

  \\"\\"\\"The linked Repository.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Autogenerated input type of UnlockLockable\\"\\"\\"
input GithubUnlockLockableInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the item to be unlocked.\\"\\"\\"
  lockableId: ID!
}

\\"\\"\\"Autogenerated return type of UnlockLockable\\"\\"\\"
type GithubUnlockLockablePayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The item that was unlocked.\\"\\"\\"
  unlockedRecord: GithubLockable
}

\\"\\"\\"Represents an 'unlocked' event on a given issue or pull request.\\"\\"\\"
type GithubUnlockedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Object that was unlocked.\\"\\"\\"
  lockable: GithubLockable!
}

\\"\\"\\"Autogenerated input type of UnmarkDiscussionCommentAsAnswer\\"\\"\\"
input GithubUnmarkDiscussionCommentAsAnswerInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion comment to unmark as an answer.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of UnmarkDiscussionCommentAsAnswer\\"\\"\\"
type GithubUnmarkDiscussionCommentAsAnswerPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The discussion that includes the comment.\\"\\"\\"
  discussion: GithubDiscussion
}

\\"\\"\\"Autogenerated input type of UnmarkFileAsViewed\\"\\"\\"
input GithubUnmarkFileAsViewedInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The path of the file to mark as unviewed\\"\\"\\"
  path: String!

  \\"\\"\\"The Node ID of the pull request.\\"\\"\\"
  pullRequestId: ID!
}

\\"\\"\\"Autogenerated return type of UnmarkFileAsViewed\\"\\"\\"
type GithubUnmarkFileAsViewedPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated pull request.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Autogenerated input type of UnmarkIssueAsDuplicate\\"\\"\\"
input GithubUnmarkIssueAsDuplicateInput {
  \\"\\"\\"
  ID of the issue or pull request currently considered canonical/authoritative/original.
  \\"\\"\\"
  canonicalId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"ID of the issue or pull request currently marked as a duplicate.\\"\\"\\"
  duplicateId: ID!
}

\\"\\"\\"Autogenerated return type of UnmarkIssueAsDuplicate\\"\\"\\"
type GithubUnmarkIssueAsDuplicatePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The issue or pull request that was marked as a duplicate.\\"\\"\\"
  duplicate: GithubIssueOrPullRequest
}

\\"\\"\\"
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
\\"\\"\\"
type GithubUnmarkedAsDuplicateEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"
  The authoritative issue or pull request which has been duplicated by another.
  \\"\\"\\"
  canonical: GithubIssueOrPullRequest

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"
  The issue or pull request which has been marked as a duplicate of another.
  \\"\\"\\"
  duplicate: GithubIssueOrPullRequest
  id: ID!

  \\"\\"\\"Canonical and duplicate belong to different repositories.\\"\\"\\"
  isCrossRepository: Boolean!
}

\\"\\"\\"Autogenerated input type of UnminimizeComment\\"\\"\\"
input GithubUnminimizeCommentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the subject to modify.\\"\\"\\"
  subjectId: ID!
}

\\"\\"\\"Autogenerated return type of UnminimizeComment\\"\\"\\"
type GithubUnminimizeCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The comment that was unminimized.\\"\\"\\"
  unminimizedComment: GithubMinimizable
}

\\"\\"\\"Autogenerated input type of UnpinIssue\\"\\"\\"
input GithubUnpinIssueInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the issue to be unpinned\\"\\"\\"
  issueId: ID!
}

\\"\\"\\"Autogenerated return type of UnpinIssue\\"\\"\\"
type GithubUnpinIssuePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The issue that was unpinned\\"\\"\\"
  issue: GithubIssue
}

\\"\\"\\"Represents an 'unpinned' event on a given issue or pull request.\\"\\"\\"
type GithubUnpinnedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Identifies the issue associated with the event.\\"\\"\\"
  issue: GithubIssue!
}

\\"\\"\\"Autogenerated input type of UnresolveReviewThread\\"\\"\\"
input GithubUnresolveReviewThreadInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the thread to unresolve\\"\\"\\"
  threadId: ID!
}

\\"\\"\\"Autogenerated return type of UnresolveReviewThread\\"\\"\\"
type GithubUnresolveReviewThreadPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The thread to resolve.\\"\\"\\"
  thread: GithubPullRequestReviewThread
}

\\"\\"\\"Represents an 'unsubscribed' event on a given \`Subscribable\`.\\"\\"\\"
type GithubUnsubscribedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"Object referenced by event.\\"\\"\\"
  subscribable: GithubSubscribable!
}

\\"\\"\\"Entities that can be updated.\\"\\"\\"
interface GithubUpdatable {
  \\"\\"\\"Check if the current viewer can update this object.\\"\\"\\"
  viewerCanUpdate: Boolean!
}

\\"\\"\\"Comments that can be updated.\\"\\"\\"
interface GithubUpdatableComment {
  \\"\\"\\"Reasons why the current viewer can not update this comment.\\"\\"\\"
  viewerCannotUpdateReasons: [GithubCommentCannotUpdateReason!]!
}

\\"\\"\\"Autogenerated input type of UpdateBranchProtectionRule\\"\\"\\"
input GithubUpdateBranchProtectionRuleInput {
  \\"\\"\\"Can this branch be deleted.\\"\\"\\"
  allowsDeletions: Boolean

  \\"\\"\\"Are force pushes allowed on this branch.\\"\\"\\"
  allowsForcePushes: Boolean

  \\"\\"\\"The global relay id of the branch protection rule to be updated.\\"\\"\\"
  branchProtectionRuleId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  Will new commits pushed to matching branches dismiss pull request review approvals.
  \\"\\"\\"
  dismissesStaleReviews: Boolean

  \\"\\"\\"Can admins overwrite branch protection.\\"\\"\\"
  isAdminEnforced: Boolean

  \\"\\"\\"The glob-like pattern used to determine matching branches.\\"\\"\\"
  pattern: String

  \\"\\"\\"A list of User, Team or App IDs allowed to push to matching branches.\\"\\"\\"
  pushActorIds: [ID!]

  \\"\\"\\"Number of approving reviews required to update matching branches.\\"\\"\\"
  requiredApprovingReviewCount: Int

  \\"\\"\\"
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  \\"\\"\\"
  requiredStatusCheckContexts: [String!]

  \\"\\"\\"Are approving reviews required to update matching branches.\\"\\"\\"
  requiresApprovingReviews: Boolean

  \\"\\"\\"Are reviews from code owners required to update matching branches.\\"\\"\\"
  requiresCodeOwnerReviews: Boolean

  \\"\\"\\"Are commits required to be signed.\\"\\"\\"
  requiresCommitSignatures: Boolean

  \\"\\"\\"Are merge commits prohibited from being pushed to this branch.\\"\\"\\"
  requiresLinearHistory: Boolean

  \\"\\"\\"Are status checks required to update matching branches.\\"\\"\\"
  requiresStatusChecks: Boolean

  \\"\\"\\"Are branches required to be up to date before merging.\\"\\"\\"
  requiresStrictStatusChecks: Boolean

  \\"\\"\\"Is pushing to matching branches restricted.\\"\\"\\"
  restrictsPushes: Boolean

  \\"\\"\\"Is dismissal of pull request reviews restricted.\\"\\"\\"
  restrictsReviewDismissals: Boolean

  \\"\\"\\"
  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  \\"\\"\\"
  reviewDismissalActorIds: [ID!]
}

\\"\\"\\"Autogenerated return type of UpdateBranchProtectionRule\\"\\"\\"
type GithubUpdateBranchProtectionRulePayload {
  \\"\\"\\"The newly created BranchProtectionRule.\\"\\"\\"
  branchProtectionRule: GithubBranchProtectionRule

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of UpdateCheckRun\\"\\"\\"
input GithubUpdateCheckRunInput {
  \\"\\"\\"
  Possible further actions the integrator can perform, which a user may trigger.
  \\"\\"\\"
  actions: [GithubCheckRunAction!]

  \\"\\"\\"The node of the check.\\"\\"\\"
  checkRunId: ID!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The time that the check run finished.\\"\\"\\"
  completedAt: GithubDateTime

  \\"\\"\\"The final conclusion of the check.\\"\\"\\"
  conclusion: GithubCheckConclusionState

  \\"\\"\\"
  The URL of the integrator's site that has the full details of the check.
  \\"\\"\\"
  detailsUrl: GithubURI

  \\"\\"\\"A reference for the run on the integrator's system.\\"\\"\\"
  externalId: String

  \\"\\"\\"The name of the check.\\"\\"\\"
  name: String

  \\"\\"\\"Descriptive details about the run.\\"\\"\\"
  output: GithubCheckRunOutput

  \\"\\"\\"The node ID of the repository.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"The time that the check run began.\\"\\"\\"
  startedAt: GithubDateTime

  \\"\\"\\"The current status.\\"\\"\\"
  status: GithubRequestableCheckStatusState
}

\\"\\"\\"Autogenerated return type of UpdateCheckRun\\"\\"\\"
type GithubUpdateCheckRunPayload {
  \\"\\"\\"The updated check run.\\"\\"\\"
  checkRun: GithubCheckRun

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String
}

\\"\\"\\"Autogenerated input type of UpdateCheckSuitePreferences\\"\\"\\"
input GithubUpdateCheckSuitePreferencesInput {
  \\"\\"\\"The check suite preferences to modify.\\"\\"\\"
  autoTriggerPreferences: [GithubCheckSuiteAutoTriggerPreference!]!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!
}

\\"\\"\\"Autogenerated return type of UpdateCheckSuitePreferences\\"\\"\\"
type GithubUpdateCheckSuitePreferencesPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated repository.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Autogenerated input type of UpdateDiscussionComment\\"\\"\\"
input GithubUpdateDiscussionCommentInput {
  \\"\\"\\"The new contents of the comment body.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion comment to update.\\"\\"\\"
  commentId: ID!
}

\\"\\"\\"Autogenerated return type of UpdateDiscussionComment\\"\\"\\"
type GithubUpdateDiscussionCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The modified discussion comment.\\"\\"\\"
  comment: GithubDiscussionComment
}

\\"\\"\\"Autogenerated input type of UpdateDiscussion\\"\\"\\"
input GithubUpdateDiscussionInput {
  \\"\\"\\"The new contents of the discussion body.\\"\\"\\"
  body: String

  \\"\\"\\"
  The Node ID of a discussion category within the same repository to change this discussion to.
  \\"\\"\\"
  categoryId: ID

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion to update.\\"\\"\\"
  discussionId: ID!

  \\"\\"\\"The new discussion title.\\"\\"\\"
  title: String
}

\\"\\"\\"Autogenerated return type of UpdateDiscussion\\"\\"\\"
type GithubUpdateDiscussionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The modified discussion.\\"\\"\\"
  discussion: GithubDiscussion
}

\\"\\"\\"Autogenerated input type of UpdateEnterpriseAdministratorRole\\"\\"\\"
input GithubUpdateEnterpriseAdministratorRoleInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the Enterprise which the admin belongs to.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The login of a administrator whose role is being changed.\\"\\"\\"
  login: String!

  \\"\\"\\"The new role for the Enterprise administrator.\\"\\"\\"
  role: GithubEnterpriseAdministratorRole!
}

\\"\\"\\"Autogenerated return type of UpdateEnterpriseAdministratorRole\\"\\"\\"
type GithubUpdateEnterpriseAdministratorRolePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"A message confirming the result of changing the administrator's role.\\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
\\"\\"\\"
input GithubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the allow private repository forking setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the allow private repository forking setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
\\"\\"\\"
type GithubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated allow private repository forking setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the allow private repository forking setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
\\"\\"\\"
input GithubUpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the base repository permission setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the base repository permission setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseDefaultRepositoryPermissionSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
\\"\\"\\"
type GithubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The enterprise with the updated base repository permission setting.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the base repository permission setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can change repository visibility setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the members can change repository visibility setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated members can change repository visibility setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can change repository visibility setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can create repositories setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  Allow members to create internal repositories. Defaults to current value.
  \\"\\"\\"
  membersCanCreateInternalRepositories: Boolean

  \\"\\"\\"
  Allow members to create private repositories. Defaults to current value.
  \\"\\"\\"
  membersCanCreatePrivateRepositories: Boolean

  \\"\\"\\"
  Allow members to create public repositories. Defaults to current value.
  \\"\\"\\"
  membersCanCreatePublicRepositories: Boolean

  \\"\\"\\"
  When false, allow member organizations to set their own repository creation member privileges.
  \\"\\"\\"
  membersCanCreateRepositoriesPolicyEnabled: Boolean

  \\"\\"\\"
  Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
  \\"\\"\\"
  settingValue: GithubEnterpriseMembersCanCreateRepositoriesSettingValue
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated members can create repositories setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can create repositories setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can delete issues setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The value for the members can delete issues setting on the enterprise.\\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The enterprise with the updated members can delete issues setting.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can delete issues setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can delete repositories setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the members can delete repositories setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated members can delete repositories setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can delete repositories setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can invite collaborators setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the members can invite collaborators setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated members can invite collaborators setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can invite collaborators setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanMakePurchasesSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can make purchases setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the members can make purchases setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseMembersCanMakePurchasesSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The enterprise with the updated members can make purchases setting.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can make purchases setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can update protected branches setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the members can update protected branches setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated members can update protected branches setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can update protected branches setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
\\"\\"\\"
input GithubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the members can view dependency insights setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the members can view dependency insights setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
\\"\\"\\"
type GithubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated members can view dependency insights setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the members can view dependency insights setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
\\"\\"\\"
input GithubUpdateEnterpriseOrganizationProjectsSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the organization projects setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The value for the organization projects setting on the enterprise.\\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
\\"\\"\\"
type GithubUpdateEnterpriseOrganizationProjectsSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The enterprise with the updated organization projects setting.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the organization projects setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"Autogenerated input type of UpdateEnterpriseProfile\\"\\"\\"
input GithubUpdateEnterpriseProfileInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The description of the enterprise.\\"\\"\\"
  description: String

  \\"\\"\\"The Enterprise ID to update.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The location of the enterprise.\\"\\"\\"
  location: String

  \\"\\"\\"The name of the enterprise.\\"\\"\\"
  name: String

  \\"\\"\\"The URL of the enterprise's website.\\"\\"\\"
  websiteUrl: String
}

\\"\\"\\"Autogenerated return type of UpdateEnterpriseProfile\\"\\"\\"
type GithubUpdateEnterpriseProfilePayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated enterprise.\\"\\"\\"
  enterprise: GithubEnterprise
}

\\"\\"\\"Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting\\"\\"\\"
input GithubUpdateEnterpriseRepositoryProjectsSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the repository projects setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The value for the repository projects setting on the enterprise.\\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting\\"\\"\\"
type GithubUpdateEnterpriseRepositoryProjectsSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The enterprise with the updated repository projects setting.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the repository projects setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting\\"\\"\\"
input GithubUpdateEnterpriseTeamDiscussionsSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the enterprise on which to set the team discussions setting.\\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"The value for the team discussions setting on the enterprise.\\"\\"\\"
  settingValue: GithubEnterpriseEnabledDisabledSettingValue!
}

\\"\\"\\"Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting\\"\\"\\"
type GithubUpdateEnterpriseTeamDiscussionsSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The enterprise with the updated team discussions setting.\\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the team discussions setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"
Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
\\"\\"\\"
input GithubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the enterprise on which to set the two factor authentication required setting.
  \\"\\"\\"
  enterpriseId: ID!

  \\"\\"\\"
  The value for the two factor authentication required setting on the enterprise.
  \\"\\"\\"
  settingValue: GithubEnterpriseEnabledSettingValue!
}

\\"\\"\\"
Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
\\"\\"\\"
type GithubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The enterprise with the updated two factor authentication required setting.
  \\"\\"\\"
  enterprise: GithubEnterprise

  \\"\\"\\"
  A message confirming the result of updating the two factor authentication required setting.
  \\"\\"\\"
  message: String
}

\\"\\"\\"Autogenerated input type of UpdateEnvironment\\"\\"\\"
input GithubUpdateEnvironmentInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The node ID of the environment.\\"\\"\\"
  environmentId: ID!

  \\"\\"\\"
  The ids of users or teams that can approve deployments to this environment
  \\"\\"\\"
  reviewers: [ID!]

  \\"\\"\\"The wait timer in minutes.\\"\\"\\"
  waitTimer: Int
}

\\"\\"\\"Autogenerated return type of UpdateEnvironment\\"\\"\\"
type GithubUpdateEnvironmentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated environment.\\"\\"\\"
  environment: GithubEnvironment
}

\\"\\"\\"Autogenerated input type of UpdateIpAllowListEnabledSetting\\"\\"\\"
input GithubUpdateIpAllowListEnabledSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the owner on which to set the IP allow list enabled setting.\\"\\"\\"
  ownerId: ID!

  \\"\\"\\"The value for the IP allow list enabled setting.\\"\\"\\"
  settingValue: GithubIpAllowListEnabledSettingValue!
}

\\"\\"\\"Autogenerated return type of UpdateIpAllowListEnabledSetting\\"\\"\\"
type GithubUpdateIpAllowListEnabledSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The IP allow list owner on which the setting was updated.\\"\\"\\"
  owner: GithubIpAllowListOwner
}

\\"\\"\\"Autogenerated input type of UpdateIpAllowListEntry\\"\\"\\"
input GithubUpdateIpAllowListEntryInput {
  \\"\\"\\"An IP address or range of addresses in CIDR notation.\\"\\"\\"
  allowListValue: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the IP allow list entry to update.\\"\\"\\"
  ipAllowListEntryId: ID!

  \\"\\"\\"
  Whether the IP allow list entry is active when an IP allow list is enabled.
  \\"\\"\\"
  isActive: Boolean!

  \\"\\"\\"An optional name for the IP allow list entry.\\"\\"\\"
  name: String
}

\\"\\"\\"Autogenerated return type of UpdateIpAllowListEntry\\"\\"\\"
type GithubUpdateIpAllowListEntryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The IP allow list entry that was updated.\\"\\"\\"
  ipAllowListEntry: GithubIpAllowListEntry
}

\\"\\"\\"Autogenerated input type of UpdateIssueComment\\"\\"\\"
input GithubUpdateIssueCommentInput {
  \\"\\"\\"The updated text of the comment.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the IssueComment to modify.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of UpdateIssueComment\\"\\"\\"
type GithubUpdateIssueCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated comment.\\"\\"\\"
  issueComment: GithubIssueComment
}

\\"\\"\\"Autogenerated input type of UpdateIssue\\"\\"\\"
input GithubUpdateIssueInput {
  \\"\\"\\"An array of Node IDs of users for this issue.\\"\\"\\"
  assigneeIds: [ID!]

  \\"\\"\\"The body for the issue description.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the Issue to modify.\\"\\"\\"
  id: ID!

  \\"\\"\\"An array of Node IDs of labels for this issue.\\"\\"\\"
  labelIds: [ID!]

  \\"\\"\\"The Node ID of the milestone for this issue.\\"\\"\\"
  milestoneId: ID

  \\"\\"\\"An array of Node IDs for projects associated with this issue.\\"\\"\\"
  projectIds: [ID!]

  \\"\\"\\"The desired issue state.\\"\\"\\"
  state: GithubIssueState

  \\"\\"\\"The title for the issue.\\"\\"\\"
  title: String
}

\\"\\"\\"Autogenerated return type of UpdateIssue\\"\\"\\"
type GithubUpdateIssuePayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The issue.\\"\\"\\"
  issue: GithubIssue
}

\\"\\"\\"Autogenerated input type of UpdateNotificationRestrictionSetting\\"\\"\\"
input GithubUpdateNotificationRestrictionSettingInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The ID of the owner on which to set the restrict notifications setting.
  \\"\\"\\"
  ownerId: ID!

  \\"\\"\\"The value for the restrict notifications setting.\\"\\"\\"
  settingValue: GithubNotificationRestrictionSettingValue!
}

\\"\\"\\"Autogenerated return type of UpdateNotificationRestrictionSetting\\"\\"\\"
type GithubUpdateNotificationRestrictionSettingPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The owner on which the setting was updated.\\"\\"\\"
  owner: GithubVerifiableDomainOwner
}

\\"\\"\\"Autogenerated input type of UpdateProjectCard\\"\\"\\"
input GithubUpdateProjectCardInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Whether or not the ProjectCard should be archived\\"\\"\\"
  isArchived: Boolean

  \\"\\"\\"The note of ProjectCard.\\"\\"\\"
  note: String

  \\"\\"\\"The ProjectCard ID to update.\\"\\"\\"
  projectCardId: ID!
}

\\"\\"\\"Autogenerated return type of UpdateProjectCard\\"\\"\\"
type GithubUpdateProjectCardPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated ProjectCard.\\"\\"\\"
  projectCard: GithubProjectCard
}

\\"\\"\\"Autogenerated input type of UpdateProjectColumn\\"\\"\\"
input GithubUpdateProjectColumnInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of project column.\\"\\"\\"
  name: String!

  \\"\\"\\"The ProjectColumn ID to update.\\"\\"\\"
  projectColumnId: ID!
}

\\"\\"\\"Autogenerated return type of UpdateProjectColumn\\"\\"\\"
type GithubUpdateProjectColumnPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated project column.\\"\\"\\"
  projectColumn: GithubProjectColumn
}

\\"\\"\\"Autogenerated input type of UpdateProject\\"\\"\\"
input GithubUpdateProjectInput {
  \\"\\"\\"The description of project.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The name of project.\\"\\"\\"
  name: String

  \\"\\"\\"The Project ID to update.\\"\\"\\"
  projectId: ID!

  \\"\\"\\"Whether the project is public or not.\\"\\"\\"
  public: Boolean

  \\"\\"\\"Whether the project is open or closed.\\"\\"\\"
  state: GithubProjectState
}

\\"\\"\\"Autogenerated return type of UpdateProject\\"\\"\\"
type GithubUpdateProjectPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated project.\\"\\"\\"
  project: GithubProject
}

\\"\\"\\"Autogenerated input type of UpdatePullRequest\\"\\"\\"
input GithubUpdatePullRequestInput {
  \\"\\"\\"An array of Node IDs of users for this pull request.\\"\\"\\"
  assigneeIds: [ID!]

  \\"\\"\\"
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository.
  
  \\"\\"\\"
  baseRefName: String

  \\"\\"\\"The contents of the pull request.\\"\\"\\"
  body: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"An array of Node IDs of labels for this pull request.\\"\\"\\"
  labelIds: [ID!]

  \\"\\"\\"Indicates whether maintainers can modify the pull request.\\"\\"\\"
  maintainerCanModify: Boolean

  \\"\\"\\"The Node ID of the milestone for this pull request.\\"\\"\\"
  milestoneId: ID

  \\"\\"\\"An array of Node IDs for projects associated with this pull request.\\"\\"\\"
  projectIds: [ID!]

  \\"\\"\\"The Node ID of the pull request.\\"\\"\\"
  pullRequestId: ID!

  \\"\\"\\"The target state of the pull request.\\"\\"\\"
  state: GithubPullRequestUpdateState

  \\"\\"\\"The title of the pull request.\\"\\"\\"
  title: String
}

\\"\\"\\"Autogenerated return type of UpdatePullRequest\\"\\"\\"
type GithubUpdatePullRequestPayload {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated pull request.\\"\\"\\"
  pullRequest: GithubPullRequest
}

\\"\\"\\"Autogenerated input type of UpdatePullRequestReviewComment\\"\\"\\"
input GithubUpdatePullRequestReviewCommentInput {
  \\"\\"\\"The text of the comment.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the comment to modify.\\"\\"\\"
  pullRequestReviewCommentId: ID!
}

\\"\\"\\"Autogenerated return type of UpdatePullRequestReviewComment\\"\\"\\"
type GithubUpdatePullRequestReviewCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated comment.\\"\\"\\"
  pullRequestReviewComment: GithubPullRequestReviewComment
}

\\"\\"\\"Autogenerated input type of UpdatePullRequestReview\\"\\"\\"
input GithubUpdatePullRequestReviewInput {
  \\"\\"\\"The contents of the pull request review body.\\"\\"\\"
  body: String!

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the pull request review to modify.\\"\\"\\"
  pullRequestReviewId: ID!
}

\\"\\"\\"Autogenerated return type of UpdatePullRequestReview\\"\\"\\"
type GithubUpdatePullRequestReviewPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated pull request review.\\"\\"\\"
  pullRequestReview: GithubPullRequestReview
}

\\"\\"\\"Autogenerated input type of UpdateRef\\"\\"\\"
input GithubUpdateRefInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Permit updates of branch Refs that are not fast-forwards?\\"\\"\\"
  force: Boolean = false

  \\"\\"\\"The GitObjectID that the Ref shall be updated to target.\\"\\"\\"
  oid: GithubGitObjectID!

  \\"\\"\\"The Node ID of the Ref to be updated.\\"\\"\\"
  refId: ID!
}

\\"\\"\\"Autogenerated return type of UpdateRef\\"\\"\\"
type GithubUpdateRefPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated Ref.\\"\\"\\"
  ref: GithubRef
}

\\"\\"\\"Autogenerated input type of UpdateRepository\\"\\"\\"
input GithubUpdateRepositoryInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  A new description for the repository. Pass an empty string to erase the existing description.
  \\"\\"\\"
  description: String

  \\"\\"\\"Indicates if the repository should have the issues feature enabled.\\"\\"\\"
  hasIssuesEnabled: Boolean

  \\"\\"\\"
  Indicates if the repository should have the project boards feature enabled.
  \\"\\"\\"
  hasProjectsEnabled: Boolean

  \\"\\"\\"Indicates if the repository should have the wiki feature enabled.\\"\\"\\"
  hasWikiEnabled: Boolean

  \\"\\"\\"
  The URL for a web page about this repository. Pass an empty string to erase the existing URL.
  \\"\\"\\"
  homepageUrl: GithubURI

  \\"\\"\\"The new name of the repository.\\"\\"\\"
  name: String

  \\"\\"\\"The ID of the repository to update.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"
  Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
  \\"\\"\\"
  template: Boolean
}

\\"\\"\\"Autogenerated return type of UpdateRepository\\"\\"\\"
type GithubUpdateRepositoryPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated repository.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"Autogenerated input type of UpdateSubscription\\"\\"\\"
input GithubUpdateSubscriptionInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The new state of the subscription.\\"\\"\\"
  state: GithubSubscriptionState!

  \\"\\"\\"The Node ID of the subscribable object to modify.\\"\\"\\"
  subscribableId: ID!
}

\\"\\"\\"Autogenerated return type of UpdateSubscription\\"\\"\\"
type GithubUpdateSubscriptionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The input subscribable entity.\\"\\"\\"
  subscribable: GithubSubscribable
}

\\"\\"\\"Autogenerated input type of UpdateTeamDiscussionComment\\"\\"\\"
input GithubUpdateTeamDiscussionCommentInput {
  \\"\\"\\"The updated text of the comment.\\"\\"\\"
  body: String!

  \\"\\"\\"The current version of the body content.\\"\\"\\"
  bodyVersion: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the comment to modify.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of UpdateTeamDiscussionComment\\"\\"\\"
type GithubUpdateTeamDiscussionCommentPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated comment.\\"\\"\\"
  teamDiscussionComment: GithubTeamDiscussionComment
}

\\"\\"\\"Autogenerated input type of UpdateTeamDiscussion\\"\\"\\"
input GithubUpdateTeamDiscussionInput {
  \\"\\"\\"The updated text of the discussion.\\"\\"\\"
  body: String

  \\"\\"\\"
  The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
  \\"\\"\\"
  bodyVersion: String

  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the discussion to modify.\\"\\"\\"
  id: ID!

  \\"\\"\\"If provided, sets the pinned state of the updated discussion.\\"\\"\\"
  pinned: Boolean

  \\"\\"\\"The updated title of the discussion.\\"\\"\\"
  title: String
}

\\"\\"\\"Autogenerated return type of UpdateTeamDiscussion\\"\\"\\"
type GithubUpdateTeamDiscussionPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The updated discussion.\\"\\"\\"
  teamDiscussion: GithubTeamDiscussion
}

\\"\\"\\"Autogenerated input type of UpdateTopics\\"\\"\\"
input GithubUpdateTopicsInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The Node ID of the repository.\\"\\"\\"
  repositoryId: ID!

  \\"\\"\\"An array of topic names.\\"\\"\\"
  topicNames: [String!]!
}

\\"\\"\\"Autogenerated return type of UpdateTopics\\"\\"\\"
type GithubUpdateTopicsPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"Names of the provided topics that are not valid.\\"\\"\\"
  invalidTopicNames: [String!]

  \\"\\"\\"The updated repository.\\"\\"\\"
  repository: GithubRepository
}

\\"\\"\\"
A user is an individual's account on GitHub that owns repositories and can make new content.
\\"\\"\\"
type GithubUser implements GithubActor & GithubNode & GithubPackageOwner & GithubProfileOwner & GithubProjectOwner & GithubRepositoryDiscussionAuthor & GithubRepositoryDiscussionCommentAuthor & GithubRepositoryOwner & GithubSponsorable & GithubUniformResourceLocatable {
  \\"\\"\\"
  Determine if this repository owner has any items that can be pinned to their profile.
  \\"\\"\\"
  anyPinnableItems(
    \\"\\"\\"Filter to only a particular kind of pinnable item.\\"\\"\\"
    type: GithubPinnableItemType
  ): Boolean!

  \\"\\"\\"A URL pointing to the user's public avatar.\\"\\"\\"
  avatarUrl(
    \\"\\"\\"The size of the resulting square image.\\"\\"\\"
    size: Int
  ): GithubURI!

  \\"\\"\\"The user's public profile bio.\\"\\"\\"
  bio: String

  \\"\\"\\"The user's public profile bio as HTML.\\"\\"\\"
  bioHTML: GithubHTML!

  \\"\\"\\"
  Could this user receive email notifications, if the organization had notification restrictions enabled?
  \\"\\"\\"
  canReceiveOrganizationEmailsWhenNotificationsRestricted(
    \\"\\"\\"The login of the organization to check.\\"\\"\\"
    login: String!
  ): Boolean!

  \\"\\"\\"A list of commit comments made by this user.\\"\\"\\"
  commitComments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubCommitCommentConnection!

  \\"\\"\\"The user's public profile company.\\"\\"\\"
  company: String

  \\"\\"\\"The user's public profile company as HTML.\\"\\"\\"
  companyHTML: GithubHTML!

  \\"\\"\\"
  The collection of contributions this user has made to different repositories.
  \\"\\"\\"
  contributionsCollection(
    \\"\\"\\"
    Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
    \\"\\"\\"
    from: GithubDateTime

    \\"\\"\\"The ID of the organization used to filter contributions.\\"\\"\\"
    organizationID: ID

    \\"\\"\\"
    Only contributions made before and up to and including this time will be counted. If omitted, defaults to the current time.
    \\"\\"\\"
    to: GithubDateTime
  ): GithubContributionsCollection!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The user's publicly visible profile email.\\"\\"\\"
  email: String!

  \\"\\"\\"A list of users the given user is followed by.\\"\\"\\"
  followers(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubFollowerConnection!

  \\"\\"\\"A list of users the given user is following.\\"\\"\\"
  following(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubFollowingConnection!

  \\"\\"\\"Find gist by repo name.\\"\\"\\"
  gist(
    \\"\\"\\"The gist name to find.\\"\\"\\"
    name: String!
  ): GithubGist

  \\"\\"\\"A list of gist comments made by this user.\\"\\"\\"
  gistComments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubGistCommentConnection!

  \\"\\"\\"A list of the Gists the user has created.\\"\\"\\"
  gists(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for gists returned from the connection\\"\\"\\"
    orderBy: GithubGistOrder

    \\"\\"\\"Filters Gists according to privacy.\\"\\"\\"
    privacy: GithubGistPrivacy
  ): GithubGistConnection!

  \\"\\"\\"True if this user/organization has a GitHub Sponsors listing.\\"\\"\\"
  hasSponsorsListing: Boolean!

  \\"\\"\\"The hovercard information for this user in a given context\\"\\"\\"
  hovercard(
    \\"\\"\\"The ID of the subject to get the hovercard in the context of\\"\\"\\"
    primarySubjectId: ID
  ): GithubHovercard!
  id: ID!

  \\"\\"\\"The interaction ability settings for this user.\\"\\"\\"
  interactionAbility: GithubRepositoryInteractionAbility

  \\"\\"\\"
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  \\"\\"\\"
  isBountyHunter: Boolean!

  \\"\\"\\"
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  \\"\\"\\"
  isCampusExpert: Boolean!

  \\"\\"\\"Whether or not this user is a GitHub Developer Program member.\\"\\"\\"
  isDeveloperProgramMember: Boolean!

  \\"\\"\\"Whether or not this user is a GitHub employee.\\"\\"\\"
  isEmployee: Boolean!

  \\"\\"\\"Whether or not this user is a member of the GitHub Stars Program.\\"\\"\\"
  isGitHubStar: Boolean!

  \\"\\"\\"Whether or not the user has marked themselves as for hire.\\"\\"\\"
  isHireable: Boolean!

  \\"\\"\\"Whether or not this user is a site administrator.\\"\\"\\"
  isSiteAdmin: Boolean!

  \\"\\"\\"Check if the given account is sponsoring this user/organization.\\"\\"\\"
  isSponsoredBy(
    \\"\\"\\"The target account's login.\\"\\"\\"
    accountLogin: String!
  ): Boolean!

  \\"\\"\\"True if the viewer is sponsored by this user/organization.\\"\\"\\"
  isSponsoringViewer: Boolean!

  \\"\\"\\"Whether or not this user is the viewing user.\\"\\"\\"
  isViewer: Boolean!

  \\"\\"\\"A list of issue comments made by this user.\\"\\"\\"
  issueComments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issue comments returned from the connection.\\"\\"\\"
    orderBy: GithubIssueCommentOrder
  ): GithubIssueCommentConnection!

  \\"\\"\\"A list of issues associated with this user.\\"\\"\\"
  issues(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Filtering options for issues returned from the connection.\\"\\"\\"
    filterBy: GithubIssueFilters

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for issues returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the issues by.\\"\\"\\"
    states: [GithubIssueState!]
  ): GithubIssueConnection!

  \\"\\"\\"
  Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
  \\"\\"\\"
  itemShowcase: GithubProfileItemShowcase!

  \\"\\"\\"The user's public profile location.\\"\\"\\"
  location: String

  \\"\\"\\"The username used to login.\\"\\"\\"
  login: String!

  \\"\\"\\"The user's public profile name.\\"\\"\\"
  name: String

  \\"\\"\\"Find an organization by its login that the user belongs to.\\"\\"\\"
  organization(
    \\"\\"\\"The login of the organization to find.\\"\\"\\"
    login: String!
  ): GithubOrganization

  \\"\\"\\"
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  \\"\\"\\"
  organizationVerifiedDomainEmails(
    \\"\\"\\"The login of the organization to match verified domains from.\\"\\"\\"
    login: String!
  ): [String!]!

  \\"\\"\\"A list of organizations the user belongs to.\\"\\"\\"
  organizations(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubOrganizationConnection!

  \\"\\"\\"A list of packages under the owner.\\"\\"\\"
  packages(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Find packages by their names.\\"\\"\\"
    names: [String]

    \\"\\"\\"Ordering of the returned packages.\\"\\"\\"
    orderBy: GithubPackageOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"Filter registry package by type.\\"\\"\\"
    packageType: GithubPackageType

    \\"\\"\\"Find packages in a repository by ID.\\"\\"\\"
    repositoryId: ID
  ): GithubPackageConnection!

  \\"\\"\\"
  A list of repositories and gists this profile owner can pin to their profile.
  \\"\\"\\"
  pinnableItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter the types of pinnable items that are returned.\\"\\"\\"
    types: [GithubPinnableItemType!]
  ): GithubPinnableItemConnection!

  \\"\\"\\"
  A list of repositories and gists this profile owner has pinned to their profile
  \\"\\"\\"
  pinnedItems(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Filter the types of pinned items that are returned.\\"\\"\\"
    types: [GithubPinnableItemType!]
  ): GithubPinnableItemConnection!

  \\"\\"\\"
  Returns how many more items this profile owner can pin to their profile.
  \\"\\"\\"
  pinnedItemsRemaining: Int!

  \\"\\"\\"Find project by number.\\"\\"\\"
  project(
    \\"\\"\\"The project number to find.\\"\\"\\"
    number: Int!
  ): GithubProject

  \\"\\"\\"A list of projects under the owner.\\"\\"\\"
  projects(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for projects returned from the connection\\"\\"\\"
    orderBy: GithubProjectOrder

    \\"\\"\\"Query to search projects by, currently only searching by name.\\"\\"\\"
    search: String

    \\"\\"\\"A list of states to filter the projects by.\\"\\"\\"
    states: [GithubProjectState!]
  ): GithubProjectConnection!

  \\"\\"\\"The HTTP path listing user's projects\\"\\"\\"
  projectsResourcePath: GithubURI!

  \\"\\"\\"The HTTP URL listing user's projects\\"\\"\\"
  projectsUrl: GithubURI!

  \\"\\"\\"A list of public keys associated with this user.\\"\\"\\"
  publicKeys(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubPublicKeyConnection!

  \\"\\"\\"A list of pull requests associated with this user.\\"\\"\\"
  pullRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"The base ref name to filter the pull requests by.\\"\\"\\"
    baseRefName: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"The head ref name to filter the pull requests by.\\"\\"\\"
    headRefName: String

    \\"\\"\\"A list of label names to filter the pull requests by.\\"\\"\\"
    labels: [String!]

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for pull requests returned from the connection.\\"\\"\\"
    orderBy: GithubIssueOrder

    \\"\\"\\"A list of states to filter the pull requests by.\\"\\"\\"
    states: [GithubPullRequestState!]
  ): GithubPullRequestConnection!

  \\"\\"\\"A list of repositories that the user owns.\\"\\"\\"
  repositories(
    \\"\\"\\"
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    \\"\\"\\"
    affiliations: [GithubRepositoryAffiliation]

    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"
    If non-null, filters repositories according to whether they are forks of another repository
    \\"\\"\\"
    isFork: Boolean

    \\"\\"\\"
    If non-null, filters repositories according to whether they have been locked
    \\"\\"\\"
    isLocked: Boolean

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories returned from the connection\\"\\"\\"
    orderBy: GithubRepositoryOrder

    \\"\\"\\"
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    \\"\\"\\"
    ownerAffiliations: [GithubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    \\"\\"\\"If non-null, filters repositories according to privacy\\"\\"\\"
    privacy: GithubRepositoryPrivacy
  ): GithubRepositoryConnection!

  \\"\\"\\"A list of repositories that the user recently contributed to.\\"\\"\\"
  repositoriesContributedTo(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"
    If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    \\"\\"\\"
    contributionTypes: [GithubRepositoryContributionType]

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"If true, include user repositories\\"\\"\\"
    includeUserRepositories: Boolean

    \\"\\"\\"
    If non-null, filters repositories according to whether they have been locked
    \\"\\"\\"
    isLocked: Boolean

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories returned from the connection\\"\\"\\"
    orderBy: GithubRepositoryOrder

    \\"\\"\\"If non-null, filters repositories according to privacy\\"\\"\\"
    privacy: GithubRepositoryPrivacy
  ): GithubRepositoryConnection!

  \\"\\"\\"Find Repository.\\"\\"\\"
  repository(
    \\"\\"\\"Name of Repository to find.\\"\\"\\"
    name: String!
  ): GithubRepository

  \\"\\"\\"Discussion comments this user has authored.\\"\\"\\"
  repositoryDiscussionComments(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Filter discussion comments to only those that were marked as the answer
    \\"\\"\\"
    onlyAnswers: Boolean = false

    \\"\\"\\"Filter discussion comments to only those in a specific repository.\\"\\"\\"
    repositoryId: ID
  ): GithubDiscussionCommentConnection!

  \\"\\"\\"Discussions this user has started.\\"\\"\\"
  repositoryDiscussions(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
    \\"\\"\\"
    answered: Boolean = null

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for discussions returned from the connection.\\"\\"\\"
    orderBy: GithubDiscussionOrder = {direction: DESC, field: CREATED_AT}

    \\"\\"\\"Filter discussions to only those in a specific repository.\\"\\"\\"
    repositoryId: ID
  ): GithubDiscussionConnection!

  \\"\\"\\"The HTTP path for this user\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"Replies this user has saved\\"\\"\\"
  savedReplies(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"The field to order saved replies by.\\"\\"\\"
    orderBy: GithubSavedReplyOrder = {direction: DESC, field: UPDATED_AT}
  ): GithubSavedReplyConnection

  \\"\\"\\"The GitHub Sponsors listing for this user or organization.\\"\\"\\"
  sponsorsListing: GithubSponsorsListing

  \\"\\"\\"The viewer's sponsorship of this entity.\\"\\"\\"
  sponsorshipForViewerAsSponsor: GithubSponsorship

  \\"\\"\\"This object's sponsorships as the maintainer.\\"\\"\\"
  sponsorshipsAsMaintainer(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Whether or not to include private sponsorships in the result set\\"\\"\\"
    includePrivate: Boolean = false

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    \\"\\"\\"
    orderBy: GithubSponsorshipOrder
  ): GithubSponsorshipConnection!

  \\"\\"\\"This object's sponsorships as the sponsor.\\"\\"\\"
  sponsorshipsAsSponsor(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    \\"\\"\\"
    orderBy: GithubSponsorshipOrder
  ): GithubSponsorshipConnection!

  \\"\\"\\"Repositories the user has starred.\\"\\"\\"
  starredRepositories(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Order for connection\\"\\"\\"
    orderBy: GithubStarOrder

    \\"\\"\\"
    Filters starred repositories to only return repositories owned by the viewer.
    \\"\\"\\"
    ownedByViewer: Boolean
  ): GithubStarredRepositoryConnection!

  \\"\\"\\"The user's description of what they're currently doing.\\"\\"\\"
  status: GithubUserStatus

  \\"\\"\\"
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  
  \\"\\"\\"
  topRepositories(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories returned from the connection\\"\\"\\"
    orderBy: GithubRepositoryOrder!

    \\"\\"\\"How far back in time to fetch contributed repositories\\"\\"\\"
    since: GithubDateTime
  ): GithubRepositoryConnection!

  \\"\\"\\"The user's Twitter username.\\"\\"\\"
  twitterUsername: String

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this user\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"Can the viewer pin repositories and gists to the profile?\\"\\"\\"
  viewerCanChangePinnedItems: Boolean!

  \\"\\"\\"Can the current viewer create new projects on this owner.\\"\\"\\"
  viewerCanCreateProjects: Boolean!

  \\"\\"\\"Whether or not the viewer is able to follow the user.\\"\\"\\"
  viewerCanFollow: Boolean!

  \\"\\"\\"Whether or not the viewer is able to sponsor this user/organization.\\"\\"\\"
  viewerCanSponsor: Boolean!

  \\"\\"\\"Whether or not this user is followed by the viewer.\\"\\"\\"
  viewerIsFollowing: Boolean!

  \\"\\"\\"True if the viewer is sponsoring this user/organization.\\"\\"\\"
  viewerIsSponsoring: Boolean!

  \\"\\"\\"A list of repositories the given user is watching.\\"\\"\\"
  watching(
    \\"\\"\\"
    Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member.
    \\"\\"\\"
    affiliations: [GithubRepositoryAffiliation]

    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"
    If non-null, filters repositories according to whether they have been locked
    \\"\\"\\"
    isLocked: Boolean

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for repositories returned from the connection\\"\\"\\"
    orderBy: GithubRepositoryOrder

    \\"\\"\\"
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    \\"\\"\\"
    ownerAffiliations: [GithubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    \\"\\"\\"If non-null, filters repositories according to privacy\\"\\"\\"
    privacy: GithubRepositoryPrivacy
  ): GithubRepositoryConnection!

  \\"\\"\\"A URL pointing to the user's public website/blog.\\"\\"\\"
  websiteUrl: GithubURI
}

\\"\\"\\"The possible durations that a user can be blocked for.\\"\\"\\"
enum GithubUserBlockDuration {
  \\"\\"\\"The user was blocked for 1 day\\"\\"\\"
  ONE_DAY

  \\"\\"\\"The user was blocked for 30 days\\"\\"\\"
  ONE_MONTH

  \\"\\"\\"The user was blocked for 7 days\\"\\"\\"
  ONE_WEEK

  \\"\\"\\"The user was blocked permanently\\"\\"\\"
  PERMANENT

  \\"\\"\\"The user was blocked for 3 days\\"\\"\\"
  THREE_DAYS
}

\\"\\"\\"Represents a 'user_blocked' event on a given user.\\"\\"\\"
type GithubUserBlockedEvent implements GithubNode {
  \\"\\"\\"Identifies the actor who performed the event.\\"\\"\\"
  actor: GithubActor

  \\"\\"\\"Number of days that the user was blocked for.\\"\\"\\"
  blockDuration: GithubUserBlockDuration!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!
  id: ID!

  \\"\\"\\"The user who was blocked.\\"\\"\\"
  subject: GithubUser
}

\\"\\"\\"The connection type for User.\\"\\"\\"
type GithubUserConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubUserEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUser]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edit on user content\\"\\"\\"
type GithubUserContentEdit implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the date and time when the object was deleted.\\"\\"\\"
  deletedAt: GithubDateTime

  \\"\\"\\"The actor who deleted this content\\"\\"\\"
  deletedBy: GithubActor

  \\"\\"\\"A summary of the changes for this edit\\"\\"\\"
  diff: String

  \\"\\"\\"When this content was edited\\"\\"\\"
  editedAt: GithubDateTime!

  \\"\\"\\"The actor who edited this content\\"\\"\\"
  editor: GithubActor
  id: ID!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"A list of edits to content.\\"\\"\\"
type GithubUserContentEditConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubUserContentEditEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUserContentEdit]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubUserContentEditEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubUserContentEdit
}

\\"\\"\\"Represents a user.\\"\\"\\"
type GithubUserEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubUser
}

\\"\\"\\"Email attributes from External Identity\\"\\"\\"
type GithubUserEmailMetadata {
  \\"\\"\\"Boolean to identify primary emails\\"\\"\\"
  primary: Boolean

  \\"\\"\\"Type of email\\"\\"\\"
  type: String

  \\"\\"\\"Email id\\"\\"\\"
  value: String!
}

\\"\\"\\"The user's description of what they're currently doing.\\"\\"\\"
type GithubUserStatus implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"An emoji summarizing the user's status.\\"\\"\\"
  emoji: String

  \\"\\"\\"The status emoji as HTML.\\"\\"\\"
  emojiHTML: GithubHTML

  \\"\\"\\"If set, the status will not be shown after this date.\\"\\"\\"
  expiresAt: GithubDateTime
  id: ID!

  \\"\\"\\"
  Whether this status indicates the user is not fully available on GitHub.
  \\"\\"\\"
  indicatesLimitedAvailability: Boolean!

  \\"\\"\\"A brief message describing what the user is doing.\\"\\"\\"
  message: String

  \\"\\"\\"
  The organization whose members can see this status. If null, this status is publicly visible.
  \\"\\"\\"
  organization: GithubOrganization

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The user who has this status.\\"\\"\\"
  user: GithubUser!
}

\\"\\"\\"The connection type for UserStatus.\\"\\"\\"
type GithubUserStatusConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubUserStatusEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubUserStatus]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubUserStatusEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubUserStatus
}

\\"\\"\\"Ordering options for user status connections.\\"\\"\\"
input GithubUserStatusOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order user statuses by.\\"\\"\\"
  field: GithubUserStatusOrderField!
}

\\"\\"\\"Properties by which user status connections can be ordered.\\"\\"\\"
enum GithubUserStatusOrderField {
  \\"\\"\\"Order user statuses by when they were updated.\\"\\"\\"
  UPDATED_AT
}

\\"\\"\\"
A domain that can be verified or approved for an organization or an enterprise.
\\"\\"\\"
type GithubVerifiableDomain implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The DNS host name that should be used for verification.\\"\\"\\"
  dnsHostName: GithubURI

  \\"\\"\\"The unicode encoded domain.\\"\\"\\"
  domain: GithubURI!

  \\"\\"\\"
  Whether a TXT record for verification with the expected host name was found.
  \\"\\"\\"
  hasFoundHostName: Boolean!

  \\"\\"\\"
  Whether a TXT record for verification with the expected verification token was found.
  \\"\\"\\"
  hasFoundVerificationToken: Boolean!
  id: ID!

  \\"\\"\\"Whether or not the domain is approved.\\"\\"\\"
  isApproved: Boolean!

  \\"\\"\\"
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  \\"\\"\\"
  isRequiredForPolicyEnforcement: Boolean!

  \\"\\"\\"Whether or not the domain is verified.\\"\\"\\"
  isVerified: Boolean!

  \\"\\"\\"The owner of the domain.\\"\\"\\"
  owner: GithubVerifiableDomainOwner!

  \\"\\"\\"The punycode encoded domain.\\"\\"\\"
  punycodeEncodedDomain: GithubURI!

  \\"\\"\\"The time that the current verification token will expire.\\"\\"\\"
  tokenExpirationTime: GithubDateTime

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The current verification token for the domain.\\"\\"\\"
  verificationToken: String
}

\\"\\"\\"The connection type for VerifiableDomain.\\"\\"\\"
type GithubVerifiableDomainConnection {
  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [GithubVerifiableDomainEdge]

  \\"\\"\\"A list of nodes.\\"\\"\\"
  nodes: [GithubVerifiableDomain]

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: GithubPageInfo!

  \\"\\"\\"Identifies the total count of items in the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type GithubVerifiableDomainEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: String!

  \\"\\"\\"The item at the end of the edge.\\"\\"\\"
  node: GithubVerifiableDomain
}

\\"\\"\\"Ordering options for verifiable domain connections.\\"\\"\\"
input GithubVerifiableDomainOrder {
  \\"\\"\\"The ordering direction.\\"\\"\\"
  direction: GithubOrderDirection!

  \\"\\"\\"The field to order verifiable domains by.\\"\\"\\"
  field: GithubVerifiableDomainOrderField!
}

\\"\\"\\"Properties by which verifiable domain connections can be ordered.\\"\\"\\"
enum GithubVerifiableDomainOrderField {
  \\"\\"\\"Order verifiable domains by their creation date.\\"\\"\\"
  CREATED_AT

  \\"\\"\\"Order verifiable domains by the domain name.\\"\\"\\"
  DOMAIN
}

\\"\\"\\"Types that can own a verifiable domain.\\"\\"\\"
union GithubVerifiableDomainOwner = GithubEnterprise | GithubOrganization

\\"\\"\\"Autogenerated input type of VerifyVerifiableDomain\\"\\"\\"
input GithubVerifyVerifiableDomainInput {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The ID of the verifiable domain to verify.\\"\\"\\"
  id: ID!
}

\\"\\"\\"Autogenerated return type of VerifyVerifiableDomain\\"\\"\\"
type GithubVerifyVerifiableDomainPayload {
  \\"\\"\\"A unique identifier for the client performing the mutation.\\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The verifiable domain that was verified.\\"\\"\\"
  domain: GithubVerifiableDomain
}

\\"\\"\\"
A hovercard context with a message describing how the viewer is related.
\\"\\"\\"
type GithubViewerHovercardContext implements GithubHovercardContext {
  \\"\\"\\"A string describing this context\\"\\"\\"
  message: String!

  \\"\\"\\"An octicon to accompany this context\\"\\"\\"
  octicon: String!

  \\"\\"\\"Identifies the user who is related to this context.\\"\\"\\"
  viewer: GithubUser!
}

\\"\\"\\"A subject that may be upvoted.\\"\\"\\"
interface GithubVotable {
  \\"\\"\\"Number of upvotes that this subject has received.\\"\\"\\"
  upvoteCount: Int!

  \\"\\"\\"
  Whether or not the current user can add or remove an upvote on this subject.
  \\"\\"\\"
  viewerCanUpvote: Boolean!

  \\"\\"\\"Whether or not the current user has already upvoted this subject.\\"\\"\\"
  viewerHasUpvoted: Boolean!
}

\\"\\"\\"A workflow contains meta information about an Actions workflow file.\\"\\"\\"
type GithubWorkflow implements GithubNode {
  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int
  id: ID!

  \\"\\"\\"The name of the workflow.\\"\\"\\"
  name: String!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!
}

\\"\\"\\"A workflow run.\\"\\"\\"
type GithubWorkflowRun implements GithubNode {
  \\"\\"\\"The check suite this workflow run belongs to.\\"\\"\\"
  checkSuite: GithubCheckSuite!

  \\"\\"\\"Identifies the date and time when the object was created.\\"\\"\\"
  createdAt: GithubDateTime!

  \\"\\"\\"Identifies the primary key from the database.\\"\\"\\"
  databaseId: Int

  \\"\\"\\"The log of deployment reviews\\"\\"\\"
  deploymentReviews(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDeploymentReviewConnection!
  id: ID!

  \\"\\"\\"The pending deployment requests of all check runs in this workflow run\\"\\"\\"
  pendingDeploymentRequests(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int
  ): GithubDeploymentRequestConnection!

  \\"\\"\\"The HTTP path for this workflow run\\"\\"\\"
  resourcePath: GithubURI!

  \\"\\"\\"
  A number that uniquely identifies this workflow run in its parent workflow.
  \\"\\"\\"
  runNumber: Int!

  \\"\\"\\"Identifies the date and time when the object was last updated.\\"\\"\\"
  updatedAt: GithubDateTime!

  \\"\\"\\"The HTTP URL for this workflow run\\"\\"\\"
  url: GithubURI!

  \\"\\"\\"The workflow executed in this workflow run.\\"\\"\\"
  workflow: GithubWorkflow!
}

\\"\\"\\"A valid x509 certificate string\\"\\"\\"
scalar GithubX509Certificate

\\"\\"\\"The root query for implementing GraphQL mutations.\\"\\"\\"
type Mutation {
  \\"\\"\\"
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  \\"\\"\\"
  GithubacceptEnterpriseAdministratorInvitation(
    \\"\\"\\"Parameters for AcceptEnterpriseAdministratorInvitation\\"\\"\\"
    input: GithubAcceptEnterpriseAdministratorInvitationInput!
  ): GithubAcceptEnterpriseAdministratorInvitationPayload

  \\"\\"\\"Applies a suggested topic to the repository.\\"\\"\\"
  GithubacceptTopicSuggestion(
    \\"\\"\\"Parameters for AcceptTopicSuggestion\\"\\"\\"
    input: GithubAcceptTopicSuggestionInput!
  ): GithubAcceptTopicSuggestionPayload

  \\"\\"\\"Adds assignees to an assignable object.\\"\\"\\"
  GithubaddAssigneesToAssignable(
    \\"\\"\\"Parameters for AddAssigneesToAssignable\\"\\"\\"
    input: GithubAddAssigneesToAssignableInput!
  ): GithubAddAssigneesToAssignablePayload

  \\"\\"\\"Adds a comment to an Issue or Pull Request.\\"\\"\\"
  GithubaddComment(
    \\"\\"\\"Parameters for AddComment\\"\\"\\"
    input: GithubAddCommentInput!
  ): GithubAddCommentPayload

  \\"\\"\\"
  Adds a comment to a Discussion, possibly as a reply to another comment.
  \\"\\"\\"
  GithubaddDiscussionComment(
    \\"\\"\\"Parameters for AddDiscussionComment\\"\\"\\"
    input: GithubAddDiscussionCommentInput!
  ): GithubAddDiscussionCommentPayload

  \\"\\"\\"Adds a support entitlement to an enterprise member.\\"\\"\\"
  GithubaddEnterpriseSupportEntitlement(
    \\"\\"\\"Parameters for AddEnterpriseSupportEntitlement\\"\\"\\"
    input: GithubAddEnterpriseSupportEntitlementInput!
  ): GithubAddEnterpriseSupportEntitlementPayload

  \\"\\"\\"Adds labels to a labelable object.\\"\\"\\"
  GithubaddLabelsToLabelable(
    \\"\\"\\"Parameters for AddLabelsToLabelable\\"\\"\\"
    input: GithubAddLabelsToLabelableInput!
  ): GithubAddLabelsToLabelablePayload

  \\"\\"\\"
  Adds a card to a ProjectColumn. Either \`contentId\` or \`note\` must be provided but **not** both.
  \\"\\"\\"
  GithubaddProjectCard(
    \\"\\"\\"Parameters for AddProjectCard\\"\\"\\"
    input: GithubAddProjectCardInput!
  ): GithubAddProjectCardPayload

  \\"\\"\\"Adds a column to a Project.\\"\\"\\"
  GithubaddProjectColumn(
    \\"\\"\\"Parameters for AddProjectColumn\\"\\"\\"
    input: GithubAddProjectColumnInput!
  ): GithubAddProjectColumnPayload

  \\"\\"\\"Adds a review to a Pull Request.\\"\\"\\"
  GithubaddPullRequestReview(
    \\"\\"\\"Parameters for AddPullRequestReview\\"\\"\\"
    input: GithubAddPullRequestReviewInput!
  ): GithubAddPullRequestReviewPayload

  \\"\\"\\"Adds a comment to a review.\\"\\"\\"
  GithubaddPullRequestReviewComment(
    \\"\\"\\"Parameters for AddPullRequestReviewComment\\"\\"\\"
    input: GithubAddPullRequestReviewCommentInput!
  ): GithubAddPullRequestReviewCommentPayload

  \\"\\"\\"Adds a new thread to a pending Pull Request Review.\\"\\"\\"
  GithubaddPullRequestReviewThread(
    \\"\\"\\"Parameters for AddPullRequestReviewThread\\"\\"\\"
    input: GithubAddPullRequestReviewThreadInput!
  ): GithubAddPullRequestReviewThreadPayload

  \\"\\"\\"Adds a reaction to a subject.\\"\\"\\"
  GithubaddReaction(
    \\"\\"\\"Parameters for AddReaction\\"\\"\\"
    input: GithubAddReactionInput!
  ): GithubAddReactionPayload

  \\"\\"\\"Adds a star to a Starrable.\\"\\"\\"
  GithubaddStar(
    \\"\\"\\"Parameters for AddStar\\"\\"\\"
    input: GithubAddStarInput!
  ): GithubAddStarPayload

  \\"\\"\\"Add an upvote to a discussion or discussion comment.\\"\\"\\"
  GithubaddUpvote(
    \\"\\"\\"Parameters for AddUpvote\\"\\"\\"
    input: GithubAddUpvoteInput!
  ): GithubAddUpvotePayload

  \\"\\"\\"Adds a verifiable domain to an owning account.\\"\\"\\"
  GithubaddVerifiableDomain(
    \\"\\"\\"Parameters for AddVerifiableDomain\\"\\"\\"
    input: GithubAddVerifiableDomainInput!
  ): GithubAddVerifiableDomainPayload

  \\"\\"\\"Approve all pending deployments under one or more environments\\"\\"\\"
  GithubapproveDeployments(
    \\"\\"\\"Parameters for ApproveDeployments\\"\\"\\"
    input: GithubApproveDeploymentsInput!
  ): GithubApproveDeploymentsPayload

  \\"\\"\\"Approve a verifiable domain for notification delivery.\\"\\"\\"
  GithubapproveVerifiableDomain(
    \\"\\"\\"Parameters for ApproveVerifiableDomain\\"\\"\\"
    input: GithubApproveVerifiableDomainInput!
  ): GithubApproveVerifiableDomainPayload

  \\"\\"\\"Marks a repository as archived.\\"\\"\\"
  GithubarchiveRepository(
    \\"\\"\\"Parameters for ArchiveRepository\\"\\"\\"
    input: GithubArchiveRepositoryInput!
  ): GithubArchiveRepositoryPayload

  \\"\\"\\"
  Cancels a pending invitation for an administrator to join an enterprise.
  \\"\\"\\"
  GithubcancelEnterpriseAdminInvitation(
    \\"\\"\\"Parameters for CancelEnterpriseAdminInvitation\\"\\"\\"
    input: GithubCancelEnterpriseAdminInvitationInput!
  ): GithubCancelEnterpriseAdminInvitationPayload

  \\"\\"\\"Update your status on GitHub.\\"\\"\\"
  GithubchangeUserStatus(
    \\"\\"\\"Parameters for ChangeUserStatus\\"\\"\\"
    input: GithubChangeUserStatusInput!
  ): GithubChangeUserStatusPayload

  \\"\\"\\"Clears all labels from a labelable object.\\"\\"\\"
  GithubclearLabelsFromLabelable(
    \\"\\"\\"Parameters for ClearLabelsFromLabelable\\"\\"\\"
    input: GithubClearLabelsFromLabelableInput!
  ): GithubClearLabelsFromLabelablePayload

  \\"\\"\\"
  Creates a new project by cloning configuration from an existing project.
  \\"\\"\\"
  GithubcloneProject(
    \\"\\"\\"Parameters for CloneProject\\"\\"\\"
    input: GithubCloneProjectInput!
  ): GithubCloneProjectPayload

  \\"\\"\\"
  Create a new repository with the same files and directory structure as a template repository.
  \\"\\"\\"
  GithubcloneTemplateRepository(
    \\"\\"\\"Parameters for CloneTemplateRepository\\"\\"\\"
    input: GithubCloneTemplateRepositoryInput!
  ): GithubCloneTemplateRepositoryPayload

  \\"\\"\\"Close an issue.\\"\\"\\"
  GithubcloseIssue(
    \\"\\"\\"Parameters for CloseIssue\\"\\"\\"
    input: GithubCloseIssueInput!
  ): GithubCloseIssuePayload

  \\"\\"\\"Close a pull request.\\"\\"\\"
  GithubclosePullRequest(
    \\"\\"\\"Parameters for ClosePullRequest\\"\\"\\"
    input: GithubClosePullRequestInput!
  ): GithubClosePullRequestPayload

  \\"\\"\\"
  Convert a project note card to one associated with a newly created issue.
  \\"\\"\\"
  GithubconvertProjectCardNoteToIssue(
    \\"\\"\\"Parameters for ConvertProjectCardNoteToIssue\\"\\"\\"
    input: GithubConvertProjectCardNoteToIssueInput!
  ): GithubConvertProjectCardNoteToIssuePayload

  \\"\\"\\"Converts a pull request to draft\\"\\"\\"
  GithubconvertPullRequestToDraft(
    \\"\\"\\"Parameters for ConvertPullRequestToDraft\\"\\"\\"
    input: GithubConvertPullRequestToDraftInput!
  ): GithubConvertPullRequestToDraftPayload

  \\"\\"\\"Create a new branch protection rule\\"\\"\\"
  GithubcreateBranchProtectionRule(
    \\"\\"\\"Parameters for CreateBranchProtectionRule\\"\\"\\"
    input: GithubCreateBranchProtectionRuleInput!
  ): GithubCreateBranchProtectionRulePayload

  \\"\\"\\"Create a check run.\\"\\"\\"
  GithubcreateCheckRun(
    \\"\\"\\"Parameters for CreateCheckRun\\"\\"\\"
    input: GithubCreateCheckRunInput!
  ): GithubCreateCheckRunPayload

  \\"\\"\\"Create a check suite\\"\\"\\"
  GithubcreateCheckSuite(
    \\"\\"\\"Parameters for CreateCheckSuite\\"\\"\\"
    input: GithubCreateCheckSuiteInput!
  ): GithubCreateCheckSuitePayload

  \\"\\"\\"Create a discussion.\\"\\"\\"
  GithubcreateDiscussion(
    \\"\\"\\"Parameters for CreateDiscussion\\"\\"\\"
    input: GithubCreateDiscussionInput!
  ): GithubCreateDiscussionPayload

  \\"\\"\\"Creates an organization as part of an enterprise account.\\"\\"\\"
  GithubcreateEnterpriseOrganization(
    \\"\\"\\"Parameters for CreateEnterpriseOrganization\\"\\"\\"
    input: GithubCreateEnterpriseOrganizationInput!
  ): GithubCreateEnterpriseOrganizationPayload

  \\"\\"\\"Creates an environment or simply returns it if already exists.\\"\\"\\"
  GithubcreateEnvironment(
    \\"\\"\\"Parameters for CreateEnvironment\\"\\"\\"
    input: GithubCreateEnvironmentInput!
  ): GithubCreateEnvironmentPayload

  \\"\\"\\"Creates a new IP allow list entry.\\"\\"\\"
  GithubcreateIpAllowListEntry(
    \\"\\"\\"Parameters for CreateIpAllowListEntry\\"\\"\\"
    input: GithubCreateIpAllowListEntryInput!
  ): GithubCreateIpAllowListEntryPayload

  \\"\\"\\"Creates a new issue.\\"\\"\\"
  GithubcreateIssue(
    \\"\\"\\"Parameters for CreateIssue\\"\\"\\"
    input: GithubCreateIssueInput!
  ): GithubCreateIssuePayload

  \\"\\"\\"Creates a new project.\\"\\"\\"
  GithubcreateProject(
    \\"\\"\\"Parameters for CreateProject\\"\\"\\"
    input: GithubCreateProjectInput!
  ): GithubCreateProjectPayload

  \\"\\"\\"Create a new pull request\\"\\"\\"
  GithubcreatePullRequest(
    \\"\\"\\"Parameters for CreatePullRequest\\"\\"\\"
    input: GithubCreatePullRequestInput!
  ): GithubCreatePullRequestPayload

  \\"\\"\\"Create a new Git Ref.\\"\\"\\"
  GithubcreateRef(
    \\"\\"\\"Parameters for CreateRef\\"\\"\\"
    input: GithubCreateRefInput!
  ): GithubCreateRefPayload

  \\"\\"\\"Create a new repository.\\"\\"\\"
  GithubcreateRepository(
    \\"\\"\\"Parameters for CreateRepository\\"\\"\\"
    input: GithubCreateRepositoryInput!
  ): GithubCreateRepositoryPayload

  \\"\\"\\"Creates a new team discussion.\\"\\"\\"
  GithubcreateTeamDiscussion(
    \\"\\"\\"Parameters for CreateTeamDiscussion\\"\\"\\"
    input: GithubCreateTeamDiscussionInput!
  ): GithubCreateTeamDiscussionPayload

  \\"\\"\\"Creates a new team discussion comment.\\"\\"\\"
  GithubcreateTeamDiscussionComment(
    \\"\\"\\"Parameters for CreateTeamDiscussionComment\\"\\"\\"
    input: GithubCreateTeamDiscussionCommentInput!
  ): GithubCreateTeamDiscussionCommentPayload

  \\"\\"\\"Rejects a suggested topic for the repository.\\"\\"\\"
  GithubdeclineTopicSuggestion(
    \\"\\"\\"Parameters for DeclineTopicSuggestion\\"\\"\\"
    input: GithubDeclineTopicSuggestionInput!
  ): GithubDeclineTopicSuggestionPayload

  \\"\\"\\"Delete a branch protection rule\\"\\"\\"
  GithubdeleteBranchProtectionRule(
    \\"\\"\\"Parameters for DeleteBranchProtectionRule\\"\\"\\"
    input: GithubDeleteBranchProtectionRuleInput!
  ): GithubDeleteBranchProtectionRulePayload

  \\"\\"\\"Deletes a deployment.\\"\\"\\"
  GithubdeleteDeployment(
    \\"\\"\\"Parameters for DeleteDeployment\\"\\"\\"
    input: GithubDeleteDeploymentInput!
  ): GithubDeleteDeploymentPayload

  \\"\\"\\"Delete a discussion and all of its replies.\\"\\"\\"
  GithubdeleteDiscussion(
    \\"\\"\\"Parameters for DeleteDiscussion\\"\\"\\"
    input: GithubDeleteDiscussionInput!
  ): GithubDeleteDiscussionPayload

  \\"\\"\\"Delete a discussion comment. If it has replies, wipe it instead.\\"\\"\\"
  GithubdeleteDiscussionComment(
    \\"\\"\\"Parameters for DeleteDiscussionComment\\"\\"\\"
    input: GithubDeleteDiscussionCommentInput!
  ): GithubDeleteDiscussionCommentPayload

  \\"\\"\\"Deletes an environment\\"\\"\\"
  GithubdeleteEnvironment(
    \\"\\"\\"Parameters for DeleteEnvironment\\"\\"\\"
    input: GithubDeleteEnvironmentInput!
  ): GithubDeleteEnvironmentPayload

  \\"\\"\\"Deletes an IP allow list entry.\\"\\"\\"
  GithubdeleteIpAllowListEntry(
    \\"\\"\\"Parameters for DeleteIpAllowListEntry\\"\\"\\"
    input: GithubDeleteIpAllowListEntryInput!
  ): GithubDeleteIpAllowListEntryPayload

  \\"\\"\\"Deletes an Issue object.\\"\\"\\"
  GithubdeleteIssue(
    \\"\\"\\"Parameters for DeleteIssue\\"\\"\\"
    input: GithubDeleteIssueInput!
  ): GithubDeleteIssuePayload

  \\"\\"\\"Deletes an IssueComment object.\\"\\"\\"
  GithubdeleteIssueComment(
    \\"\\"\\"Parameters for DeleteIssueComment\\"\\"\\"
    input: GithubDeleteIssueCommentInput!
  ): GithubDeleteIssueCommentPayload

  \\"\\"\\"Deletes a project.\\"\\"\\"
  GithubdeleteProject(
    \\"\\"\\"Parameters for DeleteProject\\"\\"\\"
    input: GithubDeleteProjectInput!
  ): GithubDeleteProjectPayload

  \\"\\"\\"Deletes a project card.\\"\\"\\"
  GithubdeleteProjectCard(
    \\"\\"\\"Parameters for DeleteProjectCard\\"\\"\\"
    input: GithubDeleteProjectCardInput!
  ): GithubDeleteProjectCardPayload

  \\"\\"\\"Deletes a project column.\\"\\"\\"
  GithubdeleteProjectColumn(
    \\"\\"\\"Parameters for DeleteProjectColumn\\"\\"\\"
    input: GithubDeleteProjectColumnInput!
  ): GithubDeleteProjectColumnPayload

  \\"\\"\\"Deletes a pull request review.\\"\\"\\"
  GithubdeletePullRequestReview(
    \\"\\"\\"Parameters for DeletePullRequestReview\\"\\"\\"
    input: GithubDeletePullRequestReviewInput!
  ): GithubDeletePullRequestReviewPayload

  \\"\\"\\"Deletes a pull request review comment.\\"\\"\\"
  GithubdeletePullRequestReviewComment(
    \\"\\"\\"Parameters for DeletePullRequestReviewComment\\"\\"\\"
    input: GithubDeletePullRequestReviewCommentInput!
  ): GithubDeletePullRequestReviewCommentPayload

  \\"\\"\\"Delete a Git Ref.\\"\\"\\"
  GithubdeleteRef(
    \\"\\"\\"Parameters for DeleteRef\\"\\"\\"
    input: GithubDeleteRefInput!
  ): GithubDeleteRefPayload

  \\"\\"\\"Deletes a team discussion.\\"\\"\\"
  GithubdeleteTeamDiscussion(
    \\"\\"\\"Parameters for DeleteTeamDiscussion\\"\\"\\"
    input: GithubDeleteTeamDiscussionInput!
  ): GithubDeleteTeamDiscussionPayload

  \\"\\"\\"Deletes a team discussion comment.\\"\\"\\"
  GithubdeleteTeamDiscussionComment(
    \\"\\"\\"Parameters for DeleteTeamDiscussionComment\\"\\"\\"
    input: GithubDeleteTeamDiscussionCommentInput!
  ): GithubDeleteTeamDiscussionCommentPayload

  \\"\\"\\"Deletes a verifiable domain.\\"\\"\\"
  GithubdeleteVerifiableDomain(
    \\"\\"\\"Parameters for DeleteVerifiableDomain\\"\\"\\"
    input: GithubDeleteVerifiableDomainInput!
  ): GithubDeleteVerifiableDomainPayload

  \\"\\"\\"Disable auto merge on the given pull request\\"\\"\\"
  GithubdisablePullRequestAutoMerge(
    \\"\\"\\"Parameters for DisablePullRequestAutoMerge\\"\\"\\"
    input: GithubDisablePullRequestAutoMergeInput!
  ): GithubDisablePullRequestAutoMergePayload

  \\"\\"\\"Dismisses an approved or rejected pull request review.\\"\\"\\"
  GithubdismissPullRequestReview(
    \\"\\"\\"Parameters for DismissPullRequestReview\\"\\"\\"
    input: GithubDismissPullRequestReviewInput!
  ): GithubDismissPullRequestReviewPayload

  \\"\\"\\"Enable the default auto-merge on a pull request.\\"\\"\\"
  GithubenablePullRequestAutoMerge(
    \\"\\"\\"Parameters for EnablePullRequestAutoMerge\\"\\"\\"
    input: GithubEnablePullRequestAutoMergeInput!
  ): GithubEnablePullRequestAutoMergePayload

  \\"\\"\\"Follow a user.\\"\\"\\"
  GithubfollowUser(
    \\"\\"\\"Parameters for FollowUser\\"\\"\\"
    input: GithubFollowUserInput!
  ): GithubFollowUserPayload

  \\"\\"\\"Invite someone to become an administrator of the enterprise.\\"\\"\\"
  GithubinviteEnterpriseAdmin(
    \\"\\"\\"Parameters for InviteEnterpriseAdmin\\"\\"\\"
    input: GithubInviteEnterpriseAdminInput!
  ): GithubInviteEnterpriseAdminPayload

  \\"\\"\\"Creates a repository link for a project.\\"\\"\\"
  GithublinkRepositoryToProject(
    \\"\\"\\"Parameters for LinkRepositoryToProject\\"\\"\\"
    input: GithubLinkRepositoryToProjectInput!
  ): GithubLinkRepositoryToProjectPayload

  \\"\\"\\"Lock a lockable object\\"\\"\\"
  GithublockLockable(
    \\"\\"\\"Parameters for LockLockable\\"\\"\\"
    input: GithubLockLockableInput!
  ): GithubLockLockablePayload

  \\"\\"\\"
  Mark a discussion comment as the chosen answer for discussions in an answerable category.
  \\"\\"\\"
  GithubmarkDiscussionCommentAsAnswer(
    \\"\\"\\"Parameters for MarkDiscussionCommentAsAnswer\\"\\"\\"
    input: GithubMarkDiscussionCommentAsAnswerInput!
  ): GithubMarkDiscussionCommentAsAnswerPayload

  \\"\\"\\"Mark a pull request file as viewed\\"\\"\\"
  GithubmarkFileAsViewed(
    \\"\\"\\"Parameters for MarkFileAsViewed\\"\\"\\"
    input: GithubMarkFileAsViewedInput!
  ): GithubMarkFileAsViewedPayload

  \\"\\"\\"Marks a pull request ready for review.\\"\\"\\"
  GithubmarkPullRequestReadyForReview(
    \\"\\"\\"Parameters for MarkPullRequestReadyForReview\\"\\"\\"
    input: GithubMarkPullRequestReadyForReviewInput!
  ): GithubMarkPullRequestReadyForReviewPayload

  \\"\\"\\"Merge a head into a branch.\\"\\"\\"
  GithubmergeBranch(
    \\"\\"\\"Parameters for MergeBranch\\"\\"\\"
    input: GithubMergeBranchInput!
  ): GithubMergeBranchPayload

  \\"\\"\\"Merge a pull request.\\"\\"\\"
  GithubmergePullRequest(
    \\"\\"\\"Parameters for MergePullRequest\\"\\"\\"
    input: GithubMergePullRequestInput!
  ): GithubMergePullRequestPayload

  \\"\\"\\"Minimizes a comment on an Issue, Commit, Pull Request, or Gist\\"\\"\\"
  GithubminimizeComment(
    \\"\\"\\"Parameters for MinimizeComment\\"\\"\\"
    input: GithubMinimizeCommentInput!
  ): GithubMinimizeCommentPayload

  \\"\\"\\"Moves a project card to another place.\\"\\"\\"
  GithubmoveProjectCard(
    \\"\\"\\"Parameters for MoveProjectCard\\"\\"\\"
    input: GithubMoveProjectCardInput!
  ): GithubMoveProjectCardPayload

  \\"\\"\\"Moves a project column to another place.\\"\\"\\"
  GithubmoveProjectColumn(
    \\"\\"\\"Parameters for MoveProjectColumn\\"\\"\\"
    input: GithubMoveProjectColumnInput!
  ): GithubMoveProjectColumnPayload

  \\"\\"\\"Pin an issue to a repository\\"\\"\\"
  GithubpinIssue(
    \\"\\"\\"Parameters for PinIssue\\"\\"\\"
    input: GithubPinIssueInput!
  ): GithubPinIssuePayload

  \\"\\"\\"Regenerates the identity provider recovery codes for an enterprise\\"\\"\\"
  GithubregenerateEnterpriseIdentityProviderRecoveryCodes(
    \\"\\"\\"Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes\\"\\"\\"
    input: GithubRegenerateEnterpriseIdentityProviderRecoveryCodesInput!
  ): GithubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload

  \\"\\"\\"Regenerates a verifiable domain's verification token.\\"\\"\\"
  GithubregenerateVerifiableDomainToken(
    \\"\\"\\"Parameters for RegenerateVerifiableDomainToken\\"\\"\\"
    input: GithubRegenerateVerifiableDomainTokenInput!
  ): GithubRegenerateVerifiableDomainTokenPayload

  \\"\\"\\"Reject all pending deployments under one or more environments\\"\\"\\"
  GithubrejectDeployments(
    \\"\\"\\"Parameters for RejectDeployments\\"\\"\\"
    input: GithubRejectDeploymentsInput!
  ): GithubRejectDeploymentsPayload

  \\"\\"\\"Removes assignees from an assignable object.\\"\\"\\"
  GithubremoveAssigneesFromAssignable(
    \\"\\"\\"Parameters for RemoveAssigneesFromAssignable\\"\\"\\"
    input: GithubRemoveAssigneesFromAssignableInput!
  ): GithubRemoveAssigneesFromAssignablePayload

  \\"\\"\\"Removes an administrator from the enterprise.\\"\\"\\"
  GithubremoveEnterpriseAdmin(
    \\"\\"\\"Parameters for RemoveEnterpriseAdmin\\"\\"\\"
    input: GithubRemoveEnterpriseAdminInput!
  ): GithubRemoveEnterpriseAdminPayload

  \\"\\"\\"Removes the identity provider from an enterprise\\"\\"\\"
  GithubremoveEnterpriseIdentityProvider(
    \\"\\"\\"Parameters for RemoveEnterpriseIdentityProvider\\"\\"\\"
    input: GithubRemoveEnterpriseIdentityProviderInput!
  ): GithubRemoveEnterpriseIdentityProviderPayload

  \\"\\"\\"Removes an organization from the enterprise\\"\\"\\"
  GithubremoveEnterpriseOrganization(
    \\"\\"\\"Parameters for RemoveEnterpriseOrganization\\"\\"\\"
    input: GithubRemoveEnterpriseOrganizationInput!
  ): GithubRemoveEnterpriseOrganizationPayload

  \\"\\"\\"Removes a support entitlement from an enterprise member.\\"\\"\\"
  GithubremoveEnterpriseSupportEntitlement(
    \\"\\"\\"Parameters for RemoveEnterpriseSupportEntitlement\\"\\"\\"
    input: GithubRemoveEnterpriseSupportEntitlementInput!
  ): GithubRemoveEnterpriseSupportEntitlementPayload

  \\"\\"\\"Removes labels from a Labelable object.\\"\\"\\"
  GithubremoveLabelsFromLabelable(
    \\"\\"\\"Parameters for RemoveLabelsFromLabelable\\"\\"\\"
    input: GithubRemoveLabelsFromLabelableInput!
  ): GithubRemoveLabelsFromLabelablePayload

  \\"\\"\\"Removes outside collaborator from all repositories in an organization.\\"\\"\\"
  GithubremoveOutsideCollaborator(
    \\"\\"\\"Parameters for RemoveOutsideCollaborator\\"\\"\\"
    input: GithubRemoveOutsideCollaboratorInput!
  ): GithubRemoveOutsideCollaboratorPayload

  \\"\\"\\"Removes a reaction from a subject.\\"\\"\\"
  GithubremoveReaction(
    \\"\\"\\"Parameters for RemoveReaction\\"\\"\\"
    input: GithubRemoveReactionInput!
  ): GithubRemoveReactionPayload

  \\"\\"\\"Removes a star from a Starrable.\\"\\"\\"
  GithubremoveStar(
    \\"\\"\\"Parameters for RemoveStar\\"\\"\\"
    input: GithubRemoveStarInput!
  ): GithubRemoveStarPayload

  \\"\\"\\"Remove an upvote to a discussion or discussion comment.\\"\\"\\"
  GithubremoveUpvote(
    \\"\\"\\"Parameters for RemoveUpvote\\"\\"\\"
    input: GithubRemoveUpvoteInput!
  ): GithubRemoveUpvotePayload

  \\"\\"\\"Reopen a issue.\\"\\"\\"
  GithubreopenIssue(
    \\"\\"\\"Parameters for ReopenIssue\\"\\"\\"
    input: GithubReopenIssueInput!
  ): GithubReopenIssuePayload

  \\"\\"\\"Reopen a pull request.\\"\\"\\"
  GithubreopenPullRequest(
    \\"\\"\\"Parameters for ReopenPullRequest\\"\\"\\"
    input: GithubReopenPullRequestInput!
  ): GithubReopenPullRequestPayload

  \\"\\"\\"Set review requests on a pull request.\\"\\"\\"
  GithubrequestReviews(
    \\"\\"\\"Parameters for RequestReviews\\"\\"\\"
    input: GithubRequestReviewsInput!
  ): GithubRequestReviewsPayload

  \\"\\"\\"Rerequests an existing check suite.\\"\\"\\"
  GithubrerequestCheckSuite(
    \\"\\"\\"Parameters for RerequestCheckSuite\\"\\"\\"
    input: GithubRerequestCheckSuiteInput!
  ): GithubRerequestCheckSuitePayload

  \\"\\"\\"Marks a review thread as resolved.\\"\\"\\"
  GithubresolveReviewThread(
    \\"\\"\\"Parameters for ResolveReviewThread\\"\\"\\"
    input: GithubResolveReviewThreadInput!
  ): GithubResolveReviewThreadPayload

  \\"\\"\\"Creates or updates the identity provider for an enterprise.\\"\\"\\"
  GithubsetEnterpriseIdentityProvider(
    \\"\\"\\"Parameters for SetEnterpriseIdentityProvider\\"\\"\\"
    input: GithubSetEnterpriseIdentityProviderInput!
  ): GithubSetEnterpriseIdentityProviderPayload

  \\"\\"\\"
  Set an organization level interaction limit for an organization's public repositories.
  \\"\\"\\"
  GithubsetOrganizationInteractionLimit(
    \\"\\"\\"Parameters for SetOrganizationInteractionLimit\\"\\"\\"
    input: GithubSetOrganizationInteractionLimitInput!
  ): GithubSetOrganizationInteractionLimitPayload

  \\"\\"\\"Sets an interaction limit setting for a repository.\\"\\"\\"
  GithubsetRepositoryInteractionLimit(
    \\"\\"\\"Parameters for SetRepositoryInteractionLimit\\"\\"\\"
    input: GithubSetRepositoryInteractionLimitInput!
  ): GithubSetRepositoryInteractionLimitPayload

  \\"\\"\\"Set a user level interaction limit for an user's public repositories.\\"\\"\\"
  GithubsetUserInteractionLimit(
    \\"\\"\\"Parameters for SetUserInteractionLimit\\"\\"\\"
    input: GithubSetUserInteractionLimitInput!
  ): GithubSetUserInteractionLimitPayload

  \\"\\"\\"Submits a pending pull request review.\\"\\"\\"
  GithubsubmitPullRequestReview(
    \\"\\"\\"Parameters for SubmitPullRequestReview\\"\\"\\"
    input: GithubSubmitPullRequestReviewInput!
  ): GithubSubmitPullRequestReviewPayload

  \\"\\"\\"Transfer an issue to a different repository\\"\\"\\"
  GithubtransferIssue(
    \\"\\"\\"Parameters for TransferIssue\\"\\"\\"
    input: GithubTransferIssueInput!
  ): GithubTransferIssuePayload

  \\"\\"\\"Unarchives a repository.\\"\\"\\"
  GithubunarchiveRepository(
    \\"\\"\\"Parameters for UnarchiveRepository\\"\\"\\"
    input: GithubUnarchiveRepositoryInput!
  ): GithubUnarchiveRepositoryPayload

  \\"\\"\\"Unfollow a user.\\"\\"\\"
  GithubunfollowUser(
    \\"\\"\\"Parameters for UnfollowUser\\"\\"\\"
    input: GithubUnfollowUserInput!
  ): GithubUnfollowUserPayload

  \\"\\"\\"Deletes a repository link from a project.\\"\\"\\"
  GithubunlinkRepositoryFromProject(
    \\"\\"\\"Parameters for UnlinkRepositoryFromProject\\"\\"\\"
    input: GithubUnlinkRepositoryFromProjectInput!
  ): GithubUnlinkRepositoryFromProjectPayload

  \\"\\"\\"Unlock a lockable object\\"\\"\\"
  GithubunlockLockable(
    \\"\\"\\"Parameters for UnlockLockable\\"\\"\\"
    input: GithubUnlockLockableInput!
  ): GithubUnlockLockablePayload

  \\"\\"\\"
  Unmark a discussion comment as the chosen answer for discussions in an answerable category.
  \\"\\"\\"
  GithubunmarkDiscussionCommentAsAnswer(
    \\"\\"\\"Parameters for UnmarkDiscussionCommentAsAnswer\\"\\"\\"
    input: GithubUnmarkDiscussionCommentAsAnswerInput!
  ): GithubUnmarkDiscussionCommentAsAnswerPayload

  \\"\\"\\"Unmark a pull request file as viewed\\"\\"\\"
  GithubunmarkFileAsViewed(
    \\"\\"\\"Parameters for UnmarkFileAsViewed\\"\\"\\"
    input: GithubUnmarkFileAsViewedInput!
  ): GithubUnmarkFileAsViewedPayload

  \\"\\"\\"Unmark an issue as a duplicate of another issue.\\"\\"\\"
  GithubunmarkIssueAsDuplicate(
    \\"\\"\\"Parameters for UnmarkIssueAsDuplicate\\"\\"\\"
    input: GithubUnmarkIssueAsDuplicateInput!
  ): GithubUnmarkIssueAsDuplicatePayload

  \\"\\"\\"Unminimizes a comment on an Issue, Commit, Pull Request, or Gist\\"\\"\\"
  GithubunminimizeComment(
    \\"\\"\\"Parameters for UnminimizeComment\\"\\"\\"
    input: GithubUnminimizeCommentInput!
  ): GithubUnminimizeCommentPayload

  \\"\\"\\"Unpin a pinned issue from a repository\\"\\"\\"
  GithubunpinIssue(
    \\"\\"\\"Parameters for UnpinIssue\\"\\"\\"
    input: GithubUnpinIssueInput!
  ): GithubUnpinIssuePayload

  \\"\\"\\"Marks a review thread as unresolved.\\"\\"\\"
  GithubunresolveReviewThread(
    \\"\\"\\"Parameters for UnresolveReviewThread\\"\\"\\"
    input: GithubUnresolveReviewThreadInput!
  ): GithubUnresolveReviewThreadPayload

  \\"\\"\\"Create a new branch protection rule\\"\\"\\"
  GithubupdateBranchProtectionRule(
    \\"\\"\\"Parameters for UpdateBranchProtectionRule\\"\\"\\"
    input: GithubUpdateBranchProtectionRuleInput!
  ): GithubUpdateBranchProtectionRulePayload

  \\"\\"\\"Update a check run\\"\\"\\"
  GithubupdateCheckRun(
    \\"\\"\\"Parameters for UpdateCheckRun\\"\\"\\"
    input: GithubUpdateCheckRunInput!
  ): GithubUpdateCheckRunPayload

  \\"\\"\\"Modifies the settings of an existing check suite\\"\\"\\"
  GithubupdateCheckSuitePreferences(
    \\"\\"\\"Parameters for UpdateCheckSuitePreferences\\"\\"\\"
    input: GithubUpdateCheckSuitePreferencesInput!
  ): GithubUpdateCheckSuitePreferencesPayload

  \\"\\"\\"Update a discussion\\"\\"\\"
  GithubupdateDiscussion(
    \\"\\"\\"Parameters for UpdateDiscussion\\"\\"\\"
    input: GithubUpdateDiscussionInput!
  ): GithubUpdateDiscussionPayload

  \\"\\"\\"Update the contents of a comment on a Discussion\\"\\"\\"
  GithubupdateDiscussionComment(
    \\"\\"\\"Parameters for UpdateDiscussionComment\\"\\"\\"
    input: GithubUpdateDiscussionCommentInput!
  ): GithubUpdateDiscussionCommentPayload

  \\"\\"\\"Updates the role of an enterprise administrator.\\"\\"\\"
  GithubupdateEnterpriseAdministratorRole(
    \\"\\"\\"Parameters for UpdateEnterpriseAdministratorRole\\"\\"\\"
    input: GithubUpdateEnterpriseAdministratorRoleInput!
  ): GithubUpdateEnterpriseAdministratorRolePayload

  \\"\\"\\"Sets whether private repository forks are enabled for an enterprise.\\"\\"\\"
  GithubupdateEnterpriseAllowPrivateRepositoryForkingSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting\\"\\"\\"
    input: GithubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!
  ): GithubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload

  \\"\\"\\"
  Sets the base repository permission for organizations in an enterprise.
  \\"\\"\\"
  GithubupdateEnterpriseDefaultRepositoryPermissionSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting\\"\\"\\"
    input: GithubUpdateEnterpriseDefaultRepositoryPermissionSettingInput!
  ): GithubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload

  \\"\\"\\"
  Sets whether organization members with admin permissions on a repository can change repository visibility.
  \\"\\"\\"
  GithubupdateEnterpriseMembersCanChangeRepositoryVisibilitySetting(
    \\"\\"\\"
    Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
    \\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!
  ): GithubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload

  \\"\\"\\"Sets the members can create repositories setting for an enterprise.\\"\\"\\"
  GithubupdateEnterpriseMembersCanCreateRepositoriesSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting\\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput!
  ): GithubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload

  \\"\\"\\"Sets the members can delete issues setting for an enterprise.\\"\\"\\"
  GithubupdateEnterpriseMembersCanDeleteIssuesSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting\\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanDeleteIssuesSettingInput!
  ): GithubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload

  \\"\\"\\"Sets the members can delete repositories setting for an enterprise.\\"\\"\\"
  GithubupdateEnterpriseMembersCanDeleteRepositoriesSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting\\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!
  ): GithubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload

  \\"\\"\\"
  Sets whether members can invite collaborators are enabled for an enterprise.
  \\"\\"\\"
  GithubupdateEnterpriseMembersCanInviteCollaboratorsSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting\\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!
  ): GithubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload

  \\"\\"\\"Sets whether or not an organization admin can make purchases.\\"\\"\\"
  GithubupdateEnterpriseMembersCanMakePurchasesSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting\\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanMakePurchasesSettingInput!
  ): GithubUpdateEnterpriseMembersCanMakePurchasesSettingPayload

  \\"\\"\\"
  Sets the members can update protected branches setting for an enterprise.
  \\"\\"\\"
  GithubupdateEnterpriseMembersCanUpdateProtectedBranchesSetting(
    \\"\\"\\"
    Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
    \\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!
  ): GithubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload

  \\"\\"\\"Sets the members can view dependency insights for an enterprise.\\"\\"\\"
  GithubupdateEnterpriseMembersCanViewDependencyInsightsSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting\\"\\"\\"
    input: GithubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!
  ): GithubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload

  \\"\\"\\"Sets whether organization projects are enabled for an enterprise.\\"\\"\\"
  GithubupdateEnterpriseOrganizationProjectsSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseOrganizationProjectsSetting\\"\\"\\"
    input: GithubUpdateEnterpriseOrganizationProjectsSettingInput!
  ): GithubUpdateEnterpriseOrganizationProjectsSettingPayload

  \\"\\"\\"Updates an enterprise's profile.\\"\\"\\"
  GithubupdateEnterpriseProfile(
    \\"\\"\\"Parameters for UpdateEnterpriseProfile\\"\\"\\"
    input: GithubUpdateEnterpriseProfileInput!
  ): GithubUpdateEnterpriseProfilePayload

  \\"\\"\\"Sets whether repository projects are enabled for a enterprise.\\"\\"\\"
  GithubupdateEnterpriseRepositoryProjectsSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseRepositoryProjectsSetting\\"\\"\\"
    input: GithubUpdateEnterpriseRepositoryProjectsSettingInput!
  ): GithubUpdateEnterpriseRepositoryProjectsSettingPayload

  \\"\\"\\"Sets whether team discussions are enabled for an enterprise.\\"\\"\\"
  GithubupdateEnterpriseTeamDiscussionsSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseTeamDiscussionsSetting\\"\\"\\"
    input: GithubUpdateEnterpriseTeamDiscussionsSettingInput!
  ): GithubUpdateEnterpriseTeamDiscussionsSettingPayload

  \\"\\"\\"
  Sets whether two factor authentication is required for all users in an enterprise.
  \\"\\"\\"
  GithubupdateEnterpriseTwoFactorAuthenticationRequiredSetting(
    \\"\\"\\"Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting\\"\\"\\"
    input: GithubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!
  ): GithubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload

  \\"\\"\\"Updates an environment.\\"\\"\\"
  GithubupdateEnvironment(
    \\"\\"\\"Parameters for UpdateEnvironment\\"\\"\\"
    input: GithubUpdateEnvironmentInput!
  ): GithubUpdateEnvironmentPayload

  \\"\\"\\"Sets whether an IP allow list is enabled on an owner.\\"\\"\\"
  GithubupdateIpAllowListEnabledSetting(
    \\"\\"\\"Parameters for UpdateIpAllowListEnabledSetting\\"\\"\\"
    input: GithubUpdateIpAllowListEnabledSettingInput!
  ): GithubUpdateIpAllowListEnabledSettingPayload

  \\"\\"\\"Updates an IP allow list entry.\\"\\"\\"
  GithubupdateIpAllowListEntry(
    \\"\\"\\"Parameters for UpdateIpAllowListEntry\\"\\"\\"
    input: GithubUpdateIpAllowListEntryInput!
  ): GithubUpdateIpAllowListEntryPayload

  \\"\\"\\"Updates an Issue.\\"\\"\\"
  GithubupdateIssue(
    \\"\\"\\"Parameters for UpdateIssue\\"\\"\\"
    input: GithubUpdateIssueInput!
  ): GithubUpdateIssuePayload

  \\"\\"\\"Updates an IssueComment object.\\"\\"\\"
  GithubupdateIssueComment(
    \\"\\"\\"Parameters for UpdateIssueComment\\"\\"\\"
    input: GithubUpdateIssueCommentInput!
  ): GithubUpdateIssueCommentPayload

  \\"\\"\\"
  Update the setting to restrict notifications to only verified or approved domains available to an owner.
  \\"\\"\\"
  GithubupdateNotificationRestrictionSetting(
    \\"\\"\\"Parameters for UpdateNotificationRestrictionSetting\\"\\"\\"
    input: GithubUpdateNotificationRestrictionSettingInput!
  ): GithubUpdateNotificationRestrictionSettingPayload

  \\"\\"\\"Updates an existing project.\\"\\"\\"
  GithubupdateProject(
    \\"\\"\\"Parameters for UpdateProject\\"\\"\\"
    input: GithubUpdateProjectInput!
  ): GithubUpdateProjectPayload

  \\"\\"\\"Updates an existing project card.\\"\\"\\"
  GithubupdateProjectCard(
    \\"\\"\\"Parameters for UpdateProjectCard\\"\\"\\"
    input: GithubUpdateProjectCardInput!
  ): GithubUpdateProjectCardPayload

  \\"\\"\\"Updates an existing project column.\\"\\"\\"
  GithubupdateProjectColumn(
    \\"\\"\\"Parameters for UpdateProjectColumn\\"\\"\\"
    input: GithubUpdateProjectColumnInput!
  ): GithubUpdateProjectColumnPayload

  \\"\\"\\"Update a pull request\\"\\"\\"
  GithubupdatePullRequest(
    \\"\\"\\"Parameters for UpdatePullRequest\\"\\"\\"
    input: GithubUpdatePullRequestInput!
  ): GithubUpdatePullRequestPayload

  \\"\\"\\"Updates the body of a pull request review.\\"\\"\\"
  GithubupdatePullRequestReview(
    \\"\\"\\"Parameters for UpdatePullRequestReview\\"\\"\\"
    input: GithubUpdatePullRequestReviewInput!
  ): GithubUpdatePullRequestReviewPayload

  \\"\\"\\"Updates a pull request review comment.\\"\\"\\"
  GithubupdatePullRequestReviewComment(
    \\"\\"\\"Parameters for UpdatePullRequestReviewComment\\"\\"\\"
    input: GithubUpdatePullRequestReviewCommentInput!
  ): GithubUpdatePullRequestReviewCommentPayload

  \\"\\"\\"Update a Git Ref.\\"\\"\\"
  GithubupdateRef(
    \\"\\"\\"Parameters for UpdateRef\\"\\"\\"
    input: GithubUpdateRefInput!
  ): GithubUpdateRefPayload

  \\"\\"\\"Update information about a repository.\\"\\"\\"
  GithubupdateRepository(
    \\"\\"\\"Parameters for UpdateRepository\\"\\"\\"
    input: GithubUpdateRepositoryInput!
  ): GithubUpdateRepositoryPayload

  \\"\\"\\"Updates the state for subscribable subjects.\\"\\"\\"
  GithubupdateSubscription(
    \\"\\"\\"Parameters for UpdateSubscription\\"\\"\\"
    input: GithubUpdateSubscriptionInput!
  ): GithubUpdateSubscriptionPayload

  \\"\\"\\"Updates a team discussion.\\"\\"\\"
  GithubupdateTeamDiscussion(
    \\"\\"\\"Parameters for UpdateTeamDiscussion\\"\\"\\"
    input: GithubUpdateTeamDiscussionInput!
  ): GithubUpdateTeamDiscussionPayload

  \\"\\"\\"Updates a discussion comment.\\"\\"\\"
  GithubupdateTeamDiscussionComment(
    \\"\\"\\"Parameters for UpdateTeamDiscussionComment\\"\\"\\"
    input: GithubUpdateTeamDiscussionCommentInput!
  ): GithubUpdateTeamDiscussionCommentPayload

  \\"\\"\\"Replaces the repository's topics with the given topics.\\"\\"\\"
  GithubupdateTopics(
    \\"\\"\\"Parameters for UpdateTopics\\"\\"\\"
    input: GithubUpdateTopicsInput!
  ): GithubUpdateTopicsPayload

  \\"\\"\\"Verify that a verifiable domain has the expected DNS record.\\"\\"\\"
  GithubverifyVerifiableDomain(
    \\"\\"\\"Parameters for VerifyVerifiableDomain\\"\\"\\"
    input: GithubVerifyVerifiableDomainInput!
  ): GithubVerifyVerifiableDomainPayload

  \\"\\"\\"Creates a single \`City\`.\\"\\"\\"
  createCity(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoCreateCityInput!
  ): GeoCreateCityPayload

  \\"\\"\\"Creates a single \`Country\`.\\"\\"\\"
  createCountry(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoCreateCountryInput!
  ): GeoCreateCountryPayload

  \\"\\"\\"Creates a single \`Countrylanguage\`.\\"\\"\\"
  createCountrylanguage(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoCreateCountrylanguageInput!
  ): GeoCreateCountrylanguagePayload

  \\"\\"\\"Deletes a single \`City\` using its globally unique id.\\"\\"\\"
  deleteCity(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoDeleteCityInput!
  ): GeoDeleteCityPayload

  \\"\\"\\"Deletes a single \`City\` using a unique key.\\"\\"\\"
  deleteCityById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoDeleteCityByIdInput!
  ): GeoDeleteCityPayload

  \\"\\"\\"Deletes a single \`Country\` using its globally unique id.\\"\\"\\"
  deleteCountry(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoDeleteCountryInput!
  ): GeoDeleteCountryPayload

  \\"\\"\\"Deletes a single \`Country\` using a unique key.\\"\\"\\"
  deleteCountryByCode(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoDeleteCountryByCodeInput!
  ): GeoDeleteCountryPayload

  \\"\\"\\"Deletes a single \`Countrylanguage\` using its globally unique id.\\"\\"\\"
  deleteCountrylanguage(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoDeleteCountrylanguageInput!
  ): GeoDeleteCountrylanguagePayload

  \\"\\"\\"Deletes a single \`Countrylanguage\` using a unique key.\\"\\"\\"
  deleteCountrylanguageByCountrycodeAndLanguage(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoDeleteCountrylanguageByCountrycodeAndLanguageInput!
  ): GeoDeleteCountrylanguagePayload

  \\"\\"\\"Updates a single \`City\` using its globally unique id and a patch.\\"\\"\\"
  updateCity(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoUpdateCityInput!
  ): GeoUpdateCityPayload

  \\"\\"\\"Updates a single \`City\` using a unique key and a patch.\\"\\"\\"
  updateCityById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoUpdateCityByIdInput!
  ): GeoUpdateCityPayload

  \\"\\"\\"Updates a single \`Country\` using its globally unique id and a patch.\\"\\"\\"
  updateCountry(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoUpdateCountryInput!
  ): GeoUpdateCountryPayload

  \\"\\"\\"Updates a single \`Country\` using a unique key and a patch.\\"\\"\\"
  updateCountryByCode(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoUpdateCountryByCodeInput!
  ): GeoUpdateCountryPayload

  \\"\\"\\"
  Updates a single \`Countrylanguage\` using its globally unique id and a patch.
  \\"\\"\\"
  updateCountrylanguage(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoUpdateCountrylanguageInput!
  ): GeoUpdateCountrylanguagePayload

  \\"\\"\\"Updates a single \`Countrylanguage\` using a unique key and a patch.\\"\\"\\"
  updateCountrylanguageByCountrycodeAndLanguage(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: GeoUpdateCountrylanguageByCountrycodeAndLanguageInput!
  ): GeoUpdateCountrylanguagePayload
}

\\"\\"\\"The query root of GitHub's GraphQL interface.\\"\\"\\"
type Query implements GeoNode {
  \\"\\"\\"Look up a code of conduct by its key\\"\\"\\"
  GithubcodeOfConduct(
    \\"\\"\\"The code of conduct's key\\"\\"\\"
    key: String!
  ): GithubCodeOfConduct

  \\"\\"\\"Look up a code of conduct by its key\\"\\"\\"
  GithubcodesOfConduct: [GithubCodeOfConduct]

  \\"\\"\\"Look up an enterprise by URL slug.\\"\\"\\"
  Githubenterprise(
    \\"\\"\\"The enterprise invitation token.\\"\\"\\"
    invitationToken: String

    \\"\\"\\"The enterprise URL slug.\\"\\"\\"
    slug: String!
  ): GithubEnterprise

  \\"\\"\\"
  Look up a pending enterprise administrator invitation by invitee, enterprise and role.
  \\"\\"\\"
  GithubenterpriseAdministratorInvitation(
    \\"\\"\\"The slug of the enterprise the user was invited to join.\\"\\"\\"
    enterpriseSlug: String!

    \\"\\"\\"The role for the business member invitation.\\"\\"\\"
    role: GithubEnterpriseAdministratorRole!

    \\"\\"\\"The login of the user invited to join the business.\\"\\"\\"
    userLogin: String!
  ): GithubEnterpriseAdministratorInvitation

  \\"\\"\\"
  Look up a pending enterprise administrator invitation by invitation token.
  \\"\\"\\"
  GithubenterpriseAdministratorInvitationByToken(
    \\"\\"\\"The invitation token sent with the invitation email.\\"\\"\\"
    invitationToken: String!
  ): GithubEnterpriseAdministratorInvitation

  \\"\\"\\"Look up an open source license by its key\\"\\"\\"
  Githublicense(
    \\"\\"\\"The license's downcased SPDX ID\\"\\"\\"
    key: String!
  ): GithubLicense

  \\"\\"\\"Return a list of known open source licenses\\"\\"\\"
  Githublicenses: [GithubLicense]!

  \\"\\"\\"Get alphabetically sorted list of Marketplace categories\\"\\"\\"
  GithubmarketplaceCategories(
    \\"\\"\\"Exclude categories with no listings.\\"\\"\\"
    excludeEmpty: Boolean

    \\"\\"\\"Returns top level categories only, excluding any subcategories.\\"\\"\\"
    excludeSubcategories: Boolean

    \\"\\"\\"Return only the specified categories.\\"\\"\\"
    includeCategories: [String!]
  ): [GithubMarketplaceCategory!]!

  \\"\\"\\"Look up a Marketplace category by its slug.\\"\\"\\"
  GithubmarketplaceCategory(
    \\"\\"\\"The URL slug of the category.\\"\\"\\"
    slug: String!

    \\"\\"\\"Also check topic aliases for the category slug\\"\\"\\"
    useTopicAliases: Boolean
  ): GithubMarketplaceCategory

  \\"\\"\\"Look up a single Marketplace listing\\"\\"\\"
  GithubmarketplaceListing(
    \\"\\"\\"
    Select the listing that matches this slug. It's the short name of the listing used in its URL.
    \\"\\"\\"
    slug: String!
  ): GithubMarketplaceListing

  \\"\\"\\"Look up Marketplace listings\\"\\"\\"
  GithubmarketplaceListings(
    \\"\\"\\"Select listings that can be administered by the specified user.\\"\\"\\"
    adminId: ID

    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Select listings visible to the viewer even if they are not approved. If omitted or
    false, only approved listings will be returned.
    
    \\"\\"\\"
    allStates: Boolean

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Select only listings with the given category.\\"\\"\\"
    categorySlug: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Select listings for products owned by the specified organization.\\"\\"\\"
    organizationId: ID

    \\"\\"\\"
    Select only listings where the primary category matches the given category slug.
    \\"\\"\\"
    primaryCategoryOnly: Boolean = false

    \\"\\"\\"
    Select the listings with these slugs, if they are visible to the viewer.
    \\"\\"\\"
    slugs: [String]

    \\"\\"\\"Also check topic aliases for the category slug\\"\\"\\"
    useTopicAliases: Boolean

    \\"\\"\\"
    Select listings to which user has admin access. If omitted, listings visible to the
    viewer are returned.
    
    \\"\\"\\"
    viewerCanAdmin: Boolean

    \\"\\"\\"Select only listings that offer a free trial.\\"\\"\\"
    withFreeTrialsOnly: Boolean = false
  ): GithubMarketplaceListingConnection!

  \\"\\"\\"Return information about the GitHub instance\\"\\"\\"
  Githubmeta: GithubGitHubMetadata!

  \\"\\"\\"Fetches an object given its ID.\\"\\"\\"
  Githubnode(
    \\"\\"\\"ID of the object.\\"\\"\\"
    id: ID!
  ): GithubNode

  \\"\\"\\"Lookup nodes by a list of IDs.\\"\\"\\"
  Githubnodes(
    \\"\\"\\"The list of node IDs.\\"\\"\\"
    ids: [ID!]!
  ): [GithubNode]!

  \\"\\"\\"Lookup a organization by login.\\"\\"\\"
  Githuborganization(
    \\"\\"\\"The organization's login.\\"\\"\\"
    login: String!
  ): GithubOrganization

  \\"\\"\\"The client's rate limit information.\\"\\"\\"
  GithubrateLimit(
    \\"\\"\\"If true, calculate the cost for the query without evaluating it\\"\\"\\"
    dryRun: Boolean = false
  ): GithubRateLimit

  \\"\\"\\"
  Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
  \\"\\"\\"
  Githubrelay: Query!

  \\"\\"\\"Lookup a given repository by the owner and repository name.\\"\\"\\"
  Githubrepository(
    \\"\\"\\"The name of the repository\\"\\"\\"
    name: String!

    \\"\\"\\"The login field of a user or organization\\"\\"\\"
    owner: String!
  ): GithubRepository

  \\"\\"\\"
  Lookup a repository owner (ie. either a User or an Organization) by login.
  \\"\\"\\"
  GithubrepositoryOwner(
    \\"\\"\\"The username to lookup the owner by.\\"\\"\\"
    login: String!
  ): GithubRepositoryOwner

  \\"\\"\\"Lookup resource by a URL.\\"\\"\\"
  Githubresource(
    \\"\\"\\"The URL.\\"\\"\\"
    url: GithubURI!
  ): GithubUniformResourceLocatable

  \\"\\"\\"Perform a search across resources.\\"\\"\\"
  Githubsearch(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"The search string to look for.\\"\\"\\"
    query: String!

    \\"\\"\\"The types of search items to search within.\\"\\"\\"
    type: GithubSearchType!
  ): GithubSearchResultItemConnection!

  \\"\\"\\"GitHub Security Advisories\\"\\"\\"
  GithubsecurityAdvisories(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Filter advisories by identifier, e.g. GHSA or CVE.\\"\\"\\"
    identifier: GithubSecurityAdvisoryIdentifierFilter

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for the returned topics.\\"\\"\\"
    orderBy: GithubSecurityAdvisoryOrder = {direction: DESC, field: UPDATED_AT}

    \\"\\"\\"Filter advisories to those published since a time in the past.\\"\\"\\"
    publishedSince: GithubDateTime

    \\"\\"\\"Filter advisories to those updated since a time in the past.\\"\\"\\"
    updatedSince: GithubDateTime
  ): GithubSecurityAdvisoryConnection!

  \\"\\"\\"Fetch a Security Advisory by its GHSA ID\\"\\"\\"
  GithubsecurityAdvisory(
    \\"\\"\\"GitHub Security Advisory ID.\\"\\"\\"
    ghsaId: String!
  ): GithubSecurityAdvisory

  \\"\\"\\"Software Vulnerabilities documented by GitHub Security Advisories\\"\\"\\"
  GithubsecurityVulnerabilities(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"An ecosystem to filter vulnerabilities by.\\"\\"\\"
    ecosystem: GithubSecurityAdvisoryEcosystem

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"Ordering options for the returned topics.\\"\\"\\"
    orderBy: GithubSecurityVulnerabilityOrder = {direction: DESC, field: UPDATED_AT}

    \\"\\"\\"A package name to filter vulnerabilities by.\\"\\"\\"
    package: String

    \\"\\"\\"A list of severities to filter vulnerabilities by.\\"\\"\\"
    severities: [GithubSecurityAdvisorySeverity!]
  ): GithubSecurityVulnerabilityConnection!

  \\"\\"\\"Users and organizations who can be sponsored via GitHub Sponsors.\\"\\"\\"
  Githubsponsorables(
    \\"\\"\\"Returns the elements in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"
    Returns the elements in the list that come before the specified cursor.
    \\"\\"\\"
    before: String

    \\"\\"\\"
    Optional filter for which dependencies should be checked for sponsorable owners. Only sponsorable owners of dependencies in this ecosystem will be included. Used when onlyDependencies = true.
    \\"\\"\\"
    dependencyEcosystem: GithubSecurityAdvisoryEcosystem

    \\"\\"\\"Returns the first _n_ elements from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the last _n_ elements from the list.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Whether only sponsorables who own the viewer's dependencies will be returned. Must be authenticated to use. Can check an organization instead for their dependencies owned by sponsorables by passing orgLoginForDependencies.
    \\"\\"\\"
    onlyDependencies: Boolean = false

    \\"\\"\\"
    Ordering options for users and organizations returned from the connection.
    \\"\\"\\"
    orderBy: GithubSponsorableOrder = {direction: ASC, field: LOGIN}

    \\"\\"\\"
    Optional organization username for whose dependencies should be checked. Used when onlyDependencies = true. Omit to check your own dependencies. If you are not an administrator of the organization, only dependencies from its public repositories will be considered.
    \\"\\"\\"
    orgLoginForDependencies: String
  ): GithubSponsorableItemConnection!

  \\"\\"\\"Look up a single Sponsors Listing\\"\\"\\"
  GithubsponsorsListing(
    \\"\\"\\"Select the Sponsors listing which matches this slug\\"\\"\\"
    slug: String!
  ): GithubSponsorsListing @deprecated(reason: \\"\`Query.sponsorsListing\` will be removed. Use \`Sponsorable.sponsorsListing\` instead. Removal on 2020-04-01 UTC.\\")

  \\"\\"\\"Look up a topic by name.\\"\\"\\"
  Githubtopic(
    \\"\\"\\"The topic's name.\\"\\"\\"
    name: String!
  ): GithubTopic

  \\"\\"\\"Lookup a user by login.\\"\\"\\"
  Githubuser(
    \\"\\"\\"The user's login.\\"\\"\\"
    login: String!
  ): GithubUser

  \\"\\"\\"The currently authenticated user.\\"\\"\\"
  Githubviewer: GithubUser!

  \\"\\"\\"Reads and enables pagination through a set of \`City\`.\\"\\"\\"
  allCities(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCityCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`City\`.\\"\\"\\"
    orderBy: [GeoCitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCitiesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Country\`.\\"\\"\\"
  allCountries(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCountryCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Country\`.\\"\\"\\"
    orderBy: [GeoCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountriesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Countrylanguage\`.\\"\\"\\"
  allCountrylanguages(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCountrylanguageCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Countrylanguage\`.\\"\\"\\"
    orderBy: [GeoCountrylanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountrylanguagesConnection

  \\"\\"\\"Reads a single \`City\` using its globally unique \`ID\`.\\"\\"\\"
  city(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`City\`.\\"\\"\\"
    nodeId: ID!
  ): GeoCity
  cityById(id: Int!): GeoCity

  \\"\\"\\"Reads a single \`Country\` using its globally unique \`ID\`.\\"\\"\\"
  country(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Country\`.\\"\\"\\"
    nodeId: ID!
  ): GeoCountry
  countryByCode(code: String!): GeoCountry

  \\"\\"\\"Reads a single \`Countrylanguage\` using its globally unique \`ID\`.\\"\\"\\"
  countrylanguage(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Countrylanguage\`.
    \\"\\"\\"
    nodeId: ID!
  ): GeoCountrylanguage
  countrylanguageByCountrycodeAndLanguage(countrycode: String!, language: String!): GeoCountrylanguage

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): GeoNode

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
}

\\"\\"\\"
The root subscription type: contains events and live queries you can subscribe to with the \`subscription\` operation.

#### Live Queries

Live query fields are differentiated by containing \`(live)\` at the end of their
description, they are added for each field in the \`Query\` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\\\\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\\\\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
\\"\\"\\"
type Subscription {
  \\"\\"\\"Reads and enables pagination through a set of \`City\`. (live)\\"\\"\\"
  allCities(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCityCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`City\`.\\"\\"\\"
    orderBy: [GeoCitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCitiesConnection

  \\"\\"\\"Reads and enables pagination through a set of \`Country\`. (live)\\"\\"\\"
  allCountries(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCountryCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Country\`.\\"\\"\\"
    orderBy: [GeoCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountriesConnection

  \\"\\"\\"
  Reads and enables pagination through a set of \`Countrylanguage\`. (live)
  \\"\\"\\"
  allCountrylanguages(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: GeoCursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: GeoCursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GeoCountrylanguageCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Countrylanguage\`.\\"\\"\\"
    orderBy: [GeoCountrylanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeoCountrylanguagesConnection

  \\"\\"\\"Reads a single \`City\` using its globally unique \`ID\`. (live)\\"\\"\\"
  city(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`City\`.\\"\\"\\"
    nodeId: ID!
  ): GeoCity

  \\"\\"\\" (live)\\"\\"\\"
  cityById(id: Int!): GeoCity

  \\"\\"\\"Reads a single \`Country\` using its globally unique \`ID\`. (live)\\"\\"\\"
  country(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Country\`.\\"\\"\\"
    nodeId: ID!
  ): GeoCountry

  \\"\\"\\" (live)\\"\\"\\"
  countryByCode(code: String!): GeoCountry

  \\"\\"\\"
  Reads a single \`Countrylanguage\` using its globally unique \`ID\`. (live)
  \\"\\"\\"
  countrylanguage(
    \\"\\"\\"
    The globally unique \`ID\` to be used in selecting a single \`Countrylanguage\`.
    \\"\\"\\"
    nodeId: ID!
  ): GeoCountrylanguage

  \\"\\"\\" (live)\\"\\"\\"
  countrylanguageByCountrycodeAndLanguage(countrycode: String!, language: String!): GeoCountrylanguage

  \\"\\"\\"Fetches an object given its globally unique \`ID\`. (live)\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): GeoNode

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`. (live)
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  \\"\\"\\"
  query: Query!
}
"
`;

exports[`PostgresGeoDB should give correct response for example queries: test.query.graphql-query-result 1`] = `
Object {
  "data": Object {
    "allCities": Object {
      "nodes": Array [
        Object {
          "countrycode": "GBR",
          "developers": Object {
            "nodes": Array [
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/25254?u=d332bdd6d335df9f08e7cdac0e17143d898ec70d&v=4",
                "id": "MDQ6VXNlcjI1MjU0",
                "login": "tj",
                "name": "TJ Holowaychuk",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/227486?v=4",
                "id": "MDQ6VXNlcjIyNzQ4Ng==",
                "login": "chrisbanes",
                "name": "Chris Banes",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/97088?u=f8156684506d77fd89ba332dc677b07352a0b790&v=4",
                "id": "MDQ6VXNlcjk3MDg4",
                "login": "mrdoob",
                "name": "Mr.doob",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/1305617?u=25309b5502674f2627fdc109c52522daed0e3d6d&v=4",
                "id": "MDQ6VXNlcjEzMDU2MTc=",
                "login": "jlord",
                "name": "Jessica Lord",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/439365?u=0e5f5555da75f83ca50a083072336bcd58ff038f&v=4",
                "id": "MDQ6VXNlcjQzOTM2NQ==",
                "login": "daneden",
                "name": "Daniel Eden",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/8798027?u=9dfe78c98a6fdf4d5814f1ebf1ee5c19bd7277a9&v=4",
                "id": "MDQ6VXNlcjg3OTgwMjc=",
                "login": "angelabauer",
                "name": "Angela Yu",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/546885?u=b766e4373e4d97b103ef19391d409b6ed9bb5c37&v=4",
                "id": "MDQ6VXNlcjU0Njg4NQ==",
                "login": "nicklockwood",
                "name": "Nick Lockwood",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/17011?v=4",
                "id": "MDQ6VXNlcjE3MDEx",
                "login": "jskeet",
                "name": "Jon Skeet",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/6673982?u=e3eed7a19ca3ce58e579a4e720dd0601c3bd29d1&v=4",
                "id": "MDQ6VXNlcjY2NzM5ODI=",
                "login": "MichalPaszkiewicz",
                "name": "Michal Paszkiewicz",
              },
              Object {
                "avatarUrl": "https://avatars.githubusercontent.com/u/1254808?u=1d9df343bac6f57e7bff85f0074aac2de34f5dcc&v=4",
                "id": "MDQ6VXNlcjEyNTQ4MDg=",
                "login": "jgthms",
                "name": "Jeremy Thomas",
              },
            ],
          },
          "district": "England",
          "name": "London",
        },
      ],
    },
  },
}
`;
