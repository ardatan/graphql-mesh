// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Neo4j should generate correct schema 1`] = `
"schema @transport(kind: "neo4j", subgraph: "Neo4j", location: "neo4j+s://demo.neo4jlabs.com", options: {database: "movies", auth: {type: "basic", username: "movies", password: "movies"}}) {
  query: Query
  mutation: Mutation
}

directive @introspection(subgraph: String) on ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @node on OBJECT

directive @relationship(direction: _RelationDirections, properties: String, type: String) on FIELD_DEFINITION

directive @relationshipProperties on OBJECT

directive @transport(kind: String, location: String, options: TransportOptions, subgraph: String) on SCHEMA

"""
The edge properties for the following fields:
* Movie.peopleActedIn
* Person.actedInMovies
"""
type ActedInProperties @relationshipProperties @introspection {
  roles: [String!]! @introspection
}

input ActedInPropertiesCreateInput {
  roles: [String!]!
}

input ActedInPropertiesSort {
  roles: SortDirection
}

input ActedInPropertiesUpdateInput {
  roles: ListStringMutations
  roles_POP: Int @deprecated(reason: "Please use the generic mutation 'roles: { pop: ... } }' instead.")
  roles_PUSH: [String!] @deprecated(reason: "Please use the generic mutation 'roles: { push: ... } }' instead.")
  roles_SET: [String!]
}

input ActedInPropertiesWhere {
  AND: [ActedInPropertiesWhere!]
  NOT: ActedInPropertiesWhere
  OR: [ActedInPropertiesWhere!]
  roles: StringListFilters
  roles_EQ: [String!] @deprecated(reason: "Please use the relevant generic filter roles: { eq: ... }")
  roles_INCLUDES: String @deprecated(reason: "Please use the relevant generic filter roles: { includes: ... }")
}

"""
A BigInt value up to 64 bits in size, which can be a number or a string if used inline, or a string only if used as a variable. Always returned as a string.
"""
scalar BigInt

type BigIntAggregateSelection {
  average: BigInt
  max: BigInt
  min: BigInt
  sum: BigInt
}

"""Filters for an aggregation of an BigInt field"""
input BigIntScalarAggregationFilters {
  average: BigIntScalarFilters
  max: BigIntScalarFilters
  min: BigIntScalarFilters
  sum: BigIntScalarFilters
}

"""BigInt filters"""
input BigIntScalarFilters {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
}

"""BigInt mutations"""
input BigIntScalarMutations {
  add: BigInt
  set: BigInt
  subtract: BigInt
}

input ConnectionAggregationCountFilterInput {
  edges: IntScalarFilters
  nodes: IntScalarFilters
}

type Count {
  nodes: Int!
}

type CountConnection {
  edges: Int!
  nodes: Int!
}

"""
Information about the number of nodes and relationships created during a create mutation
"""
type CreateInfo {
  nodesCreated: Int!
  relationshipsCreated: Int!
}

type CreateMoviesMutationResponse {
  info: CreateInfo!
  movies: [Movie!]!
}

type CreatePeopleMutationResponse {
  info: CreateInfo!
  people: [Person!]!
}

"""
Information about the number of nodes and relationships deleted during a delete mutation
"""
type DeleteInfo {
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

"""Float filters"""
input FloatScalarFilters {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
}

"""Int filters"""
input IntScalarFilters {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
}

"""Mutations for a list for String"""
input ListStringMutations {
  pop: Int
  push: [String!]
  set: [String!]
}

type Movie @introspection @node {
  peopleActedIn(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]! @introspection @relationship(type: "ACTED_IN", direction: IN, properties: "ActedInProperties")
  peopleActedInConnection(after: String, first: Int, sort: [MoviePeopleActedInConnectionSort!], where: MoviePeopleActedInConnectionWhere): MoviePeopleActedInConnection!
  peopleDirected(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]! @introspection @relationship(type: "DIRECTED", direction: IN)
  peopleDirectedConnection(after: String, first: Int, sort: [MoviePeopleDirectedConnectionSort!], where: MoviePeopleDirectedConnectionWhere): MoviePeopleDirectedConnection!
  peopleProduced(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]! @introspection @relationship(type: "PRODUCED", direction: IN)
  peopleProducedConnection(after: String, first: Int, sort: [MoviePeopleProducedConnectionSort!], where: MoviePeopleProducedConnectionWhere): MoviePeopleProducedConnection!
  peopleReviewed(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]! @introspection @relationship(type: "REVIEWED", direction: IN, properties: "ReviewedProperties")
  peopleReviewedConnection(after: String, first: Int, sort: [MoviePeopleReviewedConnectionSort!], where: MoviePeopleReviewedConnectionWhere): MoviePeopleReviewedConnection!
  peopleWrote(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]! @introspection @relationship(type: "WROTE", direction: IN)
  peopleWroteConnection(after: String, first: Int, sort: [MoviePeopleWroteConnectionSort!], where: MoviePeopleWroteConnectionWhere): MoviePeopleWroteConnection!
  released: BigInt! @introspection
  tagline: String @introspection
  title: String! @introspection
  votes: BigInt! @introspection
}

type MovieAggregate {
  count: Count!
  node: MovieAggregateNode!
}

type MovieAggregateNode {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
  votes: BigIntAggregateSelection!
}

input MovieConnectInput {
  peopleActedIn: [MoviePeopleActedInConnectFieldInput!]
  peopleDirected: [MoviePeopleDirectedConnectFieldInput!]
  peopleProduced: [MoviePeopleProducedConnectFieldInput!]
  peopleReviewed: [MoviePeopleReviewedConnectFieldInput!]
  peopleWrote: [MoviePeopleWroteConnectFieldInput!]
}

input MovieConnectWhere {
  node: MovieWhere!
}

input MovieCreateInput {
  peopleActedIn: MoviePeopleActedInFieldInput
  peopleDirected: MoviePeopleDirectedFieldInput
  peopleProduced: MoviePeopleProducedFieldInput
  peopleReviewed: MoviePeopleReviewedFieldInput
  peopleWrote: MoviePeopleWroteFieldInput
  released: BigInt!
  tagline: String
  title: String!
  votes: BigInt!
}

input MovieDeleteInput {
  peopleActedIn: [MoviePeopleActedInDeleteFieldInput!]
  peopleDirected: [MoviePeopleDirectedDeleteFieldInput!]
  peopleProduced: [MoviePeopleProducedDeleteFieldInput!]
  peopleReviewed: [MoviePeopleReviewedDeleteFieldInput!]
  peopleWrote: [MoviePeopleWroteDeleteFieldInput!]
}

input MovieDisconnectInput {
  peopleActedIn: [MoviePeopleActedInDisconnectFieldInput!]
  peopleDirected: [MoviePeopleDirectedDisconnectFieldInput!]
  peopleProduced: [MoviePeopleProducedDisconnectFieldInput!]
  peopleReviewed: [MoviePeopleReviewedDisconnectFieldInput!]
  peopleWrote: [MoviePeopleWroteDisconnectFieldInput!]
}

type MovieEdge {
  cursor: String!
  node: Movie!
}

input MoviePeopleActedInAggregateInput {
  AND: [MoviePeopleActedInAggregateInput!]
  NOT: MoviePeopleActedInAggregateInput
  OR: [MoviePeopleActedInAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: MoviePeopleActedInNodeAggregationWhereInput
}

input MoviePeopleActedInConnectFieldInput {
  connect: [PersonConnectInput!]
  edge: ActedInPropertiesCreateInput!
  where: PersonConnectWhere
}

type MoviePeopleActedInConnection {
  aggregate: MoviePersonPeopleActedInAggregateSelection!
  edges: [MoviePeopleActedInRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input MoviePeopleActedInConnectionAggregateInput {
  AND: [MoviePeopleActedInConnectionAggregateInput!]
  NOT: MoviePeopleActedInConnectionAggregateInput
  OR: [MoviePeopleActedInConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: MoviePeopleActedInNodeAggregationWhereInput
}

input MoviePeopleActedInConnectionFilters {
  """
  Filter Movies by aggregating results on related MoviePeopleActedInConnections
  """
  aggregate: MoviePeopleActedInConnectionAggregateInput
  """
  Return Movies where all of the related MoviePeopleActedInConnections match this filter
  """
  all: MoviePeopleActedInConnectionWhere
  """
  Return Movies where none of the related MoviePeopleActedInConnections match this filter
  """
  none: MoviePeopleActedInConnectionWhere
  """
  Return Movies where one of the related MoviePeopleActedInConnections match this filter
  """
  single: MoviePeopleActedInConnectionWhere
  """
  Return Movies where some of the related MoviePeopleActedInConnections match this filter
  """
  some: MoviePeopleActedInConnectionWhere
}

input MoviePeopleActedInConnectionSort {
  edge: ActedInPropertiesSort
  node: PersonSort
}

input MoviePeopleActedInConnectionWhere {
  AND: [MoviePeopleActedInConnectionWhere!]
  NOT: MoviePeopleActedInConnectionWhere
  OR: [MoviePeopleActedInConnectionWhere!]
  edge: ActedInPropertiesWhere
  node: PersonWhere
}

input MoviePeopleActedInCreateFieldInput {
  edge: ActedInPropertiesCreateInput!
  node: PersonCreateInput!
}

input MoviePeopleActedInDeleteFieldInput {
  delete: PersonDeleteInput
  where: MoviePeopleActedInConnectionWhere
}

input MoviePeopleActedInDisconnectFieldInput {
  disconnect: PersonDisconnectInput
  where: MoviePeopleActedInConnectionWhere
}

input MoviePeopleActedInFieldInput {
  connect: [MoviePeopleActedInConnectFieldInput!]
  create: [MoviePeopleActedInCreateFieldInput!]
}

input MoviePeopleActedInNodeAggregationWhereInput {
  AND: [MoviePeopleActedInNodeAggregationWhereInput!]
  NOT: MoviePeopleActedInNodeAggregationWhereInput
  OR: [MoviePeopleActedInNodeAggregationWhereInput!]
  born: BigIntScalarAggregationFilters
  born_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead.")
  born_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead.")
  born_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead.")
  born_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead.")
  born_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead.")
  born_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead.")
  born_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead.")
  born_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead.")
  born_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead.")
  born_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead.")
  born_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead.")
  born_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead.")
  born_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead.")
  born_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead.")
  born_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead.")
  born_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead.")
  born_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead.")
  born_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead.")
  born_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead.")
  born_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead.")
  name: StringScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead.")
  name_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead.")
  name_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead.")
  name_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead.")
  name_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead.")
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead.")
  name_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead.")
  name_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead.")
  name_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead.")
  name_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead.")
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead.")
  name_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead.")
  name_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead.")
  name_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead.")
  name_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead.")
}

type MoviePeopleActedInRelationship {
  cursor: String!
  node: Person!
  properties: ActedInProperties!
}

input MoviePeopleActedInUpdateConnectionInput {
  edge: ActedInPropertiesUpdateInput
  node: PersonUpdateInput
  where: MoviePeopleActedInConnectionWhere
}

input MoviePeopleActedInUpdateFieldInput {
  connect: [MoviePeopleActedInConnectFieldInput!]
  create: [MoviePeopleActedInCreateFieldInput!]
  delete: [MoviePeopleActedInDeleteFieldInput!]
  disconnect: [MoviePeopleActedInDisconnectFieldInput!]
  update: MoviePeopleActedInUpdateConnectionInput
}

input MoviePeopleDirectedAggregateInput {
  AND: [MoviePeopleDirectedAggregateInput!]
  NOT: MoviePeopleDirectedAggregateInput
  OR: [MoviePeopleDirectedAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: MoviePeopleDirectedNodeAggregationWhereInput
}

input MoviePeopleDirectedConnectFieldInput {
  connect: [PersonConnectInput!]
  where: PersonConnectWhere
}

type MoviePeopleDirectedConnection {
  aggregate: MoviePersonPeopleDirectedAggregateSelection!
  edges: [MoviePeopleDirectedRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input MoviePeopleDirectedConnectionAggregateInput {
  AND: [MoviePeopleDirectedConnectionAggregateInput!]
  NOT: MoviePeopleDirectedConnectionAggregateInput
  OR: [MoviePeopleDirectedConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: MoviePeopleDirectedNodeAggregationWhereInput
}

input MoviePeopleDirectedConnectionFilters {
  """
  Filter Movies by aggregating results on related MoviePeopleDirectedConnections
  """
  aggregate: MoviePeopleDirectedConnectionAggregateInput
  """
  Return Movies where all of the related MoviePeopleDirectedConnections match this filter
  """
  all: MoviePeopleDirectedConnectionWhere
  """
  Return Movies where none of the related MoviePeopleDirectedConnections match this filter
  """
  none: MoviePeopleDirectedConnectionWhere
  """
  Return Movies where one of the related MoviePeopleDirectedConnections match this filter
  """
  single: MoviePeopleDirectedConnectionWhere
  """
  Return Movies where some of the related MoviePeopleDirectedConnections match this filter
  """
  some: MoviePeopleDirectedConnectionWhere
}

input MoviePeopleDirectedConnectionSort {
  node: PersonSort
}

input MoviePeopleDirectedConnectionWhere {
  AND: [MoviePeopleDirectedConnectionWhere!]
  NOT: MoviePeopleDirectedConnectionWhere
  OR: [MoviePeopleDirectedConnectionWhere!]
  node: PersonWhere
}

input MoviePeopleDirectedCreateFieldInput {
  node: PersonCreateInput!
}

input MoviePeopleDirectedDeleteFieldInput {
  delete: PersonDeleteInput
  where: MoviePeopleDirectedConnectionWhere
}

input MoviePeopleDirectedDisconnectFieldInput {
  disconnect: PersonDisconnectInput
  where: MoviePeopleDirectedConnectionWhere
}

input MoviePeopleDirectedFieldInput {
  connect: [MoviePeopleDirectedConnectFieldInput!]
  create: [MoviePeopleDirectedCreateFieldInput!]
}

input MoviePeopleDirectedNodeAggregationWhereInput {
  AND: [MoviePeopleDirectedNodeAggregationWhereInput!]
  NOT: MoviePeopleDirectedNodeAggregationWhereInput
  OR: [MoviePeopleDirectedNodeAggregationWhereInput!]
  born: BigIntScalarAggregationFilters
  born_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead.")
  born_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead.")
  born_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead.")
  born_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead.")
  born_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead.")
  born_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead.")
  born_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead.")
  born_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead.")
  born_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead.")
  born_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead.")
  born_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead.")
  born_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead.")
  born_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead.")
  born_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead.")
  born_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead.")
  born_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead.")
  born_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead.")
  born_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead.")
  born_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead.")
  born_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead.")
  name: StringScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead.")
  name_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead.")
  name_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead.")
  name_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead.")
  name_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead.")
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead.")
  name_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead.")
  name_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead.")
  name_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead.")
  name_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead.")
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead.")
  name_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead.")
  name_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead.")
  name_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead.")
  name_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead.")
}

type MoviePeopleDirectedRelationship {
  cursor: String!
  node: Person!
}

input MoviePeopleDirectedUpdateConnectionInput {
  node: PersonUpdateInput
  where: MoviePeopleDirectedConnectionWhere
}

input MoviePeopleDirectedUpdateFieldInput {
  connect: [MoviePeopleDirectedConnectFieldInput!]
  create: [MoviePeopleDirectedCreateFieldInput!]
  delete: [MoviePeopleDirectedDeleteFieldInput!]
  disconnect: [MoviePeopleDirectedDisconnectFieldInput!]
  update: MoviePeopleDirectedUpdateConnectionInput
}

input MoviePeopleProducedAggregateInput {
  AND: [MoviePeopleProducedAggregateInput!]
  NOT: MoviePeopleProducedAggregateInput
  OR: [MoviePeopleProducedAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: MoviePeopleProducedNodeAggregationWhereInput
}

input MoviePeopleProducedConnectFieldInput {
  connect: [PersonConnectInput!]
  where: PersonConnectWhere
}

type MoviePeopleProducedConnection {
  aggregate: MoviePersonPeopleProducedAggregateSelection!
  edges: [MoviePeopleProducedRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input MoviePeopleProducedConnectionAggregateInput {
  AND: [MoviePeopleProducedConnectionAggregateInput!]
  NOT: MoviePeopleProducedConnectionAggregateInput
  OR: [MoviePeopleProducedConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: MoviePeopleProducedNodeAggregationWhereInput
}

input MoviePeopleProducedConnectionFilters {
  """
  Filter Movies by aggregating results on related MoviePeopleProducedConnections
  """
  aggregate: MoviePeopleProducedConnectionAggregateInput
  """
  Return Movies where all of the related MoviePeopleProducedConnections match this filter
  """
  all: MoviePeopleProducedConnectionWhere
  """
  Return Movies where none of the related MoviePeopleProducedConnections match this filter
  """
  none: MoviePeopleProducedConnectionWhere
  """
  Return Movies where one of the related MoviePeopleProducedConnections match this filter
  """
  single: MoviePeopleProducedConnectionWhere
  """
  Return Movies where some of the related MoviePeopleProducedConnections match this filter
  """
  some: MoviePeopleProducedConnectionWhere
}

input MoviePeopleProducedConnectionSort {
  node: PersonSort
}

input MoviePeopleProducedConnectionWhere {
  AND: [MoviePeopleProducedConnectionWhere!]
  NOT: MoviePeopleProducedConnectionWhere
  OR: [MoviePeopleProducedConnectionWhere!]
  node: PersonWhere
}

input MoviePeopleProducedCreateFieldInput {
  node: PersonCreateInput!
}

input MoviePeopleProducedDeleteFieldInput {
  delete: PersonDeleteInput
  where: MoviePeopleProducedConnectionWhere
}

input MoviePeopleProducedDisconnectFieldInput {
  disconnect: PersonDisconnectInput
  where: MoviePeopleProducedConnectionWhere
}

input MoviePeopleProducedFieldInput {
  connect: [MoviePeopleProducedConnectFieldInput!]
  create: [MoviePeopleProducedCreateFieldInput!]
}

input MoviePeopleProducedNodeAggregationWhereInput {
  AND: [MoviePeopleProducedNodeAggregationWhereInput!]
  NOT: MoviePeopleProducedNodeAggregationWhereInput
  OR: [MoviePeopleProducedNodeAggregationWhereInput!]
  born: BigIntScalarAggregationFilters
  born_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead.")
  born_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead.")
  born_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead.")
  born_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead.")
  born_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead.")
  born_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead.")
  born_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead.")
  born_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead.")
  born_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead.")
  born_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead.")
  born_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead.")
  born_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead.")
  born_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead.")
  born_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead.")
  born_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead.")
  born_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead.")
  born_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead.")
  born_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead.")
  born_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead.")
  born_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead.")
  name: StringScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead.")
  name_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead.")
  name_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead.")
  name_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead.")
  name_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead.")
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead.")
  name_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead.")
  name_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead.")
  name_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead.")
  name_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead.")
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead.")
  name_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead.")
  name_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead.")
  name_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead.")
  name_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead.")
}

type MoviePeopleProducedRelationship {
  cursor: String!
  node: Person!
}

input MoviePeopleProducedUpdateConnectionInput {
  node: PersonUpdateInput
  where: MoviePeopleProducedConnectionWhere
}

input MoviePeopleProducedUpdateFieldInput {
  connect: [MoviePeopleProducedConnectFieldInput!]
  create: [MoviePeopleProducedCreateFieldInput!]
  delete: [MoviePeopleProducedDeleteFieldInput!]
  disconnect: [MoviePeopleProducedDisconnectFieldInput!]
  update: MoviePeopleProducedUpdateConnectionInput
}

input MoviePeopleReviewedAggregateInput {
  AND: [MoviePeopleReviewedAggregateInput!]
  NOT: MoviePeopleReviewedAggregateInput
  OR: [MoviePeopleReviewedAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ReviewedPropertiesAggregationWhereInput
  node: MoviePeopleReviewedNodeAggregationWhereInput
}

input MoviePeopleReviewedConnectFieldInput {
  connect: [PersonConnectInput!]
  edge: ReviewedPropertiesCreateInput!
  where: PersonConnectWhere
}

type MoviePeopleReviewedConnection {
  aggregate: MoviePersonPeopleReviewedAggregateSelection!
  edges: [MoviePeopleReviewedRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input MoviePeopleReviewedConnectionAggregateInput {
  AND: [MoviePeopleReviewedConnectionAggregateInput!]
  NOT: MoviePeopleReviewedConnectionAggregateInput
  OR: [MoviePeopleReviewedConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  edge: ReviewedPropertiesAggregationWhereInput
  node: MoviePeopleReviewedNodeAggregationWhereInput
}

input MoviePeopleReviewedConnectionFilters {
  """
  Filter Movies by aggregating results on related MoviePeopleReviewedConnections
  """
  aggregate: MoviePeopleReviewedConnectionAggregateInput
  """
  Return Movies where all of the related MoviePeopleReviewedConnections match this filter
  """
  all: MoviePeopleReviewedConnectionWhere
  """
  Return Movies where none of the related MoviePeopleReviewedConnections match this filter
  """
  none: MoviePeopleReviewedConnectionWhere
  """
  Return Movies where one of the related MoviePeopleReviewedConnections match this filter
  """
  single: MoviePeopleReviewedConnectionWhere
  """
  Return Movies where some of the related MoviePeopleReviewedConnections match this filter
  """
  some: MoviePeopleReviewedConnectionWhere
}

input MoviePeopleReviewedConnectionSort {
  edge: ReviewedPropertiesSort
  node: PersonSort
}

input MoviePeopleReviewedConnectionWhere {
  AND: [MoviePeopleReviewedConnectionWhere!]
  NOT: MoviePeopleReviewedConnectionWhere
  OR: [MoviePeopleReviewedConnectionWhere!]
  edge: ReviewedPropertiesWhere
  node: PersonWhere
}

input MoviePeopleReviewedCreateFieldInput {
  edge: ReviewedPropertiesCreateInput!
  node: PersonCreateInput!
}

input MoviePeopleReviewedDeleteFieldInput {
  delete: PersonDeleteInput
  where: MoviePeopleReviewedConnectionWhere
}

input MoviePeopleReviewedDisconnectFieldInput {
  disconnect: PersonDisconnectInput
  where: MoviePeopleReviewedConnectionWhere
}

input MoviePeopleReviewedFieldInput {
  connect: [MoviePeopleReviewedConnectFieldInput!]
  create: [MoviePeopleReviewedCreateFieldInput!]
}

input MoviePeopleReviewedNodeAggregationWhereInput {
  AND: [MoviePeopleReviewedNodeAggregationWhereInput!]
  NOT: MoviePeopleReviewedNodeAggregationWhereInput
  OR: [MoviePeopleReviewedNodeAggregationWhereInput!]
  born: BigIntScalarAggregationFilters
  born_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead.")
  born_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead.")
  born_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead.")
  born_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead.")
  born_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead.")
  born_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead.")
  born_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead.")
  born_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead.")
  born_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead.")
  born_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead.")
  born_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead.")
  born_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead.")
  born_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead.")
  born_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead.")
  born_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead.")
  born_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead.")
  born_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead.")
  born_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead.")
  born_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead.")
  born_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead.")
  name: StringScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead.")
  name_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead.")
  name_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead.")
  name_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead.")
  name_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead.")
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead.")
  name_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead.")
  name_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead.")
  name_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead.")
  name_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead.")
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead.")
  name_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead.")
  name_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead.")
  name_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead.")
  name_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead.")
}

type MoviePeopleReviewedRelationship {
  cursor: String!
  node: Person!
  properties: ReviewedProperties!
}

input MoviePeopleReviewedUpdateConnectionInput {
  edge: ReviewedPropertiesUpdateInput
  node: PersonUpdateInput
  where: MoviePeopleReviewedConnectionWhere
}

input MoviePeopleReviewedUpdateFieldInput {
  connect: [MoviePeopleReviewedConnectFieldInput!]
  create: [MoviePeopleReviewedCreateFieldInput!]
  delete: [MoviePeopleReviewedDeleteFieldInput!]
  disconnect: [MoviePeopleReviewedDisconnectFieldInput!]
  update: MoviePeopleReviewedUpdateConnectionInput
}

input MoviePeopleWroteAggregateInput {
  AND: [MoviePeopleWroteAggregateInput!]
  NOT: MoviePeopleWroteAggregateInput
  OR: [MoviePeopleWroteAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: MoviePeopleWroteNodeAggregationWhereInput
}

input MoviePeopleWroteConnectFieldInput {
  connect: [PersonConnectInput!]
  where: PersonConnectWhere
}

type MoviePeopleWroteConnection {
  aggregate: MoviePersonPeopleWroteAggregateSelection!
  edges: [MoviePeopleWroteRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input MoviePeopleWroteConnectionAggregateInput {
  AND: [MoviePeopleWroteConnectionAggregateInput!]
  NOT: MoviePeopleWroteConnectionAggregateInput
  OR: [MoviePeopleWroteConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: MoviePeopleWroteNodeAggregationWhereInput
}

input MoviePeopleWroteConnectionFilters {
  """
  Filter Movies by aggregating results on related MoviePeopleWroteConnections
  """
  aggregate: MoviePeopleWroteConnectionAggregateInput
  """
  Return Movies where all of the related MoviePeopleWroteConnections match this filter
  """
  all: MoviePeopleWroteConnectionWhere
  """
  Return Movies where none of the related MoviePeopleWroteConnections match this filter
  """
  none: MoviePeopleWroteConnectionWhere
  """
  Return Movies where one of the related MoviePeopleWroteConnections match this filter
  """
  single: MoviePeopleWroteConnectionWhere
  """
  Return Movies where some of the related MoviePeopleWroteConnections match this filter
  """
  some: MoviePeopleWroteConnectionWhere
}

input MoviePeopleWroteConnectionSort {
  node: PersonSort
}

input MoviePeopleWroteConnectionWhere {
  AND: [MoviePeopleWroteConnectionWhere!]
  NOT: MoviePeopleWroteConnectionWhere
  OR: [MoviePeopleWroteConnectionWhere!]
  node: PersonWhere
}

input MoviePeopleWroteCreateFieldInput {
  node: PersonCreateInput!
}

input MoviePeopleWroteDeleteFieldInput {
  delete: PersonDeleteInput
  where: MoviePeopleWroteConnectionWhere
}

input MoviePeopleWroteDisconnectFieldInput {
  disconnect: PersonDisconnectInput
  where: MoviePeopleWroteConnectionWhere
}

input MoviePeopleWroteFieldInput {
  connect: [MoviePeopleWroteConnectFieldInput!]
  create: [MoviePeopleWroteCreateFieldInput!]
}

input MoviePeopleWroteNodeAggregationWhereInput {
  AND: [MoviePeopleWroteNodeAggregationWhereInput!]
  NOT: MoviePeopleWroteNodeAggregationWhereInput
  OR: [MoviePeopleWroteNodeAggregationWhereInput!]
  born: BigIntScalarAggregationFilters
  born_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead.")
  born_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead.")
  born_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead.")
  born_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead.")
  born_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead.")
  born_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead.")
  born_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead.")
  born_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead.")
  born_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead.")
  born_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead.")
  born_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead.")
  born_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead.")
  born_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead.")
  born_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead.")
  born_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead.")
  born_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead.")
  born_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead.")
  born_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead.")
  born_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead.")
  born_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead.")
  name: StringScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead.")
  name_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead.")
  name_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead.")
  name_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead.")
  name_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead.")
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead.")
  name_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead.")
  name_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead.")
  name_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead.")
  name_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead.")
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead.")
  name_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead.")
  name_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead.")
  name_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead.")
  name_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead.")
}

type MoviePeopleWroteRelationship {
  cursor: String!
  node: Person!
}

input MoviePeopleWroteUpdateConnectionInput {
  node: PersonUpdateInput
  where: MoviePeopleWroteConnectionWhere
}

input MoviePeopleWroteUpdateFieldInput {
  connect: [MoviePeopleWroteConnectFieldInput!]
  create: [MoviePeopleWroteCreateFieldInput!]
  delete: [MoviePeopleWroteDeleteFieldInput!]
  disconnect: [MoviePeopleWroteDisconnectFieldInput!]
  update: MoviePeopleWroteUpdateConnectionInput
}

type MoviePersonPeopleActedInAggregateSelection {
  count: CountConnection!
  node: MoviePersonPeopleActedInNodeAggregateSelection
}

type MoviePersonPeopleActedInNodeAggregateSelection {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleDirectedAggregateSelection {
  count: CountConnection!
  node: MoviePersonPeopleDirectedNodeAggregateSelection
}

type MoviePersonPeopleDirectedNodeAggregateSelection {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleProducedAggregateSelection {
  count: CountConnection!
  node: MoviePersonPeopleProducedNodeAggregateSelection
}

type MoviePersonPeopleProducedNodeAggregateSelection {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleReviewedAggregateSelection {
  count: CountConnection!
  edge: MoviePersonPeopleReviewedEdgeAggregateSelection
  node: MoviePersonPeopleReviewedNodeAggregateSelection
}

type MoviePersonPeopleReviewedEdgeAggregateSelection {
  rating: BigIntAggregateSelection!
  summary: StringAggregateSelection!
}

type MoviePersonPeopleReviewedNodeAggregateSelection {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type MoviePersonPeopleWroteAggregateSelection {
  count: CountConnection!
  node: MoviePersonPeopleWroteNodeAggregateSelection
}

type MoviePersonPeopleWroteNodeAggregateSelection {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

input MovieRelationshipFilters {
  """Filter type where all of the related Movies match this filter"""
  all: MovieWhere
  """Filter type where none of the related Movies match this filter"""
  none: MovieWhere
  """Filter type where one of the related Movies match this filter"""
  single: MovieWhere
  """Filter type where some of the related Movies match this filter"""
  some: MovieWhere
}

"""
Fields to sort Movies by. The order in which sorts are applied is not guaranteed when specifying many fields in one MovieSort object.
"""
input MovieSort {
  released: SortDirection
  tagline: SortDirection
  title: SortDirection
  votes: SortDirection
}

input MovieUpdateInput {
  peopleActedIn: [MoviePeopleActedInUpdateFieldInput!]
  peopleDirected: [MoviePeopleDirectedUpdateFieldInput!]
  peopleProduced: [MoviePeopleProducedUpdateFieldInput!]
  peopleReviewed: [MoviePeopleReviewedUpdateFieldInput!]
  peopleWrote: [MoviePeopleWroteUpdateFieldInput!]
  released: BigIntScalarMutations
  released_DECREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'released: { decrement: ... } }' instead.")
  released_INCREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'released: { increment: ... } }' instead.")
  released_SET: BigInt
  tagline: StringScalarMutations
  tagline_SET: String
  title: StringScalarMutations
  title_SET: String
  votes: BigIntScalarMutations
  votes_DECREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'votes: { decrement: ... } }' instead.")
  votes_INCREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'votes: { increment: ... } }' instead.")
  votes_SET: BigInt
}

input MovieWhere {
  AND: [MovieWhere!]
  NOT: MovieWhere
  OR: [MovieWhere!]
  peopleActedIn: PersonRelationshipFilters
  peopleActedInAggregate: MoviePeopleActedInAggregateInput @deprecated(reason: "Aggregate filters are moved inside the peopleActedInConnection filter, please use { peopleActedInConnection: { aggregate: {...} } } instead")
  peopleActedInConnection: MoviePeopleActedInConnectionFilters
  """
  Return Movies where all of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_ALL: MoviePeopleActedInConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedInConnection: { all: { node: ... } } }' instead.")
  """
  Return Movies where none of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_NONE: MoviePeopleActedInConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedInConnection: { none: { node: ... } } }' instead.")
  """
  Return Movies where one of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SINGLE: MoviePeopleActedInConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedInConnection: { single: { node: ... } } }' instead.")
  """
  Return Movies where some of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SOME: MoviePeopleActedInConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedInConnection: { some: { node: ... } } }' instead.")
  """Return Movies where all of the related People match this filter"""
  peopleActedIn_ALL: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedIn: { all: ... }' instead.")
  """Return Movies where none of the related People match this filter"""
  peopleActedIn_NONE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedIn: { none: ... }' instead.")
  """Return Movies where one of the related People match this filter"""
  peopleActedIn_SINGLE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedIn: {  single: ... }' instead.")
  """Return Movies where some of the related People match this filter"""
  peopleActedIn_SOME: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleActedIn: {  some: ... }' instead.")
  peopleDirected: PersonRelationshipFilters
  peopleDirectedAggregate: MoviePeopleDirectedAggregateInput @deprecated(reason: "Aggregate filters are moved inside the peopleDirectedConnection filter, please use { peopleDirectedConnection: { aggregate: {...} } } instead")
  peopleDirectedConnection: MoviePeopleDirectedConnectionFilters
  """
  Return Movies where all of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_ALL: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirectedConnection: { all: { node: ... } } }' instead.")
  """
  Return Movies where none of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_NONE: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirectedConnection: { none: { node: ... } } }' instead.")
  """
  Return Movies where one of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SINGLE: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirectedConnection: { single: { node: ... } } }' instead.")
  """
  Return Movies where some of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SOME: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirectedConnection: { some: { node: ... } } }' instead.")
  """Return Movies where all of the related People match this filter"""
  peopleDirected_ALL: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirected: { all: ... }' instead.")
  """Return Movies where none of the related People match this filter"""
  peopleDirected_NONE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirected: { none: ... }' instead.")
  """Return Movies where one of the related People match this filter"""
  peopleDirected_SINGLE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirected: {  single: ... }' instead.")
  """Return Movies where some of the related People match this filter"""
  peopleDirected_SOME: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleDirected: {  some: ... }' instead.")
  peopleProduced: PersonRelationshipFilters
  peopleProducedAggregate: MoviePeopleProducedAggregateInput @deprecated(reason: "Aggregate filters are moved inside the peopleProducedConnection filter, please use { peopleProducedConnection: { aggregate: {...} } } instead")
  peopleProducedConnection: MoviePeopleProducedConnectionFilters
  """
  Return Movies where all of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_ALL: MoviePeopleProducedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProducedConnection: { all: { node: ... } } }' instead.")
  """
  Return Movies where none of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_NONE: MoviePeopleProducedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProducedConnection: { none: { node: ... } } }' instead.")
  """
  Return Movies where one of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SINGLE: MoviePeopleProducedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProducedConnection: { single: { node: ... } } }' instead.")
  """
  Return Movies where some of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SOME: MoviePeopleProducedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProducedConnection: { some: { node: ... } } }' instead.")
  """Return Movies where all of the related People match this filter"""
  peopleProduced_ALL: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProduced: { all: ... }' instead.")
  """Return Movies where none of the related People match this filter"""
  peopleProduced_NONE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProduced: { none: ... }' instead.")
  """Return Movies where one of the related People match this filter"""
  peopleProduced_SINGLE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProduced: {  single: ... }' instead.")
  """Return Movies where some of the related People match this filter"""
  peopleProduced_SOME: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleProduced: {  some: ... }' instead.")
  peopleReviewed: PersonRelationshipFilters
  peopleReviewedAggregate: MoviePeopleReviewedAggregateInput @deprecated(reason: "Aggregate filters are moved inside the peopleReviewedConnection filter, please use { peopleReviewedConnection: { aggregate: {...} } } instead")
  peopleReviewedConnection: MoviePeopleReviewedConnectionFilters
  """
  Return Movies where all of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_ALL: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewedConnection: { all: { node: ... } } }' instead.")
  """
  Return Movies where none of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_NONE: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewedConnection: { none: { node: ... } } }' instead.")
  """
  Return Movies where one of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SINGLE: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewedConnection: { single: { node: ... } } }' instead.")
  """
  Return Movies where some of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SOME: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewedConnection: { some: { node: ... } } }' instead.")
  """Return Movies where all of the related People match this filter"""
  peopleReviewed_ALL: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewed: { all: ... }' instead.")
  """Return Movies where none of the related People match this filter"""
  peopleReviewed_NONE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewed: { none: ... }' instead.")
  """Return Movies where one of the related People match this filter"""
  peopleReviewed_SINGLE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewed: {  single: ... }' instead.")
  """Return Movies where some of the related People match this filter"""
  peopleReviewed_SOME: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleReviewed: {  some: ... }' instead.")
  peopleWrote: PersonRelationshipFilters
  peopleWroteAggregate: MoviePeopleWroteAggregateInput @deprecated(reason: "Aggregate filters are moved inside the peopleWroteConnection filter, please use { peopleWroteConnection: { aggregate: {...} } } instead")
  peopleWroteConnection: MoviePeopleWroteConnectionFilters
  """
  Return Movies where all of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_ALL: MoviePeopleWroteConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWroteConnection: { all: { node: ... } } }' instead.")
  """
  Return Movies where none of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_NONE: MoviePeopleWroteConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWroteConnection: { none: { node: ... } } }' instead.")
  """
  Return Movies where one of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SINGLE: MoviePeopleWroteConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWroteConnection: { single: { node: ... } } }' instead.")
  """
  Return Movies where some of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SOME: MoviePeopleWroteConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWroteConnection: { some: { node: ... } } }' instead.")
  """Return Movies where all of the related People match this filter"""
  peopleWrote_ALL: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWrote: { all: ... }' instead.")
  """Return Movies where none of the related People match this filter"""
  peopleWrote_NONE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWrote: { none: ... }' instead.")
  """Return Movies where one of the related People match this filter"""
  peopleWrote_SINGLE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWrote: {  single: ... }' instead.")
  """Return Movies where some of the related People match this filter"""
  peopleWrote_SOME: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleWrote: {  some: ... }' instead.")
  released: BigIntScalarFilters
  released_EQ: BigInt @deprecated(reason: "Please use the relevant generic filter released: { eq: ... }")
  released_GT: BigInt @deprecated(reason: "Please use the relevant generic filter released: { gt: ... }")
  released_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter released: { gte: ... }")
  released_IN: [BigInt!] @deprecated(reason: "Please use the relevant generic filter released: { in: ... }")
  released_LT: BigInt @deprecated(reason: "Please use the relevant generic filter released: { lt: ... }")
  released_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter released: { lte: ... }")
  tagline: StringScalarFilters
  tagline_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter tagline: { contains: ... }")
  tagline_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter tagline: { endsWith: ... }")
  tagline_EQ: String @deprecated(reason: "Please use the relevant generic filter tagline: { eq: ... }")
  tagline_IN: [String] @deprecated(reason: "Please use the relevant generic filter tagline: { in: ... }")
  tagline_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter tagline: { startsWith: ... }")
  title: StringScalarFilters
  title_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter title: { contains: ... }")
  title_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter title: { endsWith: ... }")
  title_EQ: String @deprecated(reason: "Please use the relevant generic filter title: { eq: ... }")
  title_IN: [String!] @deprecated(reason: "Please use the relevant generic filter title: { in: ... }")
  title_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter title: { startsWith: ... }")
  votes: BigIntScalarFilters
  votes_EQ: BigInt @deprecated(reason: "Please use the relevant generic filter votes: { eq: ... }")
  votes_GT: BigInt @deprecated(reason: "Please use the relevant generic filter votes: { gt: ... }")
  votes_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter votes: { gte: ... }")
  votes_IN: [BigInt!] @deprecated(reason: "Please use the relevant generic filter votes: { in: ... }")
  votes_LT: BigInt @deprecated(reason: "Please use the relevant generic filter votes: { lt: ... }")
  votes_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter votes: { lte: ... }")
}

type MoviesConnection {
  aggregate: MovieAggregate!
  edges: [MovieEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Mutation {
  createMovies(input: [MovieCreateInput!]!): CreateMoviesMutationResponse!
  createPeople(input: [PersonCreateInput!]!): CreatePeopleMutationResponse!
  deleteMovies(delete: MovieDeleteInput, where: MovieWhere): DeleteInfo!
  deletePeople(delete: PersonDeleteInput, where: PersonWhere): DeleteInfo!
  updateMovies(update: MovieUpdateInput, where: MovieWhere): UpdateMoviesMutationResponse!
  updatePeople(update: PersonUpdateInput, where: PersonWhere): UpdatePeopleMutationResponse!
}

"""Pagination information (Relay)"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PeopleConnection {
  aggregate: PersonAggregate!
  edges: [PersonEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Person @introspection @node {
  actedInMovies(limit: Int, offset: Int, sort: [MovieSort!], where: MovieWhere): [Movie!]! @introspection @relationship(type: "ACTED_IN", direction: OUT, properties: "ActedInProperties")
  actedInMoviesConnection(after: String, first: Int, sort: [PersonActedInMoviesConnectionSort!], where: PersonActedInMoviesConnectionWhere): PersonActedInMoviesConnection!
  born: BigInt @introspection
  directedMovies(limit: Int, offset: Int, sort: [MovieSort!], where: MovieWhere): [Movie!]! @introspection @relationship(type: "DIRECTED", direction: OUT)
  directedMoviesConnection(after: String, first: Int, sort: [PersonDirectedMoviesConnectionSort!], where: PersonDirectedMoviesConnectionWhere): PersonDirectedMoviesConnection!
  followsPeople(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]! @introspection @relationship(type: "FOLLOWS", direction: OUT)
  followsPeopleConnection(after: String, first: Int, sort: [PersonFollowsPeopleConnectionSort!], where: PersonFollowsPeopleConnectionWhere): PersonFollowsPeopleConnection!
  name: String! @introspection
  peopleFollows(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]! @introspection @relationship(type: "FOLLOWS", direction: IN)
  peopleFollowsConnection(after: String, first: Int, sort: [PersonPeopleFollowsConnectionSort!], where: PersonPeopleFollowsConnectionWhere): PersonPeopleFollowsConnection!
  producedMovies(limit: Int, offset: Int, sort: [MovieSort!], where: MovieWhere): [Movie!]! @introspection @relationship(type: "PRODUCED", direction: OUT)
  producedMoviesConnection(after: String, first: Int, sort: [PersonProducedMoviesConnectionSort!], where: PersonProducedMoviesConnectionWhere): PersonProducedMoviesConnection!
  reviewedMovies(limit: Int, offset: Int, sort: [MovieSort!], where: MovieWhere): [Movie!]! @introspection @relationship(type: "REVIEWED", direction: OUT, properties: "ReviewedProperties")
  reviewedMoviesConnection(after: String, first: Int, sort: [PersonReviewedMoviesConnectionSort!], where: PersonReviewedMoviesConnectionWhere): PersonReviewedMoviesConnection!
  wroteMovies(limit: Int, offset: Int, sort: [MovieSort!], where: MovieWhere): [Movie!]! @introspection @relationship(type: "WROTE", direction: OUT)
  wroteMoviesConnection(after: String, first: Int, sort: [PersonWroteMoviesConnectionSort!], where: PersonWroteMoviesConnectionWhere): PersonWroteMoviesConnection!
}

input PersonActedInMoviesAggregateInput {
  AND: [PersonActedInMoviesAggregateInput!]
  NOT: PersonActedInMoviesAggregateInput
  OR: [PersonActedInMoviesAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PersonActedInMoviesNodeAggregationWhereInput
}

input PersonActedInMoviesConnectFieldInput {
  connect: [MovieConnectInput!]
  edge: ActedInPropertiesCreateInput!
  where: MovieConnectWhere
}

type PersonActedInMoviesConnection {
  aggregate: PersonMovieActedInMoviesAggregateSelection!
  edges: [PersonActedInMoviesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PersonActedInMoviesConnectionAggregateInput {
  AND: [PersonActedInMoviesConnectionAggregateInput!]
  NOT: PersonActedInMoviesConnectionAggregateInput
  OR: [PersonActedInMoviesConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: PersonActedInMoviesNodeAggregationWhereInput
}

input PersonActedInMoviesConnectionFilters {
  """
  Filter People by aggregating results on related PersonActedInMoviesConnections
  """
  aggregate: PersonActedInMoviesConnectionAggregateInput
  """
  Return People where all of the related PersonActedInMoviesConnections match this filter
  """
  all: PersonActedInMoviesConnectionWhere
  """
  Return People where none of the related PersonActedInMoviesConnections match this filter
  """
  none: PersonActedInMoviesConnectionWhere
  """
  Return People where one of the related PersonActedInMoviesConnections match this filter
  """
  single: PersonActedInMoviesConnectionWhere
  """
  Return People where some of the related PersonActedInMoviesConnections match this filter
  """
  some: PersonActedInMoviesConnectionWhere
}

input PersonActedInMoviesConnectionSort {
  edge: ActedInPropertiesSort
  node: MovieSort
}

input PersonActedInMoviesConnectionWhere {
  AND: [PersonActedInMoviesConnectionWhere!]
  NOT: PersonActedInMoviesConnectionWhere
  OR: [PersonActedInMoviesConnectionWhere!]
  edge: ActedInPropertiesWhere
  node: MovieWhere
}

input PersonActedInMoviesCreateFieldInput {
  edge: ActedInPropertiesCreateInput!
  node: MovieCreateInput!
}

input PersonActedInMoviesDeleteFieldInput {
  delete: MovieDeleteInput
  where: PersonActedInMoviesConnectionWhere
}

input PersonActedInMoviesDisconnectFieldInput {
  disconnect: MovieDisconnectInput
  where: PersonActedInMoviesConnectionWhere
}

input PersonActedInMoviesFieldInput {
  connect: [PersonActedInMoviesConnectFieldInput!]
  create: [PersonActedInMoviesCreateFieldInput!]
}

input PersonActedInMoviesNodeAggregationWhereInput {
  AND: [PersonActedInMoviesNodeAggregationWhereInput!]
  NOT: PersonActedInMoviesNodeAggregationWhereInput
  OR: [PersonActedInMoviesNodeAggregationWhereInput!]
  released: BigIntScalarAggregationFilters
  released_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead.")
  released_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead.")
  released_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead.")
  released_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead.")
  released_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead.")
  released_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead.")
  released_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead.")
  released_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead.")
  released_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead.")
  released_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead.")
  released_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead.")
  released_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead.")
  released_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead.")
  released_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead.")
  released_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead.")
  released_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead.")
  released_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead.")
  released_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead.")
  released_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead.")
  released_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead.")
  tagline: StringScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead.")
  title: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead.")
  title_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead.")
  title_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead.")
  title_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead.")
  title_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead.")
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead.")
  title_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead.")
  title_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead.")
  title_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead.")
  title_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead.")
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead.")
  title_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead.")
  title_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead.")
  title_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead.")
  title_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead.")
  votes: BigIntScalarAggregationFilters
  votes_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { eq: ... } } }' instead.")
  votes_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gt: ... } } }' instead.")
  votes_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gte: ... } } }' instead.")
  votes_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lt: ... } } }' instead.")
  votes_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lte: ... } } }' instead.")
  votes_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { eq: ... } } }' instead.")
  votes_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gt: ... } } }' instead.")
  votes_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gte: ... } } }' instead.")
  votes_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lt: ... } } }' instead.")
  votes_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lte: ... } } }' instead.")
  votes_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { eq: ... } } }' instead.")
  votes_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gt: ... } } }' instead.")
  votes_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gte: ... } } }' instead.")
  votes_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lt: ... } } }' instead.")
  votes_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lte: ... } } }' instead.")
  votes_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { eq: ... } } }' instead.")
  votes_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gt: ... } } }' instead.")
  votes_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gte: ... } } }' instead.")
  votes_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lt: ... } } }' instead.")
  votes_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lte: ... } } }' instead.")
}

type PersonActedInMoviesRelationship {
  cursor: String!
  node: Movie!
  properties: ActedInProperties!
}

input PersonActedInMoviesUpdateConnectionInput {
  edge: ActedInPropertiesUpdateInput
  node: MovieUpdateInput
  where: PersonActedInMoviesConnectionWhere
}

input PersonActedInMoviesUpdateFieldInput {
  connect: [PersonActedInMoviesConnectFieldInput!]
  create: [PersonActedInMoviesCreateFieldInput!]
  delete: [PersonActedInMoviesDeleteFieldInput!]
  disconnect: [PersonActedInMoviesDisconnectFieldInput!]
  update: PersonActedInMoviesUpdateConnectionInput
}

type PersonAggregate {
  count: Count!
  node: PersonAggregateNode!
}

type PersonAggregateNode {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

input PersonConnectInput {
  actedInMovies: [PersonActedInMoviesConnectFieldInput!]
  directedMovies: [PersonDirectedMoviesConnectFieldInput!]
  followsPeople: [PersonFollowsPeopleConnectFieldInput!]
  peopleFollows: [PersonPeopleFollowsConnectFieldInput!]
  producedMovies: [PersonProducedMoviesConnectFieldInput!]
  reviewedMovies: [PersonReviewedMoviesConnectFieldInput!]
  wroteMovies: [PersonWroteMoviesConnectFieldInput!]
}

input PersonConnectWhere {
  node: PersonWhere!
}

input PersonCreateInput {
  actedInMovies: PersonActedInMoviesFieldInput
  born: BigInt
  directedMovies: PersonDirectedMoviesFieldInput
  followsPeople: PersonFollowsPeopleFieldInput
  name: String!
  peopleFollows: PersonPeopleFollowsFieldInput
  producedMovies: PersonProducedMoviesFieldInput
  reviewedMovies: PersonReviewedMoviesFieldInput
  wroteMovies: PersonWroteMoviesFieldInput
}

input PersonDeleteInput {
  actedInMovies: [PersonActedInMoviesDeleteFieldInput!]
  directedMovies: [PersonDirectedMoviesDeleteFieldInput!]
  followsPeople: [PersonFollowsPeopleDeleteFieldInput!]
  peopleFollows: [PersonPeopleFollowsDeleteFieldInput!]
  producedMovies: [PersonProducedMoviesDeleteFieldInput!]
  reviewedMovies: [PersonReviewedMoviesDeleteFieldInput!]
  wroteMovies: [PersonWroteMoviesDeleteFieldInput!]
}

input PersonDirectedMoviesAggregateInput {
  AND: [PersonDirectedMoviesAggregateInput!]
  NOT: PersonDirectedMoviesAggregateInput
  OR: [PersonDirectedMoviesAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PersonDirectedMoviesNodeAggregationWhereInput
}

input PersonDirectedMoviesConnectFieldInput {
  connect: [MovieConnectInput!]
  where: MovieConnectWhere
}

type PersonDirectedMoviesConnection {
  aggregate: PersonMovieDirectedMoviesAggregateSelection!
  edges: [PersonDirectedMoviesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PersonDirectedMoviesConnectionAggregateInput {
  AND: [PersonDirectedMoviesConnectionAggregateInput!]
  NOT: PersonDirectedMoviesConnectionAggregateInput
  OR: [PersonDirectedMoviesConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: PersonDirectedMoviesNodeAggregationWhereInput
}

input PersonDirectedMoviesConnectionFilters {
  """
  Filter People by aggregating results on related PersonDirectedMoviesConnections
  """
  aggregate: PersonDirectedMoviesConnectionAggregateInput
  """
  Return People where all of the related PersonDirectedMoviesConnections match this filter
  """
  all: PersonDirectedMoviesConnectionWhere
  """
  Return People where none of the related PersonDirectedMoviesConnections match this filter
  """
  none: PersonDirectedMoviesConnectionWhere
  """
  Return People where one of the related PersonDirectedMoviesConnections match this filter
  """
  single: PersonDirectedMoviesConnectionWhere
  """
  Return People where some of the related PersonDirectedMoviesConnections match this filter
  """
  some: PersonDirectedMoviesConnectionWhere
}

input PersonDirectedMoviesConnectionSort {
  node: MovieSort
}

input PersonDirectedMoviesConnectionWhere {
  AND: [PersonDirectedMoviesConnectionWhere!]
  NOT: PersonDirectedMoviesConnectionWhere
  OR: [PersonDirectedMoviesConnectionWhere!]
  node: MovieWhere
}

input PersonDirectedMoviesCreateFieldInput {
  node: MovieCreateInput!
}

input PersonDirectedMoviesDeleteFieldInput {
  delete: MovieDeleteInput
  where: PersonDirectedMoviesConnectionWhere
}

input PersonDirectedMoviesDisconnectFieldInput {
  disconnect: MovieDisconnectInput
  where: PersonDirectedMoviesConnectionWhere
}

input PersonDirectedMoviesFieldInput {
  connect: [PersonDirectedMoviesConnectFieldInput!]
  create: [PersonDirectedMoviesCreateFieldInput!]
}

input PersonDirectedMoviesNodeAggregationWhereInput {
  AND: [PersonDirectedMoviesNodeAggregationWhereInput!]
  NOT: PersonDirectedMoviesNodeAggregationWhereInput
  OR: [PersonDirectedMoviesNodeAggregationWhereInput!]
  released: BigIntScalarAggregationFilters
  released_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead.")
  released_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead.")
  released_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead.")
  released_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead.")
  released_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead.")
  released_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead.")
  released_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead.")
  released_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead.")
  released_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead.")
  released_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead.")
  released_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead.")
  released_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead.")
  released_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead.")
  released_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead.")
  released_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead.")
  released_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead.")
  released_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead.")
  released_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead.")
  released_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead.")
  released_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead.")
  tagline: StringScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead.")
  title: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead.")
  title_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead.")
  title_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead.")
  title_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead.")
  title_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead.")
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead.")
  title_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead.")
  title_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead.")
  title_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead.")
  title_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead.")
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead.")
  title_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead.")
  title_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead.")
  title_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead.")
  title_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead.")
  votes: BigIntScalarAggregationFilters
  votes_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { eq: ... } } }' instead.")
  votes_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gt: ... } } }' instead.")
  votes_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gte: ... } } }' instead.")
  votes_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lt: ... } } }' instead.")
  votes_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lte: ... } } }' instead.")
  votes_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { eq: ... } } }' instead.")
  votes_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gt: ... } } }' instead.")
  votes_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gte: ... } } }' instead.")
  votes_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lt: ... } } }' instead.")
  votes_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lte: ... } } }' instead.")
  votes_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { eq: ... } } }' instead.")
  votes_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gt: ... } } }' instead.")
  votes_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gte: ... } } }' instead.")
  votes_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lt: ... } } }' instead.")
  votes_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lte: ... } } }' instead.")
  votes_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { eq: ... } } }' instead.")
  votes_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gt: ... } } }' instead.")
  votes_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gte: ... } } }' instead.")
  votes_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lt: ... } } }' instead.")
  votes_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lte: ... } } }' instead.")
}

type PersonDirectedMoviesRelationship {
  cursor: String!
  node: Movie!
}

input PersonDirectedMoviesUpdateConnectionInput {
  node: MovieUpdateInput
  where: PersonDirectedMoviesConnectionWhere
}

input PersonDirectedMoviesUpdateFieldInput {
  connect: [PersonDirectedMoviesConnectFieldInput!]
  create: [PersonDirectedMoviesCreateFieldInput!]
  delete: [PersonDirectedMoviesDeleteFieldInput!]
  disconnect: [PersonDirectedMoviesDisconnectFieldInput!]
  update: PersonDirectedMoviesUpdateConnectionInput
}

input PersonDisconnectInput {
  actedInMovies: [PersonActedInMoviesDisconnectFieldInput!]
  directedMovies: [PersonDirectedMoviesDisconnectFieldInput!]
  followsPeople: [PersonFollowsPeopleDisconnectFieldInput!]
  peopleFollows: [PersonPeopleFollowsDisconnectFieldInput!]
  producedMovies: [PersonProducedMoviesDisconnectFieldInput!]
  reviewedMovies: [PersonReviewedMoviesDisconnectFieldInput!]
  wroteMovies: [PersonWroteMoviesDisconnectFieldInput!]
}

type PersonEdge {
  cursor: String!
  node: Person!
}

input PersonFollowsPeopleAggregateInput {
  AND: [PersonFollowsPeopleAggregateInput!]
  NOT: PersonFollowsPeopleAggregateInput
  OR: [PersonFollowsPeopleAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PersonFollowsPeopleNodeAggregationWhereInput
}

input PersonFollowsPeopleConnectFieldInput {
  connect: [PersonConnectInput!]
  where: PersonConnectWhere
}

type PersonFollowsPeopleConnection {
  aggregate: PersonPersonFollowsPeopleAggregateSelection!
  edges: [PersonFollowsPeopleRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PersonFollowsPeopleConnectionAggregateInput {
  AND: [PersonFollowsPeopleConnectionAggregateInput!]
  NOT: PersonFollowsPeopleConnectionAggregateInput
  OR: [PersonFollowsPeopleConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: PersonFollowsPeopleNodeAggregationWhereInput
}

input PersonFollowsPeopleConnectionFilters {
  """
  Filter People by aggregating results on related PersonFollowsPeopleConnections
  """
  aggregate: PersonFollowsPeopleConnectionAggregateInput
  """
  Return People where all of the related PersonFollowsPeopleConnections match this filter
  """
  all: PersonFollowsPeopleConnectionWhere
  """
  Return People where none of the related PersonFollowsPeopleConnections match this filter
  """
  none: PersonFollowsPeopleConnectionWhere
  """
  Return People where one of the related PersonFollowsPeopleConnections match this filter
  """
  single: PersonFollowsPeopleConnectionWhere
  """
  Return People where some of the related PersonFollowsPeopleConnections match this filter
  """
  some: PersonFollowsPeopleConnectionWhere
}

input PersonFollowsPeopleConnectionSort {
  node: PersonSort
}

input PersonFollowsPeopleConnectionWhere {
  AND: [PersonFollowsPeopleConnectionWhere!]
  NOT: PersonFollowsPeopleConnectionWhere
  OR: [PersonFollowsPeopleConnectionWhere!]
  node: PersonWhere
}

input PersonFollowsPeopleCreateFieldInput {
  node: PersonCreateInput!
}

input PersonFollowsPeopleDeleteFieldInput {
  delete: PersonDeleteInput
  where: PersonFollowsPeopleConnectionWhere
}

input PersonFollowsPeopleDisconnectFieldInput {
  disconnect: PersonDisconnectInput
  where: PersonFollowsPeopleConnectionWhere
}

input PersonFollowsPeopleFieldInput {
  connect: [PersonFollowsPeopleConnectFieldInput!]
  create: [PersonFollowsPeopleCreateFieldInput!]
}

input PersonFollowsPeopleNodeAggregationWhereInput {
  AND: [PersonFollowsPeopleNodeAggregationWhereInput!]
  NOT: PersonFollowsPeopleNodeAggregationWhereInput
  OR: [PersonFollowsPeopleNodeAggregationWhereInput!]
  born: BigIntScalarAggregationFilters
  born_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead.")
  born_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead.")
  born_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead.")
  born_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead.")
  born_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead.")
  born_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead.")
  born_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead.")
  born_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead.")
  born_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead.")
  born_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead.")
  born_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead.")
  born_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead.")
  born_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead.")
  born_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead.")
  born_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead.")
  born_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead.")
  born_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead.")
  born_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead.")
  born_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead.")
  born_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead.")
  name: StringScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead.")
  name_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead.")
  name_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead.")
  name_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead.")
  name_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead.")
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead.")
  name_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead.")
  name_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead.")
  name_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead.")
  name_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead.")
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead.")
  name_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead.")
  name_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead.")
  name_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead.")
  name_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead.")
}

type PersonFollowsPeopleRelationship {
  cursor: String!
  node: Person!
}

input PersonFollowsPeopleUpdateConnectionInput {
  node: PersonUpdateInput
  where: PersonFollowsPeopleConnectionWhere
}

input PersonFollowsPeopleUpdateFieldInput {
  connect: [PersonFollowsPeopleConnectFieldInput!]
  create: [PersonFollowsPeopleCreateFieldInput!]
  delete: [PersonFollowsPeopleDeleteFieldInput!]
  disconnect: [PersonFollowsPeopleDisconnectFieldInput!]
  update: PersonFollowsPeopleUpdateConnectionInput
}

type PersonMovieActedInMoviesAggregateSelection {
  count: CountConnection!
  node: PersonMovieActedInMoviesNodeAggregateSelection
}

type PersonMovieActedInMoviesNodeAggregateSelection {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
  votes: BigIntAggregateSelection!
}

type PersonMovieDirectedMoviesAggregateSelection {
  count: CountConnection!
  node: PersonMovieDirectedMoviesNodeAggregateSelection
}

type PersonMovieDirectedMoviesNodeAggregateSelection {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
  votes: BigIntAggregateSelection!
}

type PersonMovieProducedMoviesAggregateSelection {
  count: CountConnection!
  node: PersonMovieProducedMoviesNodeAggregateSelection
}

type PersonMovieProducedMoviesNodeAggregateSelection {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
  votes: BigIntAggregateSelection!
}

type PersonMovieReviewedMoviesAggregateSelection {
  count: CountConnection!
  edge: PersonMovieReviewedMoviesEdgeAggregateSelection
  node: PersonMovieReviewedMoviesNodeAggregateSelection
}

type PersonMovieReviewedMoviesEdgeAggregateSelection {
  rating: BigIntAggregateSelection!
  summary: StringAggregateSelection!
}

type PersonMovieReviewedMoviesNodeAggregateSelection {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
  votes: BigIntAggregateSelection!
}

type PersonMovieWroteMoviesAggregateSelection {
  count: CountConnection!
  node: PersonMovieWroteMoviesNodeAggregateSelection
}

type PersonMovieWroteMoviesNodeAggregateSelection {
  released: BigIntAggregateSelection!
  tagline: StringAggregateSelection!
  title: StringAggregateSelection!
  votes: BigIntAggregateSelection!
}

input PersonPeopleFollowsAggregateInput {
  AND: [PersonPeopleFollowsAggregateInput!]
  NOT: PersonPeopleFollowsAggregateInput
  OR: [PersonPeopleFollowsAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PersonPeopleFollowsNodeAggregationWhereInput
}

input PersonPeopleFollowsConnectFieldInput {
  connect: [PersonConnectInput!]
  where: PersonConnectWhere
}

type PersonPeopleFollowsConnection {
  aggregate: PersonPersonPeopleFollowsAggregateSelection!
  edges: [PersonPeopleFollowsRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PersonPeopleFollowsConnectionAggregateInput {
  AND: [PersonPeopleFollowsConnectionAggregateInput!]
  NOT: PersonPeopleFollowsConnectionAggregateInput
  OR: [PersonPeopleFollowsConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: PersonPeopleFollowsNodeAggregationWhereInput
}

input PersonPeopleFollowsConnectionFilters {
  """
  Filter People by aggregating results on related PersonPeopleFollowsConnections
  """
  aggregate: PersonPeopleFollowsConnectionAggregateInput
  """
  Return People where all of the related PersonPeopleFollowsConnections match this filter
  """
  all: PersonPeopleFollowsConnectionWhere
  """
  Return People where none of the related PersonPeopleFollowsConnections match this filter
  """
  none: PersonPeopleFollowsConnectionWhere
  """
  Return People where one of the related PersonPeopleFollowsConnections match this filter
  """
  single: PersonPeopleFollowsConnectionWhere
  """
  Return People where some of the related PersonPeopleFollowsConnections match this filter
  """
  some: PersonPeopleFollowsConnectionWhere
}

input PersonPeopleFollowsConnectionSort {
  node: PersonSort
}

input PersonPeopleFollowsConnectionWhere {
  AND: [PersonPeopleFollowsConnectionWhere!]
  NOT: PersonPeopleFollowsConnectionWhere
  OR: [PersonPeopleFollowsConnectionWhere!]
  node: PersonWhere
}

input PersonPeopleFollowsCreateFieldInput {
  node: PersonCreateInput!
}

input PersonPeopleFollowsDeleteFieldInput {
  delete: PersonDeleteInput
  where: PersonPeopleFollowsConnectionWhere
}

input PersonPeopleFollowsDisconnectFieldInput {
  disconnect: PersonDisconnectInput
  where: PersonPeopleFollowsConnectionWhere
}

input PersonPeopleFollowsFieldInput {
  connect: [PersonPeopleFollowsConnectFieldInput!]
  create: [PersonPeopleFollowsCreateFieldInput!]
}

input PersonPeopleFollowsNodeAggregationWhereInput {
  AND: [PersonPeopleFollowsNodeAggregationWhereInput!]
  NOT: PersonPeopleFollowsNodeAggregationWhereInput
  OR: [PersonPeopleFollowsNodeAggregationWhereInput!]
  born: BigIntScalarAggregationFilters
  born_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { eq: ... } } }' instead.")
  born_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gt: ... } } }' instead.")
  born_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { gte: ... } } }' instead.")
  born_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lt: ... } } }' instead.")
  born_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { average: { lte: ... } } }' instead.")
  born_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { eq: ... } } }' instead.")
  born_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gt: ... } } }' instead.")
  born_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { gte: ... } } }' instead.")
  born_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lt: ... } } }' instead.")
  born_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { max: { lte: ... } } }' instead.")
  born_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { eq: ... } } }' instead.")
  born_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gt: ... } } }' instead.")
  born_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { gte: ... } } }' instead.")
  born_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lt: ... } } }' instead.")
  born_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { min: { lte: ... } } }' instead.")
  born_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { eq: ... } } }' instead.")
  born_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gt: ... } } }' instead.")
  born_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { gte: ... } } }' instead.")
  born_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lt: ... } } }' instead.")
  born_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'born: { sum: { lte: ... } } }' instead.")
  name: StringScalarAggregationFilters
  name_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { eq: ... } } }' instead.")
  name_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gt: ... } } }' instead.")
  name_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { gte: ... } } }' instead.")
  name_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lt: ... } } }' instead.")
  name_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'name: { averageLength: { lte: ... } } }' instead.")
  name_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { eq: ... } } }' instead.")
  name_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gt: ... } } }' instead.")
  name_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { gte: ... } } }' instead.")
  name_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lt: ... } } }' instead.")
  name_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { longestLength: { lte: ... } } }' instead.")
  name_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { eq: ... } } }' instead.")
  name_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gt: ... } } }' instead.")
  name_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { gte: ... } } }' instead.")
  name_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lt: ... } } }' instead.")
  name_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'name: { shortestLength: { lte: ... } } }' instead.")
}

type PersonPeopleFollowsRelationship {
  cursor: String!
  node: Person!
}

input PersonPeopleFollowsUpdateConnectionInput {
  node: PersonUpdateInput
  where: PersonPeopleFollowsConnectionWhere
}

input PersonPeopleFollowsUpdateFieldInput {
  connect: [PersonPeopleFollowsConnectFieldInput!]
  create: [PersonPeopleFollowsCreateFieldInput!]
  delete: [PersonPeopleFollowsDeleteFieldInput!]
  disconnect: [PersonPeopleFollowsDisconnectFieldInput!]
  update: PersonPeopleFollowsUpdateConnectionInput
}

type PersonPersonFollowsPeopleAggregateSelection {
  count: CountConnection!
  node: PersonPersonFollowsPeopleNodeAggregateSelection
}

type PersonPersonFollowsPeopleNodeAggregateSelection {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

type PersonPersonPeopleFollowsAggregateSelection {
  count: CountConnection!
  node: PersonPersonPeopleFollowsNodeAggregateSelection
}

type PersonPersonPeopleFollowsNodeAggregateSelection {
  born: BigIntAggregateSelection!
  name: StringAggregateSelection!
}

input PersonProducedMoviesAggregateInput {
  AND: [PersonProducedMoviesAggregateInput!]
  NOT: PersonProducedMoviesAggregateInput
  OR: [PersonProducedMoviesAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PersonProducedMoviesNodeAggregationWhereInput
}

input PersonProducedMoviesConnectFieldInput {
  connect: [MovieConnectInput!]
  where: MovieConnectWhere
}

type PersonProducedMoviesConnection {
  aggregate: PersonMovieProducedMoviesAggregateSelection!
  edges: [PersonProducedMoviesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PersonProducedMoviesConnectionAggregateInput {
  AND: [PersonProducedMoviesConnectionAggregateInput!]
  NOT: PersonProducedMoviesConnectionAggregateInput
  OR: [PersonProducedMoviesConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: PersonProducedMoviesNodeAggregationWhereInput
}

input PersonProducedMoviesConnectionFilters {
  """
  Filter People by aggregating results on related PersonProducedMoviesConnections
  """
  aggregate: PersonProducedMoviesConnectionAggregateInput
  """
  Return People where all of the related PersonProducedMoviesConnections match this filter
  """
  all: PersonProducedMoviesConnectionWhere
  """
  Return People where none of the related PersonProducedMoviesConnections match this filter
  """
  none: PersonProducedMoviesConnectionWhere
  """
  Return People where one of the related PersonProducedMoviesConnections match this filter
  """
  single: PersonProducedMoviesConnectionWhere
  """
  Return People where some of the related PersonProducedMoviesConnections match this filter
  """
  some: PersonProducedMoviesConnectionWhere
}

input PersonProducedMoviesConnectionSort {
  node: MovieSort
}

input PersonProducedMoviesConnectionWhere {
  AND: [PersonProducedMoviesConnectionWhere!]
  NOT: PersonProducedMoviesConnectionWhere
  OR: [PersonProducedMoviesConnectionWhere!]
  node: MovieWhere
}

input PersonProducedMoviesCreateFieldInput {
  node: MovieCreateInput!
}

input PersonProducedMoviesDeleteFieldInput {
  delete: MovieDeleteInput
  where: PersonProducedMoviesConnectionWhere
}

input PersonProducedMoviesDisconnectFieldInput {
  disconnect: MovieDisconnectInput
  where: PersonProducedMoviesConnectionWhere
}

input PersonProducedMoviesFieldInput {
  connect: [PersonProducedMoviesConnectFieldInput!]
  create: [PersonProducedMoviesCreateFieldInput!]
}

input PersonProducedMoviesNodeAggregationWhereInput {
  AND: [PersonProducedMoviesNodeAggregationWhereInput!]
  NOT: PersonProducedMoviesNodeAggregationWhereInput
  OR: [PersonProducedMoviesNodeAggregationWhereInput!]
  released: BigIntScalarAggregationFilters
  released_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead.")
  released_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead.")
  released_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead.")
  released_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead.")
  released_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead.")
  released_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead.")
  released_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead.")
  released_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead.")
  released_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead.")
  released_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead.")
  released_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead.")
  released_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead.")
  released_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead.")
  released_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead.")
  released_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead.")
  released_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead.")
  released_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead.")
  released_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead.")
  released_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead.")
  released_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead.")
  tagline: StringScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead.")
  title: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead.")
  title_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead.")
  title_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead.")
  title_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead.")
  title_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead.")
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead.")
  title_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead.")
  title_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead.")
  title_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead.")
  title_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead.")
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead.")
  title_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead.")
  title_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead.")
  title_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead.")
  title_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead.")
  votes: BigIntScalarAggregationFilters
  votes_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { eq: ... } } }' instead.")
  votes_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gt: ... } } }' instead.")
  votes_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gte: ... } } }' instead.")
  votes_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lt: ... } } }' instead.")
  votes_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lte: ... } } }' instead.")
  votes_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { eq: ... } } }' instead.")
  votes_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gt: ... } } }' instead.")
  votes_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gte: ... } } }' instead.")
  votes_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lt: ... } } }' instead.")
  votes_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lte: ... } } }' instead.")
  votes_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { eq: ... } } }' instead.")
  votes_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gt: ... } } }' instead.")
  votes_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gte: ... } } }' instead.")
  votes_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lt: ... } } }' instead.")
  votes_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lte: ... } } }' instead.")
  votes_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { eq: ... } } }' instead.")
  votes_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gt: ... } } }' instead.")
  votes_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gte: ... } } }' instead.")
  votes_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lt: ... } } }' instead.")
  votes_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lte: ... } } }' instead.")
}

type PersonProducedMoviesRelationship {
  cursor: String!
  node: Movie!
}

input PersonProducedMoviesUpdateConnectionInput {
  node: MovieUpdateInput
  where: PersonProducedMoviesConnectionWhere
}

input PersonProducedMoviesUpdateFieldInput {
  connect: [PersonProducedMoviesConnectFieldInput!]
  create: [PersonProducedMoviesCreateFieldInput!]
  delete: [PersonProducedMoviesDeleteFieldInput!]
  disconnect: [PersonProducedMoviesDisconnectFieldInput!]
  update: PersonProducedMoviesUpdateConnectionInput
}

input PersonRelationshipFilters {
  """Filter type where all of the related People match this filter"""
  all: PersonWhere
  """Filter type where none of the related People match this filter"""
  none: PersonWhere
  """Filter type where one of the related People match this filter"""
  single: PersonWhere
  """Filter type where some of the related People match this filter"""
  some: PersonWhere
}

input PersonReviewedMoviesAggregateInput {
  AND: [PersonReviewedMoviesAggregateInput!]
  NOT: PersonReviewedMoviesAggregateInput
  OR: [PersonReviewedMoviesAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  edge: ReviewedPropertiesAggregationWhereInput
  node: PersonReviewedMoviesNodeAggregationWhereInput
}

input PersonReviewedMoviesConnectFieldInput {
  connect: [MovieConnectInput!]
  edge: ReviewedPropertiesCreateInput!
  where: MovieConnectWhere
}

type PersonReviewedMoviesConnection {
  aggregate: PersonMovieReviewedMoviesAggregateSelection!
  edges: [PersonReviewedMoviesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PersonReviewedMoviesConnectionAggregateInput {
  AND: [PersonReviewedMoviesConnectionAggregateInput!]
  NOT: PersonReviewedMoviesConnectionAggregateInput
  OR: [PersonReviewedMoviesConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  edge: ReviewedPropertiesAggregationWhereInput
  node: PersonReviewedMoviesNodeAggregationWhereInput
}

input PersonReviewedMoviesConnectionFilters {
  """
  Filter People by aggregating results on related PersonReviewedMoviesConnections
  """
  aggregate: PersonReviewedMoviesConnectionAggregateInput
  """
  Return People where all of the related PersonReviewedMoviesConnections match this filter
  """
  all: PersonReviewedMoviesConnectionWhere
  """
  Return People where none of the related PersonReviewedMoviesConnections match this filter
  """
  none: PersonReviewedMoviesConnectionWhere
  """
  Return People where one of the related PersonReviewedMoviesConnections match this filter
  """
  single: PersonReviewedMoviesConnectionWhere
  """
  Return People where some of the related PersonReviewedMoviesConnections match this filter
  """
  some: PersonReviewedMoviesConnectionWhere
}

input PersonReviewedMoviesConnectionSort {
  edge: ReviewedPropertiesSort
  node: MovieSort
}

input PersonReviewedMoviesConnectionWhere {
  AND: [PersonReviewedMoviesConnectionWhere!]
  NOT: PersonReviewedMoviesConnectionWhere
  OR: [PersonReviewedMoviesConnectionWhere!]
  edge: ReviewedPropertiesWhere
  node: MovieWhere
}

input PersonReviewedMoviesCreateFieldInput {
  edge: ReviewedPropertiesCreateInput!
  node: MovieCreateInput!
}

input PersonReviewedMoviesDeleteFieldInput {
  delete: MovieDeleteInput
  where: PersonReviewedMoviesConnectionWhere
}

input PersonReviewedMoviesDisconnectFieldInput {
  disconnect: MovieDisconnectInput
  where: PersonReviewedMoviesConnectionWhere
}

input PersonReviewedMoviesFieldInput {
  connect: [PersonReviewedMoviesConnectFieldInput!]
  create: [PersonReviewedMoviesCreateFieldInput!]
}

input PersonReviewedMoviesNodeAggregationWhereInput {
  AND: [PersonReviewedMoviesNodeAggregationWhereInput!]
  NOT: PersonReviewedMoviesNodeAggregationWhereInput
  OR: [PersonReviewedMoviesNodeAggregationWhereInput!]
  released: BigIntScalarAggregationFilters
  released_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead.")
  released_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead.")
  released_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead.")
  released_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead.")
  released_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead.")
  released_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead.")
  released_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead.")
  released_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead.")
  released_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead.")
  released_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead.")
  released_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead.")
  released_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead.")
  released_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead.")
  released_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead.")
  released_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead.")
  released_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead.")
  released_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead.")
  released_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead.")
  released_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead.")
  released_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead.")
  tagline: StringScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead.")
  title: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead.")
  title_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead.")
  title_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead.")
  title_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead.")
  title_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead.")
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead.")
  title_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead.")
  title_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead.")
  title_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead.")
  title_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead.")
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead.")
  title_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead.")
  title_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead.")
  title_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead.")
  title_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead.")
  votes: BigIntScalarAggregationFilters
  votes_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { eq: ... } } }' instead.")
  votes_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gt: ... } } }' instead.")
  votes_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gte: ... } } }' instead.")
  votes_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lt: ... } } }' instead.")
  votes_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lte: ... } } }' instead.")
  votes_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { eq: ... } } }' instead.")
  votes_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gt: ... } } }' instead.")
  votes_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gte: ... } } }' instead.")
  votes_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lt: ... } } }' instead.")
  votes_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lte: ... } } }' instead.")
  votes_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { eq: ... } } }' instead.")
  votes_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gt: ... } } }' instead.")
  votes_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gte: ... } } }' instead.")
  votes_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lt: ... } } }' instead.")
  votes_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lte: ... } } }' instead.")
  votes_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { eq: ... } } }' instead.")
  votes_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gt: ... } } }' instead.")
  votes_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gte: ... } } }' instead.")
  votes_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lt: ... } } }' instead.")
  votes_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lte: ... } } }' instead.")
}

type PersonReviewedMoviesRelationship {
  cursor: String!
  node: Movie!
  properties: ReviewedProperties!
}

input PersonReviewedMoviesUpdateConnectionInput {
  edge: ReviewedPropertiesUpdateInput
  node: MovieUpdateInput
  where: PersonReviewedMoviesConnectionWhere
}

input PersonReviewedMoviesUpdateFieldInput {
  connect: [PersonReviewedMoviesConnectFieldInput!]
  create: [PersonReviewedMoviesCreateFieldInput!]
  delete: [PersonReviewedMoviesDeleteFieldInput!]
  disconnect: [PersonReviewedMoviesDisconnectFieldInput!]
  update: PersonReviewedMoviesUpdateConnectionInput
}

"""
Fields to sort People by. The order in which sorts are applied is not guaranteed when specifying many fields in one PersonSort object.
"""
input PersonSort {
  born: SortDirection
  name: SortDirection
}

input PersonUpdateInput {
  actedInMovies: [PersonActedInMoviesUpdateFieldInput!]
  born: BigIntScalarMutations
  born_DECREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'born: { decrement: ... } }' instead.")
  born_INCREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'born: { increment: ... } }' instead.")
  born_SET: BigInt
  directedMovies: [PersonDirectedMoviesUpdateFieldInput!]
  followsPeople: [PersonFollowsPeopleUpdateFieldInput!]
  name: StringScalarMutations
  name_SET: String
  peopleFollows: [PersonPeopleFollowsUpdateFieldInput!]
  producedMovies: [PersonProducedMoviesUpdateFieldInput!]
  reviewedMovies: [PersonReviewedMoviesUpdateFieldInput!]
  wroteMovies: [PersonWroteMoviesUpdateFieldInput!]
}

input PersonWhere {
  AND: [PersonWhere!]
  NOT: PersonWhere
  OR: [PersonWhere!]
  actedInMovies: MovieRelationshipFilters
  actedInMoviesAggregate: PersonActedInMoviesAggregateInput @deprecated(reason: "Aggregate filters are moved inside the actedInMoviesConnection filter, please use { actedInMoviesConnection: { aggregate: {...} } } instead")
  actedInMoviesConnection: PersonActedInMoviesConnectionFilters
  """
  Return People where all of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_ALL: PersonActedInMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMoviesConnection: { all: { node: ... } } }' instead.")
  """
  Return People where none of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_NONE: PersonActedInMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMoviesConnection: { none: { node: ... } } }' instead.")
  """
  Return People where one of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SINGLE: PersonActedInMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMoviesConnection: { single: { node: ... } } }' instead.")
  """
  Return People where some of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SOME: PersonActedInMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMoviesConnection: { some: { node: ... } } }' instead.")
  """Return People where all of the related Movies match this filter"""
  actedInMovies_ALL: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMovies: { all: ... }' instead.")
  """Return People where none of the related Movies match this filter"""
  actedInMovies_NONE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMovies: { none: ... }' instead.")
  """Return People where one of the related Movies match this filter"""
  actedInMovies_SINGLE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMovies: {  single: ... }' instead.")
  """Return People where some of the related Movies match this filter"""
  actedInMovies_SOME: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'actedInMovies: {  some: ... }' instead.")
  born: BigIntScalarFilters
  born_EQ: BigInt @deprecated(reason: "Please use the relevant generic filter born: { eq: ... }")
  born_GT: BigInt @deprecated(reason: "Please use the relevant generic filter born: { gt: ... }")
  born_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter born: { gte: ... }")
  born_IN: [BigInt] @deprecated(reason: "Please use the relevant generic filter born: { in: ... }")
  born_LT: BigInt @deprecated(reason: "Please use the relevant generic filter born: { lt: ... }")
  born_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter born: { lte: ... }")
  directedMovies: MovieRelationshipFilters
  directedMoviesAggregate: PersonDirectedMoviesAggregateInput @deprecated(reason: "Aggregate filters are moved inside the directedMoviesConnection filter, please use { directedMoviesConnection: { aggregate: {...} } } instead")
  directedMoviesConnection: PersonDirectedMoviesConnectionFilters
  """
  Return People where all of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_ALL: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'directedMoviesConnection: { all: { node: ... } } }' instead.")
  """
  Return People where none of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_NONE: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'directedMoviesConnection: { none: { node: ... } } }' instead.")
  """
  Return People where one of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SINGLE: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'directedMoviesConnection: { single: { node: ... } } }' instead.")
  """
  Return People where some of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SOME: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'directedMoviesConnection: { some: { node: ... } } }' instead.")
  """Return People where all of the related Movies match this filter"""
  directedMovies_ALL: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'directedMovies: { all: ... }' instead.")
  """Return People where none of the related Movies match this filter"""
  directedMovies_NONE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'directedMovies: { none: ... }' instead.")
  """Return People where one of the related Movies match this filter"""
  directedMovies_SINGLE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'directedMovies: {  single: ... }' instead.")
  """Return People where some of the related Movies match this filter"""
  directedMovies_SOME: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'directedMovies: {  some: ... }' instead.")
  followsPeople: PersonRelationshipFilters
  followsPeopleAggregate: PersonFollowsPeopleAggregateInput @deprecated(reason: "Aggregate filters are moved inside the followsPeopleConnection filter, please use { followsPeopleConnection: { aggregate: {...} } } instead")
  followsPeopleConnection: PersonFollowsPeopleConnectionFilters
  """
  Return People where all of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_ALL: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeopleConnection: { all: { node: ... } } }' instead.")
  """
  Return People where none of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_NONE: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeopleConnection: { none: { node: ... } } }' instead.")
  """
  Return People where one of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SINGLE: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeopleConnection: { single: { node: ... } } }' instead.")
  """
  Return People where some of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SOME: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeopleConnection: { some: { node: ... } } }' instead.")
  """Return People where all of the related People match this filter"""
  followsPeople_ALL: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeople: { all: ... }' instead.")
  """Return People where none of the related People match this filter"""
  followsPeople_NONE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeople: { none: ... }' instead.")
  """Return People where one of the related People match this filter"""
  followsPeople_SINGLE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeople: {  single: ... }' instead.")
  """Return People where some of the related People match this filter"""
  followsPeople_SOME: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'followsPeople: {  some: ... }' instead.")
  name: StringScalarFilters
  name_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter name: { contains: ... }")
  name_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter name: { endsWith: ... }")
  name_EQ: String @deprecated(reason: "Please use the relevant generic filter name: { eq: ... }")
  name_IN: [String!] @deprecated(reason: "Please use the relevant generic filter name: { in: ... }")
  name_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter name: { startsWith: ... }")
  peopleFollows: PersonRelationshipFilters
  peopleFollowsAggregate: PersonPeopleFollowsAggregateInput @deprecated(reason: "Aggregate filters are moved inside the peopleFollowsConnection filter, please use { peopleFollowsConnection: { aggregate: {...} } } instead")
  peopleFollowsConnection: PersonPeopleFollowsConnectionFilters
  """
  Return People where all of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_ALL: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollowsConnection: { all: { node: ... } } }' instead.")
  """
  Return People where none of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_NONE: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollowsConnection: { none: { node: ... } } }' instead.")
  """
  Return People where one of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SINGLE: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollowsConnection: { single: { node: ... } } }' instead.")
  """
  Return People where some of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SOME: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollowsConnection: { some: { node: ... } } }' instead.")
  """Return People where all of the related People match this filter"""
  peopleFollows_ALL: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollows: { all: ... }' instead.")
  """Return People where none of the related People match this filter"""
  peopleFollows_NONE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollows: { none: ... }' instead.")
  """Return People where one of the related People match this filter"""
  peopleFollows_SINGLE: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollows: {  single: ... }' instead.")
  """Return People where some of the related People match this filter"""
  peopleFollows_SOME: PersonWhere @deprecated(reason: "Please use the relevant generic filter 'peopleFollows: {  some: ... }' instead.")
  producedMovies: MovieRelationshipFilters
  producedMoviesAggregate: PersonProducedMoviesAggregateInput @deprecated(reason: "Aggregate filters are moved inside the producedMoviesConnection filter, please use { producedMoviesConnection: { aggregate: {...} } } instead")
  producedMoviesConnection: PersonProducedMoviesConnectionFilters
  """
  Return People where all of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_ALL: PersonProducedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'producedMoviesConnection: { all: { node: ... } } }' instead.")
  """
  Return People where none of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_NONE: PersonProducedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'producedMoviesConnection: { none: { node: ... } } }' instead.")
  """
  Return People where one of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SINGLE: PersonProducedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'producedMoviesConnection: { single: { node: ... } } }' instead.")
  """
  Return People where some of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SOME: PersonProducedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'producedMoviesConnection: { some: { node: ... } } }' instead.")
  """Return People where all of the related Movies match this filter"""
  producedMovies_ALL: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'producedMovies: { all: ... }' instead.")
  """Return People where none of the related Movies match this filter"""
  producedMovies_NONE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'producedMovies: { none: ... }' instead.")
  """Return People where one of the related Movies match this filter"""
  producedMovies_SINGLE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'producedMovies: {  single: ... }' instead.")
  """Return People where some of the related Movies match this filter"""
  producedMovies_SOME: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'producedMovies: {  some: ... }' instead.")
  reviewedMovies: MovieRelationshipFilters
  reviewedMoviesAggregate: PersonReviewedMoviesAggregateInput @deprecated(reason: "Aggregate filters are moved inside the reviewedMoviesConnection filter, please use { reviewedMoviesConnection: { aggregate: {...} } } instead")
  reviewedMoviesConnection: PersonReviewedMoviesConnectionFilters
  """
  Return People where all of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_ALL: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { all: { node: ... } } }' instead.")
  """
  Return People where none of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_NONE: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { none: { node: ... } } }' instead.")
  """
  Return People where one of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SINGLE: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { single: { node: ... } } }' instead.")
  """
  Return People where some of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SOME: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMoviesConnection: { some: { node: ... } } }' instead.")
  """Return People where all of the related Movies match this filter"""
  reviewedMovies_ALL: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMovies: { all: ... }' instead.")
  """Return People where none of the related Movies match this filter"""
  reviewedMovies_NONE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMovies: { none: ... }' instead.")
  """Return People where one of the related Movies match this filter"""
  reviewedMovies_SINGLE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMovies: {  single: ... }' instead.")
  """Return People where some of the related Movies match this filter"""
  reviewedMovies_SOME: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'reviewedMovies: {  some: ... }' instead.")
  wroteMovies: MovieRelationshipFilters
  wroteMoviesAggregate: PersonWroteMoviesAggregateInput @deprecated(reason: "Aggregate filters are moved inside the wroteMoviesConnection filter, please use { wroteMoviesConnection: { aggregate: {...} } } instead")
  wroteMoviesConnection: PersonWroteMoviesConnectionFilters
  """
  Return People where all of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_ALL: PersonWroteMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMoviesConnection: { all: { node: ... } } }' instead.")
  """
  Return People where none of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_NONE: PersonWroteMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMoviesConnection: { none: { node: ... } } }' instead.")
  """
  Return People where one of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SINGLE: PersonWroteMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMoviesConnection: { single: { node: ... } } }' instead.")
  """
  Return People where some of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SOME: PersonWroteMoviesConnectionWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMoviesConnection: { some: { node: ... } } }' instead.")
  """Return People where all of the related Movies match this filter"""
  wroteMovies_ALL: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMovies: { all: ... }' instead.")
  """Return People where none of the related Movies match this filter"""
  wroteMovies_NONE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMovies: { none: ... }' instead.")
  """Return People where one of the related Movies match this filter"""
  wroteMovies_SINGLE: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMovies: {  single: ... }' instead.")
  """Return People where some of the related Movies match this filter"""
  wroteMovies_SOME: MovieWhere @deprecated(reason: "Please use the relevant generic filter 'wroteMovies: {  some: ... }' instead.")
}

input PersonWroteMoviesAggregateInput {
  AND: [PersonWroteMoviesAggregateInput!]
  NOT: PersonWroteMoviesAggregateInput
  OR: [PersonWroteMoviesAggregateInput!]
  count: IntScalarFilters
  count_EQ: Int
  count_GT: Int
  count_GTE: Int
  count_LT: Int
  count_LTE: Int
  node: PersonWroteMoviesNodeAggregationWhereInput
}

input PersonWroteMoviesConnectFieldInput {
  connect: [MovieConnectInput!]
  where: MovieConnectWhere
}

type PersonWroteMoviesConnection {
  aggregate: PersonMovieWroteMoviesAggregateSelection!
  edges: [PersonWroteMoviesRelationship!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PersonWroteMoviesConnectionAggregateInput {
  AND: [PersonWroteMoviesConnectionAggregateInput!]
  NOT: PersonWroteMoviesConnectionAggregateInput
  OR: [PersonWroteMoviesConnectionAggregateInput!]
  count: ConnectionAggregationCountFilterInput
  node: PersonWroteMoviesNodeAggregationWhereInput
}

input PersonWroteMoviesConnectionFilters {
  """
  Filter People by aggregating results on related PersonWroteMoviesConnections
  """
  aggregate: PersonWroteMoviesConnectionAggregateInput
  """
  Return People where all of the related PersonWroteMoviesConnections match this filter
  """
  all: PersonWroteMoviesConnectionWhere
  """
  Return People where none of the related PersonWroteMoviesConnections match this filter
  """
  none: PersonWroteMoviesConnectionWhere
  """
  Return People where one of the related PersonWroteMoviesConnections match this filter
  """
  single: PersonWroteMoviesConnectionWhere
  """
  Return People where some of the related PersonWroteMoviesConnections match this filter
  """
  some: PersonWroteMoviesConnectionWhere
}

input PersonWroteMoviesConnectionSort {
  node: MovieSort
}

input PersonWroteMoviesConnectionWhere {
  AND: [PersonWroteMoviesConnectionWhere!]
  NOT: PersonWroteMoviesConnectionWhere
  OR: [PersonWroteMoviesConnectionWhere!]
  node: MovieWhere
}

input PersonWroteMoviesCreateFieldInput {
  node: MovieCreateInput!
}

input PersonWroteMoviesDeleteFieldInput {
  delete: MovieDeleteInput
  where: PersonWroteMoviesConnectionWhere
}

input PersonWroteMoviesDisconnectFieldInput {
  disconnect: MovieDisconnectInput
  where: PersonWroteMoviesConnectionWhere
}

input PersonWroteMoviesFieldInput {
  connect: [PersonWroteMoviesConnectFieldInput!]
  create: [PersonWroteMoviesCreateFieldInput!]
}

input PersonWroteMoviesNodeAggregationWhereInput {
  AND: [PersonWroteMoviesNodeAggregationWhereInput!]
  NOT: PersonWroteMoviesNodeAggregationWhereInput
  OR: [PersonWroteMoviesNodeAggregationWhereInput!]
  released: BigIntScalarAggregationFilters
  released_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { eq: ... } } }' instead.")
  released_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gt: ... } } }' instead.")
  released_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { gte: ... } } }' instead.")
  released_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lt: ... } } }' instead.")
  released_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { average: { lte: ... } } }' instead.")
  released_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { eq: ... } } }' instead.")
  released_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gt: ... } } }' instead.")
  released_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { gte: ... } } }' instead.")
  released_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lt: ... } } }' instead.")
  released_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { max: { lte: ... } } }' instead.")
  released_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { eq: ... } } }' instead.")
  released_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gt: ... } } }' instead.")
  released_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { gte: ... } } }' instead.")
  released_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lt: ... } } }' instead.")
  released_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { min: { lte: ... } } }' instead.")
  released_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { eq: ... } } }' instead.")
  released_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gt: ... } } }' instead.")
  released_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { gte: ... } } }' instead.")
  released_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lt: ... } } }' instead.")
  released_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'released: { sum: { lte: ... } } }' instead.")
  tagline: StringScalarAggregationFilters
  tagline_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { eq: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { gte: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lt: ... } } }' instead.")
  tagline_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'tagline: { averageLength: { lte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { eq: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { gte: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lt: ... } } }' instead.")
  tagline_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { longestLength: { lte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { eq: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { gte: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lt: ... } } }' instead.")
  tagline_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'tagline: { shortestLength: { lte: ... } } }' instead.")
  title: StringScalarAggregationFilters
  title_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { eq: ... } } }' instead.")
  title_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gt: ... } } }' instead.")
  title_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { gte: ... } } }' instead.")
  title_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lt: ... } } }' instead.")
  title_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'title: { averageLength: { lte: ... } } }' instead.")
  title_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { eq: ... } } }' instead.")
  title_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gt: ... } } }' instead.")
  title_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { gte: ... } } }' instead.")
  title_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lt: ... } } }' instead.")
  title_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { longestLength: { lte: ... } } }' instead.")
  title_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { eq: ... } } }' instead.")
  title_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gt: ... } } }' instead.")
  title_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { gte: ... } } }' instead.")
  title_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lt: ... } } }' instead.")
  title_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'title: { shortestLength: { lte: ... } } }' instead.")
  votes: BigIntScalarAggregationFilters
  votes_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { eq: ... } } }' instead.")
  votes_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gt: ... } } }' instead.")
  votes_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { gte: ... } } }' instead.")
  votes_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lt: ... } } }' instead.")
  votes_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { average: { lte: ... } } }' instead.")
  votes_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { eq: ... } } }' instead.")
  votes_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gt: ... } } }' instead.")
  votes_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { gte: ... } } }' instead.")
  votes_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lt: ... } } }' instead.")
  votes_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { max: { lte: ... } } }' instead.")
  votes_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { eq: ... } } }' instead.")
  votes_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gt: ... } } }' instead.")
  votes_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { gte: ... } } }' instead.")
  votes_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lt: ... } } }' instead.")
  votes_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { min: { lte: ... } } }' instead.")
  votes_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { eq: ... } } }' instead.")
  votes_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gt: ... } } }' instead.")
  votes_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { gte: ... } } }' instead.")
  votes_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lt: ... } } }' instead.")
  votes_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'votes: { sum: { lte: ... } } }' instead.")
}

type PersonWroteMoviesRelationship {
  cursor: String!
  node: Movie!
}

input PersonWroteMoviesUpdateConnectionInput {
  node: MovieUpdateInput
  where: PersonWroteMoviesConnectionWhere
}

input PersonWroteMoviesUpdateFieldInput {
  connect: [PersonWroteMoviesConnectFieldInput!]
  create: [PersonWroteMoviesCreateFieldInput!]
  delete: [PersonWroteMoviesDeleteFieldInput!]
  disconnect: [PersonWroteMoviesDisconnectFieldInput!]
  update: PersonWroteMoviesUpdateConnectionInput
}

type Query {
  movies(limit: Int, offset: Int, sort: [MovieSort!], where: MovieWhere): [Movie!]!
  moviesConnection(after: String, first: Int, sort: [MovieSort!], where: MovieWhere): MoviesConnection!
  people(limit: Int, offset: Int, sort: [PersonSort!], where: PersonWhere): [Person!]!
  peopleConnection(after: String, first: Int, sort: [PersonSort!], where: PersonWhere): PeopleConnection!
}

"""
The edge properties for the following fields:
* Movie.peopleReviewed
* Person.reviewedMovies
"""
type ReviewedProperties @relationshipProperties @introspection {
  rating: BigInt! @introspection
  summary: String! @introspection
}

input ReviewedPropertiesAggregationWhereInput {
  AND: [ReviewedPropertiesAggregationWhereInput!]
  NOT: ReviewedPropertiesAggregationWhereInput
  OR: [ReviewedPropertiesAggregationWhereInput!]
  rating: BigIntScalarAggregationFilters
  rating_AVERAGE_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { average: { eq: ... } } }' instead.")
  rating_AVERAGE_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { average: { gt: ... } } }' instead.")
  rating_AVERAGE_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { average: { gte: ... } } }' instead.")
  rating_AVERAGE_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { average: { lt: ... } } }' instead.")
  rating_AVERAGE_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { average: { lte: ... } } }' instead.")
  rating_MAX_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { max: { eq: ... } } }' instead.")
  rating_MAX_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { max: { gt: ... } } }' instead.")
  rating_MAX_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { max: { gte: ... } } }' instead.")
  rating_MAX_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { max: { lt: ... } } }' instead.")
  rating_MAX_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { max: { lte: ... } } }' instead.")
  rating_MIN_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { min: { eq: ... } } }' instead.")
  rating_MIN_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { min: { gt: ... } } }' instead.")
  rating_MIN_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { min: { gte: ... } } }' instead.")
  rating_MIN_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { min: { lt: ... } } }' instead.")
  rating_MIN_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { min: { lte: ... } } }' instead.")
  rating_SUM_EQUAL: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { sum: { eq: ... } } }' instead.")
  rating_SUM_GT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { sum: { gt: ... } } }' instead.")
  rating_SUM_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { sum: { gte: ... } } }' instead.")
  rating_SUM_LT: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { sum: { lt: ... } } }' instead.")
  rating_SUM_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter 'rating: { sum: { lte: ... } } }' instead.")
  summary: StringScalarAggregationFilters
  summary_AVERAGE_LENGTH_EQUAL: Float @deprecated(reason: "Please use the relevant generic filter 'summary: { averageLength: { eq: ... } } }' instead.")
  summary_AVERAGE_LENGTH_GT: Float @deprecated(reason: "Please use the relevant generic filter 'summary: { averageLength: { gt: ... } } }' instead.")
  summary_AVERAGE_LENGTH_GTE: Float @deprecated(reason: "Please use the relevant generic filter 'summary: { averageLength: { gte: ... } } }' instead.")
  summary_AVERAGE_LENGTH_LT: Float @deprecated(reason: "Please use the relevant generic filter 'summary: { averageLength: { lt: ... } } }' instead.")
  summary_AVERAGE_LENGTH_LTE: Float @deprecated(reason: "Please use the relevant generic filter 'summary: { averageLength: { lte: ... } } }' instead.")
  summary_LONGEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { longestLength: { eq: ... } } }' instead.")
  summary_LONGEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { longestLength: { gt: ... } } }' instead.")
  summary_LONGEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { longestLength: { gte: ... } } }' instead.")
  summary_LONGEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { longestLength: { lt: ... } } }' instead.")
  summary_LONGEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { longestLength: { lte: ... } } }' instead.")
  summary_SHORTEST_LENGTH_EQUAL: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { shortestLength: { eq: ... } } }' instead.")
  summary_SHORTEST_LENGTH_GT: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { shortestLength: { gt: ... } } }' instead.")
  summary_SHORTEST_LENGTH_GTE: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { shortestLength: { gte: ... } } }' instead.")
  summary_SHORTEST_LENGTH_LT: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { shortestLength: { lt: ... } } }' instead.")
  summary_SHORTEST_LENGTH_LTE: Int @deprecated(reason: "Please use the relevant generic filter 'summary: { shortestLength: { lte: ... } } }' instead.")
}

input ReviewedPropertiesCreateInput {
  rating: BigInt!
  summary: String!
}

input ReviewedPropertiesSort {
  rating: SortDirection
  summary: SortDirection
}

input ReviewedPropertiesUpdateInput {
  rating: BigIntScalarMutations
  rating_DECREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'rating: { decrement: ... } }' instead.")
  rating_INCREMENT: BigInt @deprecated(reason: "Please use the relevant generic mutation 'rating: { increment: ... } }' instead.")
  rating_SET: BigInt
  summary: StringScalarMutations
  summary_SET: String
}

input ReviewedPropertiesWhere {
  AND: [ReviewedPropertiesWhere!]
  NOT: ReviewedPropertiesWhere
  OR: [ReviewedPropertiesWhere!]
  rating: BigIntScalarFilters
  rating_EQ: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { eq: ... }")
  rating_GT: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { gt: ... }")
  rating_GTE: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { gte: ... }")
  rating_IN: [BigInt!] @deprecated(reason: "Please use the relevant generic filter rating: { in: ... }")
  rating_LT: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { lt: ... }")
  rating_LTE: BigInt @deprecated(reason: "Please use the relevant generic filter rating: { lte: ... }")
  summary: StringScalarFilters
  summary_CONTAINS: String @deprecated(reason: "Please use the relevant generic filter summary: { contains: ... }")
  summary_ENDS_WITH: String @deprecated(reason: "Please use the relevant generic filter summary: { endsWith: ... }")
  summary_EQ: String @deprecated(reason: "Please use the relevant generic filter summary: { eq: ... }")
  summary_IN: [String!] @deprecated(reason: "Please use the relevant generic filter summary: { in: ... }")
  summary_STARTS_WITH: String @deprecated(reason: "Please use the relevant generic filter summary: { startsWith: ... }")
}

"""An enum for sorting in either ascending or descending order."""
enum SortDirection {
  """Sort by field values in ascending order."""
  ASC
  """Sort by field values in descending order."""
  DESC
}

type StringAggregateSelection {
  longest: String
  shortest: String
}

"""String list filters"""
input StringListFilters {
  eq: [String!]
  includes: String
}

"""Filters for an aggregation of a string field"""
input StringScalarAggregationFilters {
  averageLength: FloatScalarFilters
  longestLength: IntScalarFilters
  shortestLength: IntScalarFilters
}

"""String filters"""
input StringScalarFilters {
  contains: String
  endsWith: String
  eq: String
  in: [String!]
  startsWith: String
}

"""String mutations"""
input StringScalarMutations {
  set: String
}

scalar TransportOptions

"""
Information about the number of nodes and relationships created and deleted during an update mutation
"""
type UpdateInfo {
  nodesCreated: Int!
  nodesDeleted: Int!
  relationshipsCreated: Int!
  relationshipsDeleted: Int!
}

type UpdateMoviesMutationResponse {
  info: UpdateInfo!
  movies: [Movie!]!
}

type UpdatePeopleMutationResponse {
  info: UpdateInfo!
  people: [Person!]!
}

enum _RelationDirections {
  IN
  OUT
}"
`;

exports[`Neo4j should give correct response for example queries: example-query.graphql-query-result 1`] = `
{
  "data": {
    "movies": [
      {
        "peopleActedIn": [
          {
            "name": "Emil Eifrem",
          },
          {
            "name": "Hugo Weaving",
          },
        ],
        "released": 1999,
        "tagline": "Welcome to the Real World",
        "title": "The Matrix",
      },
      {
        "peopleActedIn": [
          {
            "name": "Hugo Weaving",
          },
          {
            "name": "Laurence Fishburne",
          },
        ],
        "released": 2003,
        "tagline": "Free your mind",
        "title": "The Matrix Reloaded",
      },
    ],
  },
}
`;
