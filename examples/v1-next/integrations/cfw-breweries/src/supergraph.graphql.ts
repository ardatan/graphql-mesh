export default '\nschema\n  @link(url: "https://specs.apollo.dev/link/v1.0")\n  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)\n  \n  \n  \n  \n  \n  @link(\n  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"\n  import: ["@example", "@httpOperation", "@transport", "@extraSchemaDefinitionDirective"]\n)\n{\n  query: Query\n  \n  \n}\n\n\n  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE\n\n  directive @join__field(\n    graph: join__Graph\n    requires: join__FieldSet\n    provides: join__FieldSet\n    type: String\n    external: Boolean\n    override: String\n    usedOverridden: Boolean\n  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\n  directive @join__graph(name: String!, url: String!) on ENUM_VALUE\n\n  directive @join__implements(\n    graph: join__Graph!\n    interface: String!\n  ) repeatable on OBJECT | INTERFACE\n\n  directive @join__type(\n    graph: join__Graph!\n    key: join__FieldSet\n    extension: Boolean! = false\n    resolvable: Boolean! = true\n    isInterfaceObject: Boolean! = false\n  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR\n\n  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION\n\n  scalar join__FieldSet\n\n\n  directive @link(\n    url: String\n    as: String\n    for: link__Purpose\n    import: [link__Import]\n  ) repeatable on SCHEMA\n\n  scalar link__Import\n\n  enum link__Purpose {\n    """\n    `SECURITY` features provide metadata necessary to securely resolve fields.\n    """\n    SECURITY\n\n    """\n    `EXECUTION` features provide metadata necessary for operation execution.\n    """\n    EXECUTION\n  }\n\n\n\n\n\n\n\nenum join__Graph {\n  OPEN_BREWERY_DB @join__graph(name: "OpenBreweryDB", url: "https://api.openbrewerydb.org/v1/") \n}\n\ndirective @example(subgraph: String, value: ObjMap)  repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR\n\ndirective @httpOperation(\n  subgraph: String\n  path: String\n  operationSpecificHeaders: ObjMap\n  httpMethod: HTTPMethod\n  isBinary: Boolean\n  requestBaseBody: ObjMap\n  queryParamArgMap: ObjMap\n  queryStringOptionsByParam: ObjMap\n  jsonApiFields: Boolean\n) repeatable on FIELD_DEFINITION\n\ndirective @transport(\n  subgraph: String\n  kind: String\n  location: String\n  headers: ObjMap\n  queryStringOptions: ObjMap\n  queryParams: ObjMap\n) repeatable on SCHEMA\n\ndirective @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT\n\n"""\nA field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.\n"""\nscalar URL @join__type(graph: OPEN_BREWERY_DB) \n\n"""\nA date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.\n"""\nscalar DateTime @join__type(graph: OPEN_BREWERY_DB) \n\nscalar ObjMap @join__type(graph: OPEN_BREWERY_DB) \n\nscalar _DirectiveExtensions @join__type(graph: OPEN_BREWERY_DB) \n\ntype Query @extraSchemaDefinitionDirective(\n  directives: {transport: [{subgraph: "OpenBreweryDB", kind: "rest", location: "https://api.openbrewerydb.org/v1/"}]}\n) @join__type(graph: OPEN_BREWERY_DB)  {\n  breweries(input: queryInput_breweries_input_Input) : [query_breweries_items] @httpOperation(subgraph: "OpenBreweryDB", path: "/breweries", httpMethod: GET) \n}\n\ntype query_breweries_items @join__type(graph: OPEN_BREWERY_DB)  {\n  id: String\n  name: String\n  brewery_type: String\n  street: String\n  city: String\n  state: String\n  postal_code: String\n  country: String\n  longitude: String\n  latitude: String\n  phone: String\n  website_url: URL\n  updated_at: DateTime\n  tag_list: [String]\n}\n\nenum HTTPMethod @join__type(graph: OPEN_BREWERY_DB)  {\n  GET @join__enumValue(graph: OPEN_BREWERY_DB) \n  HEAD @join__enumValue(graph: OPEN_BREWERY_DB) \n  POST @join__enumValue(graph: OPEN_BREWERY_DB) \n  PUT @join__enumValue(graph: OPEN_BREWERY_DB) \n  DELETE @join__enumValue(graph: OPEN_BREWERY_DB) \n  CONNECT @join__enumValue(graph: OPEN_BREWERY_DB) \n  OPTIONS @join__enumValue(graph: OPEN_BREWERY_DB) \n  TRACE @join__enumValue(graph: OPEN_BREWERY_DB) \n  PATCH @join__enumValue(graph: OPEN_BREWERY_DB) \n}\n\ninput queryInput_breweries_input_Input @example(\n  subgraph: "OpenBreweryDB"\n  value: "{\\"by_city\\":\\"san diego\\",\\"by_name\\":\\"cooper\\",\\"by_state\\":\\"ohio\\",\\"by_postal\\":\\"44107\\",\\"by_type\\":\\"micro\\",\\"by_tag\\":\\"patio\\",\\"by_tags\\":[\\"patio\\",\\"dog-friendly\\"],\\"page\\":15,\\"per_page\\":25,\\"sort\\":\\"-\\"}"\n) @join__type(graph: OPEN_BREWERY_DB)  {\n  by_city: String\n  by_name: String\n  by_state: String\n  by_postal: String\n  by_type: String\n  by_tag: String\n  by_tags: [String]\n  page: Int\n  per_page: Int\n  sort: String\n}\n    ';
