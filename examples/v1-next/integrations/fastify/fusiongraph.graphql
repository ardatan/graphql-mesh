schema
  @transport(
    subgraph: "Pets"
    kind: "rest"
    location: "http://localhost:{context.headers['x-upstream-port']:4001}"
  ) {
  query: Query
}

directive @httpOperation(
  subgraph: String
  path: String
  operationSpecificHeaders: ObjMap
  httpMethod: HTTPMethod
  isBinary: Boolean
  requestBaseBody: ObjMap
  queryParamArgMap: ObjMap
  queryStringOptionsByParam: ObjMap
  jsonApiFields: Boolean
) on FIELD_DEFINITION

directive @transport(
  subgraph: String
  kind: String
  location: String
  headers: ObjMap
  queryStringOptions: ObjMap
  queryParams: ObjMap
) on OBJECT

type Query {
  pet_by_petId(
    """
    ID of pet to return
    """
    petId: String! @source(subgraph: "Pets", name: "petId", type: "String")
  ): Pet
    @httpOperation(
      subgraph: "Pets"
      path: "/pet/{args.petId}"
      operationSpecificHeaders: "\"{\\\"accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
    )
    @source(subgraph: "Pets", name: "pet_by_petId", type: "Pet")
}

type Pet @source(subgraph: "Pets", name: "Pet") {
  name: String! @source(subgraph: "Pets", name: "name", type: "String!")
}

scalar ObjMap @source(subgraph: "Pets", name: "ObjMap") @source(subgraph: "Pets", name: "ObjMap")

enum HTTPMethod @source(subgraph: "Pets", name: "HTTPMethod") {
  GET @source(subgraph: "Pets", name: "GET")
  HEAD @source(subgraph: "Pets", name: "HEAD")
  POST @source(subgraph: "Pets", name: "POST")
  PUT @source(subgraph: "Pets", name: "PUT")
  DELETE @source(subgraph: "Pets", name: "DELETE")
  CONNECT @source(subgraph: "Pets", name: "CONNECT")
  OPTIONS @source(subgraph: "Pets", name: "OPTIONS")
  TRACE @source(subgraph: "Pets", name: "TRACE")
  PATCH @source(subgraph: "Pets", name: "PATCH")
}
