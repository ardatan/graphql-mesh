schema
  @transport(
    subgraph: "Cities"
    kind: "rest"
    location: "https://wft-geo-db.p.rapidapi.com/v1"
    headers: "{\"X-RapidAPI-Key\":\"{env.GEODB_API_KEY}\"}"
  )
  @transport(
    subgraph: "Weather"
    kind: "rest"
    location: "https://api.weatherbit.io/v2.0"
    headers: "{\"X-RapidAPI-Key\":\"{env.WEATHERBIT_API_KEY}\"}"
    queryParams: "{\"key\":\"{env.WEATHERBIT_API_KEY}\"}"
  ) {
  query: Query
}

directive @enum(subgraph: String, value: String) on ENUM_VALUE

directive @httpOperation(
  subgraph: String
  path: String
  operationSpecificHeaders: ObjMap
  httpMethod: HTTPMethod
  isBinary: Boolean
  requestBaseBody: ObjMap
  queryParamArgMap: ObjMap
  queryStringOptionsByParam: ObjMap
) on FIELD_DEFINITION

directive @transport(
  subgraph: String
  kind: String
  location: String
  headers: ObjMap
  queryStringOptions: ObjMap
  queryParams: ObjMap
) on OBJECT

directive @typescript(subgraph: String, type: String) on SCALAR | ENUM

directive @example(
  subgraph: String
  value: ObjMap
) repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

type Query {
  "Find administrative divisions, filtering by optional criteria. If no criteria are set, you will get back all\nknown divisions.\n"
  findAdminDivisionsUsingGET(
    "Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD"
    location: String
    "The location radius within which to find places"
    radius: Int
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
    "Only places in these countries (comma-delimited country codes or WikiData ids)"
    countryIds: String
    "Only places NOT in these countries (comma-delimited country codes or WikiData ids)"
    excludedCountryIds: String
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort places. \nFormat: ±SORT_FIELD,±SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/adminDivisions"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"location\\\":\\\"location\\\",\\\"radius\\\":\\\"radius\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\",\\\"countryIds\\\":\\\"countryIds\\\",\\\"excludedCountryIds\\\":\\\"excludedCountryIds\\\",\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findAdminDivisionsUsingGET($location: String, $radius: Int, $distanceUnit: String = \"MI\", $countryIds: String, $excludedCountryIds: String, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findAdminDivisionsUsingGET(location: $location, radius: $radius, distanceUnit: $distanceUnit, countryIds: $countryIds, excludedCountryIds: $excludedCountryIds, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(
      subgraph: "Cities"
      name: "findAdminDivisionsUsingGET"
      type: "Populated_Places_Response"
    )
  "Get the details for a specific administrative division, including location coordinates, population, and\nelevation above sea-level (if available).\n"
  getAdminDivisionUsingGET(
    "An admin-division id (either native 'id' or 'wikiDataId')"
    divisionId: String!
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Display results in this language"
    languageCode: String
  ): Populated_Place_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/adminDivisions/{args.divisionId}"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"languageCode\\\":\\\"languageCode\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getAdminDivisionUsingGET($divisionId: String!, $asciiMode: Boolean, $languageCode: String) { getAdminDivisionUsingGET(divisionId: $divisionId, asciiMode: $asciiMode, languageCode: $languageCode) }"
    )
    @source(subgraph: "Cities", name: "getAdminDivisionUsingGET", type: "Populated_Place_Response")
  "Find cities near the given administrative division, filtering by optional criteria. If no criteria are set, you\nwill get back all known cities.\n"
  findCitiesNearAdminDivisionUsingGET(
    "An admin-division id (either native 'id' or 'wikiDataId')"
    divisionId: String!
    "The location radius within which to find places"
    radius: Int
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
    "Only places in these countries (comma-delimited country codes or WikiData ids)"
    countryIds: String
    "Only places NOT in these countries (comma-delimited country codes or WikiData ids)"
    excludedCountryIds: String
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Only places for these types (comma-delimited): CITY | ADM2"
    types: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort places. \nFormat: ±SORT_FIELD,±SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/adminDivisions/{args.divisionId}/nearbyCities"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"radius\\\":\\\"radius\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\",\\\"countryIds\\\":\\\"countryIds\\\",\\\"excludedCountryIds\\\":\\\"excludedCountryIds\\\",\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"types\\\":\\\"types\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findCitiesNearAdminDivisionUsingGET($divisionId: String!, $radius: Int, $distanceUnit: String = \"MI\", $countryIds: String, $excludedCountryIds: String, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $types: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findCitiesNearAdminDivisionUsingGET(divisionId: $divisionId, radius: $radius, distanceUnit: $distanceUnit, countryIds: $countryIds, excludedCountryIds: $excludedCountryIds, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, types: $types, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(
      subgraph: "Cities"
      name: "findCitiesNearAdminDivisionUsingGET"
      type: "Populated_Places_Response"
    )
  "Find administrative divisions near the given origin division, filtering by optional criteria. If no criteria\nare set, you will get back all known divisions.\n"
  findDivisionsNearAdminDivisionUsingGET(
    "An admin-division id (either native 'id' or 'wikiDataId')"
    divisionId: String!
    "The location radius within which to find places"
    radius: Int
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
    "Only places in these countries (comma-delimited country codes or WikiData ids)"
    countryIds: String
    "Only places NOT in these countries (comma-delimited country codes or WikiData ids)"
    excludedCountryIds: String
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort places. \nFormat: ±SORT_FIELD,±SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/adminDivisions/{args.divisionId}/nearbyDivisions"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"radius\\\":\\\"radius\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\",\\\"countryIds\\\":\\\"countryIds\\\",\\\"excludedCountryIds\\\":\\\"excludedCountryIds\\\",\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findDivisionsNearAdminDivisionUsingGET($divisionId: String!, $radius: Int, $distanceUnit: String = \"MI\", $countryIds: String, $excludedCountryIds: String, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findDivisionsNearAdminDivisionUsingGET(divisionId: $divisionId, radius: $radius, distanceUnit: $distanceUnit, countryIds: $countryIds, excludedCountryIds: $excludedCountryIds, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(
      subgraph: "Cities"
      name: "findDivisionsNearAdminDivisionUsingGET"
      type: "Populated_Places_Response"
    )
  "Find cities, filtering by optional criteria. If no criteria are set, you will get back all known cities.\n"
  findCitiesUsingGET(
    "Only places near this location. Latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD"
    location: String
    "The location radius within which to find places"
    radius: Int
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
    "Only places in these countries (comma-delimited country codes or WikiData ids)"
    countryIds: String
    "Only places NOT in these countries (comma-delimited country codes or WikiData ids)"
    excludedCountryIds: String
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Only places for these types (comma-delimited): CITY | ADM2"
    types: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort places. \nFormat: ±SORT_FIELD,±SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/cities"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"location\\\":\\\"location\\\",\\\"radius\\\":\\\"radius\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\",\\\"countryIds\\\":\\\"countryIds\\\",\\\"excludedCountryIds\\\":\\\"excludedCountryIds\\\",\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"types\\\":\\\"types\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findCitiesUsingGET($location: String, $radius: Int, $distanceUnit: String = \"MI\", $countryIds: String, $excludedCountryIds: String, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $types: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findCitiesUsingGET(location: $location, radius: $radius, distanceUnit: $distanceUnit, countryIds: $countryIds, excludedCountryIds: $excludedCountryIds, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, types: $types, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(subgraph: "Cities", name: "findCitiesUsingGET", type: "Populated_Places_Response")
  "Get the details for a specific city, including location coordinates, population, and elevation above sea-level\n(if available).\n"
  getCityUsingGET(
    "A city id (either native 'id' or 'wikiDataId')"
    cityId: String!
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Display results in this language"
    languageCode: String
  ): Populated_Place_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/cities/{args.cityId}"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"languageCode\\\":\\\"languageCode\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCityUsingGET($cityId: String!, $asciiMode: Boolean, $languageCode: String) { getCityUsingGET(cityId: $cityId, asciiMode: $asciiMode, languageCode: $languageCode) }"
    )
    @source(subgraph: "Cities", name: "getCityUsingGET", type: "Populated_Place_Response")
  "Get city date-time"
  getCityDateTimeUsingGET(
    "A city id (either native 'id' or 'wikiDataId')"
    cityId: String!
  ): Date_Time_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/cities/{args.cityId}/dateTime"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCityDateTimeUsingGET($cityId: String!) { getCityDateTimeUsingGET(cityId: $cityId) }"
    )
    @source(subgraph: "Cities", name: "getCityDateTimeUsingGET", type: "Date_Time_Response")
  "Get distance from the given city"
  getCityDistanceUsingGET(
    "A city id (either native 'id' or 'wikiDataId')"
    cityId: String!
    "Distance to this city"
    toCityId: String!
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
  ): Distance_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/cities/{args.cityId}/distance"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"toCityId\\\":\\\"toCityId\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCityDistanceUsingGET($cityId: String!, $toCityId: String!, $distanceUnit: String = \"MI\") { getCityDistanceUsingGET(cityId: $cityId, toCityId: $toCityId, distanceUnit: $distanceUnit) }"
    )
    @source(subgraph: "Cities", name: "getCityDistanceUsingGET", type: "Distance_Response")
  "Get the details for the containing populated place (e.g., its county or other administrative division), including location coordinates, population, and elevation above sea-level\n(if available).\n"
  getCityLocatedInUsingGET(
    "A city id (either native 'id' or 'wikiDataId')"
    cityId: String!
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Display results in this language"
    languageCode: String
  ): Populated_Place_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/cities/{args.cityId}/locatedIn"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"languageCode\\\":\\\"languageCode\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCityLocatedInUsingGET($cityId: String!, $asciiMode: Boolean, $languageCode: String) { getCityLocatedInUsingGET(cityId: $cityId, asciiMode: $asciiMode, languageCode: $languageCode) }"
    )
    @source(subgraph: "Cities", name: "getCityLocatedInUsingGET", type: "Populated_Place_Response")
  "Find cities near the given origin city, filtering by optional criteria. If no criteria are set, you will get\nback all known cities.\n"
  findCitiesNearCityUsingGET(
    "A city id (either native 'id' or 'wikiDataId')"
    cityId: String!
    "The location radius within which to find places"
    radius: Int
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
    "Only places in these countries (comma-delimited country codes or WikiData ids)"
    countryIds: String
    "Only places NOT in these countries (comma-delimited country codes or WikiData ids)"
    excludedCountryIds: String
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Only places for these types (comma-delimited): CITY | ADM2"
    types: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort places. \nFormat: ±SORT_FIELD,±SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/cities/{args.cityId}/nearbyCities"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"radius\\\":\\\"radius\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\",\\\"countryIds\\\":\\\"countryIds\\\",\\\"excludedCountryIds\\\":\\\"excludedCountryIds\\\",\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"types\\\":\\\"types\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findCitiesNearCityUsingGET($cityId: String!, $radius: Int, $distanceUnit: String = \"MI\", $countryIds: String, $excludedCountryIds: String, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $types: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findCitiesNearCityUsingGET(cityId: $cityId, radius: $radius, distanceUnit: $distanceUnit, countryIds: $countryIds, excludedCountryIds: $excludedCountryIds, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, types: $types, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(
      subgraph: "Cities"
      name: "findCitiesNearCityUsingGET"
      type: "Populated_Places_Response"
    )
  "Get city time"
  getCityTimeUsingGET(
    "A city id (either native 'id' or 'wikiDataId')"
    cityId: String!
  ): Time_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/cities/{args.cityId}/time"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCityTimeUsingGET($cityId: String!) { getCityTimeUsingGET(cityId: $cityId) }"
    )
    @source(subgraph: "Cities", name: "getCityTimeUsingGET", type: "Time_Response")
  "Find countries, filtering by optional criteria. If no criteria are set, you will get back all known countries.\n"
  getCountriesUsingGET(
    "Only countries supporting this currency"
    currencyCode: String
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort countries. \nFormat: ±SORT_FIELD \nwhere SORT_FIELD = code | name"
    sort: String
  ): Countries_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/countries"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"currencyCode\\\":\\\"currencyCode\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCountriesUsingGET($currencyCode: String, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String) { getCountriesUsingGET(currencyCode: $currencyCode, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort) }"
    )
    @source(subgraph: "Cities", name: "getCountriesUsingGET", type: "Countries_Response")
  "Get the details for a specific country, including number of regions."
  getCountryUsingGET(
    "An ISO-3166 country code or WikiData id"
    countryId: String!
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Display results in this language"
    languageCode: String
  ): Country_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/countries/{args.countryId}"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"languageCode\\\":\\\"languageCode\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCountryUsingGET($countryId: String!, $asciiMode: Boolean, $languageCode: String) { getCountryUsingGET(countryId: $countryId, asciiMode: $asciiMode, languageCode: $languageCode) }"
    )
    @source(subgraph: "Cities", name: "getCountryUsingGET", type: "Country_Response")
  "Get all regions in a specific country. These could be states, provinces, districts, or otherwise major\npolitical divisions.\n"
  getRegionsUsingGET(
    "An ISO-3166 country code or WikiData id"
    countryId: String!
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort regions. \nFormat: ±SORT_FIELD \nwhere SORT_FIELD = fipsCode | isoCode | name"
    sort: String
  ): Country_Regions_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/countries/{args.countryId}/regions"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getRegionsUsingGET($countryId: String!, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String) { getRegionsUsingGET(countryId: $countryId, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort) }"
    )
    @source(subgraph: "Cities", name: "getRegionsUsingGET", type: "Country_Regions_Response")
  "Get the details of a specific country region, including number of cities."
  getRegionUsingGET(
    "An ISO-3166 country code or WikiData id"
    countryId: String!
    "An ISO-3166 or FIPS region code"
    regionCode: String!
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Display results in this language"
    languageCode: String
  ): Country_Region_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/countries/{args.countryId}/regions/{args.regionCode}"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"languageCode\\\":\\\"languageCode\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getRegionUsingGET($countryId: String!, $regionCode: String!, $asciiMode: Boolean, $languageCode: String) { getRegionUsingGET(countryId: $countryId, regionCode: $regionCode, asciiMode: $asciiMode, languageCode: $languageCode) }"
    )
    @source(subgraph: "Cities", name: "getRegionUsingGET", type: "Country_Region_Response")
  "Get the administrative divisions in a specific country region. The country and region info is omitted in the\nresponse.\n"
  findRegionDivisionsUsingGET(
    "An ISO-3166 country code or WikiData id"
    countryId: String!
    "An ISO-3166 or FIPS region code"
    regionCode: String!
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort place results. \n'Format: ±SORT_FIELD,±SORT_FIELD' \nwhere SORT_FIELD = elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/countries/{args.countryId}/regions/{args.regionCode}/adminDivisions"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findRegionDivisionsUsingGET($countryId: String!, $regionCode: String!, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findRegionDivisionsUsingGET(countryId: $countryId, regionCode: $regionCode, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(
      subgraph: "Cities"
      name: "findRegionDivisionsUsingGET"
      type: "Populated_Places_Response"
    )
  "Get the cities in a specific country region. The country and region info is omitted in the response.\n"
  findRegionCitiesUsingGET(
    "An ISO-3166 country code or WikiData id"
    countryId: String!
    "An ISO-3166 or FIPS region code"
    regionCode: String!
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Only places for these types (comma-delimited): CITY | ADM2"
    types: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort place results. \n'Format: ±SORT_FIELD,±SORT_FIELD' \nwhere SORT_FIELD = elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/countries/{args.countryId}/regions/{args.regionCode}/cities"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"types\\\":\\\"types\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findRegionCitiesUsingGET($countryId: String!, $regionCode: String!, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $types: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findRegionCitiesUsingGET(countryId: $countryId, regionCode: $regionCode, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, types: $types, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(subgraph: "Cities", name: "findRegionCitiesUsingGET", type: "Populated_Places_Response")
  "Find cities near the given location, filtering by optional criteria. If no criteria are set, you will get back\nall known cities.\n"
  findCitiesNearLocationUsingGET(
    "A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD"
    locationId: String!
    "The location radius within which to find places"
    radius: Int
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
    "Only places in these countries (comma-delimited country codes or WikiData ids)"
    countryIds: String
    "Only places NOT in these countries (comma-delimited country codes or WikiData ids)"
    excludedCountryIds: String
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Only places for these types (comma-delimited): CITY | ADM2"
    types: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort places. \nFormat: ±SORT_FIELD,±SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/locations/{args.locationId}/nearbyCities"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"radius\\\":\\\"radius\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\",\\\"countryIds\\\":\\\"countryIds\\\",\\\"excludedCountryIds\\\":\\\"excludedCountryIds\\\",\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"types\\\":\\\"types\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findCitiesNearLocationUsingGET($locationId: String!, $radius: Int, $distanceUnit: String = \"MI\", $countryIds: String, $excludedCountryIds: String, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $types: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findCitiesNearLocationUsingGET(locationId: $locationId, radius: $radius, distanceUnit: $distanceUnit, countryIds: $countryIds, excludedCountryIds: $excludedCountryIds, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, types: $types, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(
      subgraph: "Cities"
      name: "findCitiesNearLocationUsingGET"
      type: "Populated_Places_Response"
    )
  "Find administrative divisions near the given location, filtering by optional criteria. If no criteria are set,\nyou will get back all known divisions.\n"
  findDivisionsNearLocationUsingGET(
    "A latitude/longitude in ISO-6709 format: ±DD.DDDD±DDD.DDDD"
    locationId: String!
    "The location radius within which to find places"
    radius: Int
    "The unit of distance: MI | KM"
    distanceUnit: String = "MI"
    "Only places in these countries (comma-delimited country codes or WikiData ids)"
    countryIds: String
    "Only places NOT in these countries (comma-delimited country codes or WikiData ids)"
    excludedCountryIds: String
    "Only places having at least this population"
    minPopulation: Int
    "Only places having no more than this population"
    maxPopulation: Int
    "Only entities whose names start with this prefix. If languageCode is set, the prefix will be matched on the name\nas it appears in that language."
    namePrefix: String
    "When name-prefix matching, whether or not to match on names in the default language if a non-default languageCode is set."
    namePrefixDefaultLangResults: Boolean = true
    "Only places in these time-zones (comma-delimited)"
    timeZoneIds: String
    "Display results using ASCII characters"
    asciiMode: Boolean
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "Display results in this language"
    languageCode: String
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
    "How to sort places. \nFormat: ±SORT_FIELD,±SORT_FIELD \nwhere SORT_FIELD = countryCode | elevation | name | population"
    sort: String
    "Whether to include any divisions marked deleted: ALL | SINCE_YESTERDAY | SINCE_LAST_WEEK | NONE"
    includeDeleted: String = "NONE"
  ): Populated_Places_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/geo/locations/{args.locationId}/nearbyDivisions"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"radius\\\":\\\"radius\\\",\\\"distanceUnit\\\":\\\"distanceUnit\\\",\\\"countryIds\\\":\\\"countryIds\\\",\\\"excludedCountryIds\\\":\\\"excludedCountryIds\\\",\\\"minPopulation\\\":\\\"minPopulation\\\",\\\"maxPopulation\\\":\\\"maxPopulation\\\",\\\"namePrefix\\\":\\\"namePrefix\\\",\\\"namePrefixDefaultLangResults\\\":\\\"namePrefixDefaultLangResults\\\",\\\"timeZoneIds\\\":\\\"timeZoneIds\\\",\\\"asciiMode\\\":\\\"asciiMode\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"languageCode\\\":\\\"languageCode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\",\\\"sort\\\":\\\"sort\\\",\\\"includeDeleted\\\":\\\"includeDeleted\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query findDivisionsNearLocationUsingGET($locationId: String!, $radius: Int, $distanceUnit: String = \"MI\", $countryIds: String, $excludedCountryIds: String, $minPopulation: Int, $maxPopulation: Int, $namePrefix: String, $namePrefixDefaultLangResults: Boolean = true, $timeZoneIds: String, $asciiMode: Boolean, $hateoasMode: Boolean = true, $languageCode: String, $limit: Int = 10, $offset: Int, $sort: String, $includeDeleted: String = \"NONE\") { findDivisionsNearLocationUsingGET(locationId: $locationId, radius: $radius, distanceUnit: $distanceUnit, countryIds: $countryIds, excludedCountryIds: $excludedCountryIds, minPopulation: $minPopulation, maxPopulation: $maxPopulation, namePrefix: $namePrefix, namePrefixDefaultLangResults: $namePrefixDefaultLangResults, timeZoneIds: $timeZoneIds, asciiMode: $asciiMode, hateoasMode: $hateoasMode, languageCode: $languageCode, limit: $limit, offset: $offset, sort: $sort, includeDeleted: $includeDeleted) }"
    )
    @source(
      subgraph: "Cities"
      name: "findDivisionsNearLocationUsingGET"
      type: "Populated_Places_Response"
    )
  "Find currencies, filtering by optional criteria. If no criteria are set, you will get back all known currencies."
  getCurrenciesUsingGET(
    "Currencies for this country id"
    countryId: String!
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
  ): Currencies_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/locale/currencies"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"countryId\\\":\\\"countryId\\\",\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getCurrenciesUsingGET($countryId: String!, $hateoasMode: Boolean = true, $limit: Int = 10, $offset: Int) { getCurrenciesUsingGET(countryId: $countryId, hateoasMode: $hateoasMode, limit: $limit, offset: $offset) }"
    )
    @source(subgraph: "Cities", name: "getCurrenciesUsingGET", type: "Currencies_Response")
  "Get all supported languages"
  getLanguagesUsingGET(
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
  ): Languages_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/locale/languages"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getLanguagesUsingGET($hateoasMode: Boolean = true, $limit: Int = 10, $offset: Int) { getLanguagesUsingGET(hateoasMode: $hateoasMode, limit: $limit, offset: $offset) }"
    )
    @source(subgraph: "Cities", name: "getLanguagesUsingGET", type: "Languages_Response")
  "Get all known locales"
  getLocalesUsingGET(
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
  ): Locales_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/locale/locales"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getLocalesUsingGET($hateoasMode: Boolean = true, $limit: Int = 10, $offset: Int) { getLocalesUsingGET(hateoasMode: $hateoasMode, limit: $limit, offset: $offset) }"
    )
    @source(subgraph: "Cities", name: "getLocalesUsingGET", type: "Locales_Response")
  "Get all known time-zones"
  getTimezonesUsingGET(
    "Include HATEOAS-style links in results"
    hateoasMode: Boolean = true
    "The maximum number of results to retrieve"
    limit: Int = 10
    "The zero-ary offset index into the results"
    offset: Int
  ): Time_Zones_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/locale/timezones"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
      queryParamArgMap: "\"{\\\"hateoasMode\\\":\\\"hateoasMode\\\",\\\"limit\\\":\\\"limit\\\",\\\"offset\\\":\\\"offset\\\"}\""
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getTimezonesUsingGET($hateoasMode: Boolean = true, $limit: Int = 10, $offset: Int) { getTimezonesUsingGET(hateoasMode: $hateoasMode, limit: $limit, offset: $offset) }"
    )
    @source(subgraph: "Cities", name: "getTimezonesUsingGET", type: "Time_Zones_Response")
  "Get time-zone"
  getTimeZoneUsingGET("A time-zone id" zoneId: String!): Time_Zone_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/locale/timezones/{args.zoneId}"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getTimeZoneUsingGET($zoneId: String!) { getTimeZoneUsingGET(zoneId: $zoneId) }"
    )
    @source(subgraph: "Cities", name: "getTimeZoneUsingGET", type: "Time_Zone_Response")
  "Get time-zone date-time"
  getTimeZoneDateTimeUsingGET("A time-zone id" zoneId: String!): Date_Time_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/locale/timezones/{args.zoneId}/dateTime"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getTimeZoneDateTimeUsingGET($zoneId: String!) { getTimeZoneDateTimeUsingGET(zoneId: $zoneId) }"
    )
    @source(subgraph: "Cities", name: "getTimeZoneDateTimeUsingGET", type: "Date_Time_Response")
  "Get time-zone time"
  getTimeZoneTimeUsingGET("A time-zone id" zoneId: String!): Time_Response
    @httpOperation(
      subgraph: "Cities"
      path: "/locale/timezones/{args.zoneId}/time"
      operationSpecificHeaders: "\"{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Accept\\\":\\\"application/json\\\"}\""
      httpMethod: GET
    )
    @resolver(
      subgraph: "Cities"
      operation: "query getTimeZoneTimeUsingGET($zoneId: String!) { getTimeZoneTimeUsingGET(zoneId: $zoneId) }"
    )
    @source(subgraph: "Cities", name: "getTimeZoneTimeUsingGET", type: "Time_Response")
  "Returns severe weather alerts issued by meteorological agencies - given a lat, and a lon."
  alerts_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Wraps return in jsonp callback - Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): WeatherAlert
    @httpOperation(
      subgraph: "Weather"
      path: "/alerts?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query alerts_by_lat_by_lon($lat: Float!, $lon: Float!, $callback: String, $key: String) { alerts_by_lat_by_lon(lat: $lat, lon: $lon, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "alerts_by_lat_by_lon", type: "WeatherAlert")
  "Downloads bulk data files - OPTIONS: ( current.csv.gz, forecast_hourly.csv.gz, forecast_daily.csv.gz). Units are Metric (Celcius, m/s, etc)."
  bulk_files_by_file(
    "Filename (ie. current.csv.gz)"
    file: String!
    "Your registered API key."
    key: String
  ): JSON
    @httpOperation(
      subgraph: "Weather"
      path: "/bulk/files/{args.file}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query bulk_files_by_file($file: String!, $key: String) { bulk_files_by_file(file: $file, key: $key) }"
    )
    @source(subgraph: "Weather", name: "bulk_files_by_file", type: "JSON")
  "Returns current air quality conditions."
  current_airquality_by_city_by_country(
    "City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current/airquality?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_airquality_by_city_by_country($city: String!, $country: String!, $state: String, $callback: String, $key: String) { current_airquality_by_city_by_country(city: $city, country: $country, state: $state, callback: $callback, key: $key) }"
    )
    @source(
      subgraph: "Weather"
      name: "current_airquality_by_city_by_country"
      type: "AQCurrentGroup"
    )
  "Returns current air quality conditions."
  current_airquality_by_city_id(
    "City ID. Example: 4487042"
    city_id: Int!
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current/airquality?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_airquality_by_city_id($city_id: Int!, $callback: String, $key: String) { current_airquality_by_city_id(city_id: $city_id, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_airquality_by_city_id", type: "AQCurrentGroup")
  "Returns current air quality conditions."
  current_airquality_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current/airquality?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_airquality_by_lat_by_lon($lat: Float!, $lon: Float!, $callback: String, $key: String) { current_airquality_by_lat_by_lon(lat: $lat, lon: $lon, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_airquality_by_lat_by_lon", type: "AQCurrentGroup")
  "Returns current air quality conditions."
  current_airquality_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: Int!
    "Country Code (2 letter)."
    country: String
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current/airquality?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_airquality_by_postal_code($postal_code: Int!, $country: String, $callback: String, $key: String) { current_airquality_by_postal_code(postal_code: $postal_code, country: $country, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_airquality_by_postal_code", type: "AQCurrentGroup")
  "Returns a group of Current Observations - Given a list of City IDs. "
  current_by_cities(
    "Comma separated list of City ID's. Example: 4487042, 4494942, 4504871"
    cities: String!
    units: queryInput_current_by_cities_units
    marine: t_const
    lang: queryInput_current_by_cities_lang
    "Wraps return in jsonp callback - Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?cities={args.cities}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"units\\\":\\\"units\\\",\\\"marine\\\":\\\"marine\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_cities($cities: String!, $units: queryInput_current_by_cities_units, $marine: t_const, $lang: queryInput_current_by_cities_lang, $callback: String, $key: String) { current_by_cities(cities: $cities, units: $units, marine: $marine, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_cities", type: "CurrentObsGroup")
  "Returns a Current Observation - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate."
  current_by_city_by_country(
    "City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    include: minutely_const
    "Full name of state."
    state: String
    marine: t_const
    units: queryInput_current_by_city_by_country_units
    lang: queryInput_current_by_city_by_country_lang
    "Wraps return in jsonp callback - Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"include\\\":\\\"include\\\",\\\"state\\\":\\\"state\\\",\\\"marine\\\":\\\"marine\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_city_by_country($city: String!, $country: String!, $include: minutely_const, $state: String, $marine: t_const, $units: queryInput_current_by_city_by_country_units, $lang: queryInput_current_by_city_by_country_lang, $callback: String, $key: String) { current_by_city_by_country(city: $city, country: $country, include: $include, state: $state, marine: $marine, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_city_by_country", type: "CurrentObsGroup")
  "Returns current weather observation - Given a City ID. "
  current_by_city_id(
    "City ID. Example: 4487042"
    city_id: String!
    units: queryInput_current_by_city_id_units
    include: minutely_const
    marine: t_const
    lang: queryInput_current_by_city_id_lang
    "Wraps return in jsonp callback - Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"units\\\":\\\"units\\\",\\\"include\\\":\\\"include\\\",\\\"marine\\\":\\\"marine\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_city_id($city_id: String!, $units: queryInput_current_by_city_id_units, $include: minutely_const, $marine: t_const, $lang: queryInput_current_by_city_id_lang, $callback: String, $key: String) { current_by_city_id(city_id: $city_id, units: $units, include: $include, marine: $marine, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_city_id", type: "CurrentObsGroup")
  "Returns a Current Observation - given a lat, and a lon."
  current_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    include: minutely_const
    marine: t_const
    units: queryInput_current_by_lat_by_lon_units
    lang: queryInput_current_by_lat_by_lon_lang
    "Wraps return in jsonp callback - Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"include\\\":\\\"include\\\",\\\"marine\\\":\\\"marine\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_lat_by_lon($lat: Float!, $lon: Float!, $include: minutely_const, $marine: t_const, $units: queryInput_current_by_lat_by_lon_units, $lang: queryInput_current_by_lat_by_lon_lang, $callback: String, $key: String) { current_by_lat_by_lon(lat: $lat, lon: $lon, include: $include, marine: $marine, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_lat_by_lon", type: "CurrentObsGroup")
  "Returns a group of Current Observations - Given a list of points (lat1, lon1), (lat2, lon2), (latN, lonN), ..."
  current_by_points(
    "Comma separated list of points. Example: (35.5, -75.5),(45, 65),(45.12, -130.5)"
    points: String!
    units: queryInput_current_by_points_units
    lang: queryInput_current_by_points_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?points={args.points}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_points($points: String!, $units: queryInput_current_by_points_units, $lang: queryInput_current_by_points_lang, $callback: String, $key: String) { current_by_points(points: $points, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_points", type: "CurrentObsGroup")
  "Returns current weather observation - Given a Postal Code. "
  current_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: String!
    "Country Code (2 letter)."
    country: String
    include: minutely_const
    marine: t_const
    units: queryInput_current_by_postal_code_units
    lang: queryInput_current_by_postal_code_lang
    "Wraps return in jsonp callback - Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"include\\\":\\\"include\\\",\\\"marine\\\":\\\"marine\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_postal_code($postal_code: String!, $country: String, $include: minutely_const, $marine: t_const, $units: queryInput_current_by_postal_code_units, $lang: queryInput_current_by_postal_code_lang, $callback: String, $key: String) { current_by_postal_code(postal_code: $postal_code, country: $country, include: $include, marine: $marine, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_postal_code", type: "CurrentObsGroup")
  "Returns a Current Observation - Given a station ID."
  current_by_station(
    "Station Call ID."
    station: String!
    include: minutely_const
    units: queryInput_current_by_station_units
    lang: queryInput_current_by_station_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?station={args.station}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"include\\\":\\\"include\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_station($station: String!, $include: minutely_const, $units: queryInput_current_by_station_units, $lang: queryInput_current_by_station_lang, $callback: String, $key: String) { current_by_station(station: $station, include: $include, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_station", type: "CurrentObsGroup")
  "Returns a group of Current Observations - Given a list of Station Call IDs. "
  current_by_stations(
    "Comma separated list of Station Call ID's. Example: KRDU,KBFI,KVNY"
    stations: String!
    units: queryInput_current_by_stations_units
    lang: queryInput_current_by_stations_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): CurrentObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/current?stations={args.stations}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query current_by_stations($stations: String!, $units: queryInput_current_by_stations_units, $lang: queryInput_current_by_stations_lang, $callback: String, $key: String) { current_by_stations(stations: $stations, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "current_by_stations", type: "CurrentObsGroup")
  "Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period."
  forecast_airquality_by_city_by_country(
    "City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Number of hours to return."
    hours: Int
    "Your registered API key."
    key: String
  ): AQHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/airquality?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"callback\\\":\\\"callback\\\",\\\"hours\\\":\\\"hours\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_airquality_by_city_by_country($city: String!, $country: String!, $state: String, $callback: String, $hours: Int, $key: String) { forecast_airquality_by_city_by_country(city: $city, country: $country, state: $state, callback: $callback, hours: $hours, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_airquality_by_city_by_country", type: "AQHourly")
  "Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period."
  forecast_airquality_by_city_id(
    "City ID. Example: 4487042"
    city_id: Int!
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Number of hours to return."
    hours: Int
    "Your registered API key."
    key: String
  ): AQHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/airquality?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"callback\\\":\\\"callback\\\",\\\"hours\\\":\\\"hours\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_airquality_by_city_id($city_id: Int!, $callback: String, $hours: Int, $key: String) { forecast_airquality_by_city_id(city_id: $city_id, callback: $callback, hours: $hours, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_airquality_by_city_id", type: "AQHourly")
  "Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period."
  forecast_airquality_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
    "Number of hours to return."
    hours: Int
  ): AQHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/airquality?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\",\\\"hours\\\":\\\"hours\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_airquality_by_lat_by_lon($lat: Float!, $lon: Float!, $callback: String, $key: String, $hours: Int) { forecast_airquality_by_lat_by_lon(lat: $lat, lon: $lon, callback: $callback, key: $key, hours: $hours) }"
    )
    @source(subgraph: "Weather", name: "forecast_airquality_by_lat_by_lon", type: "AQHourly")
  "Returns 72 hour (hourly) Air Quality forecast, where each point represents a one hour period."
  forecast_airquality_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: Int!
    "Country Code (2 letter)."
    country: String
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Number of hours to return."
    hours: Int
    "Your registered API key."
    key: String
  ): AQHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/airquality?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"callback\\\":\\\"callback\\\",\\\"hours\\\":\\\"hours\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_airquality_by_postal_code($postal_code: Int!, $country: String, $callback: String, $hours: Int, $key: String) { forecast_airquality_by_postal_code(postal_code: $postal_code, country: $country, callback: $callback, hours: $hours, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_airquality_by_postal_code", type: "AQHourly")
  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \"YYYY-MM-DD\". One day begins at 00:00 UTC, and ends at 23:59 UTC. Accepts a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.\n"
  forecast_daily_by_city_by_country(
    "City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    "Number of days to return. Default 16."
    days: Float
    units: queryInput_forecast_daily_by_city_by_country_units
    lang: queryInput_forecast_daily_by_city_by_country_lang
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): ForecastDay
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/daily?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"days\\\":\\\"days\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_daily_by_city_by_country($city: String!, $country: String!, $state: String, $days: Float, $units: queryInput_forecast_daily_by_city_by_country_units, $lang: queryInput_forecast_daily_by_city_by_country_lang, $callback: String, $key: String) { forecast_daily_by_city_by_country(city: $city, country: $country, state: $state, days: $days, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_daily_by_city_by_country", type: "ForecastDay")
  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \"YYYY-MM-DD\". One day begins at 00:00 UTC, and ends at 23:59 UTC.\n"
  forecast_daily_by_city_id(
    "City ID. Example: 4487042"
    city_id: Int!
    "Number of days to return. Default 16."
    days: Float
    units: queryInput_forecast_daily_by_city_id_units
    lang: queryInput_forecast_daily_by_city_id_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): ForecastDay
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/daily?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"days\\\":\\\"days\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_daily_by_city_id($city_id: Int!, $days: Float, $units: queryInput_forecast_daily_by_city_id_units, $lang: queryInput_forecast_daily_by_city_id_lang, $callback: String, $key: String) { forecast_daily_by_city_id(city_id: $city_id, days: $days, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_daily_by_city_id", type: "ForecastDay")
  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \"YYYY-MM-DD\". One day begins at 00:00 UTC, and ends at 23:59 UTC. \n"
  forecast_daily_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Number of days to return. Default 16."
    days: Float
    units: queryInput_forecast_daily_by_lat_by_lon_units
    lang: queryInput_forecast_daily_by_lat_by_lon_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): ForecastDay
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/daily?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"days\\\":\\\"days\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_daily_by_lat_by_lon($lat: Float!, $lon: Float!, $days: Float, $units: queryInput_forecast_daily_by_lat_by_lon_units, $lang: queryInput_forecast_daily_by_lat_by_lon_lang, $callback: String, $key: String) { forecast_daily_by_lat_by_lon(lat: $lat, lon: $lon, days: $days, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_daily_by_lat_by_lon", type: "ForecastDay")
  "Returns a daily forecast, where each point represents one day (24hr) period. Every point has a datetime string in the format \"YYYY-MM-DD\". One day begins at 00:00 UTC, and ends at 23:59 UTC.\n"
  forecast_daily_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: Int!
    "Country Code (2 letter)."
    country: String
    "Number of days to return. Default 16."
    days: Float
    units: queryInput_forecast_daily_by_postal_code_units
    lang: queryInput_forecast_daily_by_postal_code_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): ForecastDay
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/daily?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"days\\\":\\\"days\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_daily_by_postal_code($postal_code: Int!, $country: String, $days: Float, $units: queryInput_forecast_daily_by_postal_code_units, $lang: queryInput_forecast_daily_by_postal_code_lang, $callback: String, $key: String) { forecast_daily_by_postal_code(postal_code: $postal_code, country: $country, days: $days, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_daily_by_postal_code", type: "ForecastDay")
  "Retrieve an 8 day forecast relevant to te Energy Sector (degree days, solar radiation, precipitation, wind)."
  forecast_energy_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Temperature threshold to use to calculate degree days (default 18 C)"
    threshold: Float
    units: queryInput_forecast_energy_by_lat_by_lon_units
    tp: queryInput_forecast_energy_by_lat_by_lon_tp
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): EnergyObsGroupForecast
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/energy?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"threshold\\\":\\\"threshold\\\",\\\"units\\\":\\\"units\\\",\\\"tp\\\":\\\"tp\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_energy_by_lat_by_lon($lat: Float!, $lon: Float!, $threshold: Float, $units: queryInput_forecast_energy_by_lat_by_lon_units, $tp: queryInput_forecast_energy_by_lat_by_lon_tp, $callback: String, $key: String) { forecast_energy_by_lat_by_lon(lat: $lat, lon: $lon, threshold: $threshold, units: $units, tp: $tp, callback: $callback, key: $key) }"
    )
    @source(
      subgraph: "Weather"
      name: "forecast_energy_by_lat_by_lon"
      type: "EnergyObsGroupForecast"
    )
  " Returns an hourly forecast, where each point represents a one hour   period. Every point has a datetime string in the format \"YYYY-MM-DD:HH\". Time is UTC. Accepts a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate.\n"
  forecast_hourly_by_city_by_country(
    "City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    units: queryInput_forecast_hourly_by_city_by_country_units
    lang: queryInput_forecast_hourly_by_city_by_country_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Number of hours to return."
    hours: Int
    "Your registered API key."
    key: String
  ): ForecastHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/hourly?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"hours\\\":\\\"hours\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_hourly_by_city_by_country($city: String!, $country: String!, $state: String, $units: queryInput_forecast_hourly_by_city_by_country_units, $lang: queryInput_forecast_hourly_by_city_by_country_lang, $callback: String, $hours: Int, $key: String) { forecast_hourly_by_city_by_country(city: $city, country: $country, state: $state, units: $units, lang: $lang, callback: $callback, hours: $hours, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_hourly_by_city_by_country", type: "ForecastHourly")
  " Returns an hourly forecast, where each point represents a one hour   period. Every point has a datetime string in the format \"YYYY-MM-DD:HH\". Time is UTC. \n"
  forecast_hourly_by_city_id(
    "City ID. Example: 4487042"
    city_id: Int!
    units: queryInput_forecast_hourly_by_city_id_units
    lang: queryInput_forecast_hourly_by_city_id_lang
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Number of hours to return."
    hours: Int
    "Your registered API key."
    key: String
  ): ForecastHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/hourly?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"hours\\\":\\\"hours\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_hourly_by_city_id($city_id: Int!, $units: queryInput_forecast_hourly_by_city_id_units, $lang: queryInput_forecast_hourly_by_city_id_lang, $callback: String, $hours: Int, $key: String) { forecast_hourly_by_city_id(city_id: $city_id, units: $units, lang: $lang, callback: $callback, hours: $hours, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_hourly_by_city_id", type: "ForecastHourly")
  "Returns an hourly forecast, where each point represents a one hour period. Every point has a datetime string in the format \"YYYY-MM-DD:HH\". Time is UTC. \n"
  forecast_hourly_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    units: queryInput_forecast_hourly_by_lat_by_lon_units
    lang: queryInput_forecast_hourly_by_lat_by_lon_lang
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
    "Number of hours to return."
    hours: Int
  ): ForecastHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/hourly?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\",\\\"hours\\\":\\\"hours\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_hourly_by_lat_by_lon($lat: Float!, $lon: Float!, $units: queryInput_forecast_hourly_by_lat_by_lon_units, $lang: queryInput_forecast_hourly_by_lat_by_lon_lang, $callback: String, $key: String, $hours: Int) { forecast_hourly_by_lat_by_lon(lat: $lat, lon: $lon, units: $units, lang: $lang, callback: $callback, key: $key, hours: $hours) }"
    )
    @source(subgraph: "Weather", name: "forecast_hourly_by_lat_by_lon", type: "ForecastHourly")
  " Returns an hourly forecast, where each point represents a one hour   period. Every point has a datetime string in the format \"YYYY-MM-DD:HH\". Time is UTC. \n"
  forecast_hourly_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: Int!
    "Country Code (2 letter)."
    country: String
    units: queryInput_forecast_hourly_by_postal_code_units
    lang: queryInput_forecast_hourly_by_postal_code_lang
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Number of hours to return."
    hours: Int
    "Your registered API key."
    key: String
  ): ForecastHourly
    @httpOperation(
      subgraph: "Weather"
      path: "/forecast/hourly?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"hours\\\":\\\"hours\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query forecast_hourly_by_postal_code($postal_code: Int!, $country: String, $units: queryInput_forecast_hourly_by_postal_code_units, $lang: queryInput_forecast_hourly_by_postal_code_lang, $callback: String, $hours: Int, $key: String) { forecast_hourly_by_postal_code(postal_code: $postal_code, country: $country, units: $units, lang: $lang, callback: $callback, hours: $hours, key: $key) }"
    )
    @source(subgraph: "Weather", name: "forecast_hourly_by_postal_code", type: "ForecastHourly")
  "Returns historical air quality conditions."
  history_airquality_by_city_by_country(
    "City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/history/airquality?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_airquality_by_city_by_country($city: String!, $country: String!, $state: String, $callback: String, $key: String) { history_airquality_by_city_by_country(city: $city, country: $country, state: $state, callback: $callback, key: $key) }"
    )
    @source(
      subgraph: "Weather"
      name: "history_airquality_by_city_by_country"
      type: "AQCurrentGroup"
    )
  "Returns historical air quality conditions."
  history_airquality_by_city_id(
    "City ID."
    city_id: Float!
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/history/airquality?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_airquality_by_city_id($city_id: Float!, $callback: String, $key: String) { history_airquality_by_city_id(city_id: $city_id, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_airquality_by_city_id", type: "AQCurrentGroup")
  "Returns historical air quality conditions."
  history_airquality_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/history/airquality?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_airquality_by_lat_by_lon($lat: Float!, $lon: Float!, $callback: String, $key: String) { history_airquality_by_lat_by_lon(lat: $lat, lon: $lon, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_airquality_by_lat_by_lon", type: "AQCurrentGroup")
  "Returns historical air quality conditions."
  history_airquality_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: Int!
    "Country Code (2 letter)."
    country: String
    "Wraps return in jsonp callback. Example - callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): AQCurrentGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/history/airquality?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_airquality_by_postal_code($postal_code: Int!, $country: String, $callback: String, $key: String) { history_airquality_by_postal_code(postal_code: $postal_code, country: $country, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_airquality_by_postal_code", type: "AQCurrentGroup")
  "Returns Historical Observations - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate. **(LIMIT 1 year per request)**"
  history_daily_by_city_by_country(
    "City search.. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_daily_by_city_by_country_units
    lang: queryInput_history_daily_by_city_by_country_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistoryDay
    @httpOperation(
      subgraph: "Weather"
      path: "/history/daily?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_daily_by_city_by_country($city: String!, $country: String!, $state: String, $start_date: String!, $end_date: String!, $units: queryInput_history_daily_by_city_by_country_units, $lang: queryInput_history_daily_by_city_by_country_lang, $callback: String, $key: String) { history_daily_by_city_by_country(city: $city, country: $country, state: $state, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_daily_by_city_by_country", type: "HistoryDay")
  "Returns Historical Observations - Given a City ID. **(LIMIT 1 year per request)**"
  history_daily_by_city_id(
    "City ID. Example: 4487042"
    city_id: String!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    end_date: String!
    units: queryInput_history_daily_by_city_id_units
    lang: queryInput_history_daily_by_city_id_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistoryDay
    @httpOperation(
      subgraph: "Weather"
      path: "/history/daily?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_daily_by_city_id($city_id: String!, $start_date: String!, $end_date: String!, $units: queryInput_history_daily_by_city_id_units, $lang: queryInput_history_daily_by_city_id_lang, $callback: String, $key: String) { history_daily_by_city_id(city_id: $city_id, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_daily_by_city_id", type: "HistoryDay")
  "Returns Historical Observations - Given a lat, and lon. **(LIMIT 1 year per request)**"
  history_daily_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_daily_by_lat_by_lon_units
    lang: queryInput_history_daily_by_lat_by_lon_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistoryDay
    @httpOperation(
      subgraph: "Weather"
      path: "/history/daily?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_daily_by_lat_by_lon($lat: Float!, $lon: Float!, $start_date: String!, $end_date: String!, $units: queryInput_history_daily_by_lat_by_lon_units, $lang: queryInput_history_daily_by_lat_by_lon_lang, $callback: String, $key: String) { history_daily_by_lat_by_lon(lat: $lat, lon: $lon, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_daily_by_lat_by_lon", type: "HistoryDay")
  "Returns Historical Observations - Given a Postal Code. **(LIMIT 1 year per request)**"
  history_daily_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: String!
    "Country Code (2 letter)."
    country: String
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    end_date: String!
    units: queryInput_history_daily_by_postal_code_units
    lang: queryInput_history_daily_by_postal_code_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistoryDay
    @httpOperation(
      subgraph: "Weather"
      path: "/history/daily?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_daily_by_postal_code($postal_code: String!, $country: String, $start_date: String!, $end_date: String!, $units: queryInput_history_daily_by_postal_code_units, $lang: queryInput_history_daily_by_postal_code_lang, $callback: String, $key: String) { history_daily_by_postal_code(postal_code: $postal_code, country: $country, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_daily_by_postal_code", type: "HistoryDay")
  "Returns Historical Observations - Given a station ID. **(LIMIT 1 year per request)**"
  history_daily_by_station(
    "Station ID."
    station: String!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_daily_by_station_units
    lang: queryInput_history_daily_by_station_lang
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistoryDay
    @httpOperation(
      subgraph: "Weather"
      path: "/history/daily?station={args.station}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_daily_by_station($station: String!, $start_date: String!, $end_date: String!, $units: queryInput_history_daily_by_station_units, $lang: queryInput_history_daily_by_station_lang, $callback: String, $key: String) { history_daily_by_station(station: $station, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_daily_by_station", type: "HistoryDay")
  "Returns aggregate energy specific historical weather fields, over a specified time period."
  history_energy_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    tp: queryInput_history_energy_by_lat_by_lon_tp
    "Temperature threshold to use to calculate degree days (default 18 C)"
    threshold: Float
    units: queryInput_history_energy_by_lat_by_lon_units
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): EnergyObsGroup
    @httpOperation(
      subgraph: "Weather"
      path: "/history/energy?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"tp\\\":\\\"tp\\\",\\\"threshold\\\":\\\"threshold\\\",\\\"units\\\":\\\"units\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_energy_by_lat_by_lon($lat: Float!, $lon: Float!, $start_date: String!, $end_date: String!, $tp: queryInput_history_energy_by_lat_by_lon_tp, $threshold: Float, $units: queryInput_history_energy_by_lat_by_lon_units, $callback: String, $key: String) { history_energy_by_lat_by_lon(lat: $lat, lon: $lon, start_date: $start_date, end_date: $end_date, tp: $tp, threshold: $threshold, units: $units, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_energy_by_lat_by_lon", type: "EnergyObsGroup")
  "Returns Historical Observations - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate. **(LIMIT 31 days per request)**"
  history_hourly_by_city_by_country(
    "City search. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_hourly_by_city_by_country_units
    lang: queryInput_history_hourly_by_city_by_country_lang
    tz: queryInput_history_hourly_by_city_by_country_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): History
    @httpOperation(
      subgraph: "Weather"
      path: "/history/hourly?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_hourly_by_city_by_country($city: String!, $country: String!, $state: String, $start_date: String!, $end_date: String!, $units: queryInput_history_hourly_by_city_by_country_units, $lang: queryInput_history_hourly_by_city_by_country_lang, $tz: queryInput_history_hourly_by_city_by_country_tz, $callback: String, $key: String) { history_hourly_by_city_by_country(city: $city, country: $country, state: $state, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_hourly_by_city_by_country", type: "History")
  "Returns Historical Observations - Given a City ID. **(LIMIT 31 days per request)**"
  history_hourly_by_city_id(
    "City ID. Example: 4487042"
    city_id: String!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    end_date: String!
    units: queryInput_history_hourly_by_city_id_units
    lang: queryInput_history_hourly_by_city_id_lang
    tz: queryInput_history_hourly_by_city_id_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): History
    @httpOperation(
      subgraph: "Weather"
      path: "/history/hourly?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_hourly_by_city_id($city_id: String!, $start_date: String!, $end_date: String!, $units: queryInput_history_hourly_by_city_id_units, $lang: queryInput_history_hourly_by_city_id_lang, $tz: queryInput_history_hourly_by_city_id_tz, $callback: String, $key: String) { history_hourly_by_city_id(city_id: $city_id, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_hourly_by_city_id", type: "History")
  "Returns Historical Observations - Given a lat, and lon. **(LIMIT 31 days per request)**"
  history_hourly_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_hourly_by_lat_by_lon_units
    lang: queryInput_history_hourly_by_lat_by_lon_lang
    tz: queryInput_history_hourly_by_lat_by_lon_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): History
    @httpOperation(
      subgraph: "Weather"
      path: "/history/hourly?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_hourly_by_lat_by_lon($lat: Float!, $lon: Float!, $start_date: String!, $end_date: String!, $units: queryInput_history_hourly_by_lat_by_lon_units, $lang: queryInput_history_hourly_by_lat_by_lon_lang, $tz: queryInput_history_hourly_by_lat_by_lon_tz, $callback: String, $key: String) { history_hourly_by_lat_by_lon(lat: $lat, lon: $lon, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_hourly_by_lat_by_lon", type: "History")
  "Returns Historical Observations - Given a Postal Code. **(LIMIT 31 days per request)**"
  history_hourly_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: String!
    "Country Code (2 letter)."
    country: String
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    end_date: String!
    units: queryInput_history_hourly_by_postal_code_units
    lang: queryInput_history_hourly_by_postal_code_lang
    tz: queryInput_history_hourly_by_postal_code_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): History
    @httpOperation(
      subgraph: "Weather"
      path: "/history/hourly?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_hourly_by_postal_code($postal_code: String!, $country: String, $start_date: String!, $end_date: String!, $units: queryInput_history_hourly_by_postal_code_units, $lang: queryInput_history_hourly_by_postal_code_lang, $tz: queryInput_history_hourly_by_postal_code_tz, $callback: String, $key: String) { history_hourly_by_postal_code(postal_code: $postal_code, country: $country, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_hourly_by_postal_code", type: "History")
  "Returns Historical Observations - Given a station ID. **(LIMIT 31 days per request)**"
  history_hourly_by_station(
    "Station ID."
    station: String!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_hourly_by_station_units
    lang: queryInput_history_hourly_by_station_lang
    tz: queryInput_history_hourly_by_station_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): History
    @httpOperation(
      subgraph: "Weather"
      path: "/history/hourly?station={args.station}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_hourly_by_station($station: String!, $start_date: String!, $end_date: String!, $units: queryInput_history_hourly_by_station_units, $lang: queryInput_history_hourly_by_station_lang, $tz: queryInput_history_hourly_by_station_tz, $callback: String, $key: String) { history_hourly_by_station(station: $station, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_hourly_by_station", type: "History")
  "Returns Historical Observations - Given a city in the format of City,ST or City. The state, and country parameters can be provided to make the search more accurate."
  history_subhourly_by_city_by_country(
    "City search. Example - &city=Raleigh,NC or &city=Berlin,DE or city=Paris&country=FR"
    city: String!
    "Country Code (2 letter)."
    country: String!
    "Full name of state."
    state: String
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_subhourly_by_city_by_country_units
    lang: queryInput_history_subhourly_by_city_by_country_lang
    tz: queryInput_history_subhourly_by_city_by_country_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): History
    @httpOperation(
      subgraph: "Weather"
      path: "/history/subhourly?city={args.city}&country={args.country}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"state\\\":\\\"state\\\",\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_subhourly_by_city_by_country($city: String!, $country: String!, $state: String, $start_date: String!, $end_date: String!, $units: queryInput_history_subhourly_by_city_by_country_units, $lang: queryInput_history_subhourly_by_city_by_country_lang, $tz: queryInput_history_subhourly_by_city_by_country_tz, $callback: String, $key: String) { history_subhourly_by_city_by_country(city: $city, country: $country, state: $state, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_subhourly_by_city_by_country", type: "History")
  "Returns Historical Observations - Given a City ID."
  history_subhourly_by_city_id(
    "City ID. Example: 4487042"
    city_id: String!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    end_date: String!
    units: queryInput_history_subhourly_by_city_id_units
    lang: queryInput_history_subhourly_by_city_id_lang
    tz: queryInput_history_subhourly_by_city_id_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistorySubhourly
    @httpOperation(
      subgraph: "Weather"
      path: "/history/subhourly?city_id={args.city_id}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_subhourly_by_city_id($city_id: String!, $start_date: String!, $end_date: String!, $units: queryInput_history_subhourly_by_city_id_units, $lang: queryInput_history_subhourly_by_city_id_lang, $tz: queryInput_history_subhourly_by_city_id_tz, $callback: String, $key: String) { history_subhourly_by_city_id(city_id: $city_id, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_subhourly_by_city_id", type: "HistorySubhourly")
  "Returns Historical Observations - Given a lat, and lon."
  history_subhourly_by_lat_by_lon(
    "Latitude component of location."
    lat: Float!
    "Longitude component of location."
    lon: Float!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_subhourly_by_lat_by_lon_units
    lang: queryInput_history_subhourly_by_lat_by_lon_lang
    tz: queryInput_history_subhourly_by_lat_by_lon_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistorySubhourly
    @httpOperation(
      subgraph: "Weather"
      path: "/history/subhourly?lat={args.lat}&lon={args.lon}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_subhourly_by_lat_by_lon($lat: Float!, $lon: Float!, $start_date: String!, $end_date: String!, $units: queryInput_history_subhourly_by_lat_by_lon_units, $lang: queryInput_history_subhourly_by_lat_by_lon_lang, $tz: queryInput_history_subhourly_by_lat_by_lon_tz, $callback: String, $key: String) { history_subhourly_by_lat_by_lon(lat: $lat, lon: $lon, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_subhourly_by_lat_by_lon", type: "HistorySubhourly")
  "Returns Historical Observations - Given a Postal Code."
  history_subhourly_by_postal_code(
    "Postal Code. Example: 28546"
    postal_code: String!
    "Country Code (2 letter)."
    country: String
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)"
    end_date: String!
    units: queryInput_history_subhourly_by_postal_code_units
    lang: queryInput_history_subhourly_by_postal_code_lang
    tz: queryInput_history_subhourly_by_postal_code_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistorySubhourly
    @httpOperation(
      subgraph: "Weather"
      path: "/history/subhourly?postal_code={args.postal_code}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"country\\\":\\\"country\\\",\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_subhourly_by_postal_code($postal_code: String!, $country: String, $start_date: String!, $end_date: String!, $units: queryInput_history_subhourly_by_postal_code_units, $lang: queryInput_history_subhourly_by_postal_code_lang, $tz: queryInput_history_subhourly_by_postal_code_tz, $callback: String, $key: String) { history_subhourly_by_postal_code(postal_code: $postal_code, country: $country, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_subhourly_by_postal_code", type: "HistorySubhourly")
  "Returns Historical Observations - Given a station ID."
  history_subhourly_by_station(
    "Station ID."
    station: String!
    "Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    start_date: String!
    "End Date (YYYY-MM-DD or YYYY-MM-DD:HH)."
    end_date: String!
    units: queryInput_history_subhourly_by_station_units
    lang: queryInput_history_subhourly_by_station_lang
    tz: queryInput_history_subhourly_by_station_tz
    "Wraps return in jsonp callback. Example: callback=func"
    callback: String
    "Your registered API key."
    key: String
  ): HistorySubhourly
    @httpOperation(
      subgraph: "Weather"
      path: "/history/subhourly?station={args.station}"
      httpMethod: GET
      queryParamArgMap: "\"{\\\"start_date\\\":\\\"start_date\\\",\\\"end_date\\\":\\\"end_date\\\",\\\"units\\\":\\\"units\\\",\\\"lang\\\":\\\"lang\\\",\\\"tz\\\":\\\"tz\\\",\\\"callback\\\":\\\"callback\\\",\\\"key\\\":\\\"key\\\"}\""
    )
    @resolver(
      subgraph: "Weather"
      operation: "query history_subhourly_by_station($station: String!, $start_date: String!, $end_date: String!, $units: queryInput_history_subhourly_by_station_units, $lang: queryInput_history_subhourly_by_station_lang, $tz: queryInput_history_subhourly_by_station_tz, $callback: String, $key: String) { history_subhourly_by_station(station: $station, start_date: $start_date, end_date: $end_date, units: $units, lang: $lang, tz: $tz, callback: $callback, key: $key) }"
    )
    @source(subgraph: "Weather", name: "history_subhourly_by_station", type: "HistorySubhourly")
}

"A list of populated places"
type Populated_Places_Response @source(subgraph: "Cities", name: "Populated_Places_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  links: [Link] @source(subgraph: "Cities", name: "links", type: "[Link]")
  metadata: Metadata @source(subgraph: "Cities", name: "metadata", type: "Metadata")
  data: [PopulatedPlaceSummary]
    @source(subgraph: "Cities", name: "data", type: "[PopulatedPlaceSummary]")
}

"An error that occurred processing the request"
type CitiesError @source(subgraph: "Cities", name: "Error") {
  code: ErrorCode @source(subgraph: "Cities", name: "code", type: "ErrorCode")
  message: String @source(subgraph: "Cities", name: "message", type: "String")
}

"One of a set of enumerated error codes representing the types of errors that can occur processing a\nrequest"
enum ErrorCode @source(subgraph: "Cities", name: "ErrorCode") {
  ACCESS_DENIED @source(subgraph: "Cities", name: "ACCESS_DENIED")
  ENTITY_NOT_FOUND @source(subgraph: "Cities", name: "ENTITY_NOT_FOUND")
  INCOMPATIBLE @source(subgraph: "Cities", name: "INCOMPATIBLE")
  PARAM_INVALID @source(subgraph: "Cities", name: "PARAM_INVALID")
  PARAMS_MUTUALLY_EXCLUSIVE @source(subgraph: "Cities", name: "PARAMS_MUTUALLY_EXCLUSIVE")
  REQUEST_UNPROCESSABLE @source(subgraph: "Cities", name: "REQUEST_UNPROCESSABLE")
}

"A HATEAOS link"
type Link @source(subgraph: "Cities", name: "Link") {
  href: String @source(subgraph: "Cities", name: "href", type: "String")
  rel: String @source(subgraph: "Cities", name: "rel", type: "String")
}

"Result metadata (currently only associated with collection results)"
type Metadata @source(subgraph: "Cities", name: "Metadata") {
  "The zero-ary offset into the results (0 is the first result)"
  currentOffset: BigInt @source(subgraph: "Cities", name: "currentOffset", type: "BigInt")
  "The total number of results across pages"
  totalCount: BigInt @source(subgraph: "Cities", name: "totalCount", type: "BigInt")
}

"The `BigInt` scalar type represents non-fractional signed whole numeric values."
scalar BigInt
  @source(subgraph: "Cities", name: "BigInt")
  @source(subgraph: "Cities", name: "BigInt")

"Minimal populated-place info"
type PopulatedPlaceSummary @source(subgraph: "Cities", name: "PopulatedPlaceSummary") {
  "The country name (varies by languageCode)"
  country: String @source(subgraph: "Cities", name: "country", type: "String")
  "The ISO-3166 country code"
  countryCode: String @source(subgraph: "Cities", name: "countryCode", type: "String")
  "Included if this is the result of a distance query"
  distance: Float @source(subgraph: "Cities", name: "distance", type: "Float")
  "The place GeoDB native id"
  id: Int @source(subgraph: "Cities", name: "id", type: "Int")
  "The place latittude (-90.0 to 90.0)"
  latitude: Float @source(subgraph: "Cities", name: "latitude", type: "Float")
  "The place longitude (-180.0 to 180.0)"
  longitude: Float @source(subgraph: "Cities", name: "longitude", type: "Float")
  "The place name (varies by languageCode)"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The place population"
  population: Int @source(subgraph: "Cities", name: "population", type: "Int")
  "The region name (varies by languageCode)"
  region: String @source(subgraph: "Cities", name: "region", type: "String")
  "The ISO or FIPS region code"
  regionCode: String @source(subgraph: "Cities", name: "regionCode", type: "String")
  type: PopulatedPlaceType @source(subgraph: "Cities", name: "type", type: "PopulatedPlaceType")
  "The place WikiData id"
  wikiDataId: String @source(subgraph: "Cities", name: "wikiDataId", type: "String")
  dailyForecast: [Forecast]
    @variable(name: "latitude", select: "latitude", subgraph: "Cities")
    @variable(name: "longitude", select: "longitude", subgraph: "Cities")
    @resolver(
      subgraph: "Weather"
      operation: """
      query getForecastDaily($latitude: Float!, $longitude: Float!) {
        forecast_daily_by_lat_by_lon(lat: $latitude, lon: $longitude) {
          data
        }
      }
      """
    )
  todayForecast: Forecast
    @variable(name: "latitude", select: "latitude", subgraph: "Cities")
    @variable(name: "longitude", select: "longitude", subgraph: "Cities")
    @resolver(
      subgraph: "Weather"
      operation: """
      query getForecastDaily($latitude: Float!, $longitude: Float!) {
        forecast_daily_by_lat_by_lon(lat: $latitude, lon: $longitude) {
          data
        }
      }
      """
    )
}

"One of a set of enumerated populated-place types known by the service (currently only level-2 admin divisions and\ncities)"
enum PopulatedPlaceType @source(subgraph: "Cities", name: "PopulatedPlaceType") {
  ADM2 @source(subgraph: "Cities", name: "ADM2")
  CITY @source(subgraph: "Cities", name: "CITY")
}

"Populated-place details response"
type Populated_Place_Response @source(subgraph: "Cities", name: "Populated_Place_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  data: Populated_Place_Details
    @source(subgraph: "Cities", name: "data", type: "Populated_Place_Details")
}

"Full populated-place details"
type Populated_Place_Details @source(subgraph: "Cities", name: "Populated_Place_Details") {
  "The country name (varies by languageCode)"
  country: String @source(subgraph: "Cities", name: "country", type: "String")
  "The ISO-3166 country code"
  countryCode: String @source(subgraph: "Cities", name: "countryCode", type: "String")
  "If this place has been soft-deleted"
  deleted: Boolean @source(subgraph: "Cities", name: "deleted", type: "Boolean")
  "The place elevation (meters) above sea level"
  elevationMeters: Int @source(subgraph: "Cities", name: "elevationMeters", type: "Int")
  "The place GeoDB native id"
  id: Int @source(subgraph: "Cities", name: "id", type: "Int")
  "The place latittude (-90.0 to 90.0)"
  latitude: Float @source(subgraph: "Cities", name: "latitude", type: "Float")
  "The place longitude (-180.0 to 180.0)"
  longitude: Float @source(subgraph: "Cities", name: "longitude", type: "Float")
  "The place name (varies by languageCode)"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The place population"
  population: Int @source(subgraph: "Cities", name: "population", type: "Int")
  "The region name (varies by languageCode)"
  region: String @source(subgraph: "Cities", name: "region", type: "String")
  "The ISO or FIPS region code"
  regionCode: String @source(subgraph: "Cities", name: "regionCode", type: "String")
  "The place timezone id"
  timezone: String @source(subgraph: "Cities", name: "timezone", type: "String")
  type: PopulatedPlaceType @source(subgraph: "Cities", name: "type", type: "PopulatedPlaceType")
  "The place WikiData id"
  wikiDataId: String @source(subgraph: "Cities", name: "wikiDataId", type: "String")
}

"An ISO-6801 date-time response"
type Date_Time_Response @source(subgraph: "Cities", name: "Date_Time_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  "The date-time in ISO-6801 format: yyyyMMdd'T'HHmmssZ"
  data: DateTime @source(subgraph: "Cities", name: "data", type: "DateTime")
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime
  @source(subgraph: "Cities", name: "DateTime")
  @source(subgraph: "Cities", name: "DateTime")

"A decimal distance (in miles or kilometers)"
type Distance_Response @source(subgraph: "Cities", name: "Distance_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  "The distance in units as set by the distanceUnit param (defaults to miles)"
  data: Float @source(subgraph: "Cities", name: "data", type: "Float")
}

"An ISO-8601 time response"
type Time_Response @source(subgraph: "Cities", name: "Time_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  "The time in ISO-8601 format: HHmmss.SSSZ"
  data: String @source(subgraph: "Cities", name: "data", type: "String")
}

"A list of countries"
type Countries_Response @source(subgraph: "Cities", name: "Countries_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  links: [Link] @source(subgraph: "Cities", name: "links", type: "[Link]")
  metadata: Metadata @source(subgraph: "Cities", name: "metadata", type: "Metadata")
  data: [Country_Summary] @source(subgraph: "Cities", name: "data", type: "[Country_Summary]")
}

"Minimal country info"
type Country_Summary @source(subgraph: "Cities", name: "Country_Summary") {
  "The ISO-3166 country code"
  code: String @source(subgraph: "Cities", name: "code", type: "String")
  "A list of supported ISO-4217 currency codes"
  currencyCodes: [String] @source(subgraph: "Cities", name: "currencyCodes", type: "[String]")
  "The country name (varies by languageCode)"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The country WikiData id"
  wikiDataId: String @source(subgraph: "Cities", name: "wikiDataId", type: "String")
}

"Country details response"
type Country_Response @source(subgraph: "Cities", name: "Country_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  data: Country_Details @source(subgraph: "Cities", name: "data", type: "Country_Details")
}

"Full country details"
type Country_Details @source(subgraph: "Cities", name: "Country_Details") {
  "The country dialing prefix"
  callingCode: String @source(subgraph: "Cities", name: "callingCode", type: "String")
  "The ISO-3166 country code"
  code: String @source(subgraph: "Cities", name: "code", type: "String")
  "A list of supported ISO-4217 currency codes"
  currencyCodes: [String] @source(subgraph: "Cities", name: "currencyCodes", type: "[String]")
  "The country flag image"
  flagImageUri: String @source(subgraph: "Cities", name: "flagImageUri", type: "String")
  "The country name (varies by languageCode)"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The number of regions in this country"
  numRegions: Int @source(subgraph: "Cities", name: "numRegions", type: "Int")
  "The country WikiData id"
  wikiDataId: String @source(subgraph: "Cities", name: "wikiDataId", type: "String")
}

"A list of country regions"
type Country_Regions_Response @source(subgraph: "Cities", name: "Country_Regions_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  links: [Link] @source(subgraph: "Cities", name: "links", type: "[Link]")
  metadata: Metadata @source(subgraph: "Cities", name: "metadata", type: "Metadata")
  "A list of RegionSummaries"
  data: [Country_Region_Summary]
    @source(subgraph: "Cities", name: "data", type: "[Country_Region_Summary]")
}

"Minimal country region info"
type Country_Region_Summary @source(subgraph: "Cities", name: "Country_Region_Summary") {
  "An ISO-3166 country code"
  countryCode: String @source(subgraph: "Cities", name: "countryCode", type: "String")
  "The FIPS 10-4 region code"
  fipsCode: String @source(subgraph: "Cities", name: "fipsCode", type: "String")
  "The ISO region code"
  isoCode: String @source(subgraph: "Cities", name: "isoCode", type: "String")
  "The region name (varies by languageCode)"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The region WikiData id"
  wikiDataId: String @source(subgraph: "Cities", name: "wikiDataId", type: "String")
}

"Country region details response"
type Country_Region_Response @source(subgraph: "Cities", name: "Country_Region_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  data: Country_Region_Details
    @source(subgraph: "Cities", name: "data", type: "Country_Region_Details")
}

"Full country region details"
type Country_Region_Details @source(subgraph: "Cities", name: "Country_Region_Details") {
  "The region's capital city (varies by languageCode)"
  capital: String @source(subgraph: "Cities", name: "capital", type: "String")
  "An ISO-3166 country code"
  countryCode: String @source(subgraph: "Cities", name: "countryCode", type: "String")
  "The FIPS 10-4 region code"
  fipsCode: String @source(subgraph: "Cities", name: "fipsCode", type: "String")
  "The ISO region code"
  isoCode: String @source(subgraph: "Cities", name: "isoCode", type: "String")
  "The region name (varies by languageCode)"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The number of cities in this region"
  numCities: Int @source(subgraph: "Cities", name: "numCities", type: "Int")
  "The region WikiData id"
  wikiDataId: String @source(subgraph: "Cities", name: "wikiDataId", type: "String")
}

"A list of currencies"
type Currencies_Response @source(subgraph: "Cities", name: "Currencies_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  links: [Link] @source(subgraph: "Cities", name: "links", type: "[Link]")
  metadata: Metadata @source(subgraph: "Cities", name: "metadata", type: "Metadata")
  data: [Currency] @source(subgraph: "Cities", name: "data", type: "[Currency]")
}

"Currency info"
type Currency @source(subgraph: "Cities", name: "Currency") {
  "The ISO-4217 currency code"
  code: String @source(subgraph: "Cities", name: "code", type: "String")
  "A list of ISO-3166 country codes of countries supporting this currency"
  countryCodes: [String] @source(subgraph: "Cities", name: "countryCodes", type: "[String]")
  "The currency symbol"
  symbol: String @source(subgraph: "Cities", name: "symbol", type: "String")
}

"A list of languages supported by the system"
type Languages_Response @source(subgraph: "Cities", name: "Languages_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  links: [Link] @source(subgraph: "Cities", name: "links", type: "[Link]")
  metadata: Metadata @source(subgraph: "Cities", name: "metadata", type: "Metadata")
  data: [Language] @source(subgraph: "Cities", name: "data", type: "[Language]")
}

"A language supported by the service"
type Language @source(subgraph: "Cities", name: "Language") {
  code: query_getLanguagesUsingGET_allOf_1_data_items_code
    @source(
      subgraph: "Cities"
      name: "code"
      type: "query_getLanguagesUsingGET_allOf_1_data_items_code"
    )
  name: String @source(subgraph: "Cities", name: "name", type: "String")
}

enum query_getLanguagesUsingGET_allOf_1_data_items_code
  @source(subgraph: "Cities", name: "query_getLanguagesUsingGET_allOf_1_data_items_code") {
  undefined @source(subgraph: "Cities", name: "undefined")
  aa @source(subgraph: "Cities", name: "aa")
  ab @source(subgraph: "Cities", name: "ab")
  ae @source(subgraph: "Cities", name: "ae")
  af @source(subgraph: "Cities", name: "af")
  ak @source(subgraph: "Cities", name: "ak")
  am @source(subgraph: "Cities", name: "am")
  an @source(subgraph: "Cities", name: "an")
  ar @source(subgraph: "Cities", name: "ar")
  as @source(subgraph: "Cities", name: "as")
  av @source(subgraph: "Cities", name: "av")
  ay @source(subgraph: "Cities", name: "ay")
  az @source(subgraph: "Cities", name: "az")
  ba @source(subgraph: "Cities", name: "ba")
  be @source(subgraph: "Cities", name: "be")
  bg @source(subgraph: "Cities", name: "bg")
  bh @source(subgraph: "Cities", name: "bh")
  bi @source(subgraph: "Cities", name: "bi")
  bm @source(subgraph: "Cities", name: "bm")
  bn @source(subgraph: "Cities", name: "bn")
  bo @source(subgraph: "Cities", name: "bo")
  br @source(subgraph: "Cities", name: "br")
  bs @source(subgraph: "Cities", name: "bs")
  ca @source(subgraph: "Cities", name: "ca")
  ce @source(subgraph: "Cities", name: "ce")
  ch @source(subgraph: "Cities", name: "ch")
  co @source(subgraph: "Cities", name: "co")
  cr @source(subgraph: "Cities", name: "cr")
  cs @source(subgraph: "Cities", name: "cs")
  cu @source(subgraph: "Cities", name: "cu")
  cv @source(subgraph: "Cities", name: "cv")
  cy @source(subgraph: "Cities", name: "cy")
  da @source(subgraph: "Cities", name: "da")
  de @source(subgraph: "Cities", name: "de")
  dv @source(subgraph: "Cities", name: "dv")
  dz @source(subgraph: "Cities", name: "dz")
  ee @source(subgraph: "Cities", name: "ee")
  el @source(subgraph: "Cities", name: "el")
  en @source(subgraph: "Cities", name: "en")
  eo @source(subgraph: "Cities", name: "eo")
  es @source(subgraph: "Cities", name: "es")
  et @source(subgraph: "Cities", name: "et")
  eu @source(subgraph: "Cities", name: "eu")
  fa @source(subgraph: "Cities", name: "fa")
  ff @source(subgraph: "Cities", name: "ff")
  fi @source(subgraph: "Cities", name: "fi")
  fj @source(subgraph: "Cities", name: "fj")
  fo @source(subgraph: "Cities", name: "fo")
  fr @source(subgraph: "Cities", name: "fr")
  fy @source(subgraph: "Cities", name: "fy")
  ga @source(subgraph: "Cities", name: "ga")
  gd @source(subgraph: "Cities", name: "gd")
  gl @source(subgraph: "Cities", name: "gl")
  gn @source(subgraph: "Cities", name: "gn")
  gu @source(subgraph: "Cities", name: "gu")
  gv @source(subgraph: "Cities", name: "gv")
  ha @source(subgraph: "Cities", name: "ha")
  he @source(subgraph: "Cities", name: "he")
  hi @source(subgraph: "Cities", name: "hi")
  ho @source(subgraph: "Cities", name: "ho")
  hr @source(subgraph: "Cities", name: "hr")
  ht @source(subgraph: "Cities", name: "ht")
  hu @source(subgraph: "Cities", name: "hu")
  hy @source(subgraph: "Cities", name: "hy")
  hz @source(subgraph: "Cities", name: "hz")
  ia @source(subgraph: "Cities", name: "ia")
  id @source(subgraph: "Cities", name: "id")
  ie @source(subgraph: "Cities", name: "ie")
  ig @source(subgraph: "Cities", name: "ig")
  ii @source(subgraph: "Cities", name: "ii")
  ik @source(subgraph: "Cities", name: "ik")
  io @source(subgraph: "Cities", name: "io")
  is @source(subgraph: "Cities", name: "is")
  it @source(subgraph: "Cities", name: "it")
  iu @source(subgraph: "Cities", name: "iu")
  ja @source(subgraph: "Cities", name: "ja")
  jv @source(subgraph: "Cities", name: "jv")
  ka @source(subgraph: "Cities", name: "ka")
  kg @source(subgraph: "Cities", name: "kg")
  ki @source(subgraph: "Cities", name: "ki")
  kj @source(subgraph: "Cities", name: "kj")
  kk @source(subgraph: "Cities", name: "kk")
  kl @source(subgraph: "Cities", name: "kl")
  km @source(subgraph: "Cities", name: "km")
  kn @source(subgraph: "Cities", name: "kn")
  ko @source(subgraph: "Cities", name: "ko")
  kr @source(subgraph: "Cities", name: "kr")
  ks @source(subgraph: "Cities", name: "ks")
  ku @source(subgraph: "Cities", name: "ku")
  kv @source(subgraph: "Cities", name: "kv")
  kw @source(subgraph: "Cities", name: "kw")
  ky @source(subgraph: "Cities", name: "ky")
  la @source(subgraph: "Cities", name: "la")
  lb @source(subgraph: "Cities", name: "lb")
  lg @source(subgraph: "Cities", name: "lg")
  li @source(subgraph: "Cities", name: "li")
  ln @source(subgraph: "Cities", name: "ln")
  lo @source(subgraph: "Cities", name: "lo")
  lt @source(subgraph: "Cities", name: "lt")
  lu @source(subgraph: "Cities", name: "lu")
  lv @source(subgraph: "Cities", name: "lv")
  mg @source(subgraph: "Cities", name: "mg")
  mh @source(subgraph: "Cities", name: "mh")
  mi @source(subgraph: "Cities", name: "mi")
  mk @source(subgraph: "Cities", name: "mk")
  ml @source(subgraph: "Cities", name: "ml")
  mn @source(subgraph: "Cities", name: "mn")
  mr @source(subgraph: "Cities", name: "mr")
  ms @source(subgraph: "Cities", name: "ms")
  mt @source(subgraph: "Cities", name: "mt")
  my @source(subgraph: "Cities", name: "my")
  na @source(subgraph: "Cities", name: "na")
  nb @source(subgraph: "Cities", name: "nb")
  nd @source(subgraph: "Cities", name: "nd")
  ne @source(subgraph: "Cities", name: "ne")
  ng @source(subgraph: "Cities", name: "ng")
  nl @source(subgraph: "Cities", name: "nl")
  nn @source(subgraph: "Cities", name: "nn")
  no @source(subgraph: "Cities", name: "no")
  nr @source(subgraph: "Cities", name: "nr")
  nv @source(subgraph: "Cities", name: "nv")
  ny @source(subgraph: "Cities", name: "ny")
  oc @source(subgraph: "Cities", name: "oc")
  oj @source(subgraph: "Cities", name: "oj")
  om @source(subgraph: "Cities", name: "om")
  or @source(subgraph: "Cities", name: "or")
  os @source(subgraph: "Cities", name: "os")
  pa @source(subgraph: "Cities", name: "pa")
  pi @source(subgraph: "Cities", name: "pi")
  pl @source(subgraph: "Cities", name: "pl")
  ps @source(subgraph: "Cities", name: "ps")
  pt @source(subgraph: "Cities", name: "pt")
  qu @source(subgraph: "Cities", name: "qu")
  rm @source(subgraph: "Cities", name: "rm")
  rn @source(subgraph: "Cities", name: "rn")
  ro @source(subgraph: "Cities", name: "ro")
  ru @source(subgraph: "Cities", name: "ru")
  rw @source(subgraph: "Cities", name: "rw")
  sa @source(subgraph: "Cities", name: "sa")
  sc @source(subgraph: "Cities", name: "sc")
  sd @source(subgraph: "Cities", name: "sd")
  se @source(subgraph: "Cities", name: "se")
  sg @source(subgraph: "Cities", name: "sg")
  si @source(subgraph: "Cities", name: "si")
  sk @source(subgraph: "Cities", name: "sk")
  sl @source(subgraph: "Cities", name: "sl")
  sm @source(subgraph: "Cities", name: "sm")
  sn @source(subgraph: "Cities", name: "sn")
  so @source(subgraph: "Cities", name: "so")
  sq @source(subgraph: "Cities", name: "sq")
  sr @source(subgraph: "Cities", name: "sr")
  ss @source(subgraph: "Cities", name: "ss")
  st @source(subgraph: "Cities", name: "st")
  su @source(subgraph: "Cities", name: "su")
  sv @source(subgraph: "Cities", name: "sv")
  sw @source(subgraph: "Cities", name: "sw")
  ta @source(subgraph: "Cities", name: "ta")
  te @source(subgraph: "Cities", name: "te")
  tg @source(subgraph: "Cities", name: "tg")
  th @source(subgraph: "Cities", name: "th")
  ti @source(subgraph: "Cities", name: "ti")
  tk @source(subgraph: "Cities", name: "tk")
  tl @source(subgraph: "Cities", name: "tl")
  tn @source(subgraph: "Cities", name: "tn")
  to @source(subgraph: "Cities", name: "to")
  tr @source(subgraph: "Cities", name: "tr")
  ts @source(subgraph: "Cities", name: "ts")
  tt @source(subgraph: "Cities", name: "tt")
  tw @source(subgraph: "Cities", name: "tw")
  ty @source(subgraph: "Cities", name: "ty")
  ug @source(subgraph: "Cities", name: "ug")
  uk @source(subgraph: "Cities", name: "uk")
  ur @source(subgraph: "Cities", name: "ur")
  uz @source(subgraph: "Cities", name: "uz")
  ve @source(subgraph: "Cities", name: "ve")
  vi @source(subgraph: "Cities", name: "vi")
  vo @source(subgraph: "Cities", name: "vo")
  wa @source(subgraph: "Cities", name: "wa")
  wo @source(subgraph: "Cities", name: "wo")
  xh @source(subgraph: "Cities", name: "xh")
  yi @source(subgraph: "Cities", name: "yi")
  yo @source(subgraph: "Cities", name: "yo")
  za @source(subgraph: "Cities", name: "za")
  zh @source(subgraph: "Cities", name: "zh")
  zu @source(subgraph: "Cities", name: "zu")
}

"A list of locales"
type Locales_Response @source(subgraph: "Cities", name: "Locales_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  links: [Link] @source(subgraph: "Cities", name: "links", type: "[Link]")
  metadata: Metadata @source(subgraph: "Cities", name: "metadata", type: "Metadata")
  data: [Locale] @source(subgraph: "Cities", name: "data", type: "[Locale]")
}

"A locale representing a language/region combination"
type Locale @source(subgraph: "Cities", name: "Locale") {
  "The locale code"
  code: String @source(subgraph: "Cities", name: "code", type: "String")
}

"A list of time-zones"
type Time_Zones_Response @source(subgraph: "Cities", name: "Time_Zones_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  links: [Link] @source(subgraph: "Cities", name: "links", type: "[Link]")
  metadata: Metadata @source(subgraph: "Cities", name: "metadata", type: "Metadata")
  data: [Time_Zone] @source(subgraph: "Cities", name: "data", type: "[Time_Zone]")
}

"A time-zone"
type Time_Zone @source(subgraph: "Cities", name: "Time_Zone") {
  "The time-zone id"
  id: String @source(subgraph: "Cities", name: "id", type: "String")
  "The time-zone name"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The number of hours this time-zone is offset from UTC"
  rawUtcOffsetHours: Int @source(subgraph: "Cities", name: "rawUtcOffsetHours", type: "Int")
}

"A time-zone"
type Time_Zone_Response @source(subgraph: "Cities", name: "Time_Zone_Response") {
  errors: [CitiesError] @source(subgraph: "Cities", name: "errors", type: "[Error]")
  "The time-zone id"
  id: String @source(subgraph: "Cities", name: "id", type: "String")
  "The time-zone name"
  name: String @source(subgraph: "Cities", name: "name", type: "String")
  "The number of hours this time-zone is offset from UTC"
  rawUtcOffsetHours: Int @source(subgraph: "Cities", name: "rawUtcOffsetHours", type: "Int")
}

scalar ObjMap
  @source(subgraph: "Weather", name: "ObjMap")
  @source(subgraph: "Cities", name: "ObjMap")
  @source(subgraph: "Weather", name: "ObjMap")

enum HTTPMethod
  @source(subgraph: "Cities", name: "HTTPMethod")
  @source(subgraph: "Weather", name: "HTTPMethod") {
  GET @source(subgraph: "Cities", name: "GET") @source(subgraph: "Weather", name: "GET")
  HEAD @source(subgraph: "Cities", name: "HEAD") @source(subgraph: "Weather", name: "HEAD")
  POST @source(subgraph: "Cities", name: "POST") @source(subgraph: "Weather", name: "POST")
  PUT @source(subgraph: "Cities", name: "PUT") @source(subgraph: "Weather", name: "PUT")
  DELETE @source(subgraph: "Cities", name: "DELETE") @source(subgraph: "Weather", name: "DELETE")
  CONNECT @source(subgraph: "Cities", name: "CONNECT") @source(subgraph: "Weather", name: "CONNECT")
  OPTIONS @source(subgraph: "Cities", name: "OPTIONS") @source(subgraph: "Weather", name: "OPTIONS")
  TRACE @source(subgraph: "Cities", name: "TRACE") @source(subgraph: "Weather", name: "TRACE")
  PATCH @source(subgraph: "Cities", name: "PATCH") @source(subgraph: "Weather", name: "PATCH")
}

type WeatherAlert @source(subgraph: "Weather", name: "WeatherAlert") {
  alerts: [WeatherAlertGroup]
    @source(subgraph: "Weather", name: "alerts", type: "[WeatherAlertGroup]")
  "Latitude"
  lat: Float @source(subgraph: "Weather", name: "lat", type: "Float")
  "Longitude"
  lon: Float @source(subgraph: "Weather", name: "lon", type: "Float")
}

type WeatherAlertGroup @source(subgraph: "Weather", name: "WeatherAlertGroup") {
  alerts: [String] @source(subgraph: "Weather", name: "alerts", type: "[String]")
  "Full description of weather alert"
  description: String @source(subgraph: "Weather", name: "description", type: "String")
  "Issued time local"
  effective_local: String @source(subgraph: "Weather", name: "effective_local", type: "String")
  "Issued time UTC"
  effective_utc: String @source(subgraph: "Weather", name: "effective_utc", type: "String")
  "Expiration time local"
  expires_local: String @source(subgraph: "Weather", name: "expires_local", type: "String")
  "Expiration time UTC"
  expires_utc: String @source(subgraph: "Weather", name: "expires_utc", type: "String")
  "Severity of weather. (Advisory | Watch | Warning)"
  severity: String @source(subgraph: "Weather", name: "severity", type: "String")
  "Brief description of weather alert"
  title: String @source(subgraph: "Weather", name: "title", type: "String")
  "URI to weather alert"
  uri: URL @source(subgraph: "Weather", name: "uri", type: "URL")
}

"A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt."
scalar URL @source(subgraph: "Weather", name: "URL") @source(subgraph: "Weather", name: "URL")

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")
  @source(subgraph: "Weather", name: "JSON")
  @source(subgraph: "Weather", name: "JSON")

type AQCurrentGroup @source(subgraph: "Weather", name: "AQCurrentGroup") {
  "City Name"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country Abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [AQCurrent] @source(subgraph: "Weather", name: "data", type: "[AQCurrent]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "State Abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

type AQCurrent @source(subgraph: "Weather", name: "AQCurrent") {
  "Cloud cover as a percentage (%)"
  aqi: Int @source(subgraph: "Weather", name: "aqi", type: "Int")
  "Concentration of NO2 (µg/m³)"
  no2: Float @source(subgraph: "Weather", name: "no2", type: "Float")
  "Concentration of O3 (µg/m³)"
  o3: Float @source(subgraph: "Weather", name: "o3", type: "Float")
  "Concentration of PM 10 (µg/m³)"
  pm10: Float @source(subgraph: "Weather", name: "pm10", type: "Float")
  "Concentration of PM 2.5 (µg/m³)"
  pm25: Float @source(subgraph: "Weather", name: "pm25", type: "Float")
  "Concentration of SO2 (µg/m³)"
  so2: Float @source(subgraph: "Weather", name: "so2", type: "Float")
}

type CurrentObsGroup @source(subgraph: "Weather", name: "CurrentObsGroup") {
  "Count of found observations"
  count: Int @source(subgraph: "Weather", name: "count", type: "Int")
  data: [CurrentObs] @source(subgraph: "Weather", name: "data", type: "[CurrentObs]")
}

type CurrentObs @source(subgraph: "Weather", name: "CurrentObs") {
  "Apparent temperature - Default (C)"
  app_temp: Float @source(subgraph: "Weather", name: "app_temp", type: "Float")
  "Air quality index (US EPA standard 0 to +500)"
  aqi: Float @source(subgraph: "Weather", name: "aqi", type: "Float")
  "City name (closest)"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Cloud cover (%)"
  clouds: Int @source(subgraph: "Weather", name: "clouds", type: "Int")
  "Country abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  "Cycle Hour (UTC) of observation"
  datetime: String @source(subgraph: "Weather", name: "datetime", type: "String")
  "Dew point temperature - default (C)"
  dewpt: Float @source(subgraph: "Weather", name: "dewpt", type: "Float")
  "Diffuse horizontal irradiance (W/m^2)"
  dhi: Float @source(subgraph: "Weather", name: "dhi", type: "Float")
  "Direct normal irradiance (W/m^2)"
  dni: Float @source(subgraph: "Weather", name: "dni", type: "Float")
  "Current solar elevation angle (Degrees)"
  elev_angle: Float @source(subgraph: "Weather", name: "elev_angle", type: "Float")
  "Global horizontal irradiance (W/m^2)"
  ghi: Float @source(subgraph: "Weather", name: "ghi", type: "Float")
  "Wind gust speed - Default (m/s)"
  gust: Float @source(subgraph: "Weather", name: "gust", type: "Float")
  "Current solar hour angle (Degrees)"
  hour_angle: Float @source(subgraph: "Weather", name: "hour_angle", type: "Float")
  "Latitude"
  lat: Float @source(subgraph: "Weather", name: "lat", type: "Float")
  "Longitude"
  lon: Float @source(subgraph: "Weather", name: "lon", type: "Float")
  "Full time (UTC) of observation (YYYY-MM-DD HH:MM)"
  ob_time: String @source(subgraph: "Weather", name: "ob_time", type: "String")
  "Part of the day (d = day, n = night)"
  pod: String @source(subgraph: "Weather", name: "pod", type: "String")
  "Precipitation in last hour - Default (mm)"
  precip: Float @source(subgraph: "Weather", name: "precip", type: "Float")
  "Pressure (mb)"
  pres: Float @source(subgraph: "Weather", name: "pres", type: "Float")
  "Relative humidity (%)"
  rh: Int @source(subgraph: "Weather", name: "rh", type: "Int")
  "Mean sea level pressure in millibars (mb)"
  slp: Float @source(subgraph: "Weather", name: "slp", type: "Float")
  "Snowfall in last hour - Default (mm)"
  snow: Float @source(subgraph: "Weather", name: "snow", type: "Float")
  "Estimated solar radiation (W/m^2)"
  solar_rad: Float @source(subgraph: "Weather", name: "solar_rad", type: "Float")
  "List of data sources used in response"
  sources: [String] @source(subgraph: "Weather", name: "sources", type: "[String]")
  "State abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Source Station ID"
  station: String @source(subgraph: "Weather", name: "station", type: "String")
  "Time (UTC) of Sunrise (HH:MM)"
  sunrise: String @source(subgraph: "Weather", name: "sunrise", type: "String")
  "Time (UTC) of Sunset (HH:MM)"
  sunset: String @source(subgraph: "Weather", name: "sunset", type: "String")
  "Temperature - Default (C)"
  temp: Float @source(subgraph: "Weather", name: "temp", type: "Float")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
  "Unix Timestamp"
  ts: Float @source(subgraph: "Weather", name: "ts", type: "Float")
  "UV Index"
  uv: Float @source(subgraph: "Weather", name: "uv", type: "Float")
  "Visibility - default (M)"
  vis: Int @source(subgraph: "Weather", name: "vis", type: "Int")
  weather: query_current_by_cities_data_items_weather
    @source(
      subgraph: "Weather"
      name: "weather"
      type: "query_current_by_cities_data_items_weather"
    )
  "Cardinal wind direction"
  wind_cdir: String @source(subgraph: "Weather", name: "wind_cdir", type: "String")
  "Cardinal wind direction (text)"
  wind_cdir_full: String @source(subgraph: "Weather", name: "wind_cdir_full", type: "String")
  "Wind direction (degrees)"
  wind_dir: Int @source(subgraph: "Weather", name: "wind_dir", type: "Int")
  "Wind speed - Default (m/s)"
  wind_speed: Float @source(subgraph: "Weather", name: "wind_speed", type: "Float")
}

type query_current_by_cities_data_items_weather
  @source(subgraph: "Weather", name: "query_current_by_cities_data_items_weather") {
  "Weather Condition code"
  code: String @source(subgraph: "Weather", name: "code", type: "String")
  "Weather Condition description"
  description: String @source(subgraph: "Weather", name: "description", type: "String")
  "Icon code for forecast image display"
  icon: String @source(subgraph: "Weather", name: "icon", type: "String")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_cities_units
  @source(subgraph: "Weather", name: "queryInput_current_by_cities_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

enum t_const
  @typescript(subgraph: "Weather", type: "\"t\"")
  @typescript(subgraph: "Weather", type: "\"t\"")
  @example(subgraph: "Weather", value: "\"\\\"t\\\"\"")
  @example(subgraph: "Weather", value: "\"\\\"t\\\"\"")
  @source(subgraph: "Weather", name: "t_const") {
  t @enum(subgraph: "Weather", value: "\"t\"") @source(subgraph: "Weather", name: "t")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_cities_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_cities_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

enum minutely_const
  @typescript(subgraph: "Weather", type: "\"minutely\"")
  @typescript(subgraph: "Weather", type: "\"minutely\"")
  @example(subgraph: "Weather", value: "\"\\\"minutely\\\"\"")
  @example(subgraph: "Weather", value: "\"\\\"minutely\\\"\"")
  @source(subgraph: "Weather", name: "minutely_const") {
  minutely
    @enum(subgraph: "Weather", value: "\"minutely\"")
    @source(subgraph: "Weather", name: "minutely")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_city_by_country_units
  @source(subgraph: "Weather", name: "queryInput_current_by_city_by_country_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_city_by_country_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_city_by_country_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_city_id_units
  @source(subgraph: "Weather", name: "queryInput_current_by_city_id_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_city_id_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_city_id_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_current_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_lat_by_lon_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_lat_by_lon_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_points_units
  @source(subgraph: "Weather", name: "queryInput_current_by_points_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_points_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_points_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_postal_code_units
  @source(subgraph: "Weather", name: "queryInput_current_by_postal_code_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_postal_code_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_postal_code_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_station_units
  @source(subgraph: "Weather", name: "queryInput_current_by_station_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_station_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_station_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_current_by_stations_units
  @source(subgraph: "Weather", name: "queryInput_current_by_stations_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_current_by_stations_lang
  @source(subgraph: "Weather", name: "queryInput_current_by_stations_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

type AQHourly @source(subgraph: "Weather", name: "AQHourly") {
  "City Name"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country Abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [AQHour] @source(subgraph: "Weather", name: "data", type: "[AQHour]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "State Abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

type AQHour @source(subgraph: "Weather", name: "AQHour") {
  "Cloud cover as a percentage (%)"
  aqi: Int @source(subgraph: "Weather", name: "aqi", type: "Int")
  "Concentration of NO2 (µg/m³)"
  no2: Float @source(subgraph: "Weather", name: "no2", type: "Float")
  "Concentration of O3 (µg/m³)"
  o3: Float @source(subgraph: "Weather", name: "o3", type: "Float")
  "Concentration of PM 10 (µg/m³)"
  pm10: Float @source(subgraph: "Weather", name: "pm10", type: "Float")
  "Concentration of PM 2.5 (µg/m³)"
  pm25: Float @source(subgraph: "Weather", name: "pm25", type: "Float")
  "Concentration of SO2 (µg/m³)"
  so2: Float @source(subgraph: "Weather", name: "so2", type: "Float")
  "Timestamp in local time"
  timestamp_local: String @source(subgraph: "Weather", name: "timestamp_local", type: "String")
  "Timestamp UTC"
  timestamp_utc: String @source(subgraph: "Weather", name: "timestamp_utc", type: "String")
  "Unix Timestamp"
  ts: Float @source(subgraph: "Weather", name: "ts", type: "Float")
}

type ForecastDay @source(subgraph: "Weather", name: "ForecastDay") {
  "City Name"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country Abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [Forecast] @source(subgraph: "Weather", name: "data", type: "[Forecast]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "State Abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

type Forecast @source(subgraph: "Weather", name: "Forecast") {
  "Apparent Maximum daily Temperature - default (C)"
  app_max_temp: Float @source(subgraph: "Weather", name: "app_max_temp", type: "Float")
  "Apparent Minimum daily Temperature - default (C)"
  app_min_temp: Float @source(subgraph: "Weather", name: "app_min_temp", type: "Float")
  "Cloud cover as a percentage (%)"
  clouds: Int @source(subgraph: "Weather", name: "clouds", type: "Int")
  "Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)"
  datetime: String @source(subgraph: "Weather", name: "datetime", type: "String")
  "Dewpoint (Average) - default (C)"
  dewpt: Float @source(subgraph: "Weather", name: "dewpt", type: "Float")
  "[Deprecated] Max direct component of solar insolation (W/m^2)"
  max_dhi: Float @source(subgraph: "Weather", name: "max_dhi", type: "Float")
  "Maximum daily Temperature - default (C)"
  max_temp: Float @source(subgraph: "Weather", name: "max_temp", type: "Float")
  "Minimum daily Temperature - default (C)"
  min_temp: Float @source(subgraph: "Weather", name: "min_temp", type: "Float")
  "Moon phase"
  moon_phase: Float @source(subgraph: "Weather", name: "moon_phase", type: "Float")
  "Moonrise unix timestamp"
  moonrise_ts: Int @source(subgraph: "Weather", name: "moonrise_ts", type: "Int")
  "Moonset unix timestamp"
  moonset_ts: Int @source(subgraph: "Weather", name: "moonset_ts", type: "Int")
  "Part of the day (d = day, n = night)"
  pod: String @source(subgraph: "Weather", name: "pod", type: "String")
  "Chance of Precipitation as a percentage (%)"
  pop: Float @source(subgraph: "Weather", name: "pop", type: "Float")
  "Accumulated precipitation since last forecast point - default (mm)"
  precip: Float @source(subgraph: "Weather", name: "precip", type: "Float")
  "Pressure (mb)"
  pres: Float @source(subgraph: "Weather", name: "pres", type: "Float")
  "Relative Humidity as a percentage (%)"
  rh: Int @source(subgraph: "Weather", name: "rh", type: "Int")
  "Mean Sea level pressure (mb)"
  slp: Float @source(subgraph: "Weather", name: "slp", type: "Float")
  "Accumulated snowfall since last forecast point - default (mm)"
  snow: Float @source(subgraph: "Weather", name: "snow", type: "Float")
  "Snow Depth - default (mm)"
  snow_depth: Float @source(subgraph: "Weather", name: "snow_depth", type: "Float")
  "Sunrise unix timestamp"
  sunrise_ts: Int @source(subgraph: "Weather", name: "sunrise_ts", type: "Int")
  "Sunset unix timestamp"
  sunset_ts: Int @source(subgraph: "Weather", name: "sunset_ts", type: "Int")
  "Temperature (Average) - default (C)"
  temp: Float @source(subgraph: "Weather", name: "temp", type: "Float")
  "Timestamp in local time"
  timestamp_local: String @source(subgraph: "Weather", name: "timestamp_local", type: "String")
  "Timestamp UTC"
  timestamp_utc: String @source(subgraph: "Weather", name: "timestamp_utc", type: "String")
  "Unix Timestamp"
  ts: Float @source(subgraph: "Weather", name: "ts", type: "Float")
  "UV Index"
  uv: Float @source(subgraph: "Weather", name: "uv", type: "Float")
  "Average Visibility default (KM)"
  vis: Float @source(subgraph: "Weather", name: "vis", type: "Float")
  weather: query_forecast_daily_by_city_by_country_data_items_weather
    @source(
      subgraph: "Weather"
      name: "weather"
      type: "query_forecast_daily_by_city_by_country_data_items_weather"
    )
  "Cardinal wind direction"
  wind_cdir: String @source(subgraph: "Weather", name: "wind_cdir", type: "String")
  "Cardinal wind direction (text)"
  wind_cdir_full: String @source(subgraph: "Weather", name: "wind_cdir_full", type: "String")
  "Wind direction"
  wind_dir: Int @source(subgraph: "Weather", name: "wind_dir", type: "Int")
  "Wind Speed (default m/s)"
  wind_spd: Float @source(subgraph: "Weather", name: "wind_spd", type: "Float")
}

type query_forecast_daily_by_city_by_country_data_items_weather
  @source(subgraph: "Weather", name: "query_forecast_daily_by_city_by_country_data_items_weather") {
  "Weather Condition code"
  code: String @source(subgraph: "Weather", name: "code", type: "String")
  "Weather Condition description"
  description: String @source(subgraph: "Weather", name: "description", type: "String")
  "Icon code for forecast image display"
  icon: String @source(subgraph: "Weather", name: "icon", type: "String")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_daily_by_city_by_country_units
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_city_by_country_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_daily_by_city_by_country_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_city_by_country_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_daily_by_city_id_units
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_city_id_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_daily_by_city_id_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_city_id_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_daily_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_daily_by_lat_by_lon_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_lat_by_lon_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_daily_by_postal_code_units
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_postal_code_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_daily_by_postal_code_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_daily_by_postal_code_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

type EnergyObsGroupForecast @source(subgraph: "Weather", name: "EnergyObsGroupForecast") {
  "City name (closest)"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [EnergyObsSeries] @source(subgraph: "Weather", name: "data", type: "[EnergyObsSeries]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "State abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Degree day threshold units"
  threshold_units: String @source(subgraph: "Weather", name: "threshold_units", type: "String")
  "Degree day threshold"
  threshold_value: String @source(subgraph: "Weather", name: "threshold_value", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

type EnergyObsSeries @source(subgraph: "Weather", name: "EnergyObsSeries") {
  "Cooling degree days"
  cdd: Float @source(subgraph: "Weather", name: "cdd", type: "Float")
  "Average cloud cover (%)"
  clouds: Int @source(subgraph: "Weather", name: "clouds", type: "Int")
  "Date"
  date: Date @source(subgraph: "Weather", name: "date", type: "Date")
  "Average dew point temperature - Default (C)"
  dewpt: Float @source(subgraph: "Weather", name: "dewpt", type: "Float")
  "Heating degree days"
  hdd: Float @source(subgraph: "Weather", name: "hdd", type: "Float")
  "Total precipitation in period - Default (mm)"
  precip: Float @source(subgraph: "Weather", name: "precip", type: "Float")
  "Average Relative humidity (%)"
  rh: Int @source(subgraph: "Weather", name: "rh", type: "Int")
  "Total snowfall in period - Default (mm)"
  snow: Float @source(subgraph: "Weather", name: "snow", type: "Float")
  "Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2"
  sun_hours: Float @source(subgraph: "Weather", name: "sun_hours", type: "Float")
  "Total diffuse horizontal solar irradiance (W/m^2)"
  t_dhi: Float @source(subgraph: "Weather", name: "t_dhi", type: "Float")
  "Total direct normal solar irradiance (W/m^2)"
  t_dni: Float @source(subgraph: "Weather", name: "t_dni", type: "Float")
  "Total global horizontal solar irradiance (W/m^2)"
  t_ghi: Float @source(subgraph: "Weather", name: "t_ghi", type: "Float")
  "Average temperature - Default (C)"
  temp: Float @source(subgraph: "Weather", name: "temp", type: "Float")
  "Average wind direction (Degrees)"
  wind_dir: Int @source(subgraph: "Weather", name: "wind_dir", type: "Int")
  "Average wind speed - Default (m/s)"
  wind_spd: Float @source(subgraph: "Weather", name: "wind_spd", type: "Float")
}

"Represents date values"
scalar Date @source(subgraph: "Weather", name: "Date") @source(subgraph: "Weather", name: "Date")

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_energy_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_forecast_energy_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Time period (default: daily)"
enum queryInput_forecast_energy_by_lat_by_lon_tp
  @source(subgraph: "Weather", name: "queryInput_forecast_energy_by_lat_by_lon_tp") {
  hourly @source(subgraph: "Weather", name: "hourly")
  daily @source(subgraph: "Weather", name: "daily")
}

type ForecastHourly @source(subgraph: "Weather", name: "ForecastHourly") {
  "City Name"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country Abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [ForecastHour] @source(subgraph: "Weather", name: "data", type: "[ForecastHour]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "State Abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

type ForecastHour @source(subgraph: "Weather", name: "ForecastHour") {
  "Apparent Temperature - Default (C)"
  app_temp: Float @source(subgraph: "Weather", name: "app_temp", type: "Float")
  "Cloud cover as a percentage (%)"
  clouds: Int @source(subgraph: "Weather", name: "clouds", type: "Int")
  "Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)"
  datetime: String @source(subgraph: "Weather", name: "datetime", type: "String")
  "Dewpoint - Default (C)"
  dewpt: Float @source(subgraph: "Weather", name: "dewpt", type: "Float")
  "Diffuse normal solar irradiance (W/m^2)"
  dhi: Float @source(subgraph: "Weather", name: "dhi", type: "Float")
  "Direct normal solar irradiance (W/m^2)"
  dni: Float @source(subgraph: "Weather", name: "dni", type: "Float")
  "Global horizontal solar irradiance (W/m^2)"
  ghi: Float @source(subgraph: "Weather", name: "ghi", type: "Float")
  "Part of day (d = day, n = night)"
  pod: String @source(subgraph: "Weather", name: "pod", type: "String")
  "Chance of Precipitation as a percentage (%)"
  pop: Float @source(subgraph: "Weather", name: "pop", type: "Float")
  "Accumulated precipitation since last forecast point. Default (mm)"
  precip: Float @source(subgraph: "Weather", name: "precip", type: "Float")
  "Pressure (mb)"
  pres: Float @source(subgraph: "Weather", name: "pres", type: "Float")
  "Relative Humidity as a percentage (%)"
  rh: Int @source(subgraph: "Weather", name: "rh", type: "Int")
  "Mean Sea level pressure (mb)"
  slp: Float @source(subgraph: "Weather", name: "slp", type: "Float")
  "Accumulated snowfall since last forecast point - Default (mm)"
  snow: Float @source(subgraph: "Weather", name: "snow", type: "Float")
  "Snow depth - Default (mm)"
  snow_depth: Float @source(subgraph: "Weather", name: "snow_depth", type: "Float")
  "Estimated solar radiation (W/m^2)"
  solar_rad: Float @source(subgraph: "Weather", name: "solar_rad", type: "Float")
  "Temperature - Default (C)"
  temp: Float @source(subgraph: "Weather", name: "temp", type: "Float")
  "Timestamp in local time"
  timestamp_local: String @source(subgraph: "Weather", name: "timestamp_local", type: "String")
  "Timestamp UTC"
  timestamp_utc: String @source(subgraph: "Weather", name: "timestamp_utc", type: "String")
  "Unix Timestamp"
  ts: Float @source(subgraph: "Weather", name: "ts", type: "Float")
  "UV Index"
  uv: Float @source(subgraph: "Weather", name: "uv", type: "Float")
  "Visibility - Default (KM)"
  vis: Float @source(subgraph: "Weather", name: "vis", type: "Float")
  weather: query_forecast_hourly_by_city_by_country_data_items_weather
    @source(
      subgraph: "Weather"
      name: "weather"
      type: "query_forecast_hourly_by_city_by_country_data_items_weather"
    )
  "Cardinal wind direction"
  wind_cdir: String @source(subgraph: "Weather", name: "wind_cdir", type: "String")
  "Cardinal wind direction (text)"
  wind_cdir_full: String @source(subgraph: "Weather", name: "wind_cdir_full", type: "String")
  "Wind direction"
  wind_dir: Int @source(subgraph: "Weather", name: "wind_dir", type: "Int")
  "Wind Gust Speed - Default (m/s)"
  wind_gust_spd: Float @source(subgraph: "Weather", name: "wind_gust_spd", type: "Float")
  "Wind Speed - Default (m/s)"
  wind_spd: Float @source(subgraph: "Weather", name: "wind_spd", type: "Float")
}

type query_forecast_hourly_by_city_by_country_data_items_weather
  @source(
    subgraph: "Weather"
    name: "query_forecast_hourly_by_city_by_country_data_items_weather"
  ) {
  "Weather Condition code"
  code: String @source(subgraph: "Weather", name: "code", type: "String")
  "Weather Condition description"
  description: String @source(subgraph: "Weather", name: "description", type: "String")
  "Icon code for forecast image display"
  icon: String @source(subgraph: "Weather", name: "icon", type: "String")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_hourly_by_city_by_country_units
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_city_by_country_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_hourly_by_city_by_country_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_city_by_country_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_hourly_by_city_id_units
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_city_id_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_hourly_by_city_id_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_city_id_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_hourly_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_hourly_by_lat_by_lon_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_lat_by_lon_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_forecast_hourly_by_postal_code_units
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_postal_code_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_forecast_hourly_by_postal_code_lang
  @source(subgraph: "Weather", name: "queryInput_forecast_hourly_by_postal_code_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

type HistoryDay @source(subgraph: "Weather", name: "HistoryDay") {
  "City name (Closest)"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [HistoryDayObj] @source(subgraph: "Weather", name: "data", type: "[HistoryDayObj]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "List of data sources used in response"
  sources: [String] @source(subgraph: "Weather", name: "sources", type: "[String]")
  "State abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

type HistoryDayObj @source(subgraph: "Weather", name: "HistoryDayObj") {
  "Date in format \"YYYY-MM-DD\". All datetime is in (UTC)"
  datetime: Date @source(subgraph: "Weather", name: "datetime", type: "Date")
  "Average dewpoint - Default (C)"
  dewpt: Float @source(subgraph: "Weather", name: "dewpt", type: "Float")
  "Average hourly diffuse horizontal solar irradiance (W/m^2)"
  dhi: Int @source(subgraph: "Weather", name: "dhi", type: "Int")
  "Average direct normal solar irradiance (W/m^2)"
  dni: Int @source(subgraph: "Weather", name: "dni", type: "Int")
  "Average hourly global horizontal solar irradiance (W/m^2)"
  ghi: Int @source(subgraph: "Weather", name: "ghi", type: "Int")
  "Max temperature - Default (C)"
  max_temp: Float @source(subgraph: "Weather", name: "max_temp", type: "Float")
  "Time of max memperature - Unix Timestamp"
  max_temp_ts: Float @source(subgraph: "Weather", name: "max_temp_ts", type: "Float")
  "Max UV Index (1-11+)"
  max_uv: Float @source(subgraph: "Weather", name: "max_uv", type: "Float")
  "Direction of wind at time of max 2min wind (degrees)"
  max_wind_dir: Int @source(subgraph: "Weather", name: "max_wind_dir", type: "Int")
  "Max 2min Wind Speed - default (m/s)"
  max_wind_spd: Float @source(subgraph: "Weather", name: "max_wind_spd", type: "Float")
  "Time of max 2min wind - unix timestamp"
  max_wind_spd_ts: Float @source(subgraph: "Weather", name: "max_wind_spd_ts", type: "Float")
  "Min temperature - Default (C)"
  min_temp: Float @source(subgraph: "Weather", name: "min_temp", type: "Float")
  "Time of max temperature - unix timestamp"
  min_temp_ts: Float @source(subgraph: "Weather", name: "min_temp_ts", type: "Float")
  "Liquid equivalent precipitation - default (mm)"
  precip: Float @source(subgraph: "Weather", name: "precip", type: "Float")
  "Satellite estimated liquid equivalent precipitation - default (mm)"
  precip_gpm: Float @source(subgraph: "Weather", name: "precip_gpm", type: "Float")
  "Average pressure (mb)"
  pres: Float @source(subgraph: "Weather", name: "pres", type: "Float")
  "Data revision status (interim or final)"
  revision_status: String @source(subgraph: "Weather", name: "revision_status", type: "String")
  "Average relative humidity as a percentage (%)"
  rh: Int @source(subgraph: "Weather", name: "rh", type: "Int")
  "Average sea level pressure (mb)"
  slp: Float @source(subgraph: "Weather", name: "slp", type: "Float")
  "Snowfall - default (mm)"
  snow: Float @source(subgraph: "Weather", name: "snow", type: "Float")
  "Snow Depth - default (mm)"
  snow_depth: Float @source(subgraph: "Weather", name: "snow_depth", type: "Float")
  "Total diffuse horizontal solar irradiance (W/m^2)"
  t_dhi: Int @source(subgraph: "Weather", name: "t_dhi", type: "Int")
  "Total direct normal solar irradiance (W/m^2)"
  t_dni: Int @source(subgraph: "Weather", name: "t_dni", type: "Int")
  "Total global horizontal solar irradiance (W/m^2)"
  t_ghi: Int @source(subgraph: "Weather", name: "t_ghi", type: "Int")
  "Average temperature - Default (C)"
  temp: Float @source(subgraph: "Weather", name: "temp", type: "Float")
  "Unix timestamp of datetime (Midnight UTC)"
  ts: Int @source(subgraph: "Weather", name: "ts", type: "Int")
  "Average wind direction (degrees)"
  wind_dir: Int @source(subgraph: "Weather", name: "wind_dir", type: "Int")
  "Wind gust speed - default (m/s)"
  wind_gust_spd: Float @source(subgraph: "Weather", name: "wind_gust_spd", type: "Float")
  "Average wind speed - default (m/s)"
  wind_spd: Float @source(subgraph: "Weather", name: "wind_spd", type: "Float")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_daily_by_city_by_country_units
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_city_by_country_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_daily_by_city_by_country_lang
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_city_by_country_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_daily_by_city_id_units
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_city_id_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_daily_by_city_id_lang
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_city_id_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_daily_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_daily_by_lat_by_lon_lang
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_lat_by_lon_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_daily_by_postal_code_units
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_postal_code_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_daily_by_postal_code_lang
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_postal_code_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_daily_by_station_units
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_station_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_daily_by_station_lang
  @source(subgraph: "Weather", name: "queryInput_history_daily_by_station_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

type EnergyObsGroup @source(subgraph: "Weather", name: "EnergyObsGroup") {
  "Count of found observations"
  count: Int @source(subgraph: "Weather", name: "count", type: "Int")
  data: [EnergyObs] @source(subgraph: "Weather", name: "data", type: "[EnergyObs]")
  "End Date"
  end_date: Int @source(subgraph: "Weather", name: "end_date", type: "Int")
  "Start Date"
  start_date: Int @source(subgraph: "Weather", name: "start_date", type: "Int")
}

type EnergyObs @source(subgraph: "Weather", name: "EnergyObs") {
  "Cooling degree days"
  cdd: Float @source(subgraph: "Weather", name: "cdd", type: "Float")
  "City name (closest)"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Average cloud cover (%)"
  clouds: Int @source(subgraph: "Weather", name: "clouds", type: "Int")
  "Country abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  "Average dew point temperature - Default (C)"
  dewpt: Float @source(subgraph: "Weather", name: "dewpt", type: "Float")
  "Heating degree days"
  hdd: Float @source(subgraph: "Weather", name: "hdd", type: "Float")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "Total precipitation in period - Default (mm)"
  precip: Float @source(subgraph: "Weather", name: "precip", type: "Float")
  "Average Relative humidity (%)"
  rh: Int @source(subgraph: "Weather", name: "rh", type: "Int")
  "Total snowfall in period - Default (mm)"
  snow: Float @source(subgraph: "Weather", name: "snow", type: "Float")
  "List of data sources used in response"
  sources: [String] @source(subgraph: "Weather", name: "sources", type: "[String]")
  "State abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Nearest Station ID [DEPRECATED]"
  station_id: String @source(subgraph: "Weather", name: "station_id", type: "String")
  "Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2"
  sun_hours: Float @source(subgraph: "Weather", name: "sun_hours", type: "Float")
  "Total diffuse horizontal solar irradiance (W/m^2)"
  t_dhi: Float @source(subgraph: "Weather", name: "t_dhi", type: "Float")
  "Total direct normal solar irradiance (W/m^2)"
  t_dni: Float @source(subgraph: "Weather", name: "t_dni", type: "Float")
  "Total global horizontal solar irradiance (W/m^2)"
  t_ghi: Float @source(subgraph: "Weather", name: "t_ghi", type: "Float")
  "Average temperature - Default (C)"
  temp: Float @source(subgraph: "Weather", name: "temp", type: "Float")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
  "Average wind direction (Degrees)"
  wind_dir: Int @source(subgraph: "Weather", name: "wind_dir", type: "Int")
  "Average wind speed - Default (m/s)"
  wind_spd: Float @source(subgraph: "Weather", name: "wind_spd", type: "Float")
}

"Time period to aggregate by (daily, monthly)"
enum queryInput_history_energy_by_lat_by_lon_tp
  @source(subgraph: "Weather", name: "queryInput_history_energy_by_lat_by_lon_tp") {
  hourly @source(subgraph: "Weather", name: "hourly")
  daily @source(subgraph: "Weather", name: "daily")
  monthly @source(subgraph: "Weather", name: "monthly")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_energy_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_history_energy_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

type History @source(subgraph: "Weather", name: "History") {
  "City name (Closest)"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [HistoryObj] @source(subgraph: "Weather", name: "data", type: "[HistoryObj]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "List of data sources used in response"
  sources: [String] @source(subgraph: "Weather", name: "sources", type: "[String]")
  "State abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

type HistoryObj @source(subgraph: "Weather", name: "HistoryObj") {
  "Apparent Temperature or Wind Chill/Heat Index (Default Celcius)"
  app_temp: Float @source(subgraph: "Weather", name: "app_temp", type: "Float")
  "Azimuth angle (Degrees)"
  azimuth: Float @source(subgraph: "Weather", name: "azimuth", type: "Float")
  "Cloud Cover 0-100 (%)"
  clouds: Int @source(subgraph: "Weather", name: "clouds", type: "Int")
  "Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)"
  datetime: String @source(subgraph: "Weather", name: "datetime", type: "String")
  "Dew point (Default Celcius)"
  dewpt: Int @source(subgraph: "Weather", name: "dewpt", type: "Int")
  "Diffuse normal solar irradiance (W/m^2)"
  dhi: Float @source(subgraph: "Weather", name: "dhi", type: "Float")
  "Direct normal solar irradiance (W/m^2)"
  dni: Float @source(subgraph: "Weather", name: "dni", type: "Float")
  "Solar elevation angle (Degrees)"
  elev_angle: Float @source(subgraph: "Weather", name: "elev_angle", type: "Float")
  "Global horizontal solar irradiance (W/m^2)"
  ghi: Float @source(subgraph: "Weather", name: "ghi", type: "Float")
  "Solar hour angle (Degrees)"
  h_angle: Float @source(subgraph: "Weather", name: "h_angle", type: "Float")
  "Part of the day (d = day, n = night)"
  pod: String @source(subgraph: "Weather", name: "pod", type: "String")
  "Liquid equivalent precipitation - Default (mm)"
  precip: Float @source(subgraph: "Weather", name: "precip", type: "Float")
  "Pressure (mb)"
  pres: Float @source(subgraph: "Weather", name: "pres", type: "Float")
  "Data revision status (interim or final)"
  revision_status: String @source(subgraph: "Weather", name: "revision_status", type: "String")
  "Relative Humidity as a percentage (%)"
  rh: Int @source(subgraph: "Weather", name: "rh", type: "Int")
  "Sea level pressure (mb)"
  slp: Float @source(subgraph: "Weather", name: "slp", type: "Float")
  "Snowfall - Default (mm)"
  snow: Float @source(subgraph: "Weather", name: "snow", type: "Float")
  "Estimated solar radiation (W/m^2)"
  solar_rad: Float @source(subgraph: "Weather", name: "solar_rad", type: "Float")
  "Temperature (Default Celcius)"
  temp: Float @source(subgraph: "Weather", name: "temp", type: "Float")
  "Timestamp in local time"
  timestamp_local: String @source(subgraph: "Weather", name: "timestamp_local", type: "String")
  "Timestamp UTC"
  timestamp_utc: String @source(subgraph: "Weather", name: "timestamp_utc", type: "String")
  "Unix Timestamp"
  ts: Float @source(subgraph: "Weather", name: "ts", type: "Float")
  "UV Index (1-11+)"
  uv: Float @source(subgraph: "Weather", name: "uv", type: "Float")
  "Visibility (KM)"
  vis: Float @source(subgraph: "Weather", name: "vis", type: "Float")
  weather: query_history_hourly_by_city_by_country_data_items_weather
    @source(
      subgraph: "Weather"
      name: "weather"
      type: "query_history_hourly_by_city_by_country_data_items_weather"
    )
  "Wind direction (Degrees)"
  wind_dir: Int @source(subgraph: "Weather", name: "wind_dir", type: "Int")
  "Wind Gust Speed - Default (m/s)"
  wind_gust_spd: Float @source(subgraph: "Weather", name: "wind_gust_spd", type: "Float")
  "Wind Speed (Default m/s)"
  wind_spd: Float @source(subgraph: "Weather", name: "wind_spd", type: "Float")
}

type query_history_hourly_by_city_by_country_data_items_weather
  @source(subgraph: "Weather", name: "query_history_hourly_by_city_by_country_data_items_weather") {
  "Weather Condition code"
  code: String @source(subgraph: "Weather", name: "code", type: "String")
  "Weather Condition description"
  description: String @source(subgraph: "Weather", name: "description", type: "String")
  "Icon code for forecast image display"
  icon: String @source(subgraph: "Weather", name: "icon", type: "String")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_hourly_by_city_by_country_units
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_city_by_country_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_hourly_by_city_by_country_lang
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_city_by_country_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_hourly_by_city_by_country_tz
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_city_by_country_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_hourly_by_city_id_units
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_city_id_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_hourly_by_city_id_lang
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_city_id_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_hourly_by_city_id_tz
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_city_id_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_hourly_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_hourly_by_lat_by_lon_lang
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_lat_by_lon_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_hourly_by_lat_by_lon_tz
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_lat_by_lon_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_hourly_by_postal_code_units
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_postal_code_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_hourly_by_postal_code_lang
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_postal_code_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_hourly_by_postal_code_tz
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_postal_code_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_hourly_by_station_units
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_station_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_hourly_by_station_lang
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_station_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_hourly_by_station_tz
  @source(subgraph: "Weather", name: "queryInput_history_hourly_by_station_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_subhourly_by_city_by_country_units
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_city_by_country_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_subhourly_by_city_by_country_lang
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_city_by_country_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_subhourly_by_city_by_country_tz
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_city_by_country_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

type HistorySubhourly @source(subgraph: "Weather", name: "HistorySubhourly") {
  "City name (Closest)"
  city_name: String @source(subgraph: "Weather", name: "city_name", type: "String")
  "Country abbreviation"
  country_code: String @source(subgraph: "Weather", name: "country_code", type: "String")
  data: [HistoryObj] @source(subgraph: "Weather", name: "data", type: "[HistoryObj]")
  "Latitude"
  lat: String @source(subgraph: "Weather", name: "lat", type: "String")
  "Longitude"
  lon: String @source(subgraph: "Weather", name: "lon", type: "String")
  "List of data sources used in response"
  sources: [String] @source(subgraph: "Weather", name: "sources", type: "[String]")
  "State abbreviation"
  state_code: String @source(subgraph: "Weather", name: "state_code", type: "String")
  "Local IANA time zone"
  timezone: String @source(subgraph: "Weather", name: "timezone", type: "String")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_subhourly_by_city_id_units
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_city_id_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_subhourly_by_city_id_lang
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_city_id_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_subhourly_by_city_id_tz
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_city_id_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_subhourly_by_lat_by_lon_units
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_lat_by_lon_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_subhourly_by_lat_by_lon_lang
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_lat_by_lon_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_subhourly_by_lat_by_lon_tz
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_lat_by_lon_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_subhourly_by_postal_code_units
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_postal_code_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_subhourly_by_postal_code_lang
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_postal_code_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_subhourly_by_postal_code_tz
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_postal_code_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}

"Convert to units. Default Metric See <a target='blank' href='/api/requests'>units field description</a>"
enum queryInput_history_subhourly_by_station_units
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_station_units") {
  S @source(subgraph: "Weather", name: "S")
  I @source(subgraph: "Weather", name: "I")
}

"Language (Default: English) See <a target='blank' href='/api/requests'>language field description</a>"
enum queryInput_history_subhourly_by_station_lang
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_station_lang") {
  ar @source(subgraph: "Weather", name: "ar")
  az @source(subgraph: "Weather", name: "az")
  be @source(subgraph: "Weather", name: "be")
  bg @source(subgraph: "Weather", name: "bg")
  bs @source(subgraph: "Weather", name: "bs")
  ca @source(subgraph: "Weather", name: "ca")
  cs @source(subgraph: "Weather", name: "cs")
  de @source(subgraph: "Weather", name: "de")
  fi @source(subgraph: "Weather", name: "fi")
  fr @source(subgraph: "Weather", name: "fr")
  el @source(subgraph: "Weather", name: "el")
  es @source(subgraph: "Weather", name: "es")
  et @source(subgraph: "Weather", name: "et")
  hr @source(subgraph: "Weather", name: "hr")
  hu @source(subgraph: "Weather", name: "hu")
  id @source(subgraph: "Weather", name: "id")
  it @source(subgraph: "Weather", name: "it")
  is @source(subgraph: "Weather", name: "is")
  kw @source(subgraph: "Weather", name: "kw")
  nb @source(subgraph: "Weather", name: "nb")
  nl @source(subgraph: "Weather", name: "nl")
  pl @source(subgraph: "Weather", name: "pl")
  pt @source(subgraph: "Weather", name: "pt")
  ro @source(subgraph: "Weather", name: "ro")
  ru @source(subgraph: "Weather", name: "ru")
  sk @source(subgraph: "Weather", name: "sk")
  sl @source(subgraph: "Weather", name: "sl")
  sr @source(subgraph: "Weather", name: "sr")
  sv @source(subgraph: "Weather", name: "sv")
  tr @source(subgraph: "Weather", name: "tr")
  uk @source(subgraph: "Weather", name: "uk")
  zh @source(subgraph: "Weather", name: "zh")
  zh_tw @enum(subgraph: "Weather", value: "\"zh-tw\"") @source(subgraph: "Weather", name: "zh_tw")
}

"Assume utc (default) or local time for start_date, end_date"
enum queryInput_history_subhourly_by_station_tz
  @source(subgraph: "Weather", name: "queryInput_history_subhourly_by_station_tz") {
  local @source(subgraph: "Weather", name: "local")
  utc @source(subgraph: "Weather", name: "utc")
}
