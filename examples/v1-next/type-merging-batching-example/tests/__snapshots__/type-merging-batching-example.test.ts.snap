// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type Merging with Batching Example executes Author.graphql query: result-Author.graphql 1`] = `
{
  "data": {
    "author": {
      "books": [
        {
          "author": {
            "id": "1",
            "name": "Jane Doe",
          },
          "id": "0",
          "title": "Lorem Ipsum",
        },
      ],
      "id": "1",
      "name": "Jane Doe",
    },
  },
  "errors": undefined,
  "extensions": undefined,
}
`;

exports[`Type Merging with Batching Example executes Authors.graphql query: result-Authors.graphql 1`] = `
{
  "data": {
    "authors": [
      {
        "books": [
          {
            "author": {
              "id": "0",
              "name": "John Doe",
            },
            "id": "1",
            "title": "Dolor Sit Amet",
          },
        ],
        "id": "0",
        "name": "John Doe",
      },
      {
        "books": [
          {
            "author": {
              "id": "1",
              "name": "Jane Doe",
            },
            "id": "0",
            "title": "Lorem Ipsum",
          },
        ],
        "id": "1",
        "name": "Jane Doe",
      },
    ],
  },
  "errors": undefined,
  "extensions": undefined,
}
`;

exports[`Type Merging with Batching Example executes Book.graphql query: result-Book.graphql 1`] = `
{
  "data": {
    "book": {
      "author": {
        "books": [
          {
            "id": "1",
            "title": "Dolor Sit Amet",
          },
        ],
        "id": "0",
        "name": "John Doe",
      },
      "id": "1",
      "title": "Dolor Sit Amet",
    },
  },
  "errors": undefined,
  "extensions": undefined,
}
`;

exports[`Type Merging with Batching Example executes Books.graphql query: result-Books.graphql 1`] = `
{
  "data": {
    "books": [
      {
        "author": {
          "id": "1",
          "name": "Jane Doe",
        },
        "id": "0",
        "title": "Lorem Ipsum",
      },
      {
        "author": {
          "id": "0",
          "name": "John Doe",
        },
        "id": "1",
        "title": "Dolor Sit Amet",
      },
    ],
  },
  "errors": undefined,
  "extensions": undefined,
}
`;

exports[`Type Merging with Batching Example generates the schema correctly: schema 1`] = `
"schema @transport(kind: "http", subgraph: "authors", location: "http://localhost:4001/graphql", options: {}) @transport(kind: "http", subgraph: "books", location: "http://localhost:4002/graphql", options: {}) {
  query: Query
}

type Query {
  author(id: ID!): Author @resolver(subgraph: "authors", operation: "query author($id: ID!) { author(id: $id) }") @resolver(subgraph: "books", operation: "query authorWithBooks($id: ID!) { authorWithBooks(id: $id) }") @source(subgraph: "authors", name: "author", type: "Author") @source(subgraph: "books", name: "authorWithBooks", type: "AuthorWithBooks")
  authors(ids: [ID]): [Author] @resolver(subgraph: "authors", operation: "query authors($ids: [ID]) { authors(ids: $ids) }") @source(subgraph: "authors", name: "authors", type: "[Author]")
  book(id: ID!): Book @resolver(subgraph: "books", operation: "query book($id: ID!) { book(id: $id) }") @source(subgraph: "books", name: "book", type: "Book")
  books(ids: [ID]): [Book!]! @resolver(subgraph: "books", operation: "query books($ids: [ID]) { books(ids: $ids) }") @source(subgraph: "books", name: "books", type: "[Book!]!")
}

type Author @source(subgraph: "authors", name: "Author") @source(subgraph: "books", name: "AuthorWithBooks") @resolver(subgraph: "authors", operation: "query AuthorById($Author_id: ID!) { author(id: $Author_id) }", kind: "FETCH") @resolver(subgraph: "authors", operation: "query AuthorsByIds($Author_id: [ID]) { authors(ids: $Author_id) }", kind: "BATCH") @resolver(subgraph: "books", operation: "query AuthorWithBooksById($AuthorWithBooks_id: ID!) { authorWithBooks(id: $AuthorWithBooks_id) }", kind: "FETCH") @resolver(subgraph: "books", operation: "query AuthorById($Author_id: ID!) { authorWithBooks(id: $Author_id) }", kind: "FETCH") @variable(subgraph: "authors", name: "Author_id", select: "id") @variable(subgraph: "books", name: "AuthorWithBooks_id", select: "id") @variable(subgraph: "authors", name: "Author_id", select: "id") @variable(subgraph: "books", name: "Author_id", select: "id") {
  id: ID! @source(subgraph: "authors", name: "id", type: "ID!") @source(subgraph: "books", name: "id", type: "ID!")
  name: String! @source(subgraph: "authors", name: "name", type: "String!")
  books: [Book!]! @source(subgraph: "books", name: "books", type: "[Book!]!")
}

type Book @source(subgraph: "books", name: "Book") @resolver(subgraph: "books", operation: "query BookById($Book_id: ID!) { book(id: $Book_id) }", kind: "FETCH") @resolver(subgraph: "books", operation: "query BookByAuthorId($Book_authorId: ID!) { book(id: $Book_authorId) }", kind: "FETCH") @resolver(subgraph: "books", operation: "query BooksByIds($Book_id: [ID]) { books(ids: $Book_id) }", kind: "BATCH") @resolver(subgraph: "books", operation: "query BooksByAuthorIds($Book_authorId: [ID]) { books(ids: $Book_authorId) }", kind: "BATCH") @resolver(subgraph: "books", operation: "query BookById($Book_id: ID!) { book(id: $Book_id) }", kind: "FETCH") @resolver(subgraph: "books", operation: "query BookByAuthorId($Book_authorId: ID!) { book(id: $Book_authorId) }", kind: "FETCH") @resolver(subgraph: "books", operation: "query BooksByIds($Book_id: [ID]) { books(ids: $Book_id) }", kind: "BATCH") @resolver(subgraph: "books", operation: "query BooksByAuthorIds($Book_authorId: [ID]) { books(ids: $Book_authorId) }", kind: "BATCH") @variable(subgraph: "books", name: "Book_id", select: "id") @variable(subgraph: "books", name: "Book_authorId", select: "authorId") {
  id: ID! @source(subgraph: "books", name: "id", type: "ID!")
  title: String! @source(subgraph: "books", name: "title", type: "String!")
  authorId: ID! @source(subgraph: "books", name: "authorId", type: "ID!")
  author: Author @variable(name: "bookAuthorId", select: "authorId", subgraph: "books") @resolver(subgraph: "authors", operation: """
  query AuthorOfBook($bookAuthorId: ID!) {
    author(id: $bookAuthorId)
  }
  """)
}"
`;

exports[`Type Merging with Batching Example plans Author.graphql correctly: plan-Author.graphql 1`] = `
{
  "resolverDependencyFieldMap": {
    "author": [
      {
        "id": 0,
        "resolverDependencies": [
          {
            "id": 2,
            "resolverOperationDocument": "query AuthorById($__variable_2: ID!) {
  __export: author(id: $__variable_2) {
    name
  }
}",
            "subgraph": "authors",
          },
        ],
        "resolverDependencyFieldMap": {
          "books": [],
          "books.author": [
            {
              "id": 1,
              "resolverOperationDocument": "query AuthorOfBook($__variable_1: ID!) {
  __export: author(id: $__variable_1) {
    id
    name
  }
}",
              "subgraph": "authors",
            },
          ],
        },
        "resolverOperationDocument": "query authorWithBooks {
  __export: authorWithBooks(id: 1) {
    id
    books {
      id
      title
      __variable_1: authorId
    }
    __variable_2: id
  }
}",
        "subgraph": "books",
      },
    ],
  },
  "resolverOperationNodes": [],
}
`;

exports[`Type Merging with Batching Example plans Authors.graphql correctly: plan-Authors.graphql 1`] = `
{
  "resolverDependencyFieldMap": {
    "authors": [
      {
        "id": 0,
        "resolverDependencies": [
          {
            "id": 1,
            "resolverDependencyFieldMap": {
              "books.author": [
                {
                  "id": 2,
                  "resolverOperationDocument": "query AuthorOfBook($__variable_2: ID!) {
  __export: author(id: $__variable_2) {
    id
    name
  }
}",
                  "subgraph": "authors",
                },
              ],
            },
            "resolverOperationDocument": "query AuthorById($__variable_1: ID!) {
  __export: authorWithBooks(id: $__variable_1) {
    books {
      id
      title
      __variable_2: authorId
    }
  }
}",
            "subgraph": "books",
          },
        ],
        "resolverOperationDocument": "query authors($__variable_0: [ID]) {
  __export: authors(ids: $__variable_0) {
    id
    name
    __variable_1: id
  }
}",
        "subgraph": "authors",
      },
    ],
  },
  "resolverOperationNodes": [],
}
`;

exports[`Type Merging with Batching Example plans Book.graphql correctly: plan-Book.graphql 1`] = `
{
  "resolverDependencyFieldMap": {
    "book": [
      {
        "id": 0,
        "resolverDependencyFieldMap": {
          "author": [
            {
              "id": 1,
              "resolverDependencies": [
                {
                  "id": 2,
                  "resolverOperationDocument": "query AuthorById($__variable_2: ID!) {
  __export: authorWithBooks(id: $__variable_2) {
    books {
      id
      title
    }
  }
}",
                  "subgraph": "books",
                },
              ],
              "resolverOperationDocument": "query AuthorOfBook($__variable_1: ID!) {
  __export: author(id: $__variable_1) {
    id
    name
    __variable_2: id
  }
}",
              "subgraph": "authors",
            },
          ],
        },
        "resolverOperationDocument": "query book {
  __export: book(id: 1) {
    id
    title
    __variable_1: authorId
  }
}",
        "subgraph": "books",
      },
    ],
  },
  "resolverOperationNodes": [],
}
`;

exports[`Type Merging with Batching Example plans Books.graphql correctly: plan-Books.graphql 1`] = `
{
  "resolverDependencyFieldMap": {
    "books": [
      {
        "id": 0,
        "resolverDependencyFieldMap": {
          "author": [
            {
              "id": 1,
              "resolverOperationDocument": "query AuthorOfBook($__variable_1: ID!) {
  __export: author(id: $__variable_1) {
    id
    name
  }
}",
              "subgraph": "authors",
            },
          ],
        },
        "resolverOperationDocument": "query books($__variable_0: [ID]) {
  __export: books(ids: $__variable_0) {
    id
    title
    __variable_1: authorId
  }
}",
        "subgraph": "books",
      },
    ],
  },
  "resolverOperationNodes": [],
}
`;
