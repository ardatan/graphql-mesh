// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Neo4j should generate correct schema 1`] = `
"schema @transport(kind: "neo4j", location: "neo4j+s://demo.neo4jlabs.com", options: {database: "movies", auth: {type: "basic", username: "movies", password: "movies"}}, subgraph: "Movies") {
  query: Query
  mutation: Mutation
}

directive @introspection(subgraph: String) on ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @relationship(direction: _RelationDirections, type: String) on FIELD_DEFINITION

directive @relationshipProperties on OBJECT

directive @transport(kind: String, location: String, options: Any, subgraph: String) on SCHEMA

"""
The edge properties for the following fields:
* Movie.peopleActedIn
* Person.actedInMovies
"""
type ActedInProperties @relationshipProperties @introspection @source(subgraph: "Movies", name: "ActedInProperties") {
  roles: [String]! @introspection @source(subgraph: "Movies", name: "roles", type: "[String]!")
}

input ActedInPropertiesCreateInput @source(subgraph: "Movies", name: "ActedInPropertiesCreateInput") {
  roles: [String]! @source(subgraph: "Movies", name: "roles", type: "[String]!")
}

input ActedInPropertiesSort @source(subgraph: "Movies", name: "ActedInPropertiesSort") {
  roles: SortDirection @source(subgraph: "Movies", name: "roles", type: "SortDirection")
}

input ActedInPropertiesUpdateInput @source(subgraph: "Movies", name: "ActedInPropertiesUpdateInput") {
  roles: [String] @source(subgraph: "Movies", name: "roles", type: "[String]")
  roles_POP: Int @source(subgraph: "Movies", name: "roles_POP", type: "Int")
  roles_PUSH: [String] @source(subgraph: "Movies", name: "roles_PUSH", type: "[String]")
}

input ActedInPropertiesWhere @source(subgraph: "Movies", name: "ActedInPropertiesWhere") {
  AND: [ActedInPropertiesWhere!] @source(subgraph: "Movies", name: "AND", type: "[ActedInPropertiesWhere!]")
  NOT: ActedInPropertiesWhere @source(subgraph: "Movies", name: "NOT", type: "ActedInPropertiesWhere")
  OR: [ActedInPropertiesWhere!] @source(subgraph: "Movies", name: "OR", type: "[ActedInPropertiesWhere!]")
  roles: [String] @source(subgraph: "Movies", name: "roles", type: "[String]")
  roles_INCLUDES: String @source(subgraph: "Movies", name: "roles_INCLUDES", type: "String")
  roles_NOT: [String] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "roles_NOT", type: "[String]")
  roles_NOT_INCLUDES: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "roles_NOT_INCLUDES", type: "String")
}

scalar Any @source(subgraph: "Movies", name: "Any") @source(subgraph: "Movies", name: "Any")

"""
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @source(subgraph: "Movies", name: "BigInt") @source(subgraph: "Movies", name: "BigInt")

type BigIntAggregateSelection @source(subgraph: "Movies", name: "BigIntAggregateSelection") {
  average: BigInt @source(subgraph: "Movies", name: "average", type: "BigInt")
  max: BigInt @source(subgraph: "Movies", name: "max", type: "BigInt")
  min: BigInt @source(subgraph: "Movies", name: "min", type: "BigInt")
  sum: BigInt @source(subgraph: "Movies", name: "sum", type: "BigInt")
}

"""
Information about the number of nodes and relationships created during a create mutation
"""
type CreateInfo @source(subgraph: "Movies", name: "CreateInfo") {
  bookmark: String @deprecated(reason: "This field has been deprecated because bookmarks are now handled by the driver.") @source(subgraph: "Movies", name: "bookmark", type: "String")
  nodesCreated: Int! @source(subgraph: "Movies", name: "nodesCreated", type: "Int!")
  relationshipsCreated: Int! @source(subgraph: "Movies", name: "relationshipsCreated", type: "Int!")
}

type CreateMoviesMutationResponse @source(subgraph: "Movies", name: "CreateMoviesMutationResponse") {
  info: CreateInfo! @source(subgraph: "Movies", name: "info", type: "CreateInfo!")
  movies: [Movie!]! @source(subgraph: "Movies", name: "movies", type: "[Movie!]!")
}

type CreatePeopleMutationResponse @source(subgraph: "Movies", name: "CreatePeopleMutationResponse") {
  info: CreateInfo! @source(subgraph: "Movies", name: "info", type: "CreateInfo!")
  people: [Person!]! @source(subgraph: "Movies", name: "people", type: "[Person!]!")
}

"""
Information about the number of nodes and relationships deleted during a delete mutation
"""
type DeleteInfo @source(subgraph: "Movies", name: "DeleteInfo") {
  bookmark: String @deprecated(reason: "This field has been deprecated because bookmarks are now handled by the driver.") @source(subgraph: "Movies", name: "bookmark", type: "String")
  nodesDeleted: Int! @source(subgraph: "Movies", name: "nodesDeleted", type: "Int!")
  relationshipsDeleted: Int! @source(subgraph: "Movies", name: "relationshipsDeleted", type: "Int!")
}

type Movie @introspection @source(subgraph: "Movies", name: "Movie") {
  peopleActedIn(directed: Boolean = true, options: PersonOptions, where: PersonWhere): [Person!]! @introspection @relationship(direction: IN, type: "ACTED_IN") @source(subgraph: "Movies", name: "peopleActedIn", type: "[Person!]!")
  peopleActedInAggregate(directed: Boolean = true, where: PersonWhere): MoviePersonPeopleActedInAggregationSelection @source(subgraph: "Movies", name: "peopleActedInAggregate", type: "MoviePersonPeopleActedInAggregationSelection")
  peopleActedInConnection(after: String, directed: Boolean = true, first: Int, sort: [MoviePeopleActedInConnectionSort!], where: MoviePeopleActedInConnectionWhere): MoviePeopleActedInConnection! @source(subgraph: "Movies", name: "peopleActedInConnection", type: "MoviePeopleActedInConnection!")
  peopleDirected(directed: Boolean = true, options: PersonOptions, where: PersonWhere): [Person!]! @introspection @relationship(direction: IN, type: "DIRECTED") @source(subgraph: "Movies", name: "peopleDirected", type: "[Person!]!")
  peopleDirectedAggregate(directed: Boolean = true, where: PersonWhere): MoviePersonPeopleDirectedAggregationSelection @source(subgraph: "Movies", name: "peopleDirectedAggregate", type: "MoviePersonPeopleDirectedAggregationSelection")
  peopleDirectedConnection(after: String, directed: Boolean = true, first: Int, sort: [MoviePeopleDirectedConnectionSort!], where: MoviePeopleDirectedConnectionWhere): MoviePeopleDirectedConnection! @source(subgraph: "Movies", name: "peopleDirectedConnection", type: "MoviePeopleDirectedConnection!")
  peopleProduced(directed: Boolean = true, options: PersonOptions, where: PersonWhere): [Person!]! @introspection @relationship(direction: IN, type: "PRODUCED") @source(subgraph: "Movies", name: "peopleProduced", type: "[Person!]!")
  peopleProducedAggregate(directed: Boolean = true, where: PersonWhere): MoviePersonPeopleProducedAggregationSelection @source(subgraph: "Movies", name: "peopleProducedAggregate", type: "MoviePersonPeopleProducedAggregationSelection")
  peopleProducedConnection(after: String, directed: Boolean = true, first: Int, sort: [MoviePeopleProducedConnectionSort!], where: MoviePeopleProducedConnectionWhere): MoviePeopleProducedConnection! @source(subgraph: "Movies", name: "peopleProducedConnection", type: "MoviePeopleProducedConnection!")
  peopleReviewed(directed: Boolean = true, options: PersonOptions, where: PersonWhere): [Person!]! @introspection @relationship(direction: IN, type: "REVIEWED") @source(subgraph: "Movies", name: "peopleReviewed", type: "[Person!]!")
  peopleReviewedAggregate(directed: Boolean = true, where: PersonWhere): MoviePersonPeopleReviewedAggregationSelection @source(subgraph: "Movies", name: "peopleReviewedAggregate", type: "MoviePersonPeopleReviewedAggregationSelection")
  peopleReviewedConnection(after: String, directed: Boolean = true, first: Int, sort: [MoviePeopleReviewedConnectionSort!], where: MoviePeopleReviewedConnectionWhere): MoviePeopleReviewedConnection! @source(subgraph: "Movies", name: "peopleReviewedConnection", type: "MoviePeopleReviewedConnection!")
  peopleWrote(directed: Boolean = true, options: PersonOptions, where: PersonWhere): [Person!]! @introspection @relationship(direction: IN, type: "WROTE") @source(subgraph: "Movies", name: "peopleWrote", type: "[Person!]!")
  peopleWroteAggregate(directed: Boolean = true, where: PersonWhere): MoviePersonPeopleWroteAggregationSelection @source(subgraph: "Movies", name: "peopleWroteAggregate", type: "MoviePersonPeopleWroteAggregationSelection")
  peopleWroteConnection(after: String, directed: Boolean = true, first: Int, sort: [MoviePeopleWroteConnectionSort!], where: MoviePeopleWroteConnectionWhere): MoviePeopleWroteConnection! @source(subgraph: "Movies", name: "peopleWroteConnection", type: "MoviePeopleWroteConnection!")
  released: BigInt! @introspection @source(subgraph: "Movies", name: "released", type: "BigInt!")
  tagline: String @introspection @source(subgraph: "Movies", name: "tagline", type: "String")
  title: String! @introspection @source(subgraph: "Movies", name: "title", type: "String!")
  votes: BigInt! @introspection @source(subgraph: "Movies", name: "votes", type: "BigInt!")
}

type MovieAggregateSelection @source(subgraph: "Movies", name: "MovieAggregateSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  released: BigIntAggregateSelection! @source(subgraph: "Movies", name: "released", type: "BigIntAggregateSelection!")
  tagline: StringAggregateSelection! @source(subgraph: "Movies", name: "tagline", type: "StringAggregateSelection!")
  title: StringAggregateSelection! @source(subgraph: "Movies", name: "title", type: "StringAggregateSelection!")
  votes: BigIntAggregateSelection! @source(subgraph: "Movies", name: "votes", type: "BigIntAggregateSelection!")
}

input MovieConnectInput @source(subgraph: "Movies", name: "MovieConnectInput") {
  peopleActedIn: [MoviePeopleActedInConnectFieldInput!] @source(subgraph: "Movies", name: "peopleActedIn", type: "[MoviePeopleActedInConnectFieldInput!]")
  peopleDirected: [MoviePeopleDirectedConnectFieldInput!] @source(subgraph: "Movies", name: "peopleDirected", type: "[MoviePeopleDirectedConnectFieldInput!]")
  peopleProduced: [MoviePeopleProducedConnectFieldInput!] @source(subgraph: "Movies", name: "peopleProduced", type: "[MoviePeopleProducedConnectFieldInput!]")
  peopleReviewed: [MoviePeopleReviewedConnectFieldInput!] @source(subgraph: "Movies", name: "peopleReviewed", type: "[MoviePeopleReviewedConnectFieldInput!]")
  peopleWrote: [MoviePeopleWroteConnectFieldInput!] @source(subgraph: "Movies", name: "peopleWrote", type: "[MoviePeopleWroteConnectFieldInput!]")
}

input MovieConnectWhere @source(subgraph: "Movies", name: "MovieConnectWhere") {
  node: MovieWhere! @source(subgraph: "Movies", name: "node", type: "MovieWhere!")
}

input MovieCreateInput @source(subgraph: "Movies", name: "MovieCreateInput") {
  peopleActedIn: MoviePeopleActedInFieldInput @source(subgraph: "Movies", name: "peopleActedIn", type: "MoviePeopleActedInFieldInput")
  peopleDirected: MoviePeopleDirectedFieldInput @source(subgraph: "Movies", name: "peopleDirected", type: "MoviePeopleDirectedFieldInput")
  peopleProduced: MoviePeopleProducedFieldInput @source(subgraph: "Movies", name: "peopleProduced", type: "MoviePeopleProducedFieldInput")
  peopleReviewed: MoviePeopleReviewedFieldInput @source(subgraph: "Movies", name: "peopleReviewed", type: "MoviePeopleReviewedFieldInput")
  peopleWrote: MoviePeopleWroteFieldInput @source(subgraph: "Movies", name: "peopleWrote", type: "MoviePeopleWroteFieldInput")
  released: BigInt! @source(subgraph: "Movies", name: "released", type: "BigInt!")
  tagline: String @source(subgraph: "Movies", name: "tagline", type: "String")
  title: String! @source(subgraph: "Movies", name: "title", type: "String!")
  votes: BigInt! @source(subgraph: "Movies", name: "votes", type: "BigInt!")
}

input MovieDeleteInput @source(subgraph: "Movies", name: "MovieDeleteInput") {
  peopleActedIn: [MoviePeopleActedInDeleteFieldInput!] @source(subgraph: "Movies", name: "peopleActedIn", type: "[MoviePeopleActedInDeleteFieldInput!]")
  peopleDirected: [MoviePeopleDirectedDeleteFieldInput!] @source(subgraph: "Movies", name: "peopleDirected", type: "[MoviePeopleDirectedDeleteFieldInput!]")
  peopleProduced: [MoviePeopleProducedDeleteFieldInput!] @source(subgraph: "Movies", name: "peopleProduced", type: "[MoviePeopleProducedDeleteFieldInput!]")
  peopleReviewed: [MoviePeopleReviewedDeleteFieldInput!] @source(subgraph: "Movies", name: "peopleReviewed", type: "[MoviePeopleReviewedDeleteFieldInput!]")
  peopleWrote: [MoviePeopleWroteDeleteFieldInput!] @source(subgraph: "Movies", name: "peopleWrote", type: "[MoviePeopleWroteDeleteFieldInput!]")
}

input MovieDisconnectInput @source(subgraph: "Movies", name: "MovieDisconnectInput") {
  peopleActedIn: [MoviePeopleActedInDisconnectFieldInput!] @source(subgraph: "Movies", name: "peopleActedIn", type: "[MoviePeopleActedInDisconnectFieldInput!]")
  peopleDirected: [MoviePeopleDirectedDisconnectFieldInput!] @source(subgraph: "Movies", name: "peopleDirected", type: "[MoviePeopleDirectedDisconnectFieldInput!]")
  peopleProduced: [MoviePeopleProducedDisconnectFieldInput!] @source(subgraph: "Movies", name: "peopleProduced", type: "[MoviePeopleProducedDisconnectFieldInput!]")
  peopleReviewed: [MoviePeopleReviewedDisconnectFieldInput!] @source(subgraph: "Movies", name: "peopleReviewed", type: "[MoviePeopleReviewedDisconnectFieldInput!]")
  peopleWrote: [MoviePeopleWroteDisconnectFieldInput!] @source(subgraph: "Movies", name: "peopleWrote", type: "[MoviePeopleWroteDisconnectFieldInput!]")
}

type MovieEdge @source(subgraph: "Movies", name: "MovieEdge") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Movie! @source(subgraph: "Movies", name: "node", type: "Movie!")
}

input MovieOptions @source(subgraph: "Movies", name: "MovieOptions") {
  limit: Int @source(subgraph: "Movies", name: "limit", type: "Int")
  offset: Int @source(subgraph: "Movies", name: "offset", type: "Int")
  """
  Specify one or more MovieSort objects to sort Movies by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [MovieSort!] @source(subgraph: "Movies", name: "sort", type: "[MovieSort!]")
}

input MoviePeopleActedInAggregateInput @source(subgraph: "Movies", name: "MoviePeopleActedInAggregateInput") {
  AND: [MoviePeopleActedInAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleActedInAggregateInput!]")
  NOT: MoviePeopleActedInAggregateInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleActedInAggregateInput")
  OR: [MoviePeopleActedInAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleActedInAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: MoviePeopleActedInNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "MoviePeopleActedInNodeAggregationWhereInput")
}

input MoviePeopleActedInConnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleActedInConnectFieldInput") {
  connect: [PersonConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonConnectInput!]")
  edge: ActedInPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesCreateInput!")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: PersonConnectWhere @source(subgraph: "Movies", name: "where", type: "PersonConnectWhere")
}

type MoviePeopleActedInConnection @source(subgraph: "Movies", name: "MoviePeopleActedInConnection") {
  edges: [MoviePeopleActedInRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[MoviePeopleActedInRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input MoviePeopleActedInConnectionSort @source(subgraph: "Movies", name: "MoviePeopleActedInConnectionSort") {
  edge: ActedInPropertiesSort @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesSort")
  node: PersonSort @source(subgraph: "Movies", name: "node", type: "PersonSort")
}

input MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "MoviePeopleActedInConnectionWhere") {
  AND: [MoviePeopleActedInConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleActedInConnectionWhere!]")
  NOT: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleActedInConnectionWhere")
  OR: [MoviePeopleActedInConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleActedInConnectionWhere!]")
  edge: ActedInPropertiesWhere @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesWhere")
  edge_NOT: ActedInPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "edge_NOT", type: "ActedInPropertiesWhere")
  node: PersonWhere @source(subgraph: "Movies", name: "node", type: "PersonWhere")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "PersonWhere")
}

input MoviePeopleActedInCreateFieldInput @source(subgraph: "Movies", name: "MoviePeopleActedInCreateFieldInput") {
  edge: ActedInPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesCreateInput!")
  node: PersonCreateInput! @source(subgraph: "Movies", name: "node", type: "PersonCreateInput!")
}

input MoviePeopleActedInDeleteFieldInput @source(subgraph: "Movies", name: "MoviePeopleActedInDeleteFieldInput") {
  delete: PersonDeleteInput @source(subgraph: "Movies", name: "delete", type: "PersonDeleteInput")
  where: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleActedInConnectionWhere")
}

input MoviePeopleActedInDisconnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleActedInDisconnectFieldInput") {
  disconnect: PersonDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "PersonDisconnectInput")
  where: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleActedInConnectionWhere")
}

input MoviePeopleActedInFieldInput @source(subgraph: "Movies", name: "MoviePeopleActedInFieldInput") {
  connect: [MoviePeopleActedInConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleActedInConnectFieldInput!]")
  create: [MoviePeopleActedInCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleActedInCreateFieldInput!]")
}

input MoviePeopleActedInNodeAggregationWhereInput @source(subgraph: "Movies", name: "MoviePeopleActedInNodeAggregationWhereInput") {
  AND: [MoviePeopleActedInNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleActedInNodeAggregationWhereInput!]")
  NOT: MoviePeopleActedInNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleActedInNodeAggregationWhereInput")
  OR: [MoviePeopleActedInNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleActedInNodeAggregationWhereInput!]")
  born_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_EQUAL", type: "BigInt")
  born_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GT", type: "BigInt")
  born_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GTE", type: "BigInt")
  born_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LT", type: "BigInt")
  born_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LTE", type: "BigInt")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_EQUAL", type: "BigInt")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MAX_EQUAL", type: "BigInt")
  born_MAX_GT: BigInt @source(subgraph: "Movies", name: "born_MAX_GT", type: "BigInt")
  born_MAX_GTE: BigInt @source(subgraph: "Movies", name: "born_MAX_GTE", type: "BigInt")
  born_MAX_LT: BigInt @source(subgraph: "Movies", name: "born_MAX_LT", type: "BigInt")
  born_MAX_LTE: BigInt @source(subgraph: "Movies", name: "born_MAX_LTE", type: "BigInt")
  born_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MIN_EQUAL", type: "BigInt")
  born_MIN_GT: BigInt @source(subgraph: "Movies", name: "born_MIN_GT", type: "BigInt")
  born_MIN_GTE: BigInt @source(subgraph: "Movies", name: "born_MIN_GTE", type: "BigInt")
  born_MIN_LT: BigInt @source(subgraph: "Movies", name: "born_MIN_LT", type: "BigInt")
  born_MIN_LTE: BigInt @source(subgraph: "Movies", name: "born_MIN_LTE", type: "BigInt")
  born_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "born_SUM_EQUAL", type: "BigInt")
  born_SUM_GT: BigInt @source(subgraph: "Movies", name: "born_SUM_GT", type: "BigInt")
  born_SUM_GTE: BigInt @source(subgraph: "Movies", name: "born_SUM_GTE", type: "BigInt")
  born_SUM_LT: BigInt @source(subgraph: "Movies", name: "born_SUM_LT", type: "BigInt")
  born_SUM_LTE: BigInt @source(subgraph: "Movies", name: "born_SUM_LTE", type: "BigInt")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_EQUAL", type: "Float")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GT", type: "Float")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GTE", type: "Float")
  name_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_EQUAL", type: "Float")
  name_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GT", type: "Float")
  name_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GTE", type: "Float")
  name_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LT", type: "Float")
  name_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LTE", type: "Float")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LT", type: "Float")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LTE", type: "Float")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_EQUAL", type: "String")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GT", type: "Int")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GTE", type: "Int")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_EQUAL", type: "Int")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GT", type: "Int")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GTE", type: "Int")
  name_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_EQUAL", type: "Int")
  name_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GT", type: "Int")
  name_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GTE", type: "Int")
  name_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LT", type: "Int")
  name_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LTE", type: "Int")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LT", type: "Int")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LTE", type: "Int")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LT", type: "Int")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LTE", type: "Int")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_EQUAL", type: "Int")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GT", type: "Int")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GTE", type: "Int")
  name_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_EQUAL", type: "Int")
  name_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GT", type: "Int")
  name_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GTE", type: "Int")
  name_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LT", type: "Int")
  name_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LTE", type: "Int")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LT", type: "Int")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LTE", type: "Int")
}

type MoviePeopleActedInRelationship @source(subgraph: "Movies", name: "MoviePeopleActedInRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
  properties: ActedInProperties! @source(subgraph: "Movies", name: "properties", type: "ActedInProperties!")
}

input MoviePeopleActedInUpdateConnectionInput @source(subgraph: "Movies", name: "MoviePeopleActedInUpdateConnectionInput") {
  edge: ActedInPropertiesUpdateInput @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesUpdateInput")
  node: PersonUpdateInput @source(subgraph: "Movies", name: "node", type: "PersonUpdateInput")
}

input MoviePeopleActedInUpdateFieldInput @source(subgraph: "Movies", name: "MoviePeopleActedInUpdateFieldInput") {
  connect: [MoviePeopleActedInConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleActedInConnectFieldInput!]")
  create: [MoviePeopleActedInCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleActedInCreateFieldInput!]")
  delete: [MoviePeopleActedInDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[MoviePeopleActedInDeleteFieldInput!]")
  disconnect: [MoviePeopleActedInDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[MoviePeopleActedInDisconnectFieldInput!]")
  update: MoviePeopleActedInUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "MoviePeopleActedInUpdateConnectionInput")
  where: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleActedInConnectionWhere")
}

input MoviePeopleDirectedAggregateInput @source(subgraph: "Movies", name: "MoviePeopleDirectedAggregateInput") {
  AND: [MoviePeopleDirectedAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleDirectedAggregateInput!]")
  NOT: MoviePeopleDirectedAggregateInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleDirectedAggregateInput")
  OR: [MoviePeopleDirectedAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleDirectedAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: MoviePeopleDirectedNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "MoviePeopleDirectedNodeAggregationWhereInput")
}

input MoviePeopleDirectedConnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleDirectedConnectFieldInput") {
  connect: [PersonConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: PersonConnectWhere @source(subgraph: "Movies", name: "where", type: "PersonConnectWhere")
}

type MoviePeopleDirectedConnection @source(subgraph: "Movies", name: "MoviePeopleDirectedConnection") {
  edges: [MoviePeopleDirectedRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[MoviePeopleDirectedRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input MoviePeopleDirectedConnectionSort @source(subgraph: "Movies", name: "MoviePeopleDirectedConnectionSort") {
  node: PersonSort @source(subgraph: "Movies", name: "node", type: "PersonSort")
}

input MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "MoviePeopleDirectedConnectionWhere") {
  AND: [MoviePeopleDirectedConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleDirectedConnectionWhere!]")
  NOT: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleDirectedConnectionWhere")
  OR: [MoviePeopleDirectedConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleDirectedConnectionWhere!]")
  node: PersonWhere @source(subgraph: "Movies", name: "node", type: "PersonWhere")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "PersonWhere")
}

input MoviePeopleDirectedCreateFieldInput @source(subgraph: "Movies", name: "MoviePeopleDirectedCreateFieldInput") {
  node: PersonCreateInput! @source(subgraph: "Movies", name: "node", type: "PersonCreateInput!")
}

input MoviePeopleDirectedDeleteFieldInput @source(subgraph: "Movies", name: "MoviePeopleDirectedDeleteFieldInput") {
  delete: PersonDeleteInput @source(subgraph: "Movies", name: "delete", type: "PersonDeleteInput")
  where: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleDirectedConnectionWhere")
}

input MoviePeopleDirectedDisconnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleDirectedDisconnectFieldInput") {
  disconnect: PersonDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "PersonDisconnectInput")
  where: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleDirectedConnectionWhere")
}

input MoviePeopleDirectedFieldInput @source(subgraph: "Movies", name: "MoviePeopleDirectedFieldInput") {
  connect: [MoviePeopleDirectedConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleDirectedConnectFieldInput!]")
  create: [MoviePeopleDirectedCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleDirectedCreateFieldInput!]")
}

input MoviePeopleDirectedNodeAggregationWhereInput @source(subgraph: "Movies", name: "MoviePeopleDirectedNodeAggregationWhereInput") {
  AND: [MoviePeopleDirectedNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleDirectedNodeAggregationWhereInput!]")
  NOT: MoviePeopleDirectedNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleDirectedNodeAggregationWhereInput")
  OR: [MoviePeopleDirectedNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleDirectedNodeAggregationWhereInput!]")
  born_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_EQUAL", type: "BigInt")
  born_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GT", type: "BigInt")
  born_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GTE", type: "BigInt")
  born_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LT", type: "BigInt")
  born_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LTE", type: "BigInt")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_EQUAL", type: "BigInt")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MAX_EQUAL", type: "BigInt")
  born_MAX_GT: BigInt @source(subgraph: "Movies", name: "born_MAX_GT", type: "BigInt")
  born_MAX_GTE: BigInt @source(subgraph: "Movies", name: "born_MAX_GTE", type: "BigInt")
  born_MAX_LT: BigInt @source(subgraph: "Movies", name: "born_MAX_LT", type: "BigInt")
  born_MAX_LTE: BigInt @source(subgraph: "Movies", name: "born_MAX_LTE", type: "BigInt")
  born_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MIN_EQUAL", type: "BigInt")
  born_MIN_GT: BigInt @source(subgraph: "Movies", name: "born_MIN_GT", type: "BigInt")
  born_MIN_GTE: BigInt @source(subgraph: "Movies", name: "born_MIN_GTE", type: "BigInt")
  born_MIN_LT: BigInt @source(subgraph: "Movies", name: "born_MIN_LT", type: "BigInt")
  born_MIN_LTE: BigInt @source(subgraph: "Movies", name: "born_MIN_LTE", type: "BigInt")
  born_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "born_SUM_EQUAL", type: "BigInt")
  born_SUM_GT: BigInt @source(subgraph: "Movies", name: "born_SUM_GT", type: "BigInt")
  born_SUM_GTE: BigInt @source(subgraph: "Movies", name: "born_SUM_GTE", type: "BigInt")
  born_SUM_LT: BigInt @source(subgraph: "Movies", name: "born_SUM_LT", type: "BigInt")
  born_SUM_LTE: BigInt @source(subgraph: "Movies", name: "born_SUM_LTE", type: "BigInt")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_EQUAL", type: "Float")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GT", type: "Float")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GTE", type: "Float")
  name_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_EQUAL", type: "Float")
  name_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GT", type: "Float")
  name_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GTE", type: "Float")
  name_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LT", type: "Float")
  name_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LTE", type: "Float")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LT", type: "Float")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LTE", type: "Float")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_EQUAL", type: "String")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GT", type: "Int")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GTE", type: "Int")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_EQUAL", type: "Int")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GT", type: "Int")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GTE", type: "Int")
  name_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_EQUAL", type: "Int")
  name_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GT", type: "Int")
  name_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GTE", type: "Int")
  name_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LT", type: "Int")
  name_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LTE", type: "Int")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LT", type: "Int")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LTE", type: "Int")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LT", type: "Int")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LTE", type: "Int")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_EQUAL", type: "Int")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GT", type: "Int")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GTE", type: "Int")
  name_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_EQUAL", type: "Int")
  name_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GT", type: "Int")
  name_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GTE", type: "Int")
  name_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LT", type: "Int")
  name_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LTE", type: "Int")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LT", type: "Int")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LTE", type: "Int")
}

type MoviePeopleDirectedRelationship @source(subgraph: "Movies", name: "MoviePeopleDirectedRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
}

input MoviePeopleDirectedUpdateConnectionInput @source(subgraph: "Movies", name: "MoviePeopleDirectedUpdateConnectionInput") {
  node: PersonUpdateInput @source(subgraph: "Movies", name: "node", type: "PersonUpdateInput")
}

input MoviePeopleDirectedUpdateFieldInput @source(subgraph: "Movies", name: "MoviePeopleDirectedUpdateFieldInput") {
  connect: [MoviePeopleDirectedConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleDirectedConnectFieldInput!]")
  create: [MoviePeopleDirectedCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleDirectedCreateFieldInput!]")
  delete: [MoviePeopleDirectedDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[MoviePeopleDirectedDeleteFieldInput!]")
  disconnect: [MoviePeopleDirectedDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[MoviePeopleDirectedDisconnectFieldInput!]")
  update: MoviePeopleDirectedUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "MoviePeopleDirectedUpdateConnectionInput")
  where: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleDirectedConnectionWhere")
}

input MoviePeopleProducedAggregateInput @source(subgraph: "Movies", name: "MoviePeopleProducedAggregateInput") {
  AND: [MoviePeopleProducedAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleProducedAggregateInput!]")
  NOT: MoviePeopleProducedAggregateInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleProducedAggregateInput")
  OR: [MoviePeopleProducedAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleProducedAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: MoviePeopleProducedNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "MoviePeopleProducedNodeAggregationWhereInput")
}

input MoviePeopleProducedConnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleProducedConnectFieldInput") {
  connect: [PersonConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: PersonConnectWhere @source(subgraph: "Movies", name: "where", type: "PersonConnectWhere")
}

type MoviePeopleProducedConnection @source(subgraph: "Movies", name: "MoviePeopleProducedConnection") {
  edges: [MoviePeopleProducedRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[MoviePeopleProducedRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input MoviePeopleProducedConnectionSort @source(subgraph: "Movies", name: "MoviePeopleProducedConnectionSort") {
  node: PersonSort @source(subgraph: "Movies", name: "node", type: "PersonSort")
}

input MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "MoviePeopleProducedConnectionWhere") {
  AND: [MoviePeopleProducedConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleProducedConnectionWhere!]")
  NOT: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleProducedConnectionWhere")
  OR: [MoviePeopleProducedConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleProducedConnectionWhere!]")
  node: PersonWhere @source(subgraph: "Movies", name: "node", type: "PersonWhere")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "PersonWhere")
}

input MoviePeopleProducedCreateFieldInput @source(subgraph: "Movies", name: "MoviePeopleProducedCreateFieldInput") {
  node: PersonCreateInput! @source(subgraph: "Movies", name: "node", type: "PersonCreateInput!")
}

input MoviePeopleProducedDeleteFieldInput @source(subgraph: "Movies", name: "MoviePeopleProducedDeleteFieldInput") {
  delete: PersonDeleteInput @source(subgraph: "Movies", name: "delete", type: "PersonDeleteInput")
  where: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleProducedConnectionWhere")
}

input MoviePeopleProducedDisconnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleProducedDisconnectFieldInput") {
  disconnect: PersonDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "PersonDisconnectInput")
  where: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleProducedConnectionWhere")
}

input MoviePeopleProducedFieldInput @source(subgraph: "Movies", name: "MoviePeopleProducedFieldInput") {
  connect: [MoviePeopleProducedConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleProducedConnectFieldInput!]")
  create: [MoviePeopleProducedCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleProducedCreateFieldInput!]")
}

input MoviePeopleProducedNodeAggregationWhereInput @source(subgraph: "Movies", name: "MoviePeopleProducedNodeAggregationWhereInput") {
  AND: [MoviePeopleProducedNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleProducedNodeAggregationWhereInput!]")
  NOT: MoviePeopleProducedNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleProducedNodeAggregationWhereInput")
  OR: [MoviePeopleProducedNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleProducedNodeAggregationWhereInput!]")
  born_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_EQUAL", type: "BigInt")
  born_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GT", type: "BigInt")
  born_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GTE", type: "BigInt")
  born_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LT", type: "BigInt")
  born_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LTE", type: "BigInt")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_EQUAL", type: "BigInt")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MAX_EQUAL", type: "BigInt")
  born_MAX_GT: BigInt @source(subgraph: "Movies", name: "born_MAX_GT", type: "BigInt")
  born_MAX_GTE: BigInt @source(subgraph: "Movies", name: "born_MAX_GTE", type: "BigInt")
  born_MAX_LT: BigInt @source(subgraph: "Movies", name: "born_MAX_LT", type: "BigInt")
  born_MAX_LTE: BigInt @source(subgraph: "Movies", name: "born_MAX_LTE", type: "BigInt")
  born_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MIN_EQUAL", type: "BigInt")
  born_MIN_GT: BigInt @source(subgraph: "Movies", name: "born_MIN_GT", type: "BigInt")
  born_MIN_GTE: BigInt @source(subgraph: "Movies", name: "born_MIN_GTE", type: "BigInt")
  born_MIN_LT: BigInt @source(subgraph: "Movies", name: "born_MIN_LT", type: "BigInt")
  born_MIN_LTE: BigInt @source(subgraph: "Movies", name: "born_MIN_LTE", type: "BigInt")
  born_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "born_SUM_EQUAL", type: "BigInt")
  born_SUM_GT: BigInt @source(subgraph: "Movies", name: "born_SUM_GT", type: "BigInt")
  born_SUM_GTE: BigInt @source(subgraph: "Movies", name: "born_SUM_GTE", type: "BigInt")
  born_SUM_LT: BigInt @source(subgraph: "Movies", name: "born_SUM_LT", type: "BigInt")
  born_SUM_LTE: BigInt @source(subgraph: "Movies", name: "born_SUM_LTE", type: "BigInt")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_EQUAL", type: "Float")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GT", type: "Float")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GTE", type: "Float")
  name_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_EQUAL", type: "Float")
  name_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GT", type: "Float")
  name_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GTE", type: "Float")
  name_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LT", type: "Float")
  name_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LTE", type: "Float")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LT", type: "Float")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LTE", type: "Float")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_EQUAL", type: "String")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GT", type: "Int")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GTE", type: "Int")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_EQUAL", type: "Int")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GT", type: "Int")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GTE", type: "Int")
  name_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_EQUAL", type: "Int")
  name_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GT", type: "Int")
  name_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GTE", type: "Int")
  name_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LT", type: "Int")
  name_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LTE", type: "Int")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LT", type: "Int")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LTE", type: "Int")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LT", type: "Int")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LTE", type: "Int")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_EQUAL", type: "Int")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GT", type: "Int")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GTE", type: "Int")
  name_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_EQUAL", type: "Int")
  name_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GT", type: "Int")
  name_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GTE", type: "Int")
  name_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LT", type: "Int")
  name_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LTE", type: "Int")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LT", type: "Int")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LTE", type: "Int")
}

type MoviePeopleProducedRelationship @source(subgraph: "Movies", name: "MoviePeopleProducedRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
}

input MoviePeopleProducedUpdateConnectionInput @source(subgraph: "Movies", name: "MoviePeopleProducedUpdateConnectionInput") {
  node: PersonUpdateInput @source(subgraph: "Movies", name: "node", type: "PersonUpdateInput")
}

input MoviePeopleProducedUpdateFieldInput @source(subgraph: "Movies", name: "MoviePeopleProducedUpdateFieldInput") {
  connect: [MoviePeopleProducedConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleProducedConnectFieldInput!]")
  create: [MoviePeopleProducedCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleProducedCreateFieldInput!]")
  delete: [MoviePeopleProducedDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[MoviePeopleProducedDeleteFieldInput!]")
  disconnect: [MoviePeopleProducedDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[MoviePeopleProducedDisconnectFieldInput!]")
  update: MoviePeopleProducedUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "MoviePeopleProducedUpdateConnectionInput")
  where: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleProducedConnectionWhere")
}

input MoviePeopleReviewedAggregateInput @source(subgraph: "Movies", name: "MoviePeopleReviewedAggregateInput") {
  AND: [MoviePeopleReviewedAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleReviewedAggregateInput!]")
  NOT: MoviePeopleReviewedAggregateInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleReviewedAggregateInput")
  OR: [MoviePeopleReviewedAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleReviewedAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  edge: ReviewedPropertiesAggregationWhereInput @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesAggregationWhereInput")
  node: MoviePeopleReviewedNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "MoviePeopleReviewedNodeAggregationWhereInput")
}

input MoviePeopleReviewedConnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleReviewedConnectFieldInput") {
  connect: [PersonConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonConnectInput!]")
  edge: ReviewedPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesCreateInput!")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: PersonConnectWhere @source(subgraph: "Movies", name: "where", type: "PersonConnectWhere")
}

type MoviePeopleReviewedConnection @source(subgraph: "Movies", name: "MoviePeopleReviewedConnection") {
  edges: [MoviePeopleReviewedRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[MoviePeopleReviewedRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input MoviePeopleReviewedConnectionSort @source(subgraph: "Movies", name: "MoviePeopleReviewedConnectionSort") {
  edge: ReviewedPropertiesSort @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesSort")
  node: PersonSort @source(subgraph: "Movies", name: "node", type: "PersonSort")
}

input MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "MoviePeopleReviewedConnectionWhere") {
  AND: [MoviePeopleReviewedConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleReviewedConnectionWhere!]")
  NOT: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleReviewedConnectionWhere")
  OR: [MoviePeopleReviewedConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleReviewedConnectionWhere!]")
  edge: ReviewedPropertiesWhere @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesWhere")
  edge_NOT: ReviewedPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "edge_NOT", type: "ReviewedPropertiesWhere")
  node: PersonWhere @source(subgraph: "Movies", name: "node", type: "PersonWhere")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "PersonWhere")
}

input MoviePeopleReviewedCreateFieldInput @source(subgraph: "Movies", name: "MoviePeopleReviewedCreateFieldInput") {
  edge: ReviewedPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesCreateInput!")
  node: PersonCreateInput! @source(subgraph: "Movies", name: "node", type: "PersonCreateInput!")
}

input MoviePeopleReviewedDeleteFieldInput @source(subgraph: "Movies", name: "MoviePeopleReviewedDeleteFieldInput") {
  delete: PersonDeleteInput @source(subgraph: "Movies", name: "delete", type: "PersonDeleteInput")
  where: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleReviewedConnectionWhere")
}

input MoviePeopleReviewedDisconnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleReviewedDisconnectFieldInput") {
  disconnect: PersonDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "PersonDisconnectInput")
  where: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleReviewedConnectionWhere")
}

input MoviePeopleReviewedFieldInput @source(subgraph: "Movies", name: "MoviePeopleReviewedFieldInput") {
  connect: [MoviePeopleReviewedConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleReviewedConnectFieldInput!]")
  create: [MoviePeopleReviewedCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleReviewedCreateFieldInput!]")
}

input MoviePeopleReviewedNodeAggregationWhereInput @source(subgraph: "Movies", name: "MoviePeopleReviewedNodeAggregationWhereInput") {
  AND: [MoviePeopleReviewedNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleReviewedNodeAggregationWhereInput!]")
  NOT: MoviePeopleReviewedNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleReviewedNodeAggregationWhereInput")
  OR: [MoviePeopleReviewedNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleReviewedNodeAggregationWhereInput!]")
  born_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_EQUAL", type: "BigInt")
  born_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GT", type: "BigInt")
  born_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GTE", type: "BigInt")
  born_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LT", type: "BigInt")
  born_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LTE", type: "BigInt")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_EQUAL", type: "BigInt")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MAX_EQUAL", type: "BigInt")
  born_MAX_GT: BigInt @source(subgraph: "Movies", name: "born_MAX_GT", type: "BigInt")
  born_MAX_GTE: BigInt @source(subgraph: "Movies", name: "born_MAX_GTE", type: "BigInt")
  born_MAX_LT: BigInt @source(subgraph: "Movies", name: "born_MAX_LT", type: "BigInt")
  born_MAX_LTE: BigInt @source(subgraph: "Movies", name: "born_MAX_LTE", type: "BigInt")
  born_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MIN_EQUAL", type: "BigInt")
  born_MIN_GT: BigInt @source(subgraph: "Movies", name: "born_MIN_GT", type: "BigInt")
  born_MIN_GTE: BigInt @source(subgraph: "Movies", name: "born_MIN_GTE", type: "BigInt")
  born_MIN_LT: BigInt @source(subgraph: "Movies", name: "born_MIN_LT", type: "BigInt")
  born_MIN_LTE: BigInt @source(subgraph: "Movies", name: "born_MIN_LTE", type: "BigInt")
  born_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "born_SUM_EQUAL", type: "BigInt")
  born_SUM_GT: BigInt @source(subgraph: "Movies", name: "born_SUM_GT", type: "BigInt")
  born_SUM_GTE: BigInt @source(subgraph: "Movies", name: "born_SUM_GTE", type: "BigInt")
  born_SUM_LT: BigInt @source(subgraph: "Movies", name: "born_SUM_LT", type: "BigInt")
  born_SUM_LTE: BigInt @source(subgraph: "Movies", name: "born_SUM_LTE", type: "BigInt")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_EQUAL", type: "Float")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GT", type: "Float")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GTE", type: "Float")
  name_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_EQUAL", type: "Float")
  name_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GT", type: "Float")
  name_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GTE", type: "Float")
  name_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LT", type: "Float")
  name_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LTE", type: "Float")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LT", type: "Float")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LTE", type: "Float")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_EQUAL", type: "String")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GT", type: "Int")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GTE", type: "Int")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_EQUAL", type: "Int")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GT", type: "Int")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GTE", type: "Int")
  name_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_EQUAL", type: "Int")
  name_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GT", type: "Int")
  name_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GTE", type: "Int")
  name_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LT", type: "Int")
  name_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LTE", type: "Int")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LT", type: "Int")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LTE", type: "Int")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LT", type: "Int")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LTE", type: "Int")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_EQUAL", type: "Int")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GT", type: "Int")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GTE", type: "Int")
  name_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_EQUAL", type: "Int")
  name_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GT", type: "Int")
  name_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GTE", type: "Int")
  name_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LT", type: "Int")
  name_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LTE", type: "Int")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LT", type: "Int")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LTE", type: "Int")
}

type MoviePeopleReviewedRelationship @source(subgraph: "Movies", name: "MoviePeopleReviewedRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
  properties: ReviewedProperties! @source(subgraph: "Movies", name: "properties", type: "ReviewedProperties!")
}

input MoviePeopleReviewedUpdateConnectionInput @source(subgraph: "Movies", name: "MoviePeopleReviewedUpdateConnectionInput") {
  edge: ReviewedPropertiesUpdateInput @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesUpdateInput")
  node: PersonUpdateInput @source(subgraph: "Movies", name: "node", type: "PersonUpdateInput")
}

input MoviePeopleReviewedUpdateFieldInput @source(subgraph: "Movies", name: "MoviePeopleReviewedUpdateFieldInput") {
  connect: [MoviePeopleReviewedConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleReviewedConnectFieldInput!]")
  create: [MoviePeopleReviewedCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleReviewedCreateFieldInput!]")
  delete: [MoviePeopleReviewedDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[MoviePeopleReviewedDeleteFieldInput!]")
  disconnect: [MoviePeopleReviewedDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[MoviePeopleReviewedDisconnectFieldInput!]")
  update: MoviePeopleReviewedUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "MoviePeopleReviewedUpdateConnectionInput")
  where: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleReviewedConnectionWhere")
}

input MoviePeopleWroteAggregateInput @source(subgraph: "Movies", name: "MoviePeopleWroteAggregateInput") {
  AND: [MoviePeopleWroteAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleWroteAggregateInput!]")
  NOT: MoviePeopleWroteAggregateInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleWroteAggregateInput")
  OR: [MoviePeopleWroteAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleWroteAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: MoviePeopleWroteNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "MoviePeopleWroteNodeAggregationWhereInput")
}

input MoviePeopleWroteConnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleWroteConnectFieldInput") {
  connect: [PersonConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: PersonConnectWhere @source(subgraph: "Movies", name: "where", type: "PersonConnectWhere")
}

type MoviePeopleWroteConnection @source(subgraph: "Movies", name: "MoviePeopleWroteConnection") {
  edges: [MoviePeopleWroteRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[MoviePeopleWroteRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input MoviePeopleWroteConnectionSort @source(subgraph: "Movies", name: "MoviePeopleWroteConnectionSort") {
  node: PersonSort @source(subgraph: "Movies", name: "node", type: "PersonSort")
}

input MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "MoviePeopleWroteConnectionWhere") {
  AND: [MoviePeopleWroteConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleWroteConnectionWhere!]")
  NOT: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleWroteConnectionWhere")
  OR: [MoviePeopleWroteConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleWroteConnectionWhere!]")
  node: PersonWhere @source(subgraph: "Movies", name: "node", type: "PersonWhere")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "PersonWhere")
}

input MoviePeopleWroteCreateFieldInput @source(subgraph: "Movies", name: "MoviePeopleWroteCreateFieldInput") {
  node: PersonCreateInput! @source(subgraph: "Movies", name: "node", type: "PersonCreateInput!")
}

input MoviePeopleWroteDeleteFieldInput @source(subgraph: "Movies", name: "MoviePeopleWroteDeleteFieldInput") {
  delete: PersonDeleteInput @source(subgraph: "Movies", name: "delete", type: "PersonDeleteInput")
  where: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleWroteConnectionWhere")
}

input MoviePeopleWroteDisconnectFieldInput @source(subgraph: "Movies", name: "MoviePeopleWroteDisconnectFieldInput") {
  disconnect: PersonDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "PersonDisconnectInput")
  where: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleWroteConnectionWhere")
}

input MoviePeopleWroteFieldInput @source(subgraph: "Movies", name: "MoviePeopleWroteFieldInput") {
  connect: [MoviePeopleWroteConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleWroteConnectFieldInput!]")
  create: [MoviePeopleWroteCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleWroteCreateFieldInput!]")
}

input MoviePeopleWroteNodeAggregationWhereInput @source(subgraph: "Movies", name: "MoviePeopleWroteNodeAggregationWhereInput") {
  AND: [MoviePeopleWroteNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[MoviePeopleWroteNodeAggregationWhereInput!]")
  NOT: MoviePeopleWroteNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "MoviePeopleWroteNodeAggregationWhereInput")
  OR: [MoviePeopleWroteNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[MoviePeopleWroteNodeAggregationWhereInput!]")
  born_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_EQUAL", type: "BigInt")
  born_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GT", type: "BigInt")
  born_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GTE", type: "BigInt")
  born_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LT", type: "BigInt")
  born_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LTE", type: "BigInt")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_EQUAL", type: "BigInt")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MAX_EQUAL", type: "BigInt")
  born_MAX_GT: BigInt @source(subgraph: "Movies", name: "born_MAX_GT", type: "BigInt")
  born_MAX_GTE: BigInt @source(subgraph: "Movies", name: "born_MAX_GTE", type: "BigInt")
  born_MAX_LT: BigInt @source(subgraph: "Movies", name: "born_MAX_LT", type: "BigInt")
  born_MAX_LTE: BigInt @source(subgraph: "Movies", name: "born_MAX_LTE", type: "BigInt")
  born_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MIN_EQUAL", type: "BigInt")
  born_MIN_GT: BigInt @source(subgraph: "Movies", name: "born_MIN_GT", type: "BigInt")
  born_MIN_GTE: BigInt @source(subgraph: "Movies", name: "born_MIN_GTE", type: "BigInt")
  born_MIN_LT: BigInt @source(subgraph: "Movies", name: "born_MIN_LT", type: "BigInt")
  born_MIN_LTE: BigInt @source(subgraph: "Movies", name: "born_MIN_LTE", type: "BigInt")
  born_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "born_SUM_EQUAL", type: "BigInt")
  born_SUM_GT: BigInt @source(subgraph: "Movies", name: "born_SUM_GT", type: "BigInt")
  born_SUM_GTE: BigInt @source(subgraph: "Movies", name: "born_SUM_GTE", type: "BigInt")
  born_SUM_LT: BigInt @source(subgraph: "Movies", name: "born_SUM_LT", type: "BigInt")
  born_SUM_LTE: BigInt @source(subgraph: "Movies", name: "born_SUM_LTE", type: "BigInt")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_EQUAL", type: "Float")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GT", type: "Float")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GTE", type: "Float")
  name_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_EQUAL", type: "Float")
  name_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GT", type: "Float")
  name_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GTE", type: "Float")
  name_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LT", type: "Float")
  name_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LTE", type: "Float")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LT", type: "Float")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LTE", type: "Float")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_EQUAL", type: "String")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GT", type: "Int")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GTE", type: "Int")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_EQUAL", type: "Int")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GT", type: "Int")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GTE", type: "Int")
  name_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_EQUAL", type: "Int")
  name_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GT", type: "Int")
  name_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GTE", type: "Int")
  name_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LT", type: "Int")
  name_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LTE", type: "Int")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LT", type: "Int")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LTE", type: "Int")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LT", type: "Int")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LTE", type: "Int")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_EQUAL", type: "Int")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GT", type: "Int")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GTE", type: "Int")
  name_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_EQUAL", type: "Int")
  name_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GT", type: "Int")
  name_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GTE", type: "Int")
  name_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LT", type: "Int")
  name_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LTE", type: "Int")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LT", type: "Int")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LTE", type: "Int")
}

type MoviePeopleWroteRelationship @source(subgraph: "Movies", name: "MoviePeopleWroteRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
}

input MoviePeopleWroteUpdateConnectionInput @source(subgraph: "Movies", name: "MoviePeopleWroteUpdateConnectionInput") {
  node: PersonUpdateInput @source(subgraph: "Movies", name: "node", type: "PersonUpdateInput")
}

input MoviePeopleWroteUpdateFieldInput @source(subgraph: "Movies", name: "MoviePeopleWroteUpdateFieldInput") {
  connect: [MoviePeopleWroteConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[MoviePeopleWroteConnectFieldInput!]")
  create: [MoviePeopleWroteCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[MoviePeopleWroteCreateFieldInput!]")
  delete: [MoviePeopleWroteDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[MoviePeopleWroteDeleteFieldInput!]")
  disconnect: [MoviePeopleWroteDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[MoviePeopleWroteDisconnectFieldInput!]")
  update: MoviePeopleWroteUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "MoviePeopleWroteUpdateConnectionInput")
  where: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "where", type: "MoviePeopleWroteConnectionWhere")
}

type MoviePersonPeopleActedInAggregationSelection @source(subgraph: "Movies", name: "MoviePersonPeopleActedInAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: MoviePersonPeopleActedInNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "MoviePersonPeopleActedInNodeAggregateSelection")
}

type MoviePersonPeopleActedInNodeAggregateSelection @source(subgraph: "Movies", name: "MoviePersonPeopleActedInNodeAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

type MoviePersonPeopleDirectedAggregationSelection @source(subgraph: "Movies", name: "MoviePersonPeopleDirectedAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: MoviePersonPeopleDirectedNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "MoviePersonPeopleDirectedNodeAggregateSelection")
}

type MoviePersonPeopleDirectedNodeAggregateSelection @source(subgraph: "Movies", name: "MoviePersonPeopleDirectedNodeAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

type MoviePersonPeopleProducedAggregationSelection @source(subgraph: "Movies", name: "MoviePersonPeopleProducedAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: MoviePersonPeopleProducedNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "MoviePersonPeopleProducedNodeAggregateSelection")
}

type MoviePersonPeopleProducedNodeAggregateSelection @source(subgraph: "Movies", name: "MoviePersonPeopleProducedNodeAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

type MoviePersonPeopleReviewedAggregationSelection @source(subgraph: "Movies", name: "MoviePersonPeopleReviewedAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  edge: MoviePersonPeopleReviewedEdgeAggregateSelection @source(subgraph: "Movies", name: "edge", type: "MoviePersonPeopleReviewedEdgeAggregateSelection")
  node: MoviePersonPeopleReviewedNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "MoviePersonPeopleReviewedNodeAggregateSelection")
}

type MoviePersonPeopleReviewedEdgeAggregateSelection @source(subgraph: "Movies", name: "MoviePersonPeopleReviewedEdgeAggregateSelection") {
  rating: BigIntAggregateSelection! @source(subgraph: "Movies", name: "rating", type: "BigIntAggregateSelection!")
  summary: StringAggregateSelection! @source(subgraph: "Movies", name: "summary", type: "StringAggregateSelection!")
}

type MoviePersonPeopleReviewedNodeAggregateSelection @source(subgraph: "Movies", name: "MoviePersonPeopleReviewedNodeAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

type MoviePersonPeopleWroteAggregationSelection @source(subgraph: "Movies", name: "MoviePersonPeopleWroteAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: MoviePersonPeopleWroteNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "MoviePersonPeopleWroteNodeAggregateSelection")
}

type MoviePersonPeopleWroteNodeAggregateSelection @source(subgraph: "Movies", name: "MoviePersonPeopleWroteNodeAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

input MovieRelationInput @source(subgraph: "Movies", name: "MovieRelationInput") {
  peopleActedIn: [MoviePeopleActedInCreateFieldInput!] @source(subgraph: "Movies", name: "peopleActedIn", type: "[MoviePeopleActedInCreateFieldInput!]")
  peopleDirected: [MoviePeopleDirectedCreateFieldInput!] @source(subgraph: "Movies", name: "peopleDirected", type: "[MoviePeopleDirectedCreateFieldInput!]")
  peopleProduced: [MoviePeopleProducedCreateFieldInput!] @source(subgraph: "Movies", name: "peopleProduced", type: "[MoviePeopleProducedCreateFieldInput!]")
  peopleReviewed: [MoviePeopleReviewedCreateFieldInput!] @source(subgraph: "Movies", name: "peopleReviewed", type: "[MoviePeopleReviewedCreateFieldInput!]")
  peopleWrote: [MoviePeopleWroteCreateFieldInput!] @source(subgraph: "Movies", name: "peopleWrote", type: "[MoviePeopleWroteCreateFieldInput!]")
}

"""
Fields to sort Movies by. The order in which sorts are applied is not guaranteed when specifying many fields in one MovieSort object.
"""
input MovieSort @source(subgraph: "Movies", name: "MovieSort") {
  released: SortDirection @source(subgraph: "Movies", name: "released", type: "SortDirection")
  tagline: SortDirection @source(subgraph: "Movies", name: "tagline", type: "SortDirection")
  title: SortDirection @source(subgraph: "Movies", name: "title", type: "SortDirection")
  votes: SortDirection @source(subgraph: "Movies", name: "votes", type: "SortDirection")
}

input MovieUpdateInput @source(subgraph: "Movies", name: "MovieUpdateInput") {
  peopleActedIn: [MoviePeopleActedInUpdateFieldInput!] @source(subgraph: "Movies", name: "peopleActedIn", type: "[MoviePeopleActedInUpdateFieldInput!]")
  peopleDirected: [MoviePeopleDirectedUpdateFieldInput!] @source(subgraph: "Movies", name: "peopleDirected", type: "[MoviePeopleDirectedUpdateFieldInput!]")
  peopleProduced: [MoviePeopleProducedUpdateFieldInput!] @source(subgraph: "Movies", name: "peopleProduced", type: "[MoviePeopleProducedUpdateFieldInput!]")
  peopleReviewed: [MoviePeopleReviewedUpdateFieldInput!] @source(subgraph: "Movies", name: "peopleReviewed", type: "[MoviePeopleReviewedUpdateFieldInput!]")
  peopleWrote: [MoviePeopleWroteUpdateFieldInput!] @source(subgraph: "Movies", name: "peopleWrote", type: "[MoviePeopleWroteUpdateFieldInput!]")
  released: BigInt @source(subgraph: "Movies", name: "released", type: "BigInt")
  released_DECREMENT: BigInt @source(subgraph: "Movies", name: "released_DECREMENT", type: "BigInt")
  released_INCREMENT: BigInt @source(subgraph: "Movies", name: "released_INCREMENT", type: "BigInt")
  tagline: String @source(subgraph: "Movies", name: "tagline", type: "String")
  title: String @source(subgraph: "Movies", name: "title", type: "String")
  votes: BigInt @source(subgraph: "Movies", name: "votes", type: "BigInt")
  votes_DECREMENT: BigInt @source(subgraph: "Movies", name: "votes_DECREMENT", type: "BigInt")
  votes_INCREMENT: BigInt @source(subgraph: "Movies", name: "votes_INCREMENT", type: "BigInt")
}

input MovieWhere @source(subgraph: "Movies", name: "MovieWhere") {
  AND: [MovieWhere!] @source(subgraph: "Movies", name: "AND", type: "[MovieWhere!]")
  NOT: MovieWhere @source(subgraph: "Movies", name: "NOT", type: "MovieWhere")
  OR: [MovieWhere!] @source(subgraph: "Movies", name: "OR", type: "[MovieWhere!]")
  peopleActedIn: PersonWhere @deprecated(reason: "Use \`peopleActedIn_SOME\` instead.") @source(subgraph: "Movies", name: "peopleActedIn", type: "PersonWhere")
  peopleActedInAggregate: MoviePeopleActedInAggregateInput @source(subgraph: "Movies", name: "peopleActedInAggregate", type: "MoviePeopleActedInAggregateInput")
  peopleActedInConnection: MoviePeopleActedInConnectionWhere @deprecated(reason: "Use \`peopleActedInConnection_SOME\` instead.") @source(subgraph: "Movies", name: "peopleActedInConnection", type: "MoviePeopleActedInConnectionWhere")
  """
  Return Movies where all of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_ALL: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "peopleActedInConnection_ALL", type: "MoviePeopleActedInConnectionWhere")
  """
  Return Movies where none of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_NONE: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "peopleActedInConnection_NONE", type: "MoviePeopleActedInConnectionWhere")
  peopleActedInConnection_NOT: MoviePeopleActedInConnectionWhere @deprecated(reason: "Use \`peopleActedInConnection_NONE\` instead.") @source(subgraph: "Movies", name: "peopleActedInConnection_NOT", type: "MoviePeopleActedInConnectionWhere")
  """
  Return Movies where one of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SINGLE: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "peopleActedInConnection_SINGLE", type: "MoviePeopleActedInConnectionWhere")
  """
  Return Movies where some of the related MoviePeopleActedInConnections match this filter
  """
  peopleActedInConnection_SOME: MoviePeopleActedInConnectionWhere @source(subgraph: "Movies", name: "peopleActedInConnection_SOME", type: "MoviePeopleActedInConnectionWhere")
  """Return Movies where all of the related People match this filter"""
  peopleActedIn_ALL: PersonWhere @source(subgraph: "Movies", name: "peopleActedIn_ALL", type: "PersonWhere")
  """Return Movies where none of the related People match this filter"""
  peopleActedIn_NONE: PersonWhere @source(subgraph: "Movies", name: "peopleActedIn_NONE", type: "PersonWhere")
  peopleActedIn_NOT: PersonWhere @deprecated(reason: "Use \`peopleActedIn_NONE\` instead.") @source(subgraph: "Movies", name: "peopleActedIn_NOT", type: "PersonWhere")
  """Return Movies where one of the related People match this filter"""
  peopleActedIn_SINGLE: PersonWhere @source(subgraph: "Movies", name: "peopleActedIn_SINGLE", type: "PersonWhere")
  """Return Movies where some of the related People match this filter"""
  peopleActedIn_SOME: PersonWhere @source(subgraph: "Movies", name: "peopleActedIn_SOME", type: "PersonWhere")
  peopleDirected: PersonWhere @deprecated(reason: "Use \`peopleDirected_SOME\` instead.") @source(subgraph: "Movies", name: "peopleDirected", type: "PersonWhere")
  peopleDirectedAggregate: MoviePeopleDirectedAggregateInput @source(subgraph: "Movies", name: "peopleDirectedAggregate", type: "MoviePeopleDirectedAggregateInput")
  peopleDirectedConnection: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Use \`peopleDirectedConnection_SOME\` instead.") @source(subgraph: "Movies", name: "peopleDirectedConnection", type: "MoviePeopleDirectedConnectionWhere")
  """
  Return Movies where all of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_ALL: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "peopleDirectedConnection_ALL", type: "MoviePeopleDirectedConnectionWhere")
  """
  Return Movies where none of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_NONE: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "peopleDirectedConnection_NONE", type: "MoviePeopleDirectedConnectionWhere")
  peopleDirectedConnection_NOT: MoviePeopleDirectedConnectionWhere @deprecated(reason: "Use \`peopleDirectedConnection_NONE\` instead.") @source(subgraph: "Movies", name: "peopleDirectedConnection_NOT", type: "MoviePeopleDirectedConnectionWhere")
  """
  Return Movies where one of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SINGLE: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "peopleDirectedConnection_SINGLE", type: "MoviePeopleDirectedConnectionWhere")
  """
  Return Movies where some of the related MoviePeopleDirectedConnections match this filter
  """
  peopleDirectedConnection_SOME: MoviePeopleDirectedConnectionWhere @source(subgraph: "Movies", name: "peopleDirectedConnection_SOME", type: "MoviePeopleDirectedConnectionWhere")
  """Return Movies where all of the related People match this filter"""
  peopleDirected_ALL: PersonWhere @source(subgraph: "Movies", name: "peopleDirected_ALL", type: "PersonWhere")
  """Return Movies where none of the related People match this filter"""
  peopleDirected_NONE: PersonWhere @source(subgraph: "Movies", name: "peopleDirected_NONE", type: "PersonWhere")
  peopleDirected_NOT: PersonWhere @deprecated(reason: "Use \`peopleDirected_NONE\` instead.") @source(subgraph: "Movies", name: "peopleDirected_NOT", type: "PersonWhere")
  """Return Movies where one of the related People match this filter"""
  peopleDirected_SINGLE: PersonWhere @source(subgraph: "Movies", name: "peopleDirected_SINGLE", type: "PersonWhere")
  """Return Movies where some of the related People match this filter"""
  peopleDirected_SOME: PersonWhere @source(subgraph: "Movies", name: "peopleDirected_SOME", type: "PersonWhere")
  peopleProduced: PersonWhere @deprecated(reason: "Use \`peopleProduced_SOME\` instead.") @source(subgraph: "Movies", name: "peopleProduced", type: "PersonWhere")
  peopleProducedAggregate: MoviePeopleProducedAggregateInput @source(subgraph: "Movies", name: "peopleProducedAggregate", type: "MoviePeopleProducedAggregateInput")
  peopleProducedConnection: MoviePeopleProducedConnectionWhere @deprecated(reason: "Use \`peopleProducedConnection_SOME\` instead.") @source(subgraph: "Movies", name: "peopleProducedConnection", type: "MoviePeopleProducedConnectionWhere")
  """
  Return Movies where all of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_ALL: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "peopleProducedConnection_ALL", type: "MoviePeopleProducedConnectionWhere")
  """
  Return Movies where none of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_NONE: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "peopleProducedConnection_NONE", type: "MoviePeopleProducedConnectionWhere")
  peopleProducedConnection_NOT: MoviePeopleProducedConnectionWhere @deprecated(reason: "Use \`peopleProducedConnection_NONE\` instead.") @source(subgraph: "Movies", name: "peopleProducedConnection_NOT", type: "MoviePeopleProducedConnectionWhere")
  """
  Return Movies where one of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SINGLE: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "peopleProducedConnection_SINGLE", type: "MoviePeopleProducedConnectionWhere")
  """
  Return Movies where some of the related MoviePeopleProducedConnections match this filter
  """
  peopleProducedConnection_SOME: MoviePeopleProducedConnectionWhere @source(subgraph: "Movies", name: "peopleProducedConnection_SOME", type: "MoviePeopleProducedConnectionWhere")
  """Return Movies where all of the related People match this filter"""
  peopleProduced_ALL: PersonWhere @source(subgraph: "Movies", name: "peopleProduced_ALL", type: "PersonWhere")
  """Return Movies where none of the related People match this filter"""
  peopleProduced_NONE: PersonWhere @source(subgraph: "Movies", name: "peopleProduced_NONE", type: "PersonWhere")
  peopleProduced_NOT: PersonWhere @deprecated(reason: "Use \`peopleProduced_NONE\` instead.") @source(subgraph: "Movies", name: "peopleProduced_NOT", type: "PersonWhere")
  """Return Movies where one of the related People match this filter"""
  peopleProduced_SINGLE: PersonWhere @source(subgraph: "Movies", name: "peopleProduced_SINGLE", type: "PersonWhere")
  """Return Movies where some of the related People match this filter"""
  peopleProduced_SOME: PersonWhere @source(subgraph: "Movies", name: "peopleProduced_SOME", type: "PersonWhere")
  peopleReviewed: PersonWhere @deprecated(reason: "Use \`peopleReviewed_SOME\` instead.") @source(subgraph: "Movies", name: "peopleReviewed", type: "PersonWhere")
  peopleReviewedAggregate: MoviePeopleReviewedAggregateInput @source(subgraph: "Movies", name: "peopleReviewedAggregate", type: "MoviePeopleReviewedAggregateInput")
  peopleReviewedConnection: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Use \`peopleReviewedConnection_SOME\` instead.") @source(subgraph: "Movies", name: "peopleReviewedConnection", type: "MoviePeopleReviewedConnectionWhere")
  """
  Return Movies where all of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_ALL: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "peopleReviewedConnection_ALL", type: "MoviePeopleReviewedConnectionWhere")
  """
  Return Movies where none of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_NONE: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "peopleReviewedConnection_NONE", type: "MoviePeopleReviewedConnectionWhere")
  peopleReviewedConnection_NOT: MoviePeopleReviewedConnectionWhere @deprecated(reason: "Use \`peopleReviewedConnection_NONE\` instead.") @source(subgraph: "Movies", name: "peopleReviewedConnection_NOT", type: "MoviePeopleReviewedConnectionWhere")
  """
  Return Movies where one of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SINGLE: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "peopleReviewedConnection_SINGLE", type: "MoviePeopleReviewedConnectionWhere")
  """
  Return Movies where some of the related MoviePeopleReviewedConnections match this filter
  """
  peopleReviewedConnection_SOME: MoviePeopleReviewedConnectionWhere @source(subgraph: "Movies", name: "peopleReviewedConnection_SOME", type: "MoviePeopleReviewedConnectionWhere")
  """Return Movies where all of the related People match this filter"""
  peopleReviewed_ALL: PersonWhere @source(subgraph: "Movies", name: "peopleReviewed_ALL", type: "PersonWhere")
  """Return Movies where none of the related People match this filter"""
  peopleReviewed_NONE: PersonWhere @source(subgraph: "Movies", name: "peopleReviewed_NONE", type: "PersonWhere")
  peopleReviewed_NOT: PersonWhere @deprecated(reason: "Use \`peopleReviewed_NONE\` instead.") @source(subgraph: "Movies", name: "peopleReviewed_NOT", type: "PersonWhere")
  """Return Movies where one of the related People match this filter"""
  peopleReviewed_SINGLE: PersonWhere @source(subgraph: "Movies", name: "peopleReviewed_SINGLE", type: "PersonWhere")
  """Return Movies where some of the related People match this filter"""
  peopleReviewed_SOME: PersonWhere @source(subgraph: "Movies", name: "peopleReviewed_SOME", type: "PersonWhere")
  peopleWrote: PersonWhere @deprecated(reason: "Use \`peopleWrote_SOME\` instead.") @source(subgraph: "Movies", name: "peopleWrote", type: "PersonWhere")
  peopleWroteAggregate: MoviePeopleWroteAggregateInput @source(subgraph: "Movies", name: "peopleWroteAggregate", type: "MoviePeopleWroteAggregateInput")
  peopleWroteConnection: MoviePeopleWroteConnectionWhere @deprecated(reason: "Use \`peopleWroteConnection_SOME\` instead.") @source(subgraph: "Movies", name: "peopleWroteConnection", type: "MoviePeopleWroteConnectionWhere")
  """
  Return Movies where all of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_ALL: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "peopleWroteConnection_ALL", type: "MoviePeopleWroteConnectionWhere")
  """
  Return Movies where none of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_NONE: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "peopleWroteConnection_NONE", type: "MoviePeopleWroteConnectionWhere")
  peopleWroteConnection_NOT: MoviePeopleWroteConnectionWhere @deprecated(reason: "Use \`peopleWroteConnection_NONE\` instead.") @source(subgraph: "Movies", name: "peopleWroteConnection_NOT", type: "MoviePeopleWroteConnectionWhere")
  """
  Return Movies where one of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SINGLE: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "peopleWroteConnection_SINGLE", type: "MoviePeopleWroteConnectionWhere")
  """
  Return Movies where some of the related MoviePeopleWroteConnections match this filter
  """
  peopleWroteConnection_SOME: MoviePeopleWroteConnectionWhere @source(subgraph: "Movies", name: "peopleWroteConnection_SOME", type: "MoviePeopleWroteConnectionWhere")
  """Return Movies where all of the related People match this filter"""
  peopleWrote_ALL: PersonWhere @source(subgraph: "Movies", name: "peopleWrote_ALL", type: "PersonWhere")
  """Return Movies where none of the related People match this filter"""
  peopleWrote_NONE: PersonWhere @source(subgraph: "Movies", name: "peopleWrote_NONE", type: "PersonWhere")
  peopleWrote_NOT: PersonWhere @deprecated(reason: "Use \`peopleWrote_NONE\` instead.") @source(subgraph: "Movies", name: "peopleWrote_NOT", type: "PersonWhere")
  """Return Movies where one of the related People match this filter"""
  peopleWrote_SINGLE: PersonWhere @source(subgraph: "Movies", name: "peopleWrote_SINGLE", type: "PersonWhere")
  """Return Movies where some of the related People match this filter"""
  peopleWrote_SOME: PersonWhere @source(subgraph: "Movies", name: "peopleWrote_SOME", type: "PersonWhere")
  released: BigInt @source(subgraph: "Movies", name: "released", type: "BigInt")
  released_GT: BigInt @source(subgraph: "Movies", name: "released_GT", type: "BigInt")
  released_GTE: BigInt @source(subgraph: "Movies", name: "released_GTE", type: "BigInt")
  released_IN: [BigInt!] @source(subgraph: "Movies", name: "released_IN", type: "[BigInt!]")
  released_LT: BigInt @source(subgraph: "Movies", name: "released_LT", type: "BigInt")
  released_LTE: BigInt @source(subgraph: "Movies", name: "released_LTE", type: "BigInt")
  released_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "released_NOT", type: "BigInt")
  released_NOT_IN: [BigInt!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "released_NOT_IN", type: "[BigInt!]")
  tagline: String @source(subgraph: "Movies", name: "tagline", type: "String")
  tagline_CONTAINS: String @source(subgraph: "Movies", name: "tagline_CONTAINS", type: "String")
  tagline_ENDS_WITH: String @source(subgraph: "Movies", name: "tagline_ENDS_WITH", type: "String")
  tagline_IN: [String] @source(subgraph: "Movies", name: "tagline_IN", type: "[String]")
  tagline_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "tagline_NOT", type: "String")
  tagline_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "tagline_NOT_CONTAINS", type: "String")
  tagline_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "tagline_NOT_ENDS_WITH", type: "String")
  tagline_NOT_IN: [String] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "tagline_NOT_IN", type: "[String]")
  tagline_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "tagline_NOT_STARTS_WITH", type: "String")
  tagline_STARTS_WITH: String @source(subgraph: "Movies", name: "tagline_STARTS_WITH", type: "String")
  title: String @source(subgraph: "Movies", name: "title", type: "String")
  title_CONTAINS: String @source(subgraph: "Movies", name: "title_CONTAINS", type: "String")
  title_ENDS_WITH: String @source(subgraph: "Movies", name: "title_ENDS_WITH", type: "String")
  title_IN: [String!] @source(subgraph: "Movies", name: "title_IN", type: "[String!]")
  title_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "title_NOT", type: "String")
  title_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "title_NOT_CONTAINS", type: "String")
  title_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "title_NOT_ENDS_WITH", type: "String")
  title_NOT_IN: [String!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "title_NOT_IN", type: "[String!]")
  title_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "title_NOT_STARTS_WITH", type: "String")
  title_STARTS_WITH: String @source(subgraph: "Movies", name: "title_STARTS_WITH", type: "String")
  votes: BigInt @source(subgraph: "Movies", name: "votes", type: "BigInt")
  votes_GT: BigInt @source(subgraph: "Movies", name: "votes_GT", type: "BigInt")
  votes_GTE: BigInt @source(subgraph: "Movies", name: "votes_GTE", type: "BigInt")
  votes_IN: [BigInt!] @source(subgraph: "Movies", name: "votes_IN", type: "[BigInt!]")
  votes_LT: BigInt @source(subgraph: "Movies", name: "votes_LT", type: "BigInt")
  votes_LTE: BigInt @source(subgraph: "Movies", name: "votes_LTE", type: "BigInt")
  votes_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "votes_NOT", type: "BigInt")
  votes_NOT_IN: [BigInt!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "votes_NOT_IN", type: "[BigInt!]")
}

type MoviesConnection @source(subgraph: "Movies", name: "MoviesConnection") @resolver(subgraph: "Movies", operation: "query MoviesConnectionByTotalCount($MoviesConnection_totalCount: Int) { moviesConnection(first: $MoviesConnection_totalCount) }", kind: "FETCH") @variable(subgraph: "Movies", name: "MoviesConnection_totalCount", select: "totalCount") {
  edges: [MovieEdge!]! @source(subgraph: "Movies", name: "edges", type: "[MovieEdge!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

type Mutation {
  createMovies(input: [MovieCreateInput!]!): CreateMoviesMutationResponse! @resolver(subgraph: "Movies", operation: "mutation mutationcreateMovies($input: [MovieCreateInput!]!) { createMovies(input: $input) }") @source(subgraph: "Movies", name: "createMovies", type: "CreateMoviesMutationResponse!")
  createPeople(input: [PersonCreateInput!]!): CreatePeopleMutationResponse! @resolver(subgraph: "Movies", operation: "mutation mutationcreatePeople($input: [PersonCreateInput!]!) { createPeople(input: $input) }") @source(subgraph: "Movies", name: "createPeople", type: "CreatePeopleMutationResponse!")
  deleteMovies(delete: MovieDeleteInput, where: MovieWhere): DeleteInfo! @resolver(subgraph: "Movies", operation: "mutation mutationdeleteMovies($where: MovieWhere, $delete: MovieDeleteInput) { deleteMovies(where: $where, delete: $delete) }") @source(subgraph: "Movies", name: "deleteMovies", type: "DeleteInfo!")
  deletePeople(delete: PersonDeleteInput, where: PersonWhere): DeleteInfo! @resolver(subgraph: "Movies", operation: "mutation mutationdeletePeople($where: PersonWhere, $delete: PersonDeleteInput) { deletePeople(where: $where, delete: $delete) }") @source(subgraph: "Movies", name: "deletePeople", type: "DeleteInfo!")
  updateMovies(connect: MovieConnectInput, create: MovieRelationInput, delete: MovieDeleteInput, disconnect: MovieDisconnectInput, update: MovieUpdateInput, where: MovieWhere): UpdateMoviesMutationResponse! @resolver(subgraph: "Movies", operation: "mutation mutationupdateMovies($where: MovieWhere, $update: MovieUpdateInput, $connect: MovieConnectInput, $disconnect: MovieDisconnectInput, $create: MovieRelationInput, $delete: MovieDeleteInput) { updateMovies(where: $where, update: $update, connect: $connect, disconnect: $disconnect, create: $create, delete: $delete) }") @source(subgraph: "Movies", name: "updateMovies", type: "UpdateMoviesMutationResponse!")
  updatePeople(connect: PersonConnectInput, create: PersonRelationInput, delete: PersonDeleteInput, disconnect: PersonDisconnectInput, update: PersonUpdateInput, where: PersonWhere): UpdatePeopleMutationResponse! @resolver(subgraph: "Movies", operation: "mutation mutationupdatePeople($where: PersonWhere, $update: PersonUpdateInput, $connect: PersonConnectInput, $disconnect: PersonDisconnectInput, $create: PersonRelationInput, $delete: PersonDeleteInput) { updatePeople(where: $where, update: $update, connect: $connect, disconnect: $disconnect, create: $create, delete: $delete) }") @source(subgraph: "Movies", name: "updatePeople", type: "UpdatePeopleMutationResponse!")
}

"""Pagination information (Relay)"""
type PageInfo @source(subgraph: "Movies", name: "PageInfo") {
  endCursor: String @source(subgraph: "Movies", name: "endCursor", type: "String")
  hasNextPage: Boolean! @source(subgraph: "Movies", name: "hasNextPage", type: "Boolean!")
  hasPreviousPage: Boolean! @source(subgraph: "Movies", name: "hasPreviousPage", type: "Boolean!")
  startCursor: String @source(subgraph: "Movies", name: "startCursor", type: "String")
}

type PeopleConnection @source(subgraph: "Movies", name: "PeopleConnection") @resolver(subgraph: "Movies", operation: "query PeopleConnectionByTotalCount($PeopleConnection_totalCount: Int) { peopleConnection(first: $PeopleConnection_totalCount) }", kind: "FETCH") @variable(subgraph: "Movies", name: "PeopleConnection_totalCount", select: "totalCount") {
  edges: [PersonEdge!]! @source(subgraph: "Movies", name: "edges", type: "[PersonEdge!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

type Person @introspection @source(subgraph: "Movies", name: "Person") {
  actedInMovies(directed: Boolean = true, options: MovieOptions, where: MovieWhere): [Movie!]! @introspection @relationship(direction: OUT, type: "ACTED_IN") @source(subgraph: "Movies", name: "actedInMovies", type: "[Movie!]!")
  actedInMoviesAggregate(directed: Boolean = true, where: MovieWhere): PersonMovieActedInMoviesAggregationSelection @source(subgraph: "Movies", name: "actedInMoviesAggregate", type: "PersonMovieActedInMoviesAggregationSelection")
  actedInMoviesConnection(after: String, directed: Boolean = true, first: Int, sort: [PersonActedInMoviesConnectionSort!], where: PersonActedInMoviesConnectionWhere): PersonActedInMoviesConnection! @source(subgraph: "Movies", name: "actedInMoviesConnection", type: "PersonActedInMoviesConnection!")
  born: BigInt @introspection @source(subgraph: "Movies", name: "born", type: "BigInt")
  directedMovies(directed: Boolean = true, options: MovieOptions, where: MovieWhere): [Movie!]! @introspection @relationship(direction: OUT, type: "DIRECTED") @source(subgraph: "Movies", name: "directedMovies", type: "[Movie!]!")
  directedMoviesAggregate(directed: Boolean = true, where: MovieWhere): PersonMovieDirectedMoviesAggregationSelection @source(subgraph: "Movies", name: "directedMoviesAggregate", type: "PersonMovieDirectedMoviesAggregationSelection")
  directedMoviesConnection(after: String, directed: Boolean = true, first: Int, sort: [PersonDirectedMoviesConnectionSort!], where: PersonDirectedMoviesConnectionWhere): PersonDirectedMoviesConnection! @source(subgraph: "Movies", name: "directedMoviesConnection", type: "PersonDirectedMoviesConnection!")
  followsPeople(directed: Boolean = true, options: PersonOptions, where: PersonWhere): [Person!]! @introspection @relationship(direction: OUT, type: "FOLLOWS") @source(subgraph: "Movies", name: "followsPeople", type: "[Person!]!")
  followsPeopleAggregate(directed: Boolean = true, where: PersonWhere): PersonPersonFollowsPeopleAggregationSelection @source(subgraph: "Movies", name: "followsPeopleAggregate", type: "PersonPersonFollowsPeopleAggregationSelection")
  followsPeopleConnection(after: String, directed: Boolean = true, first: Int, sort: [PersonFollowsPeopleConnectionSort!], where: PersonFollowsPeopleConnectionWhere): PersonFollowsPeopleConnection! @source(subgraph: "Movies", name: "followsPeopleConnection", type: "PersonFollowsPeopleConnection!")
  name: String! @introspection @source(subgraph: "Movies", name: "name", type: "String!")
  peopleFollows(directed: Boolean = true, options: PersonOptions, where: PersonWhere): [Person!]! @introspection @relationship(direction: IN, type: "FOLLOWS") @source(subgraph: "Movies", name: "peopleFollows", type: "[Person!]!")
  peopleFollowsAggregate(directed: Boolean = true, where: PersonWhere): PersonPersonPeopleFollowsAggregationSelection @source(subgraph: "Movies", name: "peopleFollowsAggregate", type: "PersonPersonPeopleFollowsAggregationSelection")
  peopleFollowsConnection(after: String, directed: Boolean = true, first: Int, sort: [PersonPeopleFollowsConnectionSort!], where: PersonPeopleFollowsConnectionWhere): PersonPeopleFollowsConnection! @source(subgraph: "Movies", name: "peopleFollowsConnection", type: "PersonPeopleFollowsConnection!")
  producedMovies(directed: Boolean = true, options: MovieOptions, where: MovieWhere): [Movie!]! @introspection @relationship(direction: OUT, type: "PRODUCED") @source(subgraph: "Movies", name: "producedMovies", type: "[Movie!]!")
  producedMoviesAggregate(directed: Boolean = true, where: MovieWhere): PersonMovieProducedMoviesAggregationSelection @source(subgraph: "Movies", name: "producedMoviesAggregate", type: "PersonMovieProducedMoviesAggregationSelection")
  producedMoviesConnection(after: String, directed: Boolean = true, first: Int, sort: [PersonProducedMoviesConnectionSort!], where: PersonProducedMoviesConnectionWhere): PersonProducedMoviesConnection! @source(subgraph: "Movies", name: "producedMoviesConnection", type: "PersonProducedMoviesConnection!")
  reviewedMovies(directed: Boolean = true, options: MovieOptions, where: MovieWhere): [Movie!]! @introspection @relationship(direction: OUT, type: "REVIEWED") @source(subgraph: "Movies", name: "reviewedMovies", type: "[Movie!]!")
  reviewedMoviesAggregate(directed: Boolean = true, where: MovieWhere): PersonMovieReviewedMoviesAggregationSelection @source(subgraph: "Movies", name: "reviewedMoviesAggregate", type: "PersonMovieReviewedMoviesAggregationSelection")
  reviewedMoviesConnection(after: String, directed: Boolean = true, first: Int, sort: [PersonReviewedMoviesConnectionSort!], where: PersonReviewedMoviesConnectionWhere): PersonReviewedMoviesConnection! @source(subgraph: "Movies", name: "reviewedMoviesConnection", type: "PersonReviewedMoviesConnection!")
  wroteMovies(directed: Boolean = true, options: MovieOptions, where: MovieWhere): [Movie!]! @introspection @relationship(direction: OUT, type: "WROTE") @source(subgraph: "Movies", name: "wroteMovies", type: "[Movie!]!")
  wroteMoviesAggregate(directed: Boolean = true, where: MovieWhere): PersonMovieWroteMoviesAggregationSelection @source(subgraph: "Movies", name: "wroteMoviesAggregate", type: "PersonMovieWroteMoviesAggregationSelection")
  wroteMoviesConnection(after: String, directed: Boolean = true, first: Int, sort: [PersonWroteMoviesConnectionSort!], where: PersonWroteMoviesConnectionWhere): PersonWroteMoviesConnection! @source(subgraph: "Movies", name: "wroteMoviesConnection", type: "PersonWroteMoviesConnection!")
}

input PersonActedInMoviesAggregateInput @source(subgraph: "Movies", name: "PersonActedInMoviesAggregateInput") {
  AND: [PersonActedInMoviesAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonActedInMoviesAggregateInput!]")
  NOT: PersonActedInMoviesAggregateInput @source(subgraph: "Movies", name: "NOT", type: "PersonActedInMoviesAggregateInput")
  OR: [PersonActedInMoviesAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonActedInMoviesAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: PersonActedInMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "PersonActedInMoviesNodeAggregationWhereInput")
}

input PersonActedInMoviesConnectFieldInput @source(subgraph: "Movies", name: "PersonActedInMoviesConnectFieldInput") {
  connect: [MovieConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[MovieConnectInput!]")
  edge: ActedInPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesCreateInput!")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: MovieConnectWhere @source(subgraph: "Movies", name: "where", type: "MovieConnectWhere")
}

type PersonActedInMoviesConnection @source(subgraph: "Movies", name: "PersonActedInMoviesConnection") {
  edges: [PersonActedInMoviesRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[PersonActedInMoviesRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input PersonActedInMoviesConnectionSort @source(subgraph: "Movies", name: "PersonActedInMoviesConnectionSort") {
  edge: ActedInPropertiesSort @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesSort")
  node: MovieSort @source(subgraph: "Movies", name: "node", type: "MovieSort")
}

input PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "PersonActedInMoviesConnectionWhere") {
  AND: [PersonActedInMoviesConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonActedInMoviesConnectionWhere!]")
  NOT: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "PersonActedInMoviesConnectionWhere")
  OR: [PersonActedInMoviesConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonActedInMoviesConnectionWhere!]")
  edge: ActedInPropertiesWhere @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesWhere")
  edge_NOT: ActedInPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "edge_NOT", type: "ActedInPropertiesWhere")
  node: MovieWhere @source(subgraph: "Movies", name: "node", type: "MovieWhere")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "MovieWhere")
}

input PersonActedInMoviesCreateFieldInput @source(subgraph: "Movies", name: "PersonActedInMoviesCreateFieldInput") {
  edge: ActedInPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesCreateInput!")
  node: MovieCreateInput! @source(subgraph: "Movies", name: "node", type: "MovieCreateInput!")
}

input PersonActedInMoviesDeleteFieldInput @source(subgraph: "Movies", name: "PersonActedInMoviesDeleteFieldInput") {
  delete: MovieDeleteInput @source(subgraph: "Movies", name: "delete", type: "MovieDeleteInput")
  where: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonActedInMoviesConnectionWhere")
}

input PersonActedInMoviesDisconnectFieldInput @source(subgraph: "Movies", name: "PersonActedInMoviesDisconnectFieldInput") {
  disconnect: MovieDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "MovieDisconnectInput")
  where: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonActedInMoviesConnectionWhere")
}

input PersonActedInMoviesFieldInput @source(subgraph: "Movies", name: "PersonActedInMoviesFieldInput") {
  connect: [PersonActedInMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonActedInMoviesConnectFieldInput!]")
  create: [PersonActedInMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonActedInMoviesCreateFieldInput!]")
}

input PersonActedInMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "PersonActedInMoviesNodeAggregationWhereInput") {
  AND: [PersonActedInMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonActedInMoviesNodeAggregationWhereInput!]")
  NOT: PersonActedInMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "PersonActedInMoviesNodeAggregationWhereInput")
  OR: [PersonActedInMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonActedInMoviesNodeAggregationWhereInput!]")
  released_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_EQUAL", type: "BigInt")
  released_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GT", type: "BigInt")
  released_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GTE", type: "BigInt")
  released_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LT", type: "BigInt")
  released_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LTE", type: "BigInt")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_EQUAL", type: "BigInt")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GT", type: "BigInt")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GTE", type: "BigInt")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LT", type: "BigInt")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LTE", type: "BigInt")
  released_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MAX_EQUAL", type: "BigInt")
  released_MAX_GT: BigInt @source(subgraph: "Movies", name: "released_MAX_GT", type: "BigInt")
  released_MAX_GTE: BigInt @source(subgraph: "Movies", name: "released_MAX_GTE", type: "BigInt")
  released_MAX_LT: BigInt @source(subgraph: "Movies", name: "released_MAX_LT", type: "BigInt")
  released_MAX_LTE: BigInt @source(subgraph: "Movies", name: "released_MAX_LTE", type: "BigInt")
  released_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MIN_EQUAL", type: "BigInt")
  released_MIN_GT: BigInt @source(subgraph: "Movies", name: "released_MIN_GT", type: "BigInt")
  released_MIN_GTE: BigInt @source(subgraph: "Movies", name: "released_MIN_GTE", type: "BigInt")
  released_MIN_LT: BigInt @source(subgraph: "Movies", name: "released_MIN_LT", type: "BigInt")
  released_MIN_LTE: BigInt @source(subgraph: "Movies", name: "released_MIN_LTE", type: "BigInt")
  released_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "released_SUM_EQUAL", type: "BigInt")
  released_SUM_GT: BigInt @source(subgraph: "Movies", name: "released_SUM_GT", type: "BigInt")
  released_SUM_GTE: BigInt @source(subgraph: "Movies", name: "released_SUM_GTE", type: "BigInt")
  released_SUM_LT: BigInt @source(subgraph: "Movies", name: "released_SUM_LT", type: "BigInt")
  released_SUM_LTE: BigInt @source(subgraph: "Movies", name: "released_SUM_LTE", type: "BigInt")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_EQUAL", type: "Float")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GT", type: "Float")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float")
  tagline_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GT", type: "Float")
  tagline_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LT", type: "Float")
  tagline_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LTE", type: "Float")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LT", type: "Float")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LTE", type: "Float")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_EQUAL", type: "String")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GT", type: "Int")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GTE", type: "Int")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_EQUAL", type: "Int")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GT", type: "Int")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GTE", type: "Int")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int")
  tagline_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GT", type: "Int")
  tagline_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GTE", type: "Int")
  tagline_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LT", type: "Int")
  tagline_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LTE", type: "Int")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LT", type: "Int")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LTE", type: "Int")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LT", type: "Int")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LTE", type: "Int")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_EQUAL", type: "Int")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GT", type: "Int")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int")
  tagline_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GT", type: "Int")
  tagline_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LT", type: "Int")
  tagline_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LTE", type: "Int")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LT", type: "Int")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LTE", type: "Int")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_EQUAL", type: "Float")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GT", type: "Float")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GTE", type: "Float")
  title_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_EQUAL", type: "Float")
  title_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GT", type: "Float")
  title_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GTE", type: "Float")
  title_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LT", type: "Float")
  title_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LTE", type: "Float")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LT", type: "Float")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LTE", type: "Float")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_EQUAL", type: "String")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GT", type: "Int")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GTE", type: "Int")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_EQUAL", type: "Int")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GT", type: "Int")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GTE", type: "Int")
  title_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_EQUAL", type: "Int")
  title_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GT", type: "Int")
  title_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GTE", type: "Int")
  title_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LT", type: "Int")
  title_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LTE", type: "Int")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LT", type: "Int")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LTE", type: "Int")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LT", type: "Int")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LTE", type: "Int")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_EQUAL", type: "Int")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GT", type: "Int")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GTE", type: "Int")
  title_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_EQUAL", type: "Int")
  title_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GT", type: "Int")
  title_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GTE", type: "Int")
  title_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LT", type: "Int")
  title_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LTE", type: "Int")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LT", type: "Int")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LTE", type: "Int")
  votes_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_EQUAL", type: "BigInt")
  votes_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GT", type: "BigInt")
  votes_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GTE", type: "BigInt")
  votes_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LT", type: "BigInt")
  votes_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LTE", type: "BigInt")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_EQUAL", type: "BigInt")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GT", type: "BigInt")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GTE", type: "BigInt")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LT", type: "BigInt")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LTE", type: "BigInt")
  votes_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MAX_EQUAL", type: "BigInt")
  votes_MAX_GT: BigInt @source(subgraph: "Movies", name: "votes_MAX_GT", type: "BigInt")
  votes_MAX_GTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_GTE", type: "BigInt")
  votes_MAX_LT: BigInt @source(subgraph: "Movies", name: "votes_MAX_LT", type: "BigInt")
  votes_MAX_LTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_LTE", type: "BigInt")
  votes_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MIN_EQUAL", type: "BigInt")
  votes_MIN_GT: BigInt @source(subgraph: "Movies", name: "votes_MIN_GT", type: "BigInt")
  votes_MIN_GTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_GTE", type: "BigInt")
  votes_MIN_LT: BigInt @source(subgraph: "Movies", name: "votes_MIN_LT", type: "BigInt")
  votes_MIN_LTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_LTE", type: "BigInt")
  votes_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_SUM_EQUAL", type: "BigInt")
  votes_SUM_GT: BigInt @source(subgraph: "Movies", name: "votes_SUM_GT", type: "BigInt")
  votes_SUM_GTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_GTE", type: "BigInt")
  votes_SUM_LT: BigInt @source(subgraph: "Movies", name: "votes_SUM_LT", type: "BigInt")
  votes_SUM_LTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_LTE", type: "BigInt")
}

type PersonActedInMoviesRelationship @source(subgraph: "Movies", name: "PersonActedInMoviesRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Movie! @source(subgraph: "Movies", name: "node", type: "Movie!")
  properties: ActedInProperties! @source(subgraph: "Movies", name: "properties", type: "ActedInProperties!")
}

input PersonActedInMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "PersonActedInMoviesUpdateConnectionInput") {
  edge: ActedInPropertiesUpdateInput @source(subgraph: "Movies", name: "edge", type: "ActedInPropertiesUpdateInput")
  node: MovieUpdateInput @source(subgraph: "Movies", name: "node", type: "MovieUpdateInput")
}

input PersonActedInMoviesUpdateFieldInput @source(subgraph: "Movies", name: "PersonActedInMoviesUpdateFieldInput") {
  connect: [PersonActedInMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonActedInMoviesConnectFieldInput!]")
  create: [PersonActedInMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonActedInMoviesCreateFieldInput!]")
  delete: [PersonActedInMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[PersonActedInMoviesDeleteFieldInput!]")
  disconnect: [PersonActedInMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[PersonActedInMoviesDisconnectFieldInput!]")
  update: PersonActedInMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "PersonActedInMoviesUpdateConnectionInput")
  where: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonActedInMoviesConnectionWhere")
}

type PersonAggregateSelection @source(subgraph: "Movies", name: "PersonAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

input PersonConnectInput @source(subgraph: "Movies", name: "PersonConnectInput") {
  actedInMovies: [PersonActedInMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "actedInMovies", type: "[PersonActedInMoviesConnectFieldInput!]")
  directedMovies: [PersonDirectedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "directedMovies", type: "[PersonDirectedMoviesConnectFieldInput!]")
  followsPeople: [PersonFollowsPeopleConnectFieldInput!] @source(subgraph: "Movies", name: "followsPeople", type: "[PersonFollowsPeopleConnectFieldInput!]")
  peopleFollows: [PersonPeopleFollowsConnectFieldInput!] @source(subgraph: "Movies", name: "peopleFollows", type: "[PersonPeopleFollowsConnectFieldInput!]")
  producedMovies: [PersonProducedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "producedMovies", type: "[PersonProducedMoviesConnectFieldInput!]")
  reviewedMovies: [PersonReviewedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "reviewedMovies", type: "[PersonReviewedMoviesConnectFieldInput!]")
  wroteMovies: [PersonWroteMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "wroteMovies", type: "[PersonWroteMoviesConnectFieldInput!]")
}

input PersonConnectWhere @source(subgraph: "Movies", name: "PersonConnectWhere") {
  node: PersonWhere! @source(subgraph: "Movies", name: "node", type: "PersonWhere!")
}

input PersonCreateInput @source(subgraph: "Movies", name: "PersonCreateInput") {
  actedInMovies: PersonActedInMoviesFieldInput @source(subgraph: "Movies", name: "actedInMovies", type: "PersonActedInMoviesFieldInput")
  born: BigInt @source(subgraph: "Movies", name: "born", type: "BigInt")
  directedMovies: PersonDirectedMoviesFieldInput @source(subgraph: "Movies", name: "directedMovies", type: "PersonDirectedMoviesFieldInput")
  followsPeople: PersonFollowsPeopleFieldInput @source(subgraph: "Movies", name: "followsPeople", type: "PersonFollowsPeopleFieldInput")
  name: String! @source(subgraph: "Movies", name: "name", type: "String!")
  peopleFollows: PersonPeopleFollowsFieldInput @source(subgraph: "Movies", name: "peopleFollows", type: "PersonPeopleFollowsFieldInput")
  producedMovies: PersonProducedMoviesFieldInput @source(subgraph: "Movies", name: "producedMovies", type: "PersonProducedMoviesFieldInput")
  reviewedMovies: PersonReviewedMoviesFieldInput @source(subgraph: "Movies", name: "reviewedMovies", type: "PersonReviewedMoviesFieldInput")
  wroteMovies: PersonWroteMoviesFieldInput @source(subgraph: "Movies", name: "wroteMovies", type: "PersonWroteMoviesFieldInput")
}

input PersonDeleteInput @source(subgraph: "Movies", name: "PersonDeleteInput") {
  actedInMovies: [PersonActedInMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "actedInMovies", type: "[PersonActedInMoviesDeleteFieldInput!]")
  directedMovies: [PersonDirectedMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "directedMovies", type: "[PersonDirectedMoviesDeleteFieldInput!]")
  followsPeople: [PersonFollowsPeopleDeleteFieldInput!] @source(subgraph: "Movies", name: "followsPeople", type: "[PersonFollowsPeopleDeleteFieldInput!]")
  peopleFollows: [PersonPeopleFollowsDeleteFieldInput!] @source(subgraph: "Movies", name: "peopleFollows", type: "[PersonPeopleFollowsDeleteFieldInput!]")
  producedMovies: [PersonProducedMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "producedMovies", type: "[PersonProducedMoviesDeleteFieldInput!]")
  reviewedMovies: [PersonReviewedMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "reviewedMovies", type: "[PersonReviewedMoviesDeleteFieldInput!]")
  wroteMovies: [PersonWroteMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "wroteMovies", type: "[PersonWroteMoviesDeleteFieldInput!]")
}

input PersonDirectedMoviesAggregateInput @source(subgraph: "Movies", name: "PersonDirectedMoviesAggregateInput") {
  AND: [PersonDirectedMoviesAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonDirectedMoviesAggregateInput!]")
  NOT: PersonDirectedMoviesAggregateInput @source(subgraph: "Movies", name: "NOT", type: "PersonDirectedMoviesAggregateInput")
  OR: [PersonDirectedMoviesAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonDirectedMoviesAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: PersonDirectedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "PersonDirectedMoviesNodeAggregationWhereInput")
}

input PersonDirectedMoviesConnectFieldInput @source(subgraph: "Movies", name: "PersonDirectedMoviesConnectFieldInput") {
  connect: [MovieConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[MovieConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: MovieConnectWhere @source(subgraph: "Movies", name: "where", type: "MovieConnectWhere")
}

type PersonDirectedMoviesConnection @source(subgraph: "Movies", name: "PersonDirectedMoviesConnection") {
  edges: [PersonDirectedMoviesRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[PersonDirectedMoviesRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input PersonDirectedMoviesConnectionSort @source(subgraph: "Movies", name: "PersonDirectedMoviesConnectionSort") {
  node: MovieSort @source(subgraph: "Movies", name: "node", type: "MovieSort")
}

input PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "PersonDirectedMoviesConnectionWhere") {
  AND: [PersonDirectedMoviesConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonDirectedMoviesConnectionWhere!]")
  NOT: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "PersonDirectedMoviesConnectionWhere")
  OR: [PersonDirectedMoviesConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonDirectedMoviesConnectionWhere!]")
  node: MovieWhere @source(subgraph: "Movies", name: "node", type: "MovieWhere")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "MovieWhere")
}

input PersonDirectedMoviesCreateFieldInput @source(subgraph: "Movies", name: "PersonDirectedMoviesCreateFieldInput") {
  node: MovieCreateInput! @source(subgraph: "Movies", name: "node", type: "MovieCreateInput!")
}

input PersonDirectedMoviesDeleteFieldInput @source(subgraph: "Movies", name: "PersonDirectedMoviesDeleteFieldInput") {
  delete: MovieDeleteInput @source(subgraph: "Movies", name: "delete", type: "MovieDeleteInput")
  where: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonDirectedMoviesConnectionWhere")
}

input PersonDirectedMoviesDisconnectFieldInput @source(subgraph: "Movies", name: "PersonDirectedMoviesDisconnectFieldInput") {
  disconnect: MovieDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "MovieDisconnectInput")
  where: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonDirectedMoviesConnectionWhere")
}

input PersonDirectedMoviesFieldInput @source(subgraph: "Movies", name: "PersonDirectedMoviesFieldInput") {
  connect: [PersonDirectedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonDirectedMoviesConnectFieldInput!]")
  create: [PersonDirectedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonDirectedMoviesCreateFieldInput!]")
}

input PersonDirectedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "PersonDirectedMoviesNodeAggregationWhereInput") {
  AND: [PersonDirectedMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonDirectedMoviesNodeAggregationWhereInput!]")
  NOT: PersonDirectedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "PersonDirectedMoviesNodeAggregationWhereInput")
  OR: [PersonDirectedMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonDirectedMoviesNodeAggregationWhereInput!]")
  released_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_EQUAL", type: "BigInt")
  released_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GT", type: "BigInt")
  released_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GTE", type: "BigInt")
  released_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LT", type: "BigInt")
  released_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LTE", type: "BigInt")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_EQUAL", type: "BigInt")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GT", type: "BigInt")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GTE", type: "BigInt")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LT", type: "BigInt")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LTE", type: "BigInt")
  released_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MAX_EQUAL", type: "BigInt")
  released_MAX_GT: BigInt @source(subgraph: "Movies", name: "released_MAX_GT", type: "BigInt")
  released_MAX_GTE: BigInt @source(subgraph: "Movies", name: "released_MAX_GTE", type: "BigInt")
  released_MAX_LT: BigInt @source(subgraph: "Movies", name: "released_MAX_LT", type: "BigInt")
  released_MAX_LTE: BigInt @source(subgraph: "Movies", name: "released_MAX_LTE", type: "BigInt")
  released_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MIN_EQUAL", type: "BigInt")
  released_MIN_GT: BigInt @source(subgraph: "Movies", name: "released_MIN_GT", type: "BigInt")
  released_MIN_GTE: BigInt @source(subgraph: "Movies", name: "released_MIN_GTE", type: "BigInt")
  released_MIN_LT: BigInt @source(subgraph: "Movies", name: "released_MIN_LT", type: "BigInt")
  released_MIN_LTE: BigInt @source(subgraph: "Movies", name: "released_MIN_LTE", type: "BigInt")
  released_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "released_SUM_EQUAL", type: "BigInt")
  released_SUM_GT: BigInt @source(subgraph: "Movies", name: "released_SUM_GT", type: "BigInt")
  released_SUM_GTE: BigInt @source(subgraph: "Movies", name: "released_SUM_GTE", type: "BigInt")
  released_SUM_LT: BigInt @source(subgraph: "Movies", name: "released_SUM_LT", type: "BigInt")
  released_SUM_LTE: BigInt @source(subgraph: "Movies", name: "released_SUM_LTE", type: "BigInt")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_EQUAL", type: "Float")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GT", type: "Float")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float")
  tagline_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GT", type: "Float")
  tagline_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LT", type: "Float")
  tagline_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LTE", type: "Float")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LT", type: "Float")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LTE", type: "Float")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_EQUAL", type: "String")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GT", type: "Int")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GTE", type: "Int")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_EQUAL", type: "Int")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GT", type: "Int")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GTE", type: "Int")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int")
  tagline_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GT", type: "Int")
  tagline_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GTE", type: "Int")
  tagline_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LT", type: "Int")
  tagline_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LTE", type: "Int")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LT", type: "Int")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LTE", type: "Int")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LT", type: "Int")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LTE", type: "Int")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_EQUAL", type: "Int")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GT", type: "Int")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int")
  tagline_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GT", type: "Int")
  tagline_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LT", type: "Int")
  tagline_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LTE", type: "Int")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LT", type: "Int")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LTE", type: "Int")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_EQUAL", type: "Float")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GT", type: "Float")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GTE", type: "Float")
  title_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_EQUAL", type: "Float")
  title_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GT", type: "Float")
  title_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GTE", type: "Float")
  title_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LT", type: "Float")
  title_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LTE", type: "Float")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LT", type: "Float")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LTE", type: "Float")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_EQUAL", type: "String")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GT", type: "Int")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GTE", type: "Int")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_EQUAL", type: "Int")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GT", type: "Int")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GTE", type: "Int")
  title_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_EQUAL", type: "Int")
  title_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GT", type: "Int")
  title_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GTE", type: "Int")
  title_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LT", type: "Int")
  title_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LTE", type: "Int")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LT", type: "Int")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LTE", type: "Int")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LT", type: "Int")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LTE", type: "Int")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_EQUAL", type: "Int")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GT", type: "Int")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GTE", type: "Int")
  title_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_EQUAL", type: "Int")
  title_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GT", type: "Int")
  title_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GTE", type: "Int")
  title_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LT", type: "Int")
  title_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LTE", type: "Int")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LT", type: "Int")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LTE", type: "Int")
  votes_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_EQUAL", type: "BigInt")
  votes_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GT", type: "BigInt")
  votes_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GTE", type: "BigInt")
  votes_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LT", type: "BigInt")
  votes_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LTE", type: "BigInt")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_EQUAL", type: "BigInt")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GT", type: "BigInt")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GTE", type: "BigInt")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LT", type: "BigInt")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LTE", type: "BigInt")
  votes_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MAX_EQUAL", type: "BigInt")
  votes_MAX_GT: BigInt @source(subgraph: "Movies", name: "votes_MAX_GT", type: "BigInt")
  votes_MAX_GTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_GTE", type: "BigInt")
  votes_MAX_LT: BigInt @source(subgraph: "Movies", name: "votes_MAX_LT", type: "BigInt")
  votes_MAX_LTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_LTE", type: "BigInt")
  votes_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MIN_EQUAL", type: "BigInt")
  votes_MIN_GT: BigInt @source(subgraph: "Movies", name: "votes_MIN_GT", type: "BigInt")
  votes_MIN_GTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_GTE", type: "BigInt")
  votes_MIN_LT: BigInt @source(subgraph: "Movies", name: "votes_MIN_LT", type: "BigInt")
  votes_MIN_LTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_LTE", type: "BigInt")
  votes_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_SUM_EQUAL", type: "BigInt")
  votes_SUM_GT: BigInt @source(subgraph: "Movies", name: "votes_SUM_GT", type: "BigInt")
  votes_SUM_GTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_GTE", type: "BigInt")
  votes_SUM_LT: BigInt @source(subgraph: "Movies", name: "votes_SUM_LT", type: "BigInt")
  votes_SUM_LTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_LTE", type: "BigInt")
}

type PersonDirectedMoviesRelationship @source(subgraph: "Movies", name: "PersonDirectedMoviesRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Movie! @source(subgraph: "Movies", name: "node", type: "Movie!")
}

input PersonDirectedMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "PersonDirectedMoviesUpdateConnectionInput") {
  node: MovieUpdateInput @source(subgraph: "Movies", name: "node", type: "MovieUpdateInput")
}

input PersonDirectedMoviesUpdateFieldInput @source(subgraph: "Movies", name: "PersonDirectedMoviesUpdateFieldInput") {
  connect: [PersonDirectedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonDirectedMoviesConnectFieldInput!]")
  create: [PersonDirectedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonDirectedMoviesCreateFieldInput!]")
  delete: [PersonDirectedMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[PersonDirectedMoviesDeleteFieldInput!]")
  disconnect: [PersonDirectedMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[PersonDirectedMoviesDisconnectFieldInput!]")
  update: PersonDirectedMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "PersonDirectedMoviesUpdateConnectionInput")
  where: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonDirectedMoviesConnectionWhere")
}

input PersonDisconnectInput @source(subgraph: "Movies", name: "PersonDisconnectInput") {
  actedInMovies: [PersonActedInMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "actedInMovies", type: "[PersonActedInMoviesDisconnectFieldInput!]")
  directedMovies: [PersonDirectedMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "directedMovies", type: "[PersonDirectedMoviesDisconnectFieldInput!]")
  followsPeople: [PersonFollowsPeopleDisconnectFieldInput!] @source(subgraph: "Movies", name: "followsPeople", type: "[PersonFollowsPeopleDisconnectFieldInput!]")
  peopleFollows: [PersonPeopleFollowsDisconnectFieldInput!] @source(subgraph: "Movies", name: "peopleFollows", type: "[PersonPeopleFollowsDisconnectFieldInput!]")
  producedMovies: [PersonProducedMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "producedMovies", type: "[PersonProducedMoviesDisconnectFieldInput!]")
  reviewedMovies: [PersonReviewedMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "reviewedMovies", type: "[PersonReviewedMoviesDisconnectFieldInput!]")
  wroteMovies: [PersonWroteMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "wroteMovies", type: "[PersonWroteMoviesDisconnectFieldInput!]")
}

type PersonEdge @source(subgraph: "Movies", name: "PersonEdge") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
}

input PersonFollowsPeopleAggregateInput @source(subgraph: "Movies", name: "PersonFollowsPeopleAggregateInput") {
  AND: [PersonFollowsPeopleAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonFollowsPeopleAggregateInput!]")
  NOT: PersonFollowsPeopleAggregateInput @source(subgraph: "Movies", name: "NOT", type: "PersonFollowsPeopleAggregateInput")
  OR: [PersonFollowsPeopleAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonFollowsPeopleAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: PersonFollowsPeopleNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "PersonFollowsPeopleNodeAggregationWhereInput")
}

input PersonFollowsPeopleConnectFieldInput @source(subgraph: "Movies", name: "PersonFollowsPeopleConnectFieldInput") {
  connect: [PersonConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: PersonConnectWhere @source(subgraph: "Movies", name: "where", type: "PersonConnectWhere")
}

type PersonFollowsPeopleConnection @source(subgraph: "Movies", name: "PersonFollowsPeopleConnection") {
  edges: [PersonFollowsPeopleRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[PersonFollowsPeopleRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input PersonFollowsPeopleConnectionSort @source(subgraph: "Movies", name: "PersonFollowsPeopleConnectionSort") {
  node: PersonSort @source(subgraph: "Movies", name: "node", type: "PersonSort")
}

input PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "PersonFollowsPeopleConnectionWhere") {
  AND: [PersonFollowsPeopleConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonFollowsPeopleConnectionWhere!]")
  NOT: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "PersonFollowsPeopleConnectionWhere")
  OR: [PersonFollowsPeopleConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonFollowsPeopleConnectionWhere!]")
  node: PersonWhere @source(subgraph: "Movies", name: "node", type: "PersonWhere")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "PersonWhere")
}

input PersonFollowsPeopleCreateFieldInput @source(subgraph: "Movies", name: "PersonFollowsPeopleCreateFieldInput") {
  node: PersonCreateInput! @source(subgraph: "Movies", name: "node", type: "PersonCreateInput!")
}

input PersonFollowsPeopleDeleteFieldInput @source(subgraph: "Movies", name: "PersonFollowsPeopleDeleteFieldInput") {
  delete: PersonDeleteInput @source(subgraph: "Movies", name: "delete", type: "PersonDeleteInput")
  where: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonFollowsPeopleConnectionWhere")
}

input PersonFollowsPeopleDisconnectFieldInput @source(subgraph: "Movies", name: "PersonFollowsPeopleDisconnectFieldInput") {
  disconnect: PersonDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "PersonDisconnectInput")
  where: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonFollowsPeopleConnectionWhere")
}

input PersonFollowsPeopleFieldInput @source(subgraph: "Movies", name: "PersonFollowsPeopleFieldInput") {
  connect: [PersonFollowsPeopleConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonFollowsPeopleConnectFieldInput!]")
  create: [PersonFollowsPeopleCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonFollowsPeopleCreateFieldInput!]")
}

input PersonFollowsPeopleNodeAggregationWhereInput @source(subgraph: "Movies", name: "PersonFollowsPeopleNodeAggregationWhereInput") {
  AND: [PersonFollowsPeopleNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonFollowsPeopleNodeAggregationWhereInput!]")
  NOT: PersonFollowsPeopleNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "PersonFollowsPeopleNodeAggregationWhereInput")
  OR: [PersonFollowsPeopleNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonFollowsPeopleNodeAggregationWhereInput!]")
  born_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_EQUAL", type: "BigInt")
  born_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GT", type: "BigInt")
  born_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GTE", type: "BigInt")
  born_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LT", type: "BigInt")
  born_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LTE", type: "BigInt")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_EQUAL", type: "BigInt")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MAX_EQUAL", type: "BigInt")
  born_MAX_GT: BigInt @source(subgraph: "Movies", name: "born_MAX_GT", type: "BigInt")
  born_MAX_GTE: BigInt @source(subgraph: "Movies", name: "born_MAX_GTE", type: "BigInt")
  born_MAX_LT: BigInt @source(subgraph: "Movies", name: "born_MAX_LT", type: "BigInt")
  born_MAX_LTE: BigInt @source(subgraph: "Movies", name: "born_MAX_LTE", type: "BigInt")
  born_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MIN_EQUAL", type: "BigInt")
  born_MIN_GT: BigInt @source(subgraph: "Movies", name: "born_MIN_GT", type: "BigInt")
  born_MIN_GTE: BigInt @source(subgraph: "Movies", name: "born_MIN_GTE", type: "BigInt")
  born_MIN_LT: BigInt @source(subgraph: "Movies", name: "born_MIN_LT", type: "BigInt")
  born_MIN_LTE: BigInt @source(subgraph: "Movies", name: "born_MIN_LTE", type: "BigInt")
  born_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "born_SUM_EQUAL", type: "BigInt")
  born_SUM_GT: BigInt @source(subgraph: "Movies", name: "born_SUM_GT", type: "BigInt")
  born_SUM_GTE: BigInt @source(subgraph: "Movies", name: "born_SUM_GTE", type: "BigInt")
  born_SUM_LT: BigInt @source(subgraph: "Movies", name: "born_SUM_LT", type: "BigInt")
  born_SUM_LTE: BigInt @source(subgraph: "Movies", name: "born_SUM_LTE", type: "BigInt")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_EQUAL", type: "Float")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GT", type: "Float")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GTE", type: "Float")
  name_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_EQUAL", type: "Float")
  name_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GT", type: "Float")
  name_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GTE", type: "Float")
  name_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LT", type: "Float")
  name_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LTE", type: "Float")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LT", type: "Float")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LTE", type: "Float")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_EQUAL", type: "String")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GT", type: "Int")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GTE", type: "Int")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_EQUAL", type: "Int")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GT", type: "Int")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GTE", type: "Int")
  name_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_EQUAL", type: "Int")
  name_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GT", type: "Int")
  name_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GTE", type: "Int")
  name_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LT", type: "Int")
  name_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LTE", type: "Int")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LT", type: "Int")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LTE", type: "Int")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LT", type: "Int")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LTE", type: "Int")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_EQUAL", type: "Int")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GT", type: "Int")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GTE", type: "Int")
  name_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_EQUAL", type: "Int")
  name_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GT", type: "Int")
  name_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GTE", type: "Int")
  name_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LT", type: "Int")
  name_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LTE", type: "Int")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LT", type: "Int")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LTE", type: "Int")
}

type PersonFollowsPeopleRelationship @source(subgraph: "Movies", name: "PersonFollowsPeopleRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
}

input PersonFollowsPeopleUpdateConnectionInput @source(subgraph: "Movies", name: "PersonFollowsPeopleUpdateConnectionInput") {
  node: PersonUpdateInput @source(subgraph: "Movies", name: "node", type: "PersonUpdateInput")
}

input PersonFollowsPeopleUpdateFieldInput @source(subgraph: "Movies", name: "PersonFollowsPeopleUpdateFieldInput") {
  connect: [PersonFollowsPeopleConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonFollowsPeopleConnectFieldInput!]")
  create: [PersonFollowsPeopleCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonFollowsPeopleCreateFieldInput!]")
  delete: [PersonFollowsPeopleDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[PersonFollowsPeopleDeleteFieldInput!]")
  disconnect: [PersonFollowsPeopleDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[PersonFollowsPeopleDisconnectFieldInput!]")
  update: PersonFollowsPeopleUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "PersonFollowsPeopleUpdateConnectionInput")
  where: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonFollowsPeopleConnectionWhere")
}

type PersonMovieActedInMoviesAggregationSelection @source(subgraph: "Movies", name: "PersonMovieActedInMoviesAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: PersonMovieActedInMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "PersonMovieActedInMoviesNodeAggregateSelection")
}

type PersonMovieActedInMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "PersonMovieActedInMoviesNodeAggregateSelection") {
  released: BigIntAggregateSelection! @source(subgraph: "Movies", name: "released", type: "BigIntAggregateSelection!")
  tagline: StringAggregateSelection! @source(subgraph: "Movies", name: "tagline", type: "StringAggregateSelection!")
  title: StringAggregateSelection! @source(subgraph: "Movies", name: "title", type: "StringAggregateSelection!")
  votes: BigIntAggregateSelection! @source(subgraph: "Movies", name: "votes", type: "BigIntAggregateSelection!")
}

type PersonMovieDirectedMoviesAggregationSelection @source(subgraph: "Movies", name: "PersonMovieDirectedMoviesAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: PersonMovieDirectedMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "PersonMovieDirectedMoviesNodeAggregateSelection")
}

type PersonMovieDirectedMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "PersonMovieDirectedMoviesNodeAggregateSelection") {
  released: BigIntAggregateSelection! @source(subgraph: "Movies", name: "released", type: "BigIntAggregateSelection!")
  tagline: StringAggregateSelection! @source(subgraph: "Movies", name: "tagline", type: "StringAggregateSelection!")
  title: StringAggregateSelection! @source(subgraph: "Movies", name: "title", type: "StringAggregateSelection!")
  votes: BigIntAggregateSelection! @source(subgraph: "Movies", name: "votes", type: "BigIntAggregateSelection!")
}

type PersonMovieProducedMoviesAggregationSelection @source(subgraph: "Movies", name: "PersonMovieProducedMoviesAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: PersonMovieProducedMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "PersonMovieProducedMoviesNodeAggregateSelection")
}

type PersonMovieProducedMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "PersonMovieProducedMoviesNodeAggregateSelection") {
  released: BigIntAggregateSelection! @source(subgraph: "Movies", name: "released", type: "BigIntAggregateSelection!")
  tagline: StringAggregateSelection! @source(subgraph: "Movies", name: "tagline", type: "StringAggregateSelection!")
  title: StringAggregateSelection! @source(subgraph: "Movies", name: "title", type: "StringAggregateSelection!")
  votes: BigIntAggregateSelection! @source(subgraph: "Movies", name: "votes", type: "BigIntAggregateSelection!")
}

type PersonMovieReviewedMoviesAggregationSelection @source(subgraph: "Movies", name: "PersonMovieReviewedMoviesAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  edge: PersonMovieReviewedMoviesEdgeAggregateSelection @source(subgraph: "Movies", name: "edge", type: "PersonMovieReviewedMoviesEdgeAggregateSelection")
  node: PersonMovieReviewedMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "PersonMovieReviewedMoviesNodeAggregateSelection")
}

type PersonMovieReviewedMoviesEdgeAggregateSelection @source(subgraph: "Movies", name: "PersonMovieReviewedMoviesEdgeAggregateSelection") {
  rating: BigIntAggregateSelection! @source(subgraph: "Movies", name: "rating", type: "BigIntAggregateSelection!")
  summary: StringAggregateSelection! @source(subgraph: "Movies", name: "summary", type: "StringAggregateSelection!")
}

type PersonMovieReviewedMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "PersonMovieReviewedMoviesNodeAggregateSelection") {
  released: BigIntAggregateSelection! @source(subgraph: "Movies", name: "released", type: "BigIntAggregateSelection!")
  tagline: StringAggregateSelection! @source(subgraph: "Movies", name: "tagline", type: "StringAggregateSelection!")
  title: StringAggregateSelection! @source(subgraph: "Movies", name: "title", type: "StringAggregateSelection!")
  votes: BigIntAggregateSelection! @source(subgraph: "Movies", name: "votes", type: "BigIntAggregateSelection!")
}

type PersonMovieWroteMoviesAggregationSelection @source(subgraph: "Movies", name: "PersonMovieWroteMoviesAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: PersonMovieWroteMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "PersonMovieWroteMoviesNodeAggregateSelection")
}

type PersonMovieWroteMoviesNodeAggregateSelection @source(subgraph: "Movies", name: "PersonMovieWroteMoviesNodeAggregateSelection") {
  released: BigIntAggregateSelection! @source(subgraph: "Movies", name: "released", type: "BigIntAggregateSelection!")
  tagline: StringAggregateSelection! @source(subgraph: "Movies", name: "tagline", type: "StringAggregateSelection!")
  title: StringAggregateSelection! @source(subgraph: "Movies", name: "title", type: "StringAggregateSelection!")
  votes: BigIntAggregateSelection! @source(subgraph: "Movies", name: "votes", type: "BigIntAggregateSelection!")
}

input PersonOptions @source(subgraph: "Movies", name: "PersonOptions") {
  limit: Int @source(subgraph: "Movies", name: "limit", type: "Int")
  offset: Int @source(subgraph: "Movies", name: "offset", type: "Int")
  """
  Specify one or more PersonSort objects to sort People by. The sorts will be applied in the order in which they are arranged in the array.
  """
  sort: [PersonSort!] @source(subgraph: "Movies", name: "sort", type: "[PersonSort!]")
}

input PersonPeopleFollowsAggregateInput @source(subgraph: "Movies", name: "PersonPeopleFollowsAggregateInput") {
  AND: [PersonPeopleFollowsAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonPeopleFollowsAggregateInput!]")
  NOT: PersonPeopleFollowsAggregateInput @source(subgraph: "Movies", name: "NOT", type: "PersonPeopleFollowsAggregateInput")
  OR: [PersonPeopleFollowsAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonPeopleFollowsAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: PersonPeopleFollowsNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "PersonPeopleFollowsNodeAggregationWhereInput")
}

input PersonPeopleFollowsConnectFieldInput @source(subgraph: "Movies", name: "PersonPeopleFollowsConnectFieldInput") {
  connect: [PersonConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: PersonConnectWhere @source(subgraph: "Movies", name: "where", type: "PersonConnectWhere")
}

type PersonPeopleFollowsConnection @source(subgraph: "Movies", name: "PersonPeopleFollowsConnection") {
  edges: [PersonPeopleFollowsRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[PersonPeopleFollowsRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input PersonPeopleFollowsConnectionSort @source(subgraph: "Movies", name: "PersonPeopleFollowsConnectionSort") {
  node: PersonSort @source(subgraph: "Movies", name: "node", type: "PersonSort")
}

input PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "PersonPeopleFollowsConnectionWhere") {
  AND: [PersonPeopleFollowsConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonPeopleFollowsConnectionWhere!]")
  NOT: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "PersonPeopleFollowsConnectionWhere")
  OR: [PersonPeopleFollowsConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonPeopleFollowsConnectionWhere!]")
  node: PersonWhere @source(subgraph: "Movies", name: "node", type: "PersonWhere")
  node_NOT: PersonWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "PersonWhere")
}

input PersonPeopleFollowsCreateFieldInput @source(subgraph: "Movies", name: "PersonPeopleFollowsCreateFieldInput") {
  node: PersonCreateInput! @source(subgraph: "Movies", name: "node", type: "PersonCreateInput!")
}

input PersonPeopleFollowsDeleteFieldInput @source(subgraph: "Movies", name: "PersonPeopleFollowsDeleteFieldInput") {
  delete: PersonDeleteInput @source(subgraph: "Movies", name: "delete", type: "PersonDeleteInput")
  where: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonPeopleFollowsConnectionWhere")
}

input PersonPeopleFollowsDisconnectFieldInput @source(subgraph: "Movies", name: "PersonPeopleFollowsDisconnectFieldInput") {
  disconnect: PersonDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "PersonDisconnectInput")
  where: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonPeopleFollowsConnectionWhere")
}

input PersonPeopleFollowsFieldInput @source(subgraph: "Movies", name: "PersonPeopleFollowsFieldInput") {
  connect: [PersonPeopleFollowsConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonPeopleFollowsConnectFieldInput!]")
  create: [PersonPeopleFollowsCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonPeopleFollowsCreateFieldInput!]")
}

input PersonPeopleFollowsNodeAggregationWhereInput @source(subgraph: "Movies", name: "PersonPeopleFollowsNodeAggregationWhereInput") {
  AND: [PersonPeopleFollowsNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonPeopleFollowsNodeAggregationWhereInput!]")
  NOT: PersonPeopleFollowsNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "PersonPeopleFollowsNodeAggregationWhereInput")
  OR: [PersonPeopleFollowsNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonPeopleFollowsNodeAggregationWhereInput!]")
  born_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_EQUAL", type: "BigInt")
  born_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GT", type: "BigInt")
  born_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_GTE", type: "BigInt")
  born_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LT", type: "BigInt")
  born_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "born_AVERAGE_LTE", type: "BigInt")
  born_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_EQUAL", type: "BigInt")
  born_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MAX_EQUAL", type: "BigInt")
  born_MAX_GT: BigInt @source(subgraph: "Movies", name: "born_MAX_GT", type: "BigInt")
  born_MAX_GTE: BigInt @source(subgraph: "Movies", name: "born_MAX_GTE", type: "BigInt")
  born_MAX_LT: BigInt @source(subgraph: "Movies", name: "born_MAX_LT", type: "BigInt")
  born_MAX_LTE: BigInt @source(subgraph: "Movies", name: "born_MAX_LTE", type: "BigInt")
  born_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "born_MIN_EQUAL", type: "BigInt")
  born_MIN_GT: BigInt @source(subgraph: "Movies", name: "born_MIN_GT", type: "BigInt")
  born_MIN_GTE: BigInt @source(subgraph: "Movies", name: "born_MIN_GTE", type: "BigInt")
  born_MIN_LT: BigInt @source(subgraph: "Movies", name: "born_MIN_LT", type: "BigInt")
  born_MIN_LTE: BigInt @source(subgraph: "Movies", name: "born_MIN_LTE", type: "BigInt")
  born_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "born_SUM_EQUAL", type: "BigInt")
  born_SUM_GT: BigInt @source(subgraph: "Movies", name: "born_SUM_GT", type: "BigInt")
  born_SUM_GTE: BigInt @source(subgraph: "Movies", name: "born_SUM_GTE", type: "BigInt")
  born_SUM_LT: BigInt @source(subgraph: "Movies", name: "born_SUM_LT", type: "BigInt")
  born_SUM_LTE: BigInt @source(subgraph: "Movies", name: "born_SUM_LTE", type: "BigInt")
  name_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_EQUAL", type: "Float")
  name_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GT", type: "Float")
  name_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_GTE", type: "Float")
  name_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_EQUAL", type: "Float")
  name_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GT", type: "Float")
  name_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_GTE", type: "Float")
  name_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LT", type: "Float")
  name_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "name_AVERAGE_LENGTH_LTE", type: "Float")
  name_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LT", type: "Float")
  name_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_AVERAGE_LTE", type: "Float")
  name_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_EQUAL", type: "String")
  name_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GT", type: "Int")
  name_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_GTE", type: "Int")
  name_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_EQUAL", type: "Int")
  name_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GT", type: "Int")
  name_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_GTE", type: "Int")
  name_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_EQUAL", type: "Int")
  name_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GT", type: "Int")
  name_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_GTE", type: "Int")
  name_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LT", type: "Int")
  name_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_LONGEST_LENGTH_LTE", type: "Int")
  name_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LT", type: "Int")
  name_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_LONGEST_LTE", type: "Int")
  name_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LT", type: "Int")
  name_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "name_LTE", type: "Int")
  name_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_EQUAL", type: "Int")
  name_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GT", type: "Int")
  name_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_GTE", type: "Int")
  name_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_EQUAL", type: "Int")
  name_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GT", type: "Int")
  name_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_GTE", type: "Int")
  name_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LT", type: "Int")
  name_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "name_SHORTEST_LENGTH_LTE", type: "Int")
  name_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LT", type: "Int")
  name_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "name_SHORTEST_LTE", type: "Int")
}

type PersonPeopleFollowsRelationship @source(subgraph: "Movies", name: "PersonPeopleFollowsRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Person! @source(subgraph: "Movies", name: "node", type: "Person!")
}

input PersonPeopleFollowsUpdateConnectionInput @source(subgraph: "Movies", name: "PersonPeopleFollowsUpdateConnectionInput") {
  node: PersonUpdateInput @source(subgraph: "Movies", name: "node", type: "PersonUpdateInput")
}

input PersonPeopleFollowsUpdateFieldInput @source(subgraph: "Movies", name: "PersonPeopleFollowsUpdateFieldInput") {
  connect: [PersonPeopleFollowsConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonPeopleFollowsConnectFieldInput!]")
  create: [PersonPeopleFollowsCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonPeopleFollowsCreateFieldInput!]")
  delete: [PersonPeopleFollowsDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[PersonPeopleFollowsDeleteFieldInput!]")
  disconnect: [PersonPeopleFollowsDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[PersonPeopleFollowsDisconnectFieldInput!]")
  update: PersonPeopleFollowsUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "PersonPeopleFollowsUpdateConnectionInput")
  where: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonPeopleFollowsConnectionWhere")
}

type PersonPersonFollowsPeopleAggregationSelection @source(subgraph: "Movies", name: "PersonPersonFollowsPeopleAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: PersonPersonFollowsPeopleNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "PersonPersonFollowsPeopleNodeAggregateSelection")
}

type PersonPersonFollowsPeopleNodeAggregateSelection @source(subgraph: "Movies", name: "PersonPersonFollowsPeopleNodeAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

type PersonPersonPeopleFollowsAggregationSelection @source(subgraph: "Movies", name: "PersonPersonPeopleFollowsAggregationSelection") {
  count: Int! @source(subgraph: "Movies", name: "count", type: "Int!")
  node: PersonPersonPeopleFollowsNodeAggregateSelection @source(subgraph: "Movies", name: "node", type: "PersonPersonPeopleFollowsNodeAggregateSelection")
}

type PersonPersonPeopleFollowsNodeAggregateSelection @source(subgraph: "Movies", name: "PersonPersonPeopleFollowsNodeAggregateSelection") {
  born: BigIntAggregateSelection! @source(subgraph: "Movies", name: "born", type: "BigIntAggregateSelection!")
  name: StringAggregateSelection! @source(subgraph: "Movies", name: "name", type: "StringAggregateSelection!")
}

input PersonProducedMoviesAggregateInput @source(subgraph: "Movies", name: "PersonProducedMoviesAggregateInput") {
  AND: [PersonProducedMoviesAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonProducedMoviesAggregateInput!]")
  NOT: PersonProducedMoviesAggregateInput @source(subgraph: "Movies", name: "NOT", type: "PersonProducedMoviesAggregateInput")
  OR: [PersonProducedMoviesAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonProducedMoviesAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: PersonProducedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "PersonProducedMoviesNodeAggregationWhereInput")
}

input PersonProducedMoviesConnectFieldInput @source(subgraph: "Movies", name: "PersonProducedMoviesConnectFieldInput") {
  connect: [MovieConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[MovieConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: MovieConnectWhere @source(subgraph: "Movies", name: "where", type: "MovieConnectWhere")
}

type PersonProducedMoviesConnection @source(subgraph: "Movies", name: "PersonProducedMoviesConnection") {
  edges: [PersonProducedMoviesRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[PersonProducedMoviesRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input PersonProducedMoviesConnectionSort @source(subgraph: "Movies", name: "PersonProducedMoviesConnectionSort") {
  node: MovieSort @source(subgraph: "Movies", name: "node", type: "MovieSort")
}

input PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "PersonProducedMoviesConnectionWhere") {
  AND: [PersonProducedMoviesConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonProducedMoviesConnectionWhere!]")
  NOT: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "PersonProducedMoviesConnectionWhere")
  OR: [PersonProducedMoviesConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonProducedMoviesConnectionWhere!]")
  node: MovieWhere @source(subgraph: "Movies", name: "node", type: "MovieWhere")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "MovieWhere")
}

input PersonProducedMoviesCreateFieldInput @source(subgraph: "Movies", name: "PersonProducedMoviesCreateFieldInput") {
  node: MovieCreateInput! @source(subgraph: "Movies", name: "node", type: "MovieCreateInput!")
}

input PersonProducedMoviesDeleteFieldInput @source(subgraph: "Movies", name: "PersonProducedMoviesDeleteFieldInput") {
  delete: MovieDeleteInput @source(subgraph: "Movies", name: "delete", type: "MovieDeleteInput")
  where: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonProducedMoviesConnectionWhere")
}

input PersonProducedMoviesDisconnectFieldInput @source(subgraph: "Movies", name: "PersonProducedMoviesDisconnectFieldInput") {
  disconnect: MovieDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "MovieDisconnectInput")
  where: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonProducedMoviesConnectionWhere")
}

input PersonProducedMoviesFieldInput @source(subgraph: "Movies", name: "PersonProducedMoviesFieldInput") {
  connect: [PersonProducedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonProducedMoviesConnectFieldInput!]")
  create: [PersonProducedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonProducedMoviesCreateFieldInput!]")
}

input PersonProducedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "PersonProducedMoviesNodeAggregationWhereInput") {
  AND: [PersonProducedMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonProducedMoviesNodeAggregationWhereInput!]")
  NOT: PersonProducedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "PersonProducedMoviesNodeAggregationWhereInput")
  OR: [PersonProducedMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonProducedMoviesNodeAggregationWhereInput!]")
  released_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_EQUAL", type: "BigInt")
  released_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GT", type: "BigInt")
  released_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GTE", type: "BigInt")
  released_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LT", type: "BigInt")
  released_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LTE", type: "BigInt")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_EQUAL", type: "BigInt")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GT", type: "BigInt")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GTE", type: "BigInt")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LT", type: "BigInt")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LTE", type: "BigInt")
  released_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MAX_EQUAL", type: "BigInt")
  released_MAX_GT: BigInt @source(subgraph: "Movies", name: "released_MAX_GT", type: "BigInt")
  released_MAX_GTE: BigInt @source(subgraph: "Movies", name: "released_MAX_GTE", type: "BigInt")
  released_MAX_LT: BigInt @source(subgraph: "Movies", name: "released_MAX_LT", type: "BigInt")
  released_MAX_LTE: BigInt @source(subgraph: "Movies", name: "released_MAX_LTE", type: "BigInt")
  released_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MIN_EQUAL", type: "BigInt")
  released_MIN_GT: BigInt @source(subgraph: "Movies", name: "released_MIN_GT", type: "BigInt")
  released_MIN_GTE: BigInt @source(subgraph: "Movies", name: "released_MIN_GTE", type: "BigInt")
  released_MIN_LT: BigInt @source(subgraph: "Movies", name: "released_MIN_LT", type: "BigInt")
  released_MIN_LTE: BigInt @source(subgraph: "Movies", name: "released_MIN_LTE", type: "BigInt")
  released_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "released_SUM_EQUAL", type: "BigInt")
  released_SUM_GT: BigInt @source(subgraph: "Movies", name: "released_SUM_GT", type: "BigInt")
  released_SUM_GTE: BigInt @source(subgraph: "Movies", name: "released_SUM_GTE", type: "BigInt")
  released_SUM_LT: BigInt @source(subgraph: "Movies", name: "released_SUM_LT", type: "BigInt")
  released_SUM_LTE: BigInt @source(subgraph: "Movies", name: "released_SUM_LTE", type: "BigInt")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_EQUAL", type: "Float")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GT", type: "Float")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float")
  tagline_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GT", type: "Float")
  tagline_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LT", type: "Float")
  tagline_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LTE", type: "Float")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LT", type: "Float")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LTE", type: "Float")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_EQUAL", type: "String")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GT", type: "Int")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GTE", type: "Int")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_EQUAL", type: "Int")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GT", type: "Int")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GTE", type: "Int")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int")
  tagline_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GT", type: "Int")
  tagline_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GTE", type: "Int")
  tagline_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LT", type: "Int")
  tagline_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LTE", type: "Int")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LT", type: "Int")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LTE", type: "Int")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LT", type: "Int")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LTE", type: "Int")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_EQUAL", type: "Int")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GT", type: "Int")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int")
  tagline_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GT", type: "Int")
  tagline_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LT", type: "Int")
  tagline_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LTE", type: "Int")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LT", type: "Int")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LTE", type: "Int")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_EQUAL", type: "Float")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GT", type: "Float")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GTE", type: "Float")
  title_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_EQUAL", type: "Float")
  title_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GT", type: "Float")
  title_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GTE", type: "Float")
  title_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LT", type: "Float")
  title_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LTE", type: "Float")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LT", type: "Float")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LTE", type: "Float")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_EQUAL", type: "String")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GT", type: "Int")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GTE", type: "Int")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_EQUAL", type: "Int")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GT", type: "Int")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GTE", type: "Int")
  title_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_EQUAL", type: "Int")
  title_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GT", type: "Int")
  title_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GTE", type: "Int")
  title_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LT", type: "Int")
  title_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LTE", type: "Int")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LT", type: "Int")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LTE", type: "Int")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LT", type: "Int")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LTE", type: "Int")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_EQUAL", type: "Int")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GT", type: "Int")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GTE", type: "Int")
  title_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_EQUAL", type: "Int")
  title_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GT", type: "Int")
  title_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GTE", type: "Int")
  title_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LT", type: "Int")
  title_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LTE", type: "Int")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LT", type: "Int")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LTE", type: "Int")
  votes_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_EQUAL", type: "BigInt")
  votes_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GT", type: "BigInt")
  votes_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GTE", type: "BigInt")
  votes_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LT", type: "BigInt")
  votes_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LTE", type: "BigInt")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_EQUAL", type: "BigInt")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GT", type: "BigInt")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GTE", type: "BigInt")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LT", type: "BigInt")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LTE", type: "BigInt")
  votes_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MAX_EQUAL", type: "BigInt")
  votes_MAX_GT: BigInt @source(subgraph: "Movies", name: "votes_MAX_GT", type: "BigInt")
  votes_MAX_GTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_GTE", type: "BigInt")
  votes_MAX_LT: BigInt @source(subgraph: "Movies", name: "votes_MAX_LT", type: "BigInt")
  votes_MAX_LTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_LTE", type: "BigInt")
  votes_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MIN_EQUAL", type: "BigInt")
  votes_MIN_GT: BigInt @source(subgraph: "Movies", name: "votes_MIN_GT", type: "BigInt")
  votes_MIN_GTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_GTE", type: "BigInt")
  votes_MIN_LT: BigInt @source(subgraph: "Movies", name: "votes_MIN_LT", type: "BigInt")
  votes_MIN_LTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_LTE", type: "BigInt")
  votes_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_SUM_EQUAL", type: "BigInt")
  votes_SUM_GT: BigInt @source(subgraph: "Movies", name: "votes_SUM_GT", type: "BigInt")
  votes_SUM_GTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_GTE", type: "BigInt")
  votes_SUM_LT: BigInt @source(subgraph: "Movies", name: "votes_SUM_LT", type: "BigInt")
  votes_SUM_LTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_LTE", type: "BigInt")
}

type PersonProducedMoviesRelationship @source(subgraph: "Movies", name: "PersonProducedMoviesRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Movie! @source(subgraph: "Movies", name: "node", type: "Movie!")
}

input PersonProducedMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "PersonProducedMoviesUpdateConnectionInput") {
  node: MovieUpdateInput @source(subgraph: "Movies", name: "node", type: "MovieUpdateInput")
}

input PersonProducedMoviesUpdateFieldInput @source(subgraph: "Movies", name: "PersonProducedMoviesUpdateFieldInput") {
  connect: [PersonProducedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonProducedMoviesConnectFieldInput!]")
  create: [PersonProducedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonProducedMoviesCreateFieldInput!]")
  delete: [PersonProducedMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[PersonProducedMoviesDeleteFieldInput!]")
  disconnect: [PersonProducedMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[PersonProducedMoviesDisconnectFieldInput!]")
  update: PersonProducedMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "PersonProducedMoviesUpdateConnectionInput")
  where: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonProducedMoviesConnectionWhere")
}

input PersonRelationInput @source(subgraph: "Movies", name: "PersonRelationInput") {
  actedInMovies: [PersonActedInMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "actedInMovies", type: "[PersonActedInMoviesCreateFieldInput!]")
  directedMovies: [PersonDirectedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "directedMovies", type: "[PersonDirectedMoviesCreateFieldInput!]")
  followsPeople: [PersonFollowsPeopleCreateFieldInput!] @source(subgraph: "Movies", name: "followsPeople", type: "[PersonFollowsPeopleCreateFieldInput!]")
  peopleFollows: [PersonPeopleFollowsCreateFieldInput!] @source(subgraph: "Movies", name: "peopleFollows", type: "[PersonPeopleFollowsCreateFieldInput!]")
  producedMovies: [PersonProducedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "producedMovies", type: "[PersonProducedMoviesCreateFieldInput!]")
  reviewedMovies: [PersonReviewedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "reviewedMovies", type: "[PersonReviewedMoviesCreateFieldInput!]")
  wroteMovies: [PersonWroteMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "wroteMovies", type: "[PersonWroteMoviesCreateFieldInput!]")
}

input PersonReviewedMoviesAggregateInput @source(subgraph: "Movies", name: "PersonReviewedMoviesAggregateInput") {
  AND: [PersonReviewedMoviesAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonReviewedMoviesAggregateInput!]")
  NOT: PersonReviewedMoviesAggregateInput @source(subgraph: "Movies", name: "NOT", type: "PersonReviewedMoviesAggregateInput")
  OR: [PersonReviewedMoviesAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonReviewedMoviesAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  edge: ReviewedPropertiesAggregationWhereInput @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesAggregationWhereInput")
  node: PersonReviewedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "PersonReviewedMoviesNodeAggregationWhereInput")
}

input PersonReviewedMoviesConnectFieldInput @source(subgraph: "Movies", name: "PersonReviewedMoviesConnectFieldInput") {
  connect: [MovieConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[MovieConnectInput!]")
  edge: ReviewedPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesCreateInput!")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: MovieConnectWhere @source(subgraph: "Movies", name: "where", type: "MovieConnectWhere")
}

type PersonReviewedMoviesConnection @source(subgraph: "Movies", name: "PersonReviewedMoviesConnection") {
  edges: [PersonReviewedMoviesRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[PersonReviewedMoviesRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input PersonReviewedMoviesConnectionSort @source(subgraph: "Movies", name: "PersonReviewedMoviesConnectionSort") {
  edge: ReviewedPropertiesSort @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesSort")
  node: MovieSort @source(subgraph: "Movies", name: "node", type: "MovieSort")
}

input PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "PersonReviewedMoviesConnectionWhere") {
  AND: [PersonReviewedMoviesConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonReviewedMoviesConnectionWhere!]")
  NOT: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "PersonReviewedMoviesConnectionWhere")
  OR: [PersonReviewedMoviesConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonReviewedMoviesConnectionWhere!]")
  edge: ReviewedPropertiesWhere @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesWhere")
  edge_NOT: ReviewedPropertiesWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "edge_NOT", type: "ReviewedPropertiesWhere")
  node: MovieWhere @source(subgraph: "Movies", name: "node", type: "MovieWhere")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "MovieWhere")
}

input PersonReviewedMoviesCreateFieldInput @source(subgraph: "Movies", name: "PersonReviewedMoviesCreateFieldInput") {
  edge: ReviewedPropertiesCreateInput! @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesCreateInput!")
  node: MovieCreateInput! @source(subgraph: "Movies", name: "node", type: "MovieCreateInput!")
}

input PersonReviewedMoviesDeleteFieldInput @source(subgraph: "Movies", name: "PersonReviewedMoviesDeleteFieldInput") {
  delete: MovieDeleteInput @source(subgraph: "Movies", name: "delete", type: "MovieDeleteInput")
  where: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonReviewedMoviesConnectionWhere")
}

input PersonReviewedMoviesDisconnectFieldInput @source(subgraph: "Movies", name: "PersonReviewedMoviesDisconnectFieldInput") {
  disconnect: MovieDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "MovieDisconnectInput")
  where: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonReviewedMoviesConnectionWhere")
}

input PersonReviewedMoviesFieldInput @source(subgraph: "Movies", name: "PersonReviewedMoviesFieldInput") {
  connect: [PersonReviewedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonReviewedMoviesConnectFieldInput!]")
  create: [PersonReviewedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonReviewedMoviesCreateFieldInput!]")
}

input PersonReviewedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "PersonReviewedMoviesNodeAggregationWhereInput") {
  AND: [PersonReviewedMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonReviewedMoviesNodeAggregationWhereInput!]")
  NOT: PersonReviewedMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "PersonReviewedMoviesNodeAggregationWhereInput")
  OR: [PersonReviewedMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonReviewedMoviesNodeAggregationWhereInput!]")
  released_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_EQUAL", type: "BigInt")
  released_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GT", type: "BigInt")
  released_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GTE", type: "BigInt")
  released_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LT", type: "BigInt")
  released_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LTE", type: "BigInt")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_EQUAL", type: "BigInt")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GT", type: "BigInt")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GTE", type: "BigInt")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LT", type: "BigInt")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LTE", type: "BigInt")
  released_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MAX_EQUAL", type: "BigInt")
  released_MAX_GT: BigInt @source(subgraph: "Movies", name: "released_MAX_GT", type: "BigInt")
  released_MAX_GTE: BigInt @source(subgraph: "Movies", name: "released_MAX_GTE", type: "BigInt")
  released_MAX_LT: BigInt @source(subgraph: "Movies", name: "released_MAX_LT", type: "BigInt")
  released_MAX_LTE: BigInt @source(subgraph: "Movies", name: "released_MAX_LTE", type: "BigInt")
  released_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MIN_EQUAL", type: "BigInt")
  released_MIN_GT: BigInt @source(subgraph: "Movies", name: "released_MIN_GT", type: "BigInt")
  released_MIN_GTE: BigInt @source(subgraph: "Movies", name: "released_MIN_GTE", type: "BigInt")
  released_MIN_LT: BigInt @source(subgraph: "Movies", name: "released_MIN_LT", type: "BigInt")
  released_MIN_LTE: BigInt @source(subgraph: "Movies", name: "released_MIN_LTE", type: "BigInt")
  released_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "released_SUM_EQUAL", type: "BigInt")
  released_SUM_GT: BigInt @source(subgraph: "Movies", name: "released_SUM_GT", type: "BigInt")
  released_SUM_GTE: BigInt @source(subgraph: "Movies", name: "released_SUM_GTE", type: "BigInt")
  released_SUM_LT: BigInt @source(subgraph: "Movies", name: "released_SUM_LT", type: "BigInt")
  released_SUM_LTE: BigInt @source(subgraph: "Movies", name: "released_SUM_LTE", type: "BigInt")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_EQUAL", type: "Float")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GT", type: "Float")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float")
  tagline_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GT", type: "Float")
  tagline_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LT", type: "Float")
  tagline_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LTE", type: "Float")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LT", type: "Float")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LTE", type: "Float")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_EQUAL", type: "String")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GT", type: "Int")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GTE", type: "Int")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_EQUAL", type: "Int")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GT", type: "Int")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GTE", type: "Int")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int")
  tagline_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GT", type: "Int")
  tagline_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GTE", type: "Int")
  tagline_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LT", type: "Int")
  tagline_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LTE", type: "Int")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LT", type: "Int")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LTE", type: "Int")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LT", type: "Int")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LTE", type: "Int")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_EQUAL", type: "Int")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GT", type: "Int")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int")
  tagline_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GT", type: "Int")
  tagline_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LT", type: "Int")
  tagline_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LTE", type: "Int")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LT", type: "Int")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LTE", type: "Int")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_EQUAL", type: "Float")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GT", type: "Float")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GTE", type: "Float")
  title_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_EQUAL", type: "Float")
  title_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GT", type: "Float")
  title_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GTE", type: "Float")
  title_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LT", type: "Float")
  title_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LTE", type: "Float")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LT", type: "Float")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LTE", type: "Float")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_EQUAL", type: "String")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GT", type: "Int")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GTE", type: "Int")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_EQUAL", type: "Int")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GT", type: "Int")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GTE", type: "Int")
  title_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_EQUAL", type: "Int")
  title_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GT", type: "Int")
  title_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GTE", type: "Int")
  title_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LT", type: "Int")
  title_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LTE", type: "Int")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LT", type: "Int")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LTE", type: "Int")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LT", type: "Int")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LTE", type: "Int")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_EQUAL", type: "Int")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GT", type: "Int")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GTE", type: "Int")
  title_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_EQUAL", type: "Int")
  title_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GT", type: "Int")
  title_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GTE", type: "Int")
  title_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LT", type: "Int")
  title_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LTE", type: "Int")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LT", type: "Int")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LTE", type: "Int")
  votes_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_EQUAL", type: "BigInt")
  votes_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GT", type: "BigInt")
  votes_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GTE", type: "BigInt")
  votes_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LT", type: "BigInt")
  votes_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LTE", type: "BigInt")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_EQUAL", type: "BigInt")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GT", type: "BigInt")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GTE", type: "BigInt")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LT", type: "BigInt")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LTE", type: "BigInt")
  votes_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MAX_EQUAL", type: "BigInt")
  votes_MAX_GT: BigInt @source(subgraph: "Movies", name: "votes_MAX_GT", type: "BigInt")
  votes_MAX_GTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_GTE", type: "BigInt")
  votes_MAX_LT: BigInt @source(subgraph: "Movies", name: "votes_MAX_LT", type: "BigInt")
  votes_MAX_LTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_LTE", type: "BigInt")
  votes_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MIN_EQUAL", type: "BigInt")
  votes_MIN_GT: BigInt @source(subgraph: "Movies", name: "votes_MIN_GT", type: "BigInt")
  votes_MIN_GTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_GTE", type: "BigInt")
  votes_MIN_LT: BigInt @source(subgraph: "Movies", name: "votes_MIN_LT", type: "BigInt")
  votes_MIN_LTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_LTE", type: "BigInt")
  votes_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_SUM_EQUAL", type: "BigInt")
  votes_SUM_GT: BigInt @source(subgraph: "Movies", name: "votes_SUM_GT", type: "BigInt")
  votes_SUM_GTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_GTE", type: "BigInt")
  votes_SUM_LT: BigInt @source(subgraph: "Movies", name: "votes_SUM_LT", type: "BigInt")
  votes_SUM_LTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_LTE", type: "BigInt")
}

type PersonReviewedMoviesRelationship @source(subgraph: "Movies", name: "PersonReviewedMoviesRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Movie! @source(subgraph: "Movies", name: "node", type: "Movie!")
  properties: ReviewedProperties! @source(subgraph: "Movies", name: "properties", type: "ReviewedProperties!")
}

input PersonReviewedMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "PersonReviewedMoviesUpdateConnectionInput") {
  edge: ReviewedPropertiesUpdateInput @source(subgraph: "Movies", name: "edge", type: "ReviewedPropertiesUpdateInput")
  node: MovieUpdateInput @source(subgraph: "Movies", name: "node", type: "MovieUpdateInput")
}

input PersonReviewedMoviesUpdateFieldInput @source(subgraph: "Movies", name: "PersonReviewedMoviesUpdateFieldInput") {
  connect: [PersonReviewedMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonReviewedMoviesConnectFieldInput!]")
  create: [PersonReviewedMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonReviewedMoviesCreateFieldInput!]")
  delete: [PersonReviewedMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[PersonReviewedMoviesDeleteFieldInput!]")
  disconnect: [PersonReviewedMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[PersonReviewedMoviesDisconnectFieldInput!]")
  update: PersonReviewedMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "PersonReviewedMoviesUpdateConnectionInput")
  where: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonReviewedMoviesConnectionWhere")
}

"""
Fields to sort People by. The order in which sorts are applied is not guaranteed when specifying many fields in one PersonSort object.
"""
input PersonSort @source(subgraph: "Movies", name: "PersonSort") {
  born: SortDirection @source(subgraph: "Movies", name: "born", type: "SortDirection")
  name: SortDirection @source(subgraph: "Movies", name: "name", type: "SortDirection")
}

input PersonUpdateInput @source(subgraph: "Movies", name: "PersonUpdateInput") {
  actedInMovies: [PersonActedInMoviesUpdateFieldInput!] @source(subgraph: "Movies", name: "actedInMovies", type: "[PersonActedInMoviesUpdateFieldInput!]")
  born: BigInt @source(subgraph: "Movies", name: "born", type: "BigInt")
  born_DECREMENT: BigInt @source(subgraph: "Movies", name: "born_DECREMENT", type: "BigInt")
  born_INCREMENT: BigInt @source(subgraph: "Movies", name: "born_INCREMENT", type: "BigInt")
  directedMovies: [PersonDirectedMoviesUpdateFieldInput!] @source(subgraph: "Movies", name: "directedMovies", type: "[PersonDirectedMoviesUpdateFieldInput!]")
  followsPeople: [PersonFollowsPeopleUpdateFieldInput!] @source(subgraph: "Movies", name: "followsPeople", type: "[PersonFollowsPeopleUpdateFieldInput!]")
  name: String @source(subgraph: "Movies", name: "name", type: "String")
  peopleFollows: [PersonPeopleFollowsUpdateFieldInput!] @source(subgraph: "Movies", name: "peopleFollows", type: "[PersonPeopleFollowsUpdateFieldInput!]")
  producedMovies: [PersonProducedMoviesUpdateFieldInput!] @source(subgraph: "Movies", name: "producedMovies", type: "[PersonProducedMoviesUpdateFieldInput!]")
  reviewedMovies: [PersonReviewedMoviesUpdateFieldInput!] @source(subgraph: "Movies", name: "reviewedMovies", type: "[PersonReviewedMoviesUpdateFieldInput!]")
  wroteMovies: [PersonWroteMoviesUpdateFieldInput!] @source(subgraph: "Movies", name: "wroteMovies", type: "[PersonWroteMoviesUpdateFieldInput!]")
}

input PersonWhere @source(subgraph: "Movies", name: "PersonWhere") {
  AND: [PersonWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonWhere!]")
  NOT: PersonWhere @source(subgraph: "Movies", name: "NOT", type: "PersonWhere")
  OR: [PersonWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonWhere!]")
  actedInMovies: MovieWhere @deprecated(reason: "Use \`actedInMovies_SOME\` instead.") @source(subgraph: "Movies", name: "actedInMovies", type: "MovieWhere")
  actedInMoviesAggregate: PersonActedInMoviesAggregateInput @source(subgraph: "Movies", name: "actedInMoviesAggregate", type: "PersonActedInMoviesAggregateInput")
  actedInMoviesConnection: PersonActedInMoviesConnectionWhere @deprecated(reason: "Use \`actedInMoviesConnection_SOME\` instead.") @source(subgraph: "Movies", name: "actedInMoviesConnection", type: "PersonActedInMoviesConnectionWhere")
  """
  Return People where all of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_ALL: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "actedInMoviesConnection_ALL", type: "PersonActedInMoviesConnectionWhere")
  """
  Return People where none of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_NONE: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "actedInMoviesConnection_NONE", type: "PersonActedInMoviesConnectionWhere")
  actedInMoviesConnection_NOT: PersonActedInMoviesConnectionWhere @deprecated(reason: "Use \`actedInMoviesConnection_NONE\` instead.") @source(subgraph: "Movies", name: "actedInMoviesConnection_NOT", type: "PersonActedInMoviesConnectionWhere")
  """
  Return People where one of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SINGLE: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "actedInMoviesConnection_SINGLE", type: "PersonActedInMoviesConnectionWhere")
  """
  Return People where some of the related PersonActedInMoviesConnections match this filter
  """
  actedInMoviesConnection_SOME: PersonActedInMoviesConnectionWhere @source(subgraph: "Movies", name: "actedInMoviesConnection_SOME", type: "PersonActedInMoviesConnectionWhere")
  """Return People where all of the related Movies match this filter"""
  actedInMovies_ALL: MovieWhere @source(subgraph: "Movies", name: "actedInMovies_ALL", type: "MovieWhere")
  """Return People where none of the related Movies match this filter"""
  actedInMovies_NONE: MovieWhere @source(subgraph: "Movies", name: "actedInMovies_NONE", type: "MovieWhere")
  actedInMovies_NOT: MovieWhere @deprecated(reason: "Use \`actedInMovies_NONE\` instead.") @source(subgraph: "Movies", name: "actedInMovies_NOT", type: "MovieWhere")
  """Return People where one of the related Movies match this filter"""
  actedInMovies_SINGLE: MovieWhere @source(subgraph: "Movies", name: "actedInMovies_SINGLE", type: "MovieWhere")
  """Return People where some of the related Movies match this filter"""
  actedInMovies_SOME: MovieWhere @source(subgraph: "Movies", name: "actedInMovies_SOME", type: "MovieWhere")
  born: BigInt @source(subgraph: "Movies", name: "born", type: "BigInt")
  born_GT: BigInt @source(subgraph: "Movies", name: "born_GT", type: "BigInt")
  born_GTE: BigInt @source(subgraph: "Movies", name: "born_GTE", type: "BigInt")
  born_IN: [BigInt] @source(subgraph: "Movies", name: "born_IN", type: "[BigInt]")
  born_LT: BigInt @source(subgraph: "Movies", name: "born_LT", type: "BigInt")
  born_LTE: BigInt @source(subgraph: "Movies", name: "born_LTE", type: "BigInt")
  born_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "born_NOT", type: "BigInt")
  born_NOT_IN: [BigInt] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "born_NOT_IN", type: "[BigInt]")
  directedMovies: MovieWhere @deprecated(reason: "Use \`directedMovies_SOME\` instead.") @source(subgraph: "Movies", name: "directedMovies", type: "MovieWhere")
  directedMoviesAggregate: PersonDirectedMoviesAggregateInput @source(subgraph: "Movies", name: "directedMoviesAggregate", type: "PersonDirectedMoviesAggregateInput")
  directedMoviesConnection: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Use \`directedMoviesConnection_SOME\` instead.") @source(subgraph: "Movies", name: "directedMoviesConnection", type: "PersonDirectedMoviesConnectionWhere")
  """
  Return People where all of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_ALL: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "directedMoviesConnection_ALL", type: "PersonDirectedMoviesConnectionWhere")
  """
  Return People where none of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_NONE: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "directedMoviesConnection_NONE", type: "PersonDirectedMoviesConnectionWhere")
  directedMoviesConnection_NOT: PersonDirectedMoviesConnectionWhere @deprecated(reason: "Use \`directedMoviesConnection_NONE\` instead.") @source(subgraph: "Movies", name: "directedMoviesConnection_NOT", type: "PersonDirectedMoviesConnectionWhere")
  """
  Return People where one of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SINGLE: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "directedMoviesConnection_SINGLE", type: "PersonDirectedMoviesConnectionWhere")
  """
  Return People where some of the related PersonDirectedMoviesConnections match this filter
  """
  directedMoviesConnection_SOME: PersonDirectedMoviesConnectionWhere @source(subgraph: "Movies", name: "directedMoviesConnection_SOME", type: "PersonDirectedMoviesConnectionWhere")
  """Return People where all of the related Movies match this filter"""
  directedMovies_ALL: MovieWhere @source(subgraph: "Movies", name: "directedMovies_ALL", type: "MovieWhere")
  """Return People where none of the related Movies match this filter"""
  directedMovies_NONE: MovieWhere @source(subgraph: "Movies", name: "directedMovies_NONE", type: "MovieWhere")
  directedMovies_NOT: MovieWhere @deprecated(reason: "Use \`directedMovies_NONE\` instead.") @source(subgraph: "Movies", name: "directedMovies_NOT", type: "MovieWhere")
  """Return People where one of the related Movies match this filter"""
  directedMovies_SINGLE: MovieWhere @source(subgraph: "Movies", name: "directedMovies_SINGLE", type: "MovieWhere")
  """Return People where some of the related Movies match this filter"""
  directedMovies_SOME: MovieWhere @source(subgraph: "Movies", name: "directedMovies_SOME", type: "MovieWhere")
  followsPeople: PersonWhere @deprecated(reason: "Use \`followsPeople_SOME\` instead.") @source(subgraph: "Movies", name: "followsPeople", type: "PersonWhere")
  followsPeopleAggregate: PersonFollowsPeopleAggregateInput @source(subgraph: "Movies", name: "followsPeopleAggregate", type: "PersonFollowsPeopleAggregateInput")
  followsPeopleConnection: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Use \`followsPeopleConnection_SOME\` instead.") @source(subgraph: "Movies", name: "followsPeopleConnection", type: "PersonFollowsPeopleConnectionWhere")
  """
  Return People where all of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_ALL: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "followsPeopleConnection_ALL", type: "PersonFollowsPeopleConnectionWhere")
  """
  Return People where none of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_NONE: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "followsPeopleConnection_NONE", type: "PersonFollowsPeopleConnectionWhere")
  followsPeopleConnection_NOT: PersonFollowsPeopleConnectionWhere @deprecated(reason: "Use \`followsPeopleConnection_NONE\` instead.") @source(subgraph: "Movies", name: "followsPeopleConnection_NOT", type: "PersonFollowsPeopleConnectionWhere")
  """
  Return People where one of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SINGLE: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "followsPeopleConnection_SINGLE", type: "PersonFollowsPeopleConnectionWhere")
  """
  Return People where some of the related PersonFollowsPeopleConnections match this filter
  """
  followsPeopleConnection_SOME: PersonFollowsPeopleConnectionWhere @source(subgraph: "Movies", name: "followsPeopleConnection_SOME", type: "PersonFollowsPeopleConnectionWhere")
  """Return People where all of the related People match this filter"""
  followsPeople_ALL: PersonWhere @source(subgraph: "Movies", name: "followsPeople_ALL", type: "PersonWhere")
  """Return People where none of the related People match this filter"""
  followsPeople_NONE: PersonWhere @source(subgraph: "Movies", name: "followsPeople_NONE", type: "PersonWhere")
  followsPeople_NOT: PersonWhere @deprecated(reason: "Use \`followsPeople_NONE\` instead.") @source(subgraph: "Movies", name: "followsPeople_NOT", type: "PersonWhere")
  """Return People where one of the related People match this filter"""
  followsPeople_SINGLE: PersonWhere @source(subgraph: "Movies", name: "followsPeople_SINGLE", type: "PersonWhere")
  """Return People where some of the related People match this filter"""
  followsPeople_SOME: PersonWhere @source(subgraph: "Movies", name: "followsPeople_SOME", type: "PersonWhere")
  name: String @source(subgraph: "Movies", name: "name", type: "String")
  name_CONTAINS: String @source(subgraph: "Movies", name: "name_CONTAINS", type: "String")
  name_ENDS_WITH: String @source(subgraph: "Movies", name: "name_ENDS_WITH", type: "String")
  name_IN: [String!] @source(subgraph: "Movies", name: "name_IN", type: "[String!]")
  name_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "name_NOT", type: "String")
  name_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "name_NOT_CONTAINS", type: "String")
  name_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "name_NOT_ENDS_WITH", type: "String")
  name_NOT_IN: [String!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "name_NOT_IN", type: "[String!]")
  name_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "name_NOT_STARTS_WITH", type: "String")
  name_STARTS_WITH: String @source(subgraph: "Movies", name: "name_STARTS_WITH", type: "String")
  peopleFollows: PersonWhere @deprecated(reason: "Use \`peopleFollows_SOME\` instead.") @source(subgraph: "Movies", name: "peopleFollows", type: "PersonWhere")
  peopleFollowsAggregate: PersonPeopleFollowsAggregateInput @source(subgraph: "Movies", name: "peopleFollowsAggregate", type: "PersonPeopleFollowsAggregateInput")
  peopleFollowsConnection: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Use \`peopleFollowsConnection_SOME\` instead.") @source(subgraph: "Movies", name: "peopleFollowsConnection", type: "PersonPeopleFollowsConnectionWhere")
  """
  Return People where all of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_ALL: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "peopleFollowsConnection_ALL", type: "PersonPeopleFollowsConnectionWhere")
  """
  Return People where none of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_NONE: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "peopleFollowsConnection_NONE", type: "PersonPeopleFollowsConnectionWhere")
  peopleFollowsConnection_NOT: PersonPeopleFollowsConnectionWhere @deprecated(reason: "Use \`peopleFollowsConnection_NONE\` instead.") @source(subgraph: "Movies", name: "peopleFollowsConnection_NOT", type: "PersonPeopleFollowsConnectionWhere")
  """
  Return People where one of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SINGLE: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "peopleFollowsConnection_SINGLE", type: "PersonPeopleFollowsConnectionWhere")
  """
  Return People where some of the related PersonPeopleFollowsConnections match this filter
  """
  peopleFollowsConnection_SOME: PersonPeopleFollowsConnectionWhere @source(subgraph: "Movies", name: "peopleFollowsConnection_SOME", type: "PersonPeopleFollowsConnectionWhere")
  """Return People where all of the related People match this filter"""
  peopleFollows_ALL: PersonWhere @source(subgraph: "Movies", name: "peopleFollows_ALL", type: "PersonWhere")
  """Return People where none of the related People match this filter"""
  peopleFollows_NONE: PersonWhere @source(subgraph: "Movies", name: "peopleFollows_NONE", type: "PersonWhere")
  peopleFollows_NOT: PersonWhere @deprecated(reason: "Use \`peopleFollows_NONE\` instead.") @source(subgraph: "Movies", name: "peopleFollows_NOT", type: "PersonWhere")
  """Return People where one of the related People match this filter"""
  peopleFollows_SINGLE: PersonWhere @source(subgraph: "Movies", name: "peopleFollows_SINGLE", type: "PersonWhere")
  """Return People where some of the related People match this filter"""
  peopleFollows_SOME: PersonWhere @source(subgraph: "Movies", name: "peopleFollows_SOME", type: "PersonWhere")
  producedMovies: MovieWhere @deprecated(reason: "Use \`producedMovies_SOME\` instead.") @source(subgraph: "Movies", name: "producedMovies", type: "MovieWhere")
  producedMoviesAggregate: PersonProducedMoviesAggregateInput @source(subgraph: "Movies", name: "producedMoviesAggregate", type: "PersonProducedMoviesAggregateInput")
  producedMoviesConnection: PersonProducedMoviesConnectionWhere @deprecated(reason: "Use \`producedMoviesConnection_SOME\` instead.") @source(subgraph: "Movies", name: "producedMoviesConnection", type: "PersonProducedMoviesConnectionWhere")
  """
  Return People where all of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_ALL: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "producedMoviesConnection_ALL", type: "PersonProducedMoviesConnectionWhere")
  """
  Return People where none of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_NONE: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "producedMoviesConnection_NONE", type: "PersonProducedMoviesConnectionWhere")
  producedMoviesConnection_NOT: PersonProducedMoviesConnectionWhere @deprecated(reason: "Use \`producedMoviesConnection_NONE\` instead.") @source(subgraph: "Movies", name: "producedMoviesConnection_NOT", type: "PersonProducedMoviesConnectionWhere")
  """
  Return People where one of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SINGLE: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "producedMoviesConnection_SINGLE", type: "PersonProducedMoviesConnectionWhere")
  """
  Return People where some of the related PersonProducedMoviesConnections match this filter
  """
  producedMoviesConnection_SOME: PersonProducedMoviesConnectionWhere @source(subgraph: "Movies", name: "producedMoviesConnection_SOME", type: "PersonProducedMoviesConnectionWhere")
  """Return People where all of the related Movies match this filter"""
  producedMovies_ALL: MovieWhere @source(subgraph: "Movies", name: "producedMovies_ALL", type: "MovieWhere")
  """Return People where none of the related Movies match this filter"""
  producedMovies_NONE: MovieWhere @source(subgraph: "Movies", name: "producedMovies_NONE", type: "MovieWhere")
  producedMovies_NOT: MovieWhere @deprecated(reason: "Use \`producedMovies_NONE\` instead.") @source(subgraph: "Movies", name: "producedMovies_NOT", type: "MovieWhere")
  """Return People where one of the related Movies match this filter"""
  producedMovies_SINGLE: MovieWhere @source(subgraph: "Movies", name: "producedMovies_SINGLE", type: "MovieWhere")
  """Return People where some of the related Movies match this filter"""
  producedMovies_SOME: MovieWhere @source(subgraph: "Movies", name: "producedMovies_SOME", type: "MovieWhere")
  reviewedMovies: MovieWhere @deprecated(reason: "Use \`reviewedMovies_SOME\` instead.") @source(subgraph: "Movies", name: "reviewedMovies", type: "MovieWhere")
  reviewedMoviesAggregate: PersonReviewedMoviesAggregateInput @source(subgraph: "Movies", name: "reviewedMoviesAggregate", type: "PersonReviewedMoviesAggregateInput")
  reviewedMoviesConnection: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Use \`reviewedMoviesConnection_SOME\` instead.") @source(subgraph: "Movies", name: "reviewedMoviesConnection", type: "PersonReviewedMoviesConnectionWhere")
  """
  Return People where all of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_ALL: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "reviewedMoviesConnection_ALL", type: "PersonReviewedMoviesConnectionWhere")
  """
  Return People where none of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_NONE: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "reviewedMoviesConnection_NONE", type: "PersonReviewedMoviesConnectionWhere")
  reviewedMoviesConnection_NOT: PersonReviewedMoviesConnectionWhere @deprecated(reason: "Use \`reviewedMoviesConnection_NONE\` instead.") @source(subgraph: "Movies", name: "reviewedMoviesConnection_NOT", type: "PersonReviewedMoviesConnectionWhere")
  """
  Return People where one of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SINGLE: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "reviewedMoviesConnection_SINGLE", type: "PersonReviewedMoviesConnectionWhere")
  """
  Return People where some of the related PersonReviewedMoviesConnections match this filter
  """
  reviewedMoviesConnection_SOME: PersonReviewedMoviesConnectionWhere @source(subgraph: "Movies", name: "reviewedMoviesConnection_SOME", type: "PersonReviewedMoviesConnectionWhere")
  """Return People where all of the related Movies match this filter"""
  reviewedMovies_ALL: MovieWhere @source(subgraph: "Movies", name: "reviewedMovies_ALL", type: "MovieWhere")
  """Return People where none of the related Movies match this filter"""
  reviewedMovies_NONE: MovieWhere @source(subgraph: "Movies", name: "reviewedMovies_NONE", type: "MovieWhere")
  reviewedMovies_NOT: MovieWhere @deprecated(reason: "Use \`reviewedMovies_NONE\` instead.") @source(subgraph: "Movies", name: "reviewedMovies_NOT", type: "MovieWhere")
  """Return People where one of the related Movies match this filter"""
  reviewedMovies_SINGLE: MovieWhere @source(subgraph: "Movies", name: "reviewedMovies_SINGLE", type: "MovieWhere")
  """Return People where some of the related Movies match this filter"""
  reviewedMovies_SOME: MovieWhere @source(subgraph: "Movies", name: "reviewedMovies_SOME", type: "MovieWhere")
  wroteMovies: MovieWhere @deprecated(reason: "Use \`wroteMovies_SOME\` instead.") @source(subgraph: "Movies", name: "wroteMovies", type: "MovieWhere")
  wroteMoviesAggregate: PersonWroteMoviesAggregateInput @source(subgraph: "Movies", name: "wroteMoviesAggregate", type: "PersonWroteMoviesAggregateInput")
  wroteMoviesConnection: PersonWroteMoviesConnectionWhere @deprecated(reason: "Use \`wroteMoviesConnection_SOME\` instead.") @source(subgraph: "Movies", name: "wroteMoviesConnection", type: "PersonWroteMoviesConnectionWhere")
  """
  Return People where all of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_ALL: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "wroteMoviesConnection_ALL", type: "PersonWroteMoviesConnectionWhere")
  """
  Return People where none of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_NONE: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "wroteMoviesConnection_NONE", type: "PersonWroteMoviesConnectionWhere")
  wroteMoviesConnection_NOT: PersonWroteMoviesConnectionWhere @deprecated(reason: "Use \`wroteMoviesConnection_NONE\` instead.") @source(subgraph: "Movies", name: "wroteMoviesConnection_NOT", type: "PersonWroteMoviesConnectionWhere")
  """
  Return People where one of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SINGLE: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "wroteMoviesConnection_SINGLE", type: "PersonWroteMoviesConnectionWhere")
  """
  Return People where some of the related PersonWroteMoviesConnections match this filter
  """
  wroteMoviesConnection_SOME: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "wroteMoviesConnection_SOME", type: "PersonWroteMoviesConnectionWhere")
  """Return People where all of the related Movies match this filter"""
  wroteMovies_ALL: MovieWhere @source(subgraph: "Movies", name: "wroteMovies_ALL", type: "MovieWhere")
  """Return People where none of the related Movies match this filter"""
  wroteMovies_NONE: MovieWhere @source(subgraph: "Movies", name: "wroteMovies_NONE", type: "MovieWhere")
  wroteMovies_NOT: MovieWhere @deprecated(reason: "Use \`wroteMovies_NONE\` instead.") @source(subgraph: "Movies", name: "wroteMovies_NOT", type: "MovieWhere")
  """Return People where one of the related Movies match this filter"""
  wroteMovies_SINGLE: MovieWhere @source(subgraph: "Movies", name: "wroteMovies_SINGLE", type: "MovieWhere")
  """Return People where some of the related Movies match this filter"""
  wroteMovies_SOME: MovieWhere @source(subgraph: "Movies", name: "wroteMovies_SOME", type: "MovieWhere")
}

input PersonWroteMoviesAggregateInput @source(subgraph: "Movies", name: "PersonWroteMoviesAggregateInput") {
  AND: [PersonWroteMoviesAggregateInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonWroteMoviesAggregateInput!]")
  NOT: PersonWroteMoviesAggregateInput @source(subgraph: "Movies", name: "NOT", type: "PersonWroteMoviesAggregateInput")
  OR: [PersonWroteMoviesAggregateInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonWroteMoviesAggregateInput!]")
  count: Int @source(subgraph: "Movies", name: "count", type: "Int")
  count_GT: Int @source(subgraph: "Movies", name: "count_GT", type: "Int")
  count_GTE: Int @source(subgraph: "Movies", name: "count_GTE", type: "Int")
  count_LT: Int @source(subgraph: "Movies", name: "count_LT", type: "Int")
  count_LTE: Int @source(subgraph: "Movies", name: "count_LTE", type: "Int")
  node: PersonWroteMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "node", type: "PersonWroteMoviesNodeAggregationWhereInput")
}

input PersonWroteMoviesConnectFieldInput @source(subgraph: "Movies", name: "PersonWroteMoviesConnectFieldInput") {
  connect: [MovieConnectInput!] @source(subgraph: "Movies", name: "connect", type: "[MovieConnectInput!]")
  """
  Whether or not to overwrite any matching relationship with the new properties.
  """
  overwrite: Boolean! = true @source(subgraph: "Movies", name: "overwrite", type: "Boolean!")
  where: MovieConnectWhere @source(subgraph: "Movies", name: "where", type: "MovieConnectWhere")
}

type PersonWroteMoviesConnection @source(subgraph: "Movies", name: "PersonWroteMoviesConnection") {
  edges: [PersonWroteMoviesRelationship!]! @source(subgraph: "Movies", name: "edges", type: "[PersonWroteMoviesRelationship!]!")
  pageInfo: PageInfo! @source(subgraph: "Movies", name: "pageInfo", type: "PageInfo!")
  totalCount: Int! @source(subgraph: "Movies", name: "totalCount", type: "Int!")
}

input PersonWroteMoviesConnectionSort @source(subgraph: "Movies", name: "PersonWroteMoviesConnectionSort") {
  node: MovieSort @source(subgraph: "Movies", name: "node", type: "MovieSort")
}

input PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "PersonWroteMoviesConnectionWhere") {
  AND: [PersonWroteMoviesConnectionWhere!] @source(subgraph: "Movies", name: "AND", type: "[PersonWroteMoviesConnectionWhere!]")
  NOT: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "NOT", type: "PersonWroteMoviesConnectionWhere")
  OR: [PersonWroteMoviesConnectionWhere!] @source(subgraph: "Movies", name: "OR", type: "[PersonWroteMoviesConnectionWhere!]")
  node: MovieWhere @source(subgraph: "Movies", name: "node", type: "MovieWhere")
  node_NOT: MovieWhere @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "node_NOT", type: "MovieWhere")
}

input PersonWroteMoviesCreateFieldInput @source(subgraph: "Movies", name: "PersonWroteMoviesCreateFieldInput") {
  node: MovieCreateInput! @source(subgraph: "Movies", name: "node", type: "MovieCreateInput!")
}

input PersonWroteMoviesDeleteFieldInput @source(subgraph: "Movies", name: "PersonWroteMoviesDeleteFieldInput") {
  delete: MovieDeleteInput @source(subgraph: "Movies", name: "delete", type: "MovieDeleteInput")
  where: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonWroteMoviesConnectionWhere")
}

input PersonWroteMoviesDisconnectFieldInput @source(subgraph: "Movies", name: "PersonWroteMoviesDisconnectFieldInput") {
  disconnect: MovieDisconnectInput @source(subgraph: "Movies", name: "disconnect", type: "MovieDisconnectInput")
  where: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonWroteMoviesConnectionWhere")
}

input PersonWroteMoviesFieldInput @source(subgraph: "Movies", name: "PersonWroteMoviesFieldInput") {
  connect: [PersonWroteMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonWroteMoviesConnectFieldInput!]")
  create: [PersonWroteMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonWroteMoviesCreateFieldInput!]")
}

input PersonWroteMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "PersonWroteMoviesNodeAggregationWhereInput") {
  AND: [PersonWroteMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[PersonWroteMoviesNodeAggregationWhereInput!]")
  NOT: PersonWroteMoviesNodeAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "PersonWroteMoviesNodeAggregationWhereInput")
  OR: [PersonWroteMoviesNodeAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[PersonWroteMoviesNodeAggregationWhereInput!]")
  released_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_EQUAL", type: "BigInt")
  released_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GT", type: "BigInt")
  released_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_GTE", type: "BigInt")
  released_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LT", type: "BigInt")
  released_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "released_AVERAGE_LTE", type: "BigInt")
  released_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_EQUAL", type: "BigInt")
  released_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GT", type: "BigInt")
  released_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_GTE", type: "BigInt")
  released_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LT", type: "BigInt")
  released_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "released_LTE", type: "BigInt")
  released_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MAX_EQUAL", type: "BigInt")
  released_MAX_GT: BigInt @source(subgraph: "Movies", name: "released_MAX_GT", type: "BigInt")
  released_MAX_GTE: BigInt @source(subgraph: "Movies", name: "released_MAX_GTE", type: "BigInt")
  released_MAX_LT: BigInt @source(subgraph: "Movies", name: "released_MAX_LT", type: "BigInt")
  released_MAX_LTE: BigInt @source(subgraph: "Movies", name: "released_MAX_LTE", type: "BigInt")
  released_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "released_MIN_EQUAL", type: "BigInt")
  released_MIN_GT: BigInt @source(subgraph: "Movies", name: "released_MIN_GT", type: "BigInt")
  released_MIN_GTE: BigInt @source(subgraph: "Movies", name: "released_MIN_GTE", type: "BigInt")
  released_MIN_LT: BigInt @source(subgraph: "Movies", name: "released_MIN_LT", type: "BigInt")
  released_MIN_LTE: BigInt @source(subgraph: "Movies", name: "released_MIN_LTE", type: "BigInt")
  released_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "released_SUM_EQUAL", type: "BigInt")
  released_SUM_GT: BigInt @source(subgraph: "Movies", name: "released_SUM_GT", type: "BigInt")
  released_SUM_GTE: BigInt @source(subgraph: "Movies", name: "released_SUM_GTE", type: "BigInt")
  released_SUM_LT: BigInt @source(subgraph: "Movies", name: "released_SUM_LT", type: "BigInt")
  released_SUM_LTE: BigInt @source(subgraph: "Movies", name: "released_SUM_LTE", type: "BigInt")
  tagline_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_EQUAL", type: "Float")
  tagline_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GT", type: "Float")
  tagline_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_EQUAL", type: "Float")
  tagline_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GT", type: "Float")
  tagline_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_GTE", type: "Float")
  tagline_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LT", type: "Float")
  tagline_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "tagline_AVERAGE_LENGTH_LTE", type: "Float")
  tagline_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LT", type: "Float")
  tagline_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_AVERAGE_LTE", type: "Float")
  tagline_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_EQUAL", type: "String")
  tagline_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GT", type: "Int")
  tagline_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_GTE", type: "Int")
  tagline_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_EQUAL", type: "Int")
  tagline_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GT", type: "Int")
  tagline_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_GTE", type: "Int")
  tagline_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_EQUAL", type: "Int")
  tagline_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GT", type: "Int")
  tagline_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_GTE", type: "Int")
  tagline_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LT", type: "Int")
  tagline_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_LONGEST_LENGTH_LTE", type: "Int")
  tagline_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LT", type: "Int")
  tagline_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_LONGEST_LTE", type: "Int")
  tagline_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LT", type: "Int")
  tagline_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "tagline_LTE", type: "Int")
  tagline_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_EQUAL", type: "Int")
  tagline_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GT", type: "Int")
  tagline_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_EQUAL", type: "Int")
  tagline_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GT", type: "Int")
  tagline_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_GTE", type: "Int")
  tagline_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LT", type: "Int")
  tagline_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "tagline_SHORTEST_LENGTH_LTE", type: "Int")
  tagline_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LT", type: "Int")
  tagline_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "tagline_SHORTEST_LTE", type: "Int")
  title_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_EQUAL", type: "Float")
  title_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GT", type: "Float")
  title_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_GTE", type: "Float")
  title_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_EQUAL", type: "Float")
  title_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GT", type: "Float")
  title_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_GTE", type: "Float")
  title_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LT", type: "Float")
  title_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "title_AVERAGE_LENGTH_LTE", type: "Float")
  title_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LT", type: "Float")
  title_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_AVERAGE_LTE", type: "Float")
  title_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_EQUAL", type: "String")
  title_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GT", type: "Int")
  title_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_GTE", type: "Int")
  title_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_EQUAL", type: "Int")
  title_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GT", type: "Int")
  title_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_GTE", type: "Int")
  title_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_EQUAL", type: "Int")
  title_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GT", type: "Int")
  title_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_GTE", type: "Int")
  title_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LT", type: "Int")
  title_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_LONGEST_LENGTH_LTE", type: "Int")
  title_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LT", type: "Int")
  title_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_LONGEST_LTE", type: "Int")
  title_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LT", type: "Int")
  title_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "title_LTE", type: "Int")
  title_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_EQUAL", type: "Int")
  title_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GT", type: "Int")
  title_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_GTE", type: "Int")
  title_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_EQUAL", type: "Int")
  title_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GT", type: "Int")
  title_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_GTE", type: "Int")
  title_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LT", type: "Int")
  title_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "title_SHORTEST_LENGTH_LTE", type: "Int")
  title_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LT", type: "Int")
  title_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "title_SHORTEST_LTE", type: "Int")
  votes_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_EQUAL", type: "BigInt")
  votes_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GT", type: "BigInt")
  votes_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_GTE", type: "BigInt")
  votes_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LT", type: "BigInt")
  votes_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "votes_AVERAGE_LTE", type: "BigInt")
  votes_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_EQUAL", type: "BigInt")
  votes_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GT", type: "BigInt")
  votes_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_GTE", type: "BigInt")
  votes_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LT", type: "BigInt")
  votes_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "votes_LTE", type: "BigInt")
  votes_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MAX_EQUAL", type: "BigInt")
  votes_MAX_GT: BigInt @source(subgraph: "Movies", name: "votes_MAX_GT", type: "BigInt")
  votes_MAX_GTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_GTE", type: "BigInt")
  votes_MAX_LT: BigInt @source(subgraph: "Movies", name: "votes_MAX_LT", type: "BigInt")
  votes_MAX_LTE: BigInt @source(subgraph: "Movies", name: "votes_MAX_LTE", type: "BigInt")
  votes_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_MIN_EQUAL", type: "BigInt")
  votes_MIN_GT: BigInt @source(subgraph: "Movies", name: "votes_MIN_GT", type: "BigInt")
  votes_MIN_GTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_GTE", type: "BigInt")
  votes_MIN_LT: BigInt @source(subgraph: "Movies", name: "votes_MIN_LT", type: "BigInt")
  votes_MIN_LTE: BigInt @source(subgraph: "Movies", name: "votes_MIN_LTE", type: "BigInt")
  votes_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "votes_SUM_EQUAL", type: "BigInt")
  votes_SUM_GT: BigInt @source(subgraph: "Movies", name: "votes_SUM_GT", type: "BigInt")
  votes_SUM_GTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_GTE", type: "BigInt")
  votes_SUM_LT: BigInt @source(subgraph: "Movies", name: "votes_SUM_LT", type: "BigInt")
  votes_SUM_LTE: BigInt @source(subgraph: "Movies", name: "votes_SUM_LTE", type: "BigInt")
}

type PersonWroteMoviesRelationship @source(subgraph: "Movies", name: "PersonWroteMoviesRelationship") {
  cursor: String! @source(subgraph: "Movies", name: "cursor", type: "String!")
  node: Movie! @source(subgraph: "Movies", name: "node", type: "Movie!")
}

input PersonWroteMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "PersonWroteMoviesUpdateConnectionInput") {
  node: MovieUpdateInput @source(subgraph: "Movies", name: "node", type: "MovieUpdateInput")
}

input PersonWroteMoviesUpdateFieldInput @source(subgraph: "Movies", name: "PersonWroteMoviesUpdateFieldInput") {
  connect: [PersonWroteMoviesConnectFieldInput!] @source(subgraph: "Movies", name: "connect", type: "[PersonWroteMoviesConnectFieldInput!]")
  create: [PersonWroteMoviesCreateFieldInput!] @source(subgraph: "Movies", name: "create", type: "[PersonWroteMoviesCreateFieldInput!]")
  delete: [PersonWroteMoviesDeleteFieldInput!] @source(subgraph: "Movies", name: "delete", type: "[PersonWroteMoviesDeleteFieldInput!]")
  disconnect: [PersonWroteMoviesDisconnectFieldInput!] @source(subgraph: "Movies", name: "disconnect", type: "[PersonWroteMoviesDisconnectFieldInput!]")
  update: PersonWroteMoviesUpdateConnectionInput @source(subgraph: "Movies", name: "update", type: "PersonWroteMoviesUpdateConnectionInput")
  where: PersonWroteMoviesConnectionWhere @source(subgraph: "Movies", name: "where", type: "PersonWroteMoviesConnectionWhere")
}

type Query {
  movies(options: MovieOptions, where: MovieWhere): [Movie!]! @resolver(subgraph: "Movies", operation: "query movies($where: MovieWhere, $options: MovieOptions) { movies(where: $where, options: $options) }") @source(subgraph: "Movies", name: "movies", type: "[Movie!]!")
  moviesAggregate(where: MovieWhere): MovieAggregateSelection! @resolver(subgraph: "Movies", operation: "query moviesAggregate($where: MovieWhere) { moviesAggregate(where: $where) }") @source(subgraph: "Movies", name: "moviesAggregate", type: "MovieAggregateSelection!")
  moviesConnection(after: String, first: Int, sort: [MovieSort], where: MovieWhere): MoviesConnection! @resolver(subgraph: "Movies", operation: "query moviesConnection($first: Int, $after: String, $where: MovieWhere, $sort: [MovieSort]) { moviesConnection(first: $first, after: $after, where: $where, sort: $sort) }") @source(subgraph: "Movies", name: "moviesConnection", type: "MoviesConnection!")
  people(options: PersonOptions, where: PersonWhere): [Person!]! @resolver(subgraph: "Movies", operation: "query people($where: PersonWhere, $options: PersonOptions) { people(where: $where, options: $options) }") @source(subgraph: "Movies", name: "people", type: "[Person!]!")
  peopleAggregate(where: PersonWhere): PersonAggregateSelection! @resolver(subgraph: "Movies", operation: "query peopleAggregate($where: PersonWhere) { peopleAggregate(where: $where) }") @source(subgraph: "Movies", name: "peopleAggregate", type: "PersonAggregateSelection!")
  peopleConnection(after: String, first: Int, sort: [PersonSort], where: PersonWhere): PeopleConnection! @resolver(subgraph: "Movies", operation: "query peopleConnection($first: Int, $after: String, $where: PersonWhere, $sort: [PersonSort]) { peopleConnection(first: $first, after: $after, where: $where, sort: $sort) }") @source(subgraph: "Movies", name: "peopleConnection", type: "PeopleConnection!")
}

"""
The edge properties for the following fields:
* Movie.peopleReviewed
* Person.reviewedMovies
"""
type ReviewedProperties @relationshipProperties @introspection @source(subgraph: "Movies", name: "ReviewedProperties") {
  rating: BigInt! @introspection @source(subgraph: "Movies", name: "rating", type: "BigInt!")
  summary: String! @introspection @source(subgraph: "Movies", name: "summary", type: "String!")
}

input ReviewedPropertiesAggregationWhereInput @source(subgraph: "Movies", name: "ReviewedPropertiesAggregationWhereInput") {
  AND: [ReviewedPropertiesAggregationWhereInput!] @source(subgraph: "Movies", name: "AND", type: "[ReviewedPropertiesAggregationWhereInput!]")
  NOT: ReviewedPropertiesAggregationWhereInput @source(subgraph: "Movies", name: "NOT", type: "ReviewedPropertiesAggregationWhereInput")
  OR: [ReviewedPropertiesAggregationWhereInput!] @source(subgraph: "Movies", name: "OR", type: "[ReviewedPropertiesAggregationWhereInput!]")
  rating_AVERAGE_EQUAL: BigInt @source(subgraph: "Movies", name: "rating_AVERAGE_EQUAL", type: "BigInt")
  rating_AVERAGE_GT: BigInt @source(subgraph: "Movies", name: "rating_AVERAGE_GT", type: "BigInt")
  rating_AVERAGE_GTE: BigInt @source(subgraph: "Movies", name: "rating_AVERAGE_GTE", type: "BigInt")
  rating_AVERAGE_LT: BigInt @source(subgraph: "Movies", name: "rating_AVERAGE_LT", type: "BigInt")
  rating_AVERAGE_LTE: BigInt @source(subgraph: "Movies", name: "rating_AVERAGE_LTE", type: "BigInt")
  rating_EQUAL: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "rating_EQUAL", type: "BigInt")
  rating_GT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "rating_GT", type: "BigInt")
  rating_GTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "rating_GTE", type: "BigInt")
  rating_LT: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "rating_LT", type: "BigInt")
  rating_LTE: BigInt @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "rating_LTE", type: "BigInt")
  rating_MAX_EQUAL: BigInt @source(subgraph: "Movies", name: "rating_MAX_EQUAL", type: "BigInt")
  rating_MAX_GT: BigInt @source(subgraph: "Movies", name: "rating_MAX_GT", type: "BigInt")
  rating_MAX_GTE: BigInt @source(subgraph: "Movies", name: "rating_MAX_GTE", type: "BigInt")
  rating_MAX_LT: BigInt @source(subgraph: "Movies", name: "rating_MAX_LT", type: "BigInt")
  rating_MAX_LTE: BigInt @source(subgraph: "Movies", name: "rating_MAX_LTE", type: "BigInt")
  rating_MIN_EQUAL: BigInt @source(subgraph: "Movies", name: "rating_MIN_EQUAL", type: "BigInt")
  rating_MIN_GT: BigInt @source(subgraph: "Movies", name: "rating_MIN_GT", type: "BigInt")
  rating_MIN_GTE: BigInt @source(subgraph: "Movies", name: "rating_MIN_GTE", type: "BigInt")
  rating_MIN_LT: BigInt @source(subgraph: "Movies", name: "rating_MIN_LT", type: "BigInt")
  rating_MIN_LTE: BigInt @source(subgraph: "Movies", name: "rating_MIN_LTE", type: "BigInt")
  rating_SUM_EQUAL: BigInt @source(subgraph: "Movies", name: "rating_SUM_EQUAL", type: "BigInt")
  rating_SUM_GT: BigInt @source(subgraph: "Movies", name: "rating_SUM_GT", type: "BigInt")
  rating_SUM_GTE: BigInt @source(subgraph: "Movies", name: "rating_SUM_GTE", type: "BigInt")
  rating_SUM_LT: BigInt @source(subgraph: "Movies", name: "rating_SUM_LT", type: "BigInt")
  rating_SUM_LTE: BigInt @source(subgraph: "Movies", name: "rating_SUM_LTE", type: "BigInt")
  summary_AVERAGE_EQUAL: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_AVERAGE_EQUAL", type: "Float")
  summary_AVERAGE_GT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_AVERAGE_GT", type: "Float")
  summary_AVERAGE_GTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_AVERAGE_GTE", type: "Float")
  summary_AVERAGE_LENGTH_EQUAL: Float @source(subgraph: "Movies", name: "summary_AVERAGE_LENGTH_EQUAL", type: "Float")
  summary_AVERAGE_LENGTH_GT: Float @source(subgraph: "Movies", name: "summary_AVERAGE_LENGTH_GT", type: "Float")
  summary_AVERAGE_LENGTH_GTE: Float @source(subgraph: "Movies", name: "summary_AVERAGE_LENGTH_GTE", type: "Float")
  summary_AVERAGE_LENGTH_LT: Float @source(subgraph: "Movies", name: "summary_AVERAGE_LENGTH_LT", type: "Float")
  summary_AVERAGE_LENGTH_LTE: Float @source(subgraph: "Movies", name: "summary_AVERAGE_LENGTH_LTE", type: "Float")
  summary_AVERAGE_LT: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_AVERAGE_LT", type: "Float")
  summary_AVERAGE_LTE: Float @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_AVERAGE_LTE", type: "Float")
  summary_EQUAL: String @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "summary_EQUAL", type: "String")
  summary_GT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "summary_GT", type: "Int")
  summary_GTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "summary_GTE", type: "Int")
  summary_LONGEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_LONGEST_EQUAL", type: "Int")
  summary_LONGEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_LONGEST_GT", type: "Int")
  summary_LONGEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_LONGEST_GTE", type: "Int")
  summary_LONGEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "summary_LONGEST_LENGTH_EQUAL", type: "Int")
  summary_LONGEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "summary_LONGEST_LENGTH_GT", type: "Int")
  summary_LONGEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "summary_LONGEST_LENGTH_GTE", type: "Int")
  summary_LONGEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "summary_LONGEST_LENGTH_LT", type: "Int")
  summary_LONGEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "summary_LONGEST_LENGTH_LTE", type: "Int")
  summary_LONGEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_LONGEST_LT", type: "Int")
  summary_LONGEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_LONGEST_LTE", type: "Int")
  summary_LT: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "summary_LT", type: "Int")
  summary_LTE: Int @deprecated(reason: "Aggregation filters that are not relying on an aggregating function will be deprecated.") @source(subgraph: "Movies", name: "summary_LTE", type: "Int")
  summary_SHORTEST_EQUAL: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_SHORTEST_EQUAL", type: "Int")
  summary_SHORTEST_GT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_SHORTEST_GT", type: "Int")
  summary_SHORTEST_GTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_SHORTEST_GTE", type: "Int")
  summary_SHORTEST_LENGTH_EQUAL: Int @source(subgraph: "Movies", name: "summary_SHORTEST_LENGTH_EQUAL", type: "Int")
  summary_SHORTEST_LENGTH_GT: Int @source(subgraph: "Movies", name: "summary_SHORTEST_LENGTH_GT", type: "Int")
  summary_SHORTEST_LENGTH_GTE: Int @source(subgraph: "Movies", name: "summary_SHORTEST_LENGTH_GTE", type: "Int")
  summary_SHORTEST_LENGTH_LT: Int @source(subgraph: "Movies", name: "summary_SHORTEST_LENGTH_LT", type: "Int")
  summary_SHORTEST_LENGTH_LTE: Int @source(subgraph: "Movies", name: "summary_SHORTEST_LENGTH_LTE", type: "Int")
  summary_SHORTEST_LT: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_SHORTEST_LT", type: "Int")
  summary_SHORTEST_LTE: Int @deprecated(reason: "Please use the explicit _LENGTH version for string aggregation.") @source(subgraph: "Movies", name: "summary_SHORTEST_LTE", type: "Int")
}

input ReviewedPropertiesCreateInput @source(subgraph: "Movies", name: "ReviewedPropertiesCreateInput") {
  rating: BigInt! @source(subgraph: "Movies", name: "rating", type: "BigInt!")
  summary: String! @source(subgraph: "Movies", name: "summary", type: "String!")
}

input ReviewedPropertiesSort @source(subgraph: "Movies", name: "ReviewedPropertiesSort") {
  rating: SortDirection @source(subgraph: "Movies", name: "rating", type: "SortDirection")
  summary: SortDirection @source(subgraph: "Movies", name: "summary", type: "SortDirection")
}

input ReviewedPropertiesUpdateInput @source(subgraph: "Movies", name: "ReviewedPropertiesUpdateInput") {
  rating: BigInt @source(subgraph: "Movies", name: "rating", type: "BigInt")
  rating_DECREMENT: BigInt @source(subgraph: "Movies", name: "rating_DECREMENT", type: "BigInt")
  rating_INCREMENT: BigInt @source(subgraph: "Movies", name: "rating_INCREMENT", type: "BigInt")
  summary: String @source(subgraph: "Movies", name: "summary", type: "String")
}

input ReviewedPropertiesWhere @source(subgraph: "Movies", name: "ReviewedPropertiesWhere") {
  AND: [ReviewedPropertiesWhere!] @source(subgraph: "Movies", name: "AND", type: "[ReviewedPropertiesWhere!]")
  NOT: ReviewedPropertiesWhere @source(subgraph: "Movies", name: "NOT", type: "ReviewedPropertiesWhere")
  OR: [ReviewedPropertiesWhere!] @source(subgraph: "Movies", name: "OR", type: "[ReviewedPropertiesWhere!]")
  rating: BigInt @source(subgraph: "Movies", name: "rating", type: "BigInt")
  rating_GT: BigInt @source(subgraph: "Movies", name: "rating_GT", type: "BigInt")
  rating_GTE: BigInt @source(subgraph: "Movies", name: "rating_GTE", type: "BigInt")
  rating_IN: [BigInt!] @source(subgraph: "Movies", name: "rating_IN", type: "[BigInt!]")
  rating_LT: BigInt @source(subgraph: "Movies", name: "rating_LT", type: "BigInt")
  rating_LTE: BigInt @source(subgraph: "Movies", name: "rating_LTE", type: "BigInt")
  rating_NOT: BigInt @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "rating_NOT", type: "BigInt")
  rating_NOT_IN: [BigInt!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "rating_NOT_IN", type: "[BigInt!]")
  summary: String @source(subgraph: "Movies", name: "summary", type: "String")
  summary_CONTAINS: String @source(subgraph: "Movies", name: "summary_CONTAINS", type: "String")
  summary_ENDS_WITH: String @source(subgraph: "Movies", name: "summary_ENDS_WITH", type: "String")
  summary_IN: [String!] @source(subgraph: "Movies", name: "summary_IN", type: "[String!]")
  summary_NOT: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "summary_NOT", type: "String")
  summary_NOT_CONTAINS: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "summary_NOT_CONTAINS", type: "String")
  summary_NOT_ENDS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "summary_NOT_ENDS_WITH", type: "String")
  summary_NOT_IN: [String!] @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "summary_NOT_IN", type: "[String!]")
  summary_NOT_STARTS_WITH: String @deprecated(reason: "Negation filters will be deprecated, use the NOT operator to achieve the same behavior") @source(subgraph: "Movies", name: "summary_NOT_STARTS_WITH", type: "String")
  summary_STARTS_WITH: String @source(subgraph: "Movies", name: "summary_STARTS_WITH", type: "String")
}

"""An enum for sorting in either ascending or descending order."""
enum SortDirection @source(subgraph: "Movies", name: "SortDirection") {
  """Sort by field values in ascending order."""
  ASC @source(subgraph: "Movies", name: "ASC")
  """Sort by field values in descending order."""
  DESC @source(subgraph: "Movies", name: "DESC")
}

type StringAggregateSelection @source(subgraph: "Movies", name: "StringAggregateSelection") {
  longest: String @source(subgraph: "Movies", name: "longest", type: "String")
  shortest: String @source(subgraph: "Movies", name: "shortest", type: "String")
}

"""
Information about the number of nodes and relationships created and deleted during an update mutation
"""
type UpdateInfo @source(subgraph: "Movies", name: "UpdateInfo") {
  bookmark: String @deprecated(reason: "This field has been deprecated because bookmarks are now handled by the driver.") @source(subgraph: "Movies", name: "bookmark", type: "String")
  nodesCreated: Int! @source(subgraph: "Movies", name: "nodesCreated", type: "Int!")
  nodesDeleted: Int! @source(subgraph: "Movies", name: "nodesDeleted", type: "Int!")
  relationshipsCreated: Int! @source(subgraph: "Movies", name: "relationshipsCreated", type: "Int!")
  relationshipsDeleted: Int! @source(subgraph: "Movies", name: "relationshipsDeleted", type: "Int!")
}

type UpdateMoviesMutationResponse @source(subgraph: "Movies", name: "UpdateMoviesMutationResponse") {
  info: UpdateInfo! @source(subgraph: "Movies", name: "info", type: "UpdateInfo!")
  movies: [Movie!]! @source(subgraph: "Movies", name: "movies", type: "[Movie!]!")
}

type UpdatePeopleMutationResponse @source(subgraph: "Movies", name: "UpdatePeopleMutationResponse") {
  info: UpdateInfo! @source(subgraph: "Movies", name: "info", type: "UpdateInfo!")
  people: [Person!]! @source(subgraph: "Movies", name: "people", type: "[Person!]!")
}

enum _RelationDirections @source(subgraph: "Movies", name: "_RelationDirections") {
  IN @source(subgraph: "Movies", name: "IN")
  OUT @source(subgraph: "Movies", name: "OUT")
}"
`;

exports[`Neo4j should give correct response for the example query 1`] = `
{
  "data": {
    "movies": [
      {
        "peopleActedIn": [
          {
            "name": "Emil Eifrem",
          },
          {
            "name": "Hugo Weaving",
          },
        ],
        "released": 1999,
        "tagline": "Welcome to the Real World",
        "title": "The Matrix",
      },
      {
        "peopleActedIn": [
          {
            "name": "Hugo Weaving",
          },
          {
            "name": "Laurence Fishburne",
          },
        ],
        "released": 2003,
        "tagline": "Free your mind",
        "title": "The Matrix Reloaded",
      },
    ],
  },
  "errors": undefined,
  "extensions": undefined,
}
`;
