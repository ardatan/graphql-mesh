// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MySQL Employees should generate correct schema: schema 1`] = `
"schema @transport(subgraph: "Employees", kind: "mysql", location: "mysql://root:passwd@localhost:33306/employees") {
  query: Query
  mutation: Mutation
}

directive @transport(subgraph: String, kind: String, location: String) repeatable on SCHEMA

directive @mysqlSelect(subgraph: String, table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlInsert(subgraph: String, table: String, primaryKeys: [String]) on FIELD_DEFINITION

directive @mysqlUpdate(subgraph: String, table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlDelete(subgraph: String, table: String) on FIELD_DEFINITION

directive @mysqlTableForeign(subgraph: String, columnName: String) on FIELD_DEFINITION

directive @mysqlCount(subgraph: String, table: String) on FIELD_DEFINITION

type Query {
  current_dept_emp(limit: Int, offset: Int, where: current_dept_emp_WhereInput, orderBy: current_dept_emp_OrderByInput): [current_dept_emp] @mysqlSelect(subgraph: "Employees", table: "current_dept_emp")
  count_current_dept_emp(where: current_dept_emp_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "current_dept_emp")
  departments(limit: Int, offset: Int, where: departments_WhereInput, orderBy: departments_OrderByInput): [departments] @mysqlSelect(subgraph: "Employees", table: "departments")
  count_departments(where: departments_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "departments")
  dept_emp(limit: Int, offset: Int, where: dept_emp_WhereInput, orderBy: dept_emp_OrderByInput): [dept_emp] @mysqlSelect(subgraph: "Employees", table: "dept_emp")
  count_dept_emp(where: dept_emp_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "dept_emp")
  dept_emp_latest_date(limit: Int, offset: Int, where: dept_emp_latest_date_WhereInput, orderBy: dept_emp_latest_date_OrderByInput): [dept_emp_latest_date] @mysqlSelect(subgraph: "Employees", table: "dept_emp_latest_date")
  count_dept_emp_latest_date(where: dept_emp_latest_date_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "dept_emp_latest_date")
  dept_manager(limit: Int, offset: Int, where: dept_manager_WhereInput, orderBy: dept_manager_OrderByInput): [dept_manager] @mysqlSelect(subgraph: "Employees", table: "dept_manager")
  count_dept_manager(where: dept_manager_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "dept_manager")
  employees(limit: Int, offset: Int, where: employees_WhereInput, orderBy: employees_OrderByInput): [employees] @mysqlSelect(subgraph: "Employees", table: "employees")
  count_employees(where: employees_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "employees")
  salaries(limit: Int, offset: Int, where: salaries_WhereInput, orderBy: salaries_OrderByInput): [salaries] @mysqlSelect(subgraph: "Employees", table: "salaries")
  count_salaries(where: salaries_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "salaries")
  titles(limit: Int, offset: Int, where: titles_WhereInput, orderBy: titles_OrderByInput): [titles] @mysqlSelect(subgraph: "Employees", table: "titles")
  count_titles(where: titles_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "titles")
  v_full_departments(limit: Int, offset: Int, where: v_full_departments_WhereInput, orderBy: v_full_departments_OrderByInput): [v_full_departments] @mysqlSelect(subgraph: "Employees", table: "v_full_departments")
  count_v_full_departments(where: v_full_departments_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "v_full_departments")
  v_full_employees(limit: Int, offset: Int, where: v_full_employees_WhereInput, orderBy: v_full_employees_OrderByInput): [v_full_employees] @mysqlSelect(subgraph: "Employees", table: "v_full_employees")
  count_v_full_employees(where: v_full_employees_WhereInput): Int @mysqlCount(subgraph: "Employees", table: "v_full_employees")
}

"""VIEW"""
type current_dept_emp {
  emp_no: Int!
  dept_no: String!
  from_date: Date
  to_date: Date
}

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""VIEW"""
input current_dept_emp_WhereInput {
  emp_no: String
  dept_no: String
  from_date: String
  to_date: String
}

"""VIEW"""
input current_dept_emp_OrderByInput {
  emp_no: OrderBy
  dept_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

enum OrderBy {
  asc
  desc
}

type departments {
  dept_no: String!
  dept_name: String!
  dept_emp(limit: Int, offset: Int, where: dept_emp_WhereInput, orderBy: dept_emp_OrderByInput): [dept_emp] @mysqlSelect(subgraph: "Employees", table: "dept_emp", columnMap: [["dept_no", "dept_no"]])
  dept_manager(limit: Int, offset: Int, where: dept_manager_WhereInput, orderBy: dept_manager_OrderByInput): [dept_manager] @mysqlSelect(subgraph: "Employees", table: "dept_manager", columnMap: [["dept_no", "dept_no"]])
}

type dept_emp {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
  departments(where: departments_WhereInput, orderBy: departments_OrderByInput, limit: Int, offset: Int): [departments] @mysqlSelect(subgraph: "Employees", table: "departments", columnMap: [["dept_no", "dept_no"]]) @mysqlTableForeign(subgraph: "Employees", columnName: "dept_no")
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(subgraph: "Employees", table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(subgraph: "Employees", columnName: "emp_no")
}

input departments_WhereInput {
  dept_no: String
  dept_name: String
}

input departments_OrderByInput {
  dept_no: OrderBy
  dept_name: OrderBy
}

type employees {
  emp_no: Int!
  birth_date: Date!
  first_name: String!
  last_name: String!
  gender: employees_gender!
  hire_date: Date!
  dept_emp(limit: Int, offset: Int, where: dept_emp_WhereInput, orderBy: dept_emp_OrderByInput): [dept_emp] @mysqlSelect(subgraph: "Employees", table: "dept_emp", columnMap: [["emp_no", "emp_no"]])
  dept_manager(limit: Int, offset: Int, where: dept_manager_WhereInput, orderBy: dept_manager_OrderByInput): [dept_manager] @mysqlSelect(subgraph: "Employees", table: "dept_manager", columnMap: [["emp_no", "emp_no"]])
  salaries(limit: Int, offset: Int, where: salaries_WhereInput, orderBy: salaries_OrderByInput): [salaries] @mysqlSelect(subgraph: "Employees", table: "salaries", columnMap: [["emp_no", "emp_no"]])
  titles(limit: Int, offset: Int, where: titles_WhereInput, orderBy: titles_OrderByInput): [titles] @mysqlSelect(subgraph: "Employees", table: "titles", columnMap: [["emp_no", "emp_no"]])
}

enum employees_gender {
  M
  F
}

input dept_emp_WhereInput {
  emp_no: String
  dept_no: String
  from_date: String
  to_date: String
}

input dept_emp_OrderByInput {
  emp_no: OrderBy
  dept_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

type dept_manager {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
  departments(where: departments_WhereInput, orderBy: departments_OrderByInput, limit: Int, offset: Int): [departments] @mysqlSelect(subgraph: "Employees", table: "departments", columnMap: [["dept_no", "dept_no"]]) @mysqlTableForeign(subgraph: "Employees", columnName: "dept_no")
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(subgraph: "Employees", table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(subgraph: "Employees", columnName: "emp_no")
}

input employees_WhereInput {
  emp_no: String
  birth_date: String
  first_name: String
  last_name: String
  gender: String
  hire_date: String
}

input employees_OrderByInput {
  emp_no: OrderBy
  birth_date: OrderBy
  first_name: OrderBy
  last_name: OrderBy
  gender: OrderBy
  hire_date: OrderBy
}

input dept_manager_WhereInput {
  emp_no: String
  dept_no: String
  from_date: String
  to_date: String
}

input dept_manager_OrderByInput {
  emp_no: OrderBy
  dept_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

type salaries {
  emp_no: Int!
  salary: Int!
  from_date: Date!
  to_date: Date!
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(subgraph: "Employees", table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(subgraph: "Employees", columnName: "emp_no")
}

input salaries_WhereInput {
  emp_no: String
  salary: String
  from_date: String
  to_date: String
}

input salaries_OrderByInput {
  emp_no: OrderBy
  salary: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

type titles {
  emp_no: Int!
  title: String!
  from_date: Date!
  to_date: Date
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(subgraph: "Employees", table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(subgraph: "Employees", columnName: "emp_no")
}

input titles_WhereInput {
  emp_no: String
  title: String
  from_date: String
  to_date: String
}

input titles_OrderByInput {
  emp_no: OrderBy
  title: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

"""VIEW"""
type dept_emp_latest_date {
  emp_no: Int!
  from_date: Date
  to_date: Date
}

"""VIEW"""
input dept_emp_latest_date_WhereInput {
  emp_no: String
  from_date: String
  to_date: String
}

"""VIEW"""
input dept_emp_latest_date_OrderByInput {
  emp_no: OrderBy
  from_date: OrderBy
  to_date: OrderBy
}

"""VIEW"""
type v_full_departments {
  dept_no: String!
  dept_name: String!
  manager: String
}

"""VIEW"""
input v_full_departments_WhereInput {
  dept_no: String
  dept_name: String
  manager: String
}

"""VIEW"""
input v_full_departments_OrderByInput {
  dept_no: OrderBy
  dept_name: OrderBy
  manager: OrderBy
}

"""VIEW"""
type v_full_employees {
  emp_no: Int!
  first_name: String!
  last_name: String!
  birth_date: Date!
  gender: v_full_employees_gender!
  hire_date: Date!
  department: String
}

enum v_full_employees_gender {
  M
  F
}

"""VIEW"""
input v_full_employees_WhereInput {
  emp_no: String
  first_name: String
  last_name: String
  birth_date: String
  gender: String
  hire_date: String
  department: String
}

"""VIEW"""
input v_full_employees_OrderByInput {
  emp_no: OrderBy
  first_name: OrderBy
  last_name: OrderBy
  birth_date: OrderBy
  gender: OrderBy
  hire_date: OrderBy
  department: OrderBy
}

type Mutation {
  insert_current_dept_emp(current_dept_emp: current_dept_emp_InsertInput!): current_dept_emp @mysqlInsert(subgraph: "Employees", table: "current_dept_emp", primaryKeys: [])
  update_current_dept_emp(current_dept_emp: current_dept_emp_UpdateInput!, where: current_dept_emp_WhereInput): current_dept_emp @mysqlUpdate(subgraph: "Employees", table: "current_dept_emp")
  delete_current_dept_emp(where: current_dept_emp_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "current_dept_emp")
  insert_departments(departments: departments_InsertInput!): departments @mysqlInsert(subgraph: "Employees", table: "departments", primaryKeys: ["dept_no"])
  update_departments(departments: departments_UpdateInput!, where: departments_WhereInput): departments @mysqlUpdate(subgraph: "Employees", table: "departments")
  delete_departments(where: departments_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "departments")
  insert_dept_emp(dept_emp: dept_emp_InsertInput!): dept_emp @mysqlInsert(subgraph: "Employees", table: "dept_emp", primaryKeys: ["emp_no", "dept_no"])
  update_dept_emp(dept_emp: dept_emp_UpdateInput!, where: dept_emp_WhereInput): dept_emp @mysqlUpdate(subgraph: "Employees", table: "dept_emp")
  delete_dept_emp(where: dept_emp_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "dept_emp")
  insert_dept_emp_latest_date(dept_emp_latest_date: dept_emp_latest_date_InsertInput!): dept_emp_latest_date @mysqlInsert(subgraph: "Employees", table: "dept_emp_latest_date", primaryKeys: [])
  update_dept_emp_latest_date(dept_emp_latest_date: dept_emp_latest_date_UpdateInput!, where: dept_emp_latest_date_WhereInput): dept_emp_latest_date @mysqlUpdate(subgraph: "Employees", table: "dept_emp_latest_date")
  delete_dept_emp_latest_date(where: dept_emp_latest_date_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "dept_emp_latest_date")
  insert_dept_manager(dept_manager: dept_manager_InsertInput!): dept_manager @mysqlInsert(subgraph: "Employees", table: "dept_manager", primaryKeys: ["emp_no", "dept_no"])
  update_dept_manager(dept_manager: dept_manager_UpdateInput!, where: dept_manager_WhereInput): dept_manager @mysqlUpdate(subgraph: "Employees", table: "dept_manager")
  delete_dept_manager(where: dept_manager_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "dept_manager")
  insert_employees(employees: employees_InsertInput!): employees @mysqlInsert(subgraph: "Employees", table: "employees", primaryKeys: ["emp_no"])
  update_employees(employees: employees_UpdateInput!, where: employees_WhereInput): employees @mysqlUpdate(subgraph: "Employees", table: "employees")
  delete_employees(where: employees_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "employees")
  insert_salaries(salaries: salaries_InsertInput!): salaries @mysqlInsert(subgraph: "Employees", table: "salaries", primaryKeys: ["emp_no", "from_date"])
  update_salaries(salaries: salaries_UpdateInput!, where: salaries_WhereInput): salaries @mysqlUpdate(subgraph: "Employees", table: "salaries")
  delete_salaries(where: salaries_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "salaries")
  insert_titles(titles: titles_InsertInput!): titles @mysqlInsert(subgraph: "Employees", table: "titles", primaryKeys: ["emp_no", "title", "from_date"])
  update_titles(titles: titles_UpdateInput!, where: titles_WhereInput): titles @mysqlUpdate(subgraph: "Employees", table: "titles")
  delete_titles(where: titles_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "titles")
  insert_v_full_departments(v_full_departments: v_full_departments_InsertInput!): v_full_departments @mysqlInsert(subgraph: "Employees", table: "v_full_departments", primaryKeys: [])
  update_v_full_departments(v_full_departments: v_full_departments_UpdateInput!, where: v_full_departments_WhereInput): v_full_departments @mysqlUpdate(subgraph: "Employees", table: "v_full_departments")
  delete_v_full_departments(where: v_full_departments_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "v_full_departments")
  insert_v_full_employees(v_full_employees: v_full_employees_InsertInput!): v_full_employees @mysqlInsert(subgraph: "Employees", table: "v_full_employees", primaryKeys: [])
  update_v_full_employees(v_full_employees: v_full_employees_UpdateInput!, where: v_full_employees_WhereInput): v_full_employees @mysqlUpdate(subgraph: "Employees", table: "v_full_employees")
  delete_v_full_employees(where: v_full_employees_WhereInput): Boolean @mysqlDelete(subgraph: "Employees", table: "v_full_employees")
}

"""VIEW"""
input current_dept_emp_InsertInput {
  emp_no: Int!
  dept_no: String!
  from_date: Date
  to_date: Date
}

"""VIEW"""
input current_dept_emp_UpdateInput {
  emp_no: Int
  dept_no: String
  from_date: Date
  to_date: Date
}

input departments_InsertInput {
  dept_no: String!
  dept_name: String!
}

input departments_UpdateInput {
  dept_no: String
  dept_name: String
}

input dept_emp_InsertInput {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
}

input dept_emp_UpdateInput {
  emp_no: Int
  dept_no: String
  from_date: Date
  to_date: Date
}

"""VIEW"""
input dept_emp_latest_date_InsertInput {
  emp_no: Int!
  from_date: Date
  to_date: Date
}

"""VIEW"""
input dept_emp_latest_date_UpdateInput {
  emp_no: Int
  from_date: Date
  to_date: Date
}

input dept_manager_InsertInput {
  emp_no: Int!
  dept_no: String!
  from_date: Date!
  to_date: Date!
}

input dept_manager_UpdateInput {
  emp_no: Int
  dept_no: String
  from_date: Date
  to_date: Date
}

input employees_InsertInput {
  emp_no: Int!
  birth_date: Date!
  first_name: String!
  last_name: String!
  gender: employees_gender!
  hire_date: Date!
}

input employees_UpdateInput {
  emp_no: Int
  birth_date: Date
  first_name: String
  last_name: String
  gender: employees_gender
  hire_date: Date
}

input salaries_InsertInput {
  emp_no: Int!
  salary: Int!
  from_date: Date!
  to_date: Date!
}

input salaries_UpdateInput {
  emp_no: Int
  salary: Int
  from_date: Date
  to_date: Date
}

input titles_InsertInput {
  emp_no: Int!
  title: String!
  from_date: Date!
  to_date: Date
}

input titles_UpdateInput {
  emp_no: Int
  title: String
  from_date: Date
  to_date: Date
}

"""VIEW"""
input v_full_departments_InsertInput {
  dept_no: String!
  dept_name: String!
  manager: String
}

"""VIEW"""
input v_full_departments_UpdateInput {
  dept_no: String
  dept_name: String
  manager: String
}

"""VIEW"""
input v_full_employees_InsertInput {
  emp_no: Int!
  first_name: String!
  last_name: String!
  birth_date: Date!
  gender: v_full_employees_gender!
  hire_date: Date!
  department: String
}

"""VIEW"""
input v_full_employees_UpdateInput {
  emp_no: Int
  first_name: String
  last_name: String
  birth_date: Date
  gender: v_full_employees_gender
  hire_date: Date
  department: String
}"
`;

exports[`MySQL Employees should give correct response for example queries: example-query.graphql-query-result 1`] = `
{
  "data": {
    "employees": [
      {
        "__typename": "employees",
        "birth_date": "1953-09-02",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Development",
                "dept_no": "d005",
              },
            ],
            "dept_no": "d005",
            "emp_no": 10001,
            "from_date": "1986-06-26",
            "to_date": "9999-01-01",
          },
        ],
        "emp_no": 10001,
        "first_name": "Georgi",
        "gender": "M",
        "hire_date": "1986-06-26",
        "last_name": "Facello",
      },
      {
        "__typename": "employees",
        "birth_date": "1964-06-02",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Sales",
                "dept_no": "d007",
              },
            ],
            "dept_no": "d007",
            "emp_no": 10002,
            "from_date": "1996-08-03",
            "to_date": "9999-01-01",
          },
        ],
        "emp_no": 10002,
        "first_name": "Bezalel",
        "gender": "F",
        "hire_date": "1985-11-21",
        "last_name": "Simmel",
      },
      {
        "__typename": "employees",
        "birth_date": "1959-12-03",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Production",
                "dept_no": "d004",
              },
            ],
            "dept_no": "d004",
            "emp_no": 10003,
            "from_date": "1995-12-03",
            "to_date": "9999-01-01",
          },
        ],
        "emp_no": 10003,
        "first_name": "Parto",
        "gender": "M",
        "hire_date": "1986-08-28",
        "last_name": "Bamford",
      },
      {
        "__typename": "employees",
        "birth_date": "1954-05-01",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Production",
                "dept_no": "d004",
              },
            ],
            "dept_no": "d004",
            "emp_no": 10004,
            "from_date": "1986-12-01",
            "to_date": "9999-01-01",
          },
        ],
        "emp_no": 10004,
        "first_name": "Chirstian",
        "gender": "M",
        "hire_date": "1986-12-01",
        "last_name": "Koblick",
      },
      {
        "__typename": "employees",
        "birth_date": "1955-01-21",
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Human Resources",
                "dept_no": "d003",
              },
            ],
            "dept_no": "d003",
            "emp_no": 10005,
            "from_date": "1989-09-12",
            "to_date": "9999-01-01",
          },
        ],
        "emp_no": 10005,
        "first_name": "Kyoichi",
        "gender": "M",
        "hire_date": "1989-09-12",
        "last_name": "Maliniak",
      },
    ],
  },
}
`;
