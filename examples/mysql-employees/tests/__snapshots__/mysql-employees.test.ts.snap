// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MySQL Employees should generate correct schema: schema 1`] = `
"schema @transport(subgraph: "Employees", kind: "mysql", location: "mysql://root:passwd@localhost:33306/employees") {
  query: Query
  mutation: Mutation
}

directive @transport(subgraph: String, kind: String, location: String) on FIELD_DEFINITION

directive @mysqlSelect(table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlInsert(table: String, primaryKeys: [String]) on FIELD_DEFINITION

directive @mysqlUpdate(table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlDelete(table: String) on FIELD_DEFINITION

directive @mysqlTableForeign(columnName: String) on FIELD_DEFINITION

type Query {
  current_dept_emp(limit: Int, offset: Int, where: current_dept_emp_WhereInput, orderBy: current_dept_emp_OrderByInput): [current_dept_emp] @mysqlSelect(table: "current_dept_emp") @resolver(subgraph: "Employees", operation: "query current_dept_emp($limit: Int, $offset: Int, $where: current_dept_emp_WhereInput, $orderBy: current_dept_emp_OrderByInput) { current_dept_emp(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "current_dept_emp", type: "[current_dept_emp]")
  count_current_dept_emp(where: current_dept_emp_WhereInput): Int @mysqlCount(table: "current_dept_emp") @resolver(subgraph: "Employees", operation: "query count_current_dept_emp($where: current_dept_emp_WhereInput) { count_current_dept_emp(where: $where) }") @source(subgraph: "Employees", name: "count_current_dept_emp", type: "Int")
  departments(limit: Int, offset: Int, where: departments_WhereInput, orderBy: departments_OrderByInput): [departments] @mysqlSelect(table: "departments") @resolver(subgraph: "Employees", operation: "query departments($limit: Int, $offset: Int, $where: departments_WhereInput, $orderBy: departments_OrderByInput) { departments(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "departments", type: "[departments]")
  count_departments(where: departments_WhereInput): Int @mysqlCount(table: "departments") @resolver(subgraph: "Employees", operation: "query count_departments($where: departments_WhereInput) { count_departments(where: $where) }") @source(subgraph: "Employees", name: "count_departments", type: "Int")
  dept_emp(limit: Int, offset: Int, where: dept_emp_WhereInput, orderBy: dept_emp_OrderByInput): [dept_emp] @mysqlSelect(table: "dept_emp") @resolver(subgraph: "Employees", operation: "query dept_emp($limit: Int, $offset: Int, $where: dept_emp_WhereInput, $orderBy: dept_emp_OrderByInput) { dept_emp(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "dept_emp", type: "[dept_emp]")
  count_dept_emp(where: dept_emp_WhereInput): Int @mysqlCount(table: "dept_emp") @resolver(subgraph: "Employees", operation: "query count_dept_emp($where: dept_emp_WhereInput) { count_dept_emp(where: $where) }") @source(subgraph: "Employees", name: "count_dept_emp", type: "Int")
  dept_emp_latest_date(limit: Int, offset: Int, where: dept_emp_latest_date_WhereInput, orderBy: dept_emp_latest_date_OrderByInput): [dept_emp_latest_date] @mysqlSelect(table: "dept_emp_latest_date") @resolver(subgraph: "Employees", operation: "query dept_emp_latest_date($limit: Int, $offset: Int, $where: dept_emp_latest_date_WhereInput, $orderBy: dept_emp_latest_date_OrderByInput) { dept_emp_latest_date(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "dept_emp_latest_date", type: "[dept_emp_latest_date]")
  count_dept_emp_latest_date(where: dept_emp_latest_date_WhereInput): Int @mysqlCount(table: "dept_emp_latest_date") @resolver(subgraph: "Employees", operation: "query count_dept_emp_latest_date($where: dept_emp_latest_date_WhereInput) { count_dept_emp_latest_date(where: $where) }") @source(subgraph: "Employees", name: "count_dept_emp_latest_date", type: "Int")
  dept_manager(limit: Int, offset: Int, where: dept_manager_WhereInput, orderBy: dept_manager_OrderByInput): [dept_manager] @mysqlSelect(table: "dept_manager") @resolver(subgraph: "Employees", operation: "query dept_manager($limit: Int, $offset: Int, $where: dept_manager_WhereInput, $orderBy: dept_manager_OrderByInput) { dept_manager(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "dept_manager", type: "[dept_manager]")
  count_dept_manager(where: dept_manager_WhereInput): Int @mysqlCount(table: "dept_manager") @resolver(subgraph: "Employees", operation: "query count_dept_manager($where: dept_manager_WhereInput) { count_dept_manager(where: $where) }") @source(subgraph: "Employees", name: "count_dept_manager", type: "Int")
  employees(limit: Int, offset: Int, where: employees_WhereInput, orderBy: employees_OrderByInput): [employees] @mysqlSelect(table: "employees") @resolver(subgraph: "Employees", operation: "query employees($limit: Int, $offset: Int, $where: employees_WhereInput, $orderBy: employees_OrderByInput) { employees(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "employees", type: "[employees]")
  count_employees(where: employees_WhereInput): Int @mysqlCount(table: "employees") @resolver(subgraph: "Employees", operation: "query count_employees($where: employees_WhereInput) { count_employees(where: $where) }") @source(subgraph: "Employees", name: "count_employees", type: "Int")
  salaries(limit: Int, offset: Int, where: salaries_WhereInput, orderBy: salaries_OrderByInput): [salaries] @mysqlSelect(table: "salaries") @resolver(subgraph: "Employees", operation: "query salaries($limit: Int, $offset: Int, $where: salaries_WhereInput, $orderBy: salaries_OrderByInput) { salaries(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "salaries", type: "[salaries]")
  count_salaries(where: salaries_WhereInput): Int @mysqlCount(table: "salaries") @resolver(subgraph: "Employees", operation: "query count_salaries($where: salaries_WhereInput) { count_salaries(where: $where) }") @source(subgraph: "Employees", name: "count_salaries", type: "Int")
  titles(limit: Int, offset: Int, where: titles_WhereInput, orderBy: titles_OrderByInput): [titles] @mysqlSelect(table: "titles") @resolver(subgraph: "Employees", operation: "query titles($limit: Int, $offset: Int, $where: titles_WhereInput, $orderBy: titles_OrderByInput) { titles(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "titles", type: "[titles]")
  count_titles(where: titles_WhereInput): Int @mysqlCount(table: "titles") @resolver(subgraph: "Employees", operation: "query count_titles($where: titles_WhereInput) { count_titles(where: $where) }") @source(subgraph: "Employees", name: "count_titles", type: "Int")
  v_full_departments(limit: Int, offset: Int, where: v_full_departments_WhereInput, orderBy: v_full_departments_OrderByInput): [v_full_departments] @mysqlSelect(table: "v_full_departments") @resolver(subgraph: "Employees", operation: "query v_full_departments($limit: Int, $offset: Int, $where: v_full_departments_WhereInput, $orderBy: v_full_departments_OrderByInput) { v_full_departments(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "v_full_departments", type: "[v_full_departments]")
  count_v_full_departments(where: v_full_departments_WhereInput): Int @mysqlCount(table: "v_full_departments") @resolver(subgraph: "Employees", operation: "query count_v_full_departments($where: v_full_departments_WhereInput) { count_v_full_departments(where: $where) }") @source(subgraph: "Employees", name: "count_v_full_departments", type: "Int")
  v_full_employees(limit: Int, offset: Int, where: v_full_employees_WhereInput, orderBy: v_full_employees_OrderByInput): [v_full_employees] @mysqlSelect(table: "v_full_employees") @resolver(subgraph: "Employees", operation: "query v_full_employees($limit: Int, $offset: Int, $where: v_full_employees_WhereInput, $orderBy: v_full_employees_OrderByInput) { v_full_employees(limit: $limit, offset: $offset, where: $where, orderBy: $orderBy) }") @source(subgraph: "Employees", name: "v_full_employees", type: "[v_full_employees]")
  count_v_full_employees(where: v_full_employees_WhereInput): Int @mysqlCount(table: "v_full_employees") @resolver(subgraph: "Employees", operation: "query count_v_full_employees($where: v_full_employees_WhereInput) { count_v_full_employees(where: $where) }") @source(subgraph: "Employees", name: "count_v_full_employees", type: "Int")
}

"""VIEW"""
type current_dept_emp @source(subgraph: "Employees", name: "current_dept_emp") @resolver(subgraph: "Employees", operation: "query CurrentDeptEmpByEmpNo($current_dept_emp_emp_no: Int) { current_dept_emp(limit: $current_dept_emp_emp_no) }", kind: "FETCH") @variable(subgraph: "Employees", name: "current_dept_emp_emp_no", select: "emp_no") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

"""
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date @source(subgraph: "Employees", name: "Date") @source(subgraph: "Employees", name: "Date")

"""VIEW"""
input current_dept_emp_WhereInput @source(subgraph: "Employees", name: "current_dept_emp_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  from_date: String @source(subgraph: "Employees", name: "from_date", type: "String")
  to_date: String @source(subgraph: "Employees", name: "to_date", type: "String")
}

"""VIEW"""
input current_dept_emp_OrderByInput @source(subgraph: "Employees", name: "current_dept_emp_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  dept_no: OrderBy @source(subgraph: "Employees", name: "dept_no", type: "OrderBy")
  from_date: OrderBy @source(subgraph: "Employees", name: "from_date", type: "OrderBy")
  to_date: OrderBy @source(subgraph: "Employees", name: "to_date", type: "OrderBy")
}

enum OrderBy @source(subgraph: "Employees", name: "OrderBy") {
  asc @source(subgraph: "Employees", name: "asc")
  desc @source(subgraph: "Employees", name: "desc")
}

type departments @source(subgraph: "Employees", name: "departments") {
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  dept_name: String! @source(subgraph: "Employees", name: "dept_name", type: "String!")
  dept_emp(limit: Int, offset: Int, where: dept_emp_WhereInput, orderBy: dept_emp_OrderByInput): [dept_emp] @mysqlSelect(table: "dept_emp", columnMap: [["dept_no", "dept_no"]]) @source(subgraph: "Employees", name: "dept_emp", type: "[dept_emp]")
  dept_manager(limit: Int, offset: Int, where: dept_manager_WhereInput, orderBy: dept_manager_OrderByInput): [dept_manager] @mysqlSelect(table: "dept_manager", columnMap: [["dept_no", "dept_no"]]) @source(subgraph: "Employees", name: "dept_manager", type: "[dept_manager]")
}

type dept_emp @source(subgraph: "Employees", name: "dept_emp") @resolver(subgraph: "Employees", operation: "query DeptEmpByEmpNo($dept_emp_emp_no: Int) { dept_emp(limit: $dept_emp_emp_no) }", kind: "FETCH") @variable(subgraph: "Employees", name: "dept_emp_emp_no", select: "emp_no") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date! @source(subgraph: "Employees", name: "to_date", type: "Date!")
  departments(where: departments_WhereInput, orderBy: departments_OrderByInput, limit: Int, offset: Int): [departments] @mysqlSelect(table: "departments", columnMap: [["dept_no", "dept_no"]]) @mysqlTableForeign(columnName: "dept_no") @source(subgraph: "Employees", name: "departments", type: "[departments]")
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(columnName: "emp_no") @source(subgraph: "Employees", name: "employees", type: "[employees]")
}

input departments_WhereInput @source(subgraph: "Employees", name: "departments_WhereInput") {
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  dept_name: String @source(subgraph: "Employees", name: "dept_name", type: "String")
}

input departments_OrderByInput @source(subgraph: "Employees", name: "departments_OrderByInput") {
  dept_no: OrderBy @source(subgraph: "Employees", name: "dept_no", type: "OrderBy")
  dept_name: OrderBy @source(subgraph: "Employees", name: "dept_name", type: "OrderBy")
}

type employees @source(subgraph: "Employees", name: "employees") @resolver(subgraph: "Employees", operation: "query EmployeesByEmpNo($employees_emp_no: Int) { employees(limit: $employees_emp_no) }", kind: "FETCH") @variable(subgraph: "Employees", name: "employees_emp_no", select: "emp_no") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  birth_date: Date! @source(subgraph: "Employees", name: "birth_date", type: "Date!")
  first_name: String! @source(subgraph: "Employees", name: "first_name", type: "String!")
  last_name: String! @source(subgraph: "Employees", name: "last_name", type: "String!")
  gender: employees_gender! @source(subgraph: "Employees", name: "gender", type: "employees_gender!")
  hire_date: Date! @source(subgraph: "Employees", name: "hire_date", type: "Date!")
  dept_emp(limit: Int, offset: Int, where: dept_emp_WhereInput, orderBy: dept_emp_OrderByInput): [dept_emp] @mysqlSelect(table: "dept_emp", columnMap: [["emp_no", "emp_no"]]) @source(subgraph: "Employees", name: "dept_emp", type: "[dept_emp]")
  dept_manager(limit: Int, offset: Int, where: dept_manager_WhereInput, orderBy: dept_manager_OrderByInput): [dept_manager] @mysqlSelect(table: "dept_manager", columnMap: [["emp_no", "emp_no"]]) @source(subgraph: "Employees", name: "dept_manager", type: "[dept_manager]")
  salaries(limit: Int, offset: Int, where: salaries_WhereInput, orderBy: salaries_OrderByInput): [salaries] @mysqlSelect(table: "salaries", columnMap: [["emp_no", "emp_no"]]) @source(subgraph: "Employees", name: "salaries", type: "[salaries]")
  titles(limit: Int, offset: Int, where: titles_WhereInput, orderBy: titles_OrderByInput): [titles] @mysqlSelect(table: "titles", columnMap: [["emp_no", "emp_no"]]) @source(subgraph: "Employees", name: "titles", type: "[titles]")
}

enum employees_gender @source(subgraph: "Employees", name: "employees_gender") {
  M @source(subgraph: "Employees", name: "M")
  F @source(subgraph: "Employees", name: "F")
}

input dept_emp_WhereInput @source(subgraph: "Employees", name: "dept_emp_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  from_date: String @source(subgraph: "Employees", name: "from_date", type: "String")
  to_date: String @source(subgraph: "Employees", name: "to_date", type: "String")
}

input dept_emp_OrderByInput @source(subgraph: "Employees", name: "dept_emp_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  dept_no: OrderBy @source(subgraph: "Employees", name: "dept_no", type: "OrderBy")
  from_date: OrderBy @source(subgraph: "Employees", name: "from_date", type: "OrderBy")
  to_date: OrderBy @source(subgraph: "Employees", name: "to_date", type: "OrderBy")
}

type dept_manager @source(subgraph: "Employees", name: "dept_manager") @resolver(subgraph: "Employees", operation: "query DeptManagerByEmpNo($dept_manager_emp_no: Int) { dept_manager(limit: $dept_manager_emp_no) }", kind: "FETCH") @variable(subgraph: "Employees", name: "dept_manager_emp_no", select: "emp_no") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date! @source(subgraph: "Employees", name: "to_date", type: "Date!")
  departments(where: departments_WhereInput, orderBy: departments_OrderByInput, limit: Int, offset: Int): [departments] @mysqlSelect(table: "departments", columnMap: [["dept_no", "dept_no"]]) @mysqlTableForeign(columnName: "dept_no") @source(subgraph: "Employees", name: "departments", type: "[departments]")
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(columnName: "emp_no") @source(subgraph: "Employees", name: "employees", type: "[employees]")
}

input employees_WhereInput @source(subgraph: "Employees", name: "employees_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  birth_date: String @source(subgraph: "Employees", name: "birth_date", type: "String")
  first_name: String @source(subgraph: "Employees", name: "first_name", type: "String")
  last_name: String @source(subgraph: "Employees", name: "last_name", type: "String")
  gender: String @source(subgraph: "Employees", name: "gender", type: "String")
  hire_date: String @source(subgraph: "Employees", name: "hire_date", type: "String")
}

input employees_OrderByInput @source(subgraph: "Employees", name: "employees_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  birth_date: OrderBy @source(subgraph: "Employees", name: "birth_date", type: "OrderBy")
  first_name: OrderBy @source(subgraph: "Employees", name: "first_name", type: "OrderBy")
  last_name: OrderBy @source(subgraph: "Employees", name: "last_name", type: "OrderBy")
  gender: OrderBy @source(subgraph: "Employees", name: "gender", type: "OrderBy")
  hire_date: OrderBy @source(subgraph: "Employees", name: "hire_date", type: "OrderBy")
}

input dept_manager_WhereInput @source(subgraph: "Employees", name: "dept_manager_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  from_date: String @source(subgraph: "Employees", name: "from_date", type: "String")
  to_date: String @source(subgraph: "Employees", name: "to_date", type: "String")
}

input dept_manager_OrderByInput @source(subgraph: "Employees", name: "dept_manager_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  dept_no: OrderBy @source(subgraph: "Employees", name: "dept_no", type: "OrderBy")
  from_date: OrderBy @source(subgraph: "Employees", name: "from_date", type: "OrderBy")
  to_date: OrderBy @source(subgraph: "Employees", name: "to_date", type: "OrderBy")
}

type salaries @source(subgraph: "Employees", name: "salaries") @resolver(subgraph: "Employees", operation: "query SalariesByEmpNo($salaries_emp_no: Int) { salaries(limit: $salaries_emp_no) }", kind: "FETCH") @resolver(subgraph: "Employees", operation: "query SalariesBySalary($salaries_salary: Int) { salaries(limit: $salaries_salary) }", kind: "FETCH") @variable(subgraph: "Employees", name: "salaries_emp_no", select: "emp_no") @variable(subgraph: "Employees", name: "salaries_salary", select: "salary") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  salary: Int! @source(subgraph: "Employees", name: "salary", type: "Int!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date! @source(subgraph: "Employees", name: "to_date", type: "Date!")
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(columnName: "emp_no") @source(subgraph: "Employees", name: "employees", type: "[employees]")
}

input salaries_WhereInput @source(subgraph: "Employees", name: "salaries_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  salary: String @source(subgraph: "Employees", name: "salary", type: "String")
  from_date: String @source(subgraph: "Employees", name: "from_date", type: "String")
  to_date: String @source(subgraph: "Employees", name: "to_date", type: "String")
}

input salaries_OrderByInput @source(subgraph: "Employees", name: "salaries_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  salary: OrderBy @source(subgraph: "Employees", name: "salary", type: "OrderBy")
  from_date: OrderBy @source(subgraph: "Employees", name: "from_date", type: "OrderBy")
  to_date: OrderBy @source(subgraph: "Employees", name: "to_date", type: "OrderBy")
}

type titles @source(subgraph: "Employees", name: "titles") @resolver(subgraph: "Employees", operation: "query TitlesByEmpNo($titles_emp_no: Int) { titles(limit: $titles_emp_no) }", kind: "FETCH") @variable(subgraph: "Employees", name: "titles_emp_no", select: "emp_no") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  title: String! @source(subgraph: "Employees", name: "title", type: "String!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
  employees(where: employees_WhereInput, orderBy: employees_OrderByInput, limit: Int, offset: Int): [employees] @mysqlSelect(table: "employees", columnMap: [["emp_no", "emp_no"]]) @mysqlTableForeign(columnName: "emp_no") @source(subgraph: "Employees", name: "employees", type: "[employees]")
}

input titles_WhereInput @source(subgraph: "Employees", name: "titles_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  title: String @source(subgraph: "Employees", name: "title", type: "String")
  from_date: String @source(subgraph: "Employees", name: "from_date", type: "String")
  to_date: String @source(subgraph: "Employees", name: "to_date", type: "String")
}

input titles_OrderByInput @source(subgraph: "Employees", name: "titles_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  title: OrderBy @source(subgraph: "Employees", name: "title", type: "OrderBy")
  from_date: OrderBy @source(subgraph: "Employees", name: "from_date", type: "OrderBy")
  to_date: OrderBy @source(subgraph: "Employees", name: "to_date", type: "OrderBy")
}

"""VIEW"""
type dept_emp_latest_date @source(subgraph: "Employees", name: "dept_emp_latest_date") @resolver(subgraph: "Employees", operation: "query DeptEmpLatestDateByEmpNo($dept_emp_latest_date_emp_no: Int) { dept_emp_latest_date(limit: $dept_emp_latest_date_emp_no) }", kind: "FETCH") @variable(subgraph: "Employees", name: "dept_emp_latest_date_emp_no", select: "emp_no") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

"""VIEW"""
input dept_emp_latest_date_WhereInput @source(subgraph: "Employees", name: "dept_emp_latest_date_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  from_date: String @source(subgraph: "Employees", name: "from_date", type: "String")
  to_date: String @source(subgraph: "Employees", name: "to_date", type: "String")
}

"""VIEW"""
input dept_emp_latest_date_OrderByInput @source(subgraph: "Employees", name: "dept_emp_latest_date_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  from_date: OrderBy @source(subgraph: "Employees", name: "from_date", type: "OrderBy")
  to_date: OrderBy @source(subgraph: "Employees", name: "to_date", type: "OrderBy")
}

"""VIEW"""
type v_full_departments @source(subgraph: "Employees", name: "v_full_departments") {
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  dept_name: String! @source(subgraph: "Employees", name: "dept_name", type: "String!")
  manager: String @source(subgraph: "Employees", name: "manager", type: "String")
}

"""VIEW"""
input v_full_departments_WhereInput @source(subgraph: "Employees", name: "v_full_departments_WhereInput") {
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  dept_name: String @source(subgraph: "Employees", name: "dept_name", type: "String")
  manager: String @source(subgraph: "Employees", name: "manager", type: "String")
}

"""VIEW"""
input v_full_departments_OrderByInput @source(subgraph: "Employees", name: "v_full_departments_OrderByInput") {
  dept_no: OrderBy @source(subgraph: "Employees", name: "dept_no", type: "OrderBy")
  dept_name: OrderBy @source(subgraph: "Employees", name: "dept_name", type: "OrderBy")
  manager: OrderBy @source(subgraph: "Employees", name: "manager", type: "OrderBy")
}

"""VIEW"""
type v_full_employees @source(subgraph: "Employees", name: "v_full_employees") @resolver(subgraph: "Employees", operation: "query VFullEmployeesByEmpNo($v_full_employees_emp_no: Int) { v_full_employees(limit: $v_full_employees_emp_no) }", kind: "FETCH") @variable(subgraph: "Employees", name: "v_full_employees_emp_no", select: "emp_no") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  first_name: String! @source(subgraph: "Employees", name: "first_name", type: "String!")
  last_name: String! @source(subgraph: "Employees", name: "last_name", type: "String!")
  birth_date: Date! @source(subgraph: "Employees", name: "birth_date", type: "Date!")
  gender: v_full_employees_gender! @source(subgraph: "Employees", name: "gender", type: "v_full_employees_gender!")
  hire_date: Date! @source(subgraph: "Employees", name: "hire_date", type: "Date!")
  department: String @source(subgraph: "Employees", name: "department", type: "String")
}

enum v_full_employees_gender @source(subgraph: "Employees", name: "v_full_employees_gender") {
  M @source(subgraph: "Employees", name: "M")
  F @source(subgraph: "Employees", name: "F")
}

"""VIEW"""
input v_full_employees_WhereInput @source(subgraph: "Employees", name: "v_full_employees_WhereInput") {
  emp_no: String @source(subgraph: "Employees", name: "emp_no", type: "String")
  first_name: String @source(subgraph: "Employees", name: "first_name", type: "String")
  last_name: String @source(subgraph: "Employees", name: "last_name", type: "String")
  birth_date: String @source(subgraph: "Employees", name: "birth_date", type: "String")
  gender: String @source(subgraph: "Employees", name: "gender", type: "String")
  hire_date: String @source(subgraph: "Employees", name: "hire_date", type: "String")
  department: String @source(subgraph: "Employees", name: "department", type: "String")
}

"""VIEW"""
input v_full_employees_OrderByInput @source(subgraph: "Employees", name: "v_full_employees_OrderByInput") {
  emp_no: OrderBy @source(subgraph: "Employees", name: "emp_no", type: "OrderBy")
  first_name: OrderBy @source(subgraph: "Employees", name: "first_name", type: "OrderBy")
  last_name: OrderBy @source(subgraph: "Employees", name: "last_name", type: "OrderBy")
  birth_date: OrderBy @source(subgraph: "Employees", name: "birth_date", type: "OrderBy")
  gender: OrderBy @source(subgraph: "Employees", name: "gender", type: "OrderBy")
  hire_date: OrderBy @source(subgraph: "Employees", name: "hire_date", type: "OrderBy")
  department: OrderBy @source(subgraph: "Employees", name: "department", type: "OrderBy")
}

type Mutation {
  insert_current_dept_emp(current_dept_emp: current_dept_emp_InsertInput!): current_dept_emp @mysqlInsert(table: "current_dept_emp", primaryKeys: []) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_current_dept_emp($current_dept_emp: current_dept_emp_InsertInput!) { insert_current_dept_emp(current_dept_emp: $current_dept_emp) }") @source(subgraph: "Employees", name: "insert_current_dept_emp", type: "current_dept_emp")
  update_current_dept_emp(current_dept_emp: current_dept_emp_UpdateInput!, where: current_dept_emp_WhereInput): current_dept_emp @mysqlUpdate(table: "current_dept_emp") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_current_dept_emp($current_dept_emp: current_dept_emp_UpdateInput!, $where: current_dept_emp_WhereInput) { update_current_dept_emp(current_dept_emp: $current_dept_emp, where: $where) }") @source(subgraph: "Employees", name: "update_current_dept_emp", type: "current_dept_emp")
  delete_current_dept_emp(where: current_dept_emp_WhereInput): Boolean @mysqlDelete(table: "current_dept_emp") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_current_dept_emp($where: current_dept_emp_WhereInput) { delete_current_dept_emp(where: $where) }") @source(subgraph: "Employees", name: "delete_current_dept_emp", type: "Boolean")
  insert_departments(departments: departments_InsertInput!): departments @mysqlInsert(table: "departments", primaryKeys: ["dept_no"]) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_departments($departments: departments_InsertInput!) { insert_departments(departments: $departments) }") @source(subgraph: "Employees", name: "insert_departments", type: "departments")
  update_departments(departments: departments_UpdateInput!, where: departments_WhereInput): departments @mysqlUpdate(table: "departments") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_departments($departments: departments_UpdateInput!, $where: departments_WhereInput) { update_departments(departments: $departments, where: $where) }") @source(subgraph: "Employees", name: "update_departments", type: "departments")
  delete_departments(where: departments_WhereInput): Boolean @mysqlDelete(table: "departments") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_departments($where: departments_WhereInput) { delete_departments(where: $where) }") @source(subgraph: "Employees", name: "delete_departments", type: "Boolean")
  insert_dept_emp(dept_emp: dept_emp_InsertInput!): dept_emp @mysqlInsert(table: "dept_emp", primaryKeys: ["emp_no", "dept_no"]) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_dept_emp($dept_emp: dept_emp_InsertInput!) { insert_dept_emp(dept_emp: $dept_emp) }") @source(subgraph: "Employees", name: "insert_dept_emp", type: "dept_emp")
  update_dept_emp(dept_emp: dept_emp_UpdateInput!, where: dept_emp_WhereInput): dept_emp @mysqlUpdate(table: "dept_emp") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_dept_emp($dept_emp: dept_emp_UpdateInput!, $where: dept_emp_WhereInput) { update_dept_emp(dept_emp: $dept_emp, where: $where) }") @source(subgraph: "Employees", name: "update_dept_emp", type: "dept_emp")
  delete_dept_emp(where: dept_emp_WhereInput): Boolean @mysqlDelete(table: "dept_emp") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_dept_emp($where: dept_emp_WhereInput) { delete_dept_emp(where: $where) }") @source(subgraph: "Employees", name: "delete_dept_emp", type: "Boolean")
  insert_dept_emp_latest_date(dept_emp_latest_date: dept_emp_latest_date_InsertInput!): dept_emp_latest_date @mysqlInsert(table: "dept_emp_latest_date", primaryKeys: []) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_dept_emp_latest_date($dept_emp_latest_date: dept_emp_latest_date_InsertInput!) { insert_dept_emp_latest_date(dept_emp_latest_date: $dept_emp_latest_date) }") @source(subgraph: "Employees", name: "insert_dept_emp_latest_date", type: "dept_emp_latest_date")
  update_dept_emp_latest_date(dept_emp_latest_date: dept_emp_latest_date_UpdateInput!, where: dept_emp_latest_date_WhereInput): dept_emp_latest_date @mysqlUpdate(table: "dept_emp_latest_date") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_dept_emp_latest_date($dept_emp_latest_date: dept_emp_latest_date_UpdateInput!, $where: dept_emp_latest_date_WhereInput) { update_dept_emp_latest_date(dept_emp_latest_date: $dept_emp_latest_date, where: $where) }") @source(subgraph: "Employees", name: "update_dept_emp_latest_date", type: "dept_emp_latest_date")
  delete_dept_emp_latest_date(where: dept_emp_latest_date_WhereInput): Boolean @mysqlDelete(table: "dept_emp_latest_date") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_dept_emp_latest_date($where: dept_emp_latest_date_WhereInput) { delete_dept_emp_latest_date(where: $where) }") @source(subgraph: "Employees", name: "delete_dept_emp_latest_date", type: "Boolean")
  insert_dept_manager(dept_manager: dept_manager_InsertInput!): dept_manager @mysqlInsert(table: "dept_manager", primaryKeys: ["emp_no", "dept_no"]) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_dept_manager($dept_manager: dept_manager_InsertInput!) { insert_dept_manager(dept_manager: $dept_manager) }") @source(subgraph: "Employees", name: "insert_dept_manager", type: "dept_manager")
  update_dept_manager(dept_manager: dept_manager_UpdateInput!, where: dept_manager_WhereInput): dept_manager @mysqlUpdate(table: "dept_manager") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_dept_manager($dept_manager: dept_manager_UpdateInput!, $where: dept_manager_WhereInput) { update_dept_manager(dept_manager: $dept_manager, where: $where) }") @source(subgraph: "Employees", name: "update_dept_manager", type: "dept_manager")
  delete_dept_manager(where: dept_manager_WhereInput): Boolean @mysqlDelete(table: "dept_manager") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_dept_manager($where: dept_manager_WhereInput) { delete_dept_manager(where: $where) }") @source(subgraph: "Employees", name: "delete_dept_manager", type: "Boolean")
  insert_employees(employees: employees_InsertInput!): employees @mysqlInsert(table: "employees", primaryKeys: ["emp_no"]) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_employees($employees: employees_InsertInput!) { insert_employees(employees: $employees) }") @source(subgraph: "Employees", name: "insert_employees", type: "employees")
  update_employees(employees: employees_UpdateInput!, where: employees_WhereInput): employees @mysqlUpdate(table: "employees") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_employees($employees: employees_UpdateInput!, $where: employees_WhereInput) { update_employees(employees: $employees, where: $where) }") @source(subgraph: "Employees", name: "update_employees", type: "employees")
  delete_employees(where: employees_WhereInput): Boolean @mysqlDelete(table: "employees") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_employees($where: employees_WhereInput) { delete_employees(where: $where) }") @source(subgraph: "Employees", name: "delete_employees", type: "Boolean")
  insert_salaries(salaries: salaries_InsertInput!): salaries @mysqlInsert(table: "salaries", primaryKeys: ["emp_no", "from_date"]) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_salaries($salaries: salaries_InsertInput!) { insert_salaries(salaries: $salaries) }") @source(subgraph: "Employees", name: "insert_salaries", type: "salaries")
  update_salaries(salaries: salaries_UpdateInput!, where: salaries_WhereInput): salaries @mysqlUpdate(table: "salaries") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_salaries($salaries: salaries_UpdateInput!, $where: salaries_WhereInput) { update_salaries(salaries: $salaries, where: $where) }") @source(subgraph: "Employees", name: "update_salaries", type: "salaries")
  delete_salaries(where: salaries_WhereInput): Boolean @mysqlDelete(table: "salaries") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_salaries($where: salaries_WhereInput) { delete_salaries(where: $where) }") @source(subgraph: "Employees", name: "delete_salaries", type: "Boolean")
  insert_titles(titles: titles_InsertInput!): titles @mysqlInsert(table: "titles", primaryKeys: ["emp_no", "title", "from_date"]) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_titles($titles: titles_InsertInput!) { insert_titles(titles: $titles) }") @source(subgraph: "Employees", name: "insert_titles", type: "titles")
  update_titles(titles: titles_UpdateInput!, where: titles_WhereInput): titles @mysqlUpdate(table: "titles") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_titles($titles: titles_UpdateInput!, $where: titles_WhereInput) { update_titles(titles: $titles, where: $where) }") @source(subgraph: "Employees", name: "update_titles", type: "titles")
  delete_titles(where: titles_WhereInput): Boolean @mysqlDelete(table: "titles") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_titles($where: titles_WhereInput) { delete_titles(where: $where) }") @source(subgraph: "Employees", name: "delete_titles", type: "Boolean")
  insert_v_full_departments(v_full_departments: v_full_departments_InsertInput!): v_full_departments @mysqlInsert(table: "v_full_departments", primaryKeys: []) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_v_full_departments($v_full_departments: v_full_departments_InsertInput!) { insert_v_full_departments(v_full_departments: $v_full_departments) }") @source(subgraph: "Employees", name: "insert_v_full_departments", type: "v_full_departments")
  update_v_full_departments(v_full_departments: v_full_departments_UpdateInput!, where: v_full_departments_WhereInput): v_full_departments @mysqlUpdate(table: "v_full_departments") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_v_full_departments($v_full_departments: v_full_departments_UpdateInput!, $where: v_full_departments_WhereInput) { update_v_full_departments(v_full_departments: $v_full_departments, where: $where) }") @source(subgraph: "Employees", name: "update_v_full_departments", type: "v_full_departments")
  delete_v_full_departments(where: v_full_departments_WhereInput): Boolean @mysqlDelete(table: "v_full_departments") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_v_full_departments($where: v_full_departments_WhereInput) { delete_v_full_departments(where: $where) }") @source(subgraph: "Employees", name: "delete_v_full_departments", type: "Boolean")
  insert_v_full_employees(v_full_employees: v_full_employees_InsertInput!): v_full_employees @mysqlInsert(table: "v_full_employees", primaryKeys: []) @resolver(subgraph: "Employees", operation: "mutation mutationinsert_v_full_employees($v_full_employees: v_full_employees_InsertInput!) { insert_v_full_employees(v_full_employees: $v_full_employees) }") @source(subgraph: "Employees", name: "insert_v_full_employees", type: "v_full_employees")
  update_v_full_employees(v_full_employees: v_full_employees_UpdateInput!, where: v_full_employees_WhereInput): v_full_employees @mysqlUpdate(table: "v_full_employees") @resolver(subgraph: "Employees", operation: "mutation mutationupdate_v_full_employees($v_full_employees: v_full_employees_UpdateInput!, $where: v_full_employees_WhereInput) { update_v_full_employees(v_full_employees: $v_full_employees, where: $where) }") @source(subgraph: "Employees", name: "update_v_full_employees", type: "v_full_employees")
  delete_v_full_employees(where: v_full_employees_WhereInput): Boolean @mysqlDelete(table: "v_full_employees") @resolver(subgraph: "Employees", operation: "mutation mutationdelete_v_full_employees($where: v_full_employees_WhereInput) { delete_v_full_employees(where: $where) }") @source(subgraph: "Employees", name: "delete_v_full_employees", type: "Boolean")
}

"""VIEW"""
input current_dept_emp_InsertInput @source(subgraph: "Employees", name: "current_dept_emp_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

"""VIEW"""
input current_dept_emp_UpdateInput @source(subgraph: "Employees", name: "current_dept_emp_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

input departments_InsertInput @source(subgraph: "Employees", name: "departments_InsertInput") {
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  dept_name: String! @source(subgraph: "Employees", name: "dept_name", type: "String!")
}

input departments_UpdateInput @source(subgraph: "Employees", name: "departments_UpdateInput") {
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  dept_name: String @source(subgraph: "Employees", name: "dept_name", type: "String")
}

input dept_emp_InsertInput @source(subgraph: "Employees", name: "dept_emp_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date! @source(subgraph: "Employees", name: "to_date", type: "Date!")
}

input dept_emp_UpdateInput @source(subgraph: "Employees", name: "dept_emp_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

"""VIEW"""
input dept_emp_latest_date_InsertInput @source(subgraph: "Employees", name: "dept_emp_latest_date_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

"""VIEW"""
input dept_emp_latest_date_UpdateInput @source(subgraph: "Employees", name: "dept_emp_latest_date_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

input dept_manager_InsertInput @source(subgraph: "Employees", name: "dept_manager_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date! @source(subgraph: "Employees", name: "to_date", type: "Date!")
}

input dept_manager_UpdateInput @source(subgraph: "Employees", name: "dept_manager_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

input employees_InsertInput @source(subgraph: "Employees", name: "employees_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  birth_date: Date! @source(subgraph: "Employees", name: "birth_date", type: "Date!")
  first_name: String! @source(subgraph: "Employees", name: "first_name", type: "String!")
  last_name: String! @source(subgraph: "Employees", name: "last_name", type: "String!")
  gender: employees_gender! @source(subgraph: "Employees", name: "gender", type: "employees_gender!")
  hire_date: Date! @source(subgraph: "Employees", name: "hire_date", type: "Date!")
}

input employees_UpdateInput @source(subgraph: "Employees", name: "employees_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  birth_date: Date @source(subgraph: "Employees", name: "birth_date", type: "Date")
  first_name: String @source(subgraph: "Employees", name: "first_name", type: "String")
  last_name: String @source(subgraph: "Employees", name: "last_name", type: "String")
  gender: employees_gender @source(subgraph: "Employees", name: "gender", type: "employees_gender")
  hire_date: Date @source(subgraph: "Employees", name: "hire_date", type: "Date")
}

input salaries_InsertInput @source(subgraph: "Employees", name: "salaries_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  salary: Int! @source(subgraph: "Employees", name: "salary", type: "Int!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date! @source(subgraph: "Employees", name: "to_date", type: "Date!")
}

input salaries_UpdateInput @source(subgraph: "Employees", name: "salaries_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  salary: Int @source(subgraph: "Employees", name: "salary", type: "Int")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

input titles_InsertInput @source(subgraph: "Employees", name: "titles_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  title: String! @source(subgraph: "Employees", name: "title", type: "String!")
  from_date: Date! @source(subgraph: "Employees", name: "from_date", type: "Date!")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

input titles_UpdateInput @source(subgraph: "Employees", name: "titles_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  title: String @source(subgraph: "Employees", name: "title", type: "String")
  from_date: Date @source(subgraph: "Employees", name: "from_date", type: "Date")
  to_date: Date @source(subgraph: "Employees", name: "to_date", type: "Date")
}

"""VIEW"""
input v_full_departments_InsertInput @source(subgraph: "Employees", name: "v_full_departments_InsertInput") {
  dept_no: String! @source(subgraph: "Employees", name: "dept_no", type: "String!")
  dept_name: String! @source(subgraph: "Employees", name: "dept_name", type: "String!")
  manager: String @source(subgraph: "Employees", name: "manager", type: "String")
}

"""VIEW"""
input v_full_departments_UpdateInput @source(subgraph: "Employees", name: "v_full_departments_UpdateInput") {
  dept_no: String @source(subgraph: "Employees", name: "dept_no", type: "String")
  dept_name: String @source(subgraph: "Employees", name: "dept_name", type: "String")
  manager: String @source(subgraph: "Employees", name: "manager", type: "String")
}

"""VIEW"""
input v_full_employees_InsertInput @source(subgraph: "Employees", name: "v_full_employees_InsertInput") {
  emp_no: Int! @source(subgraph: "Employees", name: "emp_no", type: "Int!")
  first_name: String! @source(subgraph: "Employees", name: "first_name", type: "String!")
  last_name: String! @source(subgraph: "Employees", name: "last_name", type: "String!")
  birth_date: Date! @source(subgraph: "Employees", name: "birth_date", type: "Date!")
  gender: v_full_employees_gender! @source(subgraph: "Employees", name: "gender", type: "v_full_employees_gender!")
  hire_date: Date! @source(subgraph: "Employees", name: "hire_date", type: "Date!")
  department: String @source(subgraph: "Employees", name: "department", type: "String")
}

"""VIEW"""
input v_full_employees_UpdateInput @source(subgraph: "Employees", name: "v_full_employees_UpdateInput") {
  emp_no: Int @source(subgraph: "Employees", name: "emp_no", type: "Int")
  first_name: String @source(subgraph: "Employees", name: "first_name", type: "String")
  last_name: String @source(subgraph: "Employees", name: "last_name", type: "String")
  birth_date: Date @source(subgraph: "Employees", name: "birth_date", type: "Date")
  gender: v_full_employees_gender @source(subgraph: "Employees", name: "gender", type: "v_full_employees_gender")
  hire_date: Date @source(subgraph: "Employees", name: "hire_date", type: "Date")
  department: String @source(subgraph: "Employees", name: "department", type: "String")
}"
`;

exports[`MySQL Employees should give correct response for the example query: example-query.graphql-query-result 1`] = `
{
  "data": {
    "employees": [
      {
        "__typename": "employees",
        "birth_date": 1953-09-02T00:00:00.000Z,
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Development",
                "dept_no": "d005",
              },
            ],
            "dept_no": "d005",
            "emp_no": 10001,
            "from_date": 1986-06-26T00:00:00.000Z,
            "to_date": 9999-01-01T00:00:00.000Z,
          },
        ],
        "emp_no": 10001,
        "first_name": "Georgi",
        "gender": "M",
        "hire_date": 1986-06-26T00:00:00.000Z,
        "last_name": "Facello",
      },
      {
        "__typename": "employees",
        "birth_date": 1964-06-02T00:00:00.000Z,
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Sales",
                "dept_no": "d007",
              },
            ],
            "dept_no": "d007",
            "emp_no": 10002,
            "from_date": 1996-08-03T00:00:00.000Z,
            "to_date": 9999-01-01T00:00:00.000Z,
          },
        ],
        "emp_no": 10002,
        "first_name": "Bezalel",
        "gender": "F",
        "hire_date": 1985-11-21T00:00:00.000Z,
        "last_name": "Simmel",
      },
      {
        "__typename": "employees",
        "birth_date": 1959-12-03T00:00:00.000Z,
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Production",
                "dept_no": "d004",
              },
            ],
            "dept_no": "d004",
            "emp_no": 10003,
            "from_date": 1995-12-03T00:00:00.000Z,
            "to_date": 9999-01-01T00:00:00.000Z,
          },
        ],
        "emp_no": 10003,
        "first_name": "Parto",
        "gender": "M",
        "hire_date": 1986-08-28T00:00:00.000Z,
        "last_name": "Bamford",
      },
      {
        "__typename": "employees",
        "birth_date": 1954-05-01T00:00:00.000Z,
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Production",
                "dept_no": "d004",
              },
            ],
            "dept_no": "d004",
            "emp_no": 10004,
            "from_date": 1986-12-01T00:00:00.000Z,
            "to_date": 9999-01-01T00:00:00.000Z,
          },
        ],
        "emp_no": 10004,
        "first_name": "Chirstian",
        "gender": "M",
        "hire_date": 1986-12-01T00:00:00.000Z,
        "last_name": "Koblick",
      },
      {
        "__typename": "employees",
        "birth_date": 1955-01-21T00:00:00.000Z,
        "dept_emp": [
          {
            "departments": [
              {
                "dept_name": "Human Resources",
                "dept_no": "d003",
              },
            ],
            "dept_no": "d003",
            "emp_no": 10005,
            "from_date": 1989-09-12T00:00:00.000Z,
            "to_date": 9999-01-01T00:00:00.000Z,
          },
        ],
        "emp_no": 10005,
        "first_name": "Kyoichi",
        "gender": "M",
        "hire_date": 1989-09-12T00:00:00.000Z,
        "last_name": "Maliniak",
      },
    ],
  },
  "errors": undefined,
  "extensions": undefined,
}
`;
