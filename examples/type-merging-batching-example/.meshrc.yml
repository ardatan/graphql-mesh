sources:
  - name: AuthorService
    handler:
      graphql:
        schema: ./author-service-schema.js
    transforms:
      - typeMerging:
          queryFields:
            # No need to define which type it belongs
            # And no need to define a key for type
            # keyField assigns to that type automatically
            - queryFieldName: authors
              # Mesh automatically does batching if return type is a list
              keyField: id
            # keyArg: ids <-- This is needed if you have multiple args
            #                for that query field
  - name: BookService
    handler:
      graphql:
        schema: ./book-service-schema.js
    transforms:
      # Rename type names and field names to let stitching merger merges them
      - rename:
          renames:
            - from:
                type: AuthorWithBooks
              to:
                type: Author
            - from:
                type: Query
                field: authorWithBooks
              to:
                type: Query
                field: author
      - typeMerging:
          queryFields:
            # This doesn't use batching
            # It does regular stitching
            - queryFieldName: book
              keyField: id
            - queryFieldName: author
              keyField: id

# Create a stitching resolver with batching
# to solve N+1 problem
additionalTypeDefs: |
  extend type Book {
    author: Author @resolveTo(
      sourceName: "AuthorService",
      sourceTypeName: "Query",
      sourceFieldName: "authors",
      keyField: "authorId",
      keysArg: "ids"
    )
  }

documents:
  - ./example-queries/*.graphql
