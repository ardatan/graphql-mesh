// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SOAP Country Info should generate correct schema: soap-demo-schema 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

type Address {
  City: JSON
  State: JSON
  Street: JSON
  Zip: JSON
}

type ArrayOfFavoriteColorsItemString {
  FavoriteColorsItem: [String]
}

type ArrayOfPersonIdentificationPersonIdentification {
  PersonIdentification: [PersonIdentification]
}

\\"\\"\\"
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
\\"\\"\\"
scalar BigInt

\\"\\"\\"
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar Date

\\"\\"\\"
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")

type Mutation {
  \\"\\"\\"Operation AddInteger, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  AddInteger(Arg1: BigInt, Arg2: BigInt): BigInt
  \\"\\"\\"Operation DivideInteger, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  DivideInteger(Arg1: BigInt, Arg2: BigInt): BigInt
  \\"\\"\\"Operation LookupCity, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  LookupCity(zip: String): Address
  \\"\\"\\"Operation Mission, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  Mission: String
}

type Person {
  Age: BigInt
  DOB: Date
  FavoriteColors: ArrayOfFavoriteColorsItemString
  Home: Address
  Name: String
  Office: Address
  SSN: String
  Spouse: Person
}

type PersonIdentification {
  DOB: Date
  ID: String
  Name: String
  SSN: String
}

type Query {
  \\"\\"\\"Operation FindPerson, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  FindPerson(id: String): Person
  \\"\\"\\"Operation GetByName, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  GetByName(name: String): JSON
  \\"\\"\\"Operation GetDataSetByName, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  GetDataSetByName(name: String): JSON
  \\"\\"\\"Operation GetListByName, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  GetListByName(name: String): ArrayOfPersonIdentificationPersonIdentification
  \\"\\"\\"Operation QueryByName, port SOAPDemoSoap, service SOAPDemo\\"\\"\\"
  QueryByName(name: String): JSON
  description: String
}"
`;

exports[`SOAP Country Info should give correct response for example queries: AddInteger.graphql-soap-demo-result 1`] = `
Object {
  "data": Object {
    "AddInteger": 5n,
  },
}
`;

exports[`SOAP Country Info should give correct response for example queries: DivideInteger.graphql-soap-demo-result 1`] = `
Object {
  "data": Object {
    "DivideInteger": 5n,
  },
}
`;

exports[`SOAP Country Info should give correct response for example queries: FindPerson.graphql-soap-demo-result 1`] = `
Object {
  "data": Object {
    "FindPerson": Object {
      "Age": 22n,
      "DOB": "2000-03-20",
      "FavoriteColors": Object {
        "FavoriteColorsItem": Array [
          "Red",
        ],
      },
      "Home": Object {
        "City": "Pueblo",
        "State": "AK",
        "Street": "6977 First Street",
        "Zip": "63163",
      },
      "Name": "Newton,Dave R.",
      "Office": Object {
        "City": "Washington",
        "State": "MN",
        "Street": "9984 Second Blvd",
        "Zip": "42829",
      },
      "SSN": "384-10-6538",
    },
  },
}
`;

exports[`SOAP Country Info should give correct response for example queries: GetListByName.graphql-soap-demo-result 1`] = `
Object {
  "data": Object {
    "GetListByName": Object {
      "PersonIdentification": Array [
        Object {
          "DOB": "2000-03-20",
          "ID": "1",
          "Name": "Newton,Dave R.",
          "SSN": "384-10-6538",
        },
        Object {
          "DOB": "2004-11-17",
          "ID": "29",
          "Name": "Newton,Mario B.",
          "SSN": "538-68-5047",
        },
      ],
    },
  },
}
`;
