schema {
  query: Query
  mutation: Mutation
}

type TGraphEntity implements GraphEntity {
  id: String!
}

interface GraphEntity {
  id: String!
}

type GraphAuditLogRoot implements GraphEntity {
  directoryAudits(queryOptions: QueryOptions): [GraphDirectoryAudit]
  directoryAuditsById(id: ID): GraphDirectoryAudit
  provisioning(queryOptions: QueryOptions): [GraphProvisioningObjectSummary]
  provisioningById(id: ID): GraphProvisioningObjectSummary
  restrictedSignIns(queryOptions: QueryOptions): [GraphRestrictedSignIn]
  restrictedSignInsById(id: ID): GraphRestrictedSignIn
  signIns(queryOptions: QueryOptions): [GraphSignIn]
  signInsById(id: ID): GraphSignIn
  id: String!
}

input QueryOptions {
  """
  A data service URI with a $orderby System Query Option specifies an expression for determining what values are used to order the collection of Entries identified by the Resource Path section of the URI. This query option is only supported when the resource path identifies a Collection of Entries.
  """
  orderby: String
  """
  A data service URI with a $top System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. This subset is formed by selecting only the first N items of the set, where N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed.
  """
  top: Int
  """
  A data service URI with a $skip System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. That subset is defined by seeking N Entries into the Collection and selecting only the remaining Entries (starting with Entry N+1). N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed.
  """
  skip: Int
  """
  A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option.
  """
  filter: String
  """
  A URI with a $inlinecount System Query Option specifies that the response to the request includes a count of the number of Entries in the Collection of Entries identified by the Resource Path section of the URI. The count must be calculated after applying any $filter System Query Options present in the URI. The set of valid values for the $inlinecount query option are shown in the table below. If a value other than one shown in Table 4 is specified the URI is considered malformed.
  """
  inlinecount: InlineCount
  count: Boolean
}

enum InlineCount {
  """
  The OData MUST include a count of the number of entities in the collection identified by the URI (after applying any $filter System Query Options present on the URI)
  """
  allpages
  """
  The OData service MUST NOT include a count in the response. This is equivalence to a URI that does not include a $inlinecount query string parameter.
  """
  none
}

type GraphDirectoryAudit implements GraphEntity {
  activityDateTime: DateTime!
  activityDisplayName: String!
  additionalDetails: [GraphKeyValue]
  category: String!
  correlationId: String
  initiatedBy: GraphAuditActivityInitiator!
  loggedByService: String
  operationType: String
  result: GraphOperationResult
  resultReason: String
  targetResources: [GraphTargetResource]
  id: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum GraphOperationResult {
  success
  failure
  timeout
  unknownFutureValue
}

type GraphProvisioningObjectSummary implements GraphEntity {
  activityDateTime: DateTime!
  changeId: String
  cycleId: String
  durationInMilliseconds: Int
  initiatedBy: GraphInitiator
  jobId: String
  modifiedProperties: [GraphModifiedProperty]
  provisioningAction: GraphProvisioningAction
  provisioningStatusInfo: GraphProvisioningStatusInfo
  provisioningSteps: [GraphProvisioningStep]
  servicePrincipal: GraphProvisioningServicePrincipal
  sourceIdentity: GraphProvisionedIdentity
  sourceSystem: GraphProvisioningSystem
  targetIdentity: GraphProvisionedIdentity
  targetSystem: GraphProvisioningSystem
  tenantId: String
  id: String!
}

enum GraphProvisioningAction {
  other
  create
  delete
  disable
  update
  stagedDelete
  unknownFutureValue
}

type GraphSignIn implements GraphEntity {
  appDisplayName: String
  appId: String
  appliedConditionalAccessPolicies: [GraphAppliedConditionalAccessPolicy]
  clientAppUsed: String
  conditionalAccessStatus: GraphConditionalAccessStatus
  correlationId: String
  createdDateTime: DateTime!
  deviceDetail: GraphDeviceDetail
  ipAddress: String
  isInteractive: Boolean
  location: GraphSignInLocation
  resourceDisplayName: String
  resourceId: String
  riskDetail: GraphRiskDetail
  riskEventTypes: [GraphRiskEventType]
  riskEventTypes_v2: [String]
  riskLevelAggregated: GraphRiskLevel
  riskLevelDuringSignIn: GraphRiskLevel
  riskState: GraphRiskState
  status: GraphSignInStatus
  userDisplayName: String
  userId: String!
  userPrincipalName: String
  id: String!
}

enum GraphConditionalAccessStatus {
  success
  failure
  notApplied
  unknownFutureValue
}

enum GraphRiskDetail {
  none
  adminGeneratedTemporaryPassword
  userPerformedSecuredPasswordChange
  userPerformedSecuredPasswordReset
  adminConfirmedSigninSafe
  aiConfirmedSigninSafe
  userPassedMFADrivenByRiskBasedPolicy
  adminDismissedAllRiskForUser
  adminConfirmedSigninCompromised
  hidden
  adminConfirmedUserCompromised
  unknownFutureValue
}

enum GraphRiskEventType {
  unlikelyTravel
  anonymizedIPAddress
  maliciousIPAddress
  unfamiliarFeatures
  malwareInfectedIPAddress
  suspiciousIPAddress
  leakedCredentials
  investigationsThreatIntelligence
  generic
  adminConfirmedUserCompromised
  mcasImpossibleTravel
  mcasSuspiciousInboxManipulationRules
  investigationsThreatIntelligenceSigninLinked
  maliciousIPAddressValidCredentialsBlockedIP
  unknownFutureValue
}

enum GraphRiskLevel {
  low
  medium
  high
  hidden
  none
  unknownFutureValue
}

enum GraphRiskState {
  none
  confirmedSafe
  remediated
  dismissed
  atRisk
  confirmedCompromised
  unknownFutureValue
}

type GraphRestrictedSignIn {
  targetTenantId: GUID
  appDisplayName: String
  appId: String
  appliedConditionalAccessPolicies: [GraphAppliedConditionalAccessPolicy]
  clientAppUsed: String
  conditionalAccessStatus: GraphConditionalAccessStatus
  correlationId: String
  createdDateTime: DateTime!
  deviceDetail: GraphDeviceDetail
  ipAddress: String
  isInteractive: Boolean
  location: GraphSignInLocation
  resourceDisplayName: String
  resourceId: String
  riskDetail: GraphRiskDetail
  riskEventTypes: [GraphRiskEventType]
  riskEventTypes_v2: [String]
  riskLevelAggregated: GraphRiskLevel
  riskLevelDuringSignIn: GraphRiskLevel
  riskState: GraphRiskState
  status: GraphSignInStatus
  userDisplayName: String
  userId: String!
  userPrincipalName: String
  id: String!
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar GUID

type GraphInvitation implements GraphEntity {
  invitedUserDisplayName: String
  invitedUserEmailAddress: String!
  invitedUserMessageInfo: GraphInvitedUserMessageInfo
  invitedUserType: String
  inviteRedeemUrl: String
  inviteRedirectUrl: String!
  sendInvitationMessage: Boolean
  status: String
  invitedUser: GraphUser
  id: String!
}

type GraphDirectoryObject implements GraphEntity {
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input GraphDirectoryObjectInput {
  deletedDateTime: DateTime
  rest: JSON
  id: String!
}

type GraphUser {
  accountEnabled: Boolean
  ageGroup: String
  assignedLicenses: [GraphAssignedLicense]!
  assignedPlans: [GraphAssignedPlan]!
  businessPhones: [String]!
  city: String
  companyName: String
  consentProvidedForMinor: String
  country: String
  createdDateTime: DateTime
  creationType: String
  department: String
  displayName: String
  employeeHireDate: DateTime
  employeeId: String
  employeeOrgData: GraphEmployeeOrgData
  employeeType: String
  externalUserState: String
  externalUserStateChangeDateTime: DateTime
  faxNumber: String
  givenName: String
  identities: [GraphObjectIdentity]
  imAddresses: [String]
  isResourceAccount: Boolean
  jobTitle: String
  lastPasswordChangeDateTime: DateTime
  legalAgeGroupClassification: String
  licenseAssignmentStates: [GraphLicenseAssignmentState]
  mail: String
  mailNickname: String
  mobilePhone: String
  officeLocation: String
  onPremisesDistinguishedName: String
  onPremisesDomainName: String
  onPremisesExtensionAttributes: GraphOnPremisesExtensionAttributes
  onPremisesImmutableId: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningError]
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  onPremisesSyncEnabled: Boolean
  onPremisesUserPrincipalName: String
  otherMails: [String]!
  passwordPolicies: String
  passwordProfile: GraphPasswordProfile
  postalCode: String
  preferredLanguage: String
  provisionedPlans: [GraphProvisionedPlan]!
  proxyAddresses: [String]!
  showInAddressList: Boolean
  signInSessionsValidFromDateTime: DateTime
  state: String
  streetAddress: String
  surname: String
  usageLocation: String
  userPrincipalName: String
  userType: String
  mailboxSettings: GraphMailboxSettings
  deviceEnrollmentLimit: Int!
  aboutMe: String
  birthday: DateTime!
  hireDate: DateTime!
  interests: [String]
  mySite: String
  pastProjects: [String]
  preferredName: String
  responsibilities: [String]
  schools: [String]
  skills: [String]
  appRoleAssignments(queryOptions: QueryOptions): [GraphAppRoleAssignment]
  appRoleAssignmentsById(id: ID): GraphAppRoleAssignment
  createdObjects(queryOptions: QueryOptions): [GraphDirectoryObject]
  createdObjectsById(id: ID): GraphDirectoryObject
  directReports(queryOptions: QueryOptions): [GraphDirectoryObject]
  directReportsById(id: ID): GraphDirectoryObject
  licenseDetails(queryOptions: QueryOptions): [GraphLicenseDetails]
  licenseDetailsById(id: ID): GraphLicenseDetails
  manager: GraphDirectoryObject
  memberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  memberOfById(id: ID): GraphDirectoryObject
  oauth2PermissionGrants(queryOptions: QueryOptions): [GraphOAuth2PermissionGrant]
  oauth2PermissionGrantsById(id: ID): GraphOAuth2PermissionGrant
  ownedDevices(queryOptions: QueryOptions): [GraphDirectoryObject]
  ownedDevicesById(id: ID): GraphDirectoryObject
  ownedObjects(queryOptions: QueryOptions): [GraphDirectoryObject]
  ownedObjectsById(id: ID): GraphDirectoryObject
  registeredDevices(queryOptions: QueryOptions): [GraphDirectoryObject]
  registeredDevicesById(id: ID): GraphDirectoryObject
  scopedRoleMemberOf(queryOptions: QueryOptions): [GraphScopedRoleMembership]
  scopedRoleMemberOfById(id: ID): GraphScopedRoleMembership
  transitiveMemberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  transitiveMemberOfById(id: ID): GraphDirectoryObject
  calendar: GraphCalendar
  calendarGroups(queryOptions: QueryOptions): [GraphCalendarGroup]
  calendarGroupsById(id: ID): GraphCalendarGroup
  calendars(queryOptions: QueryOptions): [GraphCalendar]
  calendarsById(id: ID): GraphCalendar
  calendarView(queryOptions: QueryOptions): [GraphEvent]
  calendarViewById(id: ID): GraphEvent
  contactFolders(queryOptions: QueryOptions): [GraphContactFolder]
  contactFoldersById(id: ID): GraphContactFolder
  contacts(queryOptions: QueryOptions): [GraphContact]
  contactsById(id: ID): GraphContact
  events(queryOptions: QueryOptions): [GraphEvent]
  eventsById(id: ID): GraphEvent
  inferenceClassification: GraphInferenceClassification
  mailFolders(queryOptions: QueryOptions): [GraphMailFolder]
  mailFoldersById(id: ID): GraphMailFolder
  messages(queryOptions: QueryOptions): [GraphMessage]
  messagesById(id: ID): GraphMessage
  outlook: GraphOutlookUser
  people(queryOptions: QueryOptions): [GraphPerson]
  peopleById(id: ID): GraphPerson
  photo: GraphProfilePhoto
  photos(queryOptions: QueryOptions): [GraphProfilePhoto]
  photosById(id: ID): GraphProfilePhoto
  drive: GraphDrive
  drives(queryOptions: QueryOptions): [GraphDrive]
  drivesById(id: ID): GraphDrive
  followedSites(queryOptions: QueryOptions): [GraphSite]
  followedSitesById(id: ID): GraphSite
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  agreementAcceptances(queryOptions: QueryOptions): [GraphAgreementAcceptance]
  agreementAcceptancesById(id: ID): GraphAgreementAcceptance
  managedDevices(queryOptions: QueryOptions): [GraphManagedDevice]
  managedDevicesById(id: ID): GraphManagedDevice
  managedAppRegistrations(queryOptions: QueryOptions): [GraphManagedAppRegistration]
  managedAppRegistrationsById(id: ID): GraphManagedAppRegistration
  deviceManagementTroubleshootingEvents(queryOptions: QueryOptions): [GraphDeviceManagementTroubleshootingEvent]
  deviceManagementTroubleshootingEventsById(id: ID): GraphDeviceManagementTroubleshootingEvent
  planner: GraphPlannerUser
  insights: GraphOfficeGraphInsights
  settings: GraphUserSettings
  onenote: GraphOnenote
  activities(queryOptions: QueryOptions): [GraphUserActivity]
  activitiesById(id: ID): GraphUserActivity
  onlineMeetings(queryOptions: QueryOptions): [GraphOnlineMeeting]
  onlineMeetingsById(id: ID): GraphOnlineMeeting
  presence: GraphPresence
  authentication: GraphAuthentication
  chats(queryOptions: QueryOptions): [GraphChat]
  chatsById(id: ID): GraphChat
  joinedTeams(queryOptions: QueryOptions): [GraphTeam]
  joinedTeamsById(id: ID): GraphTeam
  teamwork: GraphUserTeamwork
  todo: GraphTodo
  rest: JSON
  reminderView: [GraphReminder]
  getManagedAppDiagnosticStatuses: [GraphManagedAppDiagnosticStatus]
  getManagedAppPolicies: [GraphManagedAppPolicy]
  delta: [GraphUser]
  assignLicense(
    bindingParameter: GraphUserInput!
    addLicenses: [GraphAssignedLicenseInput]!
    removeLicenses: [GUID]!
  ): JSON
  changePassword(bindingParameter: GraphUserInput!, currentPassword: String, newPassword: String): JSON
  reprocessLicenseAssignment(bindingParameter: GraphUserInput!): JSON
  revokeSignInSessions(bindingParameter: GraphUserInput!): JSON
  findMeetingTimes(
    bindingParameter: GraphUserInput
    attendees: [GraphAttendeeBaseInput]
    locationConstraint: GraphLocationConstraintInput
    timeConstraint: GraphTimeConstraintInput
    meetingDuration: ISO8601Duration
    maxCandidates: Int
    isOrganizerOptional: Boolean
    returnSuggestionReasons: Boolean
    minimumAttendeePercentage: Float
  ): JSON
  getMailTips(bindingParameter: GraphUserInput, EmailAddresses: [String]!, MailTipsOptions: GraphMailTipsType): JSON
  sendMail(bindingParameter: GraphUserInput, Message: GraphMessageInput!, SaveToSentItems: Boolean): JSON
  translateExchangeIds(
    bindingParameter: GraphUserInput
    InputIds: [String]!
    TargetIdType: GraphExchangeIdFormat!
    SourceIdType: GraphExchangeIdFormat!
  ): JSON
  removeAllDevicesFromManagement(bindingParameter: GraphUserInput): JSON
  wipeManagedAppRegistrationsByDeviceTag(bindingParameter: GraphUserInput, deviceTag: String): JSON
  exportPersonalData(bindingParameter: GraphUserInput, storageLocation: String): JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

interface GraphExtension {
  rest: JSON
  id: String!
}

interface GraphManagedAppRegistration {
  appIdentifier: GraphMobileAppIdentifier
  applicationVersion: String
  createdDateTime: DateTime!
  deviceName: String
  deviceTag: String
  deviceType: String
  flaggedReasons: [GraphManagedAppFlaggedReason]!
  lastSyncDateTime: DateTime!
  managementSdkVersion: String
  platformVersion: String
  userId: String
  version: String
  appliedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  appliedPoliciesById(id: ID): GraphManagedAppPolicy
  intendedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  intendedPoliciesById(id: ID): GraphManagedAppPolicy
  operations(queryOptions: QueryOptions): [GraphManagedAppOperation]
  operationsById(id: ID): GraphManagedAppOperation
  getUserIdsWithFlaggedAppRegistration: [String]
  id: String!
}

interface GraphMobileAppIdentifier {
  rest: JSON
}

enum GraphManagedAppFlaggedReason {
  none
  rootedDevice
}

interface GraphManagedAppPolicy {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

input GraphManagedAppPolicyInput {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

input GraphManagedMobileAppInput {
  mobileAppIdentifier: GraphMobileAppIdentifierInput
  version: String
  id: String!
}

input GraphMobileAppIdentifierInput {
  rest: JSON
}

input GraphUserInput {
  accountEnabled: Boolean
  ageGroup: String
  assignedLicenses: [GraphAssignedLicenseInput]!
  assignedPlans: [GraphAssignedPlanInput]!
  businessPhones: [String]!
  city: String
  companyName: String
  consentProvidedForMinor: String
  country: String
  createdDateTime: DateTime
  creationType: String
  department: String
  displayName: String
  employeeHireDate: DateTime
  employeeId: String
  employeeOrgData: GraphEmployeeOrgDataInput
  employeeType: String
  externalUserState: String
  externalUserStateChangeDateTime: DateTime
  faxNumber: String
  givenName: String
  identities: [GraphObjectIdentityInput]
  imAddresses: [String]
  isResourceAccount: Boolean
  jobTitle: String
  lastPasswordChangeDateTime: DateTime
  legalAgeGroupClassification: String
  licenseAssignmentStates: [GraphLicenseAssignmentStateInput]
  mail: String
  mailNickname: String
  mobilePhone: String
  officeLocation: String
  onPremisesDistinguishedName: String
  onPremisesDomainName: String
  onPremisesExtensionAttributes: GraphOnPremisesExtensionAttributesInput
  onPremisesImmutableId: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningErrorInput]
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  onPremisesSyncEnabled: Boolean
  onPremisesUserPrincipalName: String
  otherMails: [String]!
  passwordPolicies: String
  passwordProfile: GraphPasswordProfileInput
  postalCode: String
  preferredLanguage: String
  provisionedPlans: [GraphProvisionedPlanInput]!
  proxyAddresses: [String]!
  showInAddressList: Boolean
  signInSessionsValidFromDateTime: DateTime
  state: String
  streetAddress: String
  surname: String
  usageLocation: String
  userPrincipalName: String
  userType: String
  mailboxSettings: GraphMailboxSettingsInput
  deviceEnrollmentLimit: Int!
  aboutMe: String
  birthday: DateTime!
  hireDate: DateTime!
  interests: [String]
  mySite: String
  pastProjects: [String]
  preferredName: String
  responsibilities: [String]
  schools: [String]
  skills: [String]
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphAssignedLicenseInput {
  disabledPlans: [GUID]!
  skuId: GUID
}

input GraphAssignedPlanInput {
  assignedDateTime: DateTime
  capabilityStatus: String
  service: String
  servicePlanId: GUID
}

input GraphEmployeeOrgDataInput {
  costCenter: String
  division: String
}

input GraphObjectIdentityInput {
  issuer: String
  issuerAssignedId: String
  signInType: String
}

input GraphLicenseAssignmentStateInput {
  assignedByGroup: String
  disabledPlans: [GUID]
  error: String
  skuId: GUID
  state: String
}

input GraphOnPremisesExtensionAttributesInput {
  extensionAttribute1: String
  extensionAttribute10: String
  extensionAttribute11: String
  extensionAttribute12: String
  extensionAttribute13: String
  extensionAttribute14: String
  extensionAttribute15: String
  extensionAttribute2: String
  extensionAttribute3: String
  extensionAttribute4: String
  extensionAttribute5: String
  extensionAttribute6: String
  extensionAttribute7: String
  extensionAttribute8: String
  extensionAttribute9: String
}

input GraphOnPremisesProvisioningErrorInput {
  category: String
  occurredDateTime: DateTime
  propertyCausingError: String
  value: String
}

input GraphPasswordProfileInput {
  forceChangePasswordNextSignIn: Boolean
  forceChangePasswordNextSignInWithMfa: Boolean
  password: String
}

input GraphProvisionedPlanInput {
  capabilityStatus: String
  provisioningStatus: String
  service: String
}

input GraphMailboxSettingsInput {
  archiveFolder: String
  automaticRepliesSetting: GraphAutomaticRepliesSettingInput
  dateFormat: String
  delegateMeetingMessageDeliveryOptions: GraphDelegateMeetingMessageDeliveryOptions
  language: GraphLocaleInfoInput
  timeFormat: String
  timeZone: String
  workingHours: GraphWorkingHoursInput
}

input GraphAutomaticRepliesSettingInput {
  externalAudience: GraphExternalAudienceScope
  externalReplyMessage: String
  internalReplyMessage: String
  scheduledEndDateTime: GraphDateTimeTimeZoneInput
  scheduledStartDateTime: GraphDateTimeTimeZoneInput
  status: GraphAutomaticRepliesStatus
}

enum GraphExternalAudienceScope {
  none
  contactsOnly
  all
}

input GraphDateTimeTimeZoneInput {
  dateTime: String!
  timeZone: String
}

enum GraphAutomaticRepliesStatus {
  disabled
  alwaysEnabled
  scheduled
}

enum GraphDelegateMeetingMessageDeliveryOptions {
  sendToDelegateAndInformationToPrincipal
  sendToDelegateAndPrincipal
  sendToDelegateOnly
}

input GraphLocaleInfoInput {
  displayName: String
  locale: String
}

input GraphWorkingHoursInput {
  daysOfWeek: [GraphDayOfWeek]
  endTime: String
  startTime: String
  timeZone: GraphTimeZoneBaseInput
}

enum GraphDayOfWeek {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

input GraphTimeZoneBaseInput {
  name: String
}

input GraphAttendeeBaseInput {
  type: GraphAttendeeType
  emailAddress: GraphEmailAddressInput
}

enum GraphAttendeeType {
  required
  optional
  resource
}

input GraphEmailAddressInput {
  address: String
  name: String
}

input GraphLocationConstraintInput {
  isRequired: Boolean
  locations: [GraphLocationConstraintItemInput]
  suggestLocation: Boolean
}

input GraphLocationConstraintItemInput {
  resolveAvailability: Boolean
  address: GraphPhysicalAddressInput
  coordinates: GraphOutlookGeoCoordinatesInput
  displayName: String
  locationEmailAddress: String
  locationType: GraphLocationType
  locationUri: String
  uniqueId: String
  uniqueIdType: GraphLocationUniqueIdType
}

input GraphPhysicalAddressInput {
  city: String
  countryOrRegion: String
  postalCode: String
  state: String
  street: String
}

input GraphOutlookGeoCoordinatesInput {
  accuracy: Float
  altitude: Float
  altitudeAccuracy: Float
  latitude: Float
  longitude: Float
}

enum GraphLocationType {
  default
  conferenceRoom
  homeAddress
  businessAddress
  geoCoordinates
  streetAddress
  hotel
  restaurant
  localBusiness
  postalAddress
}

enum GraphLocationUniqueIdType {
  unknown
  locationStore
  directory
  private
  bing
}

input GraphTimeConstraintInput {
  activityDomain: GraphActivityDomain
  timeSlots: [GraphTimeSlotInput]
}

enum GraphActivityDomain {
  unknown
  work
  personal
  unrestricted
}

input GraphTimeSlotInput {
  end: GraphDateTimeTimeZoneInput!
  start: GraphDateTimeTimeZoneInput!
}

"""
A string representing a duration conforming to the ISO8601 standard,
such as: P1W1DT13H23M34S
P is the duration designator (for period) placed at the start of the duration representation.
Y is the year designator that follows the value for the number of years.
M is the month designator that follows the value for the number of months.
W is the week designator that follows the value for the number of weeks.
D is the day designator that follows the value for the number of days.
T is the time designator that precedes the time components of the representation.
H is the hour designator that follows the value for the number of hours.
M is the minute designator that follows the value for the number of minutes.
S is the second designator that follows the value for the number of seconds.

Note the time designator, T, that precedes the time value.

Matches moment.js, Luxon and DateFns implementations
,/. is valid for decimal places and +/- is a valid prefix
"""
scalar ISO8601Duration

enum GraphMailTipsType {
  automaticReplies
  mailboxFullStatus
  customMailTip
  externalMemberCount
  totalMemberCount
  maxMessageSize
  deliveryRestriction
  moderationStatus
  recipientScope
  recipientSuggestions
}

input GraphMessageInput {
  bccRecipients: [GraphRecipientInput]
  body: GraphItemBodyInput
  bodyPreview: String
  ccRecipients: [GraphRecipientInput]
  conversationId: String
  conversationIndex: String
  flag: GraphFollowupFlagInput
  from: GraphRecipientInput
  hasAttachments: Boolean
  importance: GraphImportance
  inferenceClassification: GraphInferenceClassificationType
  internetMessageHeaders: [GraphInternetMessageHeaderInput]
  internetMessageId: String
  isDeliveryReceiptRequested: Boolean
  isDraft: Boolean
  isRead: Boolean
  isReadReceiptRequested: Boolean
  parentFolderId: String
  receivedDateTime: DateTime
  replyTo: [GraphRecipientInput]
  sender: GraphRecipientInput
  sentDateTime: DateTime
  subject: String
  toRecipients: [GraphRecipientInput]
  uniqueBody: GraphItemBodyInput
  webLink: String
  rest: JSON
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

input GraphRecipientInput {
  emailAddress: GraphEmailAddressInput
}

input GraphItemBodyInput {
  content: String
  contentType: GraphBodyType
}

enum GraphBodyType {
  text
  html
}

input GraphFollowupFlagInput {
  completedDateTime: GraphDateTimeTimeZoneInput
  dueDateTime: GraphDateTimeTimeZoneInput
  flagStatus: GraphFollowupFlagStatus
  startDateTime: GraphDateTimeTimeZoneInput
}

enum GraphFollowupFlagStatus {
  notFlagged
  complete
  flagged
}

enum GraphImportance {
  low
  normal
  high
}

enum GraphInferenceClassificationType {
  focused
  other
}

input GraphInternetMessageHeaderInput {
  name: String
  value: String
}

enum GraphExchangeIdFormat {
  entryId
  ewsId
  immutableEntryId
  restId
  restImmutableEntryId
}

type GraphAppRoleAssignment {
  appRoleId: GUID!
  createdDateTime: DateTime
  principalDisplayName: String
  principalId: GUID
  principalType: String
  resourceDisplayName: String
  resourceId: GUID
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphLicenseDetails implements GraphEntity {
  servicePlans: [GraphServicePlanInfo]!
  skuId: GUID
  skuPartNumber: String
  id: String!
}

type GraphOAuth2PermissionGrant implements GraphEntity {
  clientId: String!
  consentType: String
  principalId: String
  resourceId: String!
  scope: String
  delta: [GraphOAuth2PermissionGrant]
  id: String!
}

type GraphScopedRoleMembership implements GraphEntity {
  administrativeUnitId: String!
  roleId: String!
  roleMemberInfo: GraphIdentity!
  id: String!
}

type GraphCalendar implements GraphEntity {
  allowedOnlineMeetingProviders: [GraphOnlineMeetingProviderType]
  canEdit: Boolean
  canShare: Boolean
  canViewPrivateItems: Boolean
  changeKey: String
  color: GraphCalendarColor
  defaultOnlineMeetingProvider: GraphOnlineMeetingProviderType
  hexColor: String
  isDefaultCalendar: Boolean
  isRemovable: Boolean
  isTallyingResponses: Boolean
  name: String
  owner: GraphEmailAddress
  calendarPermissions(queryOptions: QueryOptions): [GraphCalendarPermission]
  calendarPermissionsById(id: ID): GraphCalendarPermission
  calendarView(queryOptions: QueryOptions): [GraphEvent]
  calendarViewById(id: ID): GraphEvent
  events(queryOptions: QueryOptions): [GraphEvent]
  eventsById(id: ID): GraphEvent
  multiValueExtendedProperties(queryOptions: QueryOptions): [GraphMultiValueLegacyExtendedProperty]
  multiValueExtendedPropertiesById(id: ID): GraphMultiValueLegacyExtendedProperty
  singleValueExtendedProperties(queryOptions: QueryOptions): [GraphSingleValueLegacyExtendedProperty]
  singleValueExtendedPropertiesById(id: ID): GraphSingleValueLegacyExtendedProperty
  allowedCalendarSharingRoles: [GraphCalendarRoleType]
  getSchedule(
    bindingParameter: GraphCalendarInput
    Schedules: [String]
    EndTime: GraphDateTimeTimeZoneInput
    StartTime: GraphDateTimeTimeZoneInput
    AvailabilityViewInterval: Int
  ): JSON
  id: String!
}

enum GraphOnlineMeetingProviderType {
  unknown
  skypeForBusiness
  skypeForConsumer
  teamsForBusiness
}

enum GraphCalendarColor {
  auto
  lightBlue
  lightGreen
  lightOrange
  lightGray
  lightYellow
  lightTeal
  lightPink
  lightBrown
  lightRed
  maxColor
}

enum GraphCalendarRoleType {
  none
  freeBusyRead
  limitedRead
  read
  write
  delegateWithoutPrivateEventAccess
  delegateWithPrivateEventAccess
  custom
}

input GraphCalendarInput {
  allowedOnlineMeetingProviders: [GraphOnlineMeetingProviderType]
  canEdit: Boolean
  canShare: Boolean
  canViewPrivateItems: Boolean
  changeKey: String
  color: GraphCalendarColor
  defaultOnlineMeetingProvider: GraphOnlineMeetingProviderType
  hexColor: String
  isDefaultCalendar: Boolean
  isRemovable: Boolean
  isTallyingResponses: Boolean
  name: String
  owner: GraphEmailAddressInput
  id: String!
}

type GraphCalendarGroup implements GraphEntity {
  changeKey: String
  classId: GUID
  name: String
  calendars(queryOptions: QueryOptions): [GraphCalendar]
  calendarsById(id: ID): GraphCalendar
  id: String!
}

type TGraphOutlookItem implements GraphOutlookItem & GraphEntity {
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

interface GraphOutlookItem {
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphEvent implements GraphOutlookItem {
  allowNewTimeProposals: Boolean
  attendees: [GraphAttendee]
  body: GraphItemBody
  bodyPreview: String
  end: GraphDateTimeTimeZone
  hasAttachments: Boolean
  hideAttendees: Boolean
  iCalUId: String
  importance: GraphImportance
  isAllDay: Boolean
  isCancelled: Boolean
  isDraft: Boolean
  isOnlineMeeting: Boolean
  isOrganizer: Boolean
  isReminderOn: Boolean
  location: GraphLocation
  locations: [GraphLocation]
  onlineMeeting: GraphOnlineMeetingInfo
  onlineMeetingProvider: GraphOnlineMeetingProviderType
  onlineMeetingUrl: String
  organizer: GraphRecipient
  originalEndTimeZone: String
  originalStart: DateTime
  originalStartTimeZone: String
  recurrence: GraphPatternedRecurrence
  reminderMinutesBeforeStart: Int
  responseRequested: Boolean
  responseStatus: GraphResponseStatus
  sensitivity: GraphSensitivity
  seriesMasterId: String
  showAs: GraphFreeBusyStatus
  start: GraphDateTimeTimeZone
  subject: String
  transactionId: String
  type: GraphEventType
  webLink: String
  attachments(queryOptions: QueryOptions): [GraphAttachment]
  attachmentsById(id: ID): GraphAttachment
  calendar: GraphCalendar
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  instances(queryOptions: QueryOptions): [GraphEvent]
  instancesById(id: ID): GraphEvent
  multiValueExtendedProperties(queryOptions: QueryOptions): [GraphMultiValueLegacyExtendedProperty]
  multiValueExtendedPropertiesById(id: ID): GraphMultiValueLegacyExtendedProperty
  singleValueExtendedProperties(queryOptions: QueryOptions): [GraphSingleValueLegacyExtendedProperty]
  singleValueExtendedPropertiesById(id: ID): GraphSingleValueLegacyExtendedProperty
  rest: JSON
  delta: [GraphEvent]
  accept(bindingParameter: GraphEventInput, SendResponse: Boolean, Comment: String): JSON
  cancel(bindingParameter: GraphEventInput, Comment: String): JSON
  decline(
    bindingParameter: GraphEventInput
    ProposedNewTime: GraphTimeSlotInput
    SendResponse: Boolean
    Comment: String
  ): JSON
  dismissReminder(bindingParameter: GraphEventInput): JSON
  forward(bindingParameter: GraphEventInput, ToRecipients: [GraphRecipientInput], Comment: String): JSON
  snoozeReminder(bindingParameter: GraphEventInput, NewReminderTime: GraphDateTimeTimeZoneInput!): JSON
  tentativelyAccept(
    bindingParameter: GraphEventInput
    ProposedNewTime: GraphTimeSlotInput
    SendResponse: Boolean
    Comment: String
  ): JSON
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

enum GraphSensitivity {
  normal
  personal
  private
  confidential
}

enum GraphFreeBusyStatus {
  unknown
  free
  tentative
  busy
  oof
  workingElsewhere
}

enum GraphEventType {
  singleInstance
  occurrence
  exception
  seriesMaster
}

interface GraphAttachment {
  contentType: String
  isInline: Boolean!
  lastModifiedDateTime: DateTime
  name: String
  size: Int!
  createUploadSession(bindingParameter: [GraphAttachmentInput], AttachmentItem: GraphAttachmentItemInput!): JSON
  id: String!
}

input GraphAttachmentInput {
  contentType: String
  isInline: Boolean!
  lastModifiedDateTime: DateTime
  name: String
  size: Int!
  id: String!
}

input GraphAttachmentItemInput {
  attachmentType: GraphAttachmentType
  contentType: String
  isInline: Boolean
  name: String
  size: BigInt
}

enum GraphAttachmentType {
  file
  item
  reference
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input GraphEventInput {
  allowNewTimeProposals: Boolean
  attendees: [GraphAttendeeInput]
  body: GraphItemBodyInput
  bodyPreview: String
  end: GraphDateTimeTimeZoneInput
  hasAttachments: Boolean
  hideAttendees: Boolean
  iCalUId: String
  importance: GraphImportance
  isAllDay: Boolean
  isCancelled: Boolean
  isDraft: Boolean
  isOnlineMeeting: Boolean
  isOrganizer: Boolean
  isReminderOn: Boolean
  location: GraphLocationInput
  locations: [GraphLocationInput]
  onlineMeeting: GraphOnlineMeetingInfoInput
  onlineMeetingProvider: GraphOnlineMeetingProviderType
  onlineMeetingUrl: String
  organizer: GraphRecipientInput
  originalEndTimeZone: String
  originalStart: DateTime
  originalStartTimeZone: String
  recurrence: GraphPatternedRecurrenceInput
  reminderMinutesBeforeStart: Int
  responseRequested: Boolean
  responseStatus: GraphResponseStatusInput
  sensitivity: GraphSensitivity
  seriesMasterId: String
  showAs: GraphFreeBusyStatus
  start: GraphDateTimeTimeZoneInput
  subject: String
  transactionId: String
  type: GraphEventType
  webLink: String
  rest: JSON
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

input GraphAttendeeInput {
  proposedNewTime: GraphTimeSlotInput
  status: GraphResponseStatusInput
  type: GraphAttendeeType
  emailAddress: GraphEmailAddressInput
}

input GraphResponseStatusInput {
  response: GraphResponseType
  time: DateTime
}

enum GraphResponseType {
  none
  organizer
  tentativelyAccepted
  accepted
  declined
  notResponded
}

input GraphLocationInput {
  address: GraphPhysicalAddressInput
  coordinates: GraphOutlookGeoCoordinatesInput
  displayName: String
  locationEmailAddress: String
  locationType: GraphLocationType
  locationUri: String
  uniqueId: String
  uniqueIdType: GraphLocationUniqueIdType
}

input GraphOnlineMeetingInfoInput {
  conferenceId: String
  joinUrl: String
  phones: [GraphPhoneInput]
  quickDial: String
  tollFreeNumbers: [String]
  tollNumber: String
}

input GraphPhoneInput {
  language: String
  number: String
  region: String
  type: GraphPhoneType
}

enum GraphPhoneType {
  home
  business
  mobile
  other
  assistant
  homeFax
  businessFax
  otherFax
  pager
  radio
}

input GraphPatternedRecurrenceInput {
  pattern: GraphRecurrencePatternInput
  range: GraphRecurrenceRangeInput
}

input GraphRecurrencePatternInput {
  dayOfMonth: Int!
  daysOfWeek: [GraphDayOfWeek]
  firstDayOfWeek: GraphDayOfWeek
  index: GraphWeekIndex
  interval: Int!
  month: Int!
  type: GraphRecurrencePatternType
}

enum GraphWeekIndex {
  first
  second
  third
  fourth
  last
}

enum GraphRecurrencePatternType {
  daily
  weekly
  absoluteMonthly
  relativeMonthly
  absoluteYearly
  relativeYearly
}

input GraphRecurrenceRangeInput {
  endDate: Date
  numberOfOccurrences: Int!
  recurrenceTimeZone: String
  startDate: Date
  type: GraphRecurrenceRangeType
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

enum GraphRecurrenceRangeType {
  endDate
  noEnd
  numbered
}

type GraphContactFolder implements GraphEntity {
  displayName: String
  parentFolderId: String
  childFolders(queryOptions: QueryOptions): [GraphContactFolder]
  childFoldersById(id: ID): GraphContactFolder
  contacts(queryOptions: QueryOptions): [GraphContact]
  contactsById(id: ID): GraphContact
  multiValueExtendedProperties(queryOptions: QueryOptions): [GraphMultiValueLegacyExtendedProperty]
  multiValueExtendedPropertiesById(id: ID): GraphMultiValueLegacyExtendedProperty
  singleValueExtendedProperties(queryOptions: QueryOptions): [GraphSingleValueLegacyExtendedProperty]
  singleValueExtendedPropertiesById(id: ID): GraphSingleValueLegacyExtendedProperty
  delta: [GraphContactFolder]
  id: String!
}

type GraphContact implements GraphOutlookItem {
  assistantName: String
  birthday: DateTime
  businessAddress: GraphPhysicalAddress
  businessHomePage: String
  businessPhones: [String]
  children: [String]
  companyName: String
  department: String
  displayName: String
  emailAddresses: [GraphEmailAddress]
  fileAs: String
  generation: String
  givenName: String
  homeAddress: GraphPhysicalAddress
  homePhones: [String]
  imAddresses: [String]
  initials: String
  jobTitle: String
  manager: String
  middleName: String
  mobilePhone: String
  nickName: String
  officeLocation: String
  otherAddress: GraphPhysicalAddress
  parentFolderId: String
  personalNotes: String
  profession: String
  spouseName: String
  surname: String
  title: String
  yomiCompanyName: String
  yomiGivenName: String
  yomiSurname: String
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  multiValueExtendedProperties(queryOptions: QueryOptions): [GraphMultiValueLegacyExtendedProperty]
  multiValueExtendedPropertiesById(id: ID): GraphMultiValueLegacyExtendedProperty
  photo: GraphProfilePhoto
  singleValueExtendedProperties(queryOptions: QueryOptions): [GraphSingleValueLegacyExtendedProperty]
  singleValueExtendedPropertiesById(id: ID): GraphSingleValueLegacyExtendedProperty
  rest: JSON
  delta: [GraphContact]
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphInferenceClassification implements GraphEntity {
  overrides(queryOptions: QueryOptions): [GraphInferenceClassificationOverride]
  overridesById(id: ID): GraphInferenceClassificationOverride
  id: String!
}

type GraphMailFolder implements GraphEntity {
  childFolderCount: Int
  displayName: String
  isHidden: Boolean
  parentFolderId: String
  totalItemCount: Int
  unreadItemCount: Int
  childFolders(queryOptions: QueryOptions): [GraphMailFolder]
  childFoldersById(id: ID): GraphMailFolder
  messageRules(queryOptions: QueryOptions): [GraphMessageRule]
  messageRulesById(id: ID): GraphMessageRule
  messages(queryOptions: QueryOptions): [GraphMessage]
  messagesById(id: ID): GraphMessage
  multiValueExtendedProperties(queryOptions: QueryOptions): [GraphMultiValueLegacyExtendedProperty]
  multiValueExtendedPropertiesById(id: ID): GraphMultiValueLegacyExtendedProperty
  singleValueExtendedProperties(queryOptions: QueryOptions): [GraphSingleValueLegacyExtendedProperty]
  singleValueExtendedPropertiesById(id: ID): GraphSingleValueLegacyExtendedProperty
  delta: [GraphMailFolder]
  copy(bindingParameter: GraphMailFolderInput, DestinationId: String!): JSON
  move(bindingParameter: GraphMailFolderInput, DestinationId: String!): JSON
  id: String!
}

input GraphMailFolderInput {
  childFolderCount: Int
  displayName: String
  isHidden: Boolean
  parentFolderId: String
  totalItemCount: Int
  unreadItemCount: Int
  id: String!
}

type GraphMessage implements GraphOutlookItem {
  bccRecipients: [GraphRecipient]
  body: GraphItemBody
  bodyPreview: String
  ccRecipients: [GraphRecipient]
  conversationId: String
  conversationIndex: String
  flag: GraphFollowupFlag
  from: GraphRecipient
  hasAttachments: Boolean
  importance: GraphImportance
  inferenceClassification: GraphInferenceClassificationType
  internetMessageHeaders: [GraphInternetMessageHeader]
  internetMessageId: String
  isDeliveryReceiptRequested: Boolean
  isDraft: Boolean
  isRead: Boolean
  isReadReceiptRequested: Boolean
  parentFolderId: String
  receivedDateTime: DateTime
  replyTo: [GraphRecipient]
  sender: GraphRecipient
  sentDateTime: DateTime
  subject: String
  toRecipients: [GraphRecipient]
  uniqueBody: GraphItemBody
  webLink: String
  attachments(queryOptions: QueryOptions): [GraphAttachment]
  attachmentsById(id: ID): GraphAttachment
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  multiValueExtendedProperties(queryOptions: QueryOptions): [GraphMultiValueLegacyExtendedProperty]
  multiValueExtendedPropertiesById(id: ID): GraphMultiValueLegacyExtendedProperty
  singleValueExtendedProperties(queryOptions: QueryOptions): [GraphSingleValueLegacyExtendedProperty]
  singleValueExtendedPropertiesById(id: ID): GraphSingleValueLegacyExtendedProperty
  rest: JSON
  delta: [GraphMessage]
  forward(
    bindingParameter: GraphMessageInput
    ToRecipients: [GraphRecipientInput]
    Message: GraphMessageInput
    Comment: String
  ): JSON
  copy(bindingParameter: GraphMessageInput, DestinationId: String!): JSON
  move(bindingParameter: GraphMessageInput, DestinationId: String!): JSON
  createForward(
    bindingParameter: GraphMessageInput
    ToRecipients: [GraphRecipientInput]
    Message: GraphMessageInput
    Comment: String
  ): JSON
  createReply(bindingParameter: GraphMessageInput, Message: GraphMessageInput, Comment: String): JSON
  createReplyAll(bindingParameter: GraphMessageInput, Message: GraphMessageInput, Comment: String): JSON
  reply(bindingParameter: GraphMessageInput, Message: GraphMessageInput, Comment: String): JSON
  replyAll(bindingParameter: GraphMessageInput, Message: GraphMessageInput, Comment: String): JSON
  send(bindingParameter: GraphMessageInput): JSON
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphOutlookUser implements GraphEntity {
  masterCategories(queryOptions: QueryOptions): [GraphOutlookCategory]
  masterCategoriesById(id: ID): GraphOutlookCategory
  supportedLanguages: [GraphLocaleInfo]
  supportedTimeZones: [GraphTimeZoneInformation]
  id: String!
}

type GraphPerson implements GraphEntity {
  birthday: String
  companyName: String
  department: String
  displayName: String
  givenName: String
  imAddress: String
  isFavorite: Boolean
  jobTitle: String
  officeLocation: String
  personNotes: String
  personType: GraphPersonType
  phones: [GraphPhone]
  postalAddresses: [GraphLocation]
  profession: String
  scoredEmailAddresses: [GraphScoredEmailAddress]
  surname: String
  userPrincipalName: String
  websites: [GraphWebsite]
  yomiCompany: String
  id: String!
}

type GraphProfilePhoto implements GraphEntity {
  height: Int
  width: Int
  id: String!
}

type TGraphBaseItem implements GraphBaseItem & GraphEntity {
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

interface GraphBaseItem {
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

type GraphDrive implements GraphBaseItem {
  driveType: String
  owner: GraphIdentitySet
  quota: GraphQuota
  sharePointIds: GraphSharepointIds
  system: GraphSystemFacet
  following(queryOptions: QueryOptions): [GraphDriveItem]
  followingById(id: ID): GraphDriveItem
  items(queryOptions: QueryOptions): [GraphDriveItem]
  itemsById(id: ID): GraphDriveItem
  list: GraphList
  root: GraphDriveItem
  special(queryOptions: QueryOptions): [GraphDriveItem]
  specialById(id: ID): GraphDriveItem
  search: [GraphDriveItem]
  recent: [GraphDriveItem]
  sharedWithMe: [GraphDriveItem]
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

type GraphSite implements GraphBaseItem {
  displayName: String
  error: GraphPublicError
  root: GraphRoot
  sharepointIds: GraphSharepointIds
  siteCollection: GraphSiteCollection
  analytics: GraphItemAnalytics
  columns(queryOptions: QueryOptions): [GraphColumnDefinition]
  columnsById(id: ID): GraphColumnDefinition
  contentTypes(queryOptions: QueryOptions): [GraphContentType]
  contentTypesById(id: ID): GraphContentType
  drive: GraphDrive
  drives(queryOptions: QueryOptions): [GraphDrive]
  drivesById(id: ID): GraphDrive
  items(queryOptions: QueryOptions): [GraphBaseItem]
  itemsById(id: ID): GraphBaseItem
  lists(queryOptions: QueryOptions): [GraphList]
  listsById(id: ID): GraphList
  permissions(queryOptions: QueryOptions): [GraphPermission]
  permissionsById(id: ID): GraphPermission
  sites(queryOptions: QueryOptions): [GraphSite]
  sitesById(id: ID): GraphSite
  onenote: GraphOnenote
  getActivitiesByInterval: [GraphItemActivityStat]
  getByPath: GraphSite
  add(bindingParameter: [GraphSiteInput], value: [GraphSiteInput]): JSON
  remove(bindingParameter: [GraphSiteInput], value: [GraphSiteInput]): JSON
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

input GraphSiteInput {
  displayName: String
  error: GraphPublicErrorInput
  root: GraphRootInput
  sharepointIds: GraphSharepointIdsInput
  siteCollection: GraphSiteCollectionInput
  createdBy: GraphIdentitySetInput
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReferenceInput
  webUrl: String
  id: String!
}

input GraphPublicErrorInput {
  code: String
  details: [GraphPublicErrorDetailInput]
  innerError: GraphPublicInnerErrorInput
  message: String
  target: String
}

input GraphPublicErrorDetailInput {
  code: String
  message: String
  target: String
}

input GraphPublicInnerErrorInput {
  code: String
  details: [GraphPublicErrorDetailInput]
  message: String
  target: String
  rest: JSON
}

input GraphRootInput {
  rest: JSON
}

input GraphSharepointIdsInput {
  listId: String
  listItemId: String
  listItemUniqueId: String
  siteId: String
  siteUrl: String
  tenantId: String
  webId: String
}

input GraphSiteCollectionInput {
  dataLocationCode: String
  hostname: String
  root: GraphRootInput
}

input GraphIdentitySetInput {
  application: GraphIdentityInput
  device: GraphIdentityInput
  user: GraphIdentityInput
  rest: JSON
}

input GraphIdentityInput {
  displayName: String
  id: String
  rest: JSON
}

input GraphItemReferenceInput {
  driveId: String
  driveType: String
  id: String
  name: String
  path: String
  shareId: String
  sharepointIds: GraphSharepointIdsInput
  siteId: String
}

type TGraphExtension implements GraphExtension & GraphEntity {
  rest: JSON
  id: String!
}

type GraphAgreementAcceptance implements GraphEntity {
  agreementFileId: String
  agreementId: String
  deviceDisplayName: String
  deviceId: String
  deviceOSType: String
  deviceOSVersion: String
  expirationDateTime: DateTime
  recordedDateTime: DateTime
  state: GraphAgreementAcceptanceState
  userDisplayName: String
  userEmail: String
  userId: String
  userPrincipalName: String
  id: String!
}

enum GraphAgreementAcceptanceState {
  accepted
  declined
  unknownFutureValue
}

type GraphManagedDevice implements GraphEntity {
  activationLockBypassCode: String
  androidSecurityPatchLevel: String
  azureADDeviceId: String
  azureADRegistered: Boolean
  complianceGracePeriodExpirationDateTime: DateTime!
  complianceState: GraphComplianceState!
  configurationManagerClientEnabledFeatures: GraphConfigurationManagerClientEnabledFeatures
  deviceActionResults: [GraphDeviceActionResult]
  deviceCategoryDisplayName: String
  deviceEnrollmentType: GraphDeviceEnrollmentType!
  deviceHealthAttestationState: GraphDeviceHealthAttestationState
  deviceName: String
  deviceRegistrationState: GraphDeviceRegistrationState!
  easActivated: Boolean!
  easActivationDateTime: DateTime!
  easDeviceId: String
  emailAddress: String
  enrolledDateTime: DateTime!
  exchangeAccessState: GraphDeviceManagementExchangeAccessState!
  exchangeAccessStateReason: GraphDeviceManagementExchangeAccessStateReason!
  exchangeLastSuccessfulSyncDateTime: DateTime!
  freeStorageSpaceInBytes: BigInt!
  imei: String
  isEncrypted: Boolean!
  isSupervised: Boolean!
  jailBroken: String
  lastSyncDateTime: DateTime!
  managedDeviceName: String
  managedDeviceOwnerType: GraphManagedDeviceOwnerType!
  managementAgent: GraphManagementAgentType!
  manufacturer: String
  meid: String
  model: String
  operatingSystem: String
  osVersion: String
  partnerReportedThreatState: GraphManagedDevicePartnerReportedHealthState!
  phoneNumber: String
  remoteAssistanceSessionErrorDetails: String
  remoteAssistanceSessionUrl: String
  serialNumber: String
  subscriberCarrier: String
  totalStorageSpaceInBytes: BigInt!
  userDisplayName: String
  userId: String
  userPrincipalName: String
  wiFiMacAddress: String
  deviceCompliancePolicyStates(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyState]
  deviceCompliancePolicyStatesById(id: ID): GraphDeviceCompliancePolicyState
  deviceConfigurationStates(queryOptions: QueryOptions): [GraphDeviceConfigurationState]
  deviceConfigurationStatesById(id: ID): GraphDeviceConfigurationState
  deviceCategory: GraphDeviceCategory
  bypassActivationLock(bindingParameter: GraphManagedDeviceInput): JSON
  cleanWindowsDevice(bindingParameter: GraphManagedDeviceInput, keepUserData: Boolean!): JSON
  deleteUserFromSharedAppleDevice(bindingParameter: GraphManagedDeviceInput, userPrincipalName: String): JSON
  disableLostMode(bindingParameter: GraphManagedDeviceInput): JSON
  locateDevice(bindingParameter: GraphManagedDeviceInput): JSON
  logoutSharedAppleDeviceActiveUser(bindingParameter: GraphManagedDeviceInput): JSON
  rebootNow(bindingParameter: GraphManagedDeviceInput): JSON
  recoverPasscode(bindingParameter: GraphManagedDeviceInput): JSON
  remoteLock(bindingParameter: GraphManagedDeviceInput): JSON
  requestRemoteAssistance(bindingParameter: GraphManagedDeviceInput): JSON
  resetPasscode(bindingParameter: GraphManagedDeviceInput): JSON
  retire(bindingParameter: GraphManagedDeviceInput): JSON
  shutDown(bindingParameter: GraphManagedDeviceInput): JSON
  syncDevice(bindingParameter: GraphManagedDeviceInput): JSON
  updateWindowsDeviceAccount(
    bindingParameter: GraphManagedDeviceInput
    updateWindowsDeviceAccountActionParameter: GraphUpdateWindowsDeviceAccountActionParameterInput
  ): JSON
  windowsDefenderScan(bindingParameter: GraphManagedDeviceInput, quickScan: Boolean!): JSON
  windowsDefenderUpdateSignatures(bindingParameter: GraphManagedDeviceInput): JSON
  wipe(
    bindingParameter: GraphManagedDeviceInput
    keepEnrollmentData: Boolean
    keepUserData: Boolean
    macOsUnlockCode: String
  ): JSON
  id: String!
}

enum GraphComplianceState {
  unknown
  compliant
  noncompliant
  conflict
  error
  inGracePeriod
  configManager
}

enum GraphDeviceEnrollmentType {
  unknown
  userEnrollment
  deviceEnrollmentManager
  appleBulkWithUser
  appleBulkWithoutUser
  windowsAzureADJoin
  windowsBulkUserless
  windowsAutoEnrollment
  windowsBulkAzureDomainJoin
  windowsCoManagement
}

enum GraphDeviceRegistrationState {
  notRegistered
  registered
  revoked
  keyConflict
  approvalPending
  certificateReset
  notRegisteredPendingEnrollment
  unknown
}

enum GraphDeviceManagementExchangeAccessState {
  none
  unknown
  allowed
  blocked
  quarantined
}

enum GraphDeviceManagementExchangeAccessStateReason {
  none
  unknown
  exchangeGlobalRule
  exchangeIndividualRule
  exchangeDeviceRule
  exchangeUpgrade
  exchangeMailboxPolicy
  other
  compliant
  notCompliant
  notEnrolled
  unknownLocation
  mfaRequired
  azureADBlockDueToAccessPolicy
  compromisedPassword
  deviceNotKnownWithManagedApp
}

enum GraphManagedDeviceOwnerType {
  unknown
  company
  personal
}

enum GraphManagementAgentType {
  eas
  mdm
  easMdm
  intuneClient
  easIntuneClient
  configurationManagerClient
  configurationManagerClientMdm
  configurationManagerClientMdmEas
  unknown
  jamf
  googleCloudDevicePolicyController
}

enum GraphManagedDevicePartnerReportedHealthState {
  unknown
  activated
  deactivated
  secured
  lowSeverity
  mediumSeverity
  highSeverity
  unresponsive
  compromised
  misconfigured
}

input GraphManagedDeviceInput {
  activationLockBypassCode: String
  androidSecurityPatchLevel: String
  azureADDeviceId: String
  azureADRegistered: Boolean
  complianceGracePeriodExpirationDateTime: DateTime!
  complianceState: GraphComplianceState!
  configurationManagerClientEnabledFeatures: GraphConfigurationManagerClientEnabledFeaturesInput
  deviceActionResults: [GraphDeviceActionResultInput]
  deviceCategoryDisplayName: String
  deviceEnrollmentType: GraphDeviceEnrollmentType!
  deviceHealthAttestationState: GraphDeviceHealthAttestationStateInput
  deviceName: String
  deviceRegistrationState: GraphDeviceRegistrationState!
  easActivated: Boolean!
  easActivationDateTime: DateTime!
  easDeviceId: String
  emailAddress: String
  enrolledDateTime: DateTime!
  exchangeAccessState: GraphDeviceManagementExchangeAccessState!
  exchangeAccessStateReason: GraphDeviceManagementExchangeAccessStateReason!
  exchangeLastSuccessfulSyncDateTime: DateTime!
  freeStorageSpaceInBytes: BigInt!
  imei: String
  isEncrypted: Boolean!
  isSupervised: Boolean!
  jailBroken: String
  lastSyncDateTime: DateTime!
  managedDeviceName: String
  managedDeviceOwnerType: GraphManagedDeviceOwnerType!
  managementAgent: GraphManagementAgentType!
  manufacturer: String
  meid: String
  model: String
  operatingSystem: String
  osVersion: String
  partnerReportedThreatState: GraphManagedDevicePartnerReportedHealthState!
  phoneNumber: String
  remoteAssistanceSessionErrorDetails: String
  remoteAssistanceSessionUrl: String
  serialNumber: String
  subscriberCarrier: String
  totalStorageSpaceInBytes: BigInt!
  userDisplayName: String
  userId: String
  userPrincipalName: String
  wiFiMacAddress: String
  id: String!
}

input GraphConfigurationManagerClientEnabledFeaturesInput {
  compliancePolicy: Boolean!
  deviceConfiguration: Boolean!
  inventory: Boolean!
  modernApps: Boolean!
  resourceAccess: Boolean!
  windowsUpdateForBusiness: Boolean!
}

input GraphDeviceActionResultInput {
  actionName: String
  actionState: GraphActionState!
  lastUpdatedDateTime: DateTime!
  startDateTime: DateTime!
}

enum GraphActionState {
  none
  pending
  canceled
  active
  done
  failed
  notSupported
}

input GraphDeviceHealthAttestationStateInput {
  attestationIdentityKey: String
  bitLockerStatus: String
  bootAppSecurityVersion: String
  bootDebugging: String
  bootManagerSecurityVersion: String
  bootManagerVersion: String
  bootRevisionListInfo: String
  codeIntegrity: String
  codeIntegrityCheckVersion: String
  codeIntegrityPolicy: String
  contentNamespaceUrl: String
  contentVersion: String
  dataExcutionPolicy: String
  deviceHealthAttestationStatus: String
  earlyLaunchAntiMalwareDriverProtection: String
  healthAttestationSupportedStatus: String
  healthStatusMismatchInfo: String
  issuedDateTime: DateTime!
  lastUpdateDateTime: String
  operatingSystemKernelDebugging: String
  operatingSystemRevListInfo: String
  pcr0: String
  pcrHashAlgorithm: String
  resetCount: BigInt!
  restartCount: BigInt!
  safeMode: String
  secureBoot: String
  secureBootConfigurationPolicyFingerPrint: String
  testSigning: String
  tpmVersion: String
  virtualSecureMode: String
  windowsPE: String
}

input GraphUpdateWindowsDeviceAccountActionParameterInput {
  calendarSyncEnabled: Boolean
  deviceAccount: GraphWindowsDeviceAccountInput
  deviceAccountEmail: String
  exchangeServer: String
  passwordRotationEnabled: Boolean
  sessionInitiationProtocalAddress: String
}

input GraphWindowsDeviceAccountInput {
  password: String
}

type TGraphManagedAppRegistration implements GraphManagedAppRegistration & GraphEntity {
  appIdentifier: GraphMobileAppIdentifier
  applicationVersion: String
  createdDateTime: DateTime!
  deviceName: String
  deviceTag: String
  deviceType: String
  flaggedReasons: [GraphManagedAppFlaggedReason]!
  lastSyncDateTime: DateTime!
  managementSdkVersion: String
  platformVersion: String
  userId: String
  version: String
  appliedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  appliedPoliciesById(id: ID): GraphManagedAppPolicy
  intendedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  intendedPoliciesById(id: ID): GraphManagedAppPolicy
  operations(queryOptions: QueryOptions): [GraphManagedAppOperation]
  operationsById(id: ID): GraphManagedAppOperation
  getUserIdsWithFlaggedAppRegistration: [String]
  id: String!
}

type GraphDeviceManagementTroubleshootingEvent implements GraphEntity {
  correlationId: String
  eventDateTime: DateTime!
  id: String!
}

type GraphPlannerUser implements GraphEntity {
  plans(queryOptions: QueryOptions): [GraphPlannerPlan]
  plansById(id: ID): GraphPlannerPlan
  tasks(queryOptions: QueryOptions): [GraphPlannerTask]
  tasksById(id: ID): GraphPlannerTask
  id: String!
}

type GraphOfficeGraphInsights implements GraphEntity {
  shared(queryOptions: QueryOptions): [GraphSharedInsight]
  sharedById(id: ID): GraphSharedInsight
  trending(queryOptions: QueryOptions): [GraphTrending]
  trendingById(id: ID): GraphTrending
  used(queryOptions: QueryOptions): [GraphUsedInsight]
  usedById(id: ID): GraphUsedInsight
  id: String!
}

type GraphUserSettings implements GraphEntity {
  contributionToContentDiscoveryAsOrganizationDisabled: Boolean!
  contributionToContentDiscoveryDisabled: Boolean!
  shiftPreferences: GraphShiftPreferences
  id: String!
}

type GraphOnenote implements GraphEntity {
  notebooks(queryOptions: QueryOptions): [GraphNotebook]
  notebooksById(id: ID): GraphNotebook
  operations(queryOptions: QueryOptions): [GraphOnenoteOperation]
  operationsById(id: ID): GraphOnenoteOperation
  pages(queryOptions: QueryOptions): [GraphOnenotePage]
  pagesById(id: ID): GraphOnenotePage
  resources(queryOptions: QueryOptions): [GraphOnenoteResource]
  resourcesById(id: ID): GraphOnenoteResource
  sectionGroups(queryOptions: QueryOptions): [GraphSectionGroup]
  sectionGroupsById(id: ID): GraphSectionGroup
  sections(queryOptions: QueryOptions): [GraphOnenoteSection]
  sectionsById(id: ID): GraphOnenoteSection
  id: String!
}

type GraphUserActivity implements GraphEntity {
  activationUrl: String!
  activitySourceHost: String!
  appActivityId: String!
  appDisplayName: String
  contentInfo: GraphJson
  contentUrl: String
  createdDateTime: DateTime
  expirationDateTime: DateTime
  fallbackUrl: String
  lastModifiedDateTime: DateTime
  status: GraphStatus
  userTimezone: String
  visualElements: GraphVisualInfo!
  historyItems(queryOptions: QueryOptions): [GraphActivityHistoryItem]
  historyItemsById(id: ID): GraphActivityHistoryItem
  recent: [GraphUserActivity]
  id: String!
}

enum GraphStatus {
  active
  updated
  deleted
  ignored
  unknownFutureValue
}

type GraphOnlineMeeting implements GraphEntity {
  allowedPresenters: GraphOnlineMeetingPresenters
  audioConferencing: GraphAudioConferencing
  chatInfo: GraphChatInfo
  creationDateTime: DateTime
  endDateTime: DateTime
  externalId: String
  isEntryExitAnnounced: Boolean
  joinInformation: GraphItemBody
  joinWebUrl: String
  lobbyBypassSettings: GraphLobbyBypassSettings
  participants: GraphMeetingParticipants
  startDateTime: DateTime
  subject: String
  videoTeleconferenceId: String
  rest: JSON
  createOrGet(
    bindingParameter: [GraphOnlineMeetingInput]
    chatInfo: GraphChatInfoInput
    endDateTime: DateTime
    externalId: String!
    participants: GraphMeetingParticipantsInput
    startDateTime: DateTime
    subject: String
  ): JSON
  id: String!
}

enum GraphOnlineMeetingPresenters {
  everyone
  organization
  roleIsPresenter
  organizer
  unknownFutureValue
}

input GraphOnlineMeetingInput {
  allowedPresenters: GraphOnlineMeetingPresenters
  audioConferencing: GraphAudioConferencingInput
  chatInfo: GraphChatInfoInput
  creationDateTime: DateTime
  endDateTime: DateTime
  externalId: String
  isEntryExitAnnounced: Boolean
  joinInformation: GraphItemBodyInput
  joinWebUrl: String
  lobbyBypassSettings: GraphLobbyBypassSettingsInput
  participants: GraphMeetingParticipantsInput
  startDateTime: DateTime
  subject: String
  videoTeleconferenceId: String
  rest: JSON
  id: String!
}

input GraphAudioConferencingInput {
  conferenceId: String
  dialinUrl: String
  tollFreeNumber: String
  tollNumber: String
}

input GraphChatInfoInput {
  messageId: String
  replyChainMessageId: String
  threadId: String
}

input GraphLobbyBypassSettingsInput {
  isDialInBypassEnabled: Boolean
  scope: GraphLobbyBypassScope
}

enum GraphLobbyBypassScope {
  organizer
  organization
  organizationAndFederated
  everyone
  unknownFutureValue
}

input GraphMeetingParticipantsInput {
  attendees: [GraphMeetingParticipantInfoInput]
  organizer: GraphMeetingParticipantInfoInput
}

input GraphMeetingParticipantInfoInput {
  identity: GraphIdentitySetInput
  role: GraphOnlineMeetingRole
  upn: String
}

enum GraphOnlineMeetingRole {
  attendee
  presenter
  unknownFutureValue
}

type GraphPresence implements GraphEntity {
  activity: String
  availability: String
  id: String!
}

type GraphAuthentication implements GraphEntity {
  fido2Methods(queryOptions: QueryOptions): [GraphFido2AuthenticationMethod]
  fido2MethodsById(id: ID): GraphFido2AuthenticationMethod
  methods(queryOptions: QueryOptions): [GraphAuthenticationMethod]
  methodsById(id: ID): GraphAuthenticationMethod
  microsoftAuthenticatorMethods(queryOptions: QueryOptions): [GraphMicrosoftAuthenticatorAuthenticationMethod]
  microsoftAuthenticatorMethodsById(id: ID): GraphMicrosoftAuthenticatorAuthenticationMethod
  windowsHelloForBusinessMethods(queryOptions: QueryOptions): [GraphWindowsHelloForBusinessAuthenticationMethod]
  windowsHelloForBusinessMethodsById(id: ID): GraphWindowsHelloForBusinessAuthenticationMethod
  id: String!
}

interface GraphAuthenticationMethod {
  rest: JSON
  id: String!
}

type GraphChat implements GraphEntity {
  chatType: GraphChatType!
  createdDateTime: DateTime
  lastUpdatedDateTime: DateTime
  topic: String
  installedApps(queryOptions: QueryOptions): [GraphTeamsAppInstallation]
  installedAppsById(id: ID): GraphTeamsAppInstallation
  members(queryOptions: QueryOptions): [GraphConversationMember]
  membersById(id: ID): GraphConversationMember
  messages(queryOptions: QueryOptions): [GraphChatMessage]
  messagesById(id: ID): GraphChatMessage
  tabs(queryOptions: QueryOptions): [GraphTeamsTab]
  tabsById(id: ID): GraphTeamsTab
  getAllMessages: [GraphChatMessage]
  sendActivityNotification(
    bindingParameter: GraphChatInput
    topic: GraphTeamworkActivityTopicInput
    activityType: String
    chainId: BigInt
    previewText: GraphItemBodyInput
    templateParameters: [GraphKeyValuePairInput]
    recipient: GraphTeamworkNotificationRecipientInput
  ): JSON
  id: String!
}

enum GraphChatType {
  oneOnOne
  group
  meeting
  unknownFutureValue
}

interface GraphConversationMember {
  displayName: String
  roles: [String]
  visibleHistoryStartDateTime: DateTime
  id: String!
}

input GraphChatInput {
  chatType: GraphChatType!
  createdDateTime: DateTime
  lastUpdatedDateTime: DateTime
  topic: String
  id: String!
}

input GraphTeamworkActivityTopicInput {
  source: GraphTeamworkActivityTopicSource
  value: String!
  webUrl: String
}

enum GraphTeamworkActivityTopicSource {
  entityUrl
  text
}

input GraphKeyValuePairInput {
  name: String!
  value: String
}

input GraphTeamworkNotificationRecipientInput {
  rest: JSON
}

type GraphTeam implements GraphEntity {
  classification: String
  createdDateTime: DateTime
  description: String
  displayName: String
  funSettings: GraphTeamFunSettings
  guestSettings: GraphTeamGuestSettings
  internalId: String
  isArchived: Boolean
  memberSettings: GraphTeamMemberSettings
  messagingSettings: GraphTeamMessagingSettings
  specialization: GraphTeamSpecialization
  visibility: GraphTeamVisibilityType
  webUrl: String
  schedule: GraphSchedule
  channels(queryOptions: QueryOptions): [GraphChannel]
  channelsById(id: ID): GraphChannel
  group: GraphGroup
  installedApps(queryOptions: QueryOptions): [GraphTeamsAppInstallation]
  installedAppsById(id: ID): GraphTeamsAppInstallation
  members(queryOptions: QueryOptions): [GraphConversationMember]
  membersById(id: ID): GraphConversationMember
  operations(queryOptions: QueryOptions): [GraphTeamsAsyncOperation]
  operationsById(id: ID): GraphTeamsAsyncOperation
  primaryChannel: GraphChannel
  template: GraphTeamsTemplate
  rest: JSON
  getAllMessages: [GraphChatMessage]
  archive(bindingParameter: GraphTeamInput, shouldSetSpoSiteReadOnlyForMembers: Boolean): JSON
  clone(
    bindingParameter: GraphTeamInput
    displayName: String
    description: String
    mailNickname: String
    classification: String
    visibility: GraphTeamVisibilityType!
    partsToClone: GraphClonableTeamParts!
  ): JSON
  completeMigration(bindingParameter: GraphTeamInput): JSON
  sendActivityNotification(
    bindingParameter: GraphTeamInput
    topic: GraphTeamworkActivityTopicInput
    activityType: String
    chainId: BigInt
    previewText: GraphItemBodyInput
    templateParameters: [GraphKeyValuePairInput]
    recipient: GraphTeamworkNotificationRecipientInput
  ): JSON
  unarchive(bindingParameter: GraphTeamInput): JSON
  id: String!
}

enum GraphTeamSpecialization {
  none
  educationStandard
  educationClass
  educationProfessionalLearningCommunity
  educationStaff
  healthcareStandard
  healthcareCareCoordination
  unknownFutureValue
}

enum GraphTeamVisibilityType {
  private
  public
  hiddenMembership
  unknownFutureValue
}

input GraphTeamInput {
  classification: String
  createdDateTime: DateTime
  description: String
  displayName: String
  funSettings: GraphTeamFunSettingsInput
  guestSettings: GraphTeamGuestSettingsInput
  internalId: String
  isArchived: Boolean
  memberSettings: GraphTeamMemberSettingsInput
  messagingSettings: GraphTeamMessagingSettingsInput
  specialization: GraphTeamSpecialization
  visibility: GraphTeamVisibilityType
  webUrl: String
  rest: JSON
  id: String!
}

input GraphTeamFunSettingsInput {
  allowCustomMemes: Boolean
  allowGiphy: Boolean
  allowStickersAndMemes: Boolean
  giphyContentRating: GraphGiphyRatingType
}

enum GraphGiphyRatingType {
  strict
  moderate
  unknownFutureValue
}

input GraphTeamGuestSettingsInput {
  allowCreateUpdateChannels: Boolean
  allowDeleteChannels: Boolean
}

input GraphTeamMemberSettingsInput {
  allowAddRemoveApps: Boolean
  allowCreatePrivateChannels: Boolean
  allowCreateUpdateChannels: Boolean
  allowCreateUpdateRemoveConnectors: Boolean
  allowCreateUpdateRemoveTabs: Boolean
  allowDeleteChannels: Boolean
}

input GraphTeamMessagingSettingsInput {
  allowChannelMentions: Boolean
  allowOwnerDeleteMessages: Boolean
  allowTeamMentions: Boolean
  allowUserDeleteMessages: Boolean
  allowUserEditMessages: Boolean
}

enum GraphClonableTeamParts {
  apps
  tabs
  settings
  channels
  members
}

type GraphUserTeamwork implements GraphEntity {
  installedApps(queryOptions: QueryOptions): [GraphUserScopeTeamsAppInstallation]
  installedAppsById(id: ID): GraphUserScopeTeamsAppInstallation
  sendActivityNotification(
    bindingParameter: GraphUserTeamworkInput
    topic: GraphTeamworkActivityTopicInput
    activityType: String
    chainId: BigInt
    previewText: GraphItemBodyInput
    templateParameters: [GraphKeyValuePairInput]
  ): JSON
  id: String!
}

input GraphUserTeamworkInput {
  id: String!
}

type GraphTodo implements GraphEntity {
  lists(queryOptions: QueryOptions): [GraphTodoTaskList]
  listsById(id: ID): GraphTodoTaskList
  id: String!
}

type GraphApplication {
  addIns: [GraphAddIn]!
  api: GraphApiApplication
  appId: String
  applicationTemplateId: String
  appRoles: [GraphAppRole]!
  createdDateTime: DateTime
  description: String
  displayName: String
  groupMembershipClaims: String
  identifierUris: [String]!
  info: GraphInformationalUrl
  isDeviceOnlyAuthSupported: Boolean
  isFallbackPublicClient: Boolean
  keyCredentials: [GraphKeyCredential]!
  logo: String!
  notes: String
  oauth2RequirePostResponse: Boolean!
  optionalClaims: GraphOptionalClaims
  parentalControlSettings: GraphParentalControlSettings
  passwordCredentials: [GraphPasswordCredential]!
  publicClient: GraphPublicClientApplication
  publisherDomain: String
  requiredResourceAccess: [GraphRequiredResourceAccess]!
  signInAudience: String
  spa: GraphSpaApplication
  tags: [String]!
  tokenEncryptionKeyId: GUID
  web: GraphWebApplication
  createdOnBehalfOf: GraphDirectoryObject
  extensionProperties(queryOptions: QueryOptions): [GraphExtensionProperty]
  extensionPropertiesById(id: ID): GraphExtensionProperty
  homeRealmDiscoveryPolicies(queryOptions: QueryOptions): [GraphHomeRealmDiscoveryPolicy]
  homeRealmDiscoveryPoliciesById(id: ID): GraphHomeRealmDiscoveryPolicy
  owners(queryOptions: QueryOptions): [GraphDirectoryObject]
  ownersById(id: ID): GraphDirectoryObject
  tokenIssuancePolicies(queryOptions: QueryOptions): [GraphTokenIssuancePolicy]
  tokenIssuancePoliciesById(id: ID): GraphTokenIssuancePolicy
  tokenLifetimePolicies(queryOptions: QueryOptions): [GraphTokenLifetimePolicy]
  tokenLifetimePoliciesById(id: ID): GraphTokenLifetimePolicy
  rest: JSON
  delta: [GraphApplication]
  addKey(
    bindingParameter: GraphApplicationInput!
    keyCredential: GraphKeyCredentialInput!
    passwordCredential: GraphPasswordCredentialInput
    proof: String!
  ): JSON
  addPassword(bindingParameter: GraphApplicationInput!, passwordCredential: GraphPasswordCredentialInput): JSON
  removeKey(bindingParameter: GraphApplicationInput!, keyId: GUID!, proof: String!): JSON
  removePassword(bindingParameter: GraphApplicationInput!, keyId: GUID!): JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

input GraphApplicationInput {
  addIns: [GraphAddInInput]!
  api: GraphApiApplicationInput
  appId: String
  applicationTemplateId: String
  appRoles: [GraphAppRoleInput]!
  createdDateTime: DateTime
  description: String
  displayName: String
  groupMembershipClaims: String
  identifierUris: [String]!
  info: GraphInformationalUrlInput
  isDeviceOnlyAuthSupported: Boolean
  isFallbackPublicClient: Boolean
  keyCredentials: [GraphKeyCredentialInput]!
  logo: String!
  notes: String
  oauth2RequirePostResponse: Boolean!
  optionalClaims: GraphOptionalClaimsInput
  parentalControlSettings: GraphParentalControlSettingsInput
  passwordCredentials: [GraphPasswordCredentialInput]!
  publicClient: GraphPublicClientApplicationInput
  publisherDomain: String
  requiredResourceAccess: [GraphRequiredResourceAccessInput]!
  signInAudience: String
  spa: GraphSpaApplicationInput
  tags: [String]!
  tokenEncryptionKeyId: GUID
  web: GraphWebApplicationInput
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphAddInInput {
  id: GUID
  properties: [GraphKeyValueInput]!
  type: String!
}

input GraphKeyValueInput {
  key: String
  value: String
}

input GraphApiApplicationInput {
  acceptMappedClaims: Boolean
  knownClientApplications: [GUID]
  oauth2PermissionScopes: [GraphPermissionScopeInput]!
  preAuthorizedApplications: [GraphPreAuthorizedApplicationInput]
  requestedAccessTokenVersion: Int
}

input GraphPermissionScopeInput {
  adminConsentDescription: String
  adminConsentDisplayName: String
  id: GUID!
  isEnabled: Boolean!
  origin: String
  type: String
  userConsentDescription: String
  userConsentDisplayName: String
  value: String
}

input GraphPreAuthorizedApplicationInput {
  appId: String
  delegatedPermissionIds: [String]!
}

input GraphAppRoleInput {
  allowedMemberTypes: [String]!
  description: String
  displayName: String
  id: GUID!
  isEnabled: Boolean!
  origin: String
  value: String
}

input GraphInformationalUrlInput {
  logoUrl: String
  marketingUrl: String
  privacyStatementUrl: String
  supportUrl: String
  termsOfServiceUrl: String
}

input GraphKeyCredentialInput {
  customKeyIdentifier: String
  displayName: String
  endDateTime: DateTime
  key: String
  keyId: GUID
  startDateTime: DateTime
  type: String
  usage: String
}

input GraphOptionalClaimsInput {
  accessToken: [GraphOptionalClaimInput]
  idToken: [GraphOptionalClaimInput]
  saml2Token: [GraphOptionalClaimInput]
}

input GraphOptionalClaimInput {
  additionalProperties: [String]
  essential: Boolean!
  name: String!
  source: String
}

input GraphParentalControlSettingsInput {
  countriesBlockedForMinors: [String]
  legalAgeGroupRule: String
}

input GraphPasswordCredentialInput {
  customKeyIdentifier: String
  displayName: String
  endDateTime: DateTime
  hint: String
  keyId: GUID
  secretText: String
  startDateTime: DateTime
}

input GraphPublicClientApplicationInput {
  redirectUris: [String]!
}

input GraphRequiredResourceAccessInput {
  resourceAccess: [GraphResourceAccessInput]!
  resourceAppId: String!
}

input GraphResourceAccessInput {
  id: GUID!
  type: String
}

input GraphSpaApplicationInput {
  redirectUris: [String]!
}

input GraphWebApplicationInput {
  homePageUrl: String
  implicitGrantSettings: GraphImplicitGrantSettingsInput
  logoutUrl: String
  redirectUris: [String]!
}

input GraphImplicitGrantSettingsInput {
  enableAccessTokenIssuance: Boolean
  enableIdTokenIssuance: Boolean
}

type GraphServicePrincipal {
  accountEnabled: Boolean
  addIns: [GraphAddIn]!
  alternativeNames: [String]!
  appDescription: String
  appDisplayName: String
  appId: String
  applicationTemplateId: String
  appOwnerOrganizationId: GUID
  appRoleAssignmentRequired: Boolean!
  appRoles: [GraphAppRole]!
  description: String
  displayName: String
  homepage: String
  info: GraphInformationalUrl
  keyCredentials: [GraphKeyCredential]!
  loginUrl: String
  logoutUrl: String
  notes: String
  notificationEmailAddresses: [String]!
  oauth2PermissionScopes: [GraphPermissionScope]!
  passwordCredentials: [GraphPasswordCredential]!
  preferredSingleSignOnMode: String
  preferredTokenSigningKeyThumbprint: String
  replyUrls: [String]!
  samlSingleSignOnSettings: GraphSamlSingleSignOnSettings
  servicePrincipalNames: [String]!
  servicePrincipalType: String
  signInAudience: String
  tags: [String]!
  tokenEncryptionKeyId: GUID
  appRoleAssignedTo(queryOptions: QueryOptions): [GraphAppRoleAssignment]
  appRoleAssignedToById(id: ID): GraphAppRoleAssignment
  appRoleAssignments(queryOptions: QueryOptions): [GraphAppRoleAssignment]
  appRoleAssignmentsById(id: ID): GraphAppRoleAssignment
  claimsMappingPolicies(queryOptions: QueryOptions): [GraphClaimsMappingPolicy]
  claimsMappingPoliciesById(id: ID): GraphClaimsMappingPolicy
  createdObjects(queryOptions: QueryOptions): [GraphDirectoryObject]
  createdObjectsById(id: ID): GraphDirectoryObject
  delegatedPermissionClassifications(queryOptions: QueryOptions): [GraphDelegatedPermissionClassification]
  delegatedPermissionClassificationsById(id: ID): GraphDelegatedPermissionClassification
  endpoints(queryOptions: QueryOptions): [GraphEndpoint]
  endpointsById(id: ID): GraphEndpoint
  homeRealmDiscoveryPolicies(queryOptions: QueryOptions): [GraphHomeRealmDiscoveryPolicy]
  homeRealmDiscoveryPoliciesById(id: ID): GraphHomeRealmDiscoveryPolicy
  memberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  memberOfById(id: ID): GraphDirectoryObject
  oauth2PermissionGrants(queryOptions: QueryOptions): [GraphOAuth2PermissionGrant]
  oauth2PermissionGrantsById(id: ID): GraphOAuth2PermissionGrant
  ownedObjects(queryOptions: QueryOptions): [GraphDirectoryObject]
  ownedObjectsById(id: ID): GraphDirectoryObject
  owners(queryOptions: QueryOptions): [GraphDirectoryObject]
  ownersById(id: ID): GraphDirectoryObject
  tokenIssuancePolicies(queryOptions: QueryOptions): [GraphTokenIssuancePolicy]
  tokenIssuancePoliciesById(id: ID): GraphTokenIssuancePolicy
  tokenLifetimePolicies(queryOptions: QueryOptions): [GraphTokenLifetimePolicy]
  tokenLifetimePoliciesById(id: ID): GraphTokenLifetimePolicy
  transitiveMemberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  transitiveMemberOfById(id: ID): GraphDirectoryObject
  rest: JSON
  delta: [GraphServicePrincipal]
  addKey(
    bindingParameter: GraphServicePrincipalInput!
    keyCredential: GraphKeyCredentialInput!
    passwordCredential: GraphPasswordCredentialInput
    proof: String!
  ): JSON
  addPassword(bindingParameter: GraphServicePrincipalInput!, passwordCredential: GraphPasswordCredentialInput): JSON
  removeKey(bindingParameter: GraphServicePrincipalInput!, keyId: GUID!, proof: String!): JSON
  removePassword(bindingParameter: GraphServicePrincipalInput!, keyId: GUID!): JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

input GraphServicePrincipalInput {
  accountEnabled: Boolean
  addIns: [GraphAddInInput]!
  alternativeNames: [String]!
  appDescription: String
  appDisplayName: String
  appId: String
  applicationTemplateId: String
  appOwnerOrganizationId: GUID
  appRoleAssignmentRequired: Boolean!
  appRoles: [GraphAppRoleInput]!
  description: String
  displayName: String
  homepage: String
  info: GraphInformationalUrlInput
  keyCredentials: [GraphKeyCredentialInput]!
  loginUrl: String
  logoutUrl: String
  notes: String
  notificationEmailAddresses: [String]!
  oauth2PermissionScopes: [GraphPermissionScopeInput]!
  passwordCredentials: [GraphPasswordCredentialInput]!
  preferredSingleSignOnMode: String
  preferredTokenSigningKeyThumbprint: String
  replyUrls: [String]!
  samlSingleSignOnSettings: GraphSamlSingleSignOnSettingsInput
  servicePrincipalNames: [String]!
  servicePrincipalType: String
  signInAudience: String
  tags: [String]!
  tokenEncryptionKeyId: GUID
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphSamlSingleSignOnSettingsInput {
  relayState: String
}

type GraphExtensionProperty {
  appDisplayName: String
  dataType: String!
  isSyncedFromOnPremises: Boolean
  name: String!
  targetObjects: [String]!
  rest: JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type TGraphPolicyBase implements GraphPolicyBase {
  description: String
  displayName: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

interface GraphPolicyBase {
  description: String
  displayName: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type TGraphStsPolicy implements GraphStsPolicy & GraphPolicyBase {
  definition: [String]!
  isOrganizationDefault: Boolean
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  description: String
  displayName: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

interface GraphStsPolicy {
  definition: [String]!
  isOrganizationDefault: Boolean
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  description: String
  displayName: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphHomeRealmDiscoveryPolicy implements GraphStsPolicy {
  rest: JSON
  definition: [String]!
  isOrganizationDefault: Boolean
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  description: String
  displayName: String
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphTokenIssuancePolicy implements GraphStsPolicy {
  rest: JSON
  definition: [String]!
  isOrganizationDefault: Boolean
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  description: String
  displayName: String
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphTokenLifetimePolicy implements GraphStsPolicy {
  rest: JSON
  definition: [String]!
  isOrganizationDefault: Boolean
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  description: String
  displayName: String
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphApplicationTemplate implements GraphEntity {
  categories: [String]
  description: String
  displayName: String
  homePageUrl: String
  logoUrl: String
  publisher: String
  supportedProvisioningTypes: [String]
  supportedSingleSignOnModes: [String]
  instantiate(bindingParameter: GraphApplicationTemplateInput, displayName: String): JSON
  id: String!
}

input GraphApplicationTemplateInput {
  categories: [String]
  description: String
  displayName: String
  homePageUrl: String
  logoUrl: String
  publisher: String
  supportedProvisioningTypes: [String]
  supportedSingleSignOnModes: [String]
  id: String!
}

type GraphClaimsMappingPolicy implements GraphStsPolicy {
  rest: JSON
  definition: [String]!
  isOrganizationDefault: Boolean
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  description: String
  displayName: String
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphDelegatedPermissionClassification implements GraphEntity {
  classification: GraphPermissionClassificationType
  permissionId: String
  permissionName: String
  id: String!
}

enum GraphPermissionClassificationType {
  low
  medium
  high
  unknownFutureValue
}

type GraphEndpoint {
  capability: String!
  providerId: String
  providerName: String
  providerResourceId: String
  uri: String!
  rest: JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type TGraphAuthenticationMethodConfiguration implements GraphAuthenticationMethodConfiguration & GraphEntity {
  state: GraphAuthenticationMethodState
  id: String!
}

interface GraphAuthenticationMethodConfiguration {
  state: GraphAuthenticationMethodState
  id: String!
}

enum GraphAuthenticationMethodState {
  enabled
  disabled
}

type GraphAuthenticationMethodsPolicy implements GraphEntity {
  description: String
  displayName: String
  lastModifiedDateTime: DateTime
  policyVersion: String
  reconfirmationInDays: Int
  authenticationMethodConfigurations(queryOptions: QueryOptions): [GraphAuthenticationMethodConfiguration]
  authenticationMethodConfigurationsById(id: ID): GraphAuthenticationMethodConfiguration
  id: String!
}

type GraphAuthenticationMethodTarget implements GraphEntity {
  isRegistrationRequired: Boolean!
  targetType: GraphAuthenticationMethodTargetType!
  id: String!
}

enum GraphAuthenticationMethodTargetType {
  user
  group
  unknownFutureValue
}

type GraphEmailAuthenticationMethodConfiguration implements GraphAuthenticationMethodConfiguration {
  allowExternalIdToUseEmailOtp: GraphExternalEmailOtpState
  includeTargets(queryOptions: QueryOptions): [GraphAuthenticationMethodTarget]
  includeTargetsById(id: ID): GraphAuthenticationMethodTarget
  state: GraphAuthenticationMethodState
  id: String!
}

enum GraphExternalEmailOtpState {
  default
  enabled
  disabled
  unknownFutureValue
}

type GraphFido2AuthenticationMethodConfiguration implements GraphAuthenticationMethodConfiguration {
  isAttestationEnforced: Boolean
  isSelfServiceRegistrationAllowed: Boolean
  keyRestrictions: GraphFido2KeyRestrictions
  includeTargets(queryOptions: QueryOptions): [GraphAuthenticationMethodTarget]
  includeTargetsById(id: ID): GraphAuthenticationMethodTarget
  state: GraphAuthenticationMethodState
  id: String!
}

type GraphMicrosoftAuthenticatorAuthenticationMethodConfiguration implements GraphAuthenticationMethodConfiguration {
  includeTargets(queryOptions: QueryOptions): [GraphMicrosoftAuthenticatorAuthenticationMethodTarget]
  includeTargetsById(id: ID): GraphMicrosoftAuthenticatorAuthenticationMethodTarget
  state: GraphAuthenticationMethodState
  id: String!
}

type GraphMicrosoftAuthenticatorAuthenticationMethodTarget {
  authenticationMode: GraphMicrosoftAuthenticatorAuthenticationMode!
  featureSettings: GraphAuthenticatorAppFeatureSettings
  isRegistrationRequired: Boolean!
  targetType: GraphAuthenticationMethodTargetType!
  id: String!
}

enum GraphMicrosoftAuthenticatorAuthenticationMode {
  deviceBasedPush
  push
  any
}

enum GraphAuthenticatorAppFeatureSettings {
  requireNumberMatching
}

type GraphPolicyRoot implements GraphEntity {
  authenticationMethodsPolicy: GraphAuthenticationMethodsPolicy
  authenticationFlowsPolicy: GraphAuthenticationFlowsPolicy
  activityBasedTimeoutPolicies(queryOptions: QueryOptions): [GraphActivityBasedTimeoutPolicy]
  activityBasedTimeoutPoliciesById(id: ID): GraphActivityBasedTimeoutPolicy
  authorizationPolicy: GraphAuthorizationPolicy
  claimsMappingPolicies(queryOptions: QueryOptions): [GraphClaimsMappingPolicy]
  claimsMappingPoliciesById(id: ID): GraphClaimsMappingPolicy
  homeRealmDiscoveryPolicies(queryOptions: QueryOptions): [GraphHomeRealmDiscoveryPolicy]
  homeRealmDiscoveryPoliciesById(id: ID): GraphHomeRealmDiscoveryPolicy
  permissionGrantPolicies(queryOptions: QueryOptions): [GraphPermissionGrantPolicy]
  permissionGrantPoliciesById(id: ID): GraphPermissionGrantPolicy
  tokenIssuancePolicies(queryOptions: QueryOptions): [GraphTokenIssuancePolicy]
  tokenIssuancePoliciesById(id: ID): GraphTokenIssuancePolicy
  tokenLifetimePolicies(queryOptions: QueryOptions): [GraphTokenLifetimePolicy]
  tokenLifetimePoliciesById(id: ID): GraphTokenLifetimePolicy
  featureRolloutPolicies(queryOptions: QueryOptions): [GraphFeatureRolloutPolicy]
  featureRolloutPoliciesById(id: ID): GraphFeatureRolloutPolicy
  adminConsentRequestPolicy: GraphAdminConsentRequestPolicy
  conditionalAccessPolicies(queryOptions: QueryOptions): [GraphConditionalAccessPolicy]
  conditionalAccessPoliciesById(id: ID): GraphConditionalAccessPolicy
  identitySecurityDefaultsEnforcementPolicy: GraphIdentitySecurityDefaultsEnforcementPolicy
  id: String!
}

type GraphAuthenticationFlowsPolicy implements GraphEntity {
  description: String
  displayName: String
  selfServiceSignUp: GraphSelfServiceSignUpAuthenticationFlowConfiguration
  id: String!
}

type GraphActivityBasedTimeoutPolicy implements GraphStsPolicy {
  rest: JSON
  definition: [String]!
  isOrganizationDefault: Boolean
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  description: String
  displayName: String
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphAuthorizationPolicy implements GraphPolicyBase {
  allowedToSignUpEmailBasedSubscriptions: Boolean!
  allowedToUseSSPR: Boolean!
  allowEmailVerifiedUsersToJoinOrganization: Boolean!
  allowInvitesFrom: GraphAllowInvitesFrom
  blockMsolPowerShell: Boolean
  defaultUserRolePermissions: GraphDefaultUserRolePermissions!
  guestUserRoleId: GUID
  description: String
  displayName: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

enum GraphAllowInvitesFrom {
  none
  adminsAndGuestInviters
  adminsGuestInvitersAndAllMembers
  everyone
  unknownFutureValue
}

type GraphPermissionGrantPolicy implements GraphPolicyBase {
  excludes(queryOptions: QueryOptions): [GraphPermissionGrantConditionSet]
  excludesById(id: ID): GraphPermissionGrantConditionSet
  includes(queryOptions: QueryOptions): [GraphPermissionGrantConditionSet]
  includesById(id: ID): GraphPermissionGrantConditionSet
  description: String
  displayName: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphFeatureRolloutPolicy implements GraphEntity {
  description: String
  displayName: String!
  feature: GraphStagedFeatureName!
  isAppliedToOrganization: Boolean!
  isEnabled: Boolean!
  appliesTo(queryOptions: QueryOptions): [GraphDirectoryObject]
  appliesToById(id: ID): GraphDirectoryObject
  id: String!
}

enum GraphStagedFeatureName {
  passthroughAuthentication
  seamlessSso
  passwordHashSync
  emailAsAlternateId
  unknownFutureValue
}

type GraphAdminConsentRequestPolicy implements GraphEntity {
  isEnabled: Boolean!
  notifyReviewers: Boolean!
  remindersEnabled: Boolean!
  requestDurationInDays: Int!
  reviewers: [GraphAccessReviewReviewerScope]
  version: Int!
  id: String!
}

type GraphConditionalAccessPolicy implements GraphEntity {
  conditions: GraphConditionalAccessConditionSet!
  createdDateTime: DateTime
  description: String
  displayName: String!
  grantControls: GraphConditionalAccessGrantControls
  modifiedDateTime: DateTime
  sessionControls: GraphConditionalAccessSessionControls
  state: GraphConditionalAccessPolicyState!
  id: String!
}

enum GraphConditionalAccessPolicyState {
  enabled
  disabled
  enabledForReportingButNotEnforced
}

type GraphIdentitySecurityDefaultsEnforcementPolicy implements GraphPolicyBase {
  isEnabled: Boolean!
  description: String
  displayName: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphIdentityApiConnector implements GraphEntity {
  authenticationConfiguration: GraphApiAuthenticationConfigurationBase
  displayName: String
  targetUrl: String
  uploadClientCertificate(bindingParameter: GraphIdentityApiConnectorInput, pkcs12Value: String, password: String): JSON
  id: String!
}

interface GraphApiAuthenticationConfigurationBase {
  rest: JSON
}

input GraphIdentityApiConnectorInput {
  authenticationConfiguration: GraphApiAuthenticationConfigurationBaseInput
  displayName: String
  targetUrl: String
  id: String!
}

input GraphApiAuthenticationConfigurationBaseInput {
  rest: JSON
}

type GraphIdentityUserFlow implements GraphEntity {
  userFlowType: GraphUserFlowType!
  userFlowTypeVersion: Float!
  id: String!
}

enum GraphUserFlowType {
  signUp
  signIn
  signUpOrSignIn
  passwordReset
  profileUpdate
  resourceOwner
  unknownFutureValue
}

type GraphB2xIdentityUserFlow {
  apiConnectorConfiguration: GraphUserFlowApiConnectorConfiguration
  identityProviders(queryOptions: QueryOptions): [GraphIdentityProvider]
  identityProvidersById(id: ID): GraphIdentityProvider
  languages(queryOptions: QueryOptions): [GraphUserFlowLanguageConfiguration]
  languagesById(id: ID): GraphUserFlowLanguageConfiguration
  userAttributeAssignments(queryOptions: QueryOptions): [GraphIdentityUserFlowAttributeAssignment]
  userAttributeAssignmentsById(id: ID): GraphIdentityUserFlowAttributeAssignment
  userFlowIdentityProviders(queryOptions: QueryOptions): [GraphIdentityProviderBase]
  userFlowIdentityProvidersById(id: ID): GraphIdentityProviderBase
  userFlowType: GraphUserFlowType!
  userFlowTypeVersion: Float!
  id: String!
}

interface GraphIdentityProviderBase {
  displayName: String
  availableProviderTypes: [String]
  id: String!
}

type GraphIdentityProvider implements GraphEntity {
  clientId: String
  clientSecret: String
  name: String
  type: String
  availableProviderTypes: [String]
  id: String!
}

type GraphUserFlowLanguageConfiguration implements GraphEntity {
  displayName: String
  isEnabled: Boolean!
  defaultPages(queryOptions: QueryOptions): [GraphUserFlowLanguagePage]
  defaultPagesById(id: ID): GraphUserFlowLanguagePage
  overridesPages(queryOptions: QueryOptions): [GraphUserFlowLanguagePage]
  overridesPagesById(id: ID): GraphUserFlowLanguagePage
  id: String!
}

type GraphIdentityUserFlowAttributeAssignment implements GraphEntity {
  displayName: String
  isOptional: Boolean!
  requiresVerification: Boolean!
  userAttributeValues: [GraphUserAttributeValuesItem]
  userInputType: GraphIdentityUserFlowAttributeInputType!
  userAttribute: GraphIdentityUserFlowAttribute
  getOrder: GraphAssignmentOrder
  setOrder(
    bindingParameter: [GraphIdentityUserFlowAttributeAssignmentInput]
    newAssignmentOrder: GraphAssignmentOrderInput
  ): JSON
  id: String!
}

enum GraphIdentityUserFlowAttributeInputType {
  textBox
  dateTimeDropdown
  radioSingleSelect
  dropdownSingleSelect
  emailBox
  checkboxMultiSelect
}

input GraphIdentityUserFlowAttributeAssignmentInput {
  displayName: String
  isOptional: Boolean!
  requiresVerification: Boolean!
  userAttributeValues: [GraphUserAttributeValuesItemInput]
  userInputType: GraphIdentityUserFlowAttributeInputType!
  id: String!
}

input GraphUserAttributeValuesItemInput {
  isDefault: Boolean!
  name: String
  value: String
}

input GraphAssignmentOrderInput {
  order: [String]
}

type TGraphIdentityProviderBase implements GraphIdentityProviderBase & GraphEntity {
  displayName: String
  availableProviderTypes: [String]
  id: String!
}

type GraphBuiltInIdentityProvider implements GraphIdentityProviderBase {
  identityProviderType: String
  displayName: String
  availableProviderTypes: [String]
  id: String!
}

type GraphIdentityUserFlowAttribute implements GraphEntity {
  dataType: GraphIdentityUserFlowAttributeDataType!
  description: String
  displayName: String
  userFlowAttributeType: GraphIdentityUserFlowAttributeType!
  id: String!
}

enum GraphIdentityUserFlowAttributeDataType {
  string
  boolean
  int64
  stringCollection
  dateTime
  unknownFutureValue
}

enum GraphIdentityUserFlowAttributeType {
  builtIn
  custom
  required
  unknownFutureValue
}

type GraphIdentityContainer implements GraphEntity {
  conditionalAccess: GraphConditionalAccessRoot
  apiConnectors(queryOptions: QueryOptions): [GraphIdentityApiConnector]
  apiConnectorsById(id: ID): GraphIdentityApiConnector
  b2xUserFlows(queryOptions: QueryOptions): [GraphB2xIdentityUserFlow]
  b2xUserFlowsById(id: ID): GraphB2xIdentityUserFlow
  identityProviders(queryOptions: QueryOptions): [GraphIdentityProviderBase]
  identityProvidersById(id: ID): GraphIdentityProviderBase
  userFlowAttributes(queryOptions: QueryOptions): [GraphIdentityUserFlowAttribute]
  userFlowAttributesById(id: ID): GraphIdentityUserFlowAttribute
  id: String!
}

type GraphConditionalAccessRoot implements GraphEntity {
  namedLocations(queryOptions: QueryOptions): [GraphNamedLocation]
  namedLocationsById(id: ID): GraphNamedLocation
  policies(queryOptions: QueryOptions): [GraphConditionalAccessPolicy]
  policiesById(id: ID): GraphConditionalAccessPolicy
  id: String!
}

type GraphSocialIdentityProvider implements GraphIdentityProviderBase {
  clientId: String
  clientSecret: String
  identityProviderType: String
  displayName: String
  availableProviderTypes: [String]
  id: String!
}

type GraphUserFlowLanguagePage implements GraphEntity {
  rest: JSON
  id: String!
}

type GraphAdministrativeUnit {
  description: String
  displayName: String
  visibility: String
  members(queryOptions: QueryOptions): [GraphDirectoryObject]
  membersById(id: ID): GraphDirectoryObject
  scopedRoleMembers(queryOptions: QueryOptions): [GraphScopedRoleMembership]
  scopedRoleMembersById(id: ID): GraphScopedRoleMembership
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  rest: JSON
  delta: [GraphAdministrativeUnit]
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphCertificateBasedAuthConfiguration implements GraphEntity {
  certificateAuthorities: [GraphCertificateAuthority]!
  id: String!
}

type GraphContract {
  contractType: String
  customerId: GUID
  defaultDomainName: String
  displayName: String
  rest: JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphDevice {
  accountEnabled: Boolean
  alternativeSecurityIds: [GraphAlternativeSecurityId]!
  approximateLastSignInDateTime: DateTime
  complianceExpirationDateTime: DateTime
  deviceId: String
  deviceMetadata: String
  deviceVersion: Int
  displayName: String
  isCompliant: Boolean
  isManaged: Boolean
  mdmAppId: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesSyncEnabled: Boolean
  operatingSystem: String
  operatingSystemVersion: String
  physicalIds: [String]!
  profileType: String
  systemLabels: [String]!
  trustType: String
  memberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  memberOfById(id: ID): GraphDirectoryObject
  registeredOwners(queryOptions: QueryOptions): [GraphDirectoryObject]
  registeredOwnersById(id: ID): GraphDirectoryObject
  registeredUsers(queryOptions: QueryOptions): [GraphDirectoryObject]
  registeredUsersById(id: ID): GraphDirectoryObject
  transitiveMemberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  transitiveMemberOfById(id: ID): GraphDirectoryObject
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  rest: JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphDirectory implements GraphEntity {
  administrativeUnits(queryOptions: QueryOptions): [GraphAdministrativeUnit]
  administrativeUnitsById(id: ID): GraphAdministrativeUnit
  deletedItems(queryOptions: QueryOptions): [GraphDirectoryObject]
  deletedItemsById(id: ID): GraphDirectoryObject
  id: String!
}

type GraphDirectoryRole {
  description: String
  displayName: String
  roleTemplateId: String
  members(queryOptions: QueryOptions): [GraphDirectoryObject]
  membersById(id: ID): GraphDirectoryObject
  scopedMembers(queryOptions: QueryOptions): [GraphScopedRoleMembership]
  scopedMembersById(id: ID): GraphScopedRoleMembership
  rest: JSON
  delta: [GraphDirectoryRole]
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphDirectoryRoleTemplate {
  description: String
  displayName: String
  rest: JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphDomain implements GraphEntity {
  authenticationType: String!
  availabilityStatus: String
  isAdminManaged: Boolean!
  isDefault: Boolean!
  isInitial: Boolean!
  isRoot: Boolean!
  isVerified: Boolean!
  manufacturer: String
  model: String
  passwordNotificationWindowInDays: Int
  passwordValidityPeriodInDays: Int
  state: GraphDomainState
  supportedServices: [String]!
  domainNameReferences(queryOptions: QueryOptions): [GraphDirectoryObject]
  domainNameReferencesById(id: ID): GraphDirectoryObject
  serviceConfigurationRecords(queryOptions: QueryOptions): [GraphDomainDnsRecord]
  serviceConfigurationRecordsById(id: ID): GraphDomainDnsRecord
  verificationDnsRecords(queryOptions: QueryOptions): [GraphDomainDnsRecord]
  verificationDnsRecordsById(id: ID): GraphDomainDnsRecord
  forceDelete(bindingParameter: GraphDomainInput!, disableUserAccounts: Boolean): JSON
  verify(bindingParameter: GraphDomainInput!): JSON
  id: String!
}

input GraphDomainInput {
  authenticationType: String!
  availabilityStatus: String
  isAdminManaged: Boolean!
  isDefault: Boolean!
  isInitial: Boolean!
  isRoot: Boolean!
  isVerified: Boolean!
  manufacturer: String
  model: String
  passwordNotificationWindowInDays: Int
  passwordValidityPeriodInDays: Int
  state: GraphDomainStateInput
  supportedServices: [String]!
  id: String!
}

input GraphDomainStateInput {
  lastActionDateTime: DateTime
  operation: String
  status: String
}

type GraphDomainDnsRecord implements GraphEntity {
  isOptional: Boolean!
  label: String!
  recordType: String
  supportedService: String!
  ttl: Int!
  id: String!
}

type GraphGroup {
  assignedLabels: [GraphAssignedLabel]
  assignedLicenses: [GraphAssignedLicense]
  classification: String
  createdDateTime: DateTime
  description: String
  displayName: String
  expirationDateTime: DateTime
  groupTypes: [String]!
  hasMembersWithLicenseErrors: Boolean
  licenseProcessingState: GraphLicenseProcessingState
  mail: String
  mailEnabled: Boolean
  mailNickname: String
  membershipRule: String
  membershipRuleProcessingState: String
  onPremisesDomainName: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesNetBiosName: String
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningError]
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  onPremisesSyncEnabled: Boolean
  preferredDataLocation: String
  preferredLanguage: String
  proxyAddresses: [String]!
  renewedDateTime: DateTime
  securityEnabled: Boolean
  securityIdentifier: String
  theme: String
  visibility: String
  allowExternalSenders: Boolean
  autoSubscribeNewMembers: Boolean
  hideFromAddressLists: Boolean
  hideFromOutlookClients: Boolean
  isSubscribedByMail: Boolean
  unseenCount: Int
  isArchived: Boolean
  appRoleAssignments(queryOptions: QueryOptions): [GraphAppRoleAssignment]
  appRoleAssignmentsById(id: ID): GraphAppRoleAssignment
  createdOnBehalfOf: GraphDirectoryObject
  memberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  memberOfById(id: ID): GraphDirectoryObject
  members(queryOptions: QueryOptions): [GraphDirectoryObject]
  membersById(id: ID): GraphDirectoryObject
  membersWithLicenseErrors(queryOptions: QueryOptions): [GraphDirectoryObject]
  membersWithLicenseErrorsById(id: ID): GraphDirectoryObject
  owners(queryOptions: QueryOptions): [GraphDirectoryObject]
  ownersById(id: ID): GraphDirectoryObject
  permissionGrants(queryOptions: QueryOptions): [GraphResourceSpecificPermissionGrant]
  permissionGrantsById(id: ID): GraphResourceSpecificPermissionGrant
  settings(queryOptions: QueryOptions): [GraphGroupSetting]
  settingsById(id: ID): GraphGroupSetting
  transitiveMemberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  transitiveMemberOfById(id: ID): GraphDirectoryObject
  transitiveMembers(queryOptions: QueryOptions): [GraphDirectoryObject]
  transitiveMembersById(id: ID): GraphDirectoryObject
  acceptedSenders(queryOptions: QueryOptions): [GraphDirectoryObject]
  acceptedSendersById(id: ID): GraphDirectoryObject
  calendar: GraphCalendar
  calendarView(queryOptions: QueryOptions): [GraphEvent]
  calendarViewById(id: ID): GraphEvent
  conversations(queryOptions: QueryOptions): [GraphConversation]
  conversationsById(id: ID): GraphConversation
  events(queryOptions: QueryOptions): [GraphEvent]
  eventsById(id: ID): GraphEvent
  photo: GraphProfilePhoto
  photos(queryOptions: QueryOptions): [GraphProfilePhoto]
  photosById(id: ID): GraphProfilePhoto
  rejectedSenders(queryOptions: QueryOptions): [GraphDirectoryObject]
  rejectedSendersById(id: ID): GraphDirectoryObject
  threads(queryOptions: QueryOptions): [GraphConversationThread]
  threadsById(id: ID): GraphConversationThread
  drive: GraphDrive
  drives(queryOptions: QueryOptions): [GraphDrive]
  drivesById(id: ID): GraphDrive
  sites(queryOptions: QueryOptions): [GraphSite]
  sitesById(id: ID): GraphSite
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  groupLifecyclePolicies(queryOptions: QueryOptions): [GraphGroupLifecyclePolicy]
  groupLifecyclePoliciesById(id: ID): GraphGroupLifecyclePolicy
  planner: GraphPlannerGroup
  onenote: GraphOnenote
  team: GraphTeam
  rest: JSON
  delta: [GraphGroup]
  assignLicense(
    bindingParameter: GraphGroupInput!
    addLicenses: [GraphAssignedLicenseInput]!
    removeLicenses: [GUID]!
  ): JSON
  checkGrantedPermissionsForApp(bindingParameter: GraphGroupInput!): JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  addFavorite(bindingParameter: GraphGroupInput): JSON
  removeFavorite(bindingParameter: GraphGroupInput): JSON
  resetUnseenCount(bindingParameter: GraphGroupInput): JSON
  subscribeByMail(bindingParameter: GraphGroupInput): JSON
  unsubscribeByMail(bindingParameter: GraphGroupInput): JSON
  renew(bindingParameter: GraphGroupInput): JSON
  deletedDateTime: DateTime
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

input GraphGroupInput {
  assignedLabels: [GraphAssignedLabelInput]
  assignedLicenses: [GraphAssignedLicenseInput]
  classification: String
  createdDateTime: DateTime
  description: String
  displayName: String
  expirationDateTime: DateTime
  groupTypes: [String]!
  hasMembersWithLicenseErrors: Boolean
  licenseProcessingState: GraphLicenseProcessingStateInput
  mail: String
  mailEnabled: Boolean
  mailNickname: String
  membershipRule: String
  membershipRuleProcessingState: String
  onPremisesDomainName: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesNetBiosName: String
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningErrorInput]
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  onPremisesSyncEnabled: Boolean
  preferredDataLocation: String
  preferredLanguage: String
  proxyAddresses: [String]!
  renewedDateTime: DateTime
  securityEnabled: Boolean
  securityIdentifier: String
  theme: String
  visibility: String
  allowExternalSenders: Boolean
  autoSubscribeNewMembers: Boolean
  hideFromAddressLists: Boolean
  hideFromOutlookClients: Boolean
  isSubscribedByMail: Boolean
  unseenCount: Int
  isArchived: Boolean
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphAssignedLabelInput {
  displayName: String
  labelId: String
}

input GraphLicenseProcessingStateInput {
  state: String
}

type GraphResourceSpecificPermissionGrant {
  clientAppId: String
  clientId: String
  permission: String
  permissionType: String
  resourceAppId: String
  deletedDateTime: DateTime
  rest: JSON
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphGroupSetting implements GraphEntity {
  displayName: String
  templateId: String
  values: [GraphSettingValue]!
  rest: JSON
  id: String!
}

type GraphConversation implements GraphEntity {
  hasAttachments: Boolean!
  lastDeliveredDateTime: DateTime!
  preview: String!
  topic: String!
  uniqueSenders: [String]!
  threads(queryOptions: QueryOptions): [GraphConversationThread]
  threadsById(id: ID): GraphConversationThread
  id: String!
}

type GraphConversationThread implements GraphEntity {
  ccRecipients: [GraphRecipient]!
  hasAttachments: Boolean!
  isLocked: Boolean!
  lastDeliveredDateTime: DateTime!
  preview: String!
  topic: String!
  toRecipients: [GraphRecipient]!
  uniqueSenders: [String]!
  posts(queryOptions: QueryOptions): [GraphPost]
  postsById(id: ID): GraphPost
  reply(bindingParameter: GraphConversationThreadInput, Post: GraphPostInput!): JSON
  id: String!
}

input GraphConversationThreadInput {
  ccRecipients: [GraphRecipientInput]!
  hasAttachments: Boolean!
  isLocked: Boolean!
  lastDeliveredDateTime: DateTime!
  preview: String!
  topic: String!
  toRecipients: [GraphRecipientInput]!
  uniqueSenders: [String]!
  id: String!
}

input GraphPostInput {
  body: GraphItemBodyInput
  conversationId: String
  conversationThreadId: String
  from: GraphRecipientInput!
  hasAttachments: Boolean!
  newParticipants: [GraphRecipientInput]!
  receivedDateTime: DateTime!
  sender: GraphRecipientInput
  rest: JSON
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphGroupLifecyclePolicy implements GraphEntity {
  alternateNotificationEmails: String
  groupLifetimeInDays: Int
  managedGroupTypes: String
  addGroup(bindingParameter: GraphGroupLifecyclePolicyInput, groupId: String!): JSON
  removeGroup(bindingParameter: GraphGroupLifecyclePolicyInput, groupId: String!): JSON
  id: String!
}

input GraphGroupLifecyclePolicyInput {
  alternateNotificationEmails: String
  groupLifetimeInDays: Int
  managedGroupTypes: String
  id: String!
}

type GraphPlannerGroup implements GraphEntity {
  plans(queryOptions: QueryOptions): [GraphPlannerPlan]
  plansById(id: ID): GraphPlannerPlan
  id: String!
}

type GraphGroupSettingTemplate {
  description: String
  displayName: String
  values: [GraphSettingTemplateValue]!
  rest: JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphOrganization {
  assignedPlans: [GraphAssignedPlan]!
  businessPhones: [String]!
  city: String
  country: String
  countryLetterCode: String
  createdDateTime: DateTime
  displayName: String
  marketingNotificationEmails: [String]!
  onPremisesLastSyncDateTime: DateTime
  onPremisesSyncEnabled: Boolean
  postalCode: String
  preferredLanguage: String
  privacyProfile: GraphPrivacyProfile
  provisionedPlans: [GraphProvisionedPlan]!
  securityComplianceNotificationMails: [String]!
  securityComplianceNotificationPhones: [String]!
  state: String
  street: String
  technicalNotificationMails: [String]!
  tenantType: String
  verifiedDomains: [GraphVerifiedDomain]!
  mobileDeviceManagementAuthority: GraphMdmAuthority!
  branding: GraphOrganizationalBranding
  certificateBasedAuthConfiguration(queryOptions: QueryOptions): [GraphCertificateBasedAuthConfiguration]
  certificateBasedAuthConfigurationById(id: ID): GraphCertificateBasedAuthConfiguration
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  rest: JSON
  setMobileDeviceManagementAuthority(bindingParameter: GraphOrganizationInput): JSON
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

enum GraphMdmAuthority {
  unknown
  intune
  sccm
  office365
}

input GraphOrganizationInput {
  assignedPlans: [GraphAssignedPlanInput]!
  businessPhones: [String]!
  city: String
  country: String
  countryLetterCode: String
  createdDateTime: DateTime
  displayName: String
  marketingNotificationEmails: [String]!
  onPremisesLastSyncDateTime: DateTime
  onPremisesSyncEnabled: Boolean
  postalCode: String
  preferredLanguage: String
  privacyProfile: GraphPrivacyProfileInput
  provisionedPlans: [GraphProvisionedPlanInput]!
  securityComplianceNotificationMails: [String]!
  securityComplianceNotificationPhones: [String]!
  state: String
  street: String
  technicalNotificationMails: [String]!
  tenantType: String
  verifiedDomains: [GraphVerifiedDomainInput]!
  mobileDeviceManagementAuthority: GraphMdmAuthority!
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphPrivacyProfileInput {
  contactEmail: String
  statementUrl: String
}

input GraphVerifiedDomainInput {
  capabilities: String
  isDefault: Boolean
  isInitial: Boolean
  name: String
  type: String
}

type TGraphOrganizationalBrandingProperties implements GraphOrganizationalBrandingProperties & GraphEntity {
  backgroundColor: String
  backgroundImage: String
  bannerLogo: String
  signInPageText: String
  squareLogo: String
  usernameHintText: String
  id: String!
}

interface GraphOrganizationalBrandingProperties {
  backgroundColor: String
  backgroundImage: String
  bannerLogo: String
  signInPageText: String
  squareLogo: String
  usernameHintText: String
  id: String!
}

type GraphOrganizationalBranding implements GraphOrganizationalBrandingProperties {
  localizations(queryOptions: QueryOptions): [GraphOrganizationalBrandingLocalization]
  localizationsById(id: ID): GraphOrganizationalBrandingLocalization
  backgroundColor: String
  backgroundImage: String
  bannerLogo: String
  signInPageText: String
  squareLogo: String
  usernameHintText: String
  id: String!
}

type GraphOrganizationalBrandingLocalization implements GraphOrganizationalBrandingProperties {
  rest: JSON
  backgroundColor: String
  backgroundImage: String
  bannerLogo: String
  signInPageText: String
  squareLogo: String
  usernameHintText: String
  id: String!
}

type GraphOrgContact {
  addresses: [GraphPhysicalOfficeAddress]
  companyName: String
  department: String
  displayName: String
  givenName: String
  jobTitle: String
  mail: String
  mailNickname: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningError]
  onPremisesSyncEnabled: Boolean
  phones: [GraphPhone]
  proxyAddresses: [String]!
  surname: String
  directReports(queryOptions: QueryOptions): [GraphDirectoryObject]
  directReportsById(id: ID): GraphDirectoryObject
  manager: GraphDirectoryObject
  memberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  memberOfById(id: ID): GraphDirectoryObject
  transitiveMemberOf(queryOptions: QueryOptions): [GraphDirectoryObject]
  transitiveMemberOfById(id: ID): GraphDirectoryObject
  rest: JSON
  delta: [GraphOrgContact]
  deletedDateTime: DateTime
  validateProperties(
    bindingParameter: [GraphDirectoryObjectInput]!
    entityType: String
    displayName: String
    mailNickname: String
    onBehalfOfUserId: GUID
  ): JSON
  checkMemberGroups(bindingParameter: GraphDirectoryObjectInput!, groupIds: [String]!): JSON
  checkMemberObjects(bindingParameter: GraphDirectoryObjectInput!, ids: [String]!): JSON
  getMemberGroups(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  getMemberObjects(bindingParameter: GraphDirectoryObjectInput!, securityEnabledOnly: Boolean): JSON
  restore(bindingParameter: GraphDirectoryObjectInput!): JSON
  getAvailableExtensionProperties(bindingParameter: [GraphDirectoryObjectInput]!, isSyncedFromOnPremises: Boolean): JSON
  getByIds(bindingParameter: [GraphDirectoryObjectInput]!, ids: [String]!, types: [String]): JSON
  id: String!
}

type GraphPermissionGrantConditionSet implements GraphEntity {
  clientApplicationIds: [String]
  clientApplicationPublisherIds: [String]
  clientApplicationsFromVerifiedPublisherOnly: Boolean
  clientApplicationTenantIds: [String]
  permissionClassification: String
  permissions: [String]
  permissionType: GraphPermissionType
  resourceApplication: String
  id: String!
}

enum GraphPermissionType {
  application
  delegated
  delegatedUserConsentable
}

type GraphSubscribedSku implements GraphEntity {
  appliesTo: String
  capabilityStatus: String
  consumedUnits: Int
  prepaidUnits: GraphLicenseUnitsDetail
  servicePlans: [GraphServicePlanInfo]!
  skuId: GUID
  skuPartNumber: String
  id: String!
}

type GraphEducationClass implements GraphEntity {
  classCode: String
  course: GraphEducationCourse
  createdBy: GraphIdentitySet
  description: String
  displayName: String!
  externalId: String
  externalName: String
  externalSource: GraphEducationExternalSource
  externalSourceDetail: String
  grade: String
  mailNickname: String!
  term: GraphEducationTerm
  group: GraphGroup
  members(queryOptions: QueryOptions): [GraphEducationUser]
  membersById(id: ID): GraphEducationUser
  schools(queryOptions: QueryOptions): [GraphEducationSchool]
  schoolsById(id: ID): GraphEducationSchool
  teachers(queryOptions: QueryOptions): [GraphEducationUser]
  teachersById(id: ID): GraphEducationUser
  delta: [GraphEducationClass]
  id: String!
}

enum GraphEducationExternalSource {
  sis
  manual
  unknownFutureValue
}

type GraphEducationUser implements GraphEntity {
  accountEnabled: Boolean
  assignedLicenses: [GraphAssignedLicense]!
  assignedPlans: [GraphAssignedPlan]!
  businessPhones: [String]!
  createdBy: GraphIdentitySet
  department: String
  displayName: String
  externalSource: GraphEducationExternalSource
  externalSourceDetail: String
  givenName: String
  mail: String
  mailingAddress: GraphPhysicalAddress
  mailNickname: String
  middleName: String
  mobilePhone: String
  officeLocation: String
  onPremisesInfo: GraphEducationOnPremisesInfo
  passwordPolicies: String
  passwordProfile: GraphPasswordProfile
  preferredLanguage: String
  primaryRole: GraphEducationUserRole!
  provisionedPlans: [GraphProvisionedPlan]!
  refreshTokensValidFromDateTime: DateTime
  residenceAddress: GraphPhysicalAddress
  showInAddressList: Boolean
  student: GraphEducationStudent
  surname: String
  teacher: GraphEducationTeacher
  usageLocation: String
  userPrincipalName: String
  userType: String
  classes(queryOptions: QueryOptions): [GraphEducationClass]
  classesById(id: ID): GraphEducationClass
  schools(queryOptions: QueryOptions): [GraphEducationSchool]
  schoolsById(id: ID): GraphEducationSchool
  taughtClasses(queryOptions: QueryOptions): [GraphEducationClass]
  taughtClassesById(id: ID): GraphEducationClass
  user: GraphUser
  delta: [GraphEducationUser]
  id: String!
}

enum GraphEducationUserRole {
  student
  teacher
  none
  unknownFutureValue
}

type TGraphEducationOrganization implements GraphEducationOrganization & GraphEntity {
  description: String
  displayName: String!
  externalSource: GraphEducationExternalSource
  externalSourceDetail: String
  id: String!
}

interface GraphEducationOrganization {
  description: String
  displayName: String!
  externalSource: GraphEducationExternalSource
  externalSourceDetail: String
  id: String!
}

type GraphEducationSchool implements GraphEducationOrganization {
  address: GraphPhysicalAddress
  createdBy: GraphIdentitySet
  externalId: String
  externalPrincipalId: String
  fax: String
  highestGrade: String
  lowestGrade: String
  phone: String
  principalEmail: String
  principalName: String
  schoolNumber: String
  administrativeUnit: GraphAdministrativeUnit
  classes(queryOptions: QueryOptions): [GraphEducationClass]
  classesById(id: ID): GraphEducationClass
  users(queryOptions: QueryOptions): [GraphEducationUser]
  usersById(id: ID): GraphEducationUser
  delta: [GraphEducationSchool]
  description: String
  displayName: String!
  externalSource: GraphEducationExternalSource
  externalSourceDetail: String
  id: String!
}

type GraphEducationRoot {
  classes(queryOptions: QueryOptions): [GraphEducationClass]
  classesById(id: ID): GraphEducationClass
  me: GraphEducationUser
  schools(queryOptions: QueryOptions): [GraphEducationSchool]
  schoolsById(id: ID): GraphEducationSchool
  users(queryOptions: QueryOptions): [GraphEducationUser]
  usersById(id: ID): GraphEducationUser
}

type GraphAppScope implements GraphEntity {
  displayName: String
  type: String
  id: String!
}

type GraphRbacApplication implements GraphEntity {
  roleAssignments(queryOptions: QueryOptions): [GraphUnifiedRoleAssignment]
  roleAssignmentsById(id: ID): GraphUnifiedRoleAssignment
  roleDefinitions(queryOptions: QueryOptions): [GraphUnifiedRoleDefinition]
  roleDefinitionsById(id: ID): GraphUnifiedRoleDefinition
  id: String!
}

type GraphUnifiedRoleAssignment implements GraphEntity {
  appScopeId: String
  condition: String
  directoryScopeId: String
  principalId: String
  roleDefinitionId: String
  appScope: GraphAppScope
  directoryScope: GraphDirectoryObject
  principal: GraphDirectoryObject
  roleDefinition: GraphUnifiedRoleDefinition
  id: String!
}

type GraphUnifiedRoleDefinition implements GraphEntity {
  description: String
  displayName: String
  isBuiltIn: Boolean
  isEnabled: Boolean
  resourceScopes: [String]!
  rolePermissions: [GraphUnifiedRolePermission]!
  templateId: String
  version: String
  inheritsPermissionsFrom(queryOptions: QueryOptions): [GraphUnifiedRoleDefinition]
  inheritsPermissionsFromById(id: ID): GraphUnifiedRoleDefinition
  id: String!
}

type GraphRoleManagement {
  rest: JSON
}

type GraphDriveItem implements GraphBaseItem {
  audio: GraphAudio
  content: String
  cTag: String
  deleted: GraphDeleted
  file: GraphFile
  fileSystemInfo: GraphFileSystemInfo
  folder: GraphFolder
  image: GraphImage
  location: GraphGeoCoordinates
  package: GraphPackage
  pendingOperations: GraphPendingOperations
  photo: GraphPhoto
  publication: GraphPublicationFacet
  remoteItem: GraphRemoteItem
  root: GraphRoot
  searchResult: GraphSearchResult
  shared: GraphShared
  sharepointIds: GraphSharepointIds
  size: BigInt
  specialFolder: GraphSpecialFolder
  video: GraphVideo
  webDavUrl: String
  workbook: GraphWorkbook
  analytics: GraphItemAnalytics
  children(queryOptions: QueryOptions): [GraphDriveItem]
  childrenById(id: ID): GraphDriveItem
  listItem: GraphListItem
  permissions(queryOptions: QueryOptions): [GraphPermission]
  permissionsById(id: ID): GraphPermission
  subscriptions(queryOptions: QueryOptions): [GraphSubscription]
  subscriptionsById(id: ID): GraphSubscription
  thumbnails(queryOptions: QueryOptions): [GraphThumbnailSet]
  thumbnailsById(id: ID): GraphThumbnailSet
  versions(queryOptions: QueryOptions): [GraphDriveItemVersion]
  versionsById(id: ID): GraphDriveItemVersion
  rest: JSON
  delta: [GraphDriveItem]
  getActivitiesByInterval: [GraphItemActivityStat]
  search: [GraphDriveItem]
  restore(bindingParameter: GraphDriveItemInput, parentReference: GraphItemReferenceInput, name: String): JSON
  copy(bindingParameter: GraphDriveItemInput, name: String, parentReference: GraphItemReferenceInput): JSON
  createUploadSession(
    bindingParameter: GraphDriveItemInput
    item: GraphDriveItemUploadablePropertiesInput
    deferCommit: Boolean
  ): JSON
  checkin(bindingParameter: GraphDriveItemInput, checkInAs: String, comment: String): JSON
  checkout(bindingParameter: GraphDriveItemInput): JSON
  createLink(
    bindingParameter: GraphDriveItemInput
    type: String!
    scope: String
    expirationDateTime: DateTime
    password: String
    message: String
  ): JSON
  follow(bindingParameter: GraphDriveItemInput): JSON
  invite(
    bindingParameter: GraphDriveItemInput
    requireSignIn: Boolean
    roles: [String]
    sendInvitation: Boolean
    message: String
    recipients: [GraphDriveRecipientInput]!
    expirationDateTime: String
    password: String
  ): JSON
  preview(bindingParameter: GraphDriveItemInput, page: String, zoom: Float): JSON
  unfollow(bindingParameter: GraphDriveItemInput): JSON
  validatePermission(bindingParameter: GraphDriveItemInput, challengeToken: String, password: String!): JSON
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

input GraphDriveItemInput {
  audio: GraphAudioInput
  content: String
  cTag: String
  deleted: GraphDeletedInput
  file: GraphFileInput
  fileSystemInfo: GraphFileSystemInfoInput
  folder: GraphFolderInput
  image: GraphImageInput
  location: GraphGeoCoordinatesInput
  package: GraphPackageInput
  pendingOperations: GraphPendingOperationsInput
  photo: GraphPhotoInput
  publication: GraphPublicationFacetInput
  remoteItem: GraphRemoteItemInput
  root: GraphRootInput
  searchResult: GraphSearchResultInput
  shared: GraphSharedInput
  sharepointIds: GraphSharepointIdsInput
  size: BigInt
  specialFolder: GraphSpecialFolderInput
  video: GraphVideoInput
  webDavUrl: String
  rest: JSON
  createdBy: GraphIdentitySetInput
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReferenceInput
  webUrl: String
  id: String!
}

input GraphAudioInput {
  album: String
  albumArtist: String
  artist: String
  bitrate: BigInt
  composers: String
  copyright: String
  disc: Int
  discCount: Int
  duration: BigInt
  genre: String
  hasDrm: Boolean
  isVariableBitrate: Boolean
  title: String
  track: Int
  trackCount: Int
  year: Int
}

input GraphDeletedInput {
  state: String
}

input GraphFileInput {
  hashes: GraphHashesInput
  mimeType: String
  processingMetadata: Boolean
}

input GraphHashesInput {
  crc32Hash: String
  quickXorHash: String
  sha1Hash: String
  sha256Hash: String
}

input GraphFileSystemInfoInput {
  createdDateTime: DateTime
  lastAccessedDateTime: DateTime
  lastModifiedDateTime: DateTime
}

input GraphFolderInput {
  childCount: Int
  view: GraphFolderViewInput
}

input GraphFolderViewInput {
  sortBy: String
  sortOrder: String
  viewType: String
}

input GraphImageInput {
  height: Int
  width: Int
}

input GraphGeoCoordinatesInput {
  altitude: Float
  latitude: Float
  longitude: Float
}

input GraphPackageInput {
  type: String
}

input GraphPendingOperationsInput {
  pendingContentUpdate: GraphPendingContentUpdateInput
}

input GraphPendingContentUpdateInput {
  queuedDateTime: DateTime
}

input GraphPhotoInput {
  cameraMake: String
  cameraModel: String
  exposureDenominator: Float
  exposureNumerator: Float
  fNumber: Float
  focalLength: Float
  iso: Int
  orientation: Int
  takenDateTime: DateTime
}

input GraphPublicationFacetInput {
  level: String
  versionId: String
}

input GraphRemoteItemInput {
  createdBy: GraphIdentitySetInput
  createdDateTime: DateTime
  file: GraphFileInput
  fileSystemInfo: GraphFileSystemInfoInput
  folder: GraphFolderInput
  id: String
  image: GraphImageInput
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime
  name: String
  package: GraphPackageInput
  parentReference: GraphItemReferenceInput
  shared: GraphSharedInput
  sharepointIds: GraphSharepointIdsInput
  size: BigInt
  specialFolder: GraphSpecialFolderInput
  video: GraphVideoInput
  webDavUrl: String
  webUrl: String
}

input GraphSharedInput {
  owner: GraphIdentitySetInput
  scope: String
  sharedBy: GraphIdentitySetInput
  sharedDateTime: DateTime
}

input GraphSpecialFolderInput {
  name: String
}

input GraphVideoInput {
  audioBitsPerSample: Int
  audioChannels: Int
  audioFormat: String
  audioSamplesPerSecond: Int
  bitrate: Int
  duration: BigInt
  fourCC: String
  frameRate: Float
  height: Int
  width: Int
}

input GraphSearchResultInput {
  onClickTelemetryUrl: String
}

input GraphDriveItemUploadablePropertiesInput {
  description: String
  fileSize: BigInt
  fileSystemInfo: GraphFileSystemInfoInput
  name: String
}

input GraphDriveRecipientInput {
  alias: String
  email: String
  objectId: String
}

type GraphList implements GraphBaseItem {
  displayName: String
  list: GraphListInfo
  sharepointIds: GraphSharepointIds
  system: GraphSystemFacet
  columns(queryOptions: QueryOptions): [GraphColumnDefinition]
  columnsById(id: ID): GraphColumnDefinition
  contentTypes(queryOptions: QueryOptions): [GraphContentType]
  contentTypesById(id: ID): GraphContentType
  drive: GraphDrive
  items(queryOptions: QueryOptions): [GraphListItem]
  itemsById(id: ID): GraphListItem
  subscriptions(queryOptions: QueryOptions): [GraphSubscription]
  subscriptionsById(id: ID): GraphSubscription
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

type GraphWorkbook implements GraphEntity {
  application: GraphWorkbookApplication
  comments(queryOptions: QueryOptions): [GraphWorkbookComment]
  commentsById(id: ID): GraphWorkbookComment
  functions: GraphWorkbookFunctions
  names(queryOptions: QueryOptions): [GraphWorkbookNamedItem]
  namesById(id: ID): GraphWorkbookNamedItem
  operations(queryOptions: QueryOptions): [GraphWorkbookOperation]
  operationsById(id: ID): GraphWorkbookOperation
  tables(queryOptions: QueryOptions): [GraphWorkbookTable]
  tablesById(id: ID): GraphWorkbookTable
  worksheets(queryOptions: QueryOptions): [GraphWorkbookWorksheet]
  worksheetsById(id: ID): GraphWorkbookWorksheet
  sessionInfoResource: GraphWorkbookSessionInfo
  closeSession(this: GraphWorkbookInput): JSON
  createSession(this: GraphWorkbookInput, persistChanges: Boolean!): JSON
  refreshSession(this: GraphWorkbookInput): JSON
  id: String!
}

input GraphWorkbookInput {
  id: String!
}

type GraphItemAnalytics implements GraphEntity {
  allTime: GraphItemActivityStat
  itemActivityStats(queryOptions: QueryOptions): [GraphItemActivityStat]
  itemActivityStatsById(id: ID): GraphItemActivityStat
  lastSevenDays: GraphItemActivityStat
  rest: JSON
  id: String!
}

type GraphListItem implements GraphBaseItem {
  contentType: GraphContentTypeInfo
  sharepointIds: GraphSharepointIds
  analytics: GraphItemAnalytics
  driveItem: GraphDriveItem
  fields: GraphFieldValueSet
  versions(queryOptions: QueryOptions): [GraphListItemVersion]
  versionsById(id: ID): GraphListItemVersion
  getActivitiesByInterval: [GraphItemActivityStat]
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

type GraphPermission implements GraphEntity {
  expirationDateTime: DateTime
  grantedTo: GraphIdentitySet
  grantedToIdentities: [GraphIdentitySet]
  hasPassword: Boolean
  inheritedFrom: GraphItemReference
  invitation: GraphSharingInvitation
  link: GraphSharingLink
  roles: [String]
  shareId: String
  grant(bindingParameter: GraphPermissionInput, roles: [String], recipients: [GraphDriveRecipientInput]): JSON
  id: String!
}

input GraphPermissionInput {
  expirationDateTime: DateTime
  grantedTo: GraphIdentitySetInput
  grantedToIdentities: [GraphIdentitySetInput]
  hasPassword: Boolean
  inheritedFrom: GraphItemReferenceInput
  invitation: GraphSharingInvitationInput
  link: GraphSharingLinkInput
  roles: [String]
  shareId: String
  id: String!
}

input GraphSharingInvitationInput {
  email: String
  invitedBy: GraphIdentitySetInput
  redeemedBy: String
  signInRequired: Boolean
}

input GraphSharingLinkInput {
  application: GraphIdentityInput
  preventsDownload: Boolean
  scope: String
  type: String
  webHtml: String
  webUrl: String
}

type GraphSubscription implements GraphEntity {
  applicationId: String
  changeType: String!
  clientState: String
  creatorId: String
  encryptionCertificate: String
  encryptionCertificateId: String
  expirationDateTime: DateTime!
  includeResourceData: Boolean
  latestSupportedTlsVersion: String
  lifecycleNotificationUrl: String
  notificationQueryOptions: String
  notificationUrl: String!
  resource: String!
  id: String!
}

type GraphThumbnailSet implements GraphEntity {
  large: GraphThumbnail
  medium: GraphThumbnail
  small: GraphThumbnail
  source: GraphThumbnail
  rest: JSON
  id: String!
}

type TGraphBaseItemVersion implements GraphBaseItemVersion & GraphEntity {
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  publication: GraphPublicationFacet
  id: String!
}

interface GraphBaseItemVersion {
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  publication: GraphPublicationFacet
  id: String!
}

type GraphDriveItemVersion implements GraphBaseItemVersion {
  content: String
  size: BigInt
  restoreVersion(bindingParameter: GraphDriveItemVersionInput): JSON
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  publication: GraphPublicationFacet
  id: String!
}

input GraphDriveItemVersionInput {
  content: String
  size: BigInt
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime
  publication: GraphPublicationFacetInput
  id: String!
}

type GraphColumnDefinition implements GraphEntity {
  boolean: GraphBooleanColumn
  calculated: GraphCalculatedColumn
  choice: GraphChoiceColumn
  columnGroup: String
  currency: GraphCurrencyColumn
  dateTime: GraphDateTimeColumn
  defaultValue: GraphDefaultColumnValue
  description: String
  displayName: String
  enforceUniqueValues: Boolean
  geolocation: GraphGeolocationColumn
  hidden: Boolean
  indexed: Boolean
  lookup: GraphLookupColumn
  name: String
  number: GraphNumberColumn
  personOrGroup: GraphPersonOrGroupColumn
  readOnly: Boolean
  required: Boolean
  text: GraphTextColumn
  id: String!
}

type GraphContentType implements GraphEntity {
  description: String
  group: String
  hidden: Boolean
  inheritedFrom: GraphItemReference
  name: String
  order: GraphContentTypeOrder
  parentId: String
  readOnly: Boolean
  sealed: Boolean
  columnLinks(queryOptions: QueryOptions): [GraphColumnLink]
  columnLinksById(id: ID): GraphColumnLink
  id: String!
}

type GraphWorkbookApplication implements GraphEntity {
  calculationMode: String!
  calculate(bindparameter: GraphWorkbookApplicationInput, calculationType: String!): JSON
  id: String!
}

input GraphWorkbookApplicationInput {
  calculationMode: String!
  id: String!
}

type GraphWorkbookComment implements GraphEntity {
  content: String
  contentType: String!
  replies(queryOptions: QueryOptions): [GraphWorkbookCommentReply]
  repliesById(id: ID): GraphWorkbookCommentReply
  id: String!
}

type GraphWorkbookFunctions implements GraphEntity {
  rest: JSON
  delta(bindparameter: GraphWorkbookFunctionsInput, number1: GraphJsonInput, number2: GraphJsonInput): JSON
  abs(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  accrInt(
    bindparameter: GraphWorkbookFunctionsInput
    issue: GraphJsonInput
    firstInterest: GraphJsonInput
    settlement: GraphJsonInput
    rate: GraphJsonInput
    par: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
    calcMethod: GraphJsonInput
  ): JSON
  accrIntM(
    bindparameter: GraphWorkbookFunctionsInput
    issue: GraphJsonInput
    settlement: GraphJsonInput
    rate: GraphJsonInput
    par: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  acos(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  acosh(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  acot(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  acoth(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  amorDegrc(
    bindparameter: GraphWorkbookFunctionsInput
    cost: GraphJsonInput
    datePurchased: GraphJsonInput
    firstPeriod: GraphJsonInput
    salvage: GraphJsonInput
    period: GraphJsonInput
    rate: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  amorLinc(
    bindparameter: GraphWorkbookFunctionsInput
    cost: GraphJsonInput
    datePurchased: GraphJsonInput
    firstPeriod: GraphJsonInput
    salvage: GraphJsonInput
    period: GraphJsonInput
    rate: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  and(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  arabic(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  areas(bindparameter: GraphWorkbookFunctionsInput, reference: GraphJsonInput): JSON
  asc(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  asin(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  asinh(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  atan(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  atan2(bindparameter: GraphWorkbookFunctionsInput, xNum: GraphJsonInput, yNum: GraphJsonInput): JSON
  atanh(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  aveDev(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  average(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  averageA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  averageIf(
    bindparameter: GraphWorkbookFunctionsInput
    range: GraphJsonInput
    criteria: GraphJsonInput
    averageRange: GraphJsonInput
  ): JSON
  averageIfs(bindparameter: GraphWorkbookFunctionsInput, averageRange: GraphJsonInput, values: GraphJsonInput): JSON
  bahtText(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  base(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    radix: GraphJsonInput
    minLength: GraphJsonInput
  ): JSON
  besselI(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput, n: GraphJsonInput): JSON
  besselJ(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput, n: GraphJsonInput): JSON
  besselK(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput, n: GraphJsonInput): JSON
  besselY(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput, n: GraphJsonInput): JSON
  beta_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    alpha: GraphJsonInput
    beta: GraphJsonInput
    cumulative: GraphJsonInput
    A: GraphJsonInput
    B: GraphJsonInput
  ): JSON
  beta_Inv(
    bindparameter: GraphWorkbookFunctionsInput
    probability: GraphJsonInput
    alpha: GraphJsonInput
    beta: GraphJsonInput
    A: GraphJsonInput
    B: GraphJsonInput
  ): JSON
  bin2Dec(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  bin2Hex(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  bin2Oct(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  binom_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    numberS: GraphJsonInput
    trials: GraphJsonInput
    probabilityS: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  binom_Dist_Range(
    bindparameter: GraphWorkbookFunctionsInput
    trials: GraphJsonInput
    probabilityS: GraphJsonInput
    numberS: GraphJsonInput
    numberS2: GraphJsonInput
  ): JSON
  binom_Inv(
    bindparameter: GraphWorkbookFunctionsInput
    trials: GraphJsonInput
    probabilityS: GraphJsonInput
    alpha: GraphJsonInput
  ): JSON
  bitand(bindparameter: GraphWorkbookFunctionsInput, number1: GraphJsonInput, number2: GraphJsonInput): JSON
  bitlshift(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, shiftAmount: GraphJsonInput): JSON
  bitor(bindparameter: GraphWorkbookFunctionsInput, number1: GraphJsonInput, number2: GraphJsonInput): JSON
  bitrshift(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, shiftAmount: GraphJsonInput): JSON
  bitxor(bindparameter: GraphWorkbookFunctionsInput, number1: GraphJsonInput, number2: GraphJsonInput): JSON
  ceiling_Math(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    significance: GraphJsonInput
    mode: GraphJsonInput
  ): JSON
  ceiling_Precise(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    significance: GraphJsonInput
  ): JSON
  char(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  chiSq_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    degFreedom: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  chiSq_Dist_RT(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput, degFreedom: GraphJsonInput): JSON
  chiSq_Inv(bindparameter: GraphWorkbookFunctionsInput, probability: GraphJsonInput, degFreedom: GraphJsonInput): JSON
  chiSq_Inv_RT(
    bindparameter: GraphWorkbookFunctionsInput
    probability: GraphJsonInput
    degFreedom: GraphJsonInput
  ): JSON
  choose(bindparameter: GraphWorkbookFunctionsInput, indexNum: GraphJsonInput, values: GraphJsonInput): JSON
  clean(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  code(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  columns(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput): JSON
  combin(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numberChosen: GraphJsonInput): JSON
  combina(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numberChosen: GraphJsonInput): JSON
  complex(
    bindparameter: GraphWorkbookFunctionsInput
    realNum: GraphJsonInput
    iNum: GraphJsonInput
    suffix: GraphJsonInput
  ): JSON
  concatenate(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  confidence_Norm(
    bindparameter: GraphWorkbookFunctionsInput
    alpha: GraphJsonInput
    standardDev: GraphJsonInput
    size: GraphJsonInput
  ): JSON
  confidence_T(
    bindparameter: GraphWorkbookFunctionsInput
    alpha: GraphJsonInput
    standardDev: GraphJsonInput
    size: GraphJsonInput
  ): JSON
  convert(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    fromUnit: GraphJsonInput
    toUnit: GraphJsonInput
  ): JSON
  cos(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  cosh(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  cot(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  coth(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  count(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  countA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  countBlank(bindparameter: GraphWorkbookFunctionsInput, range: GraphJsonInput): JSON
  countIf(bindparameter: GraphWorkbookFunctionsInput, range: GraphJsonInput, criteria: GraphJsonInput): JSON
  countIfs(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  coupDayBs(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  coupDays(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  coupDaysNc(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  coupNcd(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  coupNum(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  coupPcd(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  csc(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  csch(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  cumIPmt(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    nper: GraphJsonInput
    pv: GraphJsonInput
    startPeriod: GraphJsonInput
    endPeriod: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  cumPrinc(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    nper: GraphJsonInput
    pv: GraphJsonInput
    startPeriod: GraphJsonInput
    endPeriod: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  date(
    bindparameter: GraphWorkbookFunctionsInput
    year: GraphJsonInput
    month: GraphJsonInput
    day: GraphJsonInput
  ): JSON
  datevalue(bindparameter: GraphWorkbookFunctionsInput, dateText: GraphJsonInput): JSON
  daverage(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  day(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput): JSON
  days(bindparameter: GraphWorkbookFunctionsInput, endDate: GraphJsonInput, startDate: GraphJsonInput): JSON
  days360(
    bindparameter: GraphWorkbookFunctionsInput
    startDate: GraphJsonInput
    endDate: GraphJsonInput
    method: GraphJsonInput
  ): JSON
  db(
    bindparameter: GraphWorkbookFunctionsInput
    cost: GraphJsonInput
    salvage: GraphJsonInput
    life: GraphJsonInput
    period: GraphJsonInput
    month: GraphJsonInput
  ): JSON
  dbcs(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  dcount(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  dcountA(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  ddb(
    bindparameter: GraphWorkbookFunctionsInput
    cost: GraphJsonInput
    salvage: GraphJsonInput
    life: GraphJsonInput
    period: GraphJsonInput
    factor: GraphJsonInput
  ): JSON
  dec2Bin(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  dec2Hex(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  dec2Oct(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  decimal(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, radix: GraphJsonInput): JSON
  degrees(bindparameter: GraphWorkbookFunctionsInput, angle: GraphJsonInput): JSON
  devSq(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  dget(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  disc(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    pr: GraphJsonInput
    redemption: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  dmax(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  dmin(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  dollar(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, decimals: GraphJsonInput): JSON
  dollarDe(bindparameter: GraphWorkbookFunctionsInput, fractionalDollar: GraphJsonInput, fraction: GraphJsonInput): JSON
  dollarFr(bindparameter: GraphWorkbookFunctionsInput, decimalDollar: GraphJsonInput, fraction: GraphJsonInput): JSON
  dproduct(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  dstDev(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  dstDevP(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  dsum(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  duration(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    coupon: GraphJsonInput
    yld: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  dvar(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  dvarP(
    bindparameter: GraphWorkbookFunctionsInput
    database: GraphJsonInput
    field: GraphJsonInput
    criteria: GraphJsonInput
  ): JSON
  ecma_Ceiling(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, significance: GraphJsonInput): JSON
  edate(bindparameter: GraphWorkbookFunctionsInput, startDate: GraphJsonInput, months: GraphJsonInput): JSON
  effect(bindparameter: GraphWorkbookFunctionsInput, nominalRate: GraphJsonInput, npery: GraphJsonInput): JSON
  eoMonth(bindparameter: GraphWorkbookFunctionsInput, startDate: GraphJsonInput, months: GraphJsonInput): JSON
  erf(bindparameter: GraphWorkbookFunctionsInput, lowerLimit: GraphJsonInput, upperLimit: GraphJsonInput): JSON
  erfC(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput): JSON
  erfC_Precise(bindparameter: GraphWorkbookFunctionsInput, X: GraphJsonInput): JSON
  erf_Precise(bindparameter: GraphWorkbookFunctionsInput, X: GraphJsonInput): JSON
  error_Type(bindparameter: GraphWorkbookFunctionsInput, errorVal: GraphJsonInput): JSON
  even(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  exact(bindparameter: GraphWorkbookFunctionsInput, text1: GraphJsonInput, text2: GraphJsonInput): JSON
  exp(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  expon_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    lambda: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  fact(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  factDouble(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  false(bindparameter: GraphWorkbookFunctionsInput): JSON
  find(
    bindparameter: GraphWorkbookFunctionsInput
    findText: GraphJsonInput
    withinText: GraphJsonInput
    startNum: GraphJsonInput
  ): JSON
  findB(
    bindparameter: GraphWorkbookFunctionsInput
    findText: GraphJsonInput
    withinText: GraphJsonInput
    startNum: GraphJsonInput
  ): JSON
  fisher(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput): JSON
  fisherInv(bindparameter: GraphWorkbookFunctionsInput, y: GraphJsonInput): JSON
  fixed(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    decimals: GraphJsonInput
    noCommas: GraphJsonInput
  ): JSON
  floor_Math(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    significance: GraphJsonInput
    mode: GraphJsonInput
  ): JSON
  floor_Precise(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, significance: GraphJsonInput): JSON
  fv(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    nper: GraphJsonInput
    pmt: GraphJsonInput
    pv: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  fvschedule(bindparameter: GraphWorkbookFunctionsInput, principal: GraphJsonInput, schedule: GraphJsonInput): JSON
  f_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    degFreedom1: GraphJsonInput
    degFreedom2: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  f_Dist_RT(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    degFreedom1: GraphJsonInput
    degFreedom2: GraphJsonInput
  ): JSON
  f_Inv(
    bindparameter: GraphWorkbookFunctionsInput
    probability: GraphJsonInput
    degFreedom1: GraphJsonInput
    degFreedom2: GraphJsonInput
  ): JSON
  f_Inv_RT(
    bindparameter: GraphWorkbookFunctionsInput
    probability: GraphJsonInput
    degFreedom1: GraphJsonInput
    degFreedom2: GraphJsonInput
  ): JSON
  gamma(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput): JSON
  gammaLn(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput): JSON
  gammaLn_Precise(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput): JSON
  gamma_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    alpha: GraphJsonInput
    beta: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  gamma_Inv(
    bindparameter: GraphWorkbookFunctionsInput
    probability: GraphJsonInput
    alpha: GraphJsonInput
    beta: GraphJsonInput
  ): JSON
  gauss(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput): JSON
  gcd(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  geoMean(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  geStep(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, step: GraphJsonInput): JSON
  harMean(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  hex2Bin(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  hex2Dec(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  hex2Oct(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  hlookup(
    bindparameter: GraphWorkbookFunctionsInput
    lookupValue: GraphJsonInput
    tableArray: GraphJsonInput
    rowIndexNum: GraphJsonInput
    rangeLookup: GraphJsonInput
  ): JSON
  hour(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput): JSON
  hyperlink(
    bindparameter: GraphWorkbookFunctionsInput
    linkLocation: GraphJsonInput
    friendlyName: GraphJsonInput
  ): JSON
  hypGeom_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    sampleS: GraphJsonInput
    numberSample: GraphJsonInput
    populationS: GraphJsonInput
    numberPop: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  if(
    bindparameter: GraphWorkbookFunctionsInput
    logicalTest: GraphJsonInput
    valueIfTrue: GraphJsonInput
    valueIfFalse: GraphJsonInput
  ): JSON
  imAbs(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imaginary(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imArgument(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imConjugate(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imCos(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imCosh(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imCot(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imCsc(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imCsch(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imDiv(bindparameter: GraphWorkbookFunctionsInput, inumber1: GraphJsonInput, inumber2: GraphJsonInput): JSON
  imExp(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imLn(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imLog10(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imLog2(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imPower(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput, number: GraphJsonInput): JSON
  imProduct(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  imReal(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imSec(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imSech(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imSin(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imSinh(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imSqrt(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  imSub(bindparameter: GraphWorkbookFunctionsInput, inumber1: GraphJsonInput, inumber2: GraphJsonInput): JSON
  imSum(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  imTan(bindparameter: GraphWorkbookFunctionsInput, inumber: GraphJsonInput): JSON
  int(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  intRate(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    investment: GraphJsonInput
    redemption: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  ipmt(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    per: GraphJsonInput
    nper: GraphJsonInput
    pv: GraphJsonInput
    fv: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  irr(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput, guess: GraphJsonInput): JSON
  isErr(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  isError(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  isEven(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  isFormula(bindparameter: GraphWorkbookFunctionsInput, reference: GraphJsonInput): JSON
  isLogical(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  isNA(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  isNonText(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  isNumber(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  isOdd(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  isoWeekNum(bindparameter: GraphWorkbookFunctionsInput, date: GraphJsonInput): JSON
  iso_Ceiling(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, significance: GraphJsonInput): JSON
  ispmt(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    per: GraphJsonInput
    nper: GraphJsonInput
    pv: GraphJsonInput
  ): JSON
  isref(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  isText(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  kurt(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  large(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput, k: GraphJsonInput): JSON
  lcm(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  left(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput, numChars: GraphJsonInput): JSON
  leftb(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput, numBytes: GraphJsonInput): JSON
  len(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  lenb(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  ln(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  log(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, base: GraphJsonInput): JSON
  log10(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  logNorm_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    mean: GraphJsonInput
    standardDev: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  logNorm_Inv(
    bindparameter: GraphWorkbookFunctionsInput
    probability: GraphJsonInput
    mean: GraphJsonInput
    standardDev: GraphJsonInput
  ): JSON
  lookup(
    bindparameter: GraphWorkbookFunctionsInput
    lookupValue: GraphJsonInput
    lookupVector: GraphJsonInput
    resultVector: GraphJsonInput
  ): JSON
  lower(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  match(
    bindparameter: GraphWorkbookFunctionsInput
    lookupValue: GraphJsonInput
    lookupArray: GraphJsonInput
    matchType: GraphJsonInput
  ): JSON
  max(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  maxA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  mduration(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    coupon: GraphJsonInput
    yld: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  median(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  mid(
    bindparameter: GraphWorkbookFunctionsInput
    text: GraphJsonInput
    startNum: GraphJsonInput
    numChars: GraphJsonInput
  ): JSON
  midb(
    bindparameter: GraphWorkbookFunctionsInput
    text: GraphJsonInput
    startNum: GraphJsonInput
    numBytes: GraphJsonInput
  ): JSON
  min(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  minA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  minute(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput): JSON
  mirr(
    bindparameter: GraphWorkbookFunctionsInput
    values: GraphJsonInput
    financeRate: GraphJsonInput
    reinvestRate: GraphJsonInput
  ): JSON
  mod(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, divisor: GraphJsonInput): JSON
  month(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput): JSON
  mround(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, multiple: GraphJsonInput): JSON
  multiNomial(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  n(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  na(bindparameter: GraphWorkbookFunctionsInput): JSON
  negBinom_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    numberF: GraphJsonInput
    numberS: GraphJsonInput
    probabilityS: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  networkDays(
    bindparameter: GraphWorkbookFunctionsInput
    startDate: GraphJsonInput
    endDate: GraphJsonInput
    holidays: GraphJsonInput
  ): JSON
  networkDays_Intl(
    bindparameter: GraphWorkbookFunctionsInput
    startDate: GraphJsonInput
    endDate: GraphJsonInput
    weekend: GraphJsonInput
    holidays: GraphJsonInput
  ): JSON
  nominal(bindparameter: GraphWorkbookFunctionsInput, effectRate: GraphJsonInput, npery: GraphJsonInput): JSON
  norm_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    mean: GraphJsonInput
    standardDev: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  norm_Inv(
    bindparameter: GraphWorkbookFunctionsInput
    probability: GraphJsonInput
    mean: GraphJsonInput
    standardDev: GraphJsonInput
  ): JSON
  norm_S_Dist(bindparameter: GraphWorkbookFunctionsInput, z: GraphJsonInput, cumulative: GraphJsonInput): JSON
  norm_S_Inv(bindparameter: GraphWorkbookFunctionsInput, probability: GraphJsonInput): JSON
  not(bindparameter: GraphWorkbookFunctionsInput, logical: GraphJsonInput): JSON
  now(bindparameter: GraphWorkbookFunctionsInput): JSON
  nper(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    pmt: GraphJsonInput
    pv: GraphJsonInput
    fv: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  npv(bindparameter: GraphWorkbookFunctionsInput, rate: GraphJsonInput, values: GraphJsonInput): JSON
  numberValue(
    bindparameter: GraphWorkbookFunctionsInput
    text: GraphJsonInput
    decimalSeparator: GraphJsonInput
    groupSeparator: GraphJsonInput
  ): JSON
  oct2Bin(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  oct2Dec(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  oct2Hex(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, places: GraphJsonInput): JSON
  odd(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  oddFPrice(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    issue: GraphJsonInput
    firstCoupon: GraphJsonInput
    rate: GraphJsonInput
    yld: GraphJsonInput
    redemption: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  oddFYield(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    issue: GraphJsonInput
    firstCoupon: GraphJsonInput
    rate: GraphJsonInput
    pr: GraphJsonInput
    redemption: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  oddLPrice(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    lastInterest: GraphJsonInput
    rate: GraphJsonInput
    yld: GraphJsonInput
    redemption: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  oddLYield(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    lastInterest: GraphJsonInput
    rate: GraphJsonInput
    pr: GraphJsonInput
    redemption: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  or(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  pduration(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    pv: GraphJsonInput
    fv: GraphJsonInput
  ): JSON
  percentile_Exc(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput, k: GraphJsonInput): JSON
  percentile_Inc(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput, k: GraphJsonInput): JSON
  percentRank_Exc(
    bindparameter: GraphWorkbookFunctionsInput
    array: GraphJsonInput
    x: GraphJsonInput
    significance: GraphJsonInput
  ): JSON
  percentRank_Inc(
    bindparameter: GraphWorkbookFunctionsInput
    array: GraphJsonInput
    x: GraphJsonInput
    significance: GraphJsonInput
  ): JSON
  permut(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numberChosen: GraphJsonInput): JSON
  permutationa(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numberChosen: GraphJsonInput): JSON
  phi(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput): JSON
  pi(bindparameter: GraphWorkbookFunctionsInput): JSON
  pmt(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    nper: GraphJsonInput
    pv: GraphJsonInput
    fv: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  poisson_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    mean: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  power(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, power: GraphJsonInput): JSON
  ppmt(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    per: GraphJsonInput
    nper: GraphJsonInput
    pv: GraphJsonInput
    fv: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  price(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    rate: GraphJsonInput
    yld: GraphJsonInput
    redemption: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  priceDisc(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    discount: GraphJsonInput
    redemption: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  priceMat(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    issue: GraphJsonInput
    rate: GraphJsonInput
    yld: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  product(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  proper(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  pv(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    nper: GraphJsonInput
    pmt: GraphJsonInput
    fv: GraphJsonInput
    type: GraphJsonInput
  ): JSON
  quartile_Exc(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput, quart: GraphJsonInput): JSON
  quartile_Inc(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput, quart: GraphJsonInput): JSON
  quotient(bindparameter: GraphWorkbookFunctionsInput, numerator: GraphJsonInput, denominator: GraphJsonInput): JSON
  radians(bindparameter: GraphWorkbookFunctionsInput, angle: GraphJsonInput): JSON
  rand(bindparameter: GraphWorkbookFunctionsInput): JSON
  randBetween(bindparameter: GraphWorkbookFunctionsInput, bottom: GraphJsonInput, top: GraphJsonInput): JSON
  rank_Avg(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    ref: GraphJsonInput
    order: GraphJsonInput
  ): JSON
  rank_Eq(
    bindparameter: GraphWorkbookFunctionsInput
    number: GraphJsonInput
    ref: GraphJsonInput
    order: GraphJsonInput
  ): JSON
  rate(
    bindparameter: GraphWorkbookFunctionsInput
    nper: GraphJsonInput
    pmt: GraphJsonInput
    pv: GraphJsonInput
    fv: GraphJsonInput
    type: GraphJsonInput
    guess: GraphJsonInput
  ): JSON
  received(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    investment: GraphJsonInput
    discount: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  replace(
    bindparameter: GraphWorkbookFunctionsInput
    oldText: GraphJsonInput
    startNum: GraphJsonInput
    numChars: GraphJsonInput
    newText: GraphJsonInput
  ): JSON
  replaceB(
    bindparameter: GraphWorkbookFunctionsInput
    oldText: GraphJsonInput
    startNum: GraphJsonInput
    numBytes: GraphJsonInput
    newText: GraphJsonInput
  ): JSON
  rept(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput, numberTimes: GraphJsonInput): JSON
  right(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput, numChars: GraphJsonInput): JSON
  rightb(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput, numBytes: GraphJsonInput): JSON
  roman(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, form: GraphJsonInput): JSON
  round(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numDigits: GraphJsonInput): JSON
  roundDown(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numDigits: GraphJsonInput): JSON
  roundUp(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numDigits: GraphJsonInput): JSON
  rows(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput): JSON
  rri(bindparameter: GraphWorkbookFunctionsInput, nper: GraphJsonInput, pv: GraphJsonInput, fv: GraphJsonInput): JSON
  sec(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  sech(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  second(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput): JSON
  seriesSum(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    n: GraphJsonInput
    m: GraphJsonInput
    coefficients: GraphJsonInput
  ): JSON
  sheet(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  sheets(bindparameter: GraphWorkbookFunctionsInput, reference: GraphJsonInput): JSON
  sign(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  sin(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  sinh(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  skew(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  skew_p(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  sln(
    bindparameter: GraphWorkbookFunctionsInput
    cost: GraphJsonInput
    salvage: GraphJsonInput
    life: GraphJsonInput
  ): JSON
  small(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput, k: GraphJsonInput): JSON
  sqrt(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  sqrtPi(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  standardize(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    mean: GraphJsonInput
    standardDev: GraphJsonInput
  ): JSON
  stDevA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  stDevPA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  stDev_P(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  stDev_S(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  substitute(
    bindparameter: GraphWorkbookFunctionsInput
    text: GraphJsonInput
    oldText: GraphJsonInput
    newText: GraphJsonInput
    instanceNum: GraphJsonInput
  ): JSON
  subtotal(bindparameter: GraphWorkbookFunctionsInput, functionNum: GraphJsonInput, values: GraphJsonInput): JSON
  sum(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  sumIf(
    bindparameter: GraphWorkbookFunctionsInput
    range: GraphJsonInput
    criteria: GraphJsonInput
    sumRange: GraphJsonInput
  ): JSON
  sumIfs(bindparameter: GraphWorkbookFunctionsInput, sumRange: GraphJsonInput, values: GraphJsonInput): JSON
  sumSq(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  syd(
    bindparameter: GraphWorkbookFunctionsInput
    cost: GraphJsonInput
    salvage: GraphJsonInput
    life: GraphJsonInput
    per: GraphJsonInput
  ): JSON
  t(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  tan(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  tanh(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  tbillEq(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    discount: GraphJsonInput
  ): JSON
  tbillPrice(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    discount: GraphJsonInput
  ): JSON
  tbillYield(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    pr: GraphJsonInput
  ): JSON
  text(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput, formatText: GraphJsonInput): JSON
  time(
    bindparameter: GraphWorkbookFunctionsInput
    hour: GraphJsonInput
    minute: GraphJsonInput
    second: GraphJsonInput
  ): JSON
  timevalue(bindparameter: GraphWorkbookFunctionsInput, timeText: GraphJsonInput): JSON
  today(bindparameter: GraphWorkbookFunctionsInput): JSON
  trim(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  trimMean(bindparameter: GraphWorkbookFunctionsInput, array: GraphJsonInput, percent: GraphJsonInput): JSON
  true(bindparameter: GraphWorkbookFunctionsInput): JSON
  trunc(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, numDigits: GraphJsonInput): JSON
  type(bindparameter: GraphWorkbookFunctionsInput, value: GraphJsonInput): JSON
  t_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    degFreedom: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  t_Dist_2T(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput, degFreedom: GraphJsonInput): JSON
  t_Dist_RT(bindparameter: GraphWorkbookFunctionsInput, x: GraphJsonInput, degFreedom: GraphJsonInput): JSON
  t_Inv(bindparameter: GraphWorkbookFunctionsInput, probability: GraphJsonInput, degFreedom: GraphJsonInput): JSON
  t_Inv_2T(bindparameter: GraphWorkbookFunctionsInput, probability: GraphJsonInput, degFreedom: GraphJsonInput): JSON
  unichar(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput): JSON
  unicode(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  upper(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  usdollar(bindparameter: GraphWorkbookFunctionsInput, number: GraphJsonInput, decimals: GraphJsonInput): JSON
  value(bindparameter: GraphWorkbookFunctionsInput, text: GraphJsonInput): JSON
  varA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  varPA(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  var_P(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  var_S(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  vdb(
    bindparameter: GraphWorkbookFunctionsInput
    cost: GraphJsonInput
    salvage: GraphJsonInput
    life: GraphJsonInput
    startPeriod: GraphJsonInput
    endPeriod: GraphJsonInput
    factor: GraphJsonInput
    noSwitch: GraphJsonInput
  ): JSON
  vlookup(
    bindparameter: GraphWorkbookFunctionsInput
    lookupValue: GraphJsonInput
    tableArray: GraphJsonInput
    colIndexNum: GraphJsonInput
    rangeLookup: GraphJsonInput
  ): JSON
  weekday(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput, returnType: GraphJsonInput): JSON
  weekNum(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput, returnType: GraphJsonInput): JSON
  weibull_Dist(
    bindparameter: GraphWorkbookFunctionsInput
    x: GraphJsonInput
    alpha: GraphJsonInput
    beta: GraphJsonInput
    cumulative: GraphJsonInput
  ): JSON
  workDay(
    bindparameter: GraphWorkbookFunctionsInput
    startDate: GraphJsonInput
    days: GraphJsonInput
    holidays: GraphJsonInput
  ): JSON
  workDay_Intl(
    bindparameter: GraphWorkbookFunctionsInput
    startDate: GraphJsonInput
    days: GraphJsonInput
    weekend: GraphJsonInput
    holidays: GraphJsonInput
  ): JSON
  xirr(
    bindparameter: GraphWorkbookFunctionsInput
    values: GraphJsonInput
    dates: GraphJsonInput
    guess: GraphJsonInput
  ): JSON
  xnpv(
    bindparameter: GraphWorkbookFunctionsInput
    rate: GraphJsonInput
    values: GraphJsonInput
    dates: GraphJsonInput
  ): JSON
  xor(bindparameter: GraphWorkbookFunctionsInput, values: GraphJsonInput): JSON
  year(bindparameter: GraphWorkbookFunctionsInput, serialNumber: GraphJsonInput): JSON
  yearFrac(
    bindparameter: GraphWorkbookFunctionsInput
    startDate: GraphJsonInput
    endDate: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  yield(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    rate: GraphJsonInput
    pr: GraphJsonInput
    redemption: GraphJsonInput
    frequency: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  yieldDisc(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    pr: GraphJsonInput
    redemption: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  yieldMat(
    bindparameter: GraphWorkbookFunctionsInput
    settlement: GraphJsonInput
    maturity: GraphJsonInput
    issue: GraphJsonInput
    rate: GraphJsonInput
    pr: GraphJsonInput
    basis: GraphJsonInput
  ): JSON
  z_Test(
    bindparameter: GraphWorkbookFunctionsInput
    array: GraphJsonInput
    x: GraphJsonInput
    sigma: GraphJsonInput
  ): JSON
  id: String!
}

input GraphWorkbookFunctionsInput {
  rest: JSON
  id: String!
}

input GraphJsonInput {
  rest: JSON
}

type GraphWorkbookNamedItem implements GraphEntity {
  comment: String
  name: String
  scope: String!
  type: String
  value: GraphJson
  visible: Boolean!
  worksheet: GraphWorkbookWorksheet
  range: GraphWorkbookRange
  add(bindparameter: [GraphWorkbookNamedItemInput], name: String, reference: GraphJsonInput, comment: String): JSON
  addFormulaLocal(bindparameter: [GraphWorkbookNamedItemInput], name: String, formula: String, comment: String): JSON
  id: String!
}

input GraphWorkbookNamedItemInput {
  comment: String
  name: String
  scope: String!
  type: String
  value: GraphJsonInput
  visible: Boolean!
  id: String!
}

type GraphWorkbookOperation implements GraphEntity {
  error: GraphWorkbookOperationError
  resourceLocation: String
  status: GraphWorkbookOperationStatus!
  id: String!
}

enum GraphWorkbookOperationStatus {
  notStarted
  running
  succeeded
  failed
}

type GraphWorkbookTable implements GraphEntity {
  highlightFirstColumn: Boolean!
  highlightLastColumn: Boolean!
  legacyId: String
  name: String
  showBandedColumns: Boolean!
  showBandedRows: Boolean!
  showFilterButton: Boolean!
  showHeaders: Boolean!
  showTotals: Boolean!
  style: String
  columns(queryOptions: QueryOptions): [GraphWorkbookTableColumn]
  columnsById(id: ID): GraphWorkbookTableColumn
  rows(queryOptions: QueryOptions): [GraphWorkbookTableRow]
  rowsById(id: ID): GraphWorkbookTableRow
  sort: GraphWorkbookTableSort
  worksheet: GraphWorkbookWorksheet
  count: Int
  itemAt: GraphWorkbookTable
  dataBodyRange: GraphWorkbookRange
  headerRowRange: GraphWorkbookRange
  range: GraphWorkbookRange
  totalRowRange: GraphWorkbookRange
  add(bindparameter: [GraphWorkbookTableInput], address: String, hasHeaders: Boolean!): JSON
  clearFilters(bindparameter: GraphWorkbookTableInput): JSON
  convertToRange(bindparameter: GraphWorkbookTableInput): JSON
  reapplyFilters(bindparameter: GraphWorkbookTableInput): JSON
  id: String!
}

input GraphWorkbookTableInput {
  highlightFirstColumn: Boolean!
  highlightLastColumn: Boolean!
  legacyId: String
  name: String
  showBandedColumns: Boolean!
  showBandedRows: Boolean!
  showFilterButton: Boolean!
  showHeaders: Boolean!
  showTotals: Boolean!
  style: String
  id: String!
}

type GraphWorkbookWorksheet implements GraphEntity {
  name: String
  position: Int!
  visibility: String!
  charts(queryOptions: QueryOptions): [GraphWorkbookChart]
  chartsById(id: ID): GraphWorkbookChart
  names(queryOptions: QueryOptions): [GraphWorkbookNamedItem]
  namesById(id: ID): GraphWorkbookNamedItem
  pivotTables(queryOptions: QueryOptions): [GraphWorkbookPivotTable]
  pivotTablesById(id: ID): GraphWorkbookPivotTable
  protection: GraphWorkbookWorksheetProtection
  tables(queryOptions: QueryOptions): [GraphWorkbookTable]
  tablesById(id: ID): GraphWorkbookTable
  cell: GraphWorkbookRange
  usedRange: GraphWorkbookRange
  range: GraphWorkbookRange
  add(bindparameter: [GraphWorkbookWorksheetInput], name: String): JSON
  id: String!
}

input GraphWorkbookWorksheetInput {
  name: String
  position: Int!
  visibility: String!
  id: String!
}

type GraphWorkbookChart implements GraphEntity {
  height: Float!
  left: Float!
  name: String
  top: Float!
  width: Float!
  axes: GraphWorkbookChartAxes
  dataLabels: GraphWorkbookChartDataLabels
  format: GraphWorkbookChartAreaFormat
  legend: GraphWorkbookChartLegend
  series(queryOptions: QueryOptions): [GraphWorkbookChartSeries]
  seriesById(id: ID): GraphWorkbookChartSeries
  title: GraphWorkbookChartTitle
  worksheet: GraphWorkbookWorksheet
  count: Int
  item: GraphWorkbookChart
  itemAt: GraphWorkbookChart
  image: String
  add(bindparameter: [GraphWorkbookChartInput], type: String!, sourceData: GraphJsonInput, seriesBy: String!): JSON
  setData(bindparameter: GraphWorkbookChartInput, sourceData: GraphJsonInput, seriesBy: String!): JSON
  setPosition(bindparameter: GraphWorkbookChartInput, startCell: GraphJsonInput, endCell: GraphJsonInput): JSON
  id: String!
}

input GraphWorkbookChartInput {
  height: Float!
  left: Float!
  name: String
  top: Float!
  width: Float!
  id: String!
}

type GraphWorkbookChartAxes implements GraphEntity {
  categoryAxis: GraphWorkbookChartAxis
  seriesAxis: GraphWorkbookChartAxis
  valueAxis: GraphWorkbookChartAxis
  id: String!
}

type GraphWorkbookChartDataLabels implements GraphEntity {
  position: String
  separator: String
  showBubbleSize: Boolean
  showCategoryName: Boolean
  showLegendKey: Boolean
  showPercentage: Boolean
  showSeriesName: Boolean
  showValue: Boolean
  format: GraphWorkbookChartDataLabelFormat
  id: String!
}

type GraphWorkbookChartAreaFormat implements GraphEntity {
  fill: GraphWorkbookChartFill
  font: GraphWorkbookChartFont
  id: String!
}

type GraphWorkbookChartLegend implements GraphEntity {
  overlay: Boolean
  position: String
  visible: Boolean!
  format: GraphWorkbookChartLegendFormat
  id: String!
}

type GraphWorkbookChartSeries implements GraphEntity {
  name: String
  format: GraphWorkbookChartSeriesFormat
  points(queryOptions: QueryOptions): [GraphWorkbookChartPoint]
  pointsById(id: ID): GraphWorkbookChartPoint
  count: Int
  itemAt: GraphWorkbookChartSeries
  id: String!
}

type GraphWorkbookChartTitle implements GraphEntity {
  overlay: Boolean
  text: String
  visible: Boolean!
  format: GraphWorkbookChartTitleFormat
  id: String!
}

type GraphWorkbookChartFill implements GraphEntity {
  rest: JSON
  clear(bindparameter: GraphWorkbookChartFillInput): JSON
  setSolidColor(bindparameter: GraphWorkbookChartFillInput, color: String): JSON
  id: String!
}

input GraphWorkbookChartFillInput {
  rest: JSON
  id: String!
}

type GraphWorkbookChartFont implements GraphEntity {
  bold: Boolean
  color: String
  italic: Boolean
  name: String
  size: Float
  underline: String
  id: String!
}

type GraphWorkbookChartAxis implements GraphEntity {
  majorUnit: GraphJson
  maximum: GraphJson
  minimum: GraphJson
  minorUnit: GraphJson
  format: GraphWorkbookChartAxisFormat
  majorGridlines: GraphWorkbookChartGridlines
  minorGridlines: GraphWorkbookChartGridlines
  title: GraphWorkbookChartAxisTitle
  id: String!
}

type GraphWorkbookChartAxisFormat implements GraphEntity {
  font: GraphWorkbookChartFont
  line: GraphWorkbookChartLineFormat
  id: String!
}

type GraphWorkbookChartGridlines implements GraphEntity {
  visible: Boolean!
  format: GraphWorkbookChartGridlinesFormat
  id: String!
}

type GraphWorkbookChartAxisTitle implements GraphEntity {
  text: String
  visible: Boolean!
  format: GraphWorkbookChartAxisTitleFormat
  id: String!
}

type GraphWorkbookChartLineFormat implements GraphEntity {
  color: String
  clear(bindparameter: GraphWorkbookChartLineFormatInput): JSON
  id: String!
}

input GraphWorkbookChartLineFormatInput {
  color: String
  id: String!
}

type GraphWorkbookChartAxisTitleFormat implements GraphEntity {
  font: GraphWorkbookChartFont
  id: String!
}

type GraphWorkbookChartDataLabelFormat implements GraphEntity {
  fill: GraphWorkbookChartFill
  font: GraphWorkbookChartFont
  id: String!
}

type GraphWorkbookChartGridlinesFormat implements GraphEntity {
  line: GraphWorkbookChartLineFormat
  id: String!
}

type GraphWorkbookChartLegendFormat implements GraphEntity {
  fill: GraphWorkbookChartFill
  font: GraphWorkbookChartFont
  id: String!
}

type GraphWorkbookChartPoint implements GraphEntity {
  value: GraphJson
  format: GraphWorkbookChartPointFormat
  count: Int
  itemAt: GraphWorkbookChartPoint
  id: String!
}

type GraphWorkbookChartPointFormat implements GraphEntity {
  fill: GraphWorkbookChartFill
  id: String!
}

type GraphWorkbookChartSeriesFormat implements GraphEntity {
  fill: GraphWorkbookChartFill
  line: GraphWorkbookChartLineFormat
  id: String!
}

type GraphWorkbookChartTitleFormat implements GraphEntity {
  fill: GraphWorkbookChartFill
  font: GraphWorkbookChartFont
  id: String!
}

type GraphWorkbookCommentReply implements GraphEntity {
  content: String
  contentType: String!
  id: String!
}

type GraphWorkbookFilter implements GraphEntity {
  criteria: GraphWorkbookFilterCriteria
  apply(bindparameter: GraphWorkbookFilterInput, criteria: GraphWorkbookFilterCriteriaInput): JSON
  applyBottomItemsFilter(bindparameter: GraphWorkbookFilterInput, count: Int!): JSON
  applyBottomPercentFilter(bindparameter: GraphWorkbookFilterInput, percent: Int!): JSON
  applyCellColorFilter(bindparameter: GraphWorkbookFilterInput, color: String): JSON
  applyCustomFilter(bindparameter: GraphWorkbookFilterInput, criteria1: String, criteria2: String, oper: String!): JSON
  applyDynamicFilter(bindparameter: GraphWorkbookFilterInput, criteria: String!): JSON
  applyFontColorFilter(bindparameter: GraphWorkbookFilterInput, color: String): JSON
  applyIconFilter(bindparameter: GraphWorkbookFilterInput, icon: GraphWorkbookIconInput): JSON
  applyTopItemsFilter(bindparameter: GraphWorkbookFilterInput, count: Int!): JSON
  applyTopPercentFilter(bindparameter: GraphWorkbookFilterInput, percent: Int!): JSON
  applyValuesFilter(bindparameter: GraphWorkbookFilterInput, values: GraphJsonInput): JSON
  clear(bindparameter: GraphWorkbookFilterInput): JSON
  id: String!
}

input GraphWorkbookFilterInput {
  criteria: GraphWorkbookFilterCriteriaInput
  id: String!
}

input GraphWorkbookFilterCriteriaInput {
  color: String
  criterion1: String
  criterion2: String
  dynamicCriteria: String!
  filterOn: String!
  icon: GraphWorkbookIconInput
  operator: String!
  values: GraphJsonInput
}

input GraphWorkbookIconInput {
  index: Int!
  set: String!
}

type GraphWorkbookFormatProtection implements GraphEntity {
  formulaHidden: Boolean
  locked: Boolean
  id: String!
}

type GraphWorkbookFunctionResult implements GraphEntity {
  error: String
  value: GraphJson
  id: String!
}

type GraphWorkbookPivotTable implements GraphEntity {
  name: String
  worksheet: GraphWorkbookWorksheet
  refresh(bindparameter: GraphWorkbookPivotTableInput): JSON
  refreshAll(bindparameter: [GraphWorkbookPivotTableInput]): JSON
  id: String!
}

input GraphWorkbookPivotTableInput {
  name: String
  id: String!
}

type GraphWorkbookRange implements GraphEntity {
  address: String
  addressLocal: String
  cellCount: Int!
  columnCount: Int!
  columnHidden: Boolean
  columnIndex: Int!
  formulas: GraphJson
  formulasLocal: GraphJson
  formulasR1C1: GraphJson
  hidden: Boolean
  numberFormat: GraphJson
  rowCount: Int!
  rowHidden: Boolean
  rowIndex: Int!
  text: GraphJson
  values: GraphJson
  valueTypes: GraphJson
  format: GraphWorkbookRangeFormat
  sort: GraphWorkbookRangeSort
  worksheet: GraphWorkbookWorksheet
  boundingRect: GraphWorkbookRange
  cell: GraphWorkbookRange
  column: GraphWorkbookRange
  columnsAfter: GraphWorkbookRange
  columnsBefore: GraphWorkbookRange
  entireColumn: GraphWorkbookRange
  entireRow: GraphWorkbookRange
  intersection: GraphWorkbookRange
  lastCell: GraphWorkbookRange
  lastColumn: GraphWorkbookRange
  lastRow: GraphWorkbookRange
  offsetRange: GraphWorkbookRange
  resizedRange: GraphWorkbookRange
  row: GraphWorkbookRange
  rowsAbove: GraphWorkbookRange
  rowsBelow: GraphWorkbookRange
  usedRange: GraphWorkbookRange
  visibleView: GraphWorkbookRangeView
  clear(bindparameter: GraphWorkbookRangeInput, applyTo: String!): JSON
  delete(bindparameter: GraphWorkbookRangeInput, shift: String!): JSON
  insert(bindparameter: GraphWorkbookRangeInput, shift: String!): JSON
  merge(bindparameter: GraphWorkbookRangeInput, across: Boolean!): JSON
  unmerge(bindparameter: GraphWorkbookRangeInput): JSON
  id: String!
}

input GraphWorkbookRangeInput {
  address: String
  addressLocal: String
  cellCount: Int!
  columnCount: Int!
  columnHidden: Boolean
  columnIndex: Int!
  formulas: GraphJsonInput
  formulasLocal: GraphJsonInput
  formulasR1C1: GraphJsonInput
  hidden: Boolean
  numberFormat: GraphJsonInput
  rowCount: Int!
  rowHidden: Boolean
  rowIndex: Int!
  text: GraphJsonInput
  values: GraphJsonInput
  valueTypes: GraphJsonInput
  id: String!
}

type GraphWorkbookRangeFormat implements GraphEntity {
  columnWidth: Float
  horizontalAlignment: String
  rowHeight: Float
  verticalAlignment: String
  wrapText: Boolean
  borders(queryOptions: QueryOptions): [GraphWorkbookRangeBorder]
  bordersById(id: ID): GraphWorkbookRangeBorder
  fill: GraphWorkbookRangeFill
  font: GraphWorkbookRangeFont
  protection: GraphWorkbookFormatProtection
  autofitColumns(bindparameter: GraphWorkbookRangeFormatInput): JSON
  autofitRows(bindparameter: GraphWorkbookRangeFormatInput): JSON
  id: String!
}

input GraphWorkbookRangeFormatInput {
  columnWidth: Float
  horizontalAlignment: String
  rowHeight: Float
  verticalAlignment: String
  wrapText: Boolean
  id: String!
}

type GraphWorkbookRangeSort implements GraphEntity {
  rest: JSON
  apply(
    bindparameter: GraphWorkbookRangeSortInput
    fields: [GraphWorkbookSortFieldInput]
    matchCase: Boolean!
    hasHeaders: Boolean!
    orientation: String!
    method: String!
  ): JSON
  id: String!
}

input GraphWorkbookRangeSortInput {
  rest: JSON
  id: String!
}

input GraphWorkbookSortFieldInput {
  ascending: Boolean!
  color: String
  dataOption: String!
  icon: GraphWorkbookIconInput
  key: Int!
  sortOn: String!
}

type GraphWorkbookRangeBorder implements GraphEntity {
  color: String
  sideIndex: String
  style: String
  weight: String
  count: Int
  itemAt: GraphWorkbookRangeBorder
  id: String!
}

type GraphWorkbookRangeFill implements GraphEntity {
  color: String
  clear(bindparameter: GraphWorkbookRangeFillInput): JSON
  id: String!
}

input GraphWorkbookRangeFillInput {
  color: String
  id: String!
}

type GraphWorkbookRangeFont implements GraphEntity {
  bold: Boolean
  color: String
  italic: Boolean
  name: String
  size: Float
  underline: String
  id: String!
}

type GraphWorkbookRangeView implements GraphEntity {
  cellAddresses: GraphJson
  columnCount: Int!
  formulas: GraphJson
  formulasLocal: GraphJson
  formulasR1C1: GraphJson
  index: Int!
  numberFormat: GraphJson
  rowCount: Int!
  text: GraphJson
  values: GraphJson
  valueTypes: GraphJson
  rows(queryOptions: QueryOptions): [GraphWorkbookRangeView]
  rowsById(id: ID): GraphWorkbookRangeView
  itemAt: GraphWorkbookRangeView
  range: GraphWorkbookRange
  id: String!
}

type GraphWorkbookTableColumn implements GraphEntity {
  index: Int!
  name: String
  values: GraphJson
  filter: GraphWorkbookFilter
  count: Int
  itemAt: GraphWorkbookTableColumn
  dataBodyRange: GraphWorkbookRange
  headerRowRange: GraphWorkbookRange
  range: GraphWorkbookRange
  totalRowRange: GraphWorkbookRange
  add(bindparameter: [GraphWorkbookTableColumnInput], index: Int, values: GraphJsonInput, name: String): JSON
  id: String!
}

input GraphWorkbookTableColumnInput {
  index: Int!
  name: String
  values: GraphJsonInput
  id: String!
}

type GraphWorkbookTableRow implements GraphEntity {
  index: Int!
  values: GraphJson
  count: Int
  itemAt: GraphWorkbookTableRow
  range: GraphWorkbookRange
  add(bindparameter: [GraphWorkbookTableRowInput], index: Int, values: GraphJsonInput): JSON
  id: String!
}

input GraphWorkbookTableRowInput {
  index: Int!
  values: GraphJsonInput
  id: String!
}

type GraphWorkbookTableSort implements GraphEntity {
  fields: [GraphWorkbookSortField]
  matchCase: Boolean!
  method: String!
  apply(
    bindparameter: GraphWorkbookTableSortInput
    fields: [GraphWorkbookSortFieldInput]
    matchCase: Boolean!
    method: String!
  ): JSON
  clear(bindparameter: GraphWorkbookTableSortInput): JSON
  reapply(bindparameter: GraphWorkbookTableSortInput): JSON
  id: String!
}

input GraphWorkbookTableSortInput {
  fields: [GraphWorkbookSortFieldInput]
  matchCase: Boolean!
  method: String!
  id: String!
}

type GraphWorkbookWorksheetProtection implements GraphEntity {
  options: GraphWorkbookWorksheetProtectionOptions
  protected: Boolean!
  protect(
    bindparameter: GraphWorkbookWorksheetProtectionInput
    options: GraphWorkbookWorksheetProtectionOptionsInput
  ): JSON
  unprotect(bindparameter: GraphWorkbookWorksheetProtectionInput): JSON
  id: String!
}

input GraphWorkbookWorksheetProtectionInput {
  options: GraphWorkbookWorksheetProtectionOptionsInput
  protected: Boolean!
  id: String!
}

input GraphWorkbookWorksheetProtectionOptionsInput {
  allowAutoFilter: Boolean!
  allowDeleteColumns: Boolean!
  allowDeleteRows: Boolean!
  allowFormatCells: Boolean!
  allowFormatColumns: Boolean!
  allowFormatRows: Boolean!
  allowInsertColumns: Boolean!
  allowInsertHyperlinks: Boolean!
  allowInsertRows: Boolean!
  allowPivotTables: Boolean!
  allowSort: Boolean!
}

type TGraphPlace implements GraphPlace & GraphEntity {
  address: GraphPhysicalAddress
  displayName: String!
  geoCoordinates: GraphOutlookGeoCoordinates
  phone: String
  id: String!
}

interface GraphPlace {
  address: GraphPhysicalAddress
  displayName: String!
  geoCoordinates: GraphOutlookGeoCoordinates
  phone: String
  id: String!
}

type GraphRoom implements GraphPlace {
  audioDeviceName: String
  bookingType: GraphBookingType
  building: String
  capacity: Int
  displayDeviceName: String
  emailAddress: String
  floorLabel: String
  floorNumber: Int
  isWheelChairAccessible: Boolean
  label: String
  nickname: String!
  tags: [String]
  videoDeviceName: String
  address: GraphPhysicalAddress
  displayName: String!
  geoCoordinates: GraphOutlookGeoCoordinates
  phone: String
  id: String!
}

enum GraphBookingType {
  unknown
  standard
  reserved
}

type GraphRoomList implements GraphPlace {
  emailAddress: String
  rooms(queryOptions: QueryOptions): [GraphRoom]
  roomsById(id: ID): GraphRoom
  address: GraphPhysicalAddress
  displayName: String!
  geoCoordinates: GraphOutlookGeoCoordinates
  phone: String
  id: String!
}

type TGraphAttachment implements GraphAttachment & GraphEntity {
  contentType: String
  isInline: Boolean!
  lastModifiedDateTime: DateTime
  name: String
  size: Int!
  createUploadSession(bindingParameter: [GraphAttachmentInput], AttachmentItem: GraphAttachmentItemInput!): JSON
  id: String!
}

type GraphCalendarPermission implements GraphEntity {
  allowedRoles: [GraphCalendarRoleType]
  emailAddress: GraphEmailAddress
  isInsideOrganization: Boolean
  isRemovable: Boolean
  role: GraphCalendarRoleType
  id: String!
}

type GraphMultiValueLegacyExtendedProperty implements GraphEntity {
  value: [String]
  id: String!
}

type GraphSingleValueLegacyExtendedProperty implements GraphEntity {
  value: String
  id: String!
}

type GraphPost implements GraphOutlookItem {
  body: GraphItemBody
  conversationId: String
  conversationThreadId: String
  from: GraphRecipient!
  hasAttachments: Boolean!
  newParticipants: [GraphRecipient]!
  receivedDateTime: DateTime!
  sender: GraphRecipient
  attachments(queryOptions: QueryOptions): [GraphAttachment]
  attachmentsById(id: ID): GraphAttachment
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  inReplyTo: GraphPost
  multiValueExtendedProperties(queryOptions: QueryOptions): [GraphMultiValueLegacyExtendedProperty]
  multiValueExtendedPropertiesById(id: ID): GraphMultiValueLegacyExtendedProperty
  singleValueExtendedProperties(queryOptions: QueryOptions): [GraphSingleValueLegacyExtendedProperty]
  singleValueExtendedPropertiesById(id: ID): GraphSingleValueLegacyExtendedProperty
  rest: JSON
  forward(bindingParameter: GraphPostInput, Comment: String, ToRecipients: [GraphRecipientInput]!): JSON
  reply(bindingParameter: GraphPostInput, Post: GraphPostInput!): JSON
  categories: [String]
  changeKey: String
  createdDateTime: DateTime
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphFileAttachment implements GraphAttachment {
  contentBytes: String
  contentId: String
  contentLocation: String
  contentType: String
  isInline: Boolean!
  lastModifiedDateTime: DateTime
  name: String
  size: Int!
  createUploadSession(bindingParameter: [GraphAttachmentInput], AttachmentItem: GraphAttachmentItemInput!): JSON
  id: String!
}

type GraphInferenceClassificationOverride implements GraphEntity {
  classifyAs: GraphInferenceClassificationType
  senderEmailAddress: GraphEmailAddress
  id: String!
}

type GraphItemAttachment implements GraphAttachment {
  item: GraphOutlookItem
  contentType: String
  isInline: Boolean!
  lastModifiedDateTime: DateTime
  name: String
  size: Int!
  createUploadSession(bindingParameter: [GraphAttachmentInput], AttachmentItem: GraphAttachmentItemInput!): JSON
  id: String!
}

type GraphMessageRule implements GraphEntity {
  actions: GraphMessageRuleActions
  conditions: GraphMessageRulePredicates
  displayName: String
  exceptions: GraphMessageRulePredicates
  hasError: Boolean
  isEnabled: Boolean
  isReadOnly: Boolean
  sequence: Int
  id: String!
}

type GraphOpenTypeExtension implements GraphExtension {
  extensionName: String!
  rest: JSON
  id: String!
}

type GraphOutlookCategory implements GraphEntity {
  color: GraphCategoryColor
  displayName: String
  id: String!
}

enum GraphCategoryColor {
  none
  preset0
  preset1
  preset2
  preset3
  preset4
  preset5
  preset6
  preset7
  preset8
  preset9
  preset10
  preset11
  preset12
  preset13
  preset14
  preset15
  preset16
  preset17
  preset18
  preset19
  preset20
  preset21
  preset22
  preset23
  preset24
}

type GraphReferenceAttachment implements GraphAttachment {
  rest: JSON
  contentType: String
  isInline: Boolean!
  lastModifiedDateTime: DateTime
  name: String
  size: Int!
  createUploadSession(bindingParameter: [GraphAttachmentInput], AttachmentItem: GraphAttachmentItemInput!): JSON
  id: String!
}

type GraphColumnLink implements GraphEntity {
  name: String
  id: String!
}

type GraphFieldValueSet implements GraphEntity {
  rest: JSON
  id: String!
}

type GraphItemActivity implements GraphEntity {
  access: GraphAccessAction
  activityDateTime: DateTime
  actor: GraphIdentitySet
  driveItem: GraphDriveItem
  rest: JSON
  id: String!
}

type GraphItemActivityStat implements GraphEntity {
  access: GraphItemActionStat
  create: GraphItemActionStat
  delete: GraphItemActionStat
  edit: GraphItemActionStat
  endDateTime: DateTime
  incompleteData: GraphIncompleteData
  isTrending: Boolean
  move: GraphItemActionStat
  startDateTime: DateTime
  activities(queryOptions: QueryOptions): [GraphItemActivity]
  activitiesById(id: ID): GraphItemActivity
  rest: JSON
  id: String!
}

type GraphListItemVersion implements GraphBaseItemVersion {
  fields: GraphFieldValueSet
  restoreVersion(bindingParameter: GraphListItemVersionInput): JSON
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  publication: GraphPublicationFacet
  id: String!
}

input GraphListItemVersionInput {
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime
  publication: GraphPublicationFacetInput
  id: String!
}

type GraphSharedDriveItem implements GraphBaseItem {
  owner: GraphIdentitySet
  driveItem: GraphDriveItem
  items(queryOptions: QueryOptions): [GraphDriveItem]
  itemsById(id: ID): GraphDriveItem
  list: GraphList
  listItem: GraphListItem
  permission: GraphPermission
  root: GraphDriveItem
  site: GraphSite
  createdBy: GraphIdentitySet
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReference
  webUrl: String
  createdByUser: GraphUser
  lastModifiedByUser: GraphUser
  id: String!
}

type GraphSchemaExtension implements GraphEntity {
  description: String
  owner: String!
  properties: [GraphExtensionSchemaProperty]!
  status: String!
  targetTypes: [String]!
  id: String!
}

type GraphCloudCommunications implements GraphEntity {
  calls(queryOptions: QueryOptions): [GraphCall]
  callsById(id: ID): GraphCall
  callRecords(queryOptions: QueryOptions): [MicrosoftGraphCallRecordsCallRecord]
  callRecordsById(id: ID): MicrosoftGraphCallRecordsCallRecord
  onlineMeetings(queryOptions: QueryOptions): [GraphOnlineMeeting]
  onlineMeetingsById(id: ID): GraphOnlineMeeting
  presences(queryOptions: QueryOptions): [GraphPresence]
  presencesById(id: ID): GraphPresence
  getPresencesByUserId(bindingParameter: GraphCloudCommunicationsInput, ids: [String]!): JSON
  id: String!
}

input GraphCloudCommunicationsInput {
  id: String!
}

type GraphCall implements GraphEntity {
  callbackUri: String!
  callChainId: String
  callOptions: GraphCallOptions
  callRoutes: [GraphCallRoute]
  chatInfo: GraphChatInfo
  direction: GraphCallDirection
  incomingContext: GraphIncomingContext
  mediaConfig: GraphMediaConfig
  mediaState: GraphCallMediaState
  meetingInfo: GraphMeetingInfo
  myParticipantId: String
  requestedModalities: [GraphModality]
  resultInfo: GraphResultInfo
  source: GraphParticipantInfo
  state: GraphCallState
  subject: String
  targets: [GraphInvitationParticipantInfo]
  tenantId: String
  toneInfo: GraphToneInfo
  transcription: GraphCallTranscriptionInfo
  operations(queryOptions: QueryOptions): [GraphCommsOperation]
  operationsById(id: ID): GraphCommsOperation
  participants(queryOptions: QueryOptions): [GraphParticipant]
  participantsById(id: ID): GraphParticipant
  rest: JSON
  redirect(
    bindingParameter: GraphCallInput
    targets: [GraphInvitationParticipantInfoInput]!
    timeout: Int
    callbackUri: String
  ): JSON
  answer(
    bindingParameter: GraphCallInput
    callbackUri: String!
    mediaConfig: GraphMediaConfigInput!
    acceptedModalities: [GraphModality]
  ): JSON
  cancelMediaProcessing(bindingParameter: GraphCallInput, clientContext: String): JSON
  changeScreenSharingRole(bindingParameter: GraphCallInput, role: GraphScreenSharingRole!): JSON
  keepAlive(bindingParameter: GraphCallInput): JSON
  mute(bindingParameter: GraphCallInput, clientContext: String): JSON
  playPrompt(bindingParameter: GraphCallInput, prompts: [GraphPromptInput]!, clientContext: String): JSON
  recordResponse(
    bindingParameter: GraphCallInput
    prompts: [GraphPromptInput]
    bargeInAllowed: Boolean
    initialSilenceTimeoutInSeconds: Int
    maxSilenceTimeoutInSeconds: Int
    maxRecordDurationInSeconds: Int
    playBeep: Boolean
    stopTones: [String]
    clientContext: String
  ): JSON
  reject(bindingParameter: GraphCallInput, reason: GraphRejectReason, callbackUri: String): JSON
  subscribeToTone(bindingParameter: GraphCallInput, clientContext: String): JSON
  transfer(bindingParameter: GraphCallInput, transferTarget: GraphInvitationParticipantInfoInput!): JSON
  unmute(bindingParameter: GraphCallInput, clientContext: String): JSON
  updateRecordingStatus(bindingParameter: GraphCallInput, status: GraphRecordingStatus!, clientContext: String): JSON
  logTeleconferenceDeviceQuality(
    bindingParameter: [GraphCallInput]
    quality: GraphTeleconferenceDeviceQualityInput!
  ): JSON
  id: String!
}

interface GraphCallOptions {
  rest: JSON
}

enum GraphCallDirection {
  incoming
  outgoing
}

interface GraphMediaConfig {
  rest: JSON
}

interface GraphMeetingInfo {
  rest: JSON
}

enum GraphModality {
  audio
  video
  videoBasedScreenSharing
  data
  unknownFutureValue
}

enum GraphCallState {
  incoming
  establishing
  established
  hold
  transferring
  transferAccepted
  redirecting
  terminating
  terminated
  unknownFutureValue
}

input GraphCallInput {
  callbackUri: String!
  callChainId: String
  callOptions: GraphCallOptionsInput
  callRoutes: [GraphCallRouteInput]
  chatInfo: GraphChatInfoInput
  direction: GraphCallDirection
  incomingContext: GraphIncomingContextInput
  mediaConfig: GraphMediaConfigInput
  mediaState: GraphCallMediaStateInput
  meetingInfo: GraphMeetingInfoInput
  myParticipantId: String
  requestedModalities: [GraphModality]
  resultInfo: GraphResultInfoInput
  source: GraphParticipantInfoInput
  state: GraphCallState
  subject: String
  targets: [GraphInvitationParticipantInfoInput]
  tenantId: String
  toneInfo: GraphToneInfoInput
  transcription: GraphCallTranscriptionInfoInput
  rest: JSON
  id: String!
}

input GraphCallOptionsInput {
  rest: JSON
}

input GraphCallRouteInput {
  final: GraphIdentitySetInput!
  original: GraphIdentitySetInput!
  routingType: GraphRoutingType!
}

enum GraphRoutingType {
  forwarded
  lookup
  selfFork
  unknownFutureValue
}

input GraphIncomingContextInput {
  observedParticipantId: String
  onBehalfOf: GraphIdentitySetInput
  sourceParticipantId: String
  transferor: GraphIdentitySetInput
}

input GraphMediaConfigInput {
  rest: JSON
}

input GraphCallMediaStateInput {
  audio: GraphMediaState
}

enum GraphMediaState {
  active
  inactive
  unknownFutureValue
}

input GraphMeetingInfoInput {
  rest: JSON
}

input GraphResultInfoInput {
  code: Int!
  message: String
  subcode: Int!
}

input GraphParticipantInfoInput {
  countryCode: String
  endpointType: GraphEndpointType
  identity: GraphIdentitySetInput!
  languageId: String
  region: String
}

enum GraphEndpointType {
  default
  voicemail
  skypeForBusiness
  skypeForBusinessVoipPhone
  unknownFutureValue
}

input GraphInvitationParticipantInfoInput {
  identity: GraphIdentitySetInput!
  replacesCallId: String
  rest: JSON
}

input GraphToneInfoInput {
  sequenceId: BigInt!
  tone: GraphTone!
}

enum GraphTone {
  tone0
  tone1
  tone2
  tone3
  tone4
  tone5
  tone6
  tone7
  tone8
  tone9
  star
  pound
  a
  b
  c
  d
  flash
}

input GraphCallTranscriptionInfoInput {
  lastModifiedDateTime: DateTime
  state: GraphCallTranscriptionState!
}

enum GraphCallTranscriptionState {
  notStarted
  active
  inactive
  unknownFutureValue
}

enum GraphScreenSharingRole {
  viewer
  sharer
}

input GraphPromptInput {
  rest: JSON
}

enum GraphRejectReason {
  none
  busy
  forbidden
  unknownFutureValue
}

enum GraphRecordingStatus {
  unknown
  notRecording
  recording
  failed
  unknownFutureValue
}

input GraphTeleconferenceDeviceQualityInput {
  callChainId: GUID!
  cloudServiceDeploymentEnvironment: String
  cloudServiceDeploymentId: String
  cloudServiceInstanceName: String
  cloudServiceName: String
  deviceDescription: String!
  deviceName: String!
  mediaLegId: GUID!
  mediaQualityList: [GraphTeleconferenceDeviceMediaQualityInput]!
  participantId: GUID!
  rest: JSON
}

input GraphTeleconferenceDeviceMediaQualityInput {
  averageInboundJitter: ISO8601Duration
  averageInboundPacketLossRateInPercentage: Float
  averageInboundRoundTripDelay: ISO8601Duration
  averageOutboundJitter: ISO8601Duration
  averageOutboundPacketLossRateInPercentage: Float
  averageOutboundRoundTripDelay: ISO8601Duration
  channelIndex: Int!
  inboundPackets: BigInt
  localIPAddress: String
  localPort: Int
  maximumInboundJitter: ISO8601Duration
  maximumInboundPacketLossRateInPercentage: Float
  maximumInboundRoundTripDelay: ISO8601Duration
  maximumOutboundJitter: ISO8601Duration
  maximumOutboundPacketLossRateInPercentage: Float
  maximumOutboundRoundTripDelay: ISO8601Duration
  mediaDuration: ISO8601Duration
  networkLinkSpeedInBytes: BigInt
  outboundPackets: BigInt
  remoteIPAddress: String
  remotePort: Int
  rest: JSON
}

type GraphAccessReviewInstance implements GraphEntity {
  endDateTime: DateTime
  scope: GraphAccessReviewScope
  startDateTime: DateTime
  status: String
  decisions(queryOptions: QueryOptions): [GraphAccessReviewInstanceDecisionItem]
  decisionsById(id: ID): GraphAccessReviewInstanceDecisionItem
  filterByCurrentUser: [GraphAccessReviewInstance]
  acceptRecommendations(bindingParameter: GraphAccessReviewInstanceInput): JSON
  applyDecisions(bindingParameter: GraphAccessReviewInstanceInput): JSON
  batchRecordDecisions(
    bindingParameter: GraphAccessReviewInstanceInput
    decision: String
    justification: String
    principalId: String
    resourceId: String
  ): JSON
  resetDecisions(bindingParameter: GraphAccessReviewInstanceInput): JSON
  sendReminder(bindingParameter: GraphAccessReviewInstanceInput): JSON
  stop(bindingParameter: GraphAccessReviewInstanceInput): JSON
  id: String!
}

input GraphAccessReviewInstanceInput {
  endDateTime: DateTime
  scope: GraphAccessReviewScopeInput
  startDateTime: DateTime
  status: String
  id: String!
}

input GraphAccessReviewScopeInput {
  rest: JSON
}

type GraphAccessReviewInstanceDecisionItem implements GraphEntity {
  accessReviewId: String!
  appliedBy: GraphUserIdentity
  appliedDateTime: DateTime
  applyResult: String
  decision: String
  justification: String
  principal: GraphIdentity
  principalLink: String
  recommendation: String
  resource: GraphAccessReviewInstanceDecisionItemResource
  resourceLink: String
  reviewedBy: GraphUserIdentity
  reviewedDateTime: DateTime
  filterByCurrentUser: [GraphAccessReviewInstanceDecisionItem]
  id: String!
}

type GraphAccessReviewScheduleDefinition implements GraphEntity {
  createdBy: GraphUserIdentity
  createdDateTime: DateTime
  descriptionForAdmins: String
  descriptionForReviewers: String
  displayName: String
  fallbackReviewers: [GraphAccessReviewReviewerScope]
  instanceEnumerationScope: GraphAccessReviewScope
  lastModifiedDateTime: DateTime
  reviewers: [GraphAccessReviewReviewerScope]
  scope: GraphAccessReviewScope
  settings: GraphAccessReviewScheduleSettings
  status: String
  instances(queryOptions: QueryOptions): [GraphAccessReviewInstance]
  instancesById(id: ID): GraphAccessReviewInstance
  filterByCurrentUser: [GraphAccessReviewScheduleDefinition]
  stop(bindingParameter: GraphAccessReviewScheduleDefinitionInput): JSON
  id: String!
}

input GraphAccessReviewScheduleDefinitionInput {
  createdBy: GraphUserIdentityInput
  createdDateTime: DateTime
  descriptionForAdmins: String
  descriptionForReviewers: String
  displayName: String
  fallbackReviewers: [GraphAccessReviewReviewerScopeInput]
  instanceEnumerationScope: GraphAccessReviewScopeInput
  lastModifiedDateTime: DateTime
  reviewers: [GraphAccessReviewReviewerScopeInput]
  scope: GraphAccessReviewScopeInput
  settings: GraphAccessReviewScheduleSettingsInput
  status: String
  id: String!
}

input GraphUserIdentityInput {
  ipAddress: String
  userPrincipalName: String
  rest: JSON
  displayName: String
  id: String
}

input GraphAccessReviewReviewerScopeInput {
  query: String
  queryRoot: String
  queryType: String
}

input GraphAccessReviewScheduleSettingsInput {
  applyActions: [GraphAccessReviewApplyActionInput]
  autoApplyDecisionsEnabled: Boolean!
  defaultDecision: String
  defaultDecisionEnabled: Boolean!
  instanceDurationInDays: Int!
  justificationRequiredOnApproval: Boolean!
  mailNotificationsEnabled: Boolean!
  recommendationsEnabled: Boolean!
  recurrence: GraphPatternedRecurrenceInput
  reminderNotificationsEnabled: Boolean!
}

input GraphAccessReviewApplyActionInput {
  rest: JSON
}

type GraphAccessReviewSet implements GraphEntity {
  definitions(queryOptions: QueryOptions): [GraphAccessReviewScheduleDefinition]
  definitionsById(id: ID): GraphAccessReviewScheduleDefinition
  id: String!
}

type GraphAppConsentApprovalRoute implements GraphEntity {
  appConsentRequests(queryOptions: QueryOptions): [GraphAppConsentRequest]
  appConsentRequestsById(id: ID): GraphAppConsentRequest
  id: String!
}

type GraphAppConsentRequest implements GraphEntity {
  appDisplayName: String
  appId: String!
  pendingScopes: [GraphAppConsentRequestScope]
  userConsentRequests(queryOptions: QueryOptions): [GraphUserConsentRequest]
  userConsentRequestsById(id: ID): GraphUserConsentRequest
  filterByCurrentUser: [GraphAppConsentRequest]
  id: String!
}

type GraphRequest implements GraphEntity {
  approvalId: String
  completedDateTime: DateTime
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  customData: String
  status: String!
  id: String!
}

type GraphUserConsentRequest {
  reason: String
  approval: GraphApproval
  filterByCurrentUser: [GraphUserConsentRequest]
  approvalId: String
  completedDateTime: DateTime
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  customData: String
  status: String!
  id: String!
}

type GraphApproval implements GraphEntity {
  stages(queryOptions: QueryOptions): [GraphApprovalStage]
  stagesById(id: ID): GraphApprovalStage
  id: String!
}

type GraphApprovalStage implements GraphEntity {
  assignedToMe: Boolean
  displayName: String
  justification: String
  reviewedBy: GraphIdentity
  reviewedDateTime: DateTime
  reviewResult: String
  status: String
  id: String!
}

type GraphIdentityGovernance {
  accessReviews: GraphAccessReviewSet
  appConsent: GraphAppConsentApprovalRoute
  termsOfUse: GraphTermsOfUseContainer
}

type GraphTermsOfUseContainer implements GraphEntity {
  agreementAcceptances(queryOptions: QueryOptions): [GraphAgreementAcceptance]
  agreementAcceptancesById(id: ID): GraphAgreementAcceptance
  agreements(queryOptions: QueryOptions): [GraphAgreement]
  agreementsById(id: ID): GraphAgreement
  id: String!
}

type GraphAgreement implements GraphEntity {
  displayName: String
  isPerDeviceAcceptanceRequired: Boolean
  isViewingBeforeAcceptanceRequired: Boolean
  termsExpiration: GraphTermsExpiration
  userReacceptRequiredFrequency: ISO8601Duration
  acceptances(queryOptions: QueryOptions): [GraphAgreementAcceptance]
  acceptancesById(id: ID): GraphAgreementAcceptance
  file: GraphAgreementFile
  files(queryOptions: QueryOptions): [GraphAgreementFileLocalization]
  filesById(id: ID): GraphAgreementFileLocalization
  id: String!
}

type GraphAgreementFileProperties implements GraphEntity {
  createdDateTime: DateTime
  displayName: String
  fileData: GraphAgreementFileData
  fileName: String
  isDefault: Boolean
  isMajorVersion: Boolean
  language: String
  id: String!
}

type GraphAgreementFile {
  localizations(queryOptions: QueryOptions): [GraphAgreementFileLocalization]
  localizationsById(id: ID): GraphAgreementFileLocalization
  createdDateTime: DateTime
  displayName: String
  fileData: GraphAgreementFileData
  fileName: String
  isDefault: Boolean
  isMajorVersion: Boolean
  language: String
  id: String!
}

type GraphAgreementFileLocalization {
  versions(queryOptions: QueryOptions): [GraphAgreementFileVersion]
  versionsById(id: ID): GraphAgreementFileVersion
  createdDateTime: DateTime
  displayName: String
  fileData: GraphAgreementFileData
  fileName: String
  isDefault: Boolean
  isMajorVersion: Boolean
  language: String
  id: String!
}

type GraphAgreementFileVersion {
  rest: JSON
  createdDateTime: DateTime
  displayName: String
  fileData: GraphAgreementFileData
  fileName: String
  isDefault: Boolean
  isMajorVersion: Boolean
  language: String
  id: String!
}

type GraphNamedLocation implements GraphEntity {
  createdDateTime: DateTime
  displayName: String!
  modifiedDateTime: DateTime
  id: String!
}

interface GraphIpRange {
  rest: JSON
}

type TGraphMobileApp implements GraphMobileApp & GraphEntity {
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

interface GraphMobileApp {
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

enum GraphMobileAppPublishingState {
  notPublished
  processing
  published
}

input GraphMobileAppInput {
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContentInput
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  id: String!
}

input GraphMimeContentInput {
  type: String
  value: String
}

input GraphMobileAppAssignmentInput {
  intent: GraphInstallIntent!
  settings: GraphMobileAppAssignmentSettingsInput
  target: GraphDeviceAndAppManagementAssignmentTargetInput
  id: String!
}

enum GraphInstallIntent {
  available
  required
  uninstall
  availableWithoutEnrollment
}

input GraphMobileAppAssignmentSettingsInput {
  rest: JSON
}

input GraphDeviceAndAppManagementAssignmentTargetInput {
  rest: JSON
}

type TGraphMobileLobApp implements GraphMobileLobApp & GraphMobileApp {
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

interface GraphMobileLobApp {
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphAndroidLobApp implements GraphMobileLobApp {
  minimumSupportedOperatingSystem: GraphAndroidMinimumOperatingSystem
  packageId: String
  versionCode: String
  versionName: String
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphAndroidStoreApp implements GraphMobileApp {
  appStoreUrl: String
  minimumSupportedOperatingSystem: GraphAndroidMinimumOperatingSystem
  packageId: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphDeviceAppManagement implements GraphEntity {
  isEnabledForMicrosoftStoreForBusiness: Boolean!
  microsoftStoreForBusinessLanguage: String
  microsoftStoreForBusinessLastCompletedApplicationSyncTime: DateTime!
  microsoftStoreForBusinessLastSuccessfulSyncDateTime: DateTime!
  managedEBooks(queryOptions: QueryOptions): [GraphManagedEBook]
  managedEBooksById(id: ID): GraphManagedEBook
  mobileAppCategories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  mobileAppCategoriesById(id: ID): GraphMobileAppCategory
  mobileAppConfigurations(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfiguration]
  mobileAppConfigurationsById(id: ID): GraphManagedDeviceMobileAppConfiguration
  mobileApps(queryOptions: QueryOptions): [GraphMobileApp]
  mobileAppsById(id: ID): GraphMobileApp
  vppTokens(queryOptions: QueryOptions): [GraphVppToken]
  vppTokensById(id: ID): GraphVppToken
  androidManagedAppProtections(queryOptions: QueryOptions): [GraphAndroidManagedAppProtection]
  androidManagedAppProtectionsById(id: ID): GraphAndroidManagedAppProtection
  defaultManagedAppProtections(queryOptions: QueryOptions): [GraphDefaultManagedAppProtection]
  defaultManagedAppProtectionsById(id: ID): GraphDefaultManagedAppProtection
  iosManagedAppProtections(queryOptions: QueryOptions): [GraphIosManagedAppProtection]
  iosManagedAppProtectionsById(id: ID): GraphIosManagedAppProtection
  managedAppPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  managedAppPoliciesById(id: ID): GraphManagedAppPolicy
  managedAppRegistrations(queryOptions: QueryOptions): [GraphManagedAppRegistration]
  managedAppRegistrationsById(id: ID): GraphManagedAppRegistration
  managedAppStatuses(queryOptions: QueryOptions): [GraphManagedAppStatus]
  managedAppStatusesById(id: ID): GraphManagedAppStatus
  mdmWindowsInformationProtectionPolicies(queryOptions: QueryOptions): [GraphMdmWindowsInformationProtectionPolicy]
  mdmWindowsInformationProtectionPoliciesById(id: ID): GraphMdmWindowsInformationProtectionPolicy
  targetedManagedAppConfigurations(queryOptions: QueryOptions): [GraphTargetedManagedAppConfiguration]
  targetedManagedAppConfigurationsById(id: ID): GraphTargetedManagedAppConfiguration
  windowsInformationProtectionPolicies(queryOptions: QueryOptions): [GraphWindowsInformationProtectionPolicy]
  windowsInformationProtectionPoliciesById(id: ID): GraphWindowsInformationProtectionPolicy
  syncMicrosoftStoreForBusinessApps(bindingParameter: GraphDeviceAppManagementInput): JSON
  id: String!
}

interface GraphManagedEBook {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  informationUrl: String
  largeCover: GraphMimeContent
  lastModifiedDateTime: DateTime!
  privacyInformationUrl: String
  publishedDateTime: DateTime!
  publisher: String
  assignments(queryOptions: QueryOptions): [GraphManagedEBookAssignment]
  assignmentsById(id: ID): GraphManagedEBookAssignment
  deviceStates(queryOptions: QueryOptions): [GraphDeviceInstallState]
  deviceStatesById(id: ID): GraphDeviceInstallState
  installSummary: GraphEBookInstallSummary
  userStateSummary(queryOptions: QueryOptions): [GraphUserInstallStateSummary]
  userStateSummaryById(id: ID): GraphUserInstallStateSummary
  assign(bindingParameter: GraphManagedEBookInput, managedEBookAssignments: [GraphManagedEBookAssignmentInput]): JSON
  id: String!
}

input GraphManagedEBookInput {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  informationUrl: String
  largeCover: GraphMimeContentInput
  lastModifiedDateTime: DateTime!
  privacyInformationUrl: String
  publishedDateTime: DateTime!
  publisher: String
  id: String!
}

input GraphManagedEBookAssignmentInput {
  installIntent: GraphInstallIntent!
  target: GraphDeviceAndAppManagementAssignmentTargetInput
  id: String!
}

interface GraphManagedDeviceMobileAppConfiguration {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  targetedMobileApps: [String]
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationAssignment]
  assignmentsById(id: ID): GraphManagedDeviceMobileAppConfigurationAssignment
  deviceStatuses(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphManagedDeviceMobileAppConfigurationDeviceStatus
  deviceStatusSummary: GraphManagedDeviceMobileAppConfigurationDeviceSummary
  userStatuses(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationUserStatus]
  userStatusesById(id: ID): GraphManagedDeviceMobileAppConfigurationUserStatus
  userStatusSummary: GraphManagedDeviceMobileAppConfigurationUserSummary
  assign(
    bindingParameter: GraphManagedDeviceMobileAppConfigurationInput
    assignments: [GraphManagedDeviceMobileAppConfigurationAssignmentInput]
  ): JSON
  id: String!
}

input GraphManagedDeviceMobileAppConfigurationInput {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  targetedMobileApps: [String]
  version: Int!
  id: String!
}

input GraphManagedDeviceMobileAppConfigurationAssignmentInput {
  target: GraphDeviceAndAppManagementAssignmentTargetInput
  id: String!
}

interface GraphManagedAppStatus {
  displayName: String
  version: String
  id: String!
}

input GraphDeviceAppManagementInput {
  isEnabledForMicrosoftStoreForBusiness: Boolean!
  microsoftStoreForBusinessLanguage: String
  microsoftStoreForBusinessLastCompletedApplicationSyncTime: DateTime!
  microsoftStoreForBusinessLastSuccessfulSyncDateTime: DateTime!
  id: String!
}

type TGraphManagedEBook implements GraphManagedEBook & GraphEntity {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  informationUrl: String
  largeCover: GraphMimeContent
  lastModifiedDateTime: DateTime!
  privacyInformationUrl: String
  publishedDateTime: DateTime!
  publisher: String
  assignments(queryOptions: QueryOptions): [GraphManagedEBookAssignment]
  assignmentsById(id: ID): GraphManagedEBookAssignment
  deviceStates(queryOptions: QueryOptions): [GraphDeviceInstallState]
  deviceStatesById(id: ID): GraphDeviceInstallState
  installSummary: GraphEBookInstallSummary
  userStateSummary(queryOptions: QueryOptions): [GraphUserInstallStateSummary]
  userStateSummaryById(id: ID): GraphUserInstallStateSummary
  assign(bindingParameter: GraphManagedEBookInput, managedEBookAssignments: [GraphManagedEBookAssignmentInput]): JSON
  id: String!
}

type GraphMobileAppCategory implements GraphEntity {
  displayName: String
  lastModifiedDateTime: DateTime!
  id: String!
}

type TGraphManagedDeviceMobileAppConfiguration implements GraphManagedDeviceMobileAppConfiguration & GraphEntity {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  targetedMobileApps: [String]
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationAssignment]
  assignmentsById(id: ID): GraphManagedDeviceMobileAppConfigurationAssignment
  deviceStatuses(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphManagedDeviceMobileAppConfigurationDeviceStatus
  deviceStatusSummary: GraphManagedDeviceMobileAppConfigurationDeviceSummary
  userStatuses(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationUserStatus]
  userStatusesById(id: ID): GraphManagedDeviceMobileAppConfigurationUserStatus
  userStatusSummary: GraphManagedDeviceMobileAppConfigurationUserSummary
  assign(
    bindingParameter: GraphManagedDeviceMobileAppConfigurationInput
    assignments: [GraphManagedDeviceMobileAppConfigurationAssignmentInput]
  ): JSON
  id: String!
}

type GraphVppToken implements GraphEntity {
  appleId: String
  automaticallyUpdateApps: Boolean!
  countryOrRegion: String
  expirationDateTime: DateTime!
  lastModifiedDateTime: DateTime!
  lastSyncDateTime: DateTime!
  lastSyncStatus: GraphVppTokenSyncStatus!
  organizationName: String
  state: GraphVppTokenState!
  token: String
  vppTokenAccountType: GraphVppTokenAccountType!
  syncLicenses(bindingParameter: GraphVppTokenInput): JSON
  id: String!
}

enum GraphVppTokenSyncStatus {
  none
  inProgress
  completed
  failed
}

enum GraphVppTokenState {
  unknown
  valid
  expired
  invalid
  assignedToExternalMDM
}

enum GraphVppTokenAccountType {
  business
  education
}

input GraphVppTokenInput {
  appleId: String
  automaticallyUpdateApps: Boolean!
  countryOrRegion: String
  expirationDateTime: DateTime!
  lastModifiedDateTime: DateTime!
  lastSyncDateTime: DateTime!
  lastSyncStatus: GraphVppTokenSyncStatus!
  organizationName: String
  state: GraphVppTokenState!
  token: String
  vppTokenAccountType: GraphVppTokenAccountType!
  id: String!
}

type TGraphManagedAppPolicy implements GraphManagedAppPolicy & GraphEntity {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

type TGraphManagedAppProtection implements GraphManagedAppProtection & GraphManagedAppPolicy {
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

interface GraphManagedAppProtection {
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

enum GraphManagedAppDataStorageLocation {
  oneDriveForBusiness
  sharePoint
  localStorage
}

enum GraphManagedAppDataTransferLevel {
  allApps
  managedApps
  none
}

enum GraphManagedAppClipboardSharingLevel {
  allApps
  managedAppsWithPasteIn
  managedApps
  blocked
}

enum GraphManagedBrowserType {
  notConfigured
  microsoftEdge
}

enum GraphManagedAppPinCharacterSet {
  numeric
  alphanumericAndSymbol
}

type TGraphTargetedManagedAppProtection implements GraphTargetedManagedAppProtection & GraphManagedAppProtection {
  isAssigned: Boolean!
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  assign(
    bindingParameter: GraphTargetedManagedAppProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

interface GraphTargetedManagedAppProtection {
  isAssigned: Boolean!
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  assign(
    bindingParameter: GraphTargetedManagedAppProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

input GraphTargetedManagedAppProtectionInput {
  isAssigned: Boolean!
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

input GraphTargetedManagedAppPolicyAssignmentInput {
  target: GraphDeviceAndAppManagementAssignmentTargetInput
  id: String!
}

type GraphAndroidManagedAppProtection implements GraphTargetedManagedAppProtection {
  customBrowserDisplayName: String
  customBrowserPackageId: String
  deployedAppCount: Int!
  disableAppEncryptionIfDeviceEncryptionIsEnabled: Boolean!
  encryptAppData: Boolean!
  minimumRequiredPatchVersion: String
  minimumWarningPatchVersion: String
  screenCaptureBlocked: Boolean!
  apps(queryOptions: QueryOptions): [GraphManagedMobileApp]
  appsById(id: ID): GraphManagedMobileApp
  deploymentSummary: GraphManagedAppPolicyDeploymentSummary
  isAssigned: Boolean!
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  assign(
    bindingParameter: GraphTargetedManagedAppProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

type GraphDefaultManagedAppProtection implements GraphManagedAppProtection {
  appDataEncryptionType: GraphManagedAppDataEncryptionType!
  customSettings: [GraphKeyValuePair]!
  deployedAppCount: Int!
  disableAppEncryptionIfDeviceEncryptionIsEnabled: Boolean!
  encryptAppData: Boolean!
  faceIdBlocked: Boolean!
  minimumRequiredPatchVersion: String
  minimumRequiredSdkVersion: String
  minimumWarningPatchVersion: String
  screenCaptureBlocked: Boolean!
  apps(queryOptions: QueryOptions): [GraphManagedMobileApp]
  appsById(id: ID): GraphManagedMobileApp
  deploymentSummary: GraphManagedAppPolicyDeploymentSummary
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

enum GraphManagedAppDataEncryptionType {
  useDeviceSettings
  afterDeviceRestart
  whenDeviceLockedExceptOpenFiles
  whenDeviceLocked
}

type GraphIosManagedAppProtection implements GraphTargetedManagedAppProtection {
  appDataEncryptionType: GraphManagedAppDataEncryptionType!
  customBrowserProtocol: String
  deployedAppCount: Int!
  faceIdBlocked: Boolean!
  minimumRequiredSdkVersion: String
  apps(queryOptions: QueryOptions): [GraphManagedMobileApp]
  appsById(id: ID): GraphManagedMobileApp
  deploymentSummary: GraphManagedAppPolicyDeploymentSummary
  isAssigned: Boolean!
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  assign(
    bindingParameter: GraphTargetedManagedAppProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  allowedDataStorageLocations: [GraphManagedAppDataStorageLocation]!
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel!
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel!
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel!
  contactSyncBlocked: Boolean!
  dataBackupBlocked: Boolean!
  deviceComplianceRequired: Boolean!
  disableAppPinIfDevicePinIsSet: Boolean!
  fingerprintBlocked: Boolean!
  managedBrowser: GraphManagedBrowserType!
  managedBrowserToOpenLinksRequired: Boolean!
  maximumPinRetries: Int!
  minimumPinLength: Int!
  minimumRequiredAppVersion: String
  minimumRequiredOsVersion: String
  minimumWarningAppVersion: String
  minimumWarningOsVersion: String
  organizationalCredentialsRequired: Boolean!
  periodBeforePinReset: ISO8601Duration!
  periodOfflineBeforeAccessCheck: ISO8601Duration!
  periodOfflineBeforeWipeIsEnforced: ISO8601Duration!
  periodOnlineBeforeAccessCheck: ISO8601Duration!
  pinCharacterSet: GraphManagedAppPinCharacterSet!
  pinRequired: Boolean!
  printBlocked: Boolean!
  saveAsBlocked: Boolean!
  simplePinBlocked: Boolean!
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

type TGraphManagedAppStatus implements GraphManagedAppStatus & GraphEntity {
  displayName: String
  version: String
  id: String!
}

type TGraphWindowsInformationProtection implements GraphWindowsInformationProtection & GraphManagedAppPolicy {
  azureRightsManagementServicesAllowed: Boolean!
  dataRecoveryCertificate: GraphWindowsInformationProtectionDataRecoveryCertificate
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel!
  enterpriseDomain: String
  enterpriseInternalProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseIPRanges: [GraphWindowsInformationProtectionIpRangeCollection]
  enterpriseIPRangesAreAuthoritative: Boolean!
  enterpriseNetworkDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProtectedDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxiedDomains: [GraphWindowsInformationProtectionProxiedDomainCollection]
  enterpriseProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxyServersAreAuthoritative: Boolean!
  exemptApps: [GraphWindowsInformationProtectionApp]
  iconsVisible: Boolean!
  indexingEncryptedStoresOrItemsBlocked: Boolean!
  isAssigned: Boolean!
  neutralDomainResources: [GraphWindowsInformationProtectionResourceCollection]
  protectedApps: [GraphWindowsInformationProtectionApp]
  protectionUnderLockConfigRequired: Boolean!
  revokeOnUnenrollDisabled: Boolean!
  rightsManagementServicesTemplateId: GUID
  smbAutoEncryptedFileExtensions: [GraphWindowsInformationProtectionResourceCollection]
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  exemptAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  exemptAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  protectedAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  protectedAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  assign(
    bindingParameter: GraphWindowsInformationProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

interface GraphWindowsInformationProtection {
  azureRightsManagementServicesAllowed: Boolean!
  dataRecoveryCertificate: GraphWindowsInformationProtectionDataRecoveryCertificate
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel!
  enterpriseDomain: String
  enterpriseInternalProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseIPRanges: [GraphWindowsInformationProtectionIpRangeCollection]
  enterpriseIPRangesAreAuthoritative: Boolean!
  enterpriseNetworkDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProtectedDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxiedDomains: [GraphWindowsInformationProtectionProxiedDomainCollection]
  enterpriseProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxyServersAreAuthoritative: Boolean!
  exemptApps: [GraphWindowsInformationProtectionApp]
  iconsVisible: Boolean!
  indexingEncryptedStoresOrItemsBlocked: Boolean!
  isAssigned: Boolean!
  neutralDomainResources: [GraphWindowsInformationProtectionResourceCollection]
  protectedApps: [GraphWindowsInformationProtectionApp]
  protectionUnderLockConfigRequired: Boolean!
  revokeOnUnenrollDisabled: Boolean!
  rightsManagementServicesTemplateId: GUID
  smbAutoEncryptedFileExtensions: [GraphWindowsInformationProtectionResourceCollection]
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  exemptAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  exemptAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  protectedAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  protectedAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  assign(
    bindingParameter: GraphWindowsInformationProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

enum GraphWindowsInformationProtectionEnforcementLevel {
  noProtection
  encryptAndAuditOnly
  encryptAuditAndPrompt
  encryptAuditAndBlock
}

interface GraphWindowsInformationProtectionApp {
  denied: Boolean!
  description: String
  displayName: String!
  productName: String
  publisherName: String
}

input GraphWindowsInformationProtectionInput {
  azureRightsManagementServicesAllowed: Boolean!
  dataRecoveryCertificate: GraphWindowsInformationProtectionDataRecoveryCertificateInput
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel!
  enterpriseDomain: String
  enterpriseInternalProxyServers: [GraphWindowsInformationProtectionResourceCollectionInput]
  enterpriseIPRanges: [GraphWindowsInformationProtectionIpRangeCollectionInput]
  enterpriseIPRangesAreAuthoritative: Boolean!
  enterpriseNetworkDomainNames: [GraphWindowsInformationProtectionResourceCollectionInput]
  enterpriseProtectedDomainNames: [GraphWindowsInformationProtectionResourceCollectionInput]
  enterpriseProxiedDomains: [GraphWindowsInformationProtectionProxiedDomainCollectionInput]
  enterpriseProxyServers: [GraphWindowsInformationProtectionResourceCollectionInput]
  enterpriseProxyServersAreAuthoritative: Boolean!
  exemptApps: [GraphWindowsInformationProtectionAppInput]
  iconsVisible: Boolean!
  indexingEncryptedStoresOrItemsBlocked: Boolean!
  isAssigned: Boolean!
  neutralDomainResources: [GraphWindowsInformationProtectionResourceCollectionInput]
  protectedApps: [GraphWindowsInformationProtectionAppInput]
  protectionUnderLockConfigRequired: Boolean!
  revokeOnUnenrollDisabled: Boolean!
  rightsManagementServicesTemplateId: GUID
  smbAutoEncryptedFileExtensions: [GraphWindowsInformationProtectionResourceCollectionInput]
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

input GraphWindowsInformationProtectionDataRecoveryCertificateInput {
  certificate: String
  description: String
  expirationDateTime: DateTime!
  subjectName: String
}

input GraphWindowsInformationProtectionResourceCollectionInput {
  displayName: String!
  resources: [String]
}

input GraphWindowsInformationProtectionIpRangeCollectionInput {
  displayName: String!
  ranges: [GraphIpRangeInput]!
}

input GraphIpRangeInput {
  rest: JSON
}

input GraphWindowsInformationProtectionProxiedDomainCollectionInput {
  displayName: String!
  proxiedDomains: [GraphProxiedDomainInput]!
}

input GraphProxiedDomainInput {
  ipAddressOrFQDN: String!
  proxy: String
}

input GraphWindowsInformationProtectionAppInput {
  denied: Boolean!
  description: String
  displayName: String!
  productName: String
  publisherName: String
}

type GraphMdmWindowsInformationProtectionPolicy implements GraphWindowsInformationProtection {
  rest: JSON
  azureRightsManagementServicesAllowed: Boolean!
  dataRecoveryCertificate: GraphWindowsInformationProtectionDataRecoveryCertificate
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel!
  enterpriseDomain: String
  enterpriseInternalProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseIPRanges: [GraphWindowsInformationProtectionIpRangeCollection]
  enterpriseIPRangesAreAuthoritative: Boolean!
  enterpriseNetworkDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProtectedDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxiedDomains: [GraphWindowsInformationProtectionProxiedDomainCollection]
  enterpriseProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxyServersAreAuthoritative: Boolean!
  exemptApps: [GraphWindowsInformationProtectionApp]
  iconsVisible: Boolean!
  indexingEncryptedStoresOrItemsBlocked: Boolean!
  isAssigned: Boolean!
  neutralDomainResources: [GraphWindowsInformationProtectionResourceCollection]
  protectedApps: [GraphWindowsInformationProtectionApp]
  protectionUnderLockConfigRequired: Boolean!
  revokeOnUnenrollDisabled: Boolean!
  rightsManagementServicesTemplateId: GUID
  smbAutoEncryptedFileExtensions: [GraphWindowsInformationProtectionResourceCollection]
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  exemptAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  exemptAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  protectedAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  protectedAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  assign(
    bindingParameter: GraphWindowsInformationProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

type TGraphManagedAppConfiguration implements GraphManagedAppConfiguration & GraphManagedAppPolicy {
  customSettings: [GraphKeyValuePair]!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

interface GraphManagedAppConfiguration {
  customSettings: [GraphKeyValuePair]!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

type GraphTargetedManagedAppConfiguration implements GraphManagedAppConfiguration {
  deployedAppCount: Int!
  isAssigned: Boolean!
  apps(queryOptions: QueryOptions): [GraphManagedMobileApp]
  appsById(id: ID): GraphManagedMobileApp
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  deploymentSummary: GraphManagedAppPolicyDeploymentSummary
  assign(
    bindingParameter: GraphTargetedManagedAppConfigurationInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  customSettings: [GraphKeyValuePair]!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

input GraphTargetedManagedAppConfigurationInput {
  deployedAppCount: Int!
  isAssigned: Boolean!
  customSettings: [GraphKeyValuePairInput]!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  id: String!
}

type GraphWindowsInformationProtectionPolicy implements GraphWindowsInformationProtection {
  daysWithoutContactBeforeUnenroll: Int!
  mdmEnrollmentUrl: String
  minutesOfInactivityBeforeDeviceLock: Int!
  numberOfPastPinsRemembered: Int!
  passwordMaximumAttemptCount: Int!
  pinExpirationDays: Int!
  pinLowercaseLetters: GraphWindowsInformationProtectionPinCharacterRequirements!
  pinMinimumLength: Int!
  pinSpecialCharacters: GraphWindowsInformationProtectionPinCharacterRequirements!
  pinUppercaseLetters: GraphWindowsInformationProtectionPinCharacterRequirements!
  revokeOnMdmHandoffDisabled: Boolean!
  windowsHelloForBusinessBlocked: Boolean!
  azureRightsManagementServicesAllowed: Boolean!
  dataRecoveryCertificate: GraphWindowsInformationProtectionDataRecoveryCertificate
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel!
  enterpriseDomain: String
  enterpriseInternalProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseIPRanges: [GraphWindowsInformationProtectionIpRangeCollection]
  enterpriseIPRangesAreAuthoritative: Boolean!
  enterpriseNetworkDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProtectedDomainNames: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxiedDomains: [GraphWindowsInformationProtectionProxiedDomainCollection]
  enterpriseProxyServers: [GraphWindowsInformationProtectionResourceCollection]
  enterpriseProxyServersAreAuthoritative: Boolean!
  exemptApps: [GraphWindowsInformationProtectionApp]
  iconsVisible: Boolean!
  indexingEncryptedStoresOrItemsBlocked: Boolean!
  isAssigned: Boolean!
  neutralDomainResources: [GraphWindowsInformationProtectionResourceCollection]
  protectedApps: [GraphWindowsInformationProtectionApp]
  protectionUnderLockConfigRequired: Boolean!
  revokeOnUnenrollDisabled: Boolean!
  rightsManagementServicesTemplateId: GUID
  smbAutoEncryptedFileExtensions: [GraphWindowsInformationProtectionResourceCollection]
  assignments(queryOptions: QueryOptions): [GraphTargetedManagedAppPolicyAssignment]
  assignmentsById(id: ID): GraphTargetedManagedAppPolicyAssignment
  exemptAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  exemptAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  protectedAppLockerFiles(queryOptions: QueryOptions): [GraphWindowsInformationProtectionAppLockerFile]
  protectedAppLockerFilesById(id: ID): GraphWindowsInformationProtectionAppLockerFile
  assign(
    bindingParameter: GraphWindowsInformationProtectionInput
    assignments: [GraphTargetedManagedAppPolicyAssignmentInput]
  ): JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: String
  targetApps(bindingParameter: GraphManagedAppPolicyInput, apps: [GraphManagedMobileAppInput]): JSON
  id: String!
}

enum GraphWindowsInformationProtectionPinCharacterRequirements {
  notAllow
  requireAtLeastOne
  allow
}

type GraphIosLobApp implements GraphMobileLobApp {
  applicableDeviceType: GraphIosDeviceType!
  buildNumber: String
  bundleId: String
  expirationDateTime: DateTime
  minimumSupportedOperatingSystem: GraphIosMinimumOperatingSystem
  versionNumber: String
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphIosMobileAppConfiguration implements GraphManagedDeviceMobileAppConfiguration {
  encodedSettingXml: String
  settings: [GraphAppConfigurationSettingItem]
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  targetedMobileApps: [String]
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationAssignment]
  assignmentsById(id: ID): GraphManagedDeviceMobileAppConfigurationAssignment
  deviceStatuses(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphManagedDeviceMobileAppConfigurationDeviceStatus
  deviceStatusSummary: GraphManagedDeviceMobileAppConfigurationDeviceSummary
  userStatuses(queryOptions: QueryOptions): [GraphManagedDeviceMobileAppConfigurationUserStatus]
  userStatusesById(id: ID): GraphManagedDeviceMobileAppConfigurationUserStatus
  userStatusSummary: GraphManagedDeviceMobileAppConfigurationUserSummary
  assign(
    bindingParameter: GraphManagedDeviceMobileAppConfigurationInput
    assignments: [GraphManagedDeviceMobileAppConfigurationAssignmentInput]
  ): JSON
  id: String!
}

type GraphIosStoreApp implements GraphMobileApp {
  applicableDeviceType: GraphIosDeviceType!
  appStoreUrl: String
  bundleId: String
  minimumSupportedOperatingSystem: GraphIosMinimumOperatingSystem
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphIosVppApp implements GraphMobileApp {
  applicableDeviceType: GraphIosDeviceType
  appStoreUrl: String
  bundleId: String
  licensingType: GraphVppLicensingType
  releaseDateTime: DateTime
  totalLicenseCount: Int!
  usedLicenseCount: Int!
  vppTokenAccountType: GraphVppTokenAccountType!
  vppTokenAppleId: String
  vppTokenOrganizationName: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphMacOsOfficeSuiteApp implements GraphMobileApp {
  rest: JSON
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type TGraphManagedApp implements GraphManagedApp & GraphMobileApp {
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

interface GraphManagedApp {
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

enum GraphManagedAppAvailability {
  global
  lineOfBusiness
}

type TGraphManagedMobileLobApp implements GraphManagedMobileLobApp & GraphManagedApp {
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

interface GraphManagedMobileLobApp {
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphManagedAndroidLobApp implements GraphManagedMobileLobApp {
  minimumSupportedOperatingSystem: GraphAndroidMinimumOperatingSystem
  packageId: String
  versionCode: String
  versionName: String
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphManagedAndroidStoreApp implements GraphManagedApp {
  appStoreUrl: String!
  minimumSupportedOperatingSystem: GraphAndroidMinimumOperatingSystem!
  packageId: String
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphManagedDeviceMobileAppConfigurationAssignment implements GraphEntity {
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

interface GraphDeviceAndAppManagementAssignmentTarget {
  rest: JSON
}

type GraphManagedDeviceMobileAppConfigurationDeviceStatus implements GraphEntity {
  complianceGracePeriodExpirationDateTime: DateTime!
  deviceDisplayName: String
  deviceModel: String
  lastReportedDateTime: DateTime!
  status: GraphComplianceStatus!
  userName: String
  userPrincipalName: String
  id: String!
}

enum GraphComplianceStatus {
  unknown
  notApplicable
  compliant
  remediated
  nonCompliant
  error
  conflict
  notAssigned
}

type GraphManagedDeviceMobileAppConfigurationDeviceSummary implements GraphEntity {
  configurationVersion: Int!
  errorCount: Int!
  failedCount: Int!
  lastUpdateDateTime: DateTime!
  notApplicableCount: Int!
  pendingCount: Int!
  successCount: Int!
  id: String!
}

type GraphManagedDeviceMobileAppConfigurationUserStatus implements GraphEntity {
  devicesCount: Int!
  lastReportedDateTime: DateTime!
  status: GraphComplianceStatus!
  userDisplayName: String
  userPrincipalName: String
  id: String!
}

type GraphManagedDeviceMobileAppConfigurationUserSummary implements GraphEntity {
  configurationVersion: Int!
  errorCount: Int!
  failedCount: Int!
  lastUpdateDateTime: DateTime!
  notApplicableCount: Int!
  pendingCount: Int!
  successCount: Int!
  id: String!
}

type GraphManagedIosLobApp implements GraphManagedMobileLobApp {
  applicableDeviceType: GraphIosDeviceType!
  buildNumber: String
  bundleId: String
  expirationDateTime: DateTime
  minimumSupportedOperatingSystem: GraphIosMinimumOperatingSystem
  versionNumber: String
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphManagedIosStoreApp implements GraphManagedApp {
  applicableDeviceType: GraphIosDeviceType!
  appStoreUrl: String!
  bundleId: String
  minimumSupportedOperatingSystem: GraphIosMinimumOperatingSystem!
  appAvailability: GraphManagedAppAvailability!
  version: String
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphMobileAppContent implements GraphEntity {
  files(queryOptions: QueryOptions): [GraphMobileAppContentFile]
  filesById(id: ID): GraphMobileAppContentFile
  id: String!
}

type GraphMicrosoftStoreForBusinessApp implements GraphMobileApp {
  licenseType: GraphMicrosoftStoreForBusinessLicenseType!
  packageIdentityName: String
  productKey: String
  totalLicenseCount: Int!
  usedLicenseCount: Int!
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

enum GraphMicrosoftStoreForBusinessLicenseType {
  offline
  online
}

type GraphMobileAppAssignment implements GraphEntity {
  intent: GraphInstallIntent!
  settings: GraphMobileAppAssignmentSettings
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

interface GraphMobileAppAssignmentSettings {
  rest: JSON
}

type GraphMobileAppContentFile implements GraphEntity {
  azureStorageUri: String
  azureStorageUriExpirationDateTime: DateTime
  createdDateTime: DateTime!
  isCommitted: Boolean!
  manifest: String
  name: String
  size: BigInt!
  sizeEncrypted: BigInt!
  uploadState: GraphMobileAppContentFileUploadState!
  commit(bindingParameter: GraphMobileAppContentFileInput, fileEncryptionInfo: GraphFileEncryptionInfoInput): JSON
  renewUpload(bindingParameter: GraphMobileAppContentFileInput): JSON
  id: String!
}

enum GraphMobileAppContentFileUploadState {
  success
  transientError
  error
  unknown
  azureStorageUriRequestSuccess
  azureStorageUriRequestPending
  azureStorageUriRequestFailed
  azureStorageUriRequestTimedOut
  azureStorageUriRenewalSuccess
  azureStorageUriRenewalPending
  azureStorageUriRenewalFailed
  azureStorageUriRenewalTimedOut
  commitFileSuccess
  commitFilePending
  commitFileFailed
  commitFileTimedOut
}

input GraphMobileAppContentFileInput {
  azureStorageUri: String
  azureStorageUriExpirationDateTime: DateTime
  createdDateTime: DateTime!
  isCommitted: Boolean!
  manifest: String
  name: String
  size: BigInt!
  sizeEncrypted: BigInt!
  uploadState: GraphMobileAppContentFileUploadState!
  id: String!
}

input GraphFileEncryptionInfoInput {
  encryptionKey: String
  fileDigest: String
  fileDigestAlgorithm: String
  initializationVector: String
  mac: String
  macKey: String
  profileIdentifier: String
}

type GraphWebApp implements GraphMobileApp {
  appUrl: String
  useManagedBrowser: Boolean!
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphWin32LobApp implements GraphMobileLobApp {
  applicableArchitectures: GraphWindowsArchitecture!
  installCommandLine: String
  installExperience: GraphWin32LobAppInstallExperience
  minimumCpuSpeedInMHz: Int
  minimumFreeDiskSpaceInMB: Int
  minimumMemoryInMB: Int
  minimumNumberOfProcessors: Int
  minimumSupportedWindowsRelease: String
  msiInformation: GraphWin32LobAppMsiInformation
  returnCodes: [GraphWin32LobAppReturnCode]
  rules: [GraphWin32LobAppRule]
  setupFilePath: String
  uninstallCommandLine: String
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

enum GraphWindowsArchitecture {
  none
  x86
  x64
  arm
  neutral
}

interface GraphWin32LobAppRule {
  ruleType: GraphWin32LobAppRuleType!
}

enum GraphWin32LobAppRuleType {
  detection
  requirement
}

type GraphWindowsMobileMsi implements GraphMobileLobApp {
  commandLine: String
  ignoreVersionDetection: Boolean!
  productCode: String
  productVersion: String
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

type GraphWindowsUniversalAppX implements GraphMobileLobApp {
  applicableArchitectures: GraphWindowsArchitecture!
  applicableDeviceTypes: GraphWindowsDeviceType!
  identityName: String
  identityPublisherHash: String!
  identityResourceIdentifier: String
  identityVersion: String
  isBundle: Boolean!
  minimumSupportedOperatingSystem: GraphWindowsMinimumOperatingSystem!
  committedContentVersion: String
  fileName: String
  size: BigInt!
  contentVersions(queryOptions: QueryOptions): [GraphMobileAppContent]
  contentVersionsById(id: ID): GraphMobileAppContent
  createdDateTime: DateTime!
  description: String
  developer: String
  displayName: String
  informationUrl: String
  isFeatured: Boolean!
  largeIcon: GraphMimeContent
  lastModifiedDateTime: DateTime!
  notes: String
  owner: String
  privacyInformationUrl: String
  publisher: String
  publishingState: GraphMobileAppPublishingState!
  assignments(queryOptions: QueryOptions): [GraphMobileAppAssignment]
  assignmentsById(id: ID): GraphMobileAppAssignment
  categories(queryOptions: QueryOptions): [GraphMobileAppCategory]
  categoriesById(id: ID): GraphMobileAppCategory
  assign(bindingParameter: GraphMobileAppInput, mobileAppAssignments: [GraphMobileAppAssignmentInput]): JSON
  id: String!
}

enum GraphWindowsDeviceType {
  none
  desktop
  mobile
  holographic
  team
}

type GraphDeviceInstallState implements GraphEntity {
  deviceId: String
  deviceName: String
  errorCode: String
  installState: GraphInstallState!
  lastSyncDateTime: DateTime!
  osDescription: String
  osVersion: String
  userName: String
  id: String!
}

enum GraphInstallState {
  notApplicable
  installed
  failed
  notInstalled
  uninstallFailed
  unknown
}

type GraphEBookInstallSummary implements GraphEntity {
  failedDeviceCount: Int!
  failedUserCount: Int!
  installedDeviceCount: Int!
  installedUserCount: Int!
  notInstalledDeviceCount: Int!
  notInstalledUserCount: Int!
  id: String!
}

type GraphIosVppEBook implements GraphManagedEBook {
  appleId: String
  genres: [String]
  language: String
  seller: String
  totalLicenseCount: Int!
  usedLicenseCount: Int!
  vppOrganizationName: String
  vppTokenId: GUID!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  informationUrl: String
  largeCover: GraphMimeContent
  lastModifiedDateTime: DateTime!
  privacyInformationUrl: String
  publishedDateTime: DateTime!
  publisher: String
  assignments(queryOptions: QueryOptions): [GraphManagedEBookAssignment]
  assignmentsById(id: ID): GraphManagedEBookAssignment
  deviceStates(queryOptions: QueryOptions): [GraphDeviceInstallState]
  deviceStatesById(id: ID): GraphDeviceInstallState
  installSummary: GraphEBookInstallSummary
  userStateSummary(queryOptions: QueryOptions): [GraphUserInstallStateSummary]
  userStateSummaryById(id: ID): GraphUserInstallStateSummary
  assign(bindingParameter: GraphManagedEBookInput, managedEBookAssignments: [GraphManagedEBookAssignmentInput]): JSON
  id: String!
}

type GraphManagedEBookAssignment implements GraphEntity {
  installIntent: GraphInstallIntent!
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

type GraphUserInstallStateSummary implements GraphEntity {
  failedDeviceCount: Int!
  installedDeviceCount: Int!
  notInstalledDeviceCount: Int!
  userName: String
  deviceStates(queryOptions: QueryOptions): [GraphDeviceInstallState]
  deviceStatesById(id: ID): GraphDeviceInstallState
  id: String!
}

type GraphDeviceManagement implements GraphEntity {
  intuneAccountId: GUID!
  settings: GraphDeviceManagementSettings
  intuneBrand: GraphIntuneBrand
  subscriptionState: GraphDeviceManagementSubscriptionState!
  termsAndConditions(queryOptions: QueryOptions): [GraphTermsAndConditions]
  termsAndConditionsById(id: ID): GraphTermsAndConditions
  deviceCompliancePolicies(queryOptions: QueryOptions): [GraphDeviceCompliancePolicy]
  deviceCompliancePoliciesById(id: ID): GraphDeviceCompliancePolicy
  deviceCompliancePolicyDeviceStateSummary: GraphDeviceCompliancePolicyDeviceStateSummary
  deviceCompliancePolicySettingStateSummaries(
    queryOptions: QueryOptions
  ): [GraphDeviceCompliancePolicySettingStateSummary]
  deviceCompliancePolicySettingStateSummariesById(id: ID): GraphDeviceCompliancePolicySettingStateSummary
  deviceConfigurationDeviceStateSummaries: GraphDeviceConfigurationDeviceStateSummary
  deviceConfigurations(queryOptions: QueryOptions): [GraphDeviceConfiguration]
  deviceConfigurationsById(id: ID): GraphDeviceConfiguration
  iosUpdateStatuses(queryOptions: QueryOptions): [GraphIosUpdateDeviceStatus]
  iosUpdateStatusesById(id: ID): GraphIosUpdateDeviceStatus
  softwareUpdateStatusSummary: GraphSoftwareUpdateStatusSummary
  complianceManagementPartners(queryOptions: QueryOptions): [GraphComplianceManagementPartner]
  complianceManagementPartnersById(id: ID): GraphComplianceManagementPartner
  conditionalAccessSettings: GraphOnPremisesConditionalAccessSettings
  deviceCategories(queryOptions: QueryOptions): [GraphDeviceCategory]
  deviceCategoriesById(id: ID): GraphDeviceCategory
  deviceEnrollmentConfigurations(queryOptions: QueryOptions): [GraphDeviceEnrollmentConfiguration]
  deviceEnrollmentConfigurationsById(id: ID): GraphDeviceEnrollmentConfiguration
  deviceManagementPartners(queryOptions: QueryOptions): [GraphDeviceManagementPartner]
  deviceManagementPartnersById(id: ID): GraphDeviceManagementPartner
  exchangeConnectors(queryOptions: QueryOptions): [GraphDeviceManagementExchangeConnector]
  exchangeConnectorsById(id: ID): GraphDeviceManagementExchangeConnector
  mobileThreatDefenseConnectors(queryOptions: QueryOptions): [GraphMobileThreatDefenseConnector]
  mobileThreatDefenseConnectorsById(id: ID): GraphMobileThreatDefenseConnector
  applePushNotificationCertificate: GraphApplePushNotificationCertificate
  detectedApps(queryOptions: QueryOptions): [GraphDetectedApp]
  detectedAppsById(id: ID): GraphDetectedApp
  managedDeviceOverview: GraphManagedDeviceOverview
  managedDevices(queryOptions: QueryOptions): [GraphManagedDevice]
  managedDevicesById(id: ID): GraphManagedDevice
  importedWindowsAutopilotDeviceIdentities(queryOptions: QueryOptions): [GraphImportedWindowsAutopilotDeviceIdentity]
  importedWindowsAutopilotDeviceIdentitiesById(id: ID): GraphImportedWindowsAutopilotDeviceIdentity
  windowsAutopilotDeviceIdentities(queryOptions: QueryOptions): [GraphWindowsAutopilotDeviceIdentity]
  windowsAutopilotDeviceIdentitiesById(id: ID): GraphWindowsAutopilotDeviceIdentity
  notificationMessageTemplates(queryOptions: QueryOptions): [GraphNotificationMessageTemplate]
  notificationMessageTemplatesById(id: ID): GraphNotificationMessageTemplate
  resourceOperations(queryOptions: QueryOptions): [GraphResourceOperation]
  resourceOperationsById(id: ID): GraphResourceOperation
  roleAssignments(queryOptions: QueryOptions): [GraphDeviceAndAppManagementRoleAssignment]
  roleAssignmentsById(id: ID): GraphDeviceAndAppManagementRoleAssignment
  roleDefinitions(queryOptions: QueryOptions): [GraphRoleDefinition]
  roleDefinitionsById(id: ID): GraphRoleDefinition
  remoteAssistancePartners(queryOptions: QueryOptions): [GraphRemoteAssistancePartner]
  remoteAssistancePartnersById(id: ID): GraphRemoteAssistancePartner
  telecomExpenseManagementPartners(queryOptions: QueryOptions): [GraphTelecomExpenseManagementPartner]
  telecomExpenseManagementPartnersById(id: ID): GraphTelecomExpenseManagementPartner
  troubleshootingEvents(queryOptions: QueryOptions): [GraphDeviceManagementTroubleshootingEvent]
  troubleshootingEventsById(id: ID): GraphDeviceManagementTroubleshootingEvent
  windowsInformationProtectionAppLearningSummaries(
    queryOptions: QueryOptions
  ): [GraphWindowsInformationProtectionAppLearningSummary]
  windowsInformationProtectionAppLearningSummariesById(id: ID): GraphWindowsInformationProtectionAppLearningSummary
  windowsInformationProtectionNetworkLearningSummaries(
    queryOptions: QueryOptions
  ): [GraphWindowsInformationProtectionNetworkLearningSummary]
  windowsInformationProtectionNetworkLearningSummariesById(
    id: ID
  ): GraphWindowsInformationProtectionNetworkLearningSummary
  verifyWindowsEnrollmentAutoDiscovery: Boolean
  getEffectivePermissions: [GraphRolePermission]
  id: String!
}

enum GraphDeviceManagementSubscriptionState {
  pending
  active
  warning
  disabled
  deleted
  blocked
  lockedOut
}

interface GraphDeviceCompliancePolicy {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

input GraphDeviceCompliancePolicyInput {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  id: String!
}

input GraphDeviceCompliancePolicyAssignmentInput {
  target: GraphDeviceAndAppManagementAssignmentTargetInput
  id: String!
}

input GraphDeviceComplianceScheduledActionForRuleInput {
  ruleName: String
  id: String!
}

interface GraphDeviceConfiguration {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

input GraphDeviceConfigurationInput {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  id: String!
}

input GraphDeviceConfigurationAssignmentInput {
  target: GraphDeviceAndAppManagementAssignmentTargetInput
  id: String!
}

interface GraphDeviceEnrollmentConfiguration {
  createdDateTime: DateTime!
  description: String
  displayName: String
  lastModifiedDateTime: DateTime!
  priority: Int!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphEnrollmentConfigurationAssignment]
  assignmentsById(id: ID): GraphEnrollmentConfigurationAssignment
  assign(
    bindingParameter: GraphDeviceEnrollmentConfigurationInput
    enrollmentConfigurationAssignments: [GraphEnrollmentConfigurationAssignmentInput]
  ): JSON
  setPriority(bindingParameter: GraphDeviceEnrollmentConfigurationInput, priority: Int!): JSON
  id: String!
}

input GraphDeviceEnrollmentConfigurationInput {
  createdDateTime: DateTime!
  description: String
  displayName: String
  lastModifiedDateTime: DateTime!
  priority: Int!
  version: Int!
  id: String!
}

input GraphEnrollmentConfigurationAssignmentInput {
  target: GraphDeviceAndAppManagementAssignmentTargetInput
  id: String!
}

type GraphTermsAndConditions implements GraphEntity {
  acceptanceStatement: String
  bodyText: String
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  title: String
  version: Int!
  acceptanceStatuses(queryOptions: QueryOptions): [GraphTermsAndConditionsAcceptanceStatus]
  acceptanceStatusesById(id: ID): GraphTermsAndConditionsAcceptanceStatus
  assignments(queryOptions: QueryOptions): [GraphTermsAndConditionsAssignment]
  assignmentsById(id: ID): GraphTermsAndConditionsAssignment
  id: String!
}

type TGraphDeviceCompliancePolicy implements GraphDeviceCompliancePolicy & GraphEntity {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

type GraphDeviceCompliancePolicyDeviceStateSummary implements GraphEntity {
  compliantDeviceCount: Int!
  configManagerCount: Int!
  conflictDeviceCount: Int!
  errorDeviceCount: Int!
  inGracePeriodCount: Int!
  nonCompliantDeviceCount: Int!
  notApplicableDeviceCount: Int!
  remediatedDeviceCount: Int!
  unknownDeviceCount: Int!
  id: String!
}

type GraphDeviceCompliancePolicySettingStateSummary implements GraphEntity {
  compliantDeviceCount: Int!
  conflictDeviceCount: Int!
  errorDeviceCount: Int!
  nonCompliantDeviceCount: Int!
  notApplicableDeviceCount: Int!
  platformType: GraphPolicyPlatformType!
  remediatedDeviceCount: Int!
  setting: String
  settingName: String
  unknownDeviceCount: Int!
  deviceComplianceSettingStates(queryOptions: QueryOptions): [GraphDeviceComplianceSettingState]
  deviceComplianceSettingStatesById(id: ID): GraphDeviceComplianceSettingState
  id: String!
}

enum GraphPolicyPlatformType {
  android
  iOS
  macOS
  windowsPhone81
  windows81AndLater
  windows10AndLater
  androidWorkProfile
  all
}

type GraphDeviceConfigurationDeviceStateSummary implements GraphEntity {
  compliantDeviceCount: Int!
  conflictDeviceCount: Int!
  errorDeviceCount: Int!
  nonCompliantDeviceCount: Int!
  notApplicableDeviceCount: Int!
  remediatedDeviceCount: Int!
  unknownDeviceCount: Int!
  id: String!
}

type TGraphDeviceConfiguration implements GraphDeviceConfiguration & GraphEntity {
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphIosUpdateDeviceStatus implements GraphEntity {
  complianceGracePeriodExpirationDateTime: DateTime!
  deviceDisplayName: String
  deviceId: String
  deviceModel: String
  installStatus: GraphIosUpdatesInstallStatus!
  lastReportedDateTime: DateTime!
  osVersion: String
  status: GraphComplianceStatus!
  userId: String
  userName: String
  userPrincipalName: String
  id: String!
}

enum GraphIosUpdatesInstallStatus {
  deviceOsHigherThanDesiredOsVersion
  sharedDeviceUserLoggedInError
  notSupportedOperation
  installFailed
  installPhoneCallInProgress
  installInsufficientPower
  installInsufficientSpace
  installing
  downloadInsufficientNetwork
  downloadInsufficientPower
  downloadInsufficientSpace
  downloadRequiresComputer
  downloadFailed
  downloading
  success
  available
  idle
  unknown
}

type GraphSoftwareUpdateStatusSummary implements GraphEntity {
  compliantDeviceCount: Int!
  compliantUserCount: Int!
  conflictDeviceCount: Int!
  conflictUserCount: Int!
  displayName: String
  errorDeviceCount: Int!
  errorUserCount: Int!
  nonCompliantDeviceCount: Int!
  nonCompliantUserCount: Int!
  notApplicableDeviceCount: Int!
  notApplicableUserCount: Int!
  remediatedDeviceCount: Int!
  remediatedUserCount: Int!
  unknownDeviceCount: Int!
  unknownUserCount: Int!
  id: String!
}

type GraphComplianceManagementPartner implements GraphEntity {
  androidEnrollmentAssignments: [GraphComplianceManagementPartnerAssignment]
  androidOnboarded: Boolean!
  displayName: String
  iosEnrollmentAssignments: [GraphComplianceManagementPartnerAssignment]
  iosOnboarded: Boolean!
  lastHeartbeatDateTime: DateTime!
  macOsEnrollmentAssignments: [GraphComplianceManagementPartnerAssignment]
  macOsOnboarded: Boolean!
  partnerState: GraphDeviceManagementPartnerTenantState!
  id: String!
}

enum GraphDeviceManagementPartnerTenantState {
  unknown
  unavailable
  enabled
  terminated
  rejected
  unresponsive
}

type GraphOnPremisesConditionalAccessSettings implements GraphEntity {
  enabled: Boolean!
  excludedGroups: [GUID]!
  includedGroups: [GUID]!
  overrideDefaultRule: Boolean!
  id: String!
}

type GraphDeviceCategory implements GraphEntity {
  description: String
  displayName: String
  id: String!
}

type TGraphDeviceEnrollmentConfiguration implements GraphDeviceEnrollmentConfiguration & GraphEntity {
  createdDateTime: DateTime!
  description: String
  displayName: String
  lastModifiedDateTime: DateTime!
  priority: Int!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphEnrollmentConfigurationAssignment]
  assignmentsById(id: ID): GraphEnrollmentConfigurationAssignment
  assign(
    bindingParameter: GraphDeviceEnrollmentConfigurationInput
    enrollmentConfigurationAssignments: [GraphEnrollmentConfigurationAssignmentInput]
  ): JSON
  setPriority(bindingParameter: GraphDeviceEnrollmentConfigurationInput, priority: Int!): JSON
  id: String!
}

type GraphDeviceManagementPartner implements GraphEntity {
  displayName: String
  isConfigured: Boolean!
  lastHeartbeatDateTime: DateTime!
  partnerAppType: GraphDeviceManagementPartnerAppType!
  partnerState: GraphDeviceManagementPartnerTenantState!
  singleTenantAppId: String
  whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime: DateTime
  whenPartnerDevicesWillBeRemovedDateTime: DateTime
  id: String!
}

enum GraphDeviceManagementPartnerAppType {
  unknown
  singleTenantApp
  multiTenantApp
}

type GraphDeviceManagementExchangeConnector implements GraphEntity {
  connectorServerName: String
  exchangeAlias: String
  exchangeConnectorType: GraphDeviceManagementExchangeConnectorType!
  exchangeOrganization: String
  lastSyncDateTime: DateTime!
  primarySmtpAddress: String
  serverName: String
  status: GraphDeviceManagementExchangeConnectorStatus!
  version: String
  sync(
    bindingParameter: GraphDeviceManagementExchangeConnectorInput
    syncType: GraphDeviceManagementExchangeConnectorSyncType!
  ): JSON
  id: String!
}

enum GraphDeviceManagementExchangeConnectorType {
  onPremises
  hosted
  serviceToService
  dedicated
}

enum GraphDeviceManagementExchangeConnectorStatus {
  none
  connectionPending
  connected
  disconnected
}

input GraphDeviceManagementExchangeConnectorInput {
  connectorServerName: String
  exchangeAlias: String
  exchangeConnectorType: GraphDeviceManagementExchangeConnectorType!
  exchangeOrganization: String
  lastSyncDateTime: DateTime!
  primarySmtpAddress: String
  serverName: String
  status: GraphDeviceManagementExchangeConnectorStatus!
  version: String
  id: String!
}

enum GraphDeviceManagementExchangeConnectorSyncType {
  fullSync
  deltaSync
}

type GraphMobileThreatDefenseConnector implements GraphEntity {
  androidDeviceBlockedOnMissingPartnerData: Boolean!
  androidEnabled: Boolean!
  iosDeviceBlockedOnMissingPartnerData: Boolean!
  iosEnabled: Boolean!
  lastHeartbeatDateTime: DateTime!
  partnerState: GraphMobileThreatPartnerTenantState!
  partnerUnresponsivenessThresholdInDays: Int!
  partnerUnsupportedOsVersionBlocked: Boolean!
  id: String!
}

enum GraphMobileThreatPartnerTenantState {
  unavailable
  available
  enabled
  unresponsive
}

type GraphApplePushNotificationCertificate implements GraphEntity {
  appleIdentifier: String
  certificate: String
  expirationDateTime: DateTime!
  lastModifiedDateTime: DateTime!
  topicIdentifier: String
  downloadApplePushNotificationCertificateSigningRequest: String
  id: String!
}

type GraphDetectedApp implements GraphEntity {
  deviceCount: Int!
  displayName: String
  sizeInByte: BigInt!
  version: String
  managedDevices(queryOptions: QueryOptions): [GraphManagedDevice]
  managedDevicesById(id: ID): GraphManagedDevice
  id: String!
}

type GraphManagedDeviceOverview implements GraphEntity {
  deviceExchangeAccessStateSummary: GraphDeviceExchangeAccessStateSummary
  deviceOperatingSystemSummary: GraphDeviceOperatingSystemSummary
  dualEnrolledDeviceCount: Int!
  enrolledDeviceCount: Int!
  mdmEnrolledCount: Int!
  id: String!
}

type GraphImportedWindowsAutopilotDeviceIdentity implements GraphEntity {
  assignedUserPrincipalName: String
  groupTag: String
  hardwareIdentifier: String
  importId: String
  productKey: String
  serialNumber: String
  state: GraphImportedWindowsAutopilotDeviceIdentityState
  import(
    bindingParameter: [GraphImportedWindowsAutopilotDeviceIdentityInput]
    importedWindowsAutopilotDeviceIdentities: [GraphImportedWindowsAutopilotDeviceIdentityInput]
  ): JSON
  id: String!
}

input GraphImportedWindowsAutopilotDeviceIdentityInput {
  assignedUserPrincipalName: String
  groupTag: String
  hardwareIdentifier: String
  importId: String
  productKey: String
  serialNumber: String
  state: GraphImportedWindowsAutopilotDeviceIdentityStateInput
  id: String!
}

input GraphImportedWindowsAutopilotDeviceIdentityStateInput {
  deviceErrorCode: Int!
  deviceErrorName: String
  deviceImportStatus: GraphImportedWindowsAutopilotDeviceIdentityImportStatus!
  deviceRegistrationId: String
}

enum GraphImportedWindowsAutopilotDeviceIdentityImportStatus {
  unknown
  pending
  partial
  complete
  error
}

type GraphWindowsAutopilotDeviceIdentity implements GraphEntity {
  addressableUserName: String
  azureActiveDirectoryDeviceId: String
  displayName: String
  enrollmentState: GraphEnrollmentState!
  groupTag: String
  lastContactedDateTime: DateTime!
  managedDeviceId: String
  manufacturer: String
  model: String
  productKey: String
  purchaseOrderIdentifier: String
  resourceName: String
  serialNumber: String
  skuNumber: String
  systemFamily: String
  userPrincipalName: String
  assignUserToDevice(
    bindingParameter: GraphWindowsAutopilotDeviceIdentityInput
    userPrincipalName: String
    addressableUserName: String
  ): JSON
  unassignUserFromDevice(bindingParameter: GraphWindowsAutopilotDeviceIdentityInput): JSON
  updateDeviceProperties(
    bindingParameter: GraphWindowsAutopilotDeviceIdentityInput
    userPrincipalName: String
    addressableUserName: String
    groupTag: String
    displayName: String
  ): JSON
  deleteDevices(bindingParameter: [GraphWindowsAutopilotDeviceIdentityInput], serialNumbers: [String]): JSON
  id: String!
}

enum GraphEnrollmentState {
  unknown
  enrolled
  pendingReset
  failed
  notContacted
}

input GraphWindowsAutopilotDeviceIdentityInput {
  addressableUserName: String
  azureActiveDirectoryDeviceId: String
  displayName: String
  enrollmentState: GraphEnrollmentState!
  groupTag: String
  lastContactedDateTime: DateTime!
  managedDeviceId: String
  manufacturer: String
  model: String
  productKey: String
  purchaseOrderIdentifier: String
  resourceName: String
  serialNumber: String
  skuNumber: String
  systemFamily: String
  userPrincipalName: String
  id: String!
}

type GraphNotificationMessageTemplate implements GraphEntity {
  brandingOptions: GraphNotificationTemplateBrandingOptions!
  defaultLocale: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  localizedNotificationMessages(queryOptions: QueryOptions): [GraphLocalizedNotificationMessage]
  localizedNotificationMessagesById(id: ID): GraphLocalizedNotificationMessage
  sendTestMessage(bindingParameter: GraphNotificationMessageTemplateInput): JSON
  id: String!
}

enum GraphNotificationTemplateBrandingOptions {
  none
  includeCompanyLogo
  includeCompanyName
  includeContactInformation
}

input GraphNotificationMessageTemplateInput {
  brandingOptions: GraphNotificationTemplateBrandingOptions!
  defaultLocale: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  id: String!
}

type GraphResourceOperation implements GraphEntity {
  actionName: String
  description: String
  resourceName: String
  id: String!
}

type GraphRoleAssignment implements GraphEntity {
  description: String
  displayName: String
  resourceScopes: [String]
  roleDefinition: GraphRoleDefinition
  id: String!
}

type GraphDeviceAndAppManagementRoleAssignment {
  members: [String]
  description: String
  displayName: String
  resourceScopes: [String]
  roleDefinition: GraphRoleDefinition
  id: String!
}

type GraphRoleDefinition implements GraphEntity {
  description: String
  displayName: String
  isBuiltIn: Boolean!
  rolePermissions: [GraphRolePermission]
  roleAssignments(queryOptions: QueryOptions): [GraphRoleAssignment]
  roleAssignmentsById(id: ID): GraphRoleAssignment
  id: String!
}

type GraphRemoteAssistancePartner implements GraphEntity {
  displayName: String
  lastConnectionDateTime: DateTime!
  onboardingStatus: GraphRemoteAssistanceOnboardingStatus!
  onboardingUrl: String
  beginOnboarding(bindingParameter: GraphRemoteAssistancePartnerInput): JSON
  disconnect(bindingParameter: GraphRemoteAssistancePartnerInput): JSON
  id: String!
}

enum GraphRemoteAssistanceOnboardingStatus {
  notOnboarded
  onboarding
  onboarded
}

input GraphRemoteAssistancePartnerInput {
  displayName: String
  lastConnectionDateTime: DateTime!
  onboardingStatus: GraphRemoteAssistanceOnboardingStatus!
  onboardingUrl: String
  id: String!
}

type GraphTelecomExpenseManagementPartner implements GraphEntity {
  appAuthorized: Boolean!
  displayName: String
  enabled: Boolean!
  lastConnectionDateTime: DateTime!
  url: String
  id: String!
}

type GraphWindowsInformationProtectionAppLearningSummary implements GraphEntity {
  applicationName: String
  applicationType: GraphApplicationType!
  deviceCount: Int!
  id: String!
}

enum GraphApplicationType {
  universal
  desktop
}

type GraphWindowsInformationProtectionNetworkLearningSummary implements GraphEntity {
  deviceCount: Int!
  url: String
  id: String!
}

type GraphTermsAndConditionsAcceptanceStatus implements GraphEntity {
  acceptedDateTime: DateTime!
  acceptedVersion: Int!
  userDisplayName: String
  userPrincipalName: String
  termsAndConditions: GraphTermsAndConditions
  id: String!
}

type GraphTermsAndConditionsAssignment implements GraphEntity {
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

type GraphAndroidCompliancePolicy implements GraphDeviceCompliancePolicy {
  deviceThreatProtectionEnabled: Boolean!
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel!
  minAndroidSecurityPatchLevel: String
  osMaximumVersion: String
  osMinimumVersion: String
  passwordExpirationDays: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphAndroidRequiredPasswordType!
  securityBlockJailbrokenDevices: Boolean!
  securityDisableUsbDebugging: Boolean!
  securityPreventInstallAppsFromUnknownSources: Boolean!
  securityRequireCompanyPortalAppIntegrity: Boolean!
  securityRequireGooglePlayServices: Boolean!
  securityRequireSafetyNetAttestationBasicIntegrity: Boolean!
  securityRequireSafetyNetAttestationCertifiedDevice: Boolean!
  securityRequireUpToDateSecurityProviders: Boolean!
  securityRequireVerifyApps: Boolean!
  storageRequireEncryption: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

enum GraphDeviceThreatProtectionLevel {
  unavailable
  secured
  low
  medium
  high
  notSet
}

enum GraphAndroidRequiredPasswordType {
  deviceDefault
  alphabetic
  alphanumeric
  alphanumericWithSymbols
  lowSecurityBiometric
  numeric
  numericComplex
  any
}

type GraphAndroidCustomConfiguration implements GraphDeviceConfiguration {
  omaSettings: [GraphOmaSetting]
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

interface GraphOmaSetting {
  description: String
  displayName: String!
  omaUri: String!
}

type GraphAndroidGeneralDeviceConfiguration implements GraphDeviceConfiguration {
  appsBlockClipboardSharing: Boolean!
  appsBlockCopyPaste: Boolean!
  appsBlockYouTube: Boolean!
  appsHideList: [GraphAppListItem]
  appsInstallAllowList: [GraphAppListItem]
  appsLaunchBlockList: [GraphAppListItem]
  bluetoothBlocked: Boolean!
  cameraBlocked: Boolean!
  cellularBlockDataRoaming: Boolean!
  cellularBlockMessaging: Boolean!
  cellularBlockVoiceRoaming: Boolean!
  cellularBlockWiFiTethering: Boolean!
  compliantAppListType: GraphAppListType!
  compliantAppsList: [GraphAppListItem]
  deviceSharingAllowed: Boolean!
  diagnosticDataBlockSubmission: Boolean!
  factoryResetBlocked: Boolean!
  googleAccountBlockAutoSync: Boolean!
  googlePlayStoreBlocked: Boolean!
  kioskModeApps: [GraphAppListItem]
  kioskModeBlockSleepButton: Boolean!
  kioskModeBlockVolumeButtons: Boolean!
  locationServicesBlocked: Boolean!
  nfcBlocked: Boolean!
  passwordBlockFingerprintUnlock: Boolean!
  passwordBlockTrustAgents: Boolean!
  passwordExpirationDays: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeScreenTimeout: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphAndroidRequiredPasswordType!
  passwordSignInFailureCountBeforeFactoryReset: Int
  powerOffBlocked: Boolean!
  screenCaptureBlocked: Boolean!
  securityRequireVerifyApps: Boolean!
  storageBlockGoogleBackup: Boolean!
  storageBlockRemovableStorage: Boolean!
  storageRequireDeviceEncryption: Boolean!
  storageRequireRemovableStorageEncryption: Boolean!
  voiceAssistantBlocked: Boolean!
  voiceDialingBlocked: Boolean!
  webBrowserBlockAutofill: Boolean!
  webBrowserBlocked: Boolean!
  webBrowserBlockJavaScript: Boolean!
  webBrowserBlockPopups: Boolean!
  webBrowserCookieSettings: GraphWebBrowserCookieSettings!
  wiFiBlocked: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphAppListType {
  none
  appsInListCompliant
  appsNotInListCompliant
}

enum GraphWebBrowserCookieSettings {
  browserDefault
  blockAlways
  allowCurrentWebSite
  allowFromWebsitesVisited
  allowAlways
}

type GraphAndroidWorkProfileCompliancePolicy implements GraphDeviceCompliancePolicy {
  deviceThreatProtectionEnabled: Boolean!
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel!
  minAndroidSecurityPatchLevel: String
  osMaximumVersion: String
  osMinimumVersion: String
  passwordExpirationDays: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphAndroidRequiredPasswordType!
  securityBlockJailbrokenDevices: Boolean!
  securityDisableUsbDebugging: Boolean!
  securityPreventInstallAppsFromUnknownSources: Boolean!
  securityRequireCompanyPortalAppIntegrity: Boolean!
  securityRequireGooglePlayServices: Boolean!
  securityRequireSafetyNetAttestationBasicIntegrity: Boolean!
  securityRequireSafetyNetAttestationCertifiedDevice: Boolean!
  securityRequireUpToDateSecurityProviders: Boolean!
  securityRequireVerifyApps: Boolean!
  storageRequireEncryption: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

type GraphAndroidWorkProfileCustomConfiguration implements GraphDeviceConfiguration {
  omaSettings: [GraphOmaSetting]
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphAndroidWorkProfileGeneralDeviceConfiguration implements GraphDeviceConfiguration {
  passwordBlockFingerprintUnlock: Boolean!
  passwordBlockTrustAgents: Boolean!
  passwordExpirationDays: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeScreenTimeout: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequiredType: GraphAndroidWorkProfileRequiredPasswordType!
  passwordSignInFailureCountBeforeFactoryReset: Int
  securityRequireVerifyApps: Boolean!
  workProfileBlockAddingAccounts: Boolean!
  workProfileBlockCamera: Boolean!
  workProfileBlockCrossProfileCallerId: Boolean!
  workProfileBlockCrossProfileContactsSearch: Boolean!
  workProfileBlockCrossProfileCopyPaste: Boolean!
  workProfileBlockNotificationsWhileDeviceLocked: Boolean!
  workProfileBlockScreenCapture: Boolean!
  workProfileBluetoothEnableContactSharing: Boolean!
  workProfileDataSharingType: GraphAndroidWorkProfileCrossProfileDataSharingType!
  workProfileDefaultAppPermissionPolicy: GraphAndroidWorkProfileDefaultAppPermissionPolicyType!
  workProfilePasswordBlockFingerprintUnlock: Boolean!
  workProfilePasswordBlockTrustAgents: Boolean!
  workProfilePasswordExpirationDays: Int
  workProfilePasswordMinimumLength: Int
  workProfilePasswordMinLetterCharacters: Int
  workProfilePasswordMinLowerCaseCharacters: Int
  workProfilePasswordMinNonLetterCharacters: Int
  workProfilePasswordMinNumericCharacters: Int
  workProfilePasswordMinSymbolCharacters: Int
  workProfilePasswordMinUpperCaseCharacters: Int
  workProfilePasswordMinutesOfInactivityBeforeScreenTimeout: Int
  workProfilePasswordPreviousPasswordBlockCount: Int
  workProfilePasswordRequiredType: GraphAndroidWorkProfileRequiredPasswordType!
  workProfilePasswordSignInFailureCountBeforeFactoryReset: Int
  workProfileRequirePassword: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphAndroidWorkProfileRequiredPasswordType {
  deviceDefault
  lowSecurityBiometric
  required
  atLeastNumeric
  numericComplex
  atLeastAlphabetic
  atLeastAlphanumeric
  alphanumericWithSymbols
}

enum GraphAndroidWorkProfileCrossProfileDataSharingType {
  deviceDefault
  preventAny
  allowPersonalToWork
  noRestrictions
}

enum GraphAndroidWorkProfileDefaultAppPermissionPolicyType {
  deviceDefault
  prompt
  autoGrant
  autoDeny
}

type TGraphAppleDeviceFeaturesConfigurationBase implements GraphAppleDeviceFeaturesConfigurationBase & GraphDeviceConfiguration {
  rest: JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

interface GraphAppleDeviceFeaturesConfigurationBase {
  rest: JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphDeviceComplianceActionItem implements GraphEntity {
  actionType: GraphDeviceComplianceActionType!
  gracePeriodHours: Int!
  notificationMessageCCList: [String]
  notificationTemplateId: String
  id: String!
}

enum GraphDeviceComplianceActionType {
  noAction
  notification
  block
  retire
  wipe
  removeResourceAccessProfiles
  pushNotification
}

type GraphDeviceComplianceDeviceOverview implements GraphEntity {
  configurationVersion: Int!
  errorCount: Int!
  failedCount: Int!
  lastUpdateDateTime: DateTime!
  notApplicableCount: Int!
  pendingCount: Int!
  successCount: Int!
  id: String!
}

type GraphDeviceComplianceDeviceStatus implements GraphEntity {
  complianceGracePeriodExpirationDateTime: DateTime!
  deviceDisplayName: String
  deviceModel: String
  lastReportedDateTime: DateTime!
  status: GraphComplianceStatus!
  userName: String
  userPrincipalName: String
  id: String!
}

type GraphDeviceCompliancePolicyAssignment implements GraphEntity {
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

type GraphSettingStateDeviceSummary implements GraphEntity {
  compliantDeviceCount: Int!
  conflictDeviceCount: Int!
  errorDeviceCount: Int!
  instancePath: String
  nonCompliantDeviceCount: Int!
  notApplicableDeviceCount: Int!
  remediatedDeviceCount: Int!
  settingName: String
  unknownDeviceCount: Int!
  id: String!
}

type GraphDeviceComplianceScheduledActionForRule implements GraphEntity {
  ruleName: String
  scheduledActionConfigurations(queryOptions: QueryOptions): [GraphDeviceComplianceActionItem]
  scheduledActionConfigurationsById(id: ID): GraphDeviceComplianceActionItem
  id: String!
}

type GraphDeviceComplianceUserStatus implements GraphEntity {
  devicesCount: Int!
  lastReportedDateTime: DateTime!
  status: GraphComplianceStatus!
  userDisplayName: String
  userPrincipalName: String
  id: String!
}

type GraphDeviceComplianceUserOverview implements GraphEntity {
  configurationVersion: Int!
  errorCount: Int!
  failedCount: Int!
  lastUpdateDateTime: DateTime!
  notApplicableCount: Int!
  pendingCount: Int!
  successCount: Int!
  id: String!
}

type GraphDeviceComplianceSettingState implements GraphEntity {
  complianceGracePeriodExpirationDateTime: DateTime!
  deviceId: String
  deviceModel: String
  deviceName: String
  setting: String
  settingName: String
  state: GraphComplianceStatus!
  userEmail: String
  userId: String
  userName: String
  userPrincipalName: String
  id: String!
}

type GraphDeviceCompliancePolicyState implements GraphEntity {
  displayName: String
  platformType: GraphPolicyPlatformType!
  settingCount: Int!
  settingStates: [GraphDeviceCompliancePolicySettingState]
  state: GraphComplianceStatus!
  version: Int!
  id: String!
}

type GraphDeviceConfigurationAssignment implements GraphEntity {
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

type GraphDeviceConfigurationDeviceStatus implements GraphEntity {
  complianceGracePeriodExpirationDateTime: DateTime!
  deviceDisplayName: String
  deviceModel: String
  lastReportedDateTime: DateTime!
  status: GraphComplianceStatus!
  userName: String
  userPrincipalName: String
  id: String!
}

type GraphDeviceConfigurationDeviceOverview implements GraphEntity {
  configurationVersion: Int!
  errorCount: Int!
  failedCount: Int!
  lastUpdateDateTime: DateTime!
  notApplicableCount: Int!
  pendingCount: Int!
  successCount: Int!
  id: String!
}

type GraphDeviceConfigurationUserStatus implements GraphEntity {
  devicesCount: Int!
  lastReportedDateTime: DateTime!
  status: GraphComplianceStatus!
  userDisplayName: String
  userPrincipalName: String
  id: String!
}

type GraphDeviceConfigurationUserOverview implements GraphEntity {
  configurationVersion: Int!
  errorCount: Int!
  failedCount: Int!
  lastUpdateDateTime: DateTime!
  notApplicableCount: Int!
  pendingCount: Int!
  successCount: Int!
  id: String!
}

type GraphDeviceConfigurationState implements GraphEntity {
  displayName: String
  platformType: GraphPolicyPlatformType!
  settingCount: Int!
  settingStates: [GraphDeviceConfigurationSettingState]
  state: GraphComplianceStatus!
  version: Int!
  id: String!
}

type GraphEditionUpgradeConfiguration implements GraphDeviceConfiguration {
  license: String
  licenseType: GraphEditionUpgradeLicenseType!
  productKey: String
  targetEdition: GraphWindows10EditionType!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphEditionUpgradeLicenseType {
  productKey
  licenseFile
}

enum GraphWindows10EditionType {
  windows10Enterprise
  windows10EnterpriseN
  windows10Education
  windows10EducationN
  windows10MobileEnterprise
  windows10HolographicEnterprise
  windows10Professional
  windows10ProfessionalN
  windows10ProfessionalEducation
  windows10ProfessionalEducationN
  windows10ProfessionalWorkstation
  windows10ProfessionalWorkstationN
}

type TGraphIosCertificateProfile implements GraphIosCertificateProfile & GraphDeviceConfiguration {
  rest: JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

interface GraphIosCertificateProfile {
  rest: JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphIosCompliancePolicy implements GraphDeviceCompliancePolicy {
  deviceThreatProtectionEnabled: Boolean!
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel!
  managedEmailProfileRequired: Boolean!
  osMaximumVersion: String
  osMinimumVersion: String
  passcodeBlockSimple: Boolean!
  passcodeExpirationDays: Int
  passcodeMinimumCharacterSetCount: Int
  passcodeMinimumLength: Int
  passcodeMinutesOfInactivityBeforeLock: Int
  passcodePreviousPasscodeBlockCount: Int
  passcodeRequired: Boolean!
  passcodeRequiredType: GraphRequiredPasswordType!
  securityBlockJailbrokenDevices: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

enum GraphRequiredPasswordType {
  deviceDefault
  alphanumeric
  numeric
}

type GraphIosCustomConfiguration implements GraphDeviceConfiguration {
  payload: String!
  payloadFileName: String
  payloadName: String!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphIosDeviceFeaturesConfiguration implements GraphAppleDeviceFeaturesConfigurationBase {
  assetTagTemplate: String
  homeScreenDockIcons: [GraphIosHomeScreenItem]
  homeScreenPages: [GraphIosHomeScreenPage]
  lockScreenFootnote: String
  notificationSettings: [GraphIosNotificationSettings]
  rest: JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

interface GraphIosHomeScreenItem {
  displayName: String
}

type GraphIosGeneralDeviceConfiguration implements GraphDeviceConfiguration {
  accountBlockModification: Boolean!
  activationLockAllowWhenSupervised: Boolean!
  airDropBlocked: Boolean!
  airDropForceUnmanagedDropTarget: Boolean!
  airPlayForcePairingPasswordForOutgoingRequests: Boolean!
  appleNewsBlocked: Boolean!
  appleWatchBlockPairing: Boolean!
  appleWatchForceWristDetection: Boolean!
  appsSingleAppModeList: [GraphAppListItem]
  appStoreBlockAutomaticDownloads: Boolean!
  appStoreBlocked: Boolean!
  appStoreBlockInAppPurchases: Boolean!
  appStoreBlockUIAppInstallation: Boolean!
  appStoreRequirePassword: Boolean!
  appsVisibilityList: [GraphAppListItem]
  appsVisibilityListType: GraphAppListType!
  bluetoothBlockModification: Boolean!
  cameraBlocked: Boolean!
  cellularBlockDataRoaming: Boolean!
  cellularBlockGlobalBackgroundFetchWhileRoaming: Boolean!
  cellularBlockPerAppDataModification: Boolean!
  cellularBlockPersonalHotspot: Boolean!
  cellularBlockVoiceRoaming: Boolean!
  certificatesBlockUntrustedTlsCertificates: Boolean!
  classroomAppBlockRemoteScreenObservation: Boolean!
  classroomAppForceUnpromptedScreenObservation: Boolean!
  compliantAppListType: GraphAppListType!
  compliantAppsList: [GraphAppListItem]
  configurationProfileBlockChanges: Boolean!
  definitionLookupBlocked: Boolean!
  deviceBlockEnableRestrictions: Boolean!
  deviceBlockEraseContentAndSettings: Boolean!
  deviceBlockNameModification: Boolean!
  diagnosticDataBlockSubmission: Boolean!
  diagnosticDataBlockSubmissionModification: Boolean!
  documentsBlockManagedDocumentsInUnmanagedApps: Boolean!
  documentsBlockUnmanagedDocumentsInManagedApps: Boolean!
  emailInDomainSuffixes: [String]
  enterpriseAppBlockTrust: Boolean!
  enterpriseAppBlockTrustModification: Boolean!
  faceTimeBlocked: Boolean!
  findMyFriendsBlocked: Boolean!
  gameCenterBlocked: Boolean!
  gamingBlockGameCenterFriends: Boolean!
  gamingBlockMultiplayer: Boolean!
  hostPairingBlocked: Boolean!
  iBooksStoreBlocked: Boolean!
  iBooksStoreBlockErotica: Boolean!
  iCloudBlockActivityContinuation: Boolean!
  iCloudBlockBackup: Boolean!
  iCloudBlockDocumentSync: Boolean!
  iCloudBlockManagedAppsSync: Boolean!
  iCloudBlockPhotoLibrary: Boolean!
  iCloudBlockPhotoStreamSync: Boolean!
  iCloudBlockSharedPhotoStream: Boolean!
  iCloudRequireEncryptedBackup: Boolean!
  iTunesBlockExplicitContent: Boolean!
  iTunesBlockMusicService: Boolean!
  iTunesBlockRadio: Boolean!
  keyboardBlockAutoCorrect: Boolean!
  keyboardBlockDictation: Boolean!
  keyboardBlockPredictive: Boolean!
  keyboardBlockShortcuts: Boolean!
  keyboardBlockSpellCheck: Boolean!
  kioskModeAllowAssistiveSpeak: Boolean!
  kioskModeAllowAssistiveTouchSettings: Boolean!
  kioskModeAllowAutoLock: Boolean!
  kioskModeAllowColorInversionSettings: Boolean!
  kioskModeAllowRingerSwitch: Boolean!
  kioskModeAllowScreenRotation: Boolean!
  kioskModeAllowSleepButton: Boolean!
  kioskModeAllowTouchscreen: Boolean!
  kioskModeAllowVoiceOverSettings: Boolean!
  kioskModeAllowVolumeButtons: Boolean!
  kioskModeAllowZoomSettings: Boolean!
  kioskModeAppStoreUrl: String
  kioskModeBuiltInAppId: String
  kioskModeManagedAppId: String
  kioskModeRequireAssistiveTouch: Boolean!
  kioskModeRequireColorInversion: Boolean!
  kioskModeRequireMonoAudio: Boolean!
  kioskModeRequireVoiceOver: Boolean!
  kioskModeRequireZoom: Boolean!
  lockScreenBlockControlCenter: Boolean!
  lockScreenBlockNotificationView: Boolean!
  lockScreenBlockPassbook: Boolean!
  lockScreenBlockTodayView: Boolean!
  mediaContentRatingApps: GraphRatingAppsType!
  mediaContentRatingAustralia: GraphMediaContentRatingAustralia
  mediaContentRatingCanada: GraphMediaContentRatingCanada
  mediaContentRatingFrance: GraphMediaContentRatingFrance
  mediaContentRatingGermany: GraphMediaContentRatingGermany
  mediaContentRatingIreland: GraphMediaContentRatingIreland
  mediaContentRatingJapan: GraphMediaContentRatingJapan
  mediaContentRatingNewZealand: GraphMediaContentRatingNewZealand
  mediaContentRatingUnitedKingdom: GraphMediaContentRatingUnitedKingdom
  mediaContentRatingUnitedStates: GraphMediaContentRatingUnitedStates
  messagesBlocked: Boolean!
  networkUsageRules: [GraphIosNetworkUsageRule]
  notificationsBlockSettingsModification: Boolean!
  passcodeBlockFingerprintModification: Boolean!
  passcodeBlockFingerprintUnlock: Boolean!
  passcodeBlockModification: Boolean!
  passcodeBlockSimple: Boolean!
  passcodeExpirationDays: Int
  passcodeMinimumCharacterSetCount: Int
  passcodeMinimumLength: Int
  passcodeMinutesOfInactivityBeforeLock: Int
  passcodeMinutesOfInactivityBeforeScreenTimeout: Int
  passcodePreviousPasscodeBlockCount: Int
  passcodeRequired: Boolean!
  passcodeRequiredType: GraphRequiredPasswordType!
  passcodeSignInFailureCountBeforeWipe: Int
  podcastsBlocked: Boolean!
  safariBlockAutofill: Boolean!
  safariBlocked: Boolean!
  safariBlockJavaScript: Boolean!
  safariBlockPopups: Boolean!
  safariCookieSettings: GraphWebBrowserCookieSettings!
  safariManagedDomains: [String]
  safariPasswordAutoFillDomains: [String]
  safariRequireFraudWarning: Boolean!
  screenCaptureBlocked: Boolean!
  siriBlocked: Boolean!
  siriBlockedWhenLocked: Boolean!
  siriBlockUserGeneratedContent: Boolean!
  siriRequireProfanityFilter: Boolean!
  spotlightBlockInternetResults: Boolean!
  voiceDialingBlocked: Boolean!
  wallpaperBlockModification: Boolean!
  wiFiConnectOnlyToConfiguredNetworks: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphRatingAppsType {
  allAllowed
  allBlocked
  agesAbove4
  agesAbove9
  agesAbove12
  agesAbove17
}

type GraphIosUpdateConfiguration implements GraphDeviceConfiguration {
  activeHoursEnd: String!
  activeHoursStart: String!
  scheduledInstallDays: [GraphDayOfWeek]!
  utcTimeOffsetInMinutes: Int
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphMacOsCompliancePolicy implements GraphDeviceCompliancePolicy {
  deviceThreatProtectionEnabled: Boolean!
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel!
  firewallBlockAllIncoming: Boolean!
  firewallEnabled: Boolean!
  firewallEnableStealthMode: Boolean!
  osMaximumVersion: String
  osMinimumVersion: String
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  storageRequireEncryption: Boolean!
  systemIntegrityProtectionEnabled: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

type GraphMacOsCustomConfiguration implements GraphDeviceConfiguration {
  payload: String!
  payloadFileName: String
  payloadName: String!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphMacOsDeviceFeaturesConfiguration implements GraphAppleDeviceFeaturesConfigurationBase {
  rest: JSON
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphMacOsGeneralDeviceConfiguration implements GraphDeviceConfiguration {
  compliantAppListType: GraphAppListType!
  compliantAppsList: [GraphAppListItem]
  emailInDomainSuffixes: [String]
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordMinutesOfInactivityBeforeScreenTimeout: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphReportRoot implements GraphEntity {
  dailyPrintUsageByPrinter(queryOptions: QueryOptions): [GraphPrintUsageByPrinter]
  dailyPrintUsageByPrinterById(id: ID): GraphPrintUsageByPrinter
  dailyPrintUsageByUser(queryOptions: QueryOptions): [GraphPrintUsageByUser]
  dailyPrintUsageByUserById(id: ID): GraphPrintUsageByUser
  monthlyPrintUsageByPrinter(queryOptions: QueryOptions): [GraphPrintUsageByPrinter]
  monthlyPrintUsageByPrinterById(id: ID): GraphPrintUsageByPrinter
  monthlyPrintUsageByUser(queryOptions: QueryOptions): [GraphPrintUsageByUser]
  monthlyPrintUsageByUserById(id: ID): GraphPrintUsageByUser
  deviceConfigurationDeviceActivity: GraphReport
  deviceConfigurationUserActivity: GraphReport
  managedDeviceEnrollmentFailureDetails: GraphReport
  managedDeviceEnrollmentTopFailures: GraphReport
  getEmailActivityCounts: GraphReport
  getEmailActivityUserCounts: GraphReport
  getEmailActivityUserDetail: GraphReport
  getEmailAppUsageAppsUserCounts: GraphReport
  getEmailAppUsageUserCounts: GraphReport
  getEmailAppUsageUserDetail: GraphReport
  getEmailAppUsageVersionsUserCounts: GraphReport
  getMailboxUsageDetail: GraphReport
  getMailboxUsageMailboxCounts: GraphReport
  getMailboxUsageQuotaStatusMailboxCounts: GraphReport
  getMailboxUsageStorage: GraphReport
  getOffice365ActivationCounts: GraphReport
  getOffice365ActivationsUserCounts: GraphReport
  getOffice365ActivationsUserDetail: GraphReport
  getOffice365ActiveUserCounts: GraphReport
  getOffice365ActiveUserDetail: GraphReport
  getOffice365GroupsActivityCounts: GraphReport
  getOffice365GroupsActivityDetail: GraphReport
  getOffice365GroupsActivityFileCounts: GraphReport
  getOffice365GroupsActivityGroupCounts: GraphReport
  getOffice365GroupsActivityStorage: GraphReport
  getOffice365ServicesUserCounts: GraphReport
  getOneDriveActivityFileCounts: GraphReport
  getOneDriveActivityUserCounts: GraphReport
  getOneDriveActivityUserDetail: GraphReport
  getOneDriveUsageAccountCounts: GraphReport
  getOneDriveUsageAccountDetail: GraphReport
  getOneDriveUsageFileCounts: GraphReport
  getOneDriveUsageStorage: GraphReport
  getSharePointActivityFileCounts: GraphReport
  getSharePointActivityPages: GraphReport
  getSharePointActivityUserCounts: GraphReport
  getSharePointActivityUserDetail: GraphReport
  getSharePointSiteUsageDetail: GraphReport
  getSharePointSiteUsageFileCounts: GraphReport
  getSharePointSiteUsagePages: GraphReport
  getSharePointSiteUsageSiteCounts: GraphReport
  getSharePointSiteUsageStorage: GraphReport
  getSkypeForBusinessActivityCounts: GraphReport
  getSkypeForBusinessActivityUserCounts: GraphReport
  getSkypeForBusinessActivityUserDetail: GraphReport
  getSkypeForBusinessDeviceUsageDistributionUserCounts: GraphReport
  getSkypeForBusinessDeviceUsageUserCounts: GraphReport
  getSkypeForBusinessDeviceUsageUserDetail: GraphReport
  getSkypeForBusinessOrganizerActivityCounts: GraphReport
  getSkypeForBusinessOrganizerActivityMinuteCounts: GraphReport
  getSkypeForBusinessOrganizerActivityUserCounts: GraphReport
  getSkypeForBusinessParticipantActivityCounts: GraphReport
  getSkypeForBusinessParticipantActivityMinuteCounts: GraphReport
  getSkypeForBusinessParticipantActivityUserCounts: GraphReport
  getSkypeForBusinessPeerToPeerActivityCounts: GraphReport
  getSkypeForBusinessPeerToPeerActivityMinuteCounts: GraphReport
  getSkypeForBusinessPeerToPeerActivityUserCounts: GraphReport
  getTeamsDeviceUsageDistributionUserCounts: GraphReport
  getTeamsDeviceUsageUserCounts: GraphReport
  getTeamsDeviceUsageUserDetail: GraphReport
  getTeamsUserActivityCounts: GraphReport
  getTeamsUserActivityUserCounts: GraphReport
  getTeamsUserActivityUserDetail: GraphReport
  getYammerActivityCounts: GraphReport
  getYammerActivityUserCounts: GraphReport
  getYammerActivityUserDetail: GraphReport
  getYammerDeviceUsageDistributionUserCounts: GraphReport
  getYammerDeviceUsageUserCounts: GraphReport
  getYammerDeviceUsageUserDetail: GraphReport
  getYammerGroupsActivityCounts: GraphReport
  getYammerGroupsActivityDetail: GraphReport
  getYammerGroupsActivityGroupCounts: GraphReport
  getGroupArchivedPrintJobs: [GraphArchivedPrintJob]
  getPrinterArchivedPrintJobs: [GraphArchivedPrintJob]
  getUserArchivedPrintJobs: [GraphArchivedPrintJob]
  id: String!
}

type TGraphPrintUsage implements GraphPrintUsage & GraphEntity {
  completedBlackAndWhiteJobCount: BigInt!
  completedColorJobCount: BigInt!
  incompleteJobCount: BigInt!
  usageDate: Date!
  id: String!
}

interface GraphPrintUsage {
  completedBlackAndWhiteJobCount: BigInt!
  completedColorJobCount: BigInt!
  incompleteJobCount: BigInt!
  usageDate: Date!
  id: String!
}

type GraphPrintUsageByPrinter implements GraphPrintUsage {
  printerId: String!
  completedBlackAndWhiteJobCount: BigInt!
  completedColorJobCount: BigInt!
  incompleteJobCount: BigInt!
  usageDate: Date!
  id: String!
}

type GraphPrintUsageByUser implements GraphPrintUsage {
  userPrincipalName: String!
  completedBlackAndWhiteJobCount: BigInt!
  completedColorJobCount: BigInt!
  incompleteJobCount: BigInt!
  usageDate: Date!
  id: String!
}

type GraphSharedPcConfiguration implements GraphDeviceConfiguration {
  accountManagerPolicy: GraphSharedPcAccountManagerPolicy
  allowedAccounts: GraphSharedPcAllowedAccountType!
  allowLocalStorage: Boolean!
  disableAccountManager: Boolean!
  disableEduPolicies: Boolean!
  disablePowerPolicies: Boolean!
  disableSignInOnResume: Boolean!
  enabled: Boolean!
  idleTimeBeforeSleepInSeconds: Int
  kioskAppDisplayName: String
  kioskAppUserModelId: String
  maintenanceStartTime: String
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphSharedPcAllowedAccountType {
  guest
  domain
}

type GraphWindows10CompliancePolicy implements GraphDeviceCompliancePolicy {
  bitLockerEnabled: Boolean!
  codeIntegrityEnabled: Boolean!
  earlyLaunchAntiMalwareDriverEnabled: Boolean!
  mobileOsMaximumVersion: String
  mobileOsMinimumVersion: String
  osMaximumVersion: String
  osMinimumVersion: String
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredToUnlockFromIdle: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  requireHealthyDeviceReport: Boolean!
  secureBootEnabled: Boolean!
  storageRequireEncryption: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

type GraphWindows10CustomConfiguration implements GraphDeviceConfiguration {
  omaSettings: [GraphOmaSetting]
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphWindows10EndpointProtectionConfiguration implements GraphDeviceConfiguration {
  applicationGuardAllowPersistence: Boolean!
  applicationGuardAllowPrintToLocalPrinters: Boolean!
  applicationGuardAllowPrintToNetworkPrinters: Boolean!
  applicationGuardAllowPrintToPDF: Boolean!
  applicationGuardAllowPrintToXPS: Boolean!
  applicationGuardBlockClipboardSharing: GraphApplicationGuardBlockClipboardSharingType!
  applicationGuardBlockFileTransfer: GraphApplicationGuardBlockFileTransferType!
  applicationGuardBlockNonEnterpriseContent: Boolean!
  applicationGuardEnabled: Boolean!
  applicationGuardForceAuditing: Boolean!
  appLockerApplicationControl: GraphAppLockerApplicationControlType!
  bitLockerDisableWarningForOtherDiskEncryption: Boolean!
  bitLockerEnableStorageCardEncryptionOnMobile: Boolean!
  bitLockerEncryptDevice: Boolean!
  bitLockerRemovableDrivePolicy: GraphBitLockerRemovableDrivePolicy
  defenderAdditionalGuardedFolders: [String]
  defenderAttackSurfaceReductionExcludedPaths: [String]
  defenderExploitProtectionXml: String
  defenderExploitProtectionXmlFileName: String
  defenderGuardedFoldersAllowedAppPaths: [String]
  defenderSecurityCenterBlockExploitProtectionOverride: Boolean!
  firewallBlockStatefulFTP: Boolean
  firewallCertificateRevocationListCheckMethod: GraphFirewallCertificateRevocationListCheckMethodType!
  firewallIdleTimeoutForSecurityAssociationInSeconds: Int
  firewallIPSecExemptionsAllowDHCP: Boolean!
  firewallIPSecExemptionsAllowICMP: Boolean!
  firewallIPSecExemptionsAllowNeighborDiscovery: Boolean!
  firewallIPSecExemptionsAllowRouterDiscovery: Boolean!
  firewallMergeKeyingModuleSettings: Boolean
  firewallPacketQueueingMethod: GraphFirewallPacketQueueingMethodType!
  firewallPreSharedKeyEncodingMethod: GraphFirewallPreSharedKeyEncodingMethodType!
  firewallProfileDomain: GraphWindowsFirewallNetworkProfile
  firewallProfilePrivate: GraphWindowsFirewallNetworkProfile
  firewallProfilePublic: GraphWindowsFirewallNetworkProfile
  smartScreenBlockOverrideForFiles: Boolean!
  smartScreenEnableInShell: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphApplicationGuardBlockClipboardSharingType {
  notConfigured
  blockBoth
  blockHostToContainer
  blockContainerToHost
  blockNone
}

enum GraphApplicationGuardBlockFileTransferType {
  notConfigured
  blockImageAndTextFile
  blockImageFile
  blockNone
  blockTextFile
}

enum GraphAppLockerApplicationControlType {
  notConfigured
  enforceComponentsAndStoreApps
  auditComponentsAndStoreApps
  enforceComponentsStoreAppsAndSmartlocker
  auditComponentsStoreAppsAndSmartlocker
}

enum GraphFirewallCertificateRevocationListCheckMethodType {
  deviceDefault
  none
  attempt
  require
}

enum GraphFirewallPacketQueueingMethodType {
  deviceDefault
  disabled
  queueInbound
  queueOutbound
  queueBoth
}

enum GraphFirewallPreSharedKeyEncodingMethodType {
  deviceDefault
  none
  utF8
}

type GraphWindows10EnterpriseModernAppManagementConfiguration implements GraphDeviceConfiguration {
  uninstallBuiltInApps: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphWindows10GeneralConfiguration implements GraphDeviceConfiguration {
  accountsBlockAddingNonMicrosoftAccountEmail: Boolean!
  antiTheftModeBlocked: Boolean!
  appsAllowTrustedAppsSideloading: GraphStateManagementSetting!
  appsBlockWindowsStoreOriginatedApps: Boolean!
  bluetoothAllowedServices: [String]
  bluetoothBlockAdvertising: Boolean!
  bluetoothBlockDiscoverableMode: Boolean!
  bluetoothBlocked: Boolean!
  bluetoothBlockPrePairing: Boolean!
  cameraBlocked: Boolean!
  cellularBlockDataWhenRoaming: Boolean!
  cellularBlockVpn: Boolean!
  cellularBlockVpnWhenRoaming: Boolean!
  certificatesBlockManualRootCertificateInstallation: Boolean!
  connectedDevicesServiceBlocked: Boolean!
  copyPasteBlocked: Boolean!
  cortanaBlocked: Boolean!
  defenderBlockEndUserAccess: Boolean!
  defenderCloudBlockLevel: GraphDefenderCloudBlockLevelType!
  defenderDaysBeforeDeletingQuarantinedMalware: Int
  defenderDetectedMalwareActions: GraphDefenderDetectedMalwareActions
  defenderFileExtensionsToExclude: [String]
  defenderFilesAndFoldersToExclude: [String]
  defenderMonitorFileActivity: GraphDefenderMonitorFileActivity!
  defenderProcessesToExclude: [String]
  defenderPromptForSampleSubmission: GraphDefenderPromptForSampleSubmission!
  defenderRequireBehaviorMonitoring: Boolean!
  defenderRequireCloudProtection: Boolean!
  defenderRequireNetworkInspectionSystem: Boolean!
  defenderRequireRealTimeMonitoring: Boolean!
  defenderScanArchiveFiles: Boolean!
  defenderScanDownloads: Boolean!
  defenderScanIncomingMail: Boolean!
  defenderScanMappedNetworkDrivesDuringFullScan: Boolean!
  defenderScanMaxCpu: Int
  defenderScanNetworkFiles: Boolean!
  defenderScanRemovableDrivesDuringFullScan: Boolean!
  defenderScanScriptsLoadedInInternetExplorer: Boolean!
  defenderScanType: GraphDefenderScanType!
  defenderScheduledQuickScanTime: String
  defenderScheduledScanTime: String
  defenderSignatureUpdateIntervalInHours: Int
  defenderSystemScanSchedule: GraphWeeklySchedule!
  developerUnlockSetting: GraphStateManagementSetting!
  deviceManagementBlockFactoryResetOnMobile: Boolean!
  deviceManagementBlockManualUnenroll: Boolean!
  diagnosticsDataSubmissionMode: GraphDiagnosticDataSubmissionMode!
  edgeAllowStartPagesModification: Boolean!
  edgeBlockAccessToAboutFlags: Boolean!
  edgeBlockAddressBarDropdown: Boolean!
  edgeBlockAutofill: Boolean!
  edgeBlockCompatibilityList: Boolean!
  edgeBlockDeveloperTools: Boolean!
  edgeBlocked: Boolean!
  edgeBlockExtensions: Boolean!
  edgeBlockInPrivateBrowsing: Boolean!
  edgeBlockJavaScript: Boolean!
  edgeBlockLiveTileDataCollection: Boolean!
  edgeBlockPasswordManager: Boolean!
  edgeBlockPopups: Boolean!
  edgeBlockSearchSuggestions: Boolean!
  edgeBlockSendingDoNotTrackHeader: Boolean!
  edgeBlockSendingIntranetTrafficToInternetExplorer: Boolean!
  edgeClearBrowsingDataOnExit: Boolean!
  edgeCookiePolicy: GraphEdgeCookiePolicy!
  edgeDisableFirstRunPage: Boolean!
  edgeEnterpriseModeSiteListLocation: String
  edgeFirstRunUrl: String
  edgeHomepageUrls: [String]
  edgeRequireSmartScreen: Boolean!
  edgeSearchEngine: GraphEdgeSearchEngineBase
  edgeSendIntranetTrafficToInternetExplorer: Boolean!
  edgeSyncFavoritesWithInternetExplorer: Boolean!
  enterpriseCloudPrintDiscoveryEndPoint: String
  enterpriseCloudPrintDiscoveryMaxLimit: Int
  enterpriseCloudPrintMopriaDiscoveryResourceIdentifier: String
  enterpriseCloudPrintOAuthAuthority: String
  enterpriseCloudPrintOAuthClientIdentifier: String
  enterpriseCloudPrintResourceIdentifier: String
  experienceBlockDeviceDiscovery: Boolean!
  experienceBlockErrorDialogWhenNoSIM: Boolean!
  experienceBlockTaskSwitcher: Boolean!
  gameDvrBlocked: Boolean!
  internetSharingBlocked: Boolean!
  locationServicesBlocked: Boolean!
  lockScreenAllowTimeoutConfiguration: Boolean!
  lockScreenBlockActionCenterNotifications: Boolean!
  lockScreenBlockCortana: Boolean!
  lockScreenBlockToastNotifications: Boolean!
  lockScreenTimeoutInSeconds: Int
  logonBlockFastUserSwitching: Boolean!
  microsoftAccountBlocked: Boolean!
  microsoftAccountBlockSettingsSync: Boolean!
  networkProxyApplySettingsDeviceWide: Boolean!
  networkProxyAutomaticConfigurationUrl: String
  networkProxyDisableAutoDetect: Boolean!
  networkProxyServer: GraphWindows10NetworkProxyServer
  nfcBlocked: Boolean!
  oneDriveDisableFileSync: Boolean!
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeScreenTimeout: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  passwordRequireWhenResumeFromIdleState: Boolean!
  passwordSignInFailureCountBeforeFactoryReset: Int
  personalizationDesktopImageUrl: String
  personalizationLockScreenImageUrl: String
  privacyAdvertisingId: GraphStateManagementSetting!
  privacyAutoAcceptPairingAndConsentPrompts: Boolean!
  privacyBlockInputPersonalization: Boolean!
  resetProtectionModeBlocked: Boolean!
  safeSearchFilter: GraphSafeSearchFilterType!
  screenCaptureBlocked: Boolean!
  searchBlockDiacritics: Boolean!
  searchDisableAutoLanguageDetection: Boolean!
  searchDisableIndexerBackoff: Boolean!
  searchDisableIndexingEncryptedItems: Boolean!
  searchDisableIndexingRemovableDrive: Boolean!
  searchEnableAutomaticIndexSizeManangement: Boolean!
  searchEnableRemoteQueries: Boolean!
  settingsBlockAccountsPage: Boolean!
  settingsBlockAddProvisioningPackage: Boolean!
  settingsBlockAppsPage: Boolean!
  settingsBlockChangeLanguage: Boolean!
  settingsBlockChangePowerSleep: Boolean!
  settingsBlockChangeRegion: Boolean!
  settingsBlockChangeSystemTime: Boolean!
  settingsBlockDevicesPage: Boolean!
  settingsBlockEaseOfAccessPage: Boolean!
  settingsBlockEditDeviceName: Boolean!
  settingsBlockGamingPage: Boolean!
  settingsBlockNetworkInternetPage: Boolean!
  settingsBlockPersonalizationPage: Boolean!
  settingsBlockPrivacyPage: Boolean!
  settingsBlockRemoveProvisioningPackage: Boolean!
  settingsBlockSettingsApp: Boolean!
  settingsBlockSystemPage: Boolean!
  settingsBlockTimeLanguagePage: Boolean!
  settingsBlockUpdateSecurityPage: Boolean!
  sharedUserAppDataAllowed: Boolean!
  smartScreenBlockPromptOverride: Boolean!
  smartScreenBlockPromptOverrideForFiles: Boolean!
  smartScreenEnableAppInstallControl: Boolean!
  startBlockUnpinningAppsFromTaskbar: Boolean!
  startMenuAppListVisibility: GraphWindowsStartMenuAppListVisibilityType!
  startMenuHideChangeAccountSettings: Boolean!
  startMenuHideFrequentlyUsedApps: Boolean!
  startMenuHideHibernate: Boolean!
  startMenuHideLock: Boolean!
  startMenuHidePowerButton: Boolean!
  startMenuHideRecentJumpLists: Boolean!
  startMenuHideRecentlyAddedApps: Boolean!
  startMenuHideRestartOptions: Boolean!
  startMenuHideShutDown: Boolean!
  startMenuHideSignOut: Boolean!
  startMenuHideSleep: Boolean!
  startMenuHideSwitchAccount: Boolean!
  startMenuHideUserTile: Boolean!
  startMenuLayoutEdgeAssetsXml: String
  startMenuLayoutXml: String
  startMenuMode: GraphWindowsStartMenuModeType!
  startMenuPinnedFolderDocuments: GraphVisibilitySetting!
  startMenuPinnedFolderDownloads: GraphVisibilitySetting!
  startMenuPinnedFolderFileExplorer: GraphVisibilitySetting!
  startMenuPinnedFolderHomeGroup: GraphVisibilitySetting!
  startMenuPinnedFolderMusic: GraphVisibilitySetting!
  startMenuPinnedFolderNetwork: GraphVisibilitySetting!
  startMenuPinnedFolderPersonalFolder: GraphVisibilitySetting!
  startMenuPinnedFolderPictures: GraphVisibilitySetting!
  startMenuPinnedFolderSettings: GraphVisibilitySetting!
  startMenuPinnedFolderVideos: GraphVisibilitySetting!
  storageBlockRemovableStorage: Boolean!
  storageRequireMobileDeviceEncryption: Boolean!
  storageRestrictAppDataToSystemVolume: Boolean!
  storageRestrictAppInstallToSystemVolume: Boolean!
  tenantLockdownRequireNetworkDuringOutOfBoxExperience: Boolean!
  usbBlocked: Boolean!
  voiceRecordingBlocked: Boolean!
  webRtcBlockLocalhostIpAddress: Boolean!
  wiFiBlockAutomaticConnectHotspots: Boolean!
  wiFiBlocked: Boolean!
  wiFiBlockManualConfiguration: Boolean!
  wiFiScanInterval: Int
  windowsSpotlightBlockConsumerSpecificFeatures: Boolean!
  windowsSpotlightBlocked: Boolean!
  windowsSpotlightBlockOnActionCenter: Boolean!
  windowsSpotlightBlockTailoredExperiences: Boolean!
  windowsSpotlightBlockThirdPartyNotifications: Boolean!
  windowsSpotlightBlockWelcomeExperience: Boolean!
  windowsSpotlightBlockWindowsTips: Boolean!
  windowsSpotlightConfigureOnLockScreen: GraphWindowsSpotlightEnablementSettings!
  windowsStoreBlockAutoUpdate: Boolean!
  windowsStoreBlocked: Boolean!
  windowsStoreEnablePrivateStoreOnly: Boolean!
  wirelessDisplayBlockProjectionToThisDevice: Boolean!
  wirelessDisplayBlockUserInputFromReceiver: Boolean!
  wirelessDisplayRequirePinForPairing: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphStateManagementSetting {
  notConfigured
  blocked
  allowed
}

enum GraphDefenderCloudBlockLevelType {
  notConfigured
  high
  highPlus
  zeroTolerance
}

enum GraphDefenderMonitorFileActivity {
  userDefined
  disable
  monitorAllFiles
  monitorIncomingFilesOnly
  monitorOutgoingFilesOnly
}

enum GraphDefenderPromptForSampleSubmission {
  userDefined
  alwaysPrompt
  promptBeforeSendingPersonalData
  neverSendData
  sendAllDataWithoutPrompting
}

enum GraphDefenderScanType {
  userDefined
  disabled
  quick
  full
}

enum GraphWeeklySchedule {
  userDefined
  everyday
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

enum GraphDiagnosticDataSubmissionMode {
  userDefined
  none
  basic
  enhanced
  full
}

enum GraphEdgeCookiePolicy {
  userDefined
  allow
  blockThirdParty
  blockAll
}

interface GraphEdgeSearchEngineBase {
  rest: JSON
}

enum GraphSafeSearchFilterType {
  userDefined
  strict
  moderate
}

enum GraphWindowsStartMenuAppListVisibilityType {
  userDefined
  collapse
  remove
  disableSettingsApp
}

enum GraphWindowsStartMenuModeType {
  userDefined
  fullScreen
  nonFullScreen
}

enum GraphVisibilitySetting {
  notConfigured
  hide
  show
}

enum GraphWindowsSpotlightEnablementSettings {
  notConfigured
  disabled
  enabled
}

type GraphWindows10MobileCompliancePolicy implements GraphDeviceCompliancePolicy {
  bitLockerEnabled: Boolean!
  codeIntegrityEnabled: Boolean!
  earlyLaunchAntiMalwareDriverEnabled: Boolean!
  osMaximumVersion: String
  osMinimumVersion: String
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  passwordRequireToUnlockFromIdle: Boolean!
  secureBootEnabled: Boolean!
  storageRequireEncryption: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

type GraphWindows10SecureAssessmentConfiguration implements GraphDeviceConfiguration {
  allowPrinting: Boolean!
  allowScreenCapture: Boolean!
  allowTextSuggestion: Boolean!
  configurationAccount: String
  launchUri: String
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphWindows10TeamGeneralConfiguration implements GraphDeviceConfiguration {
  azureOperationalInsightsBlockTelemetry: Boolean!
  azureOperationalInsightsWorkspaceId: String
  azureOperationalInsightsWorkspaceKey: String
  connectAppBlockAutoLaunch: Boolean!
  maintenanceWindowBlocked: Boolean!
  maintenanceWindowDurationInHours: Int
  maintenanceWindowStartTime: String
  miracastBlocked: Boolean!
  miracastChannel: GraphMiracastChannel!
  miracastRequirePin: Boolean!
  settingsBlockMyMeetingsAndFiles: Boolean!
  settingsBlockSessionResume: Boolean!
  settingsBlockSigninSuggestions: Boolean!
  settingsDefaultVolume: Int
  settingsScreenTimeoutInMinutes: Int
  settingsSessionTimeoutInMinutes: Int
  settingsSleepTimeoutInMinutes: Int
  welcomeScreenBackgroundImageUrl: String
  welcomeScreenBlockAutomaticWakeUp: Boolean!
  welcomeScreenMeetingInformation: GraphWelcomeScreenMeetingInformation!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphMiracastChannel {
  userDefined
  one
  two
  three
  four
  five
  six
  seven
  eight
  nine
  ten
  eleven
  thirtySix
  forty
  fortyFour
  fortyEight
  oneHundredFortyNine
  oneHundredFiftyThree
  oneHundredFiftySeven
  oneHundredSixtyOne
  oneHundredSixtyFive
}

enum GraphWelcomeScreenMeetingInformation {
  userDefined
  showOrganizerAndTimeOnly
  showOrganizerAndTimeAndSubject
}

type GraphWindows81CompliancePolicy implements GraphDeviceCompliancePolicy {
  osMaximumVersion: String
  osMinimumVersion: String
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  storageRequireEncryption: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

type GraphWindows81GeneralConfiguration implements GraphDeviceConfiguration {
  accountsBlockAddingNonMicrosoftAccountEmail: Boolean!
  applyOnlyToWindows81: Boolean!
  browserBlockAutofill: Boolean!
  browserBlockAutomaticDetectionOfIntranetSites: Boolean!
  browserBlockEnterpriseModeAccess: Boolean!
  browserBlockJavaScript: Boolean!
  browserBlockPlugins: Boolean!
  browserBlockPopups: Boolean!
  browserBlockSendingDoNotTrackHeader: Boolean!
  browserBlockSingleWordEntryOnIntranetSites: Boolean!
  browserEnterpriseModeSiteListLocation: String
  browserInternetSecurityLevel: GraphInternetSiteSecurityLevel!
  browserIntranetSecurityLevel: GraphSiteSecurityLevel!
  browserLoggingReportLocation: String
  browserRequireFirewall: Boolean!
  browserRequireFraudWarning: Boolean!
  browserRequireHighSecurityForRestrictedSites: Boolean!
  browserRequireSmartScreen: Boolean!
  browserTrustedSitesSecurityLevel: GraphSiteSecurityLevel!
  cellularBlockDataRoaming: Boolean!
  diagnosticsBlockDataSubmission: Boolean!
  passwordBlockPicturePasswordAndPin: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeScreenTimeout: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequiredType: GraphRequiredPasswordType!
  passwordSignInFailureCountBeforeFactoryReset: Int
  storageRequireDeviceEncryption: Boolean!
  updatesRequireAutomaticUpdates: Boolean!
  userAccountControlSettings: GraphWindowsUserAccountControlSettings!
  workFoldersUrl: String
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphInternetSiteSecurityLevel {
  userDefined
  medium
  mediumHigh
  high
}

enum GraphSiteSecurityLevel {
  userDefined
  low
  mediumLow
  medium
  mediumHigh
  high
}

enum GraphWindowsUserAccountControlSettings {
  userDefined
  alwaysNotify
  notifyOnAppChanges
  notifyOnAppChangesWithoutDimming
  neverNotify
}

type GraphWindowsDefenderAdvancedThreatProtectionConfiguration implements GraphDeviceConfiguration {
  allowSampleSharing: Boolean!
  enableExpeditedTelemetryReporting: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphWindowsPhone81CompliancePolicy implements GraphDeviceCompliancePolicy {
  osMaximumVersion: String
  osMinimumVersion: String
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeLock: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  storageRequireEncryption: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceCompliancePolicyAssignment]
  assignmentsById(id: ID): GraphDeviceCompliancePolicyAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceComplianceDeviceStatus
  deviceStatusOverview: GraphDeviceComplianceDeviceOverview
  scheduledActionsForRule(queryOptions: QueryOptions): [GraphDeviceComplianceScheduledActionForRule]
  scheduledActionsForRuleById(id: ID): GraphDeviceComplianceScheduledActionForRule
  userStatuses(queryOptions: QueryOptions): [GraphDeviceComplianceUserStatus]
  userStatusesById(id: ID): GraphDeviceComplianceUserStatus
  userStatusOverview: GraphDeviceComplianceUserOverview
  assign(
    bindingParameter: GraphDeviceCompliancePolicyInput
    assignments: [GraphDeviceCompliancePolicyAssignmentInput]
  ): JSON
  scheduleActionsForRules(
    bindingParameter: GraphDeviceCompliancePolicyInput
    deviceComplianceScheduledActionForRules: [GraphDeviceComplianceScheduledActionForRuleInput]
  ): JSON
  id: String!
}

type GraphWindowsPhone81CustomConfiguration implements GraphDeviceConfiguration {
  omaSettings: [GraphOmaSetting]
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphWindowsPhone81GeneralConfiguration implements GraphDeviceConfiguration {
  applyOnlyToWindowsPhone81: Boolean!
  appsBlockCopyPaste: Boolean!
  bluetoothBlocked: Boolean!
  cameraBlocked: Boolean!
  cellularBlockWifiTethering: Boolean!
  compliantAppListType: GraphAppListType!
  compliantAppsList: [GraphAppListItem]
  diagnosticDataBlockSubmission: Boolean!
  emailBlockAddingAccounts: Boolean!
  locationServicesBlocked: Boolean!
  microsoftAccountBlocked: Boolean!
  nfcBlocked: Boolean!
  passwordBlockSimple: Boolean!
  passwordExpirationDays: Int
  passwordMinimumCharacterSetCount: Int
  passwordMinimumLength: Int
  passwordMinutesOfInactivityBeforeScreenTimeout: Int
  passwordPreviousPasswordBlockCount: Int
  passwordRequired: Boolean!
  passwordRequiredType: GraphRequiredPasswordType!
  passwordSignInFailureCountBeforeFactoryReset: Int
  screenCaptureBlocked: Boolean!
  storageBlockRemovableStorage: Boolean!
  storageRequireEncryption: Boolean!
  webBrowserBlocked: Boolean!
  wifiBlockAutomaticConnectHotspots: Boolean!
  wifiBlocked: Boolean!
  wifiBlockHotspotReporting: Boolean!
  windowsStoreBlocked: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

type GraphWindowsUpdateForBusinessConfiguration implements GraphDeviceConfiguration {
  automaticUpdateMode: GraphAutomaticUpdateMode!
  businessReadyUpdatesOnly: GraphWindowsUpdateType!
  deliveryOptimizationMode: GraphWindowsDeliveryOptimizationMode!
  driversExcluded: Boolean!
  featureUpdatesDeferralPeriodInDays: Int!
  featureUpdatesPaused: Boolean!
  featureUpdatesPauseExpiryDateTime: DateTime!
  installationSchedule: GraphWindowsUpdateInstallScheduleType
  microsoftUpdateServiceAllowed: Boolean!
  prereleaseFeatures: GraphPrereleaseFeatures!
  qualityUpdatesDeferralPeriodInDays: Int!
  qualityUpdatesPaused: Boolean!
  qualityUpdatesPauseExpiryDateTime: DateTime!
  createdDateTime: DateTime!
  description: String
  displayName: String!
  lastModifiedDateTime: DateTime!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphDeviceConfigurationAssignment]
  assignmentsById(id: ID): GraphDeviceConfigurationAssignment
  deviceSettingStateSummaries(queryOptions: QueryOptions): [GraphSettingStateDeviceSummary]
  deviceSettingStateSummariesById(id: ID): GraphSettingStateDeviceSummary
  deviceStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationDeviceStatus]
  deviceStatusesById(id: ID): GraphDeviceConfigurationDeviceStatus
  deviceStatusOverview: GraphDeviceConfigurationDeviceOverview
  userStatuses(queryOptions: QueryOptions): [GraphDeviceConfigurationUserStatus]
  userStatusesById(id: ID): GraphDeviceConfigurationUserStatus
  userStatusOverview: GraphDeviceConfigurationUserOverview
  assign(bindingParameter: GraphDeviceConfigurationInput, assignments: [GraphDeviceConfigurationAssignmentInput]): JSON
  id: String!
}

enum GraphAutomaticUpdateMode {
  userDefined
  notifyDownload
  autoInstallAtMaintenanceTime
  autoInstallAndRebootAtMaintenanceTime
  autoInstallAndRebootAtScheduledTime
  autoInstallAndRebootWithoutEndUserControl
}

enum GraphWindowsUpdateType {
  userDefined
  all
  businessReadyOnly
  windowsInsiderBuildFast
  windowsInsiderBuildSlow
  windowsInsiderBuildRelease
}

enum GraphWindowsDeliveryOptimizationMode {
  userDefined
  httpOnly
  httpWithPeeringNat
  httpWithPeeringPrivateGroup
  httpWithInternetPeering
  simpleDownload
  bypassMode
}

interface GraphWindowsUpdateInstallScheduleType {
  rest: JSON
}

enum GraphPrereleaseFeatures {
  userDefined
  settingsOnly
  settingsAndExperimentations
  notAllowed
}

type GraphEnrollmentConfigurationAssignment implements GraphEntity {
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

type GraphDeviceEnrollmentLimitConfiguration implements GraphDeviceEnrollmentConfiguration {
  limit: Int!
  createdDateTime: DateTime!
  description: String
  displayName: String
  lastModifiedDateTime: DateTime!
  priority: Int!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphEnrollmentConfigurationAssignment]
  assignmentsById(id: ID): GraphEnrollmentConfigurationAssignment
  assign(
    bindingParameter: GraphDeviceEnrollmentConfigurationInput
    enrollmentConfigurationAssignments: [GraphEnrollmentConfigurationAssignmentInput]
  ): JSON
  setPriority(bindingParameter: GraphDeviceEnrollmentConfigurationInput, priority: Int!): JSON
  id: String!
}

type GraphDeviceEnrollmentPlatformRestrictionsConfiguration implements GraphDeviceEnrollmentConfiguration {
  androidRestriction: GraphDeviceEnrollmentPlatformRestriction
  iosRestriction: GraphDeviceEnrollmentPlatformRestriction
  macOSRestriction: GraphDeviceEnrollmentPlatformRestriction
  windowsMobileRestriction: GraphDeviceEnrollmentPlatformRestriction
  windowsRestriction: GraphDeviceEnrollmentPlatformRestriction
  createdDateTime: DateTime!
  description: String
  displayName: String
  lastModifiedDateTime: DateTime!
  priority: Int!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphEnrollmentConfigurationAssignment]
  assignmentsById(id: ID): GraphEnrollmentConfigurationAssignment
  assign(
    bindingParameter: GraphDeviceEnrollmentConfigurationInput
    enrollmentConfigurationAssignments: [GraphEnrollmentConfigurationAssignmentInput]
  ): JSON
  setPriority(bindingParameter: GraphDeviceEnrollmentConfigurationInput, priority: Int!): JSON
  id: String!
}

type GraphDeviceEnrollmentWindowsHelloForBusinessConfiguration implements GraphDeviceEnrollmentConfiguration {
  enhancedBiometricsState: GraphEnablement!
  pinExpirationInDays: Int!
  pinLowercaseCharactersUsage: GraphWindowsHelloForBusinessPinUsage!
  pinMaximumLength: Int!
  pinMinimumLength: Int!
  pinPreviousBlockCount: Int!
  pinSpecialCharactersUsage: GraphWindowsHelloForBusinessPinUsage!
  pinUppercaseCharactersUsage: GraphWindowsHelloForBusinessPinUsage!
  remotePassportEnabled: Boolean!
  securityDeviceRequired: Boolean!
  state: GraphEnablement!
  unlockWithBiometricsEnabled: Boolean!
  createdDateTime: DateTime!
  description: String
  displayName: String
  lastModifiedDateTime: DateTime!
  priority: Int!
  version: Int!
  assignments(queryOptions: QueryOptions): [GraphEnrollmentConfigurationAssignment]
  assignmentsById(id: ID): GraphEnrollmentConfigurationAssignment
  assign(
    bindingParameter: GraphDeviceEnrollmentConfigurationInput
    enrollmentConfigurationAssignments: [GraphEnrollmentConfigurationAssignmentInput]
  ): JSON
  setPriority(bindingParameter: GraphDeviceEnrollmentConfigurationInput, priority: Int!): JSON
  id: String!
}

enum GraphEnablement {
  notConfigured
  enabled
  disabled
}

enum GraphWindowsHelloForBusinessPinUsage {
  allowed
  required
  disallowed
}

type GraphImportedWindowsAutopilotDeviceIdentityUpload implements GraphEntity {
  createdDateTimeUtc: DateTime!
  status: GraphImportedWindowsAutopilotDeviceIdentityUploadStatus!
  deviceIdentities(queryOptions: QueryOptions): [GraphImportedWindowsAutopilotDeviceIdentity]
  deviceIdentitiesById(id: ID): GraphImportedWindowsAutopilotDeviceIdentity
  id: String!
}

enum GraphImportedWindowsAutopilotDeviceIdentityUploadStatus {
  noUpload
  pending
  complete
  error
}

type GraphManagedMobileApp implements GraphEntity {
  mobileAppIdentifier: GraphMobileAppIdentifier
  version: String
  id: String!
}

type GraphManagedAppPolicyDeploymentSummary implements GraphEntity {
  configurationDeployedUserCount: Int!
  configurationDeploymentSummaryPerApp: [GraphManagedAppPolicyDeploymentSummaryPerApp]
  displayName: String
  lastRefreshTime: DateTime!
  version: String
  id: String!
}

type GraphAndroidManagedAppRegistration implements GraphManagedAppRegistration {
  rest: JSON
  appIdentifier: GraphMobileAppIdentifier
  applicationVersion: String
  createdDateTime: DateTime!
  deviceName: String
  deviceTag: String
  deviceType: String
  flaggedReasons: [GraphManagedAppFlaggedReason]!
  lastSyncDateTime: DateTime!
  managementSdkVersion: String
  platformVersion: String
  userId: String
  version: String
  appliedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  appliedPoliciesById(id: ID): GraphManagedAppPolicy
  intendedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  intendedPoliciesById(id: ID): GraphManagedAppPolicy
  operations(queryOptions: QueryOptions): [GraphManagedAppOperation]
  operationsById(id: ID): GraphManagedAppOperation
  getUserIdsWithFlaggedAppRegistration: [String]
  id: String!
}

type GraphIosManagedAppRegistration implements GraphManagedAppRegistration {
  rest: JSON
  appIdentifier: GraphMobileAppIdentifier
  applicationVersion: String
  createdDateTime: DateTime!
  deviceName: String
  deviceTag: String
  deviceType: String
  flaggedReasons: [GraphManagedAppFlaggedReason]!
  lastSyncDateTime: DateTime!
  managementSdkVersion: String
  platformVersion: String
  userId: String
  version: String
  appliedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  appliedPoliciesById(id: ID): GraphManagedAppPolicy
  intendedPolicies(queryOptions: QueryOptions): [GraphManagedAppPolicy]
  intendedPoliciesById(id: ID): GraphManagedAppPolicy
  operations(queryOptions: QueryOptions): [GraphManagedAppOperation]
  operationsById(id: ID): GraphManagedAppOperation
  getUserIdsWithFlaggedAppRegistration: [String]
  id: String!
}

type GraphManagedAppOperation implements GraphEntity {
  displayName: String
  lastModifiedDateTime: DateTime!
  state: String
  version: String
  id: String!
}

type GraphManagedAppStatusRaw implements GraphManagedAppStatus {
  content: GraphJson
  displayName: String
  version: String
  id: String!
}

type GraphTargetedManagedAppPolicyAssignment implements GraphEntity {
  target: GraphDeviceAndAppManagementAssignmentTarget
  id: String!
}

type GraphWindowsInformationProtectionAppLockerFile implements GraphEntity {
  displayName: String
  file: String
  fileHash: String
  version: String
  id: String!
}

type GraphLocalizedNotificationMessage implements GraphEntity {
  isDefault: Boolean!
  lastModifiedDateTime: DateTime!
  locale: String!
  messageTemplate: String!
  subject: String!
  id: String!
}

type GraphSearchEntity implements GraphEntity {
  rest: JSON
  query(bindingParameter: GraphSearchEntityInput, requests: [GraphSearchRequestInput]!): JSON
  id: String!
}

input GraphSearchEntityInput {
  rest: JSON
  id: String!
}

input GraphSearchRequestInput {
  contentSources: [String]
  enableTopResults: Boolean
  entityTypes: [GraphEntityType]
  fields: [String]
  from: Int!
  query: GraphSearchQueryInput!
  size: Int!
}

enum GraphEntityType {
  event
  message
  driveItem
  externalItem
  site
  list
  listItem
  drive
  unknownfuturevalue
}

input GraphSearchQueryInput {
  queryString: String!
}

type GraphPlanner implements GraphEntity {
  buckets(queryOptions: QueryOptions): [GraphPlannerBucket]
  bucketsById(id: ID): GraphPlannerBucket
  plans(queryOptions: QueryOptions): [GraphPlannerPlan]
  plansById(id: ID): GraphPlannerPlan
  tasks(queryOptions: QueryOptions): [GraphPlannerTask]
  tasksById(id: ID): GraphPlannerTask
  id: String!
}

type GraphPlannerBucket implements GraphEntity {
  name: String!
  orderHint: String
  planId: String
  tasks(queryOptions: QueryOptions): [GraphPlannerTask]
  tasksById(id: ID): GraphPlannerTask
  id: String!
}

type GraphPlannerPlan implements GraphEntity {
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  owner: String
  title: String!
  buckets(queryOptions: QueryOptions): [GraphPlannerBucket]
  bucketsById(id: ID): GraphPlannerBucket
  details: GraphPlannerPlanDetails
  tasks(queryOptions: QueryOptions): [GraphPlannerTask]
  tasksById(id: ID): GraphPlannerTask
  id: String!
}

type GraphPlannerTask implements GraphEntity {
  activeChecklistItemCount: Int
  appliedCategories: GraphPlannerAppliedCategories
  assigneePriority: String
  assignments: GraphPlannerAssignments
  bucketId: String
  checklistItemCount: Int
  completedBy: GraphIdentitySet
  completedDateTime: DateTime
  conversationThreadId: String
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  dueDateTime: DateTime
  hasDescription: Boolean
  orderHint: String
  percentComplete: Int
  planId: String
  previewType: GraphPlannerPreviewType
  referenceCount: Int
  startDateTime: DateTime
  title: String!
  assignedToTaskBoardFormat: GraphPlannerAssignedToTaskBoardTaskFormat
  bucketTaskBoardFormat: GraphPlannerBucketTaskBoardTaskFormat
  details: GraphPlannerTaskDetails
  progressTaskBoardFormat: GraphPlannerProgressTaskBoardTaskFormat
  id: String!
}

enum GraphPlannerPreviewType {
  automatic
  noPreview
  checklist
  description
  reference
}

type GraphPlannerAssignedToTaskBoardTaskFormat implements GraphEntity {
  orderHintsByAssignee: GraphPlannerOrderHintsByAssignee
  unassignedOrderHint: String
  id: String!
}

type GraphPlannerBucketTaskBoardTaskFormat implements GraphEntity {
  orderHint: String
  id: String!
}

type GraphPlannerPlanDetails implements GraphEntity {
  categoryDescriptions: GraphPlannerCategoryDescriptions
  sharedWith: GraphPlannerUserIds
  id: String!
}

type GraphPlannerProgressTaskBoardTaskFormat implements GraphEntity {
  orderHint: String
  id: String!
}

type GraphPlannerTaskDetails implements GraphEntity {
  checklist: GraphPlannerChecklistItems
  description: String
  previewType: GraphPlannerPreviewType
  references: GraphPlannerExternalReferences
  id: String!
}

type GraphSharedInsight implements GraphEntity {
  lastShared: GraphSharingDetail
  resourceReference: GraphResourceReference
  resourceVisualization: GraphResourceVisualization
  sharingHistory: [GraphSharingDetail]
  lastSharedMethod: GraphEntity
  resource: GraphEntity
  id: String!
}

type GraphTrending implements GraphEntity {
  lastModifiedDateTime: DateTime
  resourceReference: GraphResourceReference
  resourceVisualization: GraphResourceVisualization
  weight: Float!
  resource: GraphEntity
  id: String!
}

type GraphUsedInsight implements GraphEntity {
  lastUsed: GraphUsageDetails
  resourceReference: GraphResourceReference
  resourceVisualization: GraphResourceVisualization
  resource: GraphEntity
  id: String!
}

type TGraphChangeTrackedEntity implements GraphChangeTrackedEntity & GraphEntity {
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

interface GraphChangeTrackedEntity {
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphShiftPreferences implements GraphChangeTrackedEntity {
  availability: [GraphShiftAvailability]
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type TGraphOnenoteEntityBaseModel implements GraphOnenoteEntityBaseModel & GraphEntity {
  self: String
  id: String!
}

interface GraphOnenoteEntityBaseModel {
  self: String
  id: String!
}

type TGraphOnenoteEntitySchemaObjectModel implements GraphOnenoteEntitySchemaObjectModel & GraphOnenoteEntityBaseModel {
  createdDateTime: DateTime
  self: String
  id: String!
}

interface GraphOnenoteEntitySchemaObjectModel {
  createdDateTime: DateTime
  self: String
  id: String!
}

type TGraphOnenoteEntityHierarchyModel implements GraphOnenoteEntityHierarchyModel & GraphOnenoteEntitySchemaObjectModel {
  createdBy: GraphIdentitySet
  displayName: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  createdDateTime: DateTime
  self: String
  id: String!
}

interface GraphOnenoteEntityHierarchyModel {
  createdBy: GraphIdentitySet
  displayName: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  createdDateTime: DateTime
  self: String
  id: String!
}

type GraphNotebook implements GraphOnenoteEntityHierarchyModel {
  isDefault: Boolean
  isShared: Boolean
  links: GraphNotebookLinks
  sectionGroupsUrl: String
  sectionsUrl: String
  userRole: GraphOnenoteUserRole
  sectionGroups(queryOptions: QueryOptions): [GraphSectionGroup]
  sectionGroupsById(id: ID): GraphSectionGroup
  sections(queryOptions: QueryOptions): [GraphOnenoteSection]
  sectionsById(id: ID): GraphOnenoteSection
  getRecentNotebooks: [GraphRecentNotebook]
  copyNotebook(
    bindingParameter: GraphNotebookInput
    groupId: String
    renameAs: String
    notebookFolder: String
    siteCollectionId: String
    siteId: String
  ): JSON
  getNotebookFromWebUrl(bindingParameter: [GraphNotebookInput], webUrl: String): JSON
  createdBy: GraphIdentitySet
  displayName: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  createdDateTime: DateTime
  self: String
  id: String!
}

enum GraphOnenoteUserRole {
  None
  Owner
  Contributor
  Reader
}

input GraphNotebookInput {
  isDefault: Boolean
  isShared: Boolean
  links: GraphNotebookLinksInput
  sectionGroupsUrl: String
  sectionsUrl: String
  userRole: GraphOnenoteUserRole
  createdBy: GraphIdentitySetInput
  displayName: String
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime
  createdDateTime: DateTime
  self: String
  id: String!
}

input GraphNotebookLinksInput {
  oneNoteClientUrl: GraphExternalLinkInput
  oneNoteWebUrl: GraphExternalLinkInput
}

input GraphExternalLinkInput {
  href: String
}

type GraphSectionGroup implements GraphOnenoteEntityHierarchyModel {
  sectionGroupsUrl: String
  sectionsUrl: String
  parentNotebook: GraphNotebook
  parentSectionGroup: GraphSectionGroup
  sectionGroups(queryOptions: QueryOptions): [GraphSectionGroup]
  sectionGroupsById(id: ID): GraphSectionGroup
  sections(queryOptions: QueryOptions): [GraphOnenoteSection]
  sectionsById(id: ID): GraphOnenoteSection
  createdBy: GraphIdentitySet
  displayName: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  createdDateTime: DateTime
  self: String
  id: String!
}

type GraphOnenoteSection implements GraphOnenoteEntityHierarchyModel {
  isDefault: Boolean
  links: GraphSectionLinks
  pagesUrl: String
  pages(queryOptions: QueryOptions): [GraphOnenotePage]
  pagesById(id: ID): GraphOnenotePage
  parentNotebook: GraphNotebook
  parentSectionGroup: GraphSectionGroup
  copyToNotebook(
    bindingParameter: GraphOnenoteSectionInput
    id: String
    groupId: String
    renameAs: String
    siteCollectionId: String
    siteId: String
  ): JSON
  copyToSectionGroup(
    bindingParameter: GraphOnenoteSectionInput
    id: String
    groupId: String
    renameAs: String
    siteCollectionId: String
    siteId: String
  ): JSON
  createdBy: GraphIdentitySet
  displayName: String
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  createdDateTime: DateTime
  self: String
  id: String!
}

input GraphOnenoteSectionInput {
  isDefault: Boolean
  links: GraphSectionLinksInput
  pagesUrl: String
  createdBy: GraphIdentitySetInput
  displayName: String
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime
  createdDateTime: DateTime
  self: String
  id: String!
}

input GraphSectionLinksInput {
  oneNoteClientUrl: GraphExternalLinkInput
  oneNoteWebUrl: GraphExternalLinkInput
}

type GraphOperation implements GraphEntity {
  createdDateTime: DateTime
  lastActionDateTime: DateTime
  status: GraphOperationStatus
  id: String!
}

enum GraphOperationStatus {
  NotStarted
  Running
  Completed
  Failed
}

type GraphOnenoteOperation {
  error: GraphOnenoteOperationError
  percentComplete: String
  resourceId: String
  resourceLocation: String
  createdDateTime: DateTime
  lastActionDateTime: DateTime
  status: GraphOperationStatus
  id: String!
}

type GraphOnenotePage implements GraphOnenoteEntitySchemaObjectModel {
  content: String
  contentUrl: String
  createdByAppId: String
  lastModifiedDateTime: DateTime
  level: Int
  links: GraphPageLinks
  order: Int
  title: String
  userTags: [String]
  parentNotebook: GraphNotebook
  parentSection: GraphOnenoteSection
  preview: GraphOnenotePagePreview
  copyToSection(
    bindingParameter: GraphOnenotePageInput
    id: String
    groupId: String
    siteCollectionId: String
    siteId: String
  ): JSON
  onenotePatchContent(bindingParameter: GraphOnenotePageInput, commands: [GraphOnenotePatchContentCommandInput]): JSON
  createdDateTime: DateTime
  self: String
  id: String!
}

input GraphOnenotePageInput {
  content: String
  contentUrl: String
  createdByAppId: String
  lastModifiedDateTime: DateTime
  level: Int
  links: GraphPageLinksInput
  order: Int
  title: String
  userTags: [String]
  createdDateTime: DateTime
  self: String
  id: String!
}

input GraphPageLinksInput {
  oneNoteClientUrl: GraphExternalLinkInput
  oneNoteWebUrl: GraphExternalLinkInput
}

input GraphOnenotePatchContentCommandInput {
  action: GraphOnenotePatchActionType!
  content: String
  position: GraphOnenotePatchInsertPosition
  target: String!
}

enum GraphOnenotePatchActionType {
  Replace
  Append
  Delete
  Insert
  Prepend
}

enum GraphOnenotePatchInsertPosition {
  After
  Before
}

type GraphOnenoteResource implements GraphOnenoteEntityBaseModel {
  content: String
  contentUrl: String
  self: String
  id: String!
}

type GraphPrint {
  settings: GraphPrintSettings
  connectors(queryOptions: QueryOptions): [GraphPrintConnector]
  connectorsById(id: ID): GraphPrintConnector
  operations(queryOptions: QueryOptions): [GraphPrintOperation]
  operationsById(id: ID): GraphPrintOperation
  printers(queryOptions: QueryOptions): [GraphPrinter]
  printersById(id: ID): GraphPrinter
  services(queryOptions: QueryOptions): [GraphPrintService]
  servicesById(id: ID): GraphPrintService
  shares(queryOptions: QueryOptions): [GraphPrinterShare]
  sharesById(id: ID): GraphPrinterShare
  taskDefinitions(queryOptions: QueryOptions): [GraphPrintTaskDefinition]
  taskDefinitionsById(id: ID): GraphPrintTaskDefinition
}

interface GraphPrintOperation {
  createdDateTime: DateTime!
  status: GraphPrintOperationStatus!
  id: String!
}

type GraphPrintConnector implements GraphEntity {
  appVersion: String!
  displayName: String!
  fullyQualifiedDomainName: String!
  location: GraphPrinterLocation
  operatingSystem: String!
  registeredDateTime: DateTime!
  id: String!
}

type TGraphPrintOperation implements GraphPrintOperation & GraphEntity {
  createdDateTime: DateTime!
  status: GraphPrintOperationStatus!
  id: String!
}

type TGraphPrinterBase implements GraphPrinterBase & GraphEntity {
  capabilities: GraphPrinterCapabilities
  defaults: GraphPrinterDefaults
  displayName: String!
  isAcceptingJobs: Boolean
  location: GraphPrinterLocation
  manufacturer: String
  model: String
  status: GraphPrinterStatus!
  jobs(queryOptions: QueryOptions): [GraphPrintJob]
  jobsById(id: ID): GraphPrintJob
  id: String!
}

interface GraphPrinterBase {
  capabilities: GraphPrinterCapabilities
  defaults: GraphPrinterDefaults
  displayName: String!
  isAcceptingJobs: Boolean
  location: GraphPrinterLocation
  manufacturer: String
  model: String
  status: GraphPrinterStatus!
  jobs(queryOptions: QueryOptions): [GraphPrintJob]
  jobsById(id: ID): GraphPrintJob
  id: String!
}

type GraphPrinter implements GraphPrinterBase {
  hasPhysicalDevice: Boolean!
  isShared: Boolean!
  lastSeenDateTime: DateTime
  registeredDateTime: DateTime!
  connectors(queryOptions: QueryOptions): [GraphPrintConnector]
  connectorsById(id: ID): GraphPrintConnector
  shares(queryOptions: QueryOptions): [GraphPrinterShare]
  sharesById(id: ID): GraphPrinterShare
  taskTriggers(queryOptions: QueryOptions): [GraphPrintTaskTrigger]
  taskTriggersById(id: ID): GraphPrintTaskTrigger
  create(
    bindingParameter: [GraphPrinterInput]
    displayName: String!
    manufacturer: String!
    model: String!
    physicalDeviceId: String
    hasPhysicalDevice: Boolean
    certificateSigningRequest: GraphPrintCertificateSigningRequestInput!
    connectorId: String
  ): JSON
  restoreFactoryDefaults(bindingParameter: GraphPrinterInput): JSON
  capabilities: GraphPrinterCapabilities
  defaults: GraphPrinterDefaults
  displayName: String!
  isAcceptingJobs: Boolean
  location: GraphPrinterLocation
  manufacturer: String
  model: String
  status: GraphPrinterStatus!
  jobs(queryOptions: QueryOptions): [GraphPrintJob]
  jobsById(id: ID): GraphPrintJob
  id: String!
}

input GraphPrinterInput {
  hasPhysicalDevice: Boolean!
  isShared: Boolean!
  lastSeenDateTime: DateTime
  registeredDateTime: DateTime!
  capabilities: GraphPrinterCapabilitiesInput
  defaults: GraphPrinterDefaultsInput
  displayName: String!
  isAcceptingJobs: Boolean
  location: GraphPrinterLocationInput
  manufacturer: String
  model: String
  status: GraphPrinterStatusInput!
  id: String!
}

input GraphPrinterCapabilitiesInput {
  bottomMargins: [Int]
  collation: Boolean
  colorModes: [GraphPrintColorMode]
  contentTypes: [String]
  copiesPerJob: GraphIntegerRangeInput
  dpis: [Int]
  duplexModes: [GraphPrintDuplexMode]
  feedOrientations: [GraphPrinterFeedOrientation]
  finishings: [GraphPrintFinishing]
  inputBins: [String]
  isColorPrintingSupported: Boolean
  isPageRangeSupported: Boolean
  leftMargins: [Int]
  mediaColors: [String]
  mediaSizes: [String]
  mediaTypes: [String]
  multipageLayouts: [GraphPrintMultipageLayout]
  orientations: [GraphPrintOrientation]
  outputBins: [String]
  pagesPerSheet: [Int]
  qualities: [GraphPrintQuality]
  rightMargins: [Int]
  scalings: [GraphPrintScaling]
  supportsFitPdfToPage: Boolean
  topMargins: [Int]
}

enum GraphPrintColorMode {
  blackAndWhite
  grayscale
  color
  auto
  unknownFutureValue
}

input GraphIntegerRangeInput {
  end: BigInt
  start: BigInt
}

enum GraphPrintDuplexMode {
  flipOnLongEdge
  flipOnShortEdge
  oneSided
  unknownFutureValue
}

enum GraphPrinterFeedOrientation {
  longEdgeFirst
  shortEdgeFirst
  unknownFutureValue
}

enum GraphPrintFinishing {
  none
  staple
  punch
  cover
  bind
  saddleStitch
  stitchEdge
  stapleTopLeft
  stapleBottomLeft
  stapleTopRight
  stapleBottomRight
  stitchLeftEdge
  stitchTopEdge
  stitchRightEdge
  stitchBottomEdge
  stapleDualLeft
  stapleDualTop
  stapleDualRight
  stapleDualBottom
  unknownFutureValue
}

enum GraphPrintMultipageLayout {
  clockwiseFromTopLeft
  counterclockwiseFromTopLeft
  counterclockwiseFromTopRight
  clockwiseFromTopRight
  counterclockwiseFromBottomLeft
  clockwiseFromBottomLeft
  counterclockwiseFromBottomRight
  clockwiseFromBottomRight
  unknownFutureValue
}

enum GraphPrintOrientation {
  portrait
  landscape
  reverseLandscape
  reversePortrait
  unknownFutureValue
}

enum GraphPrintQuality {
  low
  medium
  high
  unknownFutureValue
}

enum GraphPrintScaling {
  auto
  shrinkToFit
  fill
  fit
  none
  unknownFutureValue
}

input GraphPrinterDefaultsInput {
  colorMode: GraphPrintColorMode
  contentType: String
  copiesPerJob: Int
  dpi: Int
  duplexMode: GraphPrintDuplexMode
  finishings: [GraphPrintFinishing]
  fitPdfToPage: Boolean
  inputBin: String
  mediaColor: String
  mediaSize: String
  mediaType: String
  multipageLayout: GraphPrintMultipageLayout
  orientation: GraphPrintOrientation
  outputBin: String
  pagesPerSheet: Int
  quality: GraphPrintQuality
  scaling: GraphPrintScaling
}

input GraphPrinterLocationInput {
  altitudeInMeters: Int
  building: String
  city: String
  countryOrRegion: String
  floor: String
  floorDescription: String
  latitude: Float
  longitude: Float
  organization: [String]
  postalCode: String
  roomDescription: String
  roomName: String
  site: String
  stateOrProvince: String
  streetAddress: String
  subdivision: [String]
  subunit: [String]
}

input GraphPrinterStatusInput {
  description: String
  details: [GraphPrinterProcessingStateDetail]!
  state: GraphPrinterProcessingState!
}

enum GraphPrinterProcessingStateDetail {
  paused
  mediaJam
  mediaNeeded
  mediaLow
  mediaEmpty
  coverOpen
  interlockOpen
  outputTrayMissing
  outputAreaFull
  markerSupplyLow
  markerSupplyEmpty
  inputTrayMissing
  outputAreaAlmostFull
  markerWasteAlmostFull
  markerWasteFull
  fuserOverTemp
  fuserUnderTemp
  other
  none
  movingToPaused
  shutdown
  connectingToDevice
  timedOut
  stopping
  stoppedPartially
  tonerLow
  tonerEmpty
  spoolAreaFull
  doorOpen
  opticalPhotoConductorNearEndOfLife
  opticalPhotoConductorLifeOver
  developerLow
  developerEmpty
  interpreterResourceUnavailable
  unknownFutureValue
}

enum GraphPrinterProcessingState {
  unknown
  idle
  processing
  stopped
  unknownFutureValue
}

input GraphPrintCertificateSigningRequestInput {
  content: String!
  transportKey: String!
}

type GraphPrintService implements GraphEntity {
  endpoints(queryOptions: QueryOptions): [GraphPrintServiceEndpoint]
  endpointsById(id: ID): GraphPrintServiceEndpoint
  id: String!
}

type GraphPrinterShare implements GraphPrinterBase {
  allowAllUsers: Boolean!
  createdDateTime: DateTime!
  allowedGroups(queryOptions: QueryOptions): [GraphGroup]
  allowedGroupsById(id: ID): GraphGroup
  allowedUsers(queryOptions: QueryOptions): [GraphUser]
  allowedUsersById(id: ID): GraphUser
  printer: GraphPrinter
  capabilities: GraphPrinterCapabilities
  defaults: GraphPrinterDefaults
  displayName: String!
  isAcceptingJobs: Boolean
  location: GraphPrinterLocation
  manufacturer: String
  model: String
  status: GraphPrinterStatus!
  jobs(queryOptions: QueryOptions): [GraphPrintJob]
  jobsById(id: ID): GraphPrintJob
  id: String!
}

type GraphPrintTaskDefinition implements GraphEntity {
  createdBy: GraphAppIdentity!
  displayName: String!
  tasks(queryOptions: QueryOptions): [GraphPrintTask]
  tasksById(id: ID): GraphPrintTask
  id: String!
}

type GraphPrintDocument implements GraphEntity {
  contentType: String
  displayName: String
  size: BigInt!
  createUploadSession(
    bindingParameter: GraphPrintDocumentInput
    properties: GraphPrintDocumentUploadPropertiesInput!
  ): JSON
  id: String!
}

input GraphPrintDocumentInput {
  contentType: String
  displayName: String
  size: BigInt!
  id: String!
}

input GraphPrintDocumentUploadPropertiesInput {
  contentType: String!
  documentName: String!
  size: BigInt!
}

type GraphPrintTaskTrigger implements GraphEntity {
  event: GraphPrintEvent!
  definition: GraphPrintTaskDefinition!
  id: String!
}

enum GraphPrintEvent {
  jobStarted
  unknownFutureValue
}

type GraphPrintJob implements GraphEntity {
  configuration: GraphPrintJobConfiguration!
  createdBy: GraphUserIdentity
  createdDateTime: DateTime!
  isFetchable: Boolean!
  redirectedFrom: String
  redirectedTo: String
  status: GraphPrintJobStatus!
  documents(queryOptions: QueryOptions): [GraphPrintDocument]
  documentsById(id: ID): GraphPrintDocument
  tasks(queryOptions: QueryOptions): [GraphPrintTask]
  tasksById(id: ID): GraphPrintTask
  cancel(bindingParameter: GraphPrintJobInput): JSON
  abort(bindingParameter: GraphPrintJobInput, reason: String): JSON
  redirect(
    bindingParameter: GraphPrintJobInput
    destinationPrinterId: String!
    configuration: GraphPrintJobConfigurationInput
  ): JSON
  start(bindingParameter: GraphPrintJobInput): JSON
  id: String!
}

input GraphPrintJobInput {
  configuration: GraphPrintJobConfigurationInput!
  createdBy: GraphUserIdentityInput
  createdDateTime: DateTime!
  isFetchable: Boolean!
  redirectedFrom: String
  redirectedTo: String
  status: GraphPrintJobStatusInput!
  id: String!
}

input GraphPrintJobConfigurationInput {
  collate: Boolean
  colorMode: GraphPrintColorMode
  copies: Int
  dpi: Int
  duplexMode: GraphPrintDuplexMode
  feedOrientation: GraphPrinterFeedOrientation
  finishings: [GraphPrintFinishing]
  fitPdfToPage: Boolean
  inputBin: String
  margin: GraphPrintMarginInput
  mediaSize: String
  mediaType: String
  multipageLayout: GraphPrintMultipageLayout
  orientation: GraphPrintOrientation
  outputBin: String
  pageRanges: [GraphIntegerRangeInput]
  pagesPerSheet: Int
  quality: GraphPrintQuality
  scaling: GraphPrintScaling
}

input GraphPrintMarginInput {
  bottom: Int
  left: Int
  right: Int
  top: Int
}

input GraphPrintJobStatusInput {
  description: String!
  details: [GraphPrintJobStateDetail]!
  isAcquiredByPrinter: Boolean!
  state: GraphPrintJobProcessingState!
}

enum GraphPrintJobStateDetail {
  uploadPending
  transforming
  completedSuccessfully
  completedWithWarnings
  completedWithErrors
  releaseWait
  interpreting
  unknownFutureValue
}

enum GraphPrintJobProcessingState {
  unknown
  pending
  processing
  paused
  stopped
  completed
  canceled
  aborted
  unknownFutureValue
}

type GraphPrinterCreateOperation implements GraphPrintOperation {
  certificate: String
  printer: GraphPrinter
  createdDateTime: DateTime!
  status: GraphPrintOperationStatus!
  id: String!
}

type GraphPrintTask implements GraphEntity {
  parentUrl: String!
  status: GraphPrintTaskStatus!
  definition: GraphPrintTaskDefinition!
  trigger: GraphPrintTaskTrigger!
  id: String!
}

type GraphPrintServiceEndpoint implements GraphEntity {
  displayName: String!
  uri: String!
  id: String!
}

type GraphActivityHistoryItem implements GraphEntity {
  activeDurationSeconds: Int
  createdDateTime: DateTime
  expirationDateTime: DateTime
  lastActiveDateTime: DateTime
  lastModifiedDateTime: DateTime
  startedDateTime: DateTime!
  status: GraphStatus
  userTimezone: String
  activity: GraphUserActivity!
  id: String!
}

type GraphDataPolicyOperation implements GraphEntity {
  completedDateTime: DateTime
  progress: Float!
  status: GraphDataPolicyOperationStatus
  storageLocation: String
  submittedDateTime: DateTime!
  userId: String!
  id: String!
}

enum GraphDataPolicyOperationStatus {
  notStarted
  running
  complete
  failed
  unknownFutureValue
}

type GraphAlert implements GraphEntity {
  activityGroupName: String
  alertDetections: [GraphAlertDetection]
  assignedTo: String
  azureSubscriptionId: String
  azureTenantId: String!
  category: String
  closedDateTime: DateTime
  cloudAppStates: [GraphCloudAppSecurityState]
  comments: [String]
  confidence: Int
  createdDateTime: DateTime
  description: String
  detectionIds: [String]
  eventDateTime: DateTime
  feedback: GraphAlertFeedback
  fileStates: [GraphFileSecurityState]
  historyStates: [GraphAlertHistoryState]
  hostStates: [GraphHostSecurityState]
  incidentIds: [String]
  investigationSecurityStates: [GraphInvestigationSecurityState]
  lastEventDateTime: DateTime
  lastModifiedDateTime: DateTime
  malwareStates: [GraphMalwareState]
  messageSecurityStates: [GraphMessageSecurityState]
  networkConnections: [GraphNetworkConnection]
  processes: [GraphProcess]
  recommendedActions: [String]
  registryKeyStates: [GraphRegistryKeyState]
  securityResources: [GraphSecurityResource]
  severity: GraphAlertSeverity!
  sourceMaterials: [String]
  status: GraphAlertStatus!
  tags: [String]
  title: String
  triggers: [GraphAlertTrigger]
  uriClickSecurityStates: [GraphUriClickSecurityState]
  userStates: [GraphUserSecurityState]
  vendorInformation: GraphSecurityVendorInformation
  vulnerabilityStates: [GraphVulnerabilityState]
  rest: JSON
  id: String!
}

enum GraphAlertFeedback {
  unknown
  truePositive
  falsePositive
  benignPositive
  unknownFutureValue
}

enum GraphAlertSeverity {
  unknown
  informational
  low
  medium
  high
  unknownFutureValue
}

enum GraphAlertStatus {
  unknown
  newAlert
  inProgress
  resolved
  dismissed
  unknownFutureValue
}

type GraphSecureScore implements GraphEntity {
  activeUserCount: Int
  averageComparativeScores: [GraphAverageComparativeScore]
  azureTenantId: String!
  controlScores: [GraphControlScore]
  createdDateTime: DateTime
  currentScore: Float
  enabledServices: [String]
  licensedUserCount: Int
  maxScore: Float
  vendorInformation: GraphSecurityVendorInformation
  rest: JSON
  id: String!
}

type GraphSecureScoreControlProfile implements GraphEntity {
  actionType: String
  actionUrl: String
  azureTenantId: String!
  complianceInformation: [GraphComplianceInformation]
  controlCategory: String
  controlStateUpdates: [GraphSecureScoreControlStateUpdate]
  deprecated: Boolean
  implementationCost: String
  lastModifiedDateTime: DateTime
  maxScore: Float
  rank: Int
  remediation: String
  remediationImpact: String
  service: String
  threats: [String]
  tier: String
  title: String
  userImpact: String
  vendorInformation: GraphSecurityVendorInformation
  rest: JSON
  id: String!
}

type GraphSecurity implements GraphEntity {
  alerts(queryOptions: QueryOptions): [GraphAlert]
  alertsById(id: ID): GraphAlert
  secureScoreControlProfiles(queryOptions: QueryOptions): [GraphSecureScoreControlProfile]
  secureScoreControlProfilesById(id: ID): GraphSecureScoreControlProfile
  secureScores(queryOptions: QueryOptions): [GraphSecureScore]
  secureScoresById(id: ID): GraphSecureScore
  id: String!
}

type GraphCommsOperation implements GraphEntity {
  clientContext: String
  resultInfo: GraphResultInfo
  status: GraphOperationStatus!
  rest: JSON
  id: String!
}

type GraphParticipant implements GraphEntity {
  info: GraphParticipantInfo!
  isInLobby: Boolean!
  isMuted: Boolean!
  mediaStreams: [GraphMediaStream]
  recordingInfo: GraphRecordingInfo
  invite(
    bindingParameter: [GraphParticipantInput]
    participants: [GraphInvitationParticipantInfoInput]!
    clientContext: String
  ): JSON
  mute(bindingParameter: GraphParticipantInput, clientContext: String): JSON
  id: String!
}

input GraphParticipantInput {
  info: GraphParticipantInfoInput!
  isInLobby: Boolean!
  isMuted: Boolean!
  mediaStreams: [GraphMediaStreamInput]
  recordingInfo: GraphRecordingInfoInput
  id: String!
}

input GraphMediaStreamInput {
  direction: GraphMediaDirection!
  label: String
  mediaType: GraphModality!
  serverMuted: Boolean!
  sourceId: String!
}

enum GraphMediaDirection {
  inactive
  sendOnly
  receiveOnly
  sendReceive
}

input GraphRecordingInfoInput {
  initiator: GraphIdentitySetInput
  recordingStatus: GraphRecordingStatus!
}

type TGraphAuthenticationMethod implements GraphAuthenticationMethod & GraphEntity {
  rest: JSON
  id: String!
}

type GraphFido2AuthenticationMethod implements GraphAuthenticationMethod {
  aaGuid: String
  attestationCertificates: [String]
  attestationLevel: GraphAttestationLevel
  createdDateTime: DateTime
  displayName: String
  model: String
  rest: JSON
  id: String!
}

enum GraphAttestationLevel {
  attested
  notAttested
  unknownFutureValue
}

type GraphMicrosoftAuthenticatorAuthenticationMethod implements GraphAuthenticationMethod {
  createdDateTime: DateTime
  deviceTag: String
  displayName: String
  phoneAppVersion: String
  device: GraphDevice
  rest: JSON
  id: String!
}

type GraphWindowsHelloForBusinessAuthenticationMethod implements GraphAuthenticationMethod {
  createdDateTime: DateTime
  displayName: String
  keyStrength: GraphAuthenticationMethodKeyStrength
  device: GraphDevice
  rest: JSON
  id: String!
}

enum GraphAuthenticationMethodKeyStrength {
  normal
  weak
  unknown
}

type TGraphConversationMember implements GraphConversationMember & GraphEntity {
  displayName: String
  roles: [String]
  visibleHistoryStartDateTime: DateTime
  id: String!
}

type GraphAadUserConversationMember implements GraphConversationMember {
  email: String
  tenantId: String
  userId: String
  user: GraphUser
  displayName: String
  roles: [String]
  visibleHistoryStartDateTime: DateTime
  id: String!
}

type GraphAppCatalogs implements GraphEntity {
  teamsApps(queryOptions: QueryOptions): [GraphTeamsApp]
  teamsAppsById(id: ID): GraphTeamsApp
  id: String!
}

type GraphTeamsApp implements GraphEntity {
  displayName: String
  distributionMethod: GraphTeamsAppDistributionMethod
  externalId: String
  appDefinitions(queryOptions: QueryOptions): [GraphTeamsAppDefinition]
  appDefinitionsById(id: ID): GraphTeamsAppDefinition
  id: String!
}

enum GraphTeamsAppDistributionMethod {
  store
  organization
  sideloaded
  unknownFutureValue
}

type GraphChannel implements GraphEntity {
  createdDateTime: DateTime
  description: String
  displayName: String!
  email: String
  isFavoriteByDefault: Boolean
  membershipType: GraphChannelMembershipType
  webUrl: String
  filesFolder: GraphDriveItem
  members(queryOptions: QueryOptions): [GraphConversationMember]
  membersById(id: ID): GraphConversationMember
  messages(queryOptions: QueryOptions): [GraphChatMessage]
  messagesById(id: ID): GraphChatMessage
  tabs(queryOptions: QueryOptions): [GraphTeamsTab]
  tabsById(id: ID): GraphTeamsTab
  completeMigration(bindingParameter: GraphChannelInput): JSON
  id: String!
}

enum GraphChannelMembershipType {
  standard
  private
  unknownFutureValue
}

input GraphChannelInput {
  createdDateTime: DateTime
  description: String
  displayName: String!
  email: String
  isFavoriteByDefault: Boolean
  membershipType: GraphChannelMembershipType
  webUrl: String
  id: String!
}

type GraphChatMessage implements GraphEntity {
  attachments: [GraphChatMessageAttachment]
  body: GraphItemBody!
  channelIdentity: GraphChannelIdentity
  chatId: String
  createdDateTime: DateTime
  deletedDateTime: DateTime
  etag: String
  from: GraphIdentitySet
  importance: GraphChatMessageImportance!
  lastEditedDateTime: DateTime
  lastModifiedDateTime: DateTime
  locale: String!
  mentions: [GraphChatMessageMention]
  messageType: GraphChatMessageType!
  policyViolation: GraphChatMessagePolicyViolation
  reactions: [GraphChatMessageReaction]
  replyToId: String
  subject: String
  summary: String
  webUrl: String
  hostedContents(queryOptions: QueryOptions): [GraphChatMessageHostedContent]
  hostedContentsById(id: ID): GraphChatMessageHostedContent
  replies(queryOptions: QueryOptions): [GraphChatMessage]
  repliesById(id: ID): GraphChatMessage
  delta: [GraphChatMessage]
  id: String!
}

enum GraphChatMessageImportance {
  normal
  high
  urgent
  unknownFutureValue
}

enum GraphChatMessageType {
  message
  chatEvent
  typing
  unknownFutureValue
}

type GraphTeamsTab implements GraphEntity {
  configuration: GraphTeamsTabConfiguration
  displayName: String
  webUrl: String
  teamsApp: GraphTeamsApp
  id: String!
}

type GraphTeamsAppInstallation implements GraphEntity {
  teamsApp: GraphTeamsApp
  teamsAppDefinition: GraphTeamsAppDefinition
  upgrade(bindingParameter: GraphTeamsAppInstallationInput): JSON
  id: String!
}

input GraphTeamsAppInstallationInput {
  id: String!
}

type GraphTeamworkHostedContent implements GraphEntity {
  contentBytes: String
  contentType: String
  id: String!
}

type GraphChatMessageHostedContent {
  rest: JSON
  contentBytes: String
  contentType: String
  id: String!
}

type GraphSchedule implements GraphEntity {
  enabled: Boolean
  offerShiftRequestsEnabled: Boolean
  openShiftsEnabled: Boolean
  provisionStatus: GraphOperationStatus
  provisionStatusCode: String
  swapShiftsRequestsEnabled: Boolean
  timeClockEnabled: Boolean
  timeOffRequestsEnabled: Boolean
  timeZone: String
  workforceIntegrationIds: [String]
  offerShiftRequests(queryOptions: QueryOptions): [GraphOfferShiftRequest]
  offerShiftRequestsById(id: ID): GraphOfferShiftRequest
  openShiftChangeRequests(queryOptions: QueryOptions): [GraphOpenShiftChangeRequest]
  openShiftChangeRequestsById(id: ID): GraphOpenShiftChangeRequest
  openShifts(queryOptions: QueryOptions): [GraphOpenShift]
  openShiftsById(id: ID): GraphOpenShift
  schedulingGroups(queryOptions: QueryOptions): [GraphSchedulingGroup]
  schedulingGroupsById(id: ID): GraphSchedulingGroup
  shifts(queryOptions: QueryOptions): [GraphShift]
  shiftsById(id: ID): GraphShift
  swapShiftsChangeRequests(queryOptions: QueryOptions): [GraphSwapShiftsChangeRequest]
  swapShiftsChangeRequestsById(id: ID): GraphSwapShiftsChangeRequest
  timeOffReasons(queryOptions: QueryOptions): [GraphTimeOffReason]
  timeOffReasonsById(id: ID): GraphTimeOffReason
  timeOffRequests(queryOptions: QueryOptions): [GraphTimeOffRequest]
  timeOffRequestsById(id: ID): GraphTimeOffRequest
  timesOff(queryOptions: QueryOptions): [GraphTimeOff]
  timesOffById(id: ID): GraphTimeOff
  share(bindingParameter: GraphScheduleInput, notifyTeam: Boolean, startDateTime: DateTime, endDateTime: DateTime): JSON
  id: String!
}

interface GraphOpenShiftChangeRequest {
  openShiftId: String
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  decline(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  approve(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

enum GraphScheduleChangeRequestActor {
  sender
  recipient
  manager
  system
  unknownFutureValue
}

enum GraphScheduleChangeState {
  pending
  approved
  declined
  unknownFutureValue
}

input GraphScheduleChangeRequestInput {
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime
  id: String!
}

input GraphScheduleInput {
  enabled: Boolean
  offerShiftRequestsEnabled: Boolean
  openShiftsEnabled: Boolean
  provisionStatus: GraphOperationStatus
  provisionStatusCode: String
  swapShiftsRequestsEnabled: Boolean
  timeClockEnabled: Boolean
  timeOffRequestsEnabled: Boolean
  timeZone: String
  workforceIntegrationIds: [String]
  id: String!
}

type GraphTeamsAsyncOperation implements GraphEntity {
  attemptsCount: Int!
  createdDateTime: DateTime!
  error: GraphOperationError
  lastActionDateTime: DateTime!
  operationType: GraphTeamsAsyncOperationType!
  status: GraphTeamsAsyncOperationStatus!
  targetResourceId: String
  targetResourceLocation: String
  rest: JSON
  id: String!
}

enum GraphTeamsAsyncOperationType {
  invalid
  cloneTeam
  archiveTeam
  unarchiveTeam
  createTeam
  unknownFutureValue
}

enum GraphTeamsAsyncOperationStatus {
  invalid
  notStarted
  inProgress
  succeeded
  failed
  unknownFutureValue
}

type GraphTeamsTemplate implements GraphEntity {
  rest: JSON
  id: String!
}

type GraphTeamsAppDefinition implements GraphEntity {
  createdBy: GraphIdentitySet
  description: String
  displayName: String
  lastModifiedDateTime: DateTime
  publishingState: GraphTeamsAppPublishingState
  shortDescription: String
  teamsAppId: String
  version: String
  bot: GraphTeamworkBot
  id: String!
}

enum GraphTeamsAppPublishingState {
  submitted
  rejected
  published
  unknownFutureValue
}

type GraphTeamworkBot implements GraphEntity {
  rest: JSON
  id: String!
}

type GraphTeamwork implements GraphEntity {
  workforceIntegrations(queryOptions: QueryOptions): [GraphWorkforceIntegration]
  workforceIntegrationsById(id: ID): GraphWorkforceIntegration
  id: String!
}

type GraphWorkforceIntegration implements GraphChangeTrackedEntity {
  apiVersion: Int
  displayName: String
  encryption: GraphWorkforceIntegrationEncryption
  isActive: Boolean
  supportedEntities: GraphWorkforceIntegrationSupportedEntities
  url: String
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

enum GraphWorkforceIntegrationSupportedEntities {
  none
  shift
  swapRequest
  userShiftPreferences
  openShift
  openShiftRequest
  offerShiftRequest
  unknownFutureValue
}

type GraphUserScopeTeamsAppInstallation {
  chat: GraphChat
  teamsApp: GraphTeamsApp
  teamsAppDefinition: GraphTeamsAppDefinition
  upgrade(bindingParameter: GraphTeamsAppInstallationInput): JSON
  id: String!
}

type TGraphScheduleChangeRequest implements GraphScheduleChangeRequest & GraphChangeTrackedEntity {
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  decline(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  approve(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

interface GraphScheduleChangeRequest {
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  decline(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  approve(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphOfferShiftRequest implements GraphScheduleChangeRequest {
  recipientActionDateTime: DateTime
  recipientActionMessage: String
  recipientUserId: String
  senderShiftId: String
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  decline(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  approve(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphOpenShift implements GraphChangeTrackedEntity {
  draftOpenShift: GraphOpenShiftItem
  schedulingGroupId: String
  sharedOpenShift: GraphOpenShiftItem
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type TGraphOpenShiftChangeRequest implements GraphOpenShiftChangeRequest & GraphScheduleChangeRequest {
  openShiftId: String
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  decline(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  approve(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphSchedulingGroup implements GraphChangeTrackedEntity {
  displayName: String
  isActive: Boolean
  userIds: [String]
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphShift implements GraphChangeTrackedEntity {
  draftShift: GraphShiftItem
  schedulingGroupId: String
  sharedShift: GraphShiftItem
  userId: String
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphSwapShiftsChangeRequest {
  recipientShiftId: String
  recipientActionDateTime: DateTime
  recipientActionMessage: String
  recipientUserId: String
  senderShiftId: String
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  decline(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  approve(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphTimeOffReason implements GraphChangeTrackedEntity {
  displayName: String
  iconType: GraphTimeOffReasonIconType
  isActive: Boolean
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

enum GraphTimeOffReasonIconType {
  none
  car
  calendar
  running
  plane
  firstAid
  doctor
  notWorking
  clock
  juryDuty
  globe
  cup
  phone
  weather
  umbrella
  piggyBank
  dog
  cake
  trafficCone
  pin
  sunny
  unknownFutureValue
}

type GraphTimeOffRequest implements GraphScheduleChangeRequest {
  endDateTime: DateTime
  startDateTime: DateTime
  timeOffReasonId: String
  assignedTo: GraphScheduleChangeRequestActor
  managerActionDateTime: DateTime
  managerActionMessage: String
  managerUserId: String
  senderDateTime: DateTime
  senderMessage: String
  senderUserId: String
  state: GraphScheduleChangeState
  decline(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  approve(bindingParameter: GraphScheduleChangeRequestInput, message: String): JSON
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type GraphTimeOff implements GraphChangeTrackedEntity {
  draftTimeOff: GraphTimeOffItem
  sharedTimeOff: GraphTimeOffItem
  userId: String
  createdDateTime: DateTime
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  id: String!
}

type TGraphThreatAssessmentRequest implements GraphThreatAssessmentRequest & GraphEntity {
  category: GraphThreatCategory!
  contentType: GraphThreatAssessmentContentType
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  expectedAssessment: GraphThreatExpectedAssessment!
  requestSource: GraphThreatAssessmentRequestSource
  status: GraphThreatAssessmentStatus
  results(queryOptions: QueryOptions): [GraphThreatAssessmentResult]
  resultsById(id: ID): GraphThreatAssessmentResult
  id: String!
}

interface GraphThreatAssessmentRequest {
  category: GraphThreatCategory!
  contentType: GraphThreatAssessmentContentType
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  expectedAssessment: GraphThreatExpectedAssessment!
  requestSource: GraphThreatAssessmentRequestSource
  status: GraphThreatAssessmentStatus
  results(queryOptions: QueryOptions): [GraphThreatAssessmentResult]
  resultsById(id: ID): GraphThreatAssessmentResult
  id: String!
}

enum GraphThreatCategory {
  undefined
  spam
  phishing
  malware
  unknownFutureValue
}

enum GraphThreatAssessmentContentType {
  mail
  url
  file
}

enum GraphThreatExpectedAssessment {
  block
  unblock
}

enum GraphThreatAssessmentRequestSource {
  undefined
  user
  administrator
}

enum GraphThreatAssessmentStatus {
  pending
  completed
}

type GraphEmailFileAssessmentRequest implements GraphThreatAssessmentRequest {
  contentData: String!
  destinationRoutingReason: GraphMailDestinationRoutingReason
  recipientEmail: String!
  category: GraphThreatCategory!
  contentType: GraphThreatAssessmentContentType
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  expectedAssessment: GraphThreatExpectedAssessment!
  requestSource: GraphThreatAssessmentRequestSource
  status: GraphThreatAssessmentStatus
  results(queryOptions: QueryOptions): [GraphThreatAssessmentResult]
  resultsById(id: ID): GraphThreatAssessmentResult
  id: String!
}

enum GraphMailDestinationRoutingReason {
  none
  mailFlowRule
  safeSender
  blockedSender
  advancedSpamFiltering
  domainAllowList
  domainBlockList
  notInAddressBook
  firstTimeSender
  autoPurgeToInbox
  autoPurgeToJunk
  autoPurgeToDeleted
  outbound
  notJunk
  junk
  unknownFutureValue
}

type GraphFileAssessmentRequest implements GraphThreatAssessmentRequest {
  contentData: String!
  fileName: String!
  category: GraphThreatCategory!
  contentType: GraphThreatAssessmentContentType
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  expectedAssessment: GraphThreatExpectedAssessment!
  requestSource: GraphThreatAssessmentRequestSource
  status: GraphThreatAssessmentStatus
  results(queryOptions: QueryOptions): [GraphThreatAssessmentResult]
  resultsById(id: ID): GraphThreatAssessmentResult
  id: String!
}

type GraphInformationProtection implements GraphEntity {
  threatAssessmentRequests(queryOptions: QueryOptions): [GraphThreatAssessmentRequest]
  threatAssessmentRequestsById(id: ID): GraphThreatAssessmentRequest
  id: String!
}

type GraphMailAssessmentRequest implements GraphThreatAssessmentRequest {
  destinationRoutingReason: GraphMailDestinationRoutingReason
  messageUri: String!
  recipientEmail: String!
  category: GraphThreatCategory!
  contentType: GraphThreatAssessmentContentType
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  expectedAssessment: GraphThreatExpectedAssessment!
  requestSource: GraphThreatAssessmentRequestSource
  status: GraphThreatAssessmentStatus
  results(queryOptions: QueryOptions): [GraphThreatAssessmentResult]
  resultsById(id: ID): GraphThreatAssessmentResult
  id: String!
}

type GraphThreatAssessmentResult implements GraphEntity {
  createdDateTime: DateTime
  message: String
  resultType: GraphThreatAssessmentResultType
  id: String!
}

enum GraphThreatAssessmentResultType {
  checkPolicy
  rescan
  unknownFutureValue
}

type GraphUrlAssessmentRequest implements GraphThreatAssessmentRequest {
  url: String!
  category: GraphThreatCategory!
  contentType: GraphThreatAssessmentContentType
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  expectedAssessment: GraphThreatExpectedAssessment!
  requestSource: GraphThreatAssessmentRequestSource
  status: GraphThreatAssessmentStatus
  results(queryOptions: QueryOptions): [GraphThreatAssessmentResult]
  resultsById(id: ID): GraphThreatAssessmentResult
  id: String!
}

type GraphLinkedResource implements GraphEntity {
  applicationName: String
  displayName: String
  externalId: String
  webUrl: String
  id: String!
}

type GraphTodoTaskList implements GraphEntity {
  displayName: String
  isOwner: Boolean!
  isShared: Boolean!
  wellknownListName: GraphWellknownListName!
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  tasks(queryOptions: QueryOptions): [GraphTodoTask]
  tasksById(id: ID): GraphTodoTask
  delta: [GraphTodoTaskList]
  id: String!
}

enum GraphWellknownListName {
  none
  defaultList
  flaggedEmails
  unknownFutureValue
}

type GraphTodoTask implements GraphEntity {
  body: GraphItemBody
  bodyLastModifiedDateTime: DateTime!
  completedDateTime: GraphDateTimeTimeZone
  createdDateTime: DateTime!
  dueDateTime: GraphDateTimeTimeZone
  importance: GraphImportance!
  isReminderOn: Boolean!
  lastModifiedDateTime: DateTime!
  recurrence: GraphPatternedRecurrence
  reminderDateTime: GraphDateTimeTimeZone
  status: GraphTaskStatus!
  title: String
  extensions(queryOptions: QueryOptions): [GraphExtension]
  extensionsById(id: ID): GraphExtension
  linkedResources(queryOptions: QueryOptions): [GraphLinkedResource]
  linkedResourcesById(id: ID): GraphLinkedResource
  delta: [GraphTodoTask]
  id: String!
}

enum GraphTaskStatus {
  notStarted
  inProgress
  completed
  waitingOnOthers
  deferred
}

type GraphAppIdentity {
  appId: String
  displayName: String
  servicePrincipalId: String
  servicePrincipalName: String
}

type GraphAppliedConditionalAccessPolicy {
  displayName: String
  enforcedGrantControls: [String]
  enforcedSessionControls: [String]
  id: String
  result: GraphAppliedConditionalAccessPolicyResult
}

enum GraphAppliedConditionalAccessPolicyResult {
  success
  failure
  notApplied
  notEnabled
  unknown
  unknownFutureValue
}

type GraphAuditActivityInitiator {
  app: GraphAppIdentity
  user: GraphUserIdentity
}

type GraphIdentity {
  displayName: String
  id: String
  rest: JSON
}

type GraphUserIdentity {
  ipAddress: String
  userPrincipalName: String
  rest: JSON
  displayName: String
  id: String
}

type GraphDetailsInfo {
  rest: JSON
}

type GraphDeviceDetail {
  browser: String
  deviceId: String
  displayName: String
  isCompliant: Boolean
  isManaged: Boolean
  operatingSystem: String
  trustType: String
}

type GraphGeoCoordinates {
  altitude: Float
  latitude: Float
  longitude: Float
}

type GraphInitiator {
  initiatorType: GraphInitiatorType
  rest: JSON
  displayName: String
  id: String
}

enum GraphInitiatorType {
  user
  application
  system
  unknownFutureValue
}

type GraphKeyValue {
  key: String
  value: String
}

type GraphModifiedProperty {
  displayName: String
  newValue: String
  oldValue: String
}

type GraphProvisionedIdentity {
  details: GraphDetailsInfo
  identityType: String
  rest: JSON
  displayName: String
  id: String
}

type GraphProvisioningErrorInfo {
  additionalDetails: String
  errorCategory: GraphProvisioningStatusErrorCategory
  errorCode: String
  reason: String
  recommendedAction: String
}

enum GraphProvisioningStatusErrorCategory {
  failure
  nonServiceFailure
  success
  unknownFutureValue
}

type GraphProvisioningServicePrincipal {
  rest: JSON
  displayName: String
  id: String
}

type GraphProvisioningStatusInfo {
  errorInformation: GraphProvisioningErrorInfo
  status: GraphProvisioningResult
}

enum GraphProvisioningResult {
  success
  failure
  skipped
  warning
  unknownFutureValue
}

type GraphProvisioningStep {
  description: String
  details: GraphDetailsInfo
  name: String
  provisioningStepType: GraphProvisioningStepType
  status: GraphProvisioningResult
}

enum GraphProvisioningStepType {
  import
  scoping
  matching
  processing
  referenceResolution
  export
  unknownFutureValue
}

type GraphProvisioningSystem {
  details: GraphDetailsInfo
  rest: JSON
  displayName: String
  id: String
}

type GraphSignInLocation {
  city: String
  countryOrRegion: String
  geoCoordinates: GraphGeoCoordinates
  state: String
}

type GraphSignInStatus {
  additionalDetails: String
  errorCode: Int
  failureReason: String
}

type GraphTargetResource {
  displayName: String
  groupType: GraphGroupType
  id: String
  modifiedProperties: [GraphModifiedProperty]
  type: String
  userPrincipalName: String
}

enum GraphGroupType {
  unifiedGroups
  azureAD
  unknownFutureValue
}

type GraphEmailAddress {
  address: String
  name: String
}

type GraphInvitedUserMessageInfo {
  ccRecipients: [GraphRecipient]
  customizedMessageBody: String
  messageLanguage: String
}

type GraphRecipient {
  emailAddress: GraphEmailAddress
}

type GraphAssignedLicense {
  disabledPlans: [GUID]!
  skuId: GUID
}

type GraphAssignedPlan {
  assignedDateTime: DateTime
  capabilityStatus: String
  service: String
  servicePlanId: GUID
}

type GraphEmployeeOrgData {
  costCenter: String
  division: String
}

type GraphObjectIdentity {
  issuer: String
  issuerAssignedId: String
  signInType: String
}

type GraphLicenseAssignmentState {
  assignedByGroup: String
  disabledPlans: [GUID]
  error: String
  skuId: GUID
  state: String
}

type GraphOnPremisesExtensionAttributes {
  extensionAttribute1: String
  extensionAttribute10: String
  extensionAttribute11: String
  extensionAttribute12: String
  extensionAttribute13: String
  extensionAttribute14: String
  extensionAttribute15: String
  extensionAttribute2: String
  extensionAttribute3: String
  extensionAttribute4: String
  extensionAttribute5: String
  extensionAttribute6: String
  extensionAttribute7: String
  extensionAttribute8: String
  extensionAttribute9: String
}

type GraphOnPremisesProvisioningError {
  category: String
  occurredDateTime: DateTime
  propertyCausingError: String
  value: String
}

type GraphPasswordProfile {
  forceChangePasswordNextSignIn: Boolean
  forceChangePasswordNextSignInWithMfa: Boolean
  password: String
}

type GraphProvisionedPlan {
  capabilityStatus: String
  provisioningStatus: String
  service: String
}

type GraphMailboxSettings {
  archiveFolder: String
  automaticRepliesSetting: GraphAutomaticRepliesSetting
  dateFormat: String
  delegateMeetingMessageDeliveryOptions: GraphDelegateMeetingMessageDeliveryOptions
  language: GraphLocaleInfo
  timeFormat: String
  timeZone: String
  workingHours: GraphWorkingHours
}

type GraphAddIn {
  id: GUID
  properties: [GraphKeyValue]!
  type: String!
}

type GraphApiApplication {
  acceptMappedClaims: Boolean
  knownClientApplications: [GUID]
  oauth2PermissionScopes: [GraphPermissionScope]!
  preAuthorizedApplications: [GraphPreAuthorizedApplication]
  requestedAccessTokenVersion: Int
}

type GraphAppRole {
  allowedMemberTypes: [String]!
  description: String
  displayName: String
  id: GUID!
  isEnabled: Boolean!
  origin: String
  value: String
}

type GraphInformationalUrl {
  logoUrl: String
  marketingUrl: String
  privacyStatementUrl: String
  supportUrl: String
  termsOfServiceUrl: String
}

type GraphKeyCredential {
  customKeyIdentifier: String
  displayName: String
  endDateTime: DateTime
  key: String
  keyId: GUID
  startDateTime: DateTime
  type: String
  usage: String
}

type GraphOptionalClaims {
  accessToken: [GraphOptionalClaim]
  idToken: [GraphOptionalClaim]
  saml2Token: [GraphOptionalClaim]
}

type GraphParentalControlSettings {
  countriesBlockedForMinors: [String]
  legalAgeGroupRule: String
}

type GraphPasswordCredential {
  customKeyIdentifier: String
  displayName: String
  endDateTime: DateTime
  hint: String
  keyId: GUID
  secretText: String
  startDateTime: DateTime
}

type GraphPublicClientApplication {
  redirectUris: [String]!
}

type GraphRequiredResourceAccess {
  resourceAccess: [GraphResourceAccess]!
  resourceAppId: String!
}

type GraphSpaApplication {
  redirectUris: [String]!
}

type GraphWebApplication {
  homePageUrl: String
  implicitGrantSettings: GraphImplicitGrantSettings
  logoutUrl: String
  redirectUris: [String]!
}

type GraphPermissionScope {
  adminConsentDescription: String
  adminConsentDisplayName: String
  id: GUID!
  isEnabled: Boolean!
  origin: String
  type: String
  userConsentDescription: String
  userConsentDisplayName: String
  value: String
}

type GraphSamlSingleSignOnSettings {
  relayState: String
}

type GraphFido2KeyRestrictions {
  aaGuids: [String]
  enforcementType: GraphFido2RestrictionEnforcementType
  isEnforced: Boolean
}

enum GraphFido2RestrictionEnforcementType {
  allow
  block
  unknownFutureValue
}

type TGraphApiAuthenticationConfigurationBase implements GraphApiAuthenticationConfigurationBase {
  rest: JSON
}

type GraphAssignmentOrder {
  order: [String]
}

type GraphBasicAuthentication implements GraphApiAuthenticationConfigurationBase {
  password: String
  username: String
  rest: JSON
}

type GraphClientCertificateAuthentication implements GraphApiAuthenticationConfigurationBase {
  certificateList: [GraphPkcs12CertificateInformation]
  rest: JSON
}

type GraphPkcs12CertificateInformation {
  isActive: Boolean!
  notAfter: BigInt!
  notBefore: BigInt!
  thumbprint: String
}

type GraphPkcs12Certificate implements GraphApiAuthenticationConfigurationBase {
  password: String
  pkcs12Value: String
  rest: JSON
}

type GraphSelfServiceSignUpAuthenticationFlowConfiguration {
  isEnabled: Boolean!
}

type GraphUserAttributeValuesItem {
  isDefault: Boolean!
  name: String
  value: String
}

type GraphUserFlowApiConnectorConfiguration {
  postAttributeCollection: GraphIdentityApiConnector
  postFederationSignup: GraphIdentityApiConnector
}

type GraphAlternativeSecurityId {
  identityProvider: String
  key: String
  type: Int
}

type GraphPreAuthorizedApplication {
  appId: String
  delegatedPermissionIds: [String]!
}

type GraphAssignedLabel {
  displayName: String
  labelId: String
}

type GraphCertificateAuthority {
  certificate: String!
  certificateRevocationListUrl: String
  deltaCertificateRevocationListUrl: String
  isRootAuthority: Boolean!
  issuer: String!
  issuerSki: String!
}

type GraphDefaultUserRolePermissions {
  allowedToCreateApps: Boolean!
  allowedToCreateSecurityGroups: Boolean!
  allowedToReadOtherUsers: Boolean!
  permissionGrantPoliciesAssigned: [String]
}

type GraphDomainState {
  lastActionDateTime: DateTime
  operation: String
  status: String
}

type GraphImplicitGrantSettings {
  enableAccessTokenIssuance: Boolean
  enableIdTokenIssuance: Boolean
}

type GraphLicenseProcessingState {
  state: String
}

type GraphLicenseUnitsDetail {
  enabled: Int
  suspended: Int
  warning: Int
}

type GraphOptionalClaim {
  additionalProperties: [String]
  essential: Boolean!
  name: String!
  source: String
}

type GraphPhone {
  language: String
  number: String
  region: String
  type: GraphPhoneType
}

type GraphPhysicalOfficeAddress {
  city: String
  countryOrRegion: String
  officeLocation: String
  postalCode: String
  state: String
  street: String
}

type GraphPrivacyProfile {
  contactEmail: String
  statementUrl: String
}

type GraphResourceAccess {
  id: GUID!
  type: String
}

type GraphServicePlanInfo {
  appliesTo: String
  provisioningStatus: String
  servicePlanId: GUID
  servicePlanName: String
}

type GraphSettingTemplateValue {
  defaultValue: String
  description: String
  name: String
  type: String
}

type GraphSettingValue {
  name: String
  value: String
}

type GraphVerifiedDomain {
  capabilities: String
  isDefault: Boolean
  isInitial: Boolean
  name: String
  type: String
}

type GraphEducationCourse {
  courseNumber: String
  description: String
  displayName: String
  externalId: String
  subject: String
}

type GraphEducationOnPremisesInfo {
  immutableId: String
}

type GraphEducationStudent {
  birthDate: Date
  externalId: String
  gender: GraphEducationGender
  grade: String
  graduationYear: String
  studentNumber: String
}

enum GraphEducationGender {
  female
  male
  other
  unknownFutureValue
}

type GraphEducationTeacher {
  externalId: String
  teacherNumber: String
}

type GraphEducationTerm {
  displayName: String
  endDate: Date
  externalId: String
  startDate: Date
}

type GraphIdentitySet {
  application: GraphIdentity
  device: GraphIdentity
  user: GraphIdentity
  rest: JSON
}

type GraphPhysicalAddress {
  city: String
  countryOrRegion: String
  postalCode: String
  state: String
  street: String
}

type GraphUnifiedRolePermission {
  allowedResourceActions: [String]!
  condition: String
  excludedResourceActions: [String]
}

type GraphJson {
  rest: JSON
}

type GraphWorkbookFilterCriteria {
  color: String
  criterion1: String
  criterion2: String
  dynamicCriteria: String!
  filterOn: String!
  icon: GraphWorkbookIcon
  operator: String!
  values: GraphJson
}

type GraphWorkbookIcon {
  index: Int!
  set: String!
}

type GraphWorkbookOperationError {
  code: String
  innerError: GraphWorkbookOperationError
  message: String
}

type GraphWorkbookSessionInfo {
  id: String
  persistChanges: Boolean
}

type GraphWorkbookSortField {
  ascending: Boolean!
  color: String
  dataOption: String!
  icon: GraphWorkbookIcon
  key: Int!
  sortOn: String!
}

type GraphWorkbookWorksheetProtectionOptions {
  allowAutoFilter: Boolean!
  allowDeleteColumns: Boolean!
  allowDeleteRows: Boolean!
  allowFormatCells: Boolean!
  allowFormatColumns: Boolean!
  allowFormatRows: Boolean!
  allowInsertColumns: Boolean!
  allowInsertHyperlinks: Boolean!
  allowInsertRows: Boolean!
  allowPivotTables: Boolean!
  allowSort: Boolean!
}

type GraphQuota {
  deleted: BigInt
  remaining: BigInt
  state: String
  storagePlanInformation: GraphStoragePlanInformation
  total: BigInt
  used: BigInt
}

type GraphSharepointIds {
  listId: String
  listItemId: String
  listItemUniqueId: String
  siteId: String
  siteUrl: String
  tenantId: String
  webId: String
}

type GraphSystemFacet {
  rest: JSON
}

type GraphAudio {
  album: String
  albumArtist: String
  artist: String
  bitrate: BigInt
  composers: String
  copyright: String
  disc: Int
  discCount: Int
  duration: BigInt
  genre: String
  hasDrm: Boolean
  isVariableBitrate: Boolean
  title: String
  track: Int
  trackCount: Int
  year: Int
}

type GraphDeleted {
  state: String
}

type GraphFile {
  hashes: GraphHashes
  mimeType: String
  processingMetadata: Boolean
}

type GraphFileSystemInfo {
  createdDateTime: DateTime
  lastAccessedDateTime: DateTime
  lastModifiedDateTime: DateTime
}

type GraphFolder {
  childCount: Int
  view: GraphFolderView
}

type GraphImage {
  height: Int
  width: Int
}

type GraphPackage {
  type: String
}

type GraphPendingOperations {
  pendingContentUpdate: GraphPendingContentUpdate
}

type GraphPhoto {
  cameraMake: String
  cameraModel: String
  exposureDenominator: Float
  exposureNumerator: Float
  fNumber: Float
  focalLength: Float
  iso: Int
  orientation: Int
  takenDateTime: DateTime
}

type GraphPublicationFacet {
  level: String
  versionId: String
}

type GraphRemoteItem {
  createdBy: GraphIdentitySet
  createdDateTime: DateTime
  file: GraphFile
  fileSystemInfo: GraphFileSystemInfo
  folder: GraphFolder
  id: String
  image: GraphImage
  lastModifiedBy: GraphIdentitySet
  lastModifiedDateTime: DateTime
  name: String
  package: GraphPackage
  parentReference: GraphItemReference
  shared: GraphShared
  sharepointIds: GraphSharepointIds
  size: BigInt
  specialFolder: GraphSpecialFolder
  video: GraphVideo
  webDavUrl: String
  webUrl: String
}

type GraphRoot {
  rest: JSON
}

type GraphSearchResult {
  onClickTelemetryUrl: String
}

type GraphShared {
  owner: GraphIdentitySet
  scope: String
  sharedBy: GraphIdentitySet
  sharedDateTime: DateTime
}

type GraphSpecialFolder {
  name: String
}

type GraphVideo {
  audioBitsPerSample: Int
  audioChannels: Int
  audioFormat: String
  audioSamplesPerSecond: Int
  bitrate: Int
  duration: BigInt
  fourCC: String
  frameRate: Float
  height: Int
  width: Int
}

type GraphListInfo {
  contentTypesEnabled: Boolean
  hidden: Boolean
  template: String
}

type GraphPublicError {
  code: String
  details: [GraphPublicErrorDetail]
  innerError: GraphPublicInnerError
  message: String
  target: String
}

type GraphSiteCollection {
  dataLocationCode: String
  hostname: String
  root: GraphRoot
}

type GraphDateTimeTimeZone {
  dateTime: String!
  timeZone: String
}

type GraphLocation {
  address: GraphPhysicalAddress
  coordinates: GraphOutlookGeoCoordinates
  displayName: String
  locationEmailAddress: String
  locationType: GraphLocationType
  locationUri: String
  uniqueId: String
  uniqueIdType: GraphLocationUniqueIdType
}

type GraphOutlookGeoCoordinates {
  accuracy: Float
  altitude: Float
  altitudeAccuracy: Float
  latitude: Float
  longitude: Float
}

type GraphTimeSlot {
  end: GraphDateTimeTimeZone!
  start: GraphDateTimeTimeZone!
}

type GraphAttendee {
  proposedNewTime: GraphTimeSlot
  status: GraphResponseStatus
  type: GraphAttendeeType
  emailAddress: GraphEmailAddress
}

type GraphResponseStatus {
  response: GraphResponseType
  time: DateTime
}

type GraphLocaleInfo {
  displayName: String
  locale: String
}

type GraphAutomaticRepliesSetting {
  externalAudience: GraphExternalAudienceScope
  externalReplyMessage: String
  internalReplyMessage: String
  scheduledEndDateTime: GraphDateTimeTimeZone
  scheduledStartDateTime: GraphDateTimeTimeZone
  status: GraphAutomaticRepliesStatus
}

type GraphTimeZoneBase {
  name: String
}

type GraphFollowupFlag {
  completedDateTime: GraphDateTimeTimeZone
  dueDateTime: GraphDateTimeTimeZone
  flagStatus: GraphFollowupFlagStatus
  startDateTime: GraphDateTimeTimeZone
}

type GraphInternetMessageHeader {
  name: String
  value: String
}

type GraphItemBody {
  content: String
  contentType: GraphBodyType
}

type GraphWorkingHours {
  daysOfWeek: [GraphDayOfWeek]
  endTime: String
  startTime: String
  timeZone: GraphTimeZoneBase
}

type GraphMessageRuleActions {
  assignCategories: [String]
  copyToFolder: String
  delete: Boolean
  forwardAsAttachmentTo: [GraphRecipient]
  forwardTo: [GraphRecipient]
  markAsRead: Boolean
  markImportance: GraphImportance
  moveToFolder: String
  permanentDelete: Boolean
  redirectTo: [GraphRecipient]
  stopProcessingRules: Boolean
}

type GraphMessageRulePredicates {
  bodyContains: [String]
  bodyOrSubjectContains: [String]
  categories: [String]
  fromAddresses: [GraphRecipient]
  hasAttachments: Boolean
  headerContains: [String]
  importance: GraphImportance
  isApprovalRequest: Boolean
  isAutomaticForward: Boolean
  isAutomaticReply: Boolean
  isEncrypted: Boolean
  isMeetingRequest: Boolean
  isMeetingResponse: Boolean
  isNonDeliveryReport: Boolean
  isPermissionControlled: Boolean
  isReadReceipt: Boolean
  isSigned: Boolean
  isVoicemail: Boolean
  messageActionFlag: GraphMessageActionFlag
  notSentToMe: Boolean
  recipientContains: [String]
  senderContains: [String]
  sensitivity: GraphSensitivity
  sentCcMe: Boolean
  sentOnlyToMe: Boolean
  sentToAddresses: [GraphRecipient]
  sentToMe: Boolean
  sentToOrCcMe: Boolean
  subjectContains: [String]
  withinSizeRange: GraphSizeRange
}

enum GraphMessageActionFlag {
  any
  call
  doNotForward
  followUp
  fyi
  forward
  noResponseNecessary
  read
  reply
  replyToAll
  review
}

type GraphSizeRange {
  maximumSize: Int
  minimumSize: Int
}

type GraphOnlineMeetingInfo {
  conferenceId: String
  joinUrl: String
  phones: [GraphPhone]
  quickDial: String
  tollFreeNumbers: [String]
  tollNumber: String
}

type GraphPatternedRecurrence {
  pattern: GraphRecurrencePattern
  range: GraphRecurrenceRange
}

type GraphRecurrencePattern {
  dayOfMonth: Int!
  daysOfWeek: [GraphDayOfWeek]
  firstDayOfWeek: GraphDayOfWeek
  index: GraphWeekIndex
  interval: Int!
  month: Int!
  type: GraphRecurrencePatternType
}

type GraphRecurrenceRange {
  endDate: Date
  numberOfOccurrences: Int!
  recurrenceTimeZone: String
  startDate: Date
  type: GraphRecurrenceRangeType
}

type GraphPersonType {
  class: String
  subclass: String
}

type GraphReminder {
  changeKey: String
  eventEndTime: GraphDateTimeTimeZone
  eventId: String
  eventLocation: GraphLocation
  eventStartTime: GraphDateTimeTimeZone
  eventSubject: String
  eventWebLink: String
  reminderFireTime: GraphDateTimeTimeZone
}

type GraphScoredEmailAddress {
  address: String
  itemId: String
  relevanceScore: Float
  selectionLikelihood: GraphSelectionLikelihoodInfo
}

enum GraphSelectionLikelihoodInfo {
  notSpecified
  high
}

type GraphTimeZoneInformation {
  alias: String
  displayName: String
}

type GraphWebsite {
  address: String
  displayName: String
  type: GraphWebsiteType
}

enum GraphWebsiteType {
  other
  home
  work
  blog
  profile
}

type GraphAccessAction {
  rest: JSON
}

type GraphBooleanColumn {
  rest: JSON
}

type GraphCalculatedColumn {
  format: String
  formula: String
  outputType: String
}

type GraphChoiceColumn {
  allowTextEntry: Boolean
  choices: [String]
  displayAs: String
}

type GraphContentTypeInfo {
  id: String
  name: String
}

type GraphContentTypeOrder {
  default: Boolean
  position: Int
}

type GraphCurrencyColumn {
  locale: String
}

type GraphDateTimeColumn {
  displayAs: String
  format: String
}

type GraphDefaultColumnValue {
  formula: String
  value: String
}

type GraphHashes {
  crc32Hash: String
  quickXorHash: String
  sha1Hash: String
  sha256Hash: String
}

type GraphFolderView {
  sortBy: String
  sortOrder: String
  viewType: String
}

type GraphGeolocationColumn {
  rest: JSON
}

type GraphIncompleteData {
  missingDataBeforeDateTime: DateTime
  wasThrottled: Boolean
  rest: JSON
}

type GraphItemActionStat {
  actionCount: Int
  actorCount: Int
  rest: JSON
}

type GraphItemReference {
  driveId: String
  driveType: String
  id: String
  name: String
  path: String
  shareId: String
  sharepointIds: GraphSharepointIds
  siteId: String
}

type GraphLookupColumn {
  allowMultipleValues: Boolean
  allowUnlimitedLength: Boolean
  columnName: String
  listId: String
  primaryLookupColumnId: String
}

type GraphNumberColumn {
  decimalPlaces: String
  displayAs: String
  maximum: Float
  minimum: Float
}

type GraphPendingContentUpdate {
  queuedDateTime: DateTime
}

type GraphPersonOrGroupColumn {
  allowMultipleSelection: Boolean
  chooseFromType: String
  displayAs: String
}

type GraphPublicErrorDetail {
  code: String
  message: String
  target: String
}

type GraphPublicInnerError {
  code: String
  details: [GraphPublicErrorDetail]
  message: String
  target: String
  rest: JSON
}

type GraphStoragePlanInformation {
  upgradeAvailable: Boolean
}

type GraphSharingInvitation {
  email: String
  invitedBy: GraphIdentitySet
  redeemedBy: String
  signInRequired: Boolean
}

type GraphSharingLink {
  application: GraphIdentity
  preventsDownload: Boolean
  scope: String
  type: String
  webHtml: String
  webUrl: String
}

type GraphTextColumn {
  allowMultipleLines: Boolean
  appendChangesToExistingText: Boolean
  linesForEditing: Int
  maxLength: Int
  textType: String
}

type GraphThumbnail {
  content: String
  height: Int
  sourceItemId: String
  url: String
  width: Int
}

type GraphExtensionSchemaProperty {
  name: String
  type: String
}

type TGraphAccessReviewApplyAction implements GraphAccessReviewApplyAction {
  rest: JSON
}

interface GraphAccessReviewApplyAction {
  rest: JSON
}

type GraphAccessReviewScope {
  rest: JSON
}

type GraphAccessReviewInstanceDecisionItemResource {
  displayName: String
  id: String
  type: String
}

type GraphAccessReviewReviewerScope {
  query: String
  queryRoot: String
  queryType: String
}

type GraphAccessReviewScheduleSettings {
  applyActions: [GraphAccessReviewApplyAction]
  autoApplyDecisionsEnabled: Boolean!
  defaultDecision: String
  defaultDecisionEnabled: Boolean!
  instanceDurationInDays: Int!
  justificationRequiredOnApproval: Boolean!
  mailNotificationsEnabled: Boolean!
  recommendationsEnabled: Boolean!
  recurrence: GraphPatternedRecurrence
  reminderNotificationsEnabled: Boolean!
}

type GraphAppConsentRequestScope {
  displayName: String
}

type GraphDisableAndDeleteUserApplyAction implements GraphAccessReviewApplyAction {
  rest: JSON
}

type GraphRemoveAccessApplyAction implements GraphAccessReviewApplyAction {
  rest: JSON
}

type GraphAgreementFileData {
  data: String
}

type GraphTermsExpiration {
  frequency: ISO8601Duration
  startDateTime: DateTime
}

type TGraphConditionalAccessSessionControl implements GraphConditionalAccessSessionControl {
  isEnabled: Boolean
}

interface GraphConditionalAccessSessionControl {
  isEnabled: Boolean
}

type GraphApplicationEnforcedRestrictionsSessionControl implements GraphConditionalAccessSessionControl {
  rest: JSON
  isEnabled: Boolean
}

type GraphCloudAppSecuritySessionControl implements GraphConditionalAccessSessionControl {
  cloudAppSecurityType: GraphCloudAppSecuritySessionControlType
  isEnabled: Boolean
}

enum GraphCloudAppSecuritySessionControlType {
  mcasConfigured
  monitorOnly
  blockDownloads
  unknownFutureValue
}

type GraphConditionalAccessApplications {
  excludeApplications: [String]!
  includeApplications: [String]!
  includeUserActions: [String]!
}

type GraphConditionalAccessConditionSet {
  applications: GraphConditionalAccessApplications
  clientAppTypes: [GraphConditionalAccessClientApp]!
  locations: GraphConditionalAccessLocations
  platforms: GraphConditionalAccessPlatforms
  signInRiskLevels: [GraphRiskLevel]!
  userRiskLevels: [GraphRiskLevel]!
  users: GraphConditionalAccessUsers!
}

enum GraphConditionalAccessClientApp {
  all
  browser
  mobileAppsAndDesktopClients
  exchangeActiveSync
  easSupported
  other
  unknownFutureValue
}

type GraphConditionalAccessLocations {
  excludeLocations: [String]!
  includeLocations: [String]!
}

type GraphConditionalAccessPlatforms {
  excludePlatforms: [GraphConditionalAccessDevicePlatform]!
  includePlatforms: [GraphConditionalAccessDevicePlatform]!
}

enum GraphConditionalAccessDevicePlatform {
  android
  iOS
  windows
  windowsPhone
  macOS
  all
  unknownFutureValue
}

type GraphConditionalAccessUsers {
  excludeGroups: [String]!
  excludeRoles: [String]!
  excludeUsers: [String]!
  includeGroups: [String]!
  includeRoles: [String]!
  includeUsers: [String]!
}

type GraphConditionalAccessGrantControls {
  builtInControls: [GraphConditionalAccessGrantControl]!
  customAuthenticationFactors: [String]!
  operator: String
  termsOfUse: [String]!
}

enum GraphConditionalAccessGrantControl {
  block
  mfa
  compliantDevice
  domainJoinedDevice
  approvedApplication
  compliantApplication
  passwordChange
  unknownFutureValue
}

type GraphConditionalAccessSessionControls {
  applicationEnforcedRestrictions: GraphApplicationEnforcedRestrictionsSessionControl
  cloudAppSecurity: GraphCloudAppSecuritySessionControl
  persistentBrowser: GraphPersistentBrowserSessionControl
  signInFrequency: GraphSignInFrequencySessionControl
}

type GraphPersistentBrowserSessionControl implements GraphConditionalAccessSessionControl {
  mode: GraphPersistentBrowserSessionMode
  isEnabled: Boolean
}

enum GraphPersistentBrowserSessionMode {
  always
  never
}

type GraphSignInFrequencySessionControl implements GraphConditionalAccessSessionControl {
  type: GraphSigninFrequencyType
  value: Int
  isEnabled: Boolean
}

enum GraphSigninFrequencyType {
  days
  hours
}

type TGraphIpRange implements GraphIpRange {
  rest: JSON
}

type GraphIPv4CidrRange implements GraphIpRange {
  cidrAddress: String!
  rest: JSON
}

type GraphIPv6CidrRange implements GraphIpRange {
  cidrAddress: String!
  rest: JSON
}

type TGraphDeviceAndAppManagementAssignmentTarget implements GraphDeviceAndAppManagementAssignmentTarget {
  rest: JSON
}

type GraphAllDevicesAssignmentTarget implements GraphDeviceAndAppManagementAssignmentTarget {
  rest: JSON
}

type GraphAllLicensedUsersAssignmentTarget implements GraphDeviceAndAppManagementAssignmentTarget {
  rest: JSON
}

type GraphAndroidMinimumOperatingSystem {
  v4_0: Boolean!
  v4_0_3: Boolean!
  v4_1: Boolean!
  v4_2: Boolean!
  v4_3: Boolean!
  v4_4: Boolean!
  v5_0: Boolean!
  v5_1: Boolean!
}

type GraphAppConfigurationSettingItem {
  appConfigKey: String!
  appConfigKeyType: GraphMdmAppConfigKeyType!
  appConfigKeyValue: String!
}

enum GraphMdmAppConfigKeyType {
  stringType
  integerType
  realType
  booleanType
  tokenType
}

type GraphGroupAssignmentTarget implements GraphDeviceAndAppManagementAssignmentTarget {
  groupId: String
  rest: JSON
}

type GraphIosDeviceType {
  iPad: Boolean!
  iPhoneAndIPod: Boolean!
}

type TGraphMobileAppAssignmentSettings implements GraphMobileAppAssignmentSettings {
  rest: JSON
}

type GraphIosLobAppAssignmentSettings implements GraphMobileAppAssignmentSettings {
  vpnConfigurationId: String
  rest: JSON
}

type GraphIosMinimumOperatingSystem {
  v10_0: Boolean!
  v11_0: Boolean!
  v12_0: Boolean!
  v13_0: Boolean!
  v8_0: Boolean!
  v9_0: Boolean!
}

type GraphIosStoreAppAssignmentSettings implements GraphMobileAppAssignmentSettings {
  vpnConfigurationId: String
  rest: JSON
}

type GraphIosVppAppAssignmentSettings implements GraphMobileAppAssignmentSettings {
  useDeviceLicensing: Boolean!
  vpnConfigurationId: String
  rest: JSON
}

type GraphMicrosoftStoreForBusinessAppAssignmentSettings implements GraphMobileAppAssignmentSettings {
  useDeviceContext: Boolean!
  rest: JSON
}

type GraphMimeContent {
  type: String
  value: String
}

type GraphMobileAppInstallTimeSettings {
  deadlineDateTime: DateTime
  startDateTime: DateTime
  useLocalTime: Boolean!
}

type GraphVppLicensingType {
  supportsDeviceLicensing: Boolean!
  supportsUserLicensing: Boolean!
}

type GraphWin32LobAppAssignmentSettings implements GraphMobileAppAssignmentSettings {
  installTimeSettings: GraphMobileAppInstallTimeSettings
  notifications: GraphWin32LobAppNotification!
  restartSettings: GraphWin32LobAppRestartSettings
  rest: JSON
}

enum GraphWin32LobAppNotification {
  showAll
  showReboot
  hideAll
}

type GraphWin32LobAppRestartSettings {
  countdownDisplayBeforeRestartInMinutes: Int!
  gracePeriodInMinutes: Int!
  restartNotificationSnoozeDurationInMinutes: Int
}

type TGraphWin32LobAppRule implements GraphWin32LobAppRule {
  ruleType: GraphWin32LobAppRuleType!
}

type GraphWin32LobAppFileSystemRule implements GraphWin32LobAppRule {
  check32BitOn64System: Boolean!
  comparisonValue: String
  fileOrFolderName: String
  operationType: GraphWin32LobAppFileSystemOperationType!
  operator: GraphWin32LobAppRuleOperator!
  path: String
  ruleType: GraphWin32LobAppRuleType!
}

enum GraphWin32LobAppFileSystemOperationType {
  notConfigured
  exists
  modifiedDate
  createdDate
  version
  sizeInMB
}

enum GraphWin32LobAppRuleOperator {
  notConfigured
  equal
  notEqual
  greaterThan
  greaterThanOrEqual
  lessThan
  lessThanOrEqual
}

type GraphWin32LobAppInstallExperience {
  deviceRestartBehavior: GraphWin32LobAppRestartBehavior!
  runAsAccount: GraphRunAsAccountType!
}

enum GraphWin32LobAppRestartBehavior {
  basedOnReturnCode
  allow
  suppress
  force
}

enum GraphRunAsAccountType {
  system
  user
}

type GraphWin32LobAppMsiInformation {
  packageType: GraphWin32LobAppMsiPackageType!
  productCode: String
  productName: String
  productVersion: String
  publisher: String
  requiresReboot: Boolean!
  upgradeCode: String
}

enum GraphWin32LobAppMsiPackageType {
  perMachine
  perUser
  dualPurpose
}

type GraphWin32LobAppPowerShellScriptRule implements GraphWin32LobAppRule {
  comparisonValue: String
  displayName: String
  enforceSignatureCheck: Boolean!
  operationType: GraphWin32LobAppPowerShellScriptRuleOperationType!
  operator: GraphWin32LobAppRuleOperator!
  runAs32Bit: Boolean!
  runAsAccount: GraphRunAsAccountType
  scriptContent: String
  ruleType: GraphWin32LobAppRuleType!
}

enum GraphWin32LobAppPowerShellScriptRuleOperationType {
  notConfigured
  string
  dateTime
  integer
  float
  version
  boolean
}

type GraphWin32LobAppProductCodeRule implements GraphWin32LobAppRule {
  productCode: String
  productVersion: String
  productVersionOperator: GraphWin32LobAppRuleOperator!
  ruleType: GraphWin32LobAppRuleType!
}

type GraphWin32LobAppRegistryRule implements GraphWin32LobAppRule {
  check32BitOn64System: Boolean!
  comparisonValue: String
  keyPath: String
  operationType: GraphWin32LobAppRegistryRuleOperationType!
  operator: GraphWin32LobAppRuleOperator!
  valueName: String
  ruleType: GraphWin32LobAppRuleType!
}

enum GraphWin32LobAppRegistryRuleOperationType {
  notConfigured
  exists
  doesNotExist
  string
  integer
  version
}

type GraphWin32LobAppReturnCode {
  returnCode: Int!
  type: GraphWin32LobAppReturnCodeType!
}

enum GraphWin32LobAppReturnCodeType {
  failed
  success
  softReboot
  hardReboot
  retry
}

type GraphWindowsMinimumOperatingSystem {
  v10_0: Boolean!
  v8_0: Boolean!
  v8_1: Boolean!
}

type GraphDeviceManagementSettings {
  deviceComplianceCheckinThresholdDays: Int!
  isScheduledActionEnabled: Boolean!
  secureByDefault: Boolean!
}

type GraphIntuneBrand {
  contactITEmailAddress: String
  contactITName: String
  contactITNotes: String
  contactITPhoneNumber: String
  darkBackgroundLogo: GraphMimeContent
  displayName: String
  lightBackgroundLogo: GraphMimeContent
  onlineSupportSiteName: String
  onlineSupportSiteUrl: String
  privacyUrl: String
  showDisplayNameNextToLogo: Boolean!
  showLogo: Boolean!
  showNameNextToLogo: Boolean!
  themeColor: GraphRgbColor
}

type GraphAppListItem {
  appId: String
  appStoreUrl: String
  name: String!
  publisher: String
}

type GraphBitLockerRemovableDrivePolicy {
  blockCrossOrganizationWriteAccess: Boolean!
  encryptionMethod: GraphBitLockerEncryptionMethod
  requireEncryptionForWriteAccess: Boolean!
}

enum GraphBitLockerEncryptionMethod {
  aesCbc128
  aesCbc256
  xtsAes128
  xtsAes256
}

type GraphDefenderDetectedMalwareActions {
  highSeverity: GraphDefenderThreatAction!
  lowSeverity: GraphDefenderThreatAction!
  moderateSeverity: GraphDefenderThreatAction!
  severeSeverity: GraphDefenderThreatAction!
}

enum GraphDefenderThreatAction {
  deviceDefault
  clean
  quarantine
  remove
  allow
  userDefined
  block
}

type GraphDeviceCompliancePolicySettingState {
  currentValue: String
  errorCode: BigInt!
  errorDescription: String
  instanceDisplayName: String
  setting: String
  settingName: String
  sources: [GraphSettingSource]
  state: GraphComplianceStatus!
  userEmail: String
  userId: String
  userName: String
  userPrincipalName: String
}

type GraphSettingSource {
  displayName: String
  id: String
}

type GraphDeviceConfigurationSettingState {
  currentValue: String
  errorCode: BigInt!
  errorDescription: String
  instanceDisplayName: String
  setting: String
  settingName: String
  sources: [GraphSettingSource]
  state: GraphComplianceStatus!
  userEmail: String
  userId: String
  userName: String
  userPrincipalName: String
}

type TGraphEdgeSearchEngineBase implements GraphEdgeSearchEngineBase {
  rest: JSON
}

type GraphEdgeSearchEngine implements GraphEdgeSearchEngineBase {
  edgeSearchEngineType: GraphEdgeSearchEngineType!
  rest: JSON
}

enum GraphEdgeSearchEngineType {
  default
  bing
}

type GraphEdgeSearchEngineCustom implements GraphEdgeSearchEngineBase {
  edgeSearchEngineOpenSearchXmlUrl: String!
  rest: JSON
}

type TGraphIosHomeScreenItem implements GraphIosHomeScreenItem {
  displayName: String
}

type GraphIosHomeScreenApp implements GraphIosHomeScreenItem {
  bundleID: String!
  displayName: String
}

type GraphIosHomeScreenFolder implements GraphIosHomeScreenItem {
  pages: [GraphIosHomeScreenFolderPage]!
  displayName: String
}

type GraphIosHomeScreenFolderPage {
  apps: [GraphIosHomeScreenApp]!
  displayName: String
}

type GraphIosHomeScreenPage {
  displayName: String
  icons: [GraphIosHomeScreenItem]!
}

type GraphIosNetworkUsageRule {
  cellularDataBlocked: Boolean!
  cellularDataBlockWhenRoaming: Boolean!
  managedApps: [GraphAppListItem]
}

type GraphIosNotificationSettings {
  alertType: GraphIosNotificationAlertType!
  appName: String
  badgesEnabled: Boolean
  bundleID: String!
  enabled: Boolean
  publisher: String
  showInNotificationCenter: Boolean
  showOnLockScreen: Boolean
  soundsEnabled: Boolean
}

enum GraphIosNotificationAlertType {
  deviceDefault
  banner
  modal
  none
}

type GraphMediaContentRatingAustralia {
  movieRating: GraphRatingAustraliaMoviesType!
  tvRating: GraphRatingAustraliaTelevisionType!
}

enum GraphRatingAustraliaMoviesType {
  allAllowed
  allBlocked
  general
  parentalGuidance
  mature
  agesAbove15
  agesAbove18
}

enum GraphRatingAustraliaTelevisionType {
  allAllowed
  allBlocked
  preschoolers
  children
  general
  parentalGuidance
  mature
  agesAbove15
  agesAbove15AdultViolence
}

type GraphMediaContentRatingCanada {
  movieRating: GraphRatingCanadaMoviesType!
  tvRating: GraphRatingCanadaTelevisionType!
}

enum GraphRatingCanadaMoviesType {
  allAllowed
  allBlocked
  general
  parentalGuidance
  agesAbove14
  agesAbove18
  restricted
}

enum GraphRatingCanadaTelevisionType {
  allAllowed
  allBlocked
  children
  childrenAbove8
  general
  parentalGuidance
  agesAbove14
  agesAbove18
}

type GraphMediaContentRatingFrance {
  movieRating: GraphRatingFranceMoviesType!
  tvRating: GraphRatingFranceTelevisionType!
}

enum GraphRatingFranceMoviesType {
  allAllowed
  allBlocked
  agesAbove10
  agesAbove12
  agesAbove16
  agesAbove18
}

enum GraphRatingFranceTelevisionType {
  allAllowed
  allBlocked
  agesAbove10
  agesAbove12
  agesAbove16
  agesAbove18
}

type GraphMediaContentRatingGermany {
  movieRating: GraphRatingGermanyMoviesType!
  tvRating: GraphRatingGermanyTelevisionType!
}

enum GraphRatingGermanyMoviesType {
  allAllowed
  allBlocked
  general
  agesAbove6
  agesAbove12
  agesAbove16
  adults
}

enum GraphRatingGermanyTelevisionType {
  allAllowed
  allBlocked
  general
  agesAbove6
  agesAbove12
  agesAbove16
  adults
}

type GraphMediaContentRatingIreland {
  movieRating: GraphRatingIrelandMoviesType!
  tvRating: GraphRatingIrelandTelevisionType!
}

enum GraphRatingIrelandMoviesType {
  allAllowed
  allBlocked
  general
  parentalGuidance
  agesAbove12
  agesAbove15
  agesAbove16
  adults
}

enum GraphRatingIrelandTelevisionType {
  allAllowed
  allBlocked
  general
  children
  youngAdults
  parentalSupervision
  mature
}

type GraphMediaContentRatingJapan {
  movieRating: GraphRatingJapanMoviesType!
  tvRating: GraphRatingJapanTelevisionType!
}

enum GraphRatingJapanMoviesType {
  allAllowed
  allBlocked
  general
  parentalGuidance
  agesAbove15
  agesAbove18
}

enum GraphRatingJapanTelevisionType {
  allAllowed
  allBlocked
  explicitAllowed
}

type GraphMediaContentRatingNewZealand {
  movieRating: GraphRatingNewZealandMoviesType!
  tvRating: GraphRatingNewZealandTelevisionType!
}

enum GraphRatingNewZealandMoviesType {
  allAllowed
  allBlocked
  general
  parentalGuidance
  mature
  agesAbove13
  agesAbove15
  agesAbove16
  agesAbove18
  restricted
  agesAbove16Restricted
}

enum GraphRatingNewZealandTelevisionType {
  allAllowed
  allBlocked
  general
  parentalGuidance
  adults
}

type GraphMediaContentRatingUnitedKingdom {
  movieRating: GraphRatingUnitedKingdomMoviesType!
  tvRating: GraphRatingUnitedKingdomTelevisionType!
}

enum GraphRatingUnitedKingdomMoviesType {
  allAllowed
  allBlocked
  general
  universalChildren
  parentalGuidance
  agesAbove12Video
  agesAbove12Cinema
  agesAbove15
  adults
}

enum GraphRatingUnitedKingdomTelevisionType {
  allAllowed
  allBlocked
  caution
}

type GraphMediaContentRatingUnitedStates {
  movieRating: GraphRatingUnitedStatesMoviesType!
  tvRating: GraphRatingUnitedStatesTelevisionType!
}

enum GraphRatingUnitedStatesMoviesType {
  allAllowed
  allBlocked
  general
  parentalGuidance
  parentalGuidance13
  restricted
  adults
}

enum GraphRatingUnitedStatesTelevisionType {
  allAllowed
  allBlocked
  childrenAll
  childrenAbove7
  general
  parentalGuidance
  childrenAbove14
  adults
}

type TGraphOmaSetting implements GraphOmaSetting {
  description: String
  displayName: String!
  omaUri: String!
}

type GraphOmaSettingBase64 implements GraphOmaSetting {
  fileName: String
  value: String!
  description: String
  displayName: String!
  omaUri: String!
}

type GraphOmaSettingBoolean implements GraphOmaSetting {
  value: Boolean!
  description: String
  displayName: String!
  omaUri: String!
}

type GraphOmaSettingDateTime implements GraphOmaSetting {
  value: DateTime!
  description: String
  displayName: String!
  omaUri: String!
}

type GraphOmaSettingFloatingPoint implements GraphOmaSetting {
  value: Float!
  description: String
  displayName: String!
  omaUri: String!
}

type GraphOmaSettingInteger implements GraphOmaSetting {
  value: Int!
  description: String
  displayName: String!
  omaUri: String!
}

type GraphOmaSettingString implements GraphOmaSetting {
  value: String!
  description: String
  displayName: String!
  omaUri: String!
}

type GraphOmaSettingStringXml implements GraphOmaSetting {
  fileName: String
  value: String!
  description: String
  displayName: String!
  omaUri: String!
}

type GraphReport {
  content: String
}

type GraphSharedPcAccountManagerPolicy {
  accountDeletionPolicy: GraphSharedPcAccountDeletionPolicyType!
  cacheAccountsAboveDiskFreePercentage: Int
  inactiveThresholdDays: Int
  removeAccountsBelowDiskFreePercentage: Int
}

enum GraphSharedPcAccountDeletionPolicyType {
  immediate
  diskSpaceThreshold
  diskSpaceThresholdOrInactiveThreshold
}

type GraphWindows10NetworkProxyServer {
  address: String!
  exceptions: [String]
  useForLocalAddresses: Boolean!
}

type GraphWindowsFirewallNetworkProfile {
  authorizedApplicationRulesFromGroupPolicyMerged: Boolean!
  connectionSecurityRulesFromGroupPolicyMerged: Boolean!
  firewallEnabled: GraphStateManagementSetting!
  globalPortRulesFromGroupPolicyMerged: Boolean!
  inboundConnectionsBlocked: Boolean!
  inboundNotificationsBlocked: Boolean!
  incomingTrafficBlocked: Boolean!
  outboundConnectionsBlocked: Boolean!
  policyRulesFromGroupPolicyMerged: Boolean!
  securedPacketExemptionAllowed: Boolean!
  stealthModeBlocked: Boolean!
  unicastResponsesToMulticastBroadcastsBlocked: Boolean!
}

type TGraphWindowsUpdateInstallScheduleType implements GraphWindowsUpdateInstallScheduleType {
  rest: JSON
}

type GraphWindowsUpdateActiveHoursInstall implements GraphWindowsUpdateInstallScheduleType {
  activeHoursEnd: String!
  activeHoursStart: String!
  rest: JSON
}

type GraphWindowsUpdateScheduledInstall implements GraphWindowsUpdateInstallScheduleType {
  scheduledInstallDay: GraphWeeklySchedule!
  scheduledInstallTime: String!
  rest: JSON
}

type GraphConfigurationManagerClientEnabledFeatures {
  compliancePolicy: Boolean!
  deviceConfiguration: Boolean!
  inventory: Boolean!
  modernApps: Boolean!
  resourceAccess: Boolean!
  windowsUpdateForBusiness: Boolean!
}

type GraphDeviceActionResult {
  actionName: String
  actionState: GraphActionState!
  lastUpdatedDateTime: DateTime!
  startDateTime: DateTime!
}

type GraphDeviceHealthAttestationState {
  attestationIdentityKey: String
  bitLockerStatus: String
  bootAppSecurityVersion: String
  bootDebugging: String
  bootManagerSecurityVersion: String
  bootManagerVersion: String
  bootRevisionListInfo: String
  codeIntegrity: String
  codeIntegrityCheckVersion: String
  codeIntegrityPolicy: String
  contentNamespaceUrl: String
  contentVersion: String
  dataExcutionPolicy: String
  deviceHealthAttestationStatus: String
  earlyLaunchAntiMalwareDriverProtection: String
  healthAttestationSupportedStatus: String
  healthStatusMismatchInfo: String
  issuedDateTime: DateTime!
  lastUpdateDateTime: String
  operatingSystemKernelDebugging: String
  operatingSystemRevListInfo: String
  pcr0: String
  pcrHashAlgorithm: String
  resetCount: BigInt!
  restartCount: BigInt!
  safeMode: String
  secureBoot: String
  secureBootConfigurationPolicyFingerPrint: String
  testSigning: String
  tpmVersion: String
  virtualSecureMode: String
  windowsPE: String
}

type GraphComplianceManagementPartnerAssignment {
  target: GraphDeviceAndAppManagementAssignmentTarget
}

type GraphDeviceEnrollmentPlatformRestriction {
  osMaximumVersion: String
  osMinimumVersion: String
  personalDeviceEnrollmentBlocked: Boolean!
  platformBlocked: Boolean!
}

type GraphRgbColor {
  b: Byte!
  g: Byte!
  r: Byte!
}

"""
The `Byte` scalar type represents byte value as a Buffer
"""
scalar Byte

type GraphDeviceExchangeAccessStateSummary {
  allowedDeviceCount: Int!
  blockedDeviceCount: Int!
  quarantinedDeviceCount: Int!
  unavailableDeviceCount: Int!
  unknownDeviceCount: Int!
}

type GraphDeviceOperatingSystemSummary {
  androidCount: Int!
  iosCount: Int!
  macOSCount: Int!
  unknownCount: Int!
  windowsCount: Int!
  windowsMobileCount: Int!
}

type GraphImportedWindowsAutopilotDeviceIdentityState {
  deviceErrorCode: Int!
  deviceErrorName: String
  deviceImportStatus: GraphImportedWindowsAutopilotDeviceIdentityImportStatus!
  deviceRegistrationId: String
}

type TGraphMobileAppIdentifier implements GraphMobileAppIdentifier {
  rest: JSON
}

type GraphAndroidMobileAppIdentifier implements GraphMobileAppIdentifier {
  packageId: String!
  rest: JSON
}

type GraphIosMobileAppIdentifier implements GraphMobileAppIdentifier {
  bundleId: String!
  rest: JSON
}

type GraphIPv4Range implements GraphIpRange {
  lowerAddress: String!
  upperAddress: String!
  rest: JSON
}

type GraphIPv6Range implements GraphIpRange {
  lowerAddress: String!
  upperAddress: String!
  rest: JSON
}

type GraphKeyValuePair {
  name: String!
  value: String
}

type GraphManagedAppDiagnosticStatus {
  mitigationInstruction: String
  state: String
  validationName: String
}

type GraphManagedAppPolicyDeploymentSummaryPerApp {
  configurationAppliedUserCount: Int!
  mobileAppIdentifier: GraphMobileAppIdentifier
}

type GraphProxiedDomain {
  ipAddressOrFQDN: String!
  proxy: String
}

type TGraphWindowsInformationProtectionApp implements GraphWindowsInformationProtectionApp {
  denied: Boolean!
  description: String
  displayName: String!
  productName: String
  publisherName: String
}

type GraphWindowsInformationProtectionDataRecoveryCertificate {
  certificate: String
  description: String
  expirationDateTime: DateTime!
  subjectName: String
}

type GraphWindowsInformationProtectionDesktopApp implements GraphWindowsInformationProtectionApp {
  binaryName: String!
  binaryVersionHigh: String
  binaryVersionLow: String
  denied: Boolean!
  description: String
  displayName: String!
  productName: String
  publisherName: String
}

type GraphWindowsInformationProtectionIpRangeCollection {
  displayName: String!
  ranges: [GraphIpRange]!
}

type GraphWindowsInformationProtectionProxiedDomainCollection {
  displayName: String!
  proxiedDomains: [GraphProxiedDomain]!
}

type GraphWindowsInformationProtectionResourceCollection {
  displayName: String!
  resources: [String]
}

type GraphWindowsInformationProtectionStoreApp implements GraphWindowsInformationProtectionApp {
  rest: JSON
  denied: Boolean!
  description: String
  displayName: String!
  productName: String
  publisherName: String
}

type GraphResourceAction {
  allowedResourceActions: [String]
  notAllowedResourceActions: [String]
}

type GraphRolePermission {
  resourceActions: [GraphResourceAction]
}

type GraphPlannerAppliedCategories {
  rest: JSON
}

type GraphPlannerAssignments {
  rest: JSON
}

type GraphPlannerCategoryDescriptions {
  category1: String
  category2: String
  category3: String
  category4: String
  category5: String
  category6: String
}

type GraphPlannerChecklistItems {
  rest: JSON
}

type GraphPlannerExternalReferences {
  rest: JSON
}

type GraphPlannerOrderHintsByAssignee {
  rest: JSON
}

type GraphPlannerUserIds {
  rest: JSON
}

type GraphInsightIdentity {
  address: String
  displayName: String
  id: String
}

type GraphResourceReference {
  id: String
  type: String
  webUrl: String
}

type GraphResourceVisualization {
  containerDisplayName: String
  containerType: String
  containerWebUrl: String
  mediaType: String
  previewImageUrl: String
  previewText: String
  title: String
  type: String
}

type GraphSharingDetail {
  sharedBy: GraphInsightIdentity
  sharedDateTime: DateTime
  sharingReference: GraphResourceReference
  sharingSubject: String
  sharingType: String
}

type GraphUsageDetails {
  lastAccessedDateTime: DateTime
  lastModifiedDateTime: DateTime
}

type GraphNotebookLinks {
  oneNoteClientUrl: GraphExternalLink
  oneNoteWebUrl: GraphExternalLink
}

type GraphExternalLink {
  href: String
}

type GraphOnenoteOperationError {
  code: String
  message: String
}

type GraphOnenotePagePreview {
  links: GraphOnenotePagePreviewLinks
  previewText: String
}

type GraphOnenotePagePreviewLinks {
  previewImageUrl: GraphExternalLink
}

type GraphPageLinks {
  oneNoteClientUrl: GraphExternalLink
  oneNoteWebUrl: GraphExternalLink
}

type GraphRecentNotebook {
  displayName: String
  lastAccessedTime: DateTime
  links: GraphRecentNotebookLinks
  sourceService: GraphOnenoteSourceService
}

enum GraphOnenoteSourceService {
  Unknown
  OneDrive
  OneDriveForBusiness
  OnPremOneDriveForBusiness
}

type GraphRecentNotebookLinks {
  oneNoteClientUrl: GraphExternalLink
  oneNoteWebUrl: GraphExternalLink
}

type GraphSectionLinks {
  oneNoteClientUrl: GraphExternalLink
  oneNoteWebUrl: GraphExternalLink
}

type GraphArchivedPrintJob {
  acquiredByPrinter: Boolean!
  acquiredDateTime: DateTime
  completionDateTime: DateTime
  copiesPrinted: Int!
  createdBy: GraphUserIdentity
  createdDateTime: DateTime!
  id: String!
  printerId: String
  processingState: GraphPrintJobProcessingState!
}

type GraphIntegerRange {
  end: BigInt
  start: BigInt
}

type GraphPrinterCapabilities {
  bottomMargins: [Int]
  collation: Boolean
  colorModes: [GraphPrintColorMode]
  contentTypes: [String]
  copiesPerJob: GraphIntegerRange
  dpis: [Int]
  duplexModes: [GraphPrintDuplexMode]
  feedOrientations: [GraphPrinterFeedOrientation]
  finishings: [GraphPrintFinishing]
  inputBins: [String]
  isColorPrintingSupported: Boolean
  isPageRangeSupported: Boolean
  leftMargins: [Int]
  mediaColors: [String]
  mediaSizes: [String]
  mediaTypes: [String]
  multipageLayouts: [GraphPrintMultipageLayout]
  orientations: [GraphPrintOrientation]
  outputBins: [String]
  pagesPerSheet: [Int]
  qualities: [GraphPrintQuality]
  rightMargins: [Int]
  scalings: [GraphPrintScaling]
  supportsFitPdfToPage: Boolean
  topMargins: [Int]
}

type GraphPrinterDefaults {
  colorMode: GraphPrintColorMode
  contentType: String
  copiesPerJob: Int
  dpi: Int
  duplexMode: GraphPrintDuplexMode
  finishings: [GraphPrintFinishing]
  fitPdfToPage: Boolean
  inputBin: String
  mediaColor: String
  mediaSize: String
  mediaType: String
  multipageLayout: GraphPrintMultipageLayout
  orientation: GraphPrintOrientation
  outputBin: String
  pagesPerSheet: Int
  quality: GraphPrintQuality
  scaling: GraphPrintScaling
}

type GraphPrinterLocation {
  altitudeInMeters: Int
  building: String
  city: String
  countryOrRegion: String
  floor: String
  floorDescription: String
  latitude: Float
  longitude: Float
  organization: [String]
  postalCode: String
  roomDescription: String
  roomName: String
  site: String
  stateOrProvince: String
  streetAddress: String
  subdivision: [String]
  subunit: [String]
}

type GraphPrinterStatus {
  description: String
  details: [GraphPrinterProcessingStateDetail]!
  state: GraphPrinterProcessingState!
}

type GraphPrintJobConfiguration {
  collate: Boolean
  colorMode: GraphPrintColorMode
  copies: Int
  dpi: Int
  duplexMode: GraphPrintDuplexMode
  feedOrientation: GraphPrinterFeedOrientation
  finishings: [GraphPrintFinishing]
  fitPdfToPage: Boolean
  inputBin: String
  margin: GraphPrintMargin
  mediaSize: String
  mediaType: String
  multipageLayout: GraphPrintMultipageLayout
  orientation: GraphPrintOrientation
  outputBin: String
  pageRanges: [GraphIntegerRange]
  pagesPerSheet: Int
  quality: GraphPrintQuality
  scaling: GraphPrintScaling
}

type GraphPrintMargin {
  bottom: Int
  left: Int
  right: Int
  top: Int
}

type GraphPrintJobStatus {
  description: String!
  details: [GraphPrintJobStateDetail]!
  isAcquiredByPrinter: Boolean!
  state: GraphPrintJobProcessingState!
}

type GraphPrintOperationStatus {
  description: String!
  state: GraphPrintOperationProcessingState!
}

enum GraphPrintOperationProcessingState {
  notStarted
  running
  succeeded
  failed
  unknownFutureValue
}

type GraphPrintSettings {
  documentConversionEnabled: Boolean!
}

type GraphPrintTaskStatus {
  description: String!
  state: GraphPrintTaskProcessingState!
}

enum GraphPrintTaskProcessingState {
  pending
  processing
  completed
  aborted
  unknownFutureValue
}

type GraphImageInfo {
  addImageQuery: Boolean
  alternateText: String
  alternativeText: String
  iconUrl: String
}

type GraphVisualInfo {
  attribution: GraphImageInfo
  backgroundColor: String
  content: GraphJson
  description: String
  displayText: String!
}

type GraphAlertDetection {
  detectionType: String
  method: String
  name: String
}

type GraphAlertHistoryState {
  appId: String
  assignedTo: String
  comments: [String]
  feedback: GraphAlertFeedback
  status: GraphAlertStatus
  updatedDateTime: DateTime
  user: String
}

type GraphAlertTrigger {
  name: String
  type: String
  value: String
}

type GraphAverageComparativeScore {
  averageScore: Float
  basis: String
  rest: JSON
}

type GraphCertificationControl {
  name: String
  url: String
  rest: JSON
}

type GraphCloudAppSecurityState {
  destinationServiceIp: String
  destinationServiceName: String
  riskScore: String
}

type GraphComplianceInformation {
  certificationControls: [GraphCertificationControl]
  certificationName: String
  rest: JSON
}

type GraphControlScore {
  controlCategory: String
  controlName: String
  description: String
  score: Float
  rest: JSON
}

type GraphFileHash {
  hashType: GraphFileHashType
  hashValue: String
}

enum GraphFileHashType {
  unknown
  sha1
  sha256
  md5
  authenticodeHash256
  lsHash
  ctph
  unknownFutureValue
}

type GraphFileSecurityState {
  fileHash: GraphFileHash
  name: String
  path: String
  riskScore: String
}

type GraphHostSecurityState {
  fqdn: String
  isAzureAdJoined: Boolean
  isAzureAdRegistered: Boolean
  isHybridAzureDomainJoined: Boolean
  netBiosName: String
  os: String
  privateIpAddress: String
  publicIpAddress: String
  riskScore: String
}

type GraphInvestigationSecurityState {
  name: String
  status: String
}

type GraphMalwareState {
  category: String
  family: String
  name: String
  severity: String
  wasRunning: Boolean
}

type GraphMessageSecurityState {
  connectingIP: String
  deliveryAction: String
  deliveryLocation: String
  directionality: String
  internetMessageId: String
  messageFingerprint: String
  messageReceivedDateTime: DateTime
  messageSubject: String
  networkMessageId: String
}

type GraphNetworkConnection {
  applicationName: String
  destinationAddress: String
  destinationDomain: String
  destinationLocation: String
  destinationPort: String
  destinationUrl: String
  direction: GraphConnectionDirection
  domainRegisteredDateTime: DateTime
  localDnsName: String
  natDestinationAddress: String
  natDestinationPort: String
  natSourceAddress: String
  natSourcePort: String
  protocol: GraphSecurityNetworkProtocol
  riskScore: String
  sourceAddress: String
  sourceLocation: String
  sourcePort: String
  status: GraphConnectionStatus
  urlParameters: String
}

enum GraphConnectionDirection {
  unknown
  inbound
  outbound
  unknownFutureValue
}

enum GraphSecurityNetworkProtocol {
  unknown
  ip
  icmp
  igmp
  ggp
  ipv4
  tcp
  pup
  udp
  idp
  ipv6
  ipv6RoutingHeader
  ipv6FragmentHeader
  ipSecEncapsulatingSecurityPayload
  ipSecAuthenticationHeader
  icmpV6
  ipv6NoNextHeader
  ipv6DestinationOptions
  nd
  raw
  ipx
  spx
  spxII
  unknownFutureValue
}

enum GraphConnectionStatus {
  unknown
  attempted
  succeeded
  blocked
  failed
  unknownFutureValue
}

type GraphProcess {
  accountName: String
  commandLine: String
  createdDateTime: DateTime
  fileHash: GraphFileHash
  integrityLevel: GraphProcessIntegrityLevel
  isElevated: Boolean
  name: String
  parentProcessCreatedDateTime: DateTime
  parentProcessId: Int
  parentProcessName: String
  path: String
  processId: Int
}

enum GraphProcessIntegrityLevel {
  unknown
  untrusted
  low
  medium
  high
  system
  unknownFutureValue
}

type GraphRegistryKeyState {
  hive: GraphRegistryHive
  key: String
  oldKey: String
  oldValueData: String
  oldValueName: String
  operation: GraphRegistryOperation
  processId: Int
  valueData: String
  valueName: String
  valueType: GraphRegistryValueType
}

enum GraphRegistryHive {
  unknown
  currentConfig
  currentUser
  localMachineSam
  localMachineSecurity
  localMachineSoftware
  localMachineSystem
  usersDefault
  unknownFutureValue
}

enum GraphRegistryOperation {
  unknown
  create
  modify
  delete
  unknownFutureValue
}

enum GraphRegistryValueType {
  unknown
  binary
  dword
  dwordLittleEndian
  dwordBigEndian
  expandSz
  link
  multiSz
  none
  qword
  qwordlittleEndian
  sz
  unknownFutureValue
}

type GraphSecureScoreControlStateUpdate {
  assignedTo: String
  comment: String
  state: String
  updatedBy: String
  updatedDateTime: DateTime
}

type GraphSecurityResource {
  resource: String
  resourceType: GraphSecurityResourceType
}

enum GraphSecurityResourceType {
  unknown
  attacked
  related
  unknownFutureValue
}

type GraphSecurityVendorInformation {
  provider: String
  providerVersion: String
  subProvider: String
  vendor: String
}

type GraphUriClickSecurityState {
  clickAction: String
  clickDateTime: DateTime
  id: String
  sourceId: String
  uriDomain: String
  verdict: String
}

type GraphUserSecurityState {
  aadUserId: String
  accountName: String
  domainName: String
  emailRole: GraphEmailRole
  isVpn: Boolean
  logonDateTime: DateTime
  logonId: String
  logonIp: String
  logonLocation: String
  logonType: GraphLogonType
  onPremisesSecurityIdentifier: String
  riskScore: String
  userAccountType: GraphUserAccountSecurityType
  userPrincipalName: String
}

enum GraphEmailRole {
  unknown
  sender
  recipient
  unknownFutureValue
}

enum GraphLogonType {
  unknown
  interactive
  remoteInteractive
  network
  batch
  service
  unknownFutureValue
}

enum GraphUserAccountSecurityType {
  unknown
  standard
  power
  administrator
  unknownFutureValue
}

type GraphVulnerabilityState {
  cve: String
  severity: String
  wasRunning: Boolean
}

type TGraphMediaConfig implements GraphMediaConfig {
  rest: JSON
}

type GraphAppHostedMediaConfig implements GraphMediaConfig {
  blob: String
  rest: JSON
}

type GraphAudioConferencing {
  conferenceId: String
  dialinUrl: String
  tollFreeNumber: String
  tollNumber: String
}

type GraphCallMediaState {
  audio: GraphMediaState
}

type TGraphCallOptions implements GraphCallOptions {
  rest: JSON
}

type GraphCallRoute {
  final: GraphIdentitySet!
  original: GraphIdentitySet!
  routingType: GraphRoutingType!
}

type GraphCallTranscriptionInfo {
  lastModifiedDateTime: DateTime
  state: GraphCallTranscriptionState!
}

type GraphChatInfo {
  messageId: String
  replyChainMessageId: String
  threadId: String
}

type GraphIncomingContext {
  observedParticipantId: String
  onBehalfOf: GraphIdentitySet
  sourceParticipantId: String
  transferor: GraphIdentitySet
}

type GraphInvitationParticipantInfo {
  identity: GraphIdentitySet!
  replacesCallId: String
  rest: JSON
}

type GraphLobbyBypassSettings {
  isDialInBypassEnabled: Boolean
  scope: GraphLobbyBypassScope
}

type GraphMediaInfo {
  resourceId: String
  uri: String!
}

type GraphMediaStream {
  direction: GraphMediaDirection!
  label: String
  mediaType: GraphModality!
  serverMuted: Boolean!
  sourceId: String!
}

type TGraphMeetingInfo implements GraphMeetingInfo {
  rest: JSON
}

type GraphMeetingParticipantInfo {
  identity: GraphIdentitySet
  role: GraphOnlineMeetingRole
  upn: String
}

type GraphMeetingParticipants {
  attendees: [GraphMeetingParticipantInfo]
  organizer: GraphMeetingParticipantInfo
}

type GraphOrganizerMeetingInfo implements GraphMeetingInfo {
  organizer: GraphIdentitySet!
  rest: JSON
}

type GraphOutgoingCallOptions implements GraphCallOptions {
  rest: JSON
}

type GraphParticipantInfo {
  countryCode: String
  endpointType: GraphEndpointType
  identity: GraphIdentitySet!
  languageId: String
  region: String
}

type GraphRecordingInfo {
  initiator: GraphIdentitySet
  recordingStatus: GraphRecordingStatus!
}

type GraphResultInfo {
  code: Int!
  message: String
  subcode: Int!
}

type GraphServiceHostedMediaConfig implements GraphMediaConfig {
  preFetchMedia: [GraphMediaInfo]
  rest: JSON
}

type GraphTokenMeetingInfo implements GraphMeetingInfo {
  token: String!
  rest: JSON
}

type GraphToneInfo {
  sequenceId: BigInt!
  tone: GraphTone!
}

type GraphChannelIdentity {
  channelId: String
  teamId: String
}

type GraphChatMessageAttachment {
  content: String
  contentType: String
  contentUrl: String
  id: String
  name: String
  thumbnailUrl: String
}

type GraphChatMessageMention {
  id: Int
  mentioned: GraphIdentitySet
  mentionText: String
}

type GraphChatMessagePolicyViolation {
  dlpAction: GraphChatMessagePolicyViolationDlpActionTypes
  justificationText: String
  policyTip: GraphChatMessagePolicyViolationPolicyTip
  userAction: GraphChatMessagePolicyViolationUserActionTypes
  verdictDetails: GraphChatMessagePolicyViolationVerdictDetailsTypes
}

enum GraphChatMessagePolicyViolationDlpActionTypes {
  none
  notifySender
  blockAccess
  blockAccessExternal
}

enum GraphChatMessagePolicyViolationUserActionTypes {
  none
  override
  reportFalsePositive
}

enum GraphChatMessagePolicyViolationVerdictDetailsTypes {
  none
  allowFalsePositiveOverride
  allowOverrideWithoutJustification
  allowOverrideWithJustification
}

type GraphChatMessagePolicyViolationPolicyTip {
  complianceUrl: String
  generalText: String
  matchedConditionDescriptions: [String]
}

type GraphChatMessageReaction {
  createdDateTime: DateTime!
  reactionType: String!
  user: GraphIdentitySet!
}

type GraphOperationError {
  code: String
  message: String
}

type GraphTeamFunSettings {
  allowCustomMemes: Boolean
  allowGiphy: Boolean
  allowStickersAndMemes: Boolean
  giphyContentRating: GraphGiphyRatingType
}

type GraphTeamGuestSettings {
  allowCreateUpdateChannels: Boolean
  allowDeleteChannels: Boolean
}

type GraphTeamMemberSettings {
  allowAddRemoveApps: Boolean
  allowCreatePrivateChannels: Boolean
  allowCreateUpdateChannels: Boolean
  allowCreateUpdateRemoveConnectors: Boolean
  allowCreateUpdateRemoveTabs: Boolean
  allowDeleteChannels: Boolean
}

type GraphTeamMessagingSettings {
  allowChannelMentions: Boolean
  allowOwnerDeleteMessages: Boolean
  allowTeamMentions: Boolean
  allowUserDeleteMessages: Boolean
  allowUserEditMessages: Boolean
}

type GraphTeamsTabConfiguration {
  contentUrl: String
  entityId: String
  removeUrl: String
  websiteUrl: String
  rest: JSON
}

enum GraphScheduleEntityTheme {
  white
  blue
  green
  purple
  pink
  yellow
  gray
  darkBlue
  darkGreen
  darkPurple
  darkPink
  darkYellow
  unknownFutureValue
}

type GraphShiftItem {
  activities: [GraphShiftActivity]
  displayName: String
  notes: String
  endDateTime: DateTime
  startDateTime: DateTime
  theme: GraphScheduleEntityTheme!
}

type GraphOpenShiftItem {
  openSlotCount: Int!
  activities: [GraphShiftActivity]
  displayName: String
  notes: String
  endDateTime: DateTime
  startDateTime: DateTime
  theme: GraphScheduleEntityTheme!
}

type GraphShiftActivity {
  code: String
  displayName: String
  endDateTime: DateTime
  isPaid: Boolean
  startDateTime: DateTime
  theme: GraphScheduleEntityTheme!
}

type GraphShiftAvailability {
  recurrence: GraphPatternedRecurrence
  timeSlots: [GraphTimeRange]
  timeZone: String
}

type GraphTimeRange {
  endTime: String
  startTime: String
}

type GraphTimeOffItem {
  timeOffReasonId: String
  endDateTime: DateTime
  startDateTime: DateTime
  theme: GraphScheduleEntityTheme!
}

type GraphWorkforceIntegrationEncryption {
  protocol: GraphWorkforceIntegrationEncryptionProtocol
  secret: String
}

enum GraphWorkforceIntegrationEncryptionProtocol {
  sharedSecret
  unknownFutureValue
}

type MicrosoftGraphCallRecordsCallRecord implements GraphEntity {
  endDateTime: DateTime!
  joinWebUrl: String
  lastModifiedDateTime: DateTime!
  modalities: [MicrosoftGraphCallRecordsModality]!
  organizer: GraphIdentitySet
  participants: [GraphIdentitySet]
  startDateTime: DateTime!
  type: MicrosoftGraphCallRecordsCallType!
  version: BigInt!
  sessions(queryOptions: QueryOptions): [MicrosoftGraphCallRecordsSession]
  sessionsById(id: ID): MicrosoftGraphCallRecordsSession
  id: String!
}

enum MicrosoftGraphCallRecordsModality {
  audio
  video
  videoBasedScreenSharing
  data
  screenSharing
  unknownFutureValue
}

enum MicrosoftGraphCallRecordsCallType {
  unknown
  groupCall
  peerToPeer
  unknownFutureValue
}

type MicrosoftGraphCallRecordsSession implements GraphEntity {
  callee: MicrosoftGraphCallRecordsEndpoint
  caller: MicrosoftGraphCallRecordsEndpoint
  endDateTime: DateTime!
  failureInfo: MicrosoftGraphCallRecordsFailureInfo
  modalities: [MicrosoftGraphCallRecordsModality]!
  startDateTime: DateTime!
  segments(queryOptions: QueryOptions): [MicrosoftGraphCallRecordsSegment]
  segmentsById(id: ID): MicrosoftGraphCallRecordsSegment
  id: String!
}

type MicrosoftGraphCallRecordsSegment implements GraphEntity {
  callee: MicrosoftGraphCallRecordsEndpoint
  caller: MicrosoftGraphCallRecordsEndpoint
  endDateTime: DateTime!
  failureInfo: MicrosoftGraphCallRecordsFailureInfo
  media: [MicrosoftGraphCallRecordsMedia]
  startDateTime: DateTime!
  id: String!
}

type TMicrosoftGraphCallRecordsUserAgent implements MicrosoftGraphCallRecordsUserAgent {
  applicationVersion: String
  headerValue: String
}

interface MicrosoftGraphCallRecordsUserAgent {
  applicationVersion: String
  headerValue: String
}

type MicrosoftGraphCallRecordsClientUserAgent implements MicrosoftGraphCallRecordsUserAgent {
  platform: MicrosoftGraphCallRecordsClientPlatform!
  productFamily: MicrosoftGraphCallRecordsProductFamily!
  applicationVersion: String
  headerValue: String
}

enum MicrosoftGraphCallRecordsClientPlatform {
  unknown
  windows
  macOS
  iOS
  android
  web
  ipPhone
  roomSystem
  surfaceHub
  holoLens
  unknownFutureValue
}

enum MicrosoftGraphCallRecordsProductFamily {
  unknown
  teams
  skypeForBusiness
  lync
  unknownFutureValue
}

type MicrosoftGraphCallRecordsDeviceInfo {
  captureDeviceDriver: String
  captureDeviceName: String
  captureNotFunctioningEventRatio: Float
  cpuInsufficentEventRatio: Float
  deviceClippingEventRatio: Float
  deviceGlitchEventRatio: Float
  howlingEventCount: Int
  initialSignalLevelRootMeanSquare: Float
  lowSpeechLevelEventRatio: Float
  lowSpeechToNoiseEventRatio: Float
  micGlitchRate: Float
  receivedNoiseLevel: Int
  receivedSignalLevel: Int
  renderDeviceDriver: String
  renderDeviceName: String
  renderMuteEventRatio: Float
  renderNotFunctioningEventRatio: Float
  renderZeroVolumeEventRatio: Float
  sentNoiseLevel: Int
  sentSignalLevel: Int
  speakerGlitchRate: Float
}

type MicrosoftGraphCallRecordsEndpoint {
  userAgent: MicrosoftGraphCallRecordsUserAgent
}

type MicrosoftGraphCallRecordsFailureInfo {
  reason: String
  stage: MicrosoftGraphCallRecordsFailureStage!
}

enum MicrosoftGraphCallRecordsFailureStage {
  unknown
  callSetup
  midcall
  unknownFutureValue
}

type MicrosoftGraphCallRecordsMedia {
  calleeDevice: MicrosoftGraphCallRecordsDeviceInfo
  calleeNetwork: MicrosoftGraphCallRecordsNetworkInfo
  callerDevice: MicrosoftGraphCallRecordsDeviceInfo
  callerNetwork: MicrosoftGraphCallRecordsNetworkInfo
  label: String
  streams: [MicrosoftGraphCallRecordsMediaStream]
}

type MicrosoftGraphCallRecordsNetworkInfo {
  bandwidthLowEventRatio: Float
  basicServiceSetIdentifier: String
  connectionType: MicrosoftGraphCallRecordsNetworkConnectionType!
  delayEventRatio: Float
  dnsSuffix: String
  ipAddress: String
  linkSpeed: BigInt
  macAddress: String
  port: Int
  receivedQualityEventRatio: Float
  reflexiveIPAddress: String
  relayIPAddress: String
  relayPort: Int
  sentQualityEventRatio: Float
  subnet: String
  wifiBand: MicrosoftGraphCallRecordsWifiBand!
  wifiBatteryCharge: Int
  wifiChannel: Int
  wifiMicrosoftDriver: String
  wifiMicrosoftDriverVersion: String
  wifiRadioType: MicrosoftGraphCallRecordsWifiRadioType!
  wifiSignalStrength: Int
  wifiVendorDriver: String
  wifiVendorDriverVersion: String
}

enum MicrosoftGraphCallRecordsNetworkConnectionType {
  unknown
  wired
  wifi
  mobile
  tunnel
  unknownFutureValue
}

enum MicrosoftGraphCallRecordsWifiBand {
  unknown
  frequency24GHz
  frequency50GHz
  frequency60GHz
  unknownFutureValue
}

enum MicrosoftGraphCallRecordsWifiRadioType {
  unknown
  wifi80211a
  wifi80211b
  wifi80211g
  wifi80211n
  wifi80211ac
  wifi80211ax
  unknownFutureValue
}

type MicrosoftGraphCallRecordsMediaStream {
  averageAudioDegradation: Float
  averageAudioNetworkJitter: ISO8601Duration
  averageBandwidthEstimate: BigInt
  averageJitter: ISO8601Duration
  averagePacketLossRate: Float
  averageRatioOfConcealedSamples: Float
  averageReceivedFrameRate: Float
  averageRoundTripTime: ISO8601Duration
  averageVideoFrameLossPercentage: Float
  averageVideoFrameRate: Float
  averageVideoPacketLossRate: Float
  endDateTime: DateTime
  lowFrameRateRatio: Float
  lowVideoProcessingCapabilityRatio: Float
  maxAudioNetworkJitter: ISO8601Duration
  maxJitter: ISO8601Duration
  maxPacketLossRate: Float
  maxRatioOfConcealedSamples: Float
  maxRoundTripTime: ISO8601Duration
  packetUtilization: BigInt
  postForwardErrorCorrectionPacketLossRate: Float
  startDateTime: DateTime
  streamDirection: MicrosoftGraphCallRecordsMediaStreamDirection!
  streamId: String
  wasMediaBypassed: Boolean
}

enum MicrosoftGraphCallRecordsMediaStreamDirection {
  callerToCallee
  calleeToCaller
}

type MicrosoftGraphCallRecordsServiceUserAgent implements MicrosoftGraphCallRecordsUserAgent {
  role: MicrosoftGraphCallRecordsServiceRole!
  applicationVersion: String
  headerValue: String
}

enum MicrosoftGraphCallRecordsServiceRole {
  unknown
  customBot
  skypeForBusinessMicrosoftTeamsGateway
  skypeForBusinessAudioVideoMcu
  skypeForBusinessApplicationSharingMcu
  skypeForBusinessCallQueues
  skypeForBusinessAutoAttendant
  mediationServer
  mediationServerCloudConnectorEdition
  exchangeUnifiedMessagingService
  mediaController
  conferencingAnnouncementService
  conferencingAttendant
  audioTeleconferencerController
  skypeForBusinessUnifiedCommunicationApplicationPlatform
  responseGroupServiceAnnouncementService
  gateway
  skypeTranslator
  skypeForBusinessAttendant
  responseGroupService
  voicemail
  unknownFutureValue
}

type MicrosoftGraphExternalConnectorsExternalItem implements GraphEntity {
  content: MicrosoftGraphExternalConnectorsExternalItemContent
  properties: MicrosoftGraphExternalConnectorsProperties
  id: String!
}

type MicrosoftGraphExternalConnectorsExternalItemContent {
  type: MicrosoftGraphExternalConnectorsExternalItemContentType!
  value: String
}

enum MicrosoftGraphExternalConnectorsExternalItemContentType {
  text
  html
  unknownFutureValue
}

type MicrosoftGraphExternalConnectorsProperties {
  rest: JSON
}

type Query {
  auditLogs: GraphAuditLogRoot
  authenticationMethodsPolicy: GraphAuthenticationMethodsPolicy
  identity: GraphIdentityContainer
  branding: GraphOrganizationalBranding
  directory: GraphDirectory
  me: GraphUser
  policies: GraphPolicyRoot
  education: GraphEducationRoot
  roleManagement: GraphRoleManagement
  drive: GraphDrive
  communications: GraphCloudCommunications
  identityGovernance: GraphIdentityGovernance
  deviceAppManagement: GraphDeviceAppManagement
  deviceManagement: GraphDeviceManagement
  reports: GraphReportRoot
  search: GraphSearchEntity
  planner: GraphPlanner
  print: GraphPrint
  security: GraphSecurity
  appCatalogs: GraphAppCatalogs
  teamwork: GraphTeamwork
  informationProtection: GraphInformationProtection
  invitations(queryOptions: QueryOptions): [GraphInvitation]
  invitationsByid(id: String!): GraphInvitation
  invitationsCount(queryOptions: QueryOptions): Int
  users(queryOptions: QueryOptions): [GraphUser]
  usersByid(id: String!): GraphUser
  usersCount(queryOptions: QueryOptions): Int
  applicationTemplates(queryOptions: QueryOptions): [GraphApplicationTemplate]
  applicationTemplatesByid(id: String!): GraphApplicationTemplate
  applicationTemplatesCount(queryOptions: QueryOptions): Int
  authenticationMethodConfigurations(queryOptions: QueryOptions): [GraphAuthenticationMethodConfiguration]
  authenticationMethodConfigurationsByid(id: String!): GraphAuthenticationMethodConfiguration
  authenticationMethodConfigurationsCount(queryOptions: QueryOptions): Int
  identityProviders(queryOptions: QueryOptions): [GraphIdentityProvider]
  identityProvidersByid(id: String!): GraphIdentityProvider
  identityProvidersCount(queryOptions: QueryOptions): Int
  applications(queryOptions: QueryOptions): [GraphApplication]
  applicationsByid(id: String!): GraphApplication
  applicationsCount(queryOptions: QueryOptions): Int
  certificateBasedAuthConfiguration(queryOptions: QueryOptions): [GraphCertificateBasedAuthConfiguration]
  certificateBasedAuthConfigurationByid(id: String!): GraphCertificateBasedAuthConfiguration
  certificateBasedAuthConfigurationCount(queryOptions: QueryOptions): Int
  contacts(queryOptions: QueryOptions): [GraphOrgContact]
  contactsByid(id: String!): GraphOrgContact
  contactsCount(queryOptions: QueryOptions): Int
  contracts(queryOptions: QueryOptions): [GraphContract]
  contractsByid(id: String!): GraphContract
  contractsCount(queryOptions: QueryOptions): Int
  devices(queryOptions: QueryOptions): [GraphDevice]
  devicesByid(id: String!): GraphDevice
  devicesCount(queryOptions: QueryOptions): Int
  directoryObjects(queryOptions: QueryOptions): [GraphDirectoryObject]
  directoryObjectsByid(id: String!): GraphDirectoryObject
  directoryObjectsCount(queryOptions: QueryOptions): Int
  directoryRoles(queryOptions: QueryOptions): [GraphDirectoryRole]
  directoryRolesByid(id: String!): GraphDirectoryRole
  directoryRolesCount(queryOptions: QueryOptions): Int
  directoryRoleTemplates(queryOptions: QueryOptions): [GraphDirectoryRoleTemplate]
  directoryRoleTemplatesByid(id: String!): GraphDirectoryRoleTemplate
  directoryRoleTemplatesCount(queryOptions: QueryOptions): Int
  domainDnsRecords(queryOptions: QueryOptions): [GraphDomainDnsRecord]
  domainDnsRecordsByid(id: String!): GraphDomainDnsRecord
  domainDnsRecordsCount(queryOptions: QueryOptions): Int
  domains(queryOptions: QueryOptions): [GraphDomain]
  domainsByid(id: String!): GraphDomain
  domainsCount(queryOptions: QueryOptions): Int
  groups(queryOptions: QueryOptions): [GraphGroup]
  groupsByid(id: String!): GraphGroup
  groupsCount(queryOptions: QueryOptions): Int
  groupSettings(queryOptions: QueryOptions): [GraphGroupSetting]
  groupSettingsByid(id: String!): GraphGroupSetting
  groupSettingsCount(queryOptions: QueryOptions): Int
  groupSettingTemplates(queryOptions: QueryOptions): [GraphGroupSettingTemplate]
  groupSettingTemplatesByid(id: String!): GraphGroupSettingTemplate
  groupSettingTemplatesCount(queryOptions: QueryOptions): Int
  localizations(queryOptions: QueryOptions): [GraphOrganizationalBrandingLocalization]
  localizationsByid(id: String!): GraphOrganizationalBrandingLocalization
  localizationsCount(queryOptions: QueryOptions): Int
  oauth2PermissionGrants(queryOptions: QueryOptions): [GraphOAuth2PermissionGrant]
  oauth2PermissionGrantsByid(id: String!): GraphOAuth2PermissionGrant
  oauth2PermissionGrantsCount(queryOptions: QueryOptions): Int
  organization(queryOptions: QueryOptions): [GraphOrganization]
  organizationByid(id: String!): GraphOrganization
  organizationCount(queryOptions: QueryOptions): Int
  permissionGrants(queryOptions: QueryOptions): [GraphResourceSpecificPermissionGrant]
  permissionGrantsByid(id: String!): GraphResourceSpecificPermissionGrant
  permissionGrantsCount(queryOptions: QueryOptions): Int
  scopedRoleMemberships(queryOptions: QueryOptions): [GraphScopedRoleMembership]
  scopedRoleMembershipsByid(id: String!): GraphScopedRoleMembership
  scopedRoleMembershipsCount(queryOptions: QueryOptions): Int
  servicePrincipals(queryOptions: QueryOptions): [GraphServicePrincipal]
  servicePrincipalsByid(id: String!): GraphServicePrincipal
  servicePrincipalsCount(queryOptions: QueryOptions): Int
  subscribedSkus(queryOptions: QueryOptions): [GraphSubscribedSku]
  subscribedSkusByid(id: String!): GraphSubscribedSku
  subscribedSkusCount(queryOptions: QueryOptions): Int
  workbooks(queryOptions: QueryOptions): [GraphDriveItem]
  workbooksByid(id: String!): GraphDriveItem
  workbooksCount(queryOptions: QueryOptions): Int
  places(queryOptions: QueryOptions): [GraphPlace]
  placesByid(id: String!): GraphPlace
  placesCount(queryOptions: QueryOptions): Int
  drives(queryOptions: QueryOptions): [GraphDrive]
  drivesByid(id: String!): GraphDrive
  drivesCount(queryOptions: QueryOptions): Int
  shares(queryOptions: QueryOptions): [GraphSharedDriveItem]
  sharesByid(id: String!): GraphSharedDriveItem
  sharesCount(queryOptions: QueryOptions): Int
  sites(queryOptions: QueryOptions): [GraphSite]
  sitesByid(id: String!): GraphSite
  sitesCount(queryOptions: QueryOptions): Int
  schemaExtensions(queryOptions: QueryOptions): [GraphSchemaExtension]
  schemaExtensionsByid(id: String!): GraphSchemaExtension
  schemaExtensionsCount(queryOptions: QueryOptions): Int
  groupLifecyclePolicies(queryOptions: QueryOptions): [GraphGroupLifecyclePolicy]
  groupLifecyclePoliciesByid(id: String!): GraphGroupLifecyclePolicy
  groupLifecyclePoliciesCount(queryOptions: QueryOptions): Int
  agreementAcceptances(queryOptions: QueryOptions): [GraphAgreementAcceptance]
  agreementAcceptancesByid(id: String!): GraphAgreementAcceptance
  agreementAcceptancesCount(queryOptions: QueryOptions): Int
  agreements(queryOptions: QueryOptions): [GraphAgreement]
  agreementsByid(id: String!): GraphAgreement
  agreementsCount(queryOptions: QueryOptions): Int
  dataPolicyOperations(queryOptions: QueryOptions): [GraphDataPolicyOperation]
  dataPolicyOperationsByid(id: String!): GraphDataPolicyOperation
  dataPolicyOperationsCount(queryOptions: QueryOptions): Int
  subscriptions(queryOptions: QueryOptions): [GraphSubscription]
  subscriptionsByid(id: String!): GraphSubscription
  subscriptionsCount(queryOptions: QueryOptions): Int
  chats(queryOptions: QueryOptions): [GraphChat]
  chatsByid(id: String!): GraphChat
  chatsCount(queryOptions: QueryOptions): Int
  teams(queryOptions: QueryOptions): [GraphTeam]
  teamsByid(id: String!): GraphTeam
  teamsCount(queryOptions: QueryOptions): Int
  teamsTemplates(queryOptions: QueryOptions): [GraphTeamsTemplate]
  teamsTemplatesByid(id: String!): GraphTeamsTemplate
  teamsTemplatesCount(queryOptions: QueryOptions): Int
}

type Mutation {
  invitations(queryOptions: QueryOptions): [GraphInvitation]
  invitationsByid(id: String!): GraphInvitation
  createinvitations(input: GraphInvitationInput): GraphInvitation
  deleteinvitationsByid(id: String!): JSON
  updateinvitationsByid(id: String!, input: GraphInvitationUpdateInput): GraphInvitation
  users(queryOptions: QueryOptions): [GraphUser]
  usersByid(id: String!): GraphUser
  createusers(input: GraphUserInput): GraphUser
  deleteusersByid(id: String!): JSON
  updateusersByid(id: String!, input: GraphUserUpdateInput): GraphUser
  applicationTemplates(queryOptions: QueryOptions): [GraphApplicationTemplate]
  applicationTemplatesByid(id: String!): GraphApplicationTemplate
  createapplicationTemplates(input: GraphApplicationTemplateInput): GraphApplicationTemplate
  deleteapplicationTemplatesByid(id: String!): JSON
  updateapplicationTemplatesByid(id: String!, input: GraphApplicationTemplateUpdateInput): GraphApplicationTemplate
  authenticationMethodConfigurations(queryOptions: QueryOptions): [GraphAuthenticationMethodConfiguration]
  authenticationMethodConfigurationsByid(id: String!): GraphAuthenticationMethodConfiguration
  createauthenticationMethodConfigurations(
    input: GraphAuthenticationMethodConfigurationInput
  ): GraphAuthenticationMethodConfiguration
  deleteauthenticationMethodConfigurationsByid(id: String!): JSON
  updateauthenticationMethodConfigurationsByid(
    id: String!
    input: GraphAuthenticationMethodConfigurationUpdateInput
  ): GraphAuthenticationMethodConfiguration
  identityProviders(queryOptions: QueryOptions): [GraphIdentityProvider]
  identityProvidersByid(id: String!): GraphIdentityProvider
  createidentityProviders(input: GraphIdentityProviderInput): GraphIdentityProvider
  deleteidentityProvidersByid(id: String!): JSON
  updateidentityProvidersByid(id: String!, input: GraphIdentityProviderUpdateInput): GraphIdentityProvider
  applications(queryOptions: QueryOptions): [GraphApplication]
  applicationsByid(id: String!): GraphApplication
  createapplications(input: GraphApplicationInput): GraphApplication
  deleteapplicationsByid(id: String!): JSON
  updateapplicationsByid(id: String!, input: GraphApplicationUpdateInput): GraphApplication
  certificateBasedAuthConfiguration(queryOptions: QueryOptions): [GraphCertificateBasedAuthConfiguration]
  certificateBasedAuthConfigurationByid(id: String!): GraphCertificateBasedAuthConfiguration
  createcertificateBasedAuthConfiguration(
    input: GraphCertificateBasedAuthConfigurationInput
  ): GraphCertificateBasedAuthConfiguration
  deletecertificateBasedAuthConfigurationByid(id: String!): JSON
  updatecertificateBasedAuthConfigurationByid(
    id: String!
    input: GraphCertificateBasedAuthConfigurationUpdateInput
  ): GraphCertificateBasedAuthConfiguration
  contacts(queryOptions: QueryOptions): [GraphOrgContact]
  contactsByid(id: String!): GraphOrgContact
  createcontacts(input: GraphOrgContactInput): GraphOrgContact
  deletecontactsByid(id: String!): JSON
  updatecontactsByid(id: String!, input: GraphOrgContactUpdateInput): GraphOrgContact
  contracts(queryOptions: QueryOptions): [GraphContract]
  contractsByid(id: String!): GraphContract
  createcontracts(input: GraphContractInput): GraphContract
  deletecontractsByid(id: String!): JSON
  updatecontractsByid(id: String!, input: GraphContractUpdateInput): GraphContract
  devices(queryOptions: QueryOptions): [GraphDevice]
  devicesByid(id: String!): GraphDevice
  createdevices(input: GraphDeviceInput): GraphDevice
  deletedevicesByid(id: String!): JSON
  updatedevicesByid(id: String!, input: GraphDeviceUpdateInput): GraphDevice
  directoryObjects(queryOptions: QueryOptions): [GraphDirectoryObject]
  directoryObjectsByid(id: String!): GraphDirectoryObject
  createdirectoryObjects(input: GraphDirectoryObjectInput): GraphDirectoryObject
  deletedirectoryObjectsByid(id: String!): JSON
  updatedirectoryObjectsByid(id: String!, input: GraphDirectoryObjectUpdateInput): GraphDirectoryObject
  directoryRoles(queryOptions: QueryOptions): [GraphDirectoryRole]
  directoryRolesByid(id: String!): GraphDirectoryRole
  createdirectoryRoles(input: GraphDirectoryRoleInput): GraphDirectoryRole
  deletedirectoryRolesByid(id: String!): JSON
  updatedirectoryRolesByid(id: String!, input: GraphDirectoryRoleUpdateInput): GraphDirectoryRole
  directoryRoleTemplates(queryOptions: QueryOptions): [GraphDirectoryRoleTemplate]
  directoryRoleTemplatesByid(id: String!): GraphDirectoryRoleTemplate
  createdirectoryRoleTemplates(input: GraphDirectoryRoleTemplateInput): GraphDirectoryRoleTemplate
  deletedirectoryRoleTemplatesByid(id: String!): JSON
  updatedirectoryRoleTemplatesByid(
    id: String!
    input: GraphDirectoryRoleTemplateUpdateInput
  ): GraphDirectoryRoleTemplate
  domainDnsRecords(queryOptions: QueryOptions): [GraphDomainDnsRecord]
  domainDnsRecordsByid(id: String!): GraphDomainDnsRecord
  createdomainDnsRecords(input: GraphDomainDnsRecordInput): GraphDomainDnsRecord
  deletedomainDnsRecordsByid(id: String!): JSON
  updatedomainDnsRecordsByid(id: String!, input: GraphDomainDnsRecordUpdateInput): GraphDomainDnsRecord
  domains(queryOptions: QueryOptions): [GraphDomain]
  domainsByid(id: String!): GraphDomain
  createdomains(input: GraphDomainInput): GraphDomain
  deletedomainsByid(id: String!): JSON
  updatedomainsByid(id: String!, input: GraphDomainUpdateInput): GraphDomain
  groups(queryOptions: QueryOptions): [GraphGroup]
  groupsByid(id: String!): GraphGroup
  creategroups(input: GraphGroupInput): GraphGroup
  deletegroupsByid(id: String!): JSON
  updategroupsByid(id: String!, input: GraphGroupUpdateInput): GraphGroup
  groupSettings(queryOptions: QueryOptions): [GraphGroupSetting]
  groupSettingsByid(id: String!): GraphGroupSetting
  creategroupSettings(input: GraphGroupSettingInput): GraphGroupSetting
  deletegroupSettingsByid(id: String!): JSON
  updategroupSettingsByid(id: String!, input: GraphGroupSettingUpdateInput): GraphGroupSetting
  groupSettingTemplates(queryOptions: QueryOptions): [GraphGroupSettingTemplate]
  groupSettingTemplatesByid(id: String!): GraphGroupSettingTemplate
  creategroupSettingTemplates(input: GraphGroupSettingTemplateInput): GraphGroupSettingTemplate
  deletegroupSettingTemplatesByid(id: String!): JSON
  updategroupSettingTemplatesByid(id: String!, input: GraphGroupSettingTemplateUpdateInput): GraphGroupSettingTemplate
  localizations(queryOptions: QueryOptions): [GraphOrganizationalBrandingLocalization]
  localizationsByid(id: String!): GraphOrganizationalBrandingLocalization
  createlocalizations(input: GraphOrganizationalBrandingLocalizationInput): GraphOrganizationalBrandingLocalization
  deletelocalizationsByid(id: String!): JSON
  updatelocalizationsByid(
    id: String!
    input: GraphOrganizationalBrandingLocalizationUpdateInput
  ): GraphOrganizationalBrandingLocalization
  oauth2PermissionGrants(queryOptions: QueryOptions): [GraphOAuth2PermissionGrant]
  oauth2PermissionGrantsByid(id: String!): GraphOAuth2PermissionGrant
  createoauth2PermissionGrants(input: GraphOAuth2PermissionGrantInput): GraphOAuth2PermissionGrant
  deleteoauth2PermissionGrantsByid(id: String!): JSON
  updateoauth2PermissionGrantsByid(
    id: String!
    input: GraphOAuth2PermissionGrantUpdateInput
  ): GraphOAuth2PermissionGrant
  organization(queryOptions: QueryOptions): [GraphOrganization]
  organizationByid(id: String!): GraphOrganization
  createorganization(input: GraphOrganizationInput): GraphOrganization
  deleteorganizationByid(id: String!): JSON
  updateorganizationByid(id: String!, input: GraphOrganizationUpdateInput): GraphOrganization
  permissionGrants(queryOptions: QueryOptions): [GraphResourceSpecificPermissionGrant]
  permissionGrantsByid(id: String!): GraphResourceSpecificPermissionGrant
  createpermissionGrants(input: GraphResourceSpecificPermissionGrantInput): GraphResourceSpecificPermissionGrant
  deletepermissionGrantsByid(id: String!): JSON
  updatepermissionGrantsByid(
    id: String!
    input: GraphResourceSpecificPermissionGrantUpdateInput
  ): GraphResourceSpecificPermissionGrant
  scopedRoleMemberships(queryOptions: QueryOptions): [GraphScopedRoleMembership]
  scopedRoleMembershipsByid(id: String!): GraphScopedRoleMembership
  createscopedRoleMemberships(input: GraphScopedRoleMembershipInput): GraphScopedRoleMembership
  deletescopedRoleMembershipsByid(id: String!): JSON
  updatescopedRoleMembershipsByid(id: String!, input: GraphScopedRoleMembershipUpdateInput): GraphScopedRoleMembership
  servicePrincipals(queryOptions: QueryOptions): [GraphServicePrincipal]
  servicePrincipalsByid(id: String!): GraphServicePrincipal
  createservicePrincipals(input: GraphServicePrincipalInput): GraphServicePrincipal
  deleteservicePrincipalsByid(id: String!): JSON
  updateservicePrincipalsByid(id: String!, input: GraphServicePrincipalUpdateInput): GraphServicePrincipal
  subscribedSkus(queryOptions: QueryOptions): [GraphSubscribedSku]
  subscribedSkusByid(id: String!): GraphSubscribedSku
  createsubscribedSkus(input: GraphSubscribedSkuInput): GraphSubscribedSku
  deletesubscribedSkusByid(id: String!): JSON
  updatesubscribedSkusByid(id: String!, input: GraphSubscribedSkuUpdateInput): GraphSubscribedSku
  workbooks(queryOptions: QueryOptions): [GraphDriveItem]
  workbooksByid(id: String!): GraphDriveItem
  createworkbooks(input: GraphDriveItemInput): GraphDriveItem
  deleteworkbooksByid(id: String!): JSON
  updateworkbooksByid(id: String!, input: GraphDriveItemUpdateInput): GraphDriveItem
  places(queryOptions: QueryOptions): [GraphPlace]
  placesByid(id: String!): GraphPlace
  createplaces(input: GraphPlaceInput): GraphPlace
  deleteplacesByid(id: String!): JSON
  updateplacesByid(id: String!, input: GraphPlaceUpdateInput): GraphPlace
  drives(queryOptions: QueryOptions): [GraphDrive]
  drivesByid(id: String!): GraphDrive
  createdrives(input: GraphDriveInput): GraphDrive
  deletedrivesByid(id: String!): JSON
  updatedrivesByid(id: String!, input: GraphDriveUpdateInput): GraphDrive
  shares(queryOptions: QueryOptions): [GraphSharedDriveItem]
  sharesByid(id: String!): GraphSharedDriveItem
  createshares(input: GraphSharedDriveItemInput): GraphSharedDriveItem
  deletesharesByid(id: String!): JSON
  updatesharesByid(id: String!, input: GraphSharedDriveItemUpdateInput): GraphSharedDriveItem
  sites(queryOptions: QueryOptions): [GraphSite]
  sitesByid(id: String!): GraphSite
  createsites(input: GraphSiteInput): GraphSite
  deletesitesByid(id: String!): JSON
  updatesitesByid(id: String!, input: GraphSiteUpdateInput): GraphSite
  schemaExtensions(queryOptions: QueryOptions): [GraphSchemaExtension]
  schemaExtensionsByid(id: String!): GraphSchemaExtension
  createschemaExtensions(input: GraphSchemaExtensionInput): GraphSchemaExtension
  deleteschemaExtensionsByid(id: String!): JSON
  updateschemaExtensionsByid(id: String!, input: GraphSchemaExtensionUpdateInput): GraphSchemaExtension
  groupLifecyclePolicies(queryOptions: QueryOptions): [GraphGroupLifecyclePolicy]
  groupLifecyclePoliciesByid(id: String!): GraphGroupLifecyclePolicy
  creategroupLifecyclePolicies(input: GraphGroupLifecyclePolicyInput): GraphGroupLifecyclePolicy
  deletegroupLifecyclePoliciesByid(id: String!): JSON
  updategroupLifecyclePoliciesByid(id: String!, input: GraphGroupLifecyclePolicyUpdateInput): GraphGroupLifecyclePolicy
  agreementAcceptances(queryOptions: QueryOptions): [GraphAgreementAcceptance]
  agreementAcceptancesByid(id: String!): GraphAgreementAcceptance
  createagreementAcceptances(input: GraphAgreementAcceptanceInput): GraphAgreementAcceptance
  deleteagreementAcceptancesByid(id: String!): JSON
  updateagreementAcceptancesByid(id: String!, input: GraphAgreementAcceptanceUpdateInput): GraphAgreementAcceptance
  agreements(queryOptions: QueryOptions): [GraphAgreement]
  agreementsByid(id: String!): GraphAgreement
  createagreements(input: GraphAgreementInput): GraphAgreement
  deleteagreementsByid(id: String!): JSON
  updateagreementsByid(id: String!, input: GraphAgreementUpdateInput): GraphAgreement
  dataPolicyOperations(queryOptions: QueryOptions): [GraphDataPolicyOperation]
  dataPolicyOperationsByid(id: String!): GraphDataPolicyOperation
  createdataPolicyOperations(input: GraphDataPolicyOperationInput): GraphDataPolicyOperation
  deletedataPolicyOperationsByid(id: String!): JSON
  updatedataPolicyOperationsByid(id: String!, input: GraphDataPolicyOperationUpdateInput): GraphDataPolicyOperation
  subscriptions(queryOptions: QueryOptions): [GraphSubscription]
  subscriptionsByid(id: String!): GraphSubscription
  createsubscriptions(input: GraphSubscriptionInput): GraphSubscription
  deletesubscriptionsByid(id: String!): JSON
  updatesubscriptionsByid(id: String!, input: GraphSubscriptionUpdateInput): GraphSubscription
  chats(queryOptions: QueryOptions): [GraphChat]
  chatsByid(id: String!): GraphChat
  createchats(input: GraphChatInput): GraphChat
  deletechatsByid(id: String!): JSON
  updatechatsByid(id: String!, input: GraphChatUpdateInput): GraphChat
  teams(queryOptions: QueryOptions): [GraphTeam]
  teamsByid(id: String!): GraphTeam
  createteams(input: GraphTeamInput): GraphTeam
  deleteteamsByid(id: String!): JSON
  updateteamsByid(id: String!, input: GraphTeamUpdateInput): GraphTeam
  teamsTemplates(queryOptions: QueryOptions): [GraphTeamsTemplate]
  teamsTemplatesByid(id: String!): GraphTeamsTemplate
  createteamsTemplates(input: GraphTeamsTemplateInput): GraphTeamsTemplate
  deleteteamsTemplatesByid(id: String!): JSON
  updateteamsTemplatesByid(id: String!, input: GraphTeamsTemplateUpdateInput): GraphTeamsTemplate
}

input GraphInvitationInput {
  invitedUserDisplayName: String
  invitedUserEmailAddress: String!
  invitedUserMessageInfo: GraphInvitedUserMessageInfoInput
  invitedUserType: String
  inviteRedeemUrl: String
  inviteRedirectUrl: String!
  sendInvitationMessage: Boolean
  status: String
  id: String!
}

input GraphInvitedUserMessageInfoInput {
  ccRecipients: [GraphRecipientInput]
  customizedMessageBody: String
  messageLanguage: String
}

input GraphInvitationUpdateInput {
  invitedUserDisplayName: String
  invitedUserEmailAddress: String
  invitedUserMessageInfo: GraphInvitedUserMessageInfoInput
  invitedUserType: String
  inviteRedeemUrl: String
  inviteRedirectUrl: String
  sendInvitationMessage: Boolean
  status: String
}

input GraphUserUpdateInput {
  accountEnabled: Boolean
  ageGroup: String
  assignedLicenses: [GraphAssignedLicenseInput]
  assignedPlans: [GraphAssignedPlanInput]
  businessPhones: [String]
  city: String
  companyName: String
  consentProvidedForMinor: String
  country: String
  createdDateTime: DateTime
  creationType: String
  department: String
  displayName: String
  employeeHireDate: DateTime
  employeeId: String
  employeeOrgData: GraphEmployeeOrgDataInput
  employeeType: String
  externalUserState: String
  externalUserStateChangeDateTime: DateTime
  faxNumber: String
  givenName: String
  identities: [GraphObjectIdentityInput]
  imAddresses: [String]
  isResourceAccount: Boolean
  jobTitle: String
  lastPasswordChangeDateTime: DateTime
  legalAgeGroupClassification: String
  licenseAssignmentStates: [GraphLicenseAssignmentStateInput]
  mail: String
  mailNickname: String
  mobilePhone: String
  officeLocation: String
  onPremisesDistinguishedName: String
  onPremisesDomainName: String
  onPremisesExtensionAttributes: GraphOnPremisesExtensionAttributesInput
  onPremisesImmutableId: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningErrorInput]
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  onPremisesSyncEnabled: Boolean
  onPremisesUserPrincipalName: String
  otherMails: [String]
  passwordPolicies: String
  passwordProfile: GraphPasswordProfileInput
  postalCode: String
  preferredLanguage: String
  provisionedPlans: [GraphProvisionedPlanInput]
  proxyAddresses: [String]
  showInAddressList: Boolean
  signInSessionsValidFromDateTime: DateTime
  state: String
  streetAddress: String
  surname: String
  usageLocation: String
  userPrincipalName: String
  userType: String
  mailboxSettings: GraphMailboxSettingsInput
  deviceEnrollmentLimit: Int
  aboutMe: String
  birthday: DateTime
  hireDate: DateTime
  interests: [String]
  mySite: String
  pastProjects: [String]
  preferredName: String
  responsibilities: [String]
  schools: [String]
  skills: [String]
  rest: JSON
}

input GraphApplicationTemplateUpdateInput {
  categories: [String]
  description: String
  displayName: String
  homePageUrl: String
  logoUrl: String
  publisher: String
  supportedProvisioningTypes: [String]
  supportedSingleSignOnModes: [String]
}

input GraphAuthenticationMethodConfigurationInput {
  state: GraphAuthenticationMethodState
  id: String!
}

input GraphAuthenticationMethodConfigurationUpdateInput {
  state: GraphAuthenticationMethodState
}

input GraphIdentityProviderInput {
  clientId: String
  clientSecret: String
  name: String
  type: String
  id: String!
}

input GraphIdentityProviderUpdateInput {
  clientId: String
  clientSecret: String
  name: String
  type: String
}

input GraphApplicationUpdateInput {
  addIns: [GraphAddInInput]
  api: GraphApiApplicationInput
  appId: String
  applicationTemplateId: String
  appRoles: [GraphAppRoleInput]
  createdDateTime: DateTime
  description: String
  displayName: String
  groupMembershipClaims: String
  identifierUris: [String]
  info: GraphInformationalUrlInput
  isDeviceOnlyAuthSupported: Boolean
  isFallbackPublicClient: Boolean
  keyCredentials: [GraphKeyCredentialInput]
  logo: String
  notes: String
  oauth2RequirePostResponse: Boolean
  optionalClaims: GraphOptionalClaimsInput
  parentalControlSettings: GraphParentalControlSettingsInput
  passwordCredentials: [GraphPasswordCredentialInput]
  publicClient: GraphPublicClientApplicationInput
  publisherDomain: String
  requiredResourceAccess: [GraphRequiredResourceAccessInput]
  signInAudience: String
  spa: GraphSpaApplicationInput
  tags: [String]
  tokenEncryptionKeyId: GUID
  web: GraphWebApplicationInput
  rest: JSON
}

input GraphCertificateBasedAuthConfigurationInput {
  certificateAuthorities: [GraphCertificateAuthorityInput]!
  id: String!
}

input GraphCertificateAuthorityInput {
  certificate: String!
  certificateRevocationListUrl: String
  deltaCertificateRevocationListUrl: String
  isRootAuthority: Boolean!
  issuer: String!
  issuerSki: String!
}

input GraphCertificateBasedAuthConfigurationUpdateInput {
  certificateAuthorities: [GraphCertificateAuthorityInput]
}

input GraphOrgContactInput {
  addresses: [GraphPhysicalOfficeAddressInput]
  companyName: String
  department: String
  displayName: String
  givenName: String
  jobTitle: String
  mail: String
  mailNickname: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningErrorInput]
  onPremisesSyncEnabled: Boolean
  phones: [GraphPhoneInput]
  proxyAddresses: [String]!
  surname: String
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphPhysicalOfficeAddressInput {
  city: String
  countryOrRegion: String
  officeLocation: String
  postalCode: String
  state: String
  street: String
}

input GraphOrgContactUpdateInput {
  addresses: [GraphPhysicalOfficeAddressInput]
  companyName: String
  department: String
  displayName: String
  givenName: String
  jobTitle: String
  mail: String
  mailNickname: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningErrorInput]
  onPremisesSyncEnabled: Boolean
  phones: [GraphPhoneInput]
  proxyAddresses: [String]
  surname: String
  rest: JSON
}

input GraphContractInput {
  contractType: String
  customerId: GUID
  defaultDomainName: String
  displayName: String
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphContractUpdateInput {
  contractType: String
  customerId: GUID
  defaultDomainName: String
  displayName: String
  rest: JSON
}

input GraphDeviceInput {
  accountEnabled: Boolean
  alternativeSecurityIds: [GraphAlternativeSecurityIdInput]!
  approximateLastSignInDateTime: DateTime
  complianceExpirationDateTime: DateTime
  deviceId: String
  deviceMetadata: String
  deviceVersion: Int
  displayName: String
  isCompliant: Boolean
  isManaged: Boolean
  mdmAppId: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesSyncEnabled: Boolean
  operatingSystem: String
  operatingSystemVersion: String
  physicalIds: [String]!
  profileType: String
  systemLabels: [String]!
  trustType: String
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphAlternativeSecurityIdInput {
  identityProvider: String
  key: String
  type: Int
}

input GraphDeviceUpdateInput {
  accountEnabled: Boolean
  alternativeSecurityIds: [GraphAlternativeSecurityIdInput]
  approximateLastSignInDateTime: DateTime
  complianceExpirationDateTime: DateTime
  deviceId: String
  deviceMetadata: String
  deviceVersion: Int
  displayName: String
  isCompliant: Boolean
  isManaged: Boolean
  mdmAppId: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesSyncEnabled: Boolean
  operatingSystem: String
  operatingSystemVersion: String
  physicalIds: [String]
  profileType: String
  systemLabels: [String]
  trustType: String
  rest: JSON
}

input GraphDirectoryObjectUpdateInput {
  deletedDateTime: DateTime
  rest: JSON
}

input GraphDirectoryRoleInput {
  description: String
  displayName: String
  roleTemplateId: String
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphDirectoryRoleUpdateInput {
  description: String
  displayName: String
  roleTemplateId: String
  rest: JSON
}

input GraphDirectoryRoleTemplateInput {
  description: String
  displayName: String
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphDirectoryRoleTemplateUpdateInput {
  description: String
  displayName: String
  rest: JSON
}

input GraphDomainDnsRecordInput {
  isOptional: Boolean!
  label: String!
  recordType: String
  supportedService: String!
  ttl: Int!
  id: String!
}

input GraphDomainDnsRecordUpdateInput {
  isOptional: Boolean
  label: String
  recordType: String
  supportedService: String
  ttl: Int
}

input GraphDomainUpdateInput {
  authenticationType: String
  availabilityStatus: String
  isAdminManaged: Boolean
  isDefault: Boolean
  isInitial: Boolean
  isRoot: Boolean
  isVerified: Boolean
  manufacturer: String
  model: String
  passwordNotificationWindowInDays: Int
  passwordValidityPeriodInDays: Int
  state: GraphDomainStateInput
  supportedServices: [String]
}

input GraphGroupUpdateInput {
  assignedLabels: [GraphAssignedLabelInput]
  assignedLicenses: [GraphAssignedLicenseInput]
  classification: String
  createdDateTime: DateTime
  description: String
  displayName: String
  expirationDateTime: DateTime
  groupTypes: [String]
  hasMembersWithLicenseErrors: Boolean
  licenseProcessingState: GraphLicenseProcessingStateInput
  mail: String
  mailEnabled: Boolean
  mailNickname: String
  membershipRule: String
  membershipRuleProcessingState: String
  onPremisesDomainName: String
  onPremisesLastSyncDateTime: DateTime
  onPremisesNetBiosName: String
  onPremisesProvisioningErrors: [GraphOnPremisesProvisioningErrorInput]
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  onPremisesSyncEnabled: Boolean
  preferredDataLocation: String
  preferredLanguage: String
  proxyAddresses: [String]
  renewedDateTime: DateTime
  securityEnabled: Boolean
  securityIdentifier: String
  theme: String
  visibility: String
  allowExternalSenders: Boolean
  autoSubscribeNewMembers: Boolean
  hideFromAddressLists: Boolean
  hideFromOutlookClients: Boolean
  isSubscribedByMail: Boolean
  unseenCount: Int
  isArchived: Boolean
  rest: JSON
}

input GraphGroupSettingInput {
  displayName: String
  templateId: String
  values: [GraphSettingValueInput]!
  rest: JSON
  id: String!
}

input GraphSettingValueInput {
  name: String
  value: String
}

input GraphGroupSettingUpdateInput {
  displayName: String
  templateId: String
  values: [GraphSettingValueInput]
  rest: JSON
}

input GraphGroupSettingTemplateInput {
  description: String
  displayName: String
  values: [GraphSettingTemplateValueInput]!
  rest: JSON
  deletedDateTime: DateTime
  id: String!
}

input GraphSettingTemplateValueInput {
  defaultValue: String
  description: String
  name: String
  type: String
}

input GraphGroupSettingTemplateUpdateInput {
  description: String
  displayName: String
  values: [GraphSettingTemplateValueInput]
  rest: JSON
}

input GraphOrganizationalBrandingLocalizationInput {
  rest: JSON
  backgroundColor: String
  backgroundImage: String
  bannerLogo: String
  signInPageText: String
  squareLogo: String
  usernameHintText: String
  id: String!
}

input GraphOrganizationalBrandingLocalizationUpdateInput {
  rest: JSON
}

input GraphOAuth2PermissionGrantInput {
  clientId: String!
  consentType: String
  principalId: String
  resourceId: String!
  scope: String
  id: String!
}

input GraphOAuth2PermissionGrantUpdateInput {
  clientId: String
  consentType: String
  principalId: String
  resourceId: String
  scope: String
}

input GraphOrganizationUpdateInput {
  assignedPlans: [GraphAssignedPlanInput]
  businessPhones: [String]
  city: String
  country: String
  countryLetterCode: String
  createdDateTime: DateTime
  displayName: String
  marketingNotificationEmails: [String]
  onPremisesLastSyncDateTime: DateTime
  onPremisesSyncEnabled: Boolean
  postalCode: String
  preferredLanguage: String
  privacyProfile: GraphPrivacyProfileInput
  provisionedPlans: [GraphProvisionedPlanInput]
  securityComplianceNotificationMails: [String]
  securityComplianceNotificationPhones: [String]
  state: String
  street: String
  technicalNotificationMails: [String]
  tenantType: String
  verifiedDomains: [GraphVerifiedDomainInput]
  mobileDeviceManagementAuthority: GraphMdmAuthority
  rest: JSON
}

input GraphResourceSpecificPermissionGrantInput {
  clientAppId: String
  clientId: String
  permission: String
  permissionType: String
  resourceAppId: String
  deletedDateTime: DateTime
  rest: JSON
  id: String!
}

input GraphResourceSpecificPermissionGrantUpdateInput {
  clientAppId: String
  clientId: String
  permission: String
  permissionType: String
  resourceAppId: String
}

input GraphScopedRoleMembershipInput {
  administrativeUnitId: String!
  roleId: String!
  roleMemberInfo: GraphIdentityInput!
  id: String!
}

input GraphScopedRoleMembershipUpdateInput {
  administrativeUnitId: String
  roleId: String
  roleMemberInfo: GraphIdentityInput
}

input GraphServicePrincipalUpdateInput {
  accountEnabled: Boolean
  addIns: [GraphAddInInput]
  alternativeNames: [String]
  appDescription: String
  appDisplayName: String
  appId: String
  applicationTemplateId: String
  appOwnerOrganizationId: GUID
  appRoleAssignmentRequired: Boolean
  appRoles: [GraphAppRoleInput]
  description: String
  displayName: String
  homepage: String
  info: GraphInformationalUrlInput
  keyCredentials: [GraphKeyCredentialInput]
  loginUrl: String
  logoutUrl: String
  notes: String
  notificationEmailAddresses: [String]
  oauth2PermissionScopes: [GraphPermissionScopeInput]
  passwordCredentials: [GraphPasswordCredentialInput]
  preferredSingleSignOnMode: String
  preferredTokenSigningKeyThumbprint: String
  replyUrls: [String]
  samlSingleSignOnSettings: GraphSamlSingleSignOnSettingsInput
  servicePrincipalNames: [String]
  servicePrincipalType: String
  signInAudience: String
  tags: [String]
  tokenEncryptionKeyId: GUID
  rest: JSON
}

input GraphSubscribedSkuInput {
  appliesTo: String
  capabilityStatus: String
  consumedUnits: Int
  prepaidUnits: GraphLicenseUnitsDetailInput
  servicePlans: [GraphServicePlanInfoInput]!
  skuId: GUID
  skuPartNumber: String
  id: String!
}

input GraphLicenseUnitsDetailInput {
  enabled: Int
  suspended: Int
  warning: Int
}

input GraphServicePlanInfoInput {
  appliesTo: String
  provisioningStatus: String
  servicePlanId: GUID
  servicePlanName: String
}

input GraphSubscribedSkuUpdateInput {
  appliesTo: String
  capabilityStatus: String
  consumedUnits: Int
  prepaidUnits: GraphLicenseUnitsDetailInput
  servicePlans: [GraphServicePlanInfoInput]
  skuId: GUID
  skuPartNumber: String
}

input GraphDriveItemUpdateInput {
  audio: GraphAudioInput
  content: String
  cTag: String
  deleted: GraphDeletedInput
  file: GraphFileInput
  fileSystemInfo: GraphFileSystemInfoInput
  folder: GraphFolderInput
  image: GraphImageInput
  location: GraphGeoCoordinatesInput
  package: GraphPackageInput
  pendingOperations: GraphPendingOperationsInput
  photo: GraphPhotoInput
  publication: GraphPublicationFacetInput
  remoteItem: GraphRemoteItemInput
  root: GraphRootInput
  searchResult: GraphSearchResultInput
  shared: GraphSharedInput
  sharepointIds: GraphSharepointIdsInput
  size: BigInt
  specialFolder: GraphSpecialFolderInput
  video: GraphVideoInput
  webDavUrl: String
  rest: JSON
}

input GraphPlaceInput {
  address: GraphPhysicalAddressInput
  displayName: String!
  geoCoordinates: GraphOutlookGeoCoordinatesInput
  phone: String
  id: String!
}

input GraphPlaceUpdateInput {
  address: GraphPhysicalAddressInput
  displayName: String
  geoCoordinates: GraphOutlookGeoCoordinatesInput
  phone: String
}

input GraphDriveInput {
  driveType: String
  owner: GraphIdentitySetInput
  quota: GraphQuotaInput
  sharePointIds: GraphSharepointIdsInput
  system: GraphSystemFacetInput
  createdBy: GraphIdentitySetInput
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReferenceInput
  webUrl: String
  id: String!
}

input GraphQuotaInput {
  deleted: BigInt
  remaining: BigInt
  state: String
  storagePlanInformation: GraphStoragePlanInformationInput
  total: BigInt
  used: BigInt
}

input GraphStoragePlanInformationInput {
  upgradeAvailable: Boolean
}

input GraphSystemFacetInput {
  rest: JSON
}

input GraphDriveUpdateInput {
  driveType: String
  owner: GraphIdentitySetInput
  quota: GraphQuotaInput
  sharePointIds: GraphSharepointIdsInput
  system: GraphSystemFacetInput
}

input GraphSharedDriveItemInput {
  owner: GraphIdentitySetInput
  createdBy: GraphIdentitySetInput
  createdDateTime: DateTime!
  description: String
  eTag: String
  lastModifiedBy: GraphIdentitySetInput
  lastModifiedDateTime: DateTime!
  name: String
  parentReference: GraphItemReferenceInput
  webUrl: String
  id: String!
}

input GraphSharedDriveItemUpdateInput {
  owner: GraphIdentitySetInput
}

input GraphSiteUpdateInput {
  displayName: String
  error: GraphPublicErrorInput
  root: GraphRootInput
  sharepointIds: GraphSharepointIdsInput
  siteCollection: GraphSiteCollectionInput
}

input GraphSchemaExtensionInput {
  description: String
  owner: String!
  properties: [GraphExtensionSchemaPropertyInput]!
  status: String!
  targetTypes: [String]!
  id: String!
}

input GraphExtensionSchemaPropertyInput {
  name: String
  type: String
}

input GraphSchemaExtensionUpdateInput {
  description: String
  owner: String
  properties: [GraphExtensionSchemaPropertyInput]
  status: String
  targetTypes: [String]
}

input GraphGroupLifecyclePolicyUpdateInput {
  alternateNotificationEmails: String
  groupLifetimeInDays: Int
  managedGroupTypes: String
}

input GraphAgreementAcceptanceInput {
  agreementFileId: String
  agreementId: String
  deviceDisplayName: String
  deviceId: String
  deviceOSType: String
  deviceOSVersion: String
  expirationDateTime: DateTime
  recordedDateTime: DateTime
  state: GraphAgreementAcceptanceState
  userDisplayName: String
  userEmail: String
  userId: String
  userPrincipalName: String
  id: String!
}

input GraphAgreementAcceptanceUpdateInput {
  agreementFileId: String
  agreementId: String
  deviceDisplayName: String
  deviceId: String
  deviceOSType: String
  deviceOSVersion: String
  expirationDateTime: DateTime
  recordedDateTime: DateTime
  state: GraphAgreementAcceptanceState
  userDisplayName: String
  userEmail: String
  userId: String
  userPrincipalName: String
}

input GraphAgreementInput {
  displayName: String
  isPerDeviceAcceptanceRequired: Boolean
  isViewingBeforeAcceptanceRequired: Boolean
  termsExpiration: GraphTermsExpirationInput
  userReacceptRequiredFrequency: ISO8601Duration
  id: String!
}

input GraphTermsExpirationInput {
  frequency: ISO8601Duration
  startDateTime: DateTime
}

input GraphAgreementUpdateInput {
  displayName: String
  isPerDeviceAcceptanceRequired: Boolean
  isViewingBeforeAcceptanceRequired: Boolean
  termsExpiration: GraphTermsExpirationInput
  userReacceptRequiredFrequency: ISO8601Duration
}

input GraphDataPolicyOperationInput {
  completedDateTime: DateTime
  progress: Float!
  status: GraphDataPolicyOperationStatus
  storageLocation: String
  submittedDateTime: DateTime!
  userId: String!
  id: String!
}

input GraphDataPolicyOperationUpdateInput {
  completedDateTime: DateTime
  progress: Float
  status: GraphDataPolicyOperationStatus
  storageLocation: String
  submittedDateTime: DateTime
  userId: String
}

input GraphSubscriptionInput {
  applicationId: String
  changeType: String!
  clientState: String
  creatorId: String
  encryptionCertificate: String
  encryptionCertificateId: String
  expirationDateTime: DateTime!
  includeResourceData: Boolean
  latestSupportedTlsVersion: String
  lifecycleNotificationUrl: String
  notificationQueryOptions: String
  notificationUrl: String!
  resource: String!
  id: String!
}

input GraphSubscriptionUpdateInput {
  applicationId: String
  changeType: String
  clientState: String
  creatorId: String
  encryptionCertificate: String
  encryptionCertificateId: String
  expirationDateTime: DateTime
  includeResourceData: Boolean
  latestSupportedTlsVersion: String
  lifecycleNotificationUrl: String
  notificationQueryOptions: String
  notificationUrl: String
  resource: String
}

input GraphChatUpdateInput {
  chatType: GraphChatType
  createdDateTime: DateTime
  lastUpdatedDateTime: DateTime
  topic: String
}

input GraphTeamUpdateInput {
  classification: String
  createdDateTime: DateTime
  description: String
  displayName: String
  funSettings: GraphTeamFunSettingsInput
  guestSettings: GraphTeamGuestSettingsInput
  internalId: String
  isArchived: Boolean
  memberSettings: GraphTeamMemberSettingsInput
  messagingSettings: GraphTeamMessagingSettingsInput
  specialization: GraphTeamSpecialization
  visibility: GraphTeamVisibilityType
  webUrl: String
  rest: JSON
}

input GraphTeamsTemplateInput {
  rest: JSON
  id: String!
}

input GraphTeamsTemplateUpdateInput {
  rest: JSON
}
