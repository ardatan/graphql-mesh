import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `BigInt` scalar type represents non-fractional signed whole numeric values. */
  BigInt: any;
  /** The `Byte` scalar type represents byte value as a Buffer */
  Byte: any;
  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: any;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: any;
  /** A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier. */
  GUID: any;
  /**
   * A string representing a duration conforming to the ISO8601 standard,
   * such as: P1W1DT13H23M34S
   * P is the duration designator (for period) placed at the start of the duration representation.
   * Y is the year designator that follows the value for the number of years.
   * M is the month designator that follows the value for the number of months.
   * W is the week designator that follows the value for the number of weeks.
   * D is the day designator that follows the value for the number of days.
   * T is the time designator that precedes the time components of the representation.
   * H is the hour designator that follows the value for the number of hours.
   * M is the minute designator that follows the value for the number of minutes.
   * S is the second designator that follows the value for the number of seconds.
   *
   * Note the time designator, T, that precedes the time value.
   *
   * Matches moment.js, Luxon and DateFns implementations
   * ,/. is valid for decimal places and +/- is a valid prefix
   */
  ISO8601Duration: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
};

export type GraphAadUserConversationMember = GraphConversationMember & {
  __typename?: 'GraphAadUserConversationMember';
  email?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  user?: Maybe<GraphUser>;
  displayName?: Maybe<Scalars['String']>;
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  visibleHistoryStartDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphAccessAction = {
  __typename?: 'GraphAccessAction';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAccessReviewApplyAction = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAccessReviewApplyActionInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAccessReviewInstance = GraphEntity & {
  __typename?: 'GraphAccessReviewInstance';
  endDateTime?: Maybe<Scalars['DateTime']>;
  scope?: Maybe<GraphAccessReviewScope>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<Scalars['String']>;
  decisions?: Maybe<Array<Maybe<GraphAccessReviewInstanceDecisionItem>>>;
  decisionsById?: Maybe<GraphAccessReviewInstanceDecisionItem>;
  filterByCurrentUser?: Maybe<Array<Maybe<GraphAccessReviewInstance>>>;
  acceptRecommendations?: Maybe<Scalars['JSON']>;
  applyDecisions?: Maybe<Scalars['JSON']>;
  batchRecordDecisions?: Maybe<Scalars['JSON']>;
  resetDecisions?: Maybe<Scalars['JSON']>;
  sendReminder?: Maybe<Scalars['JSON']>;
  stop?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAccessReviewInstanceDecisionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAccessReviewInstanceDecisionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAccessReviewInstanceAcceptRecommendationsArgs = {
  bindingParameter?: Maybe<GraphAccessReviewInstanceInput>;
};

export type GraphAccessReviewInstanceApplyDecisionsArgs = {
  bindingParameter?: Maybe<GraphAccessReviewInstanceInput>;
};

export type GraphAccessReviewInstanceBatchRecordDecisionsArgs = {
  bindingParameter?: Maybe<GraphAccessReviewInstanceInput>;
  decision?: Maybe<Scalars['String']>;
  justification?: Maybe<Scalars['String']>;
  principalId?: Maybe<Scalars['String']>;
  resourceId?: Maybe<Scalars['String']>;
};

export type GraphAccessReviewInstanceResetDecisionsArgs = {
  bindingParameter?: Maybe<GraphAccessReviewInstanceInput>;
};

export type GraphAccessReviewInstanceSendReminderArgs = {
  bindingParameter?: Maybe<GraphAccessReviewInstanceInput>;
};

export type GraphAccessReviewInstanceStopArgs = {
  bindingParameter?: Maybe<GraphAccessReviewInstanceInput>;
};

export type GraphAccessReviewInstanceDecisionItem = GraphEntity & {
  __typename?: 'GraphAccessReviewInstanceDecisionItem';
  accessReviewId: Scalars['String'];
  appliedBy?: Maybe<GraphUserIdentity>;
  appliedDateTime?: Maybe<Scalars['DateTime']>;
  applyResult?: Maybe<Scalars['String']>;
  decision?: Maybe<Scalars['String']>;
  justification?: Maybe<Scalars['String']>;
  principal?: Maybe<GraphIdentity>;
  principalLink?: Maybe<Scalars['String']>;
  recommendation?: Maybe<Scalars['String']>;
  resource?: Maybe<GraphAccessReviewInstanceDecisionItemResource>;
  resourceLink?: Maybe<Scalars['String']>;
  reviewedBy?: Maybe<GraphUserIdentity>;
  reviewedDateTime?: Maybe<Scalars['DateTime']>;
  filterByCurrentUser?: Maybe<Array<Maybe<GraphAccessReviewInstanceDecisionItem>>>;
  id: Scalars['String'];
};

export type GraphAccessReviewInstanceDecisionItemResource = {
  __typename?: 'GraphAccessReviewInstanceDecisionItemResource';
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphAccessReviewInstanceInput = {
  endDateTime?: Maybe<Scalars['DateTime']>;
  scope?: Maybe<GraphAccessReviewScopeInput>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAccessReviewReviewerScope = {
  __typename?: 'GraphAccessReviewReviewerScope';
  query?: Maybe<Scalars['String']>;
  queryRoot?: Maybe<Scalars['String']>;
  queryType?: Maybe<Scalars['String']>;
};

export type GraphAccessReviewReviewerScopeInput = {
  query?: Maybe<Scalars['String']>;
  queryRoot?: Maybe<Scalars['String']>;
  queryType?: Maybe<Scalars['String']>;
};

export type GraphAccessReviewScheduleDefinition = GraphEntity & {
  __typename?: 'GraphAccessReviewScheduleDefinition';
  createdBy?: Maybe<GraphUserIdentity>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  descriptionForAdmins?: Maybe<Scalars['String']>;
  descriptionForReviewers?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  fallbackReviewers?: Maybe<Array<Maybe<GraphAccessReviewReviewerScope>>>;
  instanceEnumerationScope?: Maybe<GraphAccessReviewScope>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  reviewers?: Maybe<Array<Maybe<GraphAccessReviewReviewerScope>>>;
  scope?: Maybe<GraphAccessReviewScope>;
  settings?: Maybe<GraphAccessReviewScheduleSettings>;
  status?: Maybe<Scalars['String']>;
  instances?: Maybe<Array<Maybe<GraphAccessReviewInstance>>>;
  instancesById?: Maybe<GraphAccessReviewInstance>;
  filterByCurrentUser?: Maybe<Array<Maybe<GraphAccessReviewScheduleDefinition>>>;
  stop?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAccessReviewScheduleDefinitionInstancesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAccessReviewScheduleDefinitionInstancesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAccessReviewScheduleDefinitionStopArgs = {
  bindingParameter?: Maybe<GraphAccessReviewScheduleDefinitionInput>;
};

export type GraphAccessReviewScheduleDefinitionInput = {
  createdBy?: Maybe<GraphUserIdentityInput>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  descriptionForAdmins?: Maybe<Scalars['String']>;
  descriptionForReviewers?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  fallbackReviewers?: Maybe<Array<Maybe<GraphAccessReviewReviewerScopeInput>>>;
  instanceEnumerationScope?: Maybe<GraphAccessReviewScopeInput>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  reviewers?: Maybe<Array<Maybe<GraphAccessReviewReviewerScopeInput>>>;
  scope?: Maybe<GraphAccessReviewScopeInput>;
  settings?: Maybe<GraphAccessReviewScheduleSettingsInput>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAccessReviewScheduleSettings = {
  __typename?: 'GraphAccessReviewScheduleSettings';
  applyActions?: Maybe<Array<Maybe<GraphAccessReviewApplyAction>>>;
  autoApplyDecisionsEnabled: Scalars['Boolean'];
  defaultDecision?: Maybe<Scalars['String']>;
  defaultDecisionEnabled: Scalars['Boolean'];
  instanceDurationInDays: Scalars['Int'];
  justificationRequiredOnApproval: Scalars['Boolean'];
  mailNotificationsEnabled: Scalars['Boolean'];
  recommendationsEnabled: Scalars['Boolean'];
  recurrence?: Maybe<GraphPatternedRecurrence>;
  reminderNotificationsEnabled: Scalars['Boolean'];
};

export type GraphAccessReviewScheduleSettingsInput = {
  applyActions?: Maybe<Array<Maybe<GraphAccessReviewApplyActionInput>>>;
  autoApplyDecisionsEnabled: Scalars['Boolean'];
  defaultDecision?: Maybe<Scalars['String']>;
  defaultDecisionEnabled: Scalars['Boolean'];
  instanceDurationInDays: Scalars['Int'];
  justificationRequiredOnApproval: Scalars['Boolean'];
  mailNotificationsEnabled: Scalars['Boolean'];
  recommendationsEnabled: Scalars['Boolean'];
  recurrence?: Maybe<GraphPatternedRecurrenceInput>;
  reminderNotificationsEnabled: Scalars['Boolean'];
};

export type GraphAccessReviewScope = {
  __typename?: 'GraphAccessReviewScope';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAccessReviewScopeInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAccessReviewSet = GraphEntity & {
  __typename?: 'GraphAccessReviewSet';
  definitions?: Maybe<Array<Maybe<GraphAccessReviewScheduleDefinition>>>;
  definitionsById?: Maybe<GraphAccessReviewScheduleDefinition>;
  id: Scalars['String'];
};

export type GraphAccessReviewSetDefinitionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAccessReviewSetDefinitionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphActionState {
  None = 'none',
  Pending = 'pending',
  Canceled = 'canceled',
  Active = 'active',
  Done = 'done',
  Failed = 'failed',
  NotSupported = 'notSupported',
}

export type GraphActivityBasedTimeoutPolicy = GraphStsPolicy & {
  __typename?: 'GraphActivityBasedTimeoutPolicy';
  rest?: Maybe<Scalars['JSON']>;
  definition: Array<Maybe<Scalars['String']>>;
  isOrganizationDefault?: Maybe<Scalars['Boolean']>;
  appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  appliesToById?: Maybe<GraphDirectoryObject>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphActivityBasedTimeoutPolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphActivityBasedTimeoutPolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphActivityBasedTimeoutPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphActivityBasedTimeoutPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphActivityBasedTimeoutPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphActivityBasedTimeoutPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphActivityBasedTimeoutPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphActivityBasedTimeoutPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphActivityBasedTimeoutPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphActivityBasedTimeoutPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphActivityDomain {
  Unknown = 'unknown',
  Work = 'work',
  Personal = 'personal',
  Unrestricted = 'unrestricted',
}

export type GraphActivityHistoryItem = GraphEntity & {
  __typename?: 'GraphActivityHistoryItem';
  activeDurationSeconds?: Maybe<Scalars['Int']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  lastActiveDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  startedDateTime: Scalars['DateTime'];
  status?: Maybe<GraphStatus>;
  userTimezone?: Maybe<Scalars['String']>;
  activity: GraphUserActivity;
  id: Scalars['String'];
};

export type GraphAddIn = {
  __typename?: 'GraphAddIn';
  id?: Maybe<Scalars['GUID']>;
  properties: Array<Maybe<GraphKeyValue>>;
  type: Scalars['String'];
};

export type GraphAddInInput = {
  id?: Maybe<Scalars['GUID']>;
  properties: Array<Maybe<GraphKeyValueInput>>;
  type: Scalars['String'];
};

export type GraphAdminConsentRequestPolicy = GraphEntity & {
  __typename?: 'GraphAdminConsentRequestPolicy';
  isEnabled: Scalars['Boolean'];
  notifyReviewers: Scalars['Boolean'];
  remindersEnabled: Scalars['Boolean'];
  requestDurationInDays: Scalars['Int'];
  reviewers?: Maybe<Array<Maybe<GraphAccessReviewReviewerScope>>>;
  version: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphAdministrativeUnit = {
  __typename?: 'GraphAdministrativeUnit';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  visibility?: Maybe<Scalars['String']>;
  members?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  membersById?: Maybe<GraphDirectoryObject>;
  scopedRoleMembers?: Maybe<Array<Maybe<GraphScopedRoleMembership>>>;
  scopedRoleMembersById?: Maybe<GraphScopedRoleMembership>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphAdministrativeUnit>>>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAdministrativeUnitMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAdministrativeUnitMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAdministrativeUnitScopedRoleMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAdministrativeUnitScopedRoleMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAdministrativeUnitExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAdministrativeUnitExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAdministrativeUnitValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphAdministrativeUnitCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphAdministrativeUnitCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphAdministrativeUnitGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphAdministrativeUnitGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphAdministrativeUnitRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphAdministrativeUnitGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphAdministrativeUnitGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphAgreement = GraphEntity & {
  __typename?: 'GraphAgreement';
  displayName?: Maybe<Scalars['String']>;
  isPerDeviceAcceptanceRequired?: Maybe<Scalars['Boolean']>;
  isViewingBeforeAcceptanceRequired?: Maybe<Scalars['Boolean']>;
  termsExpiration?: Maybe<GraphTermsExpiration>;
  userReacceptRequiredFrequency?: Maybe<Scalars['ISO8601Duration']>;
  acceptances?: Maybe<Array<Maybe<GraphAgreementAcceptance>>>;
  acceptancesById?: Maybe<GraphAgreementAcceptance>;
  file?: Maybe<GraphAgreementFile>;
  files?: Maybe<Array<Maybe<GraphAgreementFileLocalization>>>;
  filesById?: Maybe<GraphAgreementFileLocalization>;
  id: Scalars['String'];
};

export type GraphAgreementAcceptancesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAgreementAcceptancesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAgreementFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAgreementFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAgreementAcceptance = GraphEntity & {
  __typename?: 'GraphAgreementAcceptance';
  agreementFileId?: Maybe<Scalars['String']>;
  agreementId?: Maybe<Scalars['String']>;
  deviceDisplayName?: Maybe<Scalars['String']>;
  deviceId?: Maybe<Scalars['String']>;
  deviceOSType?: Maybe<Scalars['String']>;
  deviceOSVersion?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  recordedDateTime?: Maybe<Scalars['DateTime']>;
  state?: Maybe<GraphAgreementAcceptanceState>;
  userDisplayName?: Maybe<Scalars['String']>;
  userEmail?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAgreementAcceptanceInput = {
  agreementFileId?: Maybe<Scalars['String']>;
  agreementId?: Maybe<Scalars['String']>;
  deviceDisplayName?: Maybe<Scalars['String']>;
  deviceId?: Maybe<Scalars['String']>;
  deviceOSType?: Maybe<Scalars['String']>;
  deviceOSVersion?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  recordedDateTime?: Maybe<Scalars['DateTime']>;
  state?: Maybe<GraphAgreementAcceptanceState>;
  userDisplayName?: Maybe<Scalars['String']>;
  userEmail?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphAgreementAcceptanceState {
  Accepted = 'accepted',
  Declined = 'declined',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphAgreementAcceptanceUpdateInput = {
  agreementFileId?: Maybe<Scalars['String']>;
  agreementId?: Maybe<Scalars['String']>;
  deviceDisplayName?: Maybe<Scalars['String']>;
  deviceId?: Maybe<Scalars['String']>;
  deviceOSType?: Maybe<Scalars['String']>;
  deviceOSVersion?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  recordedDateTime?: Maybe<Scalars['DateTime']>;
  state?: Maybe<GraphAgreementAcceptanceState>;
  userDisplayName?: Maybe<Scalars['String']>;
  userEmail?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
};

export type GraphAgreementFile = {
  __typename?: 'GraphAgreementFile';
  localizations?: Maybe<Array<Maybe<GraphAgreementFileLocalization>>>;
  localizationsById?: Maybe<GraphAgreementFileLocalization>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  fileData?: Maybe<GraphAgreementFileData>;
  fileName?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  isMajorVersion?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAgreementFileLocalizationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAgreementFileLocalizationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAgreementFileData = {
  __typename?: 'GraphAgreementFileData';
  data?: Maybe<Scalars['String']>;
};

export type GraphAgreementFileLocalization = {
  __typename?: 'GraphAgreementFileLocalization';
  versions?: Maybe<Array<Maybe<GraphAgreementFileVersion>>>;
  versionsById?: Maybe<GraphAgreementFileVersion>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  fileData?: Maybe<GraphAgreementFileData>;
  fileName?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  isMajorVersion?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAgreementFileLocalizationVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAgreementFileLocalizationVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAgreementFileProperties = GraphEntity & {
  __typename?: 'GraphAgreementFileProperties';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  fileData?: Maybe<GraphAgreementFileData>;
  fileName?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  isMajorVersion?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAgreementFileVersion = {
  __typename?: 'GraphAgreementFileVersion';
  rest?: Maybe<Scalars['JSON']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  fileData?: Maybe<GraphAgreementFileData>;
  fileName?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  isMajorVersion?: Maybe<Scalars['Boolean']>;
  language?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAgreementInput = {
  displayName?: Maybe<Scalars['String']>;
  isPerDeviceAcceptanceRequired?: Maybe<Scalars['Boolean']>;
  isViewingBeforeAcceptanceRequired?: Maybe<Scalars['Boolean']>;
  termsExpiration?: Maybe<GraphTermsExpirationInput>;
  userReacceptRequiredFrequency?: Maybe<Scalars['ISO8601Duration']>;
  id: Scalars['String'];
};

export type GraphAgreementUpdateInput = {
  displayName?: Maybe<Scalars['String']>;
  isPerDeviceAcceptanceRequired?: Maybe<Scalars['Boolean']>;
  isViewingBeforeAcceptanceRequired?: Maybe<Scalars['Boolean']>;
  termsExpiration?: Maybe<GraphTermsExpirationInput>;
  userReacceptRequiredFrequency?: Maybe<Scalars['ISO8601Duration']>;
};

export type GraphAlert = GraphEntity & {
  __typename?: 'GraphAlert';
  activityGroupName?: Maybe<Scalars['String']>;
  alertDetections?: Maybe<Array<Maybe<GraphAlertDetection>>>;
  assignedTo?: Maybe<Scalars['String']>;
  azureSubscriptionId?: Maybe<Scalars['String']>;
  azureTenantId: Scalars['String'];
  category?: Maybe<Scalars['String']>;
  closedDateTime?: Maybe<Scalars['DateTime']>;
  cloudAppStates?: Maybe<Array<Maybe<GraphCloudAppSecurityState>>>;
  comments?: Maybe<Array<Maybe<Scalars['String']>>>;
  confidence?: Maybe<Scalars['Int']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  detectionIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  eventDateTime?: Maybe<Scalars['DateTime']>;
  feedback?: Maybe<GraphAlertFeedback>;
  fileStates?: Maybe<Array<Maybe<GraphFileSecurityState>>>;
  historyStates?: Maybe<Array<Maybe<GraphAlertHistoryState>>>;
  hostStates?: Maybe<Array<Maybe<GraphHostSecurityState>>>;
  incidentIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  investigationSecurityStates?: Maybe<Array<Maybe<GraphInvestigationSecurityState>>>;
  lastEventDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  malwareStates?: Maybe<Array<Maybe<GraphMalwareState>>>;
  messageSecurityStates?: Maybe<Array<Maybe<GraphMessageSecurityState>>>;
  networkConnections?: Maybe<Array<Maybe<GraphNetworkConnection>>>;
  processes?: Maybe<Array<Maybe<GraphProcess>>>;
  recommendedActions?: Maybe<Array<Maybe<Scalars['String']>>>;
  registryKeyStates?: Maybe<Array<Maybe<GraphRegistryKeyState>>>;
  securityResources?: Maybe<Array<Maybe<GraphSecurityResource>>>;
  severity: GraphAlertSeverity;
  sourceMaterials?: Maybe<Array<Maybe<Scalars['String']>>>;
  status: GraphAlertStatus;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  triggers?: Maybe<Array<Maybe<GraphAlertTrigger>>>;
  uriClickSecurityStates?: Maybe<Array<Maybe<GraphUriClickSecurityState>>>;
  userStates?: Maybe<Array<Maybe<GraphUserSecurityState>>>;
  vendorInformation?: Maybe<GraphSecurityVendorInformation>;
  vulnerabilityStates?: Maybe<Array<Maybe<GraphVulnerabilityState>>>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAlertDetection = {
  __typename?: 'GraphAlertDetection';
  detectionType?: Maybe<Scalars['String']>;
  method?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export enum GraphAlertFeedback {
  Unknown = 'unknown',
  TruePositive = 'truePositive',
  FalsePositive = 'falsePositive',
  BenignPositive = 'benignPositive',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphAlertHistoryState = {
  __typename?: 'GraphAlertHistoryState';
  appId?: Maybe<Scalars['String']>;
  assignedTo?: Maybe<Scalars['String']>;
  comments?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedback?: Maybe<GraphAlertFeedback>;
  status?: Maybe<GraphAlertStatus>;
  updatedDateTime?: Maybe<Scalars['DateTime']>;
  user?: Maybe<Scalars['String']>;
};

export enum GraphAlertSeverity {
  Unknown = 'unknown',
  Informational = 'informational',
  Low = 'low',
  Medium = 'medium',
  High = 'high',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphAlertStatus {
  Unknown = 'unknown',
  NewAlert = 'newAlert',
  InProgress = 'inProgress',
  Resolved = 'resolved',
  Dismissed = 'dismissed',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphAlertTrigger = {
  __typename?: 'GraphAlertTrigger';
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphAllDevicesAssignmentTarget = GraphDeviceAndAppManagementAssignmentTarget & {
  __typename?: 'GraphAllDevicesAssignmentTarget';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAllLicensedUsersAssignmentTarget = GraphDeviceAndAppManagementAssignmentTarget & {
  __typename?: 'GraphAllLicensedUsersAssignmentTarget';
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphAllowInvitesFrom {
  None = 'none',
  AdminsAndGuestInviters = 'adminsAndGuestInviters',
  AdminsGuestInvitersAndAllMembers = 'adminsGuestInvitersAndAllMembers',
  Everyone = 'everyone',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphAlternativeSecurityId = {
  __typename?: 'GraphAlternativeSecurityId';
  identityProvider?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
};

export type GraphAlternativeSecurityIdInput = {
  identityProvider?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
};

export type GraphAndroidCompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphAndroidCompliancePolicy';
  deviceThreatProtectionEnabled: Scalars['Boolean'];
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel;
  minAndroidSecurityPatchLevel?: Maybe<Scalars['String']>;
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphAndroidRequiredPasswordType;
  securityBlockJailbrokenDevices: Scalars['Boolean'];
  securityDisableUsbDebugging: Scalars['Boolean'];
  securityPreventInstallAppsFromUnknownSources: Scalars['Boolean'];
  securityRequireCompanyPortalAppIntegrity: Scalars['Boolean'];
  securityRequireGooglePlayServices: Scalars['Boolean'];
  securityRequireSafetyNetAttestationBasicIntegrity: Scalars['Boolean'];
  securityRequireSafetyNetAttestationCertifiedDevice: Scalars['Boolean'];
  securityRequireUpToDateSecurityProviders: Scalars['Boolean'];
  securityRequireVerifyApps: Scalars['Boolean'];
  storageRequireEncryption: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidCompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphAndroidCompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphAndroidCustomConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphAndroidCustomConfiguration';
  omaSettings?: Maybe<Array<Maybe<GraphOmaSetting>>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidCustomConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCustomConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCustomConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCustomConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCustomConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCustomConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCustomConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidCustomConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidCustomConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphAndroidGeneralDeviceConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphAndroidGeneralDeviceConfiguration';
  appsBlockClipboardSharing: Scalars['Boolean'];
  appsBlockCopyPaste: Scalars['Boolean'];
  appsBlockYouTube: Scalars['Boolean'];
  appsHideList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  appsInstallAllowList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  appsLaunchBlockList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  bluetoothBlocked: Scalars['Boolean'];
  cameraBlocked: Scalars['Boolean'];
  cellularBlockDataRoaming: Scalars['Boolean'];
  cellularBlockMessaging: Scalars['Boolean'];
  cellularBlockVoiceRoaming: Scalars['Boolean'];
  cellularBlockWiFiTethering: Scalars['Boolean'];
  compliantAppListType: GraphAppListType;
  compliantAppsList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  deviceSharingAllowed: Scalars['Boolean'];
  diagnosticDataBlockSubmission: Scalars['Boolean'];
  factoryResetBlocked: Scalars['Boolean'];
  googleAccountBlockAutoSync: Scalars['Boolean'];
  googlePlayStoreBlocked: Scalars['Boolean'];
  kioskModeApps?: Maybe<Array<Maybe<GraphAppListItem>>>;
  kioskModeBlockSleepButton: Scalars['Boolean'];
  kioskModeBlockVolumeButtons: Scalars['Boolean'];
  locationServicesBlocked: Scalars['Boolean'];
  nfcBlocked: Scalars['Boolean'];
  passwordBlockFingerprintUnlock: Scalars['Boolean'];
  passwordBlockTrustAgents: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphAndroidRequiredPasswordType;
  passwordSignInFailureCountBeforeFactoryReset?: Maybe<Scalars['Int']>;
  powerOffBlocked: Scalars['Boolean'];
  screenCaptureBlocked: Scalars['Boolean'];
  securityRequireVerifyApps: Scalars['Boolean'];
  storageBlockGoogleBackup: Scalars['Boolean'];
  storageBlockRemovableStorage: Scalars['Boolean'];
  storageRequireDeviceEncryption: Scalars['Boolean'];
  storageRequireRemovableStorageEncryption: Scalars['Boolean'];
  voiceAssistantBlocked: Scalars['Boolean'];
  voiceDialingBlocked: Scalars['Boolean'];
  webBrowserBlockAutofill: Scalars['Boolean'];
  webBrowserBlocked: Scalars['Boolean'];
  webBrowserBlockJavaScript: Scalars['Boolean'];
  webBrowserBlockPopups: Scalars['Boolean'];
  webBrowserCookieSettings: GraphWebBrowserCookieSettings;
  wiFiBlocked: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidGeneralDeviceConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidGeneralDeviceConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidGeneralDeviceConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidGeneralDeviceConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidGeneralDeviceConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidGeneralDeviceConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidGeneralDeviceConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidGeneralDeviceConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidGeneralDeviceConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphAndroidLobApp = GraphMobileLobApp & {
  __typename?: 'GraphAndroidLobApp';
  minimumSupportedOperatingSystem?: Maybe<GraphAndroidMinimumOperatingSystem>;
  packageId?: Maybe<Scalars['String']>;
  versionCode?: Maybe<Scalars['String']>;
  versionName?: Maybe<Scalars['String']>;
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphAndroidManagedAppProtection = GraphTargetedManagedAppProtection & {
  __typename?: 'GraphAndroidManagedAppProtection';
  customBrowserDisplayName?: Maybe<Scalars['String']>;
  customBrowserPackageId?: Maybe<Scalars['String']>;
  deployedAppCount: Scalars['Int'];
  disableAppEncryptionIfDeviceEncryptionIsEnabled: Scalars['Boolean'];
  encryptAppData: Scalars['Boolean'];
  minimumRequiredPatchVersion?: Maybe<Scalars['String']>;
  minimumWarningPatchVersion?: Maybe<Scalars['String']>;
  screenCaptureBlocked: Scalars['Boolean'];
  apps?: Maybe<Array<Maybe<GraphManagedMobileApp>>>;
  appsById?: Maybe<GraphManagedMobileApp>;
  deploymentSummary?: Maybe<GraphManagedAppPolicyDeploymentSummary>;
  isAssigned: Scalars['Boolean'];
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
  assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
  assign?: Maybe<Scalars['JSON']>;
  allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
  contactSyncBlocked: Scalars['Boolean'];
  dataBackupBlocked: Scalars['Boolean'];
  deviceComplianceRequired: Scalars['Boolean'];
  disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
  fingerprintBlocked: Scalars['Boolean'];
  managedBrowser: GraphManagedBrowserType;
  managedBrowserToOpenLinksRequired: Scalars['Boolean'];
  maximumPinRetries: Scalars['Int'];
  minimumPinLength: Scalars['Int'];
  minimumRequiredAppVersion?: Maybe<Scalars['String']>;
  minimumRequiredOsVersion?: Maybe<Scalars['String']>;
  minimumWarningAppVersion?: Maybe<Scalars['String']>;
  minimumWarningOsVersion?: Maybe<Scalars['String']>;
  organizationalCredentialsRequired: Scalars['Boolean'];
  periodBeforePinReset: Scalars['ISO8601Duration'];
  periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
  periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
  periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
  pinCharacterSet: GraphManagedAppPinCharacterSet;
  pinRequired: Scalars['Boolean'];
  printBlocked: Scalars['Boolean'];
  saveAsBlocked: Scalars['Boolean'];
  simplePinBlocked: Scalars['Boolean'];
  targetApps?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAndroidManagedAppProtectionAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidManagedAppProtectionAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidManagedAppProtectionAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidManagedAppProtectionAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidManagedAppProtectionAssignArgs = {
  bindingParameter?: Maybe<GraphTargetedManagedAppProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type GraphAndroidManagedAppProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphAndroidManagedAppRegistration = GraphManagedAppRegistration & {
  __typename?: 'GraphAndroidManagedAppRegistration';
  rest?: Maybe<Scalars['JSON']>;
  appIdentifier?: Maybe<GraphMobileAppIdentifier>;
  applicationVersion?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  deviceName?: Maybe<Scalars['String']>;
  deviceTag?: Maybe<Scalars['String']>;
  deviceType?: Maybe<Scalars['String']>;
  flaggedReasons: Array<Maybe<GraphManagedAppFlaggedReason>>;
  lastSyncDateTime: Scalars['DateTime'];
  managementSdkVersion?: Maybe<Scalars['String']>;
  platformVersion?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  appliedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  appliedPoliciesById?: Maybe<GraphManagedAppPolicy>;
  intendedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  intendedPoliciesById?: Maybe<GraphManagedAppPolicy>;
  operations?: Maybe<Array<Maybe<GraphManagedAppOperation>>>;
  operationsById?: Maybe<GraphManagedAppOperation>;
  getUserIdsWithFlaggedAppRegistration?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphAndroidManagedAppRegistrationAppliedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidManagedAppRegistrationAppliedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidManagedAppRegistrationIntendedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidManagedAppRegistrationIntendedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidManagedAppRegistrationOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidManagedAppRegistrationOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidMinimumOperatingSystem = {
  __typename?: 'GraphAndroidMinimumOperatingSystem';
  v4_0: Scalars['Boolean'];
  v4_0_3: Scalars['Boolean'];
  v4_1: Scalars['Boolean'];
  v4_2: Scalars['Boolean'];
  v4_3: Scalars['Boolean'];
  v4_4: Scalars['Boolean'];
  v5_0: Scalars['Boolean'];
  v5_1: Scalars['Boolean'];
};

export type GraphAndroidMobileAppIdentifier = GraphMobileAppIdentifier & {
  __typename?: 'GraphAndroidMobileAppIdentifier';
  packageId: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphAndroidRequiredPasswordType {
  DeviceDefault = 'deviceDefault',
  Alphabetic = 'alphabetic',
  Alphanumeric = 'alphanumeric',
  AlphanumericWithSymbols = 'alphanumericWithSymbols',
  LowSecurityBiometric = 'lowSecurityBiometric',
  Numeric = 'numeric',
  NumericComplex = 'numericComplex',
  Any = 'any',
}

export type GraphAndroidStoreApp = GraphMobileApp & {
  __typename?: 'GraphAndroidStoreApp';
  appStoreUrl?: Maybe<Scalars['String']>;
  minimumSupportedOperatingSystem?: Maybe<GraphAndroidMinimumOperatingSystem>;
  packageId?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidStoreAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidStoreAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidStoreAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidStoreAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidStoreAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphAndroidWorkProfileCompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphAndroidWorkProfileCompliancePolicy';
  deviceThreatProtectionEnabled: Scalars['Boolean'];
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel;
  minAndroidSecurityPatchLevel?: Maybe<Scalars['String']>;
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphAndroidRequiredPasswordType;
  securityBlockJailbrokenDevices: Scalars['Boolean'];
  securityDisableUsbDebugging: Scalars['Boolean'];
  securityPreventInstallAppsFromUnknownSources: Scalars['Boolean'];
  securityRequireCompanyPortalAppIntegrity: Scalars['Boolean'];
  securityRequireGooglePlayServices: Scalars['Boolean'];
  securityRequireSafetyNetAttestationBasicIntegrity: Scalars['Boolean'];
  securityRequireSafetyNetAttestationCertifiedDevice: Scalars['Boolean'];
  securityRequireUpToDateSecurityProviders: Scalars['Boolean'];
  securityRequireVerifyApps: Scalars['Boolean'];
  storageRequireEncryption: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidWorkProfileCompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphAndroidWorkProfileCompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export enum GraphAndroidWorkProfileCrossProfileDataSharingType {
  DeviceDefault = 'deviceDefault',
  PreventAny = 'preventAny',
  AllowPersonalToWork = 'allowPersonalToWork',
  NoRestrictions = 'noRestrictions',
}

export type GraphAndroidWorkProfileCustomConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphAndroidWorkProfileCustomConfiguration';
  omaSettings?: Maybe<Array<Maybe<GraphOmaSetting>>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidWorkProfileCustomConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCustomConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCustomConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCustomConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCustomConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCustomConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCustomConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileCustomConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileCustomConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export enum GraphAndroidWorkProfileDefaultAppPermissionPolicyType {
  DeviceDefault = 'deviceDefault',
  Prompt = 'prompt',
  AutoGrant = 'autoGrant',
  AutoDeny = 'autoDeny',
}

export type GraphAndroidWorkProfileGeneralDeviceConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphAndroidWorkProfileGeneralDeviceConfiguration';
  passwordBlockFingerprintUnlock: Scalars['Boolean'];
  passwordBlockTrustAgents: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequiredType: GraphAndroidWorkProfileRequiredPasswordType;
  passwordSignInFailureCountBeforeFactoryReset?: Maybe<Scalars['Int']>;
  securityRequireVerifyApps: Scalars['Boolean'];
  workProfileBlockAddingAccounts: Scalars['Boolean'];
  workProfileBlockCamera: Scalars['Boolean'];
  workProfileBlockCrossProfileCallerId: Scalars['Boolean'];
  workProfileBlockCrossProfileContactsSearch: Scalars['Boolean'];
  workProfileBlockCrossProfileCopyPaste: Scalars['Boolean'];
  workProfileBlockNotificationsWhileDeviceLocked: Scalars['Boolean'];
  workProfileBlockScreenCapture: Scalars['Boolean'];
  workProfileBluetoothEnableContactSharing: Scalars['Boolean'];
  workProfileDataSharingType: GraphAndroidWorkProfileCrossProfileDataSharingType;
  workProfileDefaultAppPermissionPolicy: GraphAndroidWorkProfileDefaultAppPermissionPolicyType;
  workProfilePasswordBlockFingerprintUnlock: Scalars['Boolean'];
  workProfilePasswordBlockTrustAgents: Scalars['Boolean'];
  workProfilePasswordExpirationDays?: Maybe<Scalars['Int']>;
  workProfilePasswordMinimumLength?: Maybe<Scalars['Int']>;
  workProfilePasswordMinLetterCharacters?: Maybe<Scalars['Int']>;
  workProfilePasswordMinLowerCaseCharacters?: Maybe<Scalars['Int']>;
  workProfilePasswordMinNonLetterCharacters?: Maybe<Scalars['Int']>;
  workProfilePasswordMinNumericCharacters?: Maybe<Scalars['Int']>;
  workProfilePasswordMinSymbolCharacters?: Maybe<Scalars['Int']>;
  workProfilePasswordMinUpperCaseCharacters?: Maybe<Scalars['Int']>;
  workProfilePasswordMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  workProfilePasswordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  workProfilePasswordRequiredType: GraphAndroidWorkProfileRequiredPasswordType;
  workProfilePasswordSignInFailureCountBeforeFactoryReset?: Maybe<Scalars['Int']>;
  workProfileRequirePassword: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAndroidWorkProfileGeneralDeviceConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export enum GraphAndroidWorkProfileRequiredPasswordType {
  DeviceDefault = 'deviceDefault',
  LowSecurityBiometric = 'lowSecurityBiometric',
  Required = 'required',
  AtLeastNumeric = 'atLeastNumeric',
  NumericComplex = 'numericComplex',
  AtLeastAlphabetic = 'atLeastAlphabetic',
  AtLeastAlphanumeric = 'atLeastAlphanumeric',
  AlphanumericWithSymbols = 'alphanumericWithSymbols',
}

export type GraphApiApplication = {
  __typename?: 'GraphApiApplication';
  acceptMappedClaims?: Maybe<Scalars['Boolean']>;
  knownClientApplications?: Maybe<Array<Maybe<Scalars['GUID']>>>;
  oauth2PermissionScopes: Array<Maybe<GraphPermissionScope>>;
  preAuthorizedApplications?: Maybe<Array<Maybe<GraphPreAuthorizedApplication>>>;
  requestedAccessTokenVersion?: Maybe<Scalars['Int']>;
};

export type GraphApiApplicationInput = {
  acceptMappedClaims?: Maybe<Scalars['Boolean']>;
  knownClientApplications?: Maybe<Array<Maybe<Scalars['GUID']>>>;
  oauth2PermissionScopes: Array<Maybe<GraphPermissionScopeInput>>;
  preAuthorizedApplications?: Maybe<Array<Maybe<GraphPreAuthorizedApplicationInput>>>;
  requestedAccessTokenVersion?: Maybe<Scalars['Int']>;
};

export type GraphApiAuthenticationConfigurationBase = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphApiAuthenticationConfigurationBaseInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAppCatalogs = GraphEntity & {
  __typename?: 'GraphAppCatalogs';
  teamsApps?: Maybe<Array<Maybe<GraphTeamsApp>>>;
  teamsAppsById?: Maybe<GraphTeamsApp>;
  id: Scalars['String'];
};

export type GraphAppCatalogsTeamsAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAppCatalogsTeamsAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAppConfigurationSettingItem = {
  __typename?: 'GraphAppConfigurationSettingItem';
  appConfigKey: Scalars['String'];
  appConfigKeyType: GraphMdmAppConfigKeyType;
  appConfigKeyValue: Scalars['String'];
};

export type GraphAppConsentApprovalRoute = GraphEntity & {
  __typename?: 'GraphAppConsentApprovalRoute';
  appConsentRequests?: Maybe<Array<Maybe<GraphAppConsentRequest>>>;
  appConsentRequestsById?: Maybe<GraphAppConsentRequest>;
  id: Scalars['String'];
};

export type GraphAppConsentApprovalRouteAppConsentRequestsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAppConsentApprovalRouteAppConsentRequestsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAppConsentRequest = GraphEntity & {
  __typename?: 'GraphAppConsentRequest';
  appDisplayName?: Maybe<Scalars['String']>;
  appId: Scalars['String'];
  pendingScopes?: Maybe<Array<Maybe<GraphAppConsentRequestScope>>>;
  userConsentRequests?: Maybe<Array<Maybe<GraphUserConsentRequest>>>;
  userConsentRequestsById?: Maybe<GraphUserConsentRequest>;
  filterByCurrentUser?: Maybe<Array<Maybe<GraphAppConsentRequest>>>;
  id: Scalars['String'];
};

export type GraphAppConsentRequestUserConsentRequestsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAppConsentRequestUserConsentRequestsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAppConsentRequestScope = {
  __typename?: 'GraphAppConsentRequestScope';
  displayName?: Maybe<Scalars['String']>;
};

export type GraphAppHostedMediaConfig = GraphMediaConfig & {
  __typename?: 'GraphAppHostedMediaConfig';
  blob?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAppIdentity = {
  __typename?: 'GraphAppIdentity';
  appId?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  servicePrincipalId?: Maybe<Scalars['String']>;
  servicePrincipalName?: Maybe<Scalars['String']>;
};

export type GraphAppListItem = {
  __typename?: 'GraphAppListItem';
  appId?: Maybe<Scalars['String']>;
  appStoreUrl?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  publisher?: Maybe<Scalars['String']>;
};

export enum GraphAppListType {
  None = 'none',
  AppsInListCompliant = 'appsInListCompliant',
  AppsNotInListCompliant = 'appsNotInListCompliant',
}

export enum GraphAppLockerApplicationControlType {
  NotConfigured = 'notConfigured',
  EnforceComponentsAndStoreApps = 'enforceComponentsAndStoreApps',
  AuditComponentsAndStoreApps = 'auditComponentsAndStoreApps',
  EnforceComponentsStoreAppsAndSmartlocker = 'enforceComponentsStoreAppsAndSmartlocker',
  AuditComponentsStoreAppsAndSmartlocker = 'auditComponentsStoreAppsAndSmartlocker',
}

export type GraphAppRole = {
  __typename?: 'GraphAppRole';
  allowedMemberTypes: Array<Maybe<Scalars['String']>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['GUID'];
  isEnabled: Scalars['Boolean'];
  origin?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphAppRoleAssignment = {
  __typename?: 'GraphAppRoleAssignment';
  appRoleId: Scalars['GUID'];
  createdDateTime?: Maybe<Scalars['DateTime']>;
  principalDisplayName?: Maybe<Scalars['String']>;
  principalId?: Maybe<Scalars['GUID']>;
  principalType?: Maybe<Scalars['String']>;
  resourceDisplayName?: Maybe<Scalars['String']>;
  resourceId?: Maybe<Scalars['GUID']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAppRoleAssignmentValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphAppRoleAssignmentCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphAppRoleAssignmentCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphAppRoleAssignmentGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphAppRoleAssignmentGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphAppRoleAssignmentRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphAppRoleAssignmentGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphAppRoleAssignmentGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphAppRoleInput = {
  allowedMemberTypes: Array<Maybe<Scalars['String']>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['GUID'];
  isEnabled: Scalars['Boolean'];
  origin?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphAppScope = GraphEntity & {
  __typename?: 'GraphAppScope';
  displayName?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphAppleDeviceFeaturesConfigurationBase = {
  rest?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAppleDeviceFeaturesConfigurationBaseAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAppleDeviceFeaturesConfigurationBaseAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphApplePushNotificationCertificate = GraphEntity & {
  __typename?: 'GraphApplePushNotificationCertificate';
  appleIdentifier?: Maybe<Scalars['String']>;
  certificate?: Maybe<Scalars['String']>;
  expirationDateTime: Scalars['DateTime'];
  lastModifiedDateTime: Scalars['DateTime'];
  topicIdentifier?: Maybe<Scalars['String']>;
  downloadApplePushNotificationCertificateSigningRequest?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphApplication = {
  __typename?: 'GraphApplication';
  addIns: Array<Maybe<GraphAddIn>>;
  api?: Maybe<GraphApiApplication>;
  appId?: Maybe<Scalars['String']>;
  applicationTemplateId?: Maybe<Scalars['String']>;
  appRoles: Array<Maybe<GraphAppRole>>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  groupMembershipClaims?: Maybe<Scalars['String']>;
  identifierUris: Array<Maybe<Scalars['String']>>;
  info?: Maybe<GraphInformationalUrl>;
  isDeviceOnlyAuthSupported?: Maybe<Scalars['Boolean']>;
  isFallbackPublicClient?: Maybe<Scalars['Boolean']>;
  keyCredentials: Array<Maybe<GraphKeyCredential>>;
  logo: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  oauth2RequirePostResponse: Scalars['Boolean'];
  optionalClaims?: Maybe<GraphOptionalClaims>;
  parentalControlSettings?: Maybe<GraphParentalControlSettings>;
  passwordCredentials: Array<Maybe<GraphPasswordCredential>>;
  publicClient?: Maybe<GraphPublicClientApplication>;
  publisherDomain?: Maybe<Scalars['String']>;
  requiredResourceAccess: Array<Maybe<GraphRequiredResourceAccess>>;
  signInAudience?: Maybe<Scalars['String']>;
  spa?: Maybe<GraphSpaApplication>;
  tags: Array<Maybe<Scalars['String']>>;
  tokenEncryptionKeyId?: Maybe<Scalars['GUID']>;
  web?: Maybe<GraphWebApplication>;
  createdOnBehalfOf?: Maybe<GraphDirectoryObject>;
  extensionProperties?: Maybe<Array<Maybe<GraphExtensionProperty>>>;
  extensionPropertiesById?: Maybe<GraphExtensionProperty>;
  homeRealmDiscoveryPolicies?: Maybe<Array<Maybe<GraphHomeRealmDiscoveryPolicy>>>;
  homeRealmDiscoveryPoliciesById?: Maybe<GraphHomeRealmDiscoveryPolicy>;
  owners?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  ownersById?: Maybe<GraphDirectoryObject>;
  tokenIssuancePolicies?: Maybe<Array<Maybe<GraphTokenIssuancePolicy>>>;
  tokenIssuancePoliciesById?: Maybe<GraphTokenIssuancePolicy>;
  tokenLifetimePolicies?: Maybe<Array<Maybe<GraphTokenLifetimePolicy>>>;
  tokenLifetimePoliciesById?: Maybe<GraphTokenLifetimePolicy>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphApplication>>>;
  addKey?: Maybe<Scalars['JSON']>;
  addPassword?: Maybe<Scalars['JSON']>;
  removeKey?: Maybe<Scalars['JSON']>;
  removePassword?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphApplicationExtensionPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphApplicationExtensionPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphApplicationHomeRealmDiscoveryPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphApplicationHomeRealmDiscoveryPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphApplicationOwnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphApplicationOwnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphApplicationTokenIssuancePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphApplicationTokenIssuancePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphApplicationTokenLifetimePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphApplicationTokenLifetimePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphApplicationAddKeyArgs = {
  bindingParameter: GraphApplicationInput;
  keyCredential: GraphKeyCredentialInput;
  passwordCredential?: Maybe<GraphPasswordCredentialInput>;
  proof: Scalars['String'];
};

export type GraphApplicationAddPasswordArgs = {
  bindingParameter: GraphApplicationInput;
  passwordCredential?: Maybe<GraphPasswordCredentialInput>;
};

export type GraphApplicationRemoveKeyArgs = {
  bindingParameter: GraphApplicationInput;
  keyId: Scalars['GUID'];
  proof: Scalars['String'];
};

export type GraphApplicationRemovePasswordArgs = {
  bindingParameter: GraphApplicationInput;
  keyId: Scalars['GUID'];
};

export type GraphApplicationValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphApplicationCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphApplicationCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphApplicationGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphApplicationGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphApplicationRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphApplicationGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphApplicationGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphApplicationEnforcedRestrictionsSessionControl = GraphConditionalAccessSessionControl & {
  __typename?: 'GraphApplicationEnforcedRestrictionsSessionControl';
  rest?: Maybe<Scalars['JSON']>;
  isEnabled?: Maybe<Scalars['Boolean']>;
};

export enum GraphApplicationGuardBlockClipboardSharingType {
  NotConfigured = 'notConfigured',
  BlockBoth = 'blockBoth',
  BlockHostToContainer = 'blockHostToContainer',
  BlockContainerToHost = 'blockContainerToHost',
  BlockNone = 'blockNone',
}

export enum GraphApplicationGuardBlockFileTransferType {
  NotConfigured = 'notConfigured',
  BlockImageAndTextFile = 'blockImageAndTextFile',
  BlockImageFile = 'blockImageFile',
  BlockNone = 'blockNone',
  BlockTextFile = 'blockTextFile',
}

export type GraphApplicationInput = {
  addIns: Array<Maybe<GraphAddInInput>>;
  api?: Maybe<GraphApiApplicationInput>;
  appId?: Maybe<Scalars['String']>;
  applicationTemplateId?: Maybe<Scalars['String']>;
  appRoles: Array<Maybe<GraphAppRoleInput>>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  groupMembershipClaims?: Maybe<Scalars['String']>;
  identifierUris: Array<Maybe<Scalars['String']>>;
  info?: Maybe<GraphInformationalUrlInput>;
  isDeviceOnlyAuthSupported?: Maybe<Scalars['Boolean']>;
  isFallbackPublicClient?: Maybe<Scalars['Boolean']>;
  keyCredentials: Array<Maybe<GraphKeyCredentialInput>>;
  logo: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  oauth2RequirePostResponse: Scalars['Boolean'];
  optionalClaims?: Maybe<GraphOptionalClaimsInput>;
  parentalControlSettings?: Maybe<GraphParentalControlSettingsInput>;
  passwordCredentials: Array<Maybe<GraphPasswordCredentialInput>>;
  publicClient?: Maybe<GraphPublicClientApplicationInput>;
  publisherDomain?: Maybe<Scalars['String']>;
  requiredResourceAccess: Array<Maybe<GraphRequiredResourceAccessInput>>;
  signInAudience?: Maybe<Scalars['String']>;
  spa?: Maybe<GraphSpaApplicationInput>;
  tags: Array<Maybe<Scalars['String']>>;
  tokenEncryptionKeyId?: Maybe<Scalars['GUID']>;
  web?: Maybe<GraphWebApplicationInput>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphApplicationTemplate = GraphEntity & {
  __typename?: 'GraphApplicationTemplate';
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  homePageUrl?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  supportedProvisioningTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportedSingleSignOnModes?: Maybe<Array<Maybe<Scalars['String']>>>;
  instantiate?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphApplicationTemplateInstantiateArgs = {
  bindingParameter?: Maybe<GraphApplicationTemplateInput>;
  displayName?: Maybe<Scalars['String']>;
};

export type GraphApplicationTemplateInput = {
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  homePageUrl?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  supportedProvisioningTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportedSingleSignOnModes?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphApplicationTemplateUpdateInput = {
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  homePageUrl?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  supportedProvisioningTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportedSingleSignOnModes?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphApplicationType {
  Universal = 'universal',
  Desktop = 'desktop',
}

export type GraphApplicationUpdateInput = {
  addIns?: Maybe<Array<Maybe<GraphAddInInput>>>;
  api?: Maybe<GraphApiApplicationInput>;
  appId?: Maybe<Scalars['String']>;
  applicationTemplateId?: Maybe<Scalars['String']>;
  appRoles?: Maybe<Array<Maybe<GraphAppRoleInput>>>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  groupMembershipClaims?: Maybe<Scalars['String']>;
  identifierUris?: Maybe<Array<Maybe<Scalars['String']>>>;
  info?: Maybe<GraphInformationalUrlInput>;
  isDeviceOnlyAuthSupported?: Maybe<Scalars['Boolean']>;
  isFallbackPublicClient?: Maybe<Scalars['Boolean']>;
  keyCredentials?: Maybe<Array<Maybe<GraphKeyCredentialInput>>>;
  logo?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  oauth2RequirePostResponse?: Maybe<Scalars['Boolean']>;
  optionalClaims?: Maybe<GraphOptionalClaimsInput>;
  parentalControlSettings?: Maybe<GraphParentalControlSettingsInput>;
  passwordCredentials?: Maybe<Array<Maybe<GraphPasswordCredentialInput>>>;
  publicClient?: Maybe<GraphPublicClientApplicationInput>;
  publisherDomain?: Maybe<Scalars['String']>;
  requiredResourceAccess?: Maybe<Array<Maybe<GraphRequiredResourceAccessInput>>>;
  signInAudience?: Maybe<Scalars['String']>;
  spa?: Maybe<GraphSpaApplicationInput>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  tokenEncryptionKeyId?: Maybe<Scalars['GUID']>;
  web?: Maybe<GraphWebApplicationInput>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphAppliedConditionalAccessPolicy = {
  __typename?: 'GraphAppliedConditionalAccessPolicy';
  displayName?: Maybe<Scalars['String']>;
  enforcedGrantControls?: Maybe<Array<Maybe<Scalars['String']>>>;
  enforcedSessionControls?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['String']>;
  result?: Maybe<GraphAppliedConditionalAccessPolicyResult>;
};

export enum GraphAppliedConditionalAccessPolicyResult {
  Success = 'success',
  Failure = 'failure',
  NotApplied = 'notApplied',
  NotEnabled = 'notEnabled',
  Unknown = 'unknown',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphApproval = GraphEntity & {
  __typename?: 'GraphApproval';
  stages?: Maybe<Array<Maybe<GraphApprovalStage>>>;
  stagesById?: Maybe<GraphApprovalStage>;
  id: Scalars['String'];
};

export type GraphApprovalStagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphApprovalStagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphApprovalStage = GraphEntity & {
  __typename?: 'GraphApprovalStage';
  assignedToMe?: Maybe<Scalars['Boolean']>;
  displayName?: Maybe<Scalars['String']>;
  justification?: Maybe<Scalars['String']>;
  reviewedBy?: Maybe<GraphIdentity>;
  reviewedDateTime?: Maybe<Scalars['DateTime']>;
  reviewResult?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphArchivedPrintJob = {
  __typename?: 'GraphArchivedPrintJob';
  acquiredByPrinter: Scalars['Boolean'];
  acquiredDateTime?: Maybe<Scalars['DateTime']>;
  completionDateTime?: Maybe<Scalars['DateTime']>;
  copiesPrinted: Scalars['Int'];
  createdBy?: Maybe<GraphUserIdentity>;
  createdDateTime: Scalars['DateTime'];
  id: Scalars['String'];
  printerId?: Maybe<Scalars['String']>;
  processingState: GraphPrintJobProcessingState;
};

export type GraphAssignedLabel = {
  __typename?: 'GraphAssignedLabel';
  displayName?: Maybe<Scalars['String']>;
  labelId?: Maybe<Scalars['String']>;
};

export type GraphAssignedLabelInput = {
  displayName?: Maybe<Scalars['String']>;
  labelId?: Maybe<Scalars['String']>;
};

export type GraphAssignedLicense = {
  __typename?: 'GraphAssignedLicense';
  disabledPlans: Array<Maybe<Scalars['GUID']>>;
  skuId?: Maybe<Scalars['GUID']>;
};

export type GraphAssignedLicenseInput = {
  disabledPlans: Array<Maybe<Scalars['GUID']>>;
  skuId?: Maybe<Scalars['GUID']>;
};

export type GraphAssignedPlan = {
  __typename?: 'GraphAssignedPlan';
  assignedDateTime?: Maybe<Scalars['DateTime']>;
  capabilityStatus?: Maybe<Scalars['String']>;
  service?: Maybe<Scalars['String']>;
  servicePlanId?: Maybe<Scalars['GUID']>;
};

export type GraphAssignedPlanInput = {
  assignedDateTime?: Maybe<Scalars['DateTime']>;
  capabilityStatus?: Maybe<Scalars['String']>;
  service?: Maybe<Scalars['String']>;
  servicePlanId?: Maybe<Scalars['GUID']>;
};

export type GraphAssignmentOrder = {
  __typename?: 'GraphAssignmentOrder';
  order?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphAssignmentOrderInput = {
  order?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphAttachment = {
  contentType?: Maybe<Scalars['String']>;
  isInline: Scalars['Boolean'];
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  size: Scalars['Int'];
  createUploadSession?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAttachmentCreateUploadSessionArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphAttachmentInput>>>;
  AttachmentItem: GraphAttachmentItemInput;
};

export type GraphAttachmentInput = {
  contentType?: Maybe<Scalars['String']>;
  isInline: Scalars['Boolean'];
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  size: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphAttachmentItemInput = {
  attachmentType?: Maybe<GraphAttachmentType>;
  contentType?: Maybe<Scalars['String']>;
  isInline?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['BigInt']>;
};

export enum GraphAttachmentType {
  File = 'file',
  Item = 'item',
  Reference = 'reference',
}

export type GraphAttendee = {
  __typename?: 'GraphAttendee';
  proposedNewTime?: Maybe<GraphTimeSlot>;
  status?: Maybe<GraphResponseStatus>;
  type?: Maybe<GraphAttendeeType>;
  emailAddress?: Maybe<GraphEmailAddress>;
};

export type GraphAttendeeBaseInput = {
  type?: Maybe<GraphAttendeeType>;
  emailAddress?: Maybe<GraphEmailAddressInput>;
};

export type GraphAttendeeInput = {
  proposedNewTime?: Maybe<GraphTimeSlotInput>;
  status?: Maybe<GraphResponseStatusInput>;
  type?: Maybe<GraphAttendeeType>;
  emailAddress?: Maybe<GraphEmailAddressInput>;
};

export enum GraphAttendeeType {
  Required = 'required',
  Optional = 'optional',
  Resource = 'resource',
}

export enum GraphAttestationLevel {
  Attested = 'attested',
  NotAttested = 'notAttested',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphAudio = {
  __typename?: 'GraphAudio';
  album?: Maybe<Scalars['String']>;
  albumArtist?: Maybe<Scalars['String']>;
  artist?: Maybe<Scalars['String']>;
  bitrate?: Maybe<Scalars['BigInt']>;
  composers?: Maybe<Scalars['String']>;
  copyright?: Maybe<Scalars['String']>;
  disc?: Maybe<Scalars['Int']>;
  discCount?: Maybe<Scalars['Int']>;
  duration?: Maybe<Scalars['BigInt']>;
  genre?: Maybe<Scalars['String']>;
  hasDrm?: Maybe<Scalars['Boolean']>;
  isVariableBitrate?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  track?: Maybe<Scalars['Int']>;
  trackCount?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type GraphAudioConferencing = {
  __typename?: 'GraphAudioConferencing';
  conferenceId?: Maybe<Scalars['String']>;
  dialinUrl?: Maybe<Scalars['String']>;
  tollFreeNumber?: Maybe<Scalars['String']>;
  tollNumber?: Maybe<Scalars['String']>;
};

export type GraphAudioConferencingInput = {
  conferenceId?: Maybe<Scalars['String']>;
  dialinUrl?: Maybe<Scalars['String']>;
  tollFreeNumber?: Maybe<Scalars['String']>;
  tollNumber?: Maybe<Scalars['String']>;
};

export type GraphAudioInput = {
  album?: Maybe<Scalars['String']>;
  albumArtist?: Maybe<Scalars['String']>;
  artist?: Maybe<Scalars['String']>;
  bitrate?: Maybe<Scalars['BigInt']>;
  composers?: Maybe<Scalars['String']>;
  copyright?: Maybe<Scalars['String']>;
  disc?: Maybe<Scalars['Int']>;
  discCount?: Maybe<Scalars['Int']>;
  duration?: Maybe<Scalars['BigInt']>;
  genre?: Maybe<Scalars['String']>;
  hasDrm?: Maybe<Scalars['Boolean']>;
  isVariableBitrate?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  track?: Maybe<Scalars['Int']>;
  trackCount?: Maybe<Scalars['Int']>;
  year?: Maybe<Scalars['Int']>;
};

export type GraphAuditActivityInitiator = {
  __typename?: 'GraphAuditActivityInitiator';
  app?: Maybe<GraphAppIdentity>;
  user?: Maybe<GraphUserIdentity>;
};

export type GraphAuditLogRoot = GraphEntity & {
  __typename?: 'GraphAuditLogRoot';
  directoryAudits?: Maybe<Array<Maybe<GraphDirectoryAudit>>>;
  directoryAuditsById?: Maybe<GraphDirectoryAudit>;
  provisioning?: Maybe<Array<Maybe<GraphProvisioningObjectSummary>>>;
  provisioningById?: Maybe<GraphProvisioningObjectSummary>;
  restrictedSignIns?: Maybe<Array<Maybe<GraphRestrictedSignIn>>>;
  restrictedSignInsById?: Maybe<GraphRestrictedSignIn>;
  signIns?: Maybe<Array<Maybe<GraphSignIn>>>;
  signInsById?: Maybe<GraphSignIn>;
  id: Scalars['String'];
};

export type GraphAuditLogRootDirectoryAuditsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuditLogRootDirectoryAuditsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuditLogRootProvisioningArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuditLogRootProvisioningByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuditLogRootRestrictedSignInsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuditLogRootRestrictedSignInsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuditLogRootSignInsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuditLogRootSignInsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuthentication = GraphEntity & {
  __typename?: 'GraphAuthentication';
  fido2Methods?: Maybe<Array<Maybe<GraphFido2AuthenticationMethod>>>;
  fido2MethodsById?: Maybe<GraphFido2AuthenticationMethod>;
  methods?: Maybe<Array<Maybe<GraphAuthenticationMethod>>>;
  methodsById?: Maybe<GraphAuthenticationMethod>;
  microsoftAuthenticatorMethods?: Maybe<Array<Maybe<GraphMicrosoftAuthenticatorAuthenticationMethod>>>;
  microsoftAuthenticatorMethodsById?: Maybe<GraphMicrosoftAuthenticatorAuthenticationMethod>;
  windowsHelloForBusinessMethods?: Maybe<Array<Maybe<GraphWindowsHelloForBusinessAuthenticationMethod>>>;
  windowsHelloForBusinessMethodsById?: Maybe<GraphWindowsHelloForBusinessAuthenticationMethod>;
  id: Scalars['String'];
};

export type GraphAuthenticationFido2MethodsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuthenticationFido2MethodsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuthenticationMethodsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuthenticationMethodsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuthenticationMicrosoftAuthenticatorMethodsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuthenticationMicrosoftAuthenticatorMethodsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuthenticationWindowsHelloForBusinessMethodsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuthenticationWindowsHelloForBusinessMethodsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphAuthenticationFlowsPolicy = GraphEntity & {
  __typename?: 'GraphAuthenticationFlowsPolicy';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  selfServiceSignUp?: Maybe<GraphSelfServiceSignUpAuthenticationFlowConfiguration>;
  id: Scalars['String'];
};

export type GraphAuthenticationMethod = {
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAuthenticationMethodConfiguration = {
  state?: Maybe<GraphAuthenticationMethodState>;
  id: Scalars['String'];
};

export type GraphAuthenticationMethodConfigurationInput = {
  state?: Maybe<GraphAuthenticationMethodState>;
  id: Scalars['String'];
};

export type GraphAuthenticationMethodConfigurationUpdateInput = {
  state?: Maybe<GraphAuthenticationMethodState>;
};

export enum GraphAuthenticationMethodKeyStrength {
  Normal = 'normal',
  Weak = 'weak',
  Unknown = 'unknown',
}

export enum GraphAuthenticationMethodState {
  Enabled = 'enabled',
  Disabled = 'disabled',
}

export type GraphAuthenticationMethodTarget = GraphEntity & {
  __typename?: 'GraphAuthenticationMethodTarget';
  isRegistrationRequired: Scalars['Boolean'];
  targetType: GraphAuthenticationMethodTargetType;
  id: Scalars['String'];
};

export enum GraphAuthenticationMethodTargetType {
  User = 'user',
  Group = 'group',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphAuthenticationMethodsPolicy = GraphEntity & {
  __typename?: 'GraphAuthenticationMethodsPolicy';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  policyVersion?: Maybe<Scalars['String']>;
  reconfirmationInDays?: Maybe<Scalars['Int']>;
  authenticationMethodConfigurations?: Maybe<Array<Maybe<GraphAuthenticationMethodConfiguration>>>;
  authenticationMethodConfigurationsById?: Maybe<GraphAuthenticationMethodConfiguration>;
  id: Scalars['String'];
};

export type GraphAuthenticationMethodsPolicyAuthenticationMethodConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphAuthenticationMethodsPolicyAuthenticationMethodConfigurationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphAuthenticatorAppFeatureSettings {
  RequireNumberMatching = 'requireNumberMatching',
}

export type GraphAuthorizationPolicy = GraphPolicyBase & {
  __typename?: 'GraphAuthorizationPolicy';
  allowedToSignUpEmailBasedSubscriptions: Scalars['Boolean'];
  allowedToUseSSPR: Scalars['Boolean'];
  allowEmailVerifiedUsersToJoinOrganization: Scalars['Boolean'];
  allowInvitesFrom?: Maybe<GraphAllowInvitesFrom>;
  blockMsolPowerShell?: Maybe<Scalars['Boolean']>;
  defaultUserRolePermissions: GraphDefaultUserRolePermissions;
  guestUserRoleId?: Maybe<Scalars['GUID']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphAuthorizationPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphAuthorizationPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphAuthorizationPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphAuthorizationPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphAuthorizationPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphAuthorizationPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphAuthorizationPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphAuthorizationPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphAutomaticRepliesSetting = {
  __typename?: 'GraphAutomaticRepliesSetting';
  externalAudience?: Maybe<GraphExternalAudienceScope>;
  externalReplyMessage?: Maybe<Scalars['String']>;
  internalReplyMessage?: Maybe<Scalars['String']>;
  scheduledEndDateTime?: Maybe<GraphDateTimeTimeZone>;
  scheduledStartDateTime?: Maybe<GraphDateTimeTimeZone>;
  status?: Maybe<GraphAutomaticRepliesStatus>;
};

export type GraphAutomaticRepliesSettingInput = {
  externalAudience?: Maybe<GraphExternalAudienceScope>;
  externalReplyMessage?: Maybe<Scalars['String']>;
  internalReplyMessage?: Maybe<Scalars['String']>;
  scheduledEndDateTime?: Maybe<GraphDateTimeTimeZoneInput>;
  scheduledStartDateTime?: Maybe<GraphDateTimeTimeZoneInput>;
  status?: Maybe<GraphAutomaticRepliesStatus>;
};

export enum GraphAutomaticRepliesStatus {
  Disabled = 'disabled',
  AlwaysEnabled = 'alwaysEnabled',
  Scheduled = 'scheduled',
}

export enum GraphAutomaticUpdateMode {
  UserDefined = 'userDefined',
  NotifyDownload = 'notifyDownload',
  AutoInstallAtMaintenanceTime = 'autoInstallAtMaintenanceTime',
  AutoInstallAndRebootAtMaintenanceTime = 'autoInstallAndRebootAtMaintenanceTime',
  AutoInstallAndRebootAtScheduledTime = 'autoInstallAndRebootAtScheduledTime',
  AutoInstallAndRebootWithoutEndUserControl = 'autoInstallAndRebootWithoutEndUserControl',
}

export type GraphAverageComparativeScore = {
  __typename?: 'GraphAverageComparativeScore';
  averageScore?: Maybe<Scalars['Float']>;
  basis?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphB2xIdentityUserFlow = {
  __typename?: 'GraphB2xIdentityUserFlow';
  apiConnectorConfiguration?: Maybe<GraphUserFlowApiConnectorConfiguration>;
  identityProviders?: Maybe<Array<Maybe<GraphIdentityProvider>>>;
  identityProvidersById?: Maybe<GraphIdentityProvider>;
  languages?: Maybe<Array<Maybe<GraphUserFlowLanguageConfiguration>>>;
  languagesById?: Maybe<GraphUserFlowLanguageConfiguration>;
  userAttributeAssignments?: Maybe<Array<Maybe<GraphIdentityUserFlowAttributeAssignment>>>;
  userAttributeAssignmentsById?: Maybe<GraphIdentityUserFlowAttributeAssignment>;
  userFlowIdentityProviders?: Maybe<Array<Maybe<GraphIdentityProviderBase>>>;
  userFlowIdentityProvidersById?: Maybe<GraphIdentityProviderBase>;
  userFlowType: GraphUserFlowType;
  userFlowTypeVersion: Scalars['Float'];
  id: Scalars['String'];
};

export type GraphB2xIdentityUserFlowIdentityProvidersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphB2xIdentityUserFlowIdentityProvidersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphB2xIdentityUserFlowLanguagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphB2xIdentityUserFlowLanguagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphB2xIdentityUserFlowUserAttributeAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphB2xIdentityUserFlowUserAttributeAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphB2xIdentityUserFlowUserFlowIdentityProvidersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphB2xIdentityUserFlowUserFlowIdentityProvidersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphBaseItem = {
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReference>;
  webUrl?: Maybe<Scalars['String']>;
  createdByUser?: Maybe<GraphUser>;
  lastModifiedByUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphBaseItemVersion = {
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  publication?: Maybe<GraphPublicationFacet>;
  id: Scalars['String'];
};

export type GraphBasicAuthentication = GraphApiAuthenticationConfigurationBase & {
  __typename?: 'GraphBasicAuthentication';
  password?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphBitLockerEncryptionMethod {
  AesCbc128 = 'aesCbc128',
  AesCbc256 = 'aesCbc256',
  XtsAes128 = 'xtsAes128',
  XtsAes256 = 'xtsAes256',
}

export type GraphBitLockerRemovableDrivePolicy = {
  __typename?: 'GraphBitLockerRemovableDrivePolicy';
  blockCrossOrganizationWriteAccess: Scalars['Boolean'];
  encryptionMethod?: Maybe<GraphBitLockerEncryptionMethod>;
  requireEncryptionForWriteAccess: Scalars['Boolean'];
};

export enum GraphBodyType {
  Text = 'text',
  Html = 'html',
}

export enum GraphBookingType {
  Unknown = 'unknown',
  Standard = 'standard',
  Reserved = 'reserved',
}

export type GraphBooleanColumn = {
  __typename?: 'GraphBooleanColumn';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphBuiltInIdentityProvider = GraphIdentityProviderBase & {
  __typename?: 'GraphBuiltInIdentityProvider';
  identityProviderType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  availableProviderTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphCalculatedColumn = {
  __typename?: 'GraphCalculatedColumn';
  format?: Maybe<Scalars['String']>;
  formula?: Maybe<Scalars['String']>;
  outputType?: Maybe<Scalars['String']>;
};

export type GraphCalendar = GraphEntity & {
  __typename?: 'GraphCalendar';
  allowedOnlineMeetingProviders?: Maybe<Array<Maybe<GraphOnlineMeetingProviderType>>>;
  canEdit?: Maybe<Scalars['Boolean']>;
  canShare?: Maybe<Scalars['Boolean']>;
  canViewPrivateItems?: Maybe<Scalars['Boolean']>;
  changeKey?: Maybe<Scalars['String']>;
  color?: Maybe<GraphCalendarColor>;
  defaultOnlineMeetingProvider?: Maybe<GraphOnlineMeetingProviderType>;
  hexColor?: Maybe<Scalars['String']>;
  isDefaultCalendar?: Maybe<Scalars['Boolean']>;
  isRemovable?: Maybe<Scalars['Boolean']>;
  isTallyingResponses?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<GraphEmailAddress>;
  calendarPermissions?: Maybe<Array<Maybe<GraphCalendarPermission>>>;
  calendarPermissionsById?: Maybe<GraphCalendarPermission>;
  calendarView?: Maybe<Array<Maybe<GraphEvent>>>;
  calendarViewById?: Maybe<GraphEvent>;
  events?: Maybe<Array<Maybe<GraphEvent>>>;
  eventsById?: Maybe<GraphEvent>;
  multiValueExtendedProperties?: Maybe<Array<Maybe<GraphMultiValueLegacyExtendedProperty>>>;
  multiValueExtendedPropertiesById?: Maybe<GraphMultiValueLegacyExtendedProperty>;
  singleValueExtendedProperties?: Maybe<Array<Maybe<GraphSingleValueLegacyExtendedProperty>>>;
  singleValueExtendedPropertiesById?: Maybe<GraphSingleValueLegacyExtendedProperty>;
  allowedCalendarSharingRoles?: Maybe<Array<Maybe<GraphCalendarRoleType>>>;
  getSchedule?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphCalendarCalendarPermissionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCalendarCalendarPermissionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCalendarCalendarViewArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCalendarCalendarViewByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCalendarEventsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCalendarEventsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCalendarMultiValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCalendarMultiValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCalendarSingleValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCalendarSingleValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCalendarGetScheduleArgs = {
  bindingParameter?: Maybe<GraphCalendarInput>;
  Schedules?: Maybe<Array<Maybe<Scalars['String']>>>;
  EndTime?: Maybe<GraphDateTimeTimeZoneInput>;
  StartTime?: Maybe<GraphDateTimeTimeZoneInput>;
  AvailabilityViewInterval?: Maybe<Scalars['Int']>;
};

export enum GraphCalendarColor {
  Auto = 'auto',
  LightBlue = 'lightBlue',
  LightGreen = 'lightGreen',
  LightOrange = 'lightOrange',
  LightGray = 'lightGray',
  LightYellow = 'lightYellow',
  LightTeal = 'lightTeal',
  LightPink = 'lightPink',
  LightBrown = 'lightBrown',
  LightRed = 'lightRed',
  MaxColor = 'maxColor',
}

export type GraphCalendarGroup = GraphEntity & {
  __typename?: 'GraphCalendarGroup';
  changeKey?: Maybe<Scalars['String']>;
  classId?: Maybe<Scalars['GUID']>;
  name?: Maybe<Scalars['String']>;
  calendars?: Maybe<Array<Maybe<GraphCalendar>>>;
  calendarsById?: Maybe<GraphCalendar>;
  id: Scalars['String'];
};

export type GraphCalendarGroupCalendarsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCalendarGroupCalendarsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCalendarInput = {
  allowedOnlineMeetingProviders?: Maybe<Array<Maybe<GraphOnlineMeetingProviderType>>>;
  canEdit?: Maybe<Scalars['Boolean']>;
  canShare?: Maybe<Scalars['Boolean']>;
  canViewPrivateItems?: Maybe<Scalars['Boolean']>;
  changeKey?: Maybe<Scalars['String']>;
  color?: Maybe<GraphCalendarColor>;
  defaultOnlineMeetingProvider?: Maybe<GraphOnlineMeetingProviderType>;
  hexColor?: Maybe<Scalars['String']>;
  isDefaultCalendar?: Maybe<Scalars['Boolean']>;
  isRemovable?: Maybe<Scalars['Boolean']>;
  isTallyingResponses?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<GraphEmailAddressInput>;
  id: Scalars['String'];
};

export type GraphCalendarPermission = GraphEntity & {
  __typename?: 'GraphCalendarPermission';
  allowedRoles?: Maybe<Array<Maybe<GraphCalendarRoleType>>>;
  emailAddress?: Maybe<GraphEmailAddress>;
  isInsideOrganization?: Maybe<Scalars['Boolean']>;
  isRemovable?: Maybe<Scalars['Boolean']>;
  role?: Maybe<GraphCalendarRoleType>;
  id: Scalars['String'];
};

export enum GraphCalendarRoleType {
  None = 'none',
  FreeBusyRead = 'freeBusyRead',
  LimitedRead = 'limitedRead',
  Read = 'read',
  Write = 'write',
  DelegateWithoutPrivateEventAccess = 'delegateWithoutPrivateEventAccess',
  DelegateWithPrivateEventAccess = 'delegateWithPrivateEventAccess',
  Custom = 'custom',
}

export type GraphCall = GraphEntity & {
  __typename?: 'GraphCall';
  callbackUri: Scalars['String'];
  callChainId?: Maybe<Scalars['String']>;
  callOptions?: Maybe<GraphCallOptions>;
  callRoutes?: Maybe<Array<Maybe<GraphCallRoute>>>;
  chatInfo?: Maybe<GraphChatInfo>;
  direction?: Maybe<GraphCallDirection>;
  incomingContext?: Maybe<GraphIncomingContext>;
  mediaConfig?: Maybe<GraphMediaConfig>;
  mediaState?: Maybe<GraphCallMediaState>;
  meetingInfo?: Maybe<GraphMeetingInfo>;
  myParticipantId?: Maybe<Scalars['String']>;
  requestedModalities?: Maybe<Array<Maybe<GraphModality>>>;
  resultInfo?: Maybe<GraphResultInfo>;
  source?: Maybe<GraphParticipantInfo>;
  state?: Maybe<GraphCallState>;
  subject?: Maybe<Scalars['String']>;
  targets?: Maybe<Array<Maybe<GraphInvitationParticipantInfo>>>;
  tenantId?: Maybe<Scalars['String']>;
  toneInfo?: Maybe<GraphToneInfo>;
  transcription?: Maybe<GraphCallTranscriptionInfo>;
  operations?: Maybe<Array<Maybe<GraphCommsOperation>>>;
  operationsById?: Maybe<GraphCommsOperation>;
  participants?: Maybe<Array<Maybe<GraphParticipant>>>;
  participantsById?: Maybe<GraphParticipant>;
  rest?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Scalars['JSON']>;
  answer?: Maybe<Scalars['JSON']>;
  cancelMediaProcessing?: Maybe<Scalars['JSON']>;
  changeScreenSharingRole?: Maybe<Scalars['JSON']>;
  keepAlive?: Maybe<Scalars['JSON']>;
  mute?: Maybe<Scalars['JSON']>;
  playPrompt?: Maybe<Scalars['JSON']>;
  recordResponse?: Maybe<Scalars['JSON']>;
  reject?: Maybe<Scalars['JSON']>;
  subscribeToTone?: Maybe<Scalars['JSON']>;
  transfer?: Maybe<Scalars['JSON']>;
  unmute?: Maybe<Scalars['JSON']>;
  updateRecordingStatus?: Maybe<Scalars['JSON']>;
  logTeleconferenceDeviceQuality?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphCallOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCallOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCallParticipantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCallParticipantsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCallRedirectArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  targets: Array<Maybe<GraphInvitationParticipantInfoInput>>;
  timeout?: Maybe<Scalars['Int']>;
  callbackUri?: Maybe<Scalars['String']>;
};

export type GraphCallAnswerArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  callbackUri: Scalars['String'];
  mediaConfig: GraphMediaConfigInput;
  acceptedModalities?: Maybe<Array<Maybe<GraphModality>>>;
};

export type GraphCallCancelMediaProcessingArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphCallChangeScreenSharingRoleArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  role: GraphScreenSharingRole;
};

export type GraphCallKeepAliveArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
};

export type GraphCallMuteArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphCallPlayPromptArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  prompts: Array<Maybe<GraphPromptInput>>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphCallRecordResponseArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  prompts?: Maybe<Array<Maybe<GraphPromptInput>>>;
  bargeInAllowed?: Maybe<Scalars['Boolean']>;
  initialSilenceTimeoutInSeconds?: Maybe<Scalars['Int']>;
  maxSilenceTimeoutInSeconds?: Maybe<Scalars['Int']>;
  maxRecordDurationInSeconds?: Maybe<Scalars['Int']>;
  playBeep?: Maybe<Scalars['Boolean']>;
  stopTones?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphCallRejectArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  reason?: Maybe<GraphRejectReason>;
  callbackUri?: Maybe<Scalars['String']>;
};

export type GraphCallSubscribeToToneArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphCallTransferArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  transferTarget: GraphInvitationParticipantInfoInput;
};

export type GraphCallUnmuteArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphCallUpdateRecordingStatusArgs = {
  bindingParameter?: Maybe<GraphCallInput>;
  status: GraphRecordingStatus;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphCallLogTeleconferenceDeviceQualityArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphCallInput>>>;
  quality: GraphTeleconferenceDeviceQualityInput;
};

export enum GraphCallDirection {
  Incoming = 'incoming',
  Outgoing = 'outgoing',
}

export type GraphCallInput = {
  callbackUri: Scalars['String'];
  callChainId?: Maybe<Scalars['String']>;
  callOptions?: Maybe<GraphCallOptionsInput>;
  callRoutes?: Maybe<Array<Maybe<GraphCallRouteInput>>>;
  chatInfo?: Maybe<GraphChatInfoInput>;
  direction?: Maybe<GraphCallDirection>;
  incomingContext?: Maybe<GraphIncomingContextInput>;
  mediaConfig?: Maybe<GraphMediaConfigInput>;
  mediaState?: Maybe<GraphCallMediaStateInput>;
  meetingInfo?: Maybe<GraphMeetingInfoInput>;
  myParticipantId?: Maybe<Scalars['String']>;
  requestedModalities?: Maybe<Array<Maybe<GraphModality>>>;
  resultInfo?: Maybe<GraphResultInfoInput>;
  source?: Maybe<GraphParticipantInfoInput>;
  state?: Maybe<GraphCallState>;
  subject?: Maybe<Scalars['String']>;
  targets?: Maybe<Array<Maybe<GraphInvitationParticipantInfoInput>>>;
  tenantId?: Maybe<Scalars['String']>;
  toneInfo?: Maybe<GraphToneInfoInput>;
  transcription?: Maybe<GraphCallTranscriptionInfoInput>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphCallMediaState = {
  __typename?: 'GraphCallMediaState';
  audio?: Maybe<GraphMediaState>;
};

export type GraphCallMediaStateInput = {
  audio?: Maybe<GraphMediaState>;
};

export type GraphCallOptions = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphCallOptionsInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphCallRoute = {
  __typename?: 'GraphCallRoute';
  final: GraphIdentitySet;
  original: GraphIdentitySet;
  routingType: GraphRoutingType;
};

export type GraphCallRouteInput = {
  final: GraphIdentitySetInput;
  original: GraphIdentitySetInput;
  routingType: GraphRoutingType;
};

export enum GraphCallState {
  Incoming = 'incoming',
  Establishing = 'establishing',
  Established = 'established',
  Hold = 'hold',
  Transferring = 'transferring',
  TransferAccepted = 'transferAccepted',
  Redirecting = 'redirecting',
  Terminating = 'terminating',
  Terminated = 'terminated',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphCallTranscriptionInfo = {
  __typename?: 'GraphCallTranscriptionInfo';
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  state: GraphCallTranscriptionState;
};

export type GraphCallTranscriptionInfoInput = {
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  state: GraphCallTranscriptionState;
};

export enum GraphCallTranscriptionState {
  NotStarted = 'notStarted',
  Active = 'active',
  Inactive = 'inactive',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphCategoryColor {
  None = 'none',
  Preset0 = 'preset0',
  Preset1 = 'preset1',
  Preset2 = 'preset2',
  Preset3 = 'preset3',
  Preset4 = 'preset4',
  Preset5 = 'preset5',
  Preset6 = 'preset6',
  Preset7 = 'preset7',
  Preset8 = 'preset8',
  Preset9 = 'preset9',
  Preset10 = 'preset10',
  Preset11 = 'preset11',
  Preset12 = 'preset12',
  Preset13 = 'preset13',
  Preset14 = 'preset14',
  Preset15 = 'preset15',
  Preset16 = 'preset16',
  Preset17 = 'preset17',
  Preset18 = 'preset18',
  Preset19 = 'preset19',
  Preset20 = 'preset20',
  Preset21 = 'preset21',
  Preset22 = 'preset22',
  Preset23 = 'preset23',
  Preset24 = 'preset24',
}

export type GraphCertificateAuthority = {
  __typename?: 'GraphCertificateAuthority';
  certificate: Scalars['String'];
  certificateRevocationListUrl?: Maybe<Scalars['String']>;
  deltaCertificateRevocationListUrl?: Maybe<Scalars['String']>;
  isRootAuthority: Scalars['Boolean'];
  issuer: Scalars['String'];
  issuerSki: Scalars['String'];
};

export type GraphCertificateAuthorityInput = {
  certificate: Scalars['String'];
  certificateRevocationListUrl?: Maybe<Scalars['String']>;
  deltaCertificateRevocationListUrl?: Maybe<Scalars['String']>;
  isRootAuthority: Scalars['Boolean'];
  issuer: Scalars['String'];
  issuerSki: Scalars['String'];
};

export type GraphCertificateBasedAuthConfiguration = GraphEntity & {
  __typename?: 'GraphCertificateBasedAuthConfiguration';
  certificateAuthorities: Array<Maybe<GraphCertificateAuthority>>;
  id: Scalars['String'];
};

export type GraphCertificateBasedAuthConfigurationInput = {
  certificateAuthorities: Array<Maybe<GraphCertificateAuthorityInput>>;
  id: Scalars['String'];
};

export type GraphCertificateBasedAuthConfigurationUpdateInput = {
  certificateAuthorities?: Maybe<Array<Maybe<GraphCertificateAuthorityInput>>>;
};

export type GraphCertificationControl = {
  __typename?: 'GraphCertificationControl';
  name?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphChangeTrackedEntity = {
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphChannel = GraphEntity & {
  __typename?: 'GraphChannel';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  isFavoriteByDefault?: Maybe<Scalars['Boolean']>;
  membershipType?: Maybe<GraphChannelMembershipType>;
  webUrl?: Maybe<Scalars['String']>;
  filesFolder?: Maybe<GraphDriveItem>;
  members?: Maybe<Array<Maybe<GraphConversationMember>>>;
  membersById?: Maybe<GraphConversationMember>;
  messages?: Maybe<Array<Maybe<GraphChatMessage>>>;
  messagesById?: Maybe<GraphChatMessage>;
  tabs?: Maybe<Array<Maybe<GraphTeamsTab>>>;
  tabsById?: Maybe<GraphTeamsTab>;
  completeMigration?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphChannelMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChannelMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChannelMessagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChannelMessagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChannelTabsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChannelTabsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChannelCompleteMigrationArgs = {
  bindingParameter?: Maybe<GraphChannelInput>;
};

export type GraphChannelIdentity = {
  __typename?: 'GraphChannelIdentity';
  channelId?: Maybe<Scalars['String']>;
  teamId?: Maybe<Scalars['String']>;
};

export type GraphChannelInput = {
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  isFavoriteByDefault?: Maybe<Scalars['Boolean']>;
  membershipType?: Maybe<GraphChannelMembershipType>;
  webUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphChannelMembershipType {
  Standard = 'standard',
  Private = 'private',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphChat = GraphEntity & {
  __typename?: 'GraphChat';
  chatType: GraphChatType;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastUpdatedDateTime?: Maybe<Scalars['DateTime']>;
  topic?: Maybe<Scalars['String']>;
  installedApps?: Maybe<Array<Maybe<GraphTeamsAppInstallation>>>;
  installedAppsById?: Maybe<GraphTeamsAppInstallation>;
  members?: Maybe<Array<Maybe<GraphConversationMember>>>;
  membersById?: Maybe<GraphConversationMember>;
  messages?: Maybe<Array<Maybe<GraphChatMessage>>>;
  messagesById?: Maybe<GraphChatMessage>;
  tabs?: Maybe<Array<Maybe<GraphTeamsTab>>>;
  tabsById?: Maybe<GraphTeamsTab>;
  getAllMessages?: Maybe<Array<Maybe<GraphChatMessage>>>;
  sendActivityNotification?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphChatInstalledAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChatInstalledAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChatMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChatMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChatMessagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChatMessagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChatTabsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChatTabsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChatSendActivityNotificationArgs = {
  bindingParameter?: Maybe<GraphChatInput>;
  topic?: Maybe<GraphTeamworkActivityTopicInput>;
  activityType?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['BigInt']>;
  previewText?: Maybe<GraphItemBodyInput>;
  templateParameters?: Maybe<Array<Maybe<GraphKeyValuePairInput>>>;
  recipient?: Maybe<GraphTeamworkNotificationRecipientInput>;
};

export type GraphChatInfo = {
  __typename?: 'GraphChatInfo';
  messageId?: Maybe<Scalars['String']>;
  replyChainMessageId?: Maybe<Scalars['String']>;
  threadId?: Maybe<Scalars['String']>;
};

export type GraphChatInfoInput = {
  messageId?: Maybe<Scalars['String']>;
  replyChainMessageId?: Maybe<Scalars['String']>;
  threadId?: Maybe<Scalars['String']>;
};

export type GraphChatInput = {
  chatType: GraphChatType;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastUpdatedDateTime?: Maybe<Scalars['DateTime']>;
  topic?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphChatMessage = GraphEntity & {
  __typename?: 'GraphChatMessage';
  attachments?: Maybe<Array<Maybe<GraphChatMessageAttachment>>>;
  body: GraphItemBody;
  channelIdentity?: Maybe<GraphChannelIdentity>;
  chatId?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  etag?: Maybe<Scalars['String']>;
  from?: Maybe<GraphIdentitySet>;
  importance: GraphChatMessageImportance;
  lastEditedDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  locale: Scalars['String'];
  mentions?: Maybe<Array<Maybe<GraphChatMessageMention>>>;
  messageType: GraphChatMessageType;
  policyViolation?: Maybe<GraphChatMessagePolicyViolation>;
  reactions?: Maybe<Array<Maybe<GraphChatMessageReaction>>>;
  replyToId?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
  hostedContents?: Maybe<Array<Maybe<GraphChatMessageHostedContent>>>;
  hostedContentsById?: Maybe<GraphChatMessageHostedContent>;
  replies?: Maybe<Array<Maybe<GraphChatMessage>>>;
  repliesById?: Maybe<GraphChatMessage>;
  delta?: Maybe<Array<Maybe<GraphChatMessage>>>;
  id: Scalars['String'];
};

export type GraphChatMessageHostedContentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChatMessageHostedContentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChatMessageRepliesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphChatMessageRepliesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphChatMessageAttachment = {
  __typename?: 'GraphChatMessageAttachment';
  content?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  contentUrl?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  thumbnailUrl?: Maybe<Scalars['String']>;
};

export type GraphChatMessageHostedContent = {
  __typename?: 'GraphChatMessageHostedContent';
  rest?: Maybe<Scalars['JSON']>;
  contentBytes?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphChatMessageImportance {
  Normal = 'normal',
  High = 'high',
  Urgent = 'urgent',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphChatMessageMention = {
  __typename?: 'GraphChatMessageMention';
  id?: Maybe<Scalars['Int']>;
  mentioned?: Maybe<GraphIdentitySet>;
  mentionText?: Maybe<Scalars['String']>;
};

export type GraphChatMessagePolicyViolation = {
  __typename?: 'GraphChatMessagePolicyViolation';
  dlpAction?: Maybe<GraphChatMessagePolicyViolationDlpActionTypes>;
  justificationText?: Maybe<Scalars['String']>;
  policyTip?: Maybe<GraphChatMessagePolicyViolationPolicyTip>;
  userAction?: Maybe<GraphChatMessagePolicyViolationUserActionTypes>;
  verdictDetails?: Maybe<GraphChatMessagePolicyViolationVerdictDetailsTypes>;
};

export enum GraphChatMessagePolicyViolationDlpActionTypes {
  None = 'none',
  NotifySender = 'notifySender',
  BlockAccess = 'blockAccess',
  BlockAccessExternal = 'blockAccessExternal',
}

export type GraphChatMessagePolicyViolationPolicyTip = {
  __typename?: 'GraphChatMessagePolicyViolationPolicyTip';
  complianceUrl?: Maybe<Scalars['String']>;
  generalText?: Maybe<Scalars['String']>;
  matchedConditionDescriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphChatMessagePolicyViolationUserActionTypes {
  None = 'none',
  Override = 'override',
  ReportFalsePositive = 'reportFalsePositive',
}

export enum GraphChatMessagePolicyViolationVerdictDetailsTypes {
  None = 'none',
  AllowFalsePositiveOverride = 'allowFalsePositiveOverride',
  AllowOverrideWithoutJustification = 'allowOverrideWithoutJustification',
  AllowOverrideWithJustification = 'allowOverrideWithJustification',
}

export type GraphChatMessageReaction = {
  __typename?: 'GraphChatMessageReaction';
  createdDateTime: Scalars['DateTime'];
  reactionType: Scalars['String'];
  user: GraphIdentitySet;
};

export enum GraphChatMessageType {
  Message = 'message',
  ChatEvent = 'chatEvent',
  Typing = 'typing',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphChatType {
  OneOnOne = 'oneOnOne',
  Group = 'group',
  Meeting = 'meeting',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphChatUpdateInput = {
  chatType?: Maybe<GraphChatType>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastUpdatedDateTime?: Maybe<Scalars['DateTime']>;
  topic?: Maybe<Scalars['String']>;
};

export type GraphChoiceColumn = {
  __typename?: 'GraphChoiceColumn';
  allowTextEntry?: Maybe<Scalars['Boolean']>;
  choices?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayAs?: Maybe<Scalars['String']>;
};

export type GraphClaimsMappingPolicy = GraphStsPolicy & {
  __typename?: 'GraphClaimsMappingPolicy';
  rest?: Maybe<Scalars['JSON']>;
  definition: Array<Maybe<Scalars['String']>>;
  isOrganizationDefault?: Maybe<Scalars['Boolean']>;
  appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  appliesToById?: Maybe<GraphDirectoryObject>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphClaimsMappingPolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphClaimsMappingPolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphClaimsMappingPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphClaimsMappingPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphClaimsMappingPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphClaimsMappingPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphClaimsMappingPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphClaimsMappingPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphClaimsMappingPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphClaimsMappingPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphClientCertificateAuthentication = GraphApiAuthenticationConfigurationBase & {
  __typename?: 'GraphClientCertificateAuthentication';
  certificateList?: Maybe<Array<Maybe<GraphPkcs12CertificateInformation>>>;
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphClonableTeamParts {
  Apps = 'apps',
  Tabs = 'tabs',
  Settings = 'settings',
  Channels = 'channels',
  Members = 'members',
}

export type GraphCloudAppSecuritySessionControl = GraphConditionalAccessSessionControl & {
  __typename?: 'GraphCloudAppSecuritySessionControl';
  cloudAppSecurityType?: Maybe<GraphCloudAppSecuritySessionControlType>;
  isEnabled?: Maybe<Scalars['Boolean']>;
};

export enum GraphCloudAppSecuritySessionControlType {
  McasConfigured = 'mcasConfigured',
  MonitorOnly = 'monitorOnly',
  BlockDownloads = 'blockDownloads',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphCloudAppSecurityState = {
  __typename?: 'GraphCloudAppSecurityState';
  destinationServiceIp?: Maybe<Scalars['String']>;
  destinationServiceName?: Maybe<Scalars['String']>;
  riskScore?: Maybe<Scalars['String']>;
};

export type GraphCloudCommunications = GraphEntity & {
  __typename?: 'GraphCloudCommunications';
  calls?: Maybe<Array<Maybe<GraphCall>>>;
  callsById?: Maybe<GraphCall>;
  callRecords?: Maybe<Array<Maybe<MicrosoftGraphCallRecordsCallRecord>>>;
  callRecordsById?: Maybe<MicrosoftGraphCallRecordsCallRecord>;
  onlineMeetings?: Maybe<Array<Maybe<GraphOnlineMeeting>>>;
  onlineMeetingsById?: Maybe<GraphOnlineMeeting>;
  presences?: Maybe<Array<Maybe<GraphPresence>>>;
  presencesById?: Maybe<GraphPresence>;
  getPresencesByUserId?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphCloudCommunicationsCallsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCloudCommunicationsCallsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCloudCommunicationsCallRecordsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCloudCommunicationsCallRecordsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCloudCommunicationsOnlineMeetingsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCloudCommunicationsOnlineMeetingsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCloudCommunicationsPresencesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphCloudCommunicationsPresencesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphCloudCommunicationsGetPresencesByUserIdArgs = {
  bindingParameter?: Maybe<GraphCloudCommunicationsInput>;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphCloudCommunicationsInput = {
  id: Scalars['String'];
};

export type GraphColumnDefinition = GraphEntity & {
  __typename?: 'GraphColumnDefinition';
  boolean?: Maybe<GraphBooleanColumn>;
  calculated?: Maybe<GraphCalculatedColumn>;
  choice?: Maybe<GraphChoiceColumn>;
  columnGroup?: Maybe<Scalars['String']>;
  currency?: Maybe<GraphCurrencyColumn>;
  dateTime?: Maybe<GraphDateTimeColumn>;
  defaultValue?: Maybe<GraphDefaultColumnValue>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  enforceUniqueValues?: Maybe<Scalars['Boolean']>;
  geolocation?: Maybe<GraphGeolocationColumn>;
  hidden?: Maybe<Scalars['Boolean']>;
  indexed?: Maybe<Scalars['Boolean']>;
  lookup?: Maybe<GraphLookupColumn>;
  name?: Maybe<Scalars['String']>;
  number?: Maybe<GraphNumberColumn>;
  personOrGroup?: Maybe<GraphPersonOrGroupColumn>;
  readOnly?: Maybe<Scalars['Boolean']>;
  required?: Maybe<Scalars['Boolean']>;
  text?: Maybe<GraphTextColumn>;
  id: Scalars['String'];
};

export type GraphColumnLink = GraphEntity & {
  __typename?: 'GraphColumnLink';
  name?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphCommsOperation = GraphEntity & {
  __typename?: 'GraphCommsOperation';
  clientContext?: Maybe<Scalars['String']>;
  resultInfo?: Maybe<GraphResultInfo>;
  status: GraphOperationStatus;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphComplianceInformation = {
  __typename?: 'GraphComplianceInformation';
  certificationControls?: Maybe<Array<Maybe<GraphCertificationControl>>>;
  certificationName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphComplianceManagementPartner = GraphEntity & {
  __typename?: 'GraphComplianceManagementPartner';
  androidEnrollmentAssignments?: Maybe<Array<Maybe<GraphComplianceManagementPartnerAssignment>>>;
  androidOnboarded: Scalars['Boolean'];
  displayName?: Maybe<Scalars['String']>;
  iosEnrollmentAssignments?: Maybe<Array<Maybe<GraphComplianceManagementPartnerAssignment>>>;
  iosOnboarded: Scalars['Boolean'];
  lastHeartbeatDateTime: Scalars['DateTime'];
  macOsEnrollmentAssignments?: Maybe<Array<Maybe<GraphComplianceManagementPartnerAssignment>>>;
  macOsOnboarded: Scalars['Boolean'];
  partnerState: GraphDeviceManagementPartnerTenantState;
  id: Scalars['String'];
};

export type GraphComplianceManagementPartnerAssignment = {
  __typename?: 'GraphComplianceManagementPartnerAssignment';
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
};

export enum GraphComplianceState {
  Unknown = 'unknown',
  Compliant = 'compliant',
  Noncompliant = 'noncompliant',
  Conflict = 'conflict',
  Error = 'error',
  InGracePeriod = 'inGracePeriod',
  ConfigManager = 'configManager',
}

export enum GraphComplianceStatus {
  Unknown = 'unknown',
  NotApplicable = 'notApplicable',
  Compliant = 'compliant',
  Remediated = 'remediated',
  NonCompliant = 'nonCompliant',
  Error = 'error',
  Conflict = 'conflict',
  NotAssigned = 'notAssigned',
}

export type GraphConditionalAccessApplications = {
  __typename?: 'GraphConditionalAccessApplications';
  excludeApplications: Array<Maybe<Scalars['String']>>;
  includeApplications: Array<Maybe<Scalars['String']>>;
  includeUserActions: Array<Maybe<Scalars['String']>>;
};

export enum GraphConditionalAccessClientApp {
  All = 'all',
  Browser = 'browser',
  MobileAppsAndDesktopClients = 'mobileAppsAndDesktopClients',
  ExchangeActiveSync = 'exchangeActiveSync',
  EasSupported = 'easSupported',
  Other = 'other',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphConditionalAccessConditionSet = {
  __typename?: 'GraphConditionalAccessConditionSet';
  applications?: Maybe<GraphConditionalAccessApplications>;
  clientAppTypes: Array<Maybe<GraphConditionalAccessClientApp>>;
  locations?: Maybe<GraphConditionalAccessLocations>;
  platforms?: Maybe<GraphConditionalAccessPlatforms>;
  signInRiskLevels: Array<Maybe<GraphRiskLevel>>;
  userRiskLevels: Array<Maybe<GraphRiskLevel>>;
  users: GraphConditionalAccessUsers;
};

export enum GraphConditionalAccessDevicePlatform {
  Android = 'android',
  IOs = 'iOS',
  Windows = 'windows',
  WindowsPhone = 'windowsPhone',
  MacOs = 'macOS',
  All = 'all',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphConditionalAccessGrantControl {
  Block = 'block',
  Mfa = 'mfa',
  CompliantDevice = 'compliantDevice',
  DomainJoinedDevice = 'domainJoinedDevice',
  ApprovedApplication = 'approvedApplication',
  CompliantApplication = 'compliantApplication',
  PasswordChange = 'passwordChange',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphConditionalAccessGrantControls = {
  __typename?: 'GraphConditionalAccessGrantControls';
  builtInControls: Array<Maybe<GraphConditionalAccessGrantControl>>;
  customAuthenticationFactors: Array<Maybe<Scalars['String']>>;
  operator?: Maybe<Scalars['String']>;
  termsOfUse: Array<Maybe<Scalars['String']>>;
};

export type GraphConditionalAccessLocations = {
  __typename?: 'GraphConditionalAccessLocations';
  excludeLocations: Array<Maybe<Scalars['String']>>;
  includeLocations: Array<Maybe<Scalars['String']>>;
};

export type GraphConditionalAccessPlatforms = {
  __typename?: 'GraphConditionalAccessPlatforms';
  excludePlatforms: Array<Maybe<GraphConditionalAccessDevicePlatform>>;
  includePlatforms: Array<Maybe<GraphConditionalAccessDevicePlatform>>;
};

export type GraphConditionalAccessPolicy = GraphEntity & {
  __typename?: 'GraphConditionalAccessPolicy';
  conditions: GraphConditionalAccessConditionSet;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  grantControls?: Maybe<GraphConditionalAccessGrantControls>;
  modifiedDateTime?: Maybe<Scalars['DateTime']>;
  sessionControls?: Maybe<GraphConditionalAccessSessionControls>;
  state: GraphConditionalAccessPolicyState;
  id: Scalars['String'];
};

export enum GraphConditionalAccessPolicyState {
  Enabled = 'enabled',
  Disabled = 'disabled',
  EnabledForReportingButNotEnforced = 'enabledForReportingButNotEnforced',
}

export type GraphConditionalAccessRoot = GraphEntity & {
  __typename?: 'GraphConditionalAccessRoot';
  namedLocations?: Maybe<Array<Maybe<GraphNamedLocation>>>;
  namedLocationsById?: Maybe<GraphNamedLocation>;
  policies?: Maybe<Array<Maybe<GraphConditionalAccessPolicy>>>;
  policiesById?: Maybe<GraphConditionalAccessPolicy>;
  id: Scalars['String'];
};

export type GraphConditionalAccessRootNamedLocationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphConditionalAccessRootNamedLocationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphConditionalAccessRootPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphConditionalAccessRootPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphConditionalAccessSessionControl = {
  isEnabled?: Maybe<Scalars['Boolean']>;
};

export type GraphConditionalAccessSessionControls = {
  __typename?: 'GraphConditionalAccessSessionControls';
  applicationEnforcedRestrictions?: Maybe<GraphApplicationEnforcedRestrictionsSessionControl>;
  cloudAppSecurity?: Maybe<GraphCloudAppSecuritySessionControl>;
  persistentBrowser?: Maybe<GraphPersistentBrowserSessionControl>;
  signInFrequency?: Maybe<GraphSignInFrequencySessionControl>;
};

export enum GraphConditionalAccessStatus {
  Success = 'success',
  Failure = 'failure',
  NotApplied = 'notApplied',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphConditionalAccessUsers = {
  __typename?: 'GraphConditionalAccessUsers';
  excludeGroups: Array<Maybe<Scalars['String']>>;
  excludeRoles: Array<Maybe<Scalars['String']>>;
  excludeUsers: Array<Maybe<Scalars['String']>>;
  includeGroups: Array<Maybe<Scalars['String']>>;
  includeRoles: Array<Maybe<Scalars['String']>>;
  includeUsers: Array<Maybe<Scalars['String']>>;
};

export type GraphConfigurationManagerClientEnabledFeatures = {
  __typename?: 'GraphConfigurationManagerClientEnabledFeatures';
  compliancePolicy: Scalars['Boolean'];
  deviceConfiguration: Scalars['Boolean'];
  inventory: Scalars['Boolean'];
  modernApps: Scalars['Boolean'];
  resourceAccess: Scalars['Boolean'];
  windowsUpdateForBusiness: Scalars['Boolean'];
};

export type GraphConfigurationManagerClientEnabledFeaturesInput = {
  compliancePolicy: Scalars['Boolean'];
  deviceConfiguration: Scalars['Boolean'];
  inventory: Scalars['Boolean'];
  modernApps: Scalars['Boolean'];
  resourceAccess: Scalars['Boolean'];
  windowsUpdateForBusiness: Scalars['Boolean'];
};

export enum GraphConnectionDirection {
  Unknown = 'unknown',
  Inbound = 'inbound',
  Outbound = 'outbound',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphConnectionStatus {
  Unknown = 'unknown',
  Attempted = 'attempted',
  Succeeded = 'succeeded',
  Blocked = 'blocked',
  Failed = 'failed',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphContact = GraphOutlookItem & {
  __typename?: 'GraphContact';
  assistantName?: Maybe<Scalars['String']>;
  birthday?: Maybe<Scalars['DateTime']>;
  businessAddress?: Maybe<GraphPhysicalAddress>;
  businessHomePage?: Maybe<Scalars['String']>;
  businessPhones?: Maybe<Array<Maybe<Scalars['String']>>>;
  children?: Maybe<Array<Maybe<Scalars['String']>>>;
  companyName?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  emailAddresses?: Maybe<Array<Maybe<GraphEmailAddress>>>;
  fileAs?: Maybe<Scalars['String']>;
  generation?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<GraphPhysicalAddress>;
  homePhones?: Maybe<Array<Maybe<Scalars['String']>>>;
  imAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  initials?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  manager?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  nickName?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  otherAddress?: Maybe<GraphPhysicalAddress>;
  parentFolderId?: Maybe<Scalars['String']>;
  personalNotes?: Maybe<Scalars['String']>;
  profession?: Maybe<Scalars['String']>;
  spouseName?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  yomiCompanyName?: Maybe<Scalars['String']>;
  yomiGivenName?: Maybe<Scalars['String']>;
  yomiSurname?: Maybe<Scalars['String']>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  multiValueExtendedProperties?: Maybe<Array<Maybe<GraphMultiValueLegacyExtendedProperty>>>;
  multiValueExtendedPropertiesById?: Maybe<GraphMultiValueLegacyExtendedProperty>;
  photo?: Maybe<GraphProfilePhoto>;
  singleValueExtendedProperties?: Maybe<Array<Maybe<GraphSingleValueLegacyExtendedProperty>>>;
  singleValueExtendedPropertiesById?: Maybe<GraphSingleValueLegacyExtendedProperty>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphContact>>>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphContactExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContactExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContactMultiValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContactMultiValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContactSingleValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContactSingleValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContactFolder = GraphEntity & {
  __typename?: 'GraphContactFolder';
  displayName?: Maybe<Scalars['String']>;
  parentFolderId?: Maybe<Scalars['String']>;
  childFolders?: Maybe<Array<Maybe<GraphContactFolder>>>;
  childFoldersById?: Maybe<GraphContactFolder>;
  contacts?: Maybe<Array<Maybe<GraphContact>>>;
  contactsById?: Maybe<GraphContact>;
  multiValueExtendedProperties?: Maybe<Array<Maybe<GraphMultiValueLegacyExtendedProperty>>>;
  multiValueExtendedPropertiesById?: Maybe<GraphMultiValueLegacyExtendedProperty>;
  singleValueExtendedProperties?: Maybe<Array<Maybe<GraphSingleValueLegacyExtendedProperty>>>;
  singleValueExtendedPropertiesById?: Maybe<GraphSingleValueLegacyExtendedProperty>;
  delta?: Maybe<Array<Maybe<GraphContactFolder>>>;
  id: Scalars['String'];
};

export type GraphContactFolderChildFoldersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContactFolderChildFoldersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContactFolderContactsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContactFolderContactsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContactFolderMultiValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContactFolderMultiValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContactFolderSingleValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContactFolderSingleValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContentType = GraphEntity & {
  __typename?: 'GraphContentType';
  description?: Maybe<Scalars['String']>;
  group?: Maybe<Scalars['String']>;
  hidden?: Maybe<Scalars['Boolean']>;
  inheritedFrom?: Maybe<GraphItemReference>;
  name?: Maybe<Scalars['String']>;
  order?: Maybe<GraphContentTypeOrder>;
  parentId?: Maybe<Scalars['String']>;
  readOnly?: Maybe<Scalars['Boolean']>;
  sealed?: Maybe<Scalars['Boolean']>;
  columnLinks?: Maybe<Array<Maybe<GraphColumnLink>>>;
  columnLinksById?: Maybe<GraphColumnLink>;
  id: Scalars['String'];
};

export type GraphContentTypeColumnLinksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphContentTypeColumnLinksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphContentTypeInfo = {
  __typename?: 'GraphContentTypeInfo';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type GraphContentTypeOrder = {
  __typename?: 'GraphContentTypeOrder';
  default?: Maybe<Scalars['Boolean']>;
  position?: Maybe<Scalars['Int']>;
};

export type GraphContract = {
  __typename?: 'GraphContract';
  contractType?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['GUID']>;
  defaultDomainName?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphContractValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphContractCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphContractCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphContractGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphContractGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphContractRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphContractGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphContractGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphContractInput = {
  contractType?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['GUID']>;
  defaultDomainName?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphContractUpdateInput = {
  contractType?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['GUID']>;
  defaultDomainName?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphControlScore = {
  __typename?: 'GraphControlScore';
  controlCategory?: Maybe<Scalars['String']>;
  controlName?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Float']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphConversation = GraphEntity & {
  __typename?: 'GraphConversation';
  hasAttachments: Scalars['Boolean'];
  lastDeliveredDateTime: Scalars['DateTime'];
  preview: Scalars['String'];
  topic: Scalars['String'];
  uniqueSenders: Array<Maybe<Scalars['String']>>;
  threads?: Maybe<Array<Maybe<GraphConversationThread>>>;
  threadsById?: Maybe<GraphConversationThread>;
  id: Scalars['String'];
};

export type GraphConversationThreadsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphConversationThreadsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphConversationMember = {
  displayName?: Maybe<Scalars['String']>;
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  visibleHistoryStartDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphConversationThread = GraphEntity & {
  __typename?: 'GraphConversationThread';
  ccRecipients: Array<Maybe<GraphRecipient>>;
  hasAttachments: Scalars['Boolean'];
  isLocked: Scalars['Boolean'];
  lastDeliveredDateTime: Scalars['DateTime'];
  preview: Scalars['String'];
  topic: Scalars['String'];
  toRecipients: Array<Maybe<GraphRecipient>>;
  uniqueSenders: Array<Maybe<Scalars['String']>>;
  posts?: Maybe<Array<Maybe<GraphPost>>>;
  postsById?: Maybe<GraphPost>;
  reply?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphConversationThreadPostsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphConversationThreadPostsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphConversationThreadReplyArgs = {
  bindingParameter?: Maybe<GraphConversationThreadInput>;
  Post: GraphPostInput;
};

export type GraphConversationThreadInput = {
  ccRecipients: Array<Maybe<GraphRecipientInput>>;
  hasAttachments: Scalars['Boolean'];
  isLocked: Scalars['Boolean'];
  lastDeliveredDateTime: Scalars['DateTime'];
  preview: Scalars['String'];
  topic: Scalars['String'];
  toRecipients: Array<Maybe<GraphRecipientInput>>;
  uniqueSenders: Array<Maybe<Scalars['String']>>;
  id: Scalars['String'];
};

export type GraphCurrencyColumn = {
  __typename?: 'GraphCurrencyColumn';
  locale?: Maybe<Scalars['String']>;
};

export type GraphDataPolicyOperation = GraphEntity & {
  __typename?: 'GraphDataPolicyOperation';
  completedDateTime?: Maybe<Scalars['DateTime']>;
  progress: Scalars['Float'];
  status?: Maybe<GraphDataPolicyOperationStatus>;
  storageLocation?: Maybe<Scalars['String']>;
  submittedDateTime: Scalars['DateTime'];
  userId: Scalars['String'];
  id: Scalars['String'];
};

export type GraphDataPolicyOperationInput = {
  completedDateTime?: Maybe<Scalars['DateTime']>;
  progress: Scalars['Float'];
  status?: Maybe<GraphDataPolicyOperationStatus>;
  storageLocation?: Maybe<Scalars['String']>;
  submittedDateTime: Scalars['DateTime'];
  userId: Scalars['String'];
  id: Scalars['String'];
};

export enum GraphDataPolicyOperationStatus {
  NotStarted = 'notStarted',
  Running = 'running',
  Complete = 'complete',
  Failed = 'failed',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphDataPolicyOperationUpdateInput = {
  completedDateTime?: Maybe<Scalars['DateTime']>;
  progress?: Maybe<Scalars['Float']>;
  status?: Maybe<GraphDataPolicyOperationStatus>;
  storageLocation?: Maybe<Scalars['String']>;
  submittedDateTime?: Maybe<Scalars['DateTime']>;
  userId?: Maybe<Scalars['String']>;
};

export type GraphDateTimeColumn = {
  __typename?: 'GraphDateTimeColumn';
  displayAs?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
};

export type GraphDateTimeTimeZone = {
  __typename?: 'GraphDateTimeTimeZone';
  dateTime: Scalars['String'];
  timeZone?: Maybe<Scalars['String']>;
};

export type GraphDateTimeTimeZoneInput = {
  dateTime: Scalars['String'];
  timeZone?: Maybe<Scalars['String']>;
};

export enum GraphDayOfWeek {
  Sunday = 'sunday',
  Monday = 'monday',
  Tuesday = 'tuesday',
  Wednesday = 'wednesday',
  Thursday = 'thursday',
  Friday = 'friday',
  Saturday = 'saturday',
}

export type GraphDefaultColumnValue = {
  __typename?: 'GraphDefaultColumnValue';
  formula?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphDefaultManagedAppProtection = GraphManagedAppProtection & {
  __typename?: 'GraphDefaultManagedAppProtection';
  appDataEncryptionType: GraphManagedAppDataEncryptionType;
  customSettings: Array<Maybe<GraphKeyValuePair>>;
  deployedAppCount: Scalars['Int'];
  disableAppEncryptionIfDeviceEncryptionIsEnabled: Scalars['Boolean'];
  encryptAppData: Scalars['Boolean'];
  faceIdBlocked: Scalars['Boolean'];
  minimumRequiredPatchVersion?: Maybe<Scalars['String']>;
  minimumRequiredSdkVersion?: Maybe<Scalars['String']>;
  minimumWarningPatchVersion?: Maybe<Scalars['String']>;
  screenCaptureBlocked: Scalars['Boolean'];
  apps?: Maybe<Array<Maybe<GraphManagedMobileApp>>>;
  appsById?: Maybe<GraphManagedMobileApp>;
  deploymentSummary?: Maybe<GraphManagedAppPolicyDeploymentSummary>;
  allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
  contactSyncBlocked: Scalars['Boolean'];
  dataBackupBlocked: Scalars['Boolean'];
  deviceComplianceRequired: Scalars['Boolean'];
  disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
  fingerprintBlocked: Scalars['Boolean'];
  managedBrowser: GraphManagedBrowserType;
  managedBrowserToOpenLinksRequired: Scalars['Boolean'];
  maximumPinRetries: Scalars['Int'];
  minimumPinLength: Scalars['Int'];
  minimumRequiredAppVersion?: Maybe<Scalars['String']>;
  minimumRequiredOsVersion?: Maybe<Scalars['String']>;
  minimumWarningAppVersion?: Maybe<Scalars['String']>;
  minimumWarningOsVersion?: Maybe<Scalars['String']>;
  organizationalCredentialsRequired: Scalars['Boolean'];
  periodBeforePinReset: Scalars['ISO8601Duration'];
  periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
  periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
  periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
  pinCharacterSet: GraphManagedAppPinCharacterSet;
  pinRequired: Scalars['Boolean'];
  printBlocked: Scalars['Boolean'];
  saveAsBlocked: Scalars['Boolean'];
  simplePinBlocked: Scalars['Boolean'];
  targetApps?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDefaultManagedAppProtectionAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDefaultManagedAppProtectionAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDefaultManagedAppProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphDefaultUserRolePermissions = {
  __typename?: 'GraphDefaultUserRolePermissions';
  allowedToCreateApps: Scalars['Boolean'];
  allowedToCreateSecurityGroups: Scalars['Boolean'];
  allowedToReadOtherUsers: Scalars['Boolean'];
  permissionGrantPoliciesAssigned?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphDefenderCloudBlockLevelType {
  NotConfigured = 'notConfigured',
  High = 'high',
  HighPlus = 'highPlus',
  ZeroTolerance = 'zeroTolerance',
}

export type GraphDefenderDetectedMalwareActions = {
  __typename?: 'GraphDefenderDetectedMalwareActions';
  highSeverity: GraphDefenderThreatAction;
  lowSeverity: GraphDefenderThreatAction;
  moderateSeverity: GraphDefenderThreatAction;
  severeSeverity: GraphDefenderThreatAction;
};

export enum GraphDefenderMonitorFileActivity {
  UserDefined = 'userDefined',
  Disable = 'disable',
  MonitorAllFiles = 'monitorAllFiles',
  MonitorIncomingFilesOnly = 'monitorIncomingFilesOnly',
  MonitorOutgoingFilesOnly = 'monitorOutgoingFilesOnly',
}

export enum GraphDefenderPromptForSampleSubmission {
  UserDefined = 'userDefined',
  AlwaysPrompt = 'alwaysPrompt',
  PromptBeforeSendingPersonalData = 'promptBeforeSendingPersonalData',
  NeverSendData = 'neverSendData',
  SendAllDataWithoutPrompting = 'sendAllDataWithoutPrompting',
}

export enum GraphDefenderScanType {
  UserDefined = 'userDefined',
  Disabled = 'disabled',
  Quick = 'quick',
  Full = 'full',
}

export enum GraphDefenderThreatAction {
  DeviceDefault = 'deviceDefault',
  Clean = 'clean',
  Quarantine = 'quarantine',
  Remove = 'remove',
  Allow = 'allow',
  UserDefined = 'userDefined',
  Block = 'block',
}

export enum GraphDelegateMeetingMessageDeliveryOptions {
  SendToDelegateAndInformationToPrincipal = 'sendToDelegateAndInformationToPrincipal',
  SendToDelegateAndPrincipal = 'sendToDelegateAndPrincipal',
  SendToDelegateOnly = 'sendToDelegateOnly',
}

export type GraphDelegatedPermissionClassification = GraphEntity & {
  __typename?: 'GraphDelegatedPermissionClassification';
  classification?: Maybe<GraphPermissionClassificationType>;
  permissionId?: Maybe<Scalars['String']>;
  permissionName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeleted = {
  __typename?: 'GraphDeleted';
  state?: Maybe<Scalars['String']>;
};

export type GraphDeletedInput = {
  state?: Maybe<Scalars['String']>;
};

export type GraphDetailsInfo = {
  __typename?: 'GraphDetailsInfo';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDetectedApp = GraphEntity & {
  __typename?: 'GraphDetectedApp';
  deviceCount: Scalars['Int'];
  displayName?: Maybe<Scalars['String']>;
  sizeInByte: Scalars['BigInt'];
  version?: Maybe<Scalars['String']>;
  managedDevices?: Maybe<Array<Maybe<GraphManagedDevice>>>;
  managedDevicesById?: Maybe<GraphManagedDevice>;
  id: Scalars['String'];
};

export type GraphDetectedAppManagedDevicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDetectedAppManagedDevicesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDevice = {
  __typename?: 'GraphDevice';
  accountEnabled?: Maybe<Scalars['Boolean']>;
  alternativeSecurityIds: Array<Maybe<GraphAlternativeSecurityId>>;
  approximateLastSignInDateTime?: Maybe<Scalars['DateTime']>;
  complianceExpirationDateTime?: Maybe<Scalars['DateTime']>;
  deviceId?: Maybe<Scalars['String']>;
  deviceMetadata?: Maybe<Scalars['String']>;
  deviceVersion?: Maybe<Scalars['Int']>;
  displayName?: Maybe<Scalars['String']>;
  isCompliant?: Maybe<Scalars['Boolean']>;
  isManaged?: Maybe<Scalars['Boolean']>;
  mdmAppId?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  operatingSystem?: Maybe<Scalars['String']>;
  operatingSystemVersion?: Maybe<Scalars['String']>;
  physicalIds: Array<Maybe<Scalars['String']>>;
  profileType?: Maybe<Scalars['String']>;
  systemLabels: Array<Maybe<Scalars['String']>>;
  trustType?: Maybe<Scalars['String']>;
  memberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  memberOfById?: Maybe<GraphDirectoryObject>;
  registeredOwners?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  registeredOwnersById?: Maybe<GraphDirectoryObject>;
  registeredUsers?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  registeredUsersById?: Maybe<GraphDirectoryObject>;
  transitiveMemberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  transitiveMemberOfById?: Maybe<GraphDirectoryObject>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceRegisteredOwnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceRegisteredOwnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceRegisteredUsersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceRegisteredUsersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceTransitiveMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceTransitiveMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphDeviceCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphDeviceCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphDeviceGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDeviceGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDeviceRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphDeviceGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphDeviceGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphDeviceActionResult = {
  __typename?: 'GraphDeviceActionResult';
  actionName?: Maybe<Scalars['String']>;
  actionState: GraphActionState;
  lastUpdatedDateTime: Scalars['DateTime'];
  startDateTime: Scalars['DateTime'];
};

export type GraphDeviceActionResultInput = {
  actionName?: Maybe<Scalars['String']>;
  actionState: GraphActionState;
  lastUpdatedDateTime: Scalars['DateTime'];
  startDateTime: Scalars['DateTime'];
};

export type GraphDeviceAndAppManagementAssignmentTarget = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDeviceAndAppManagementAssignmentTargetInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDeviceAndAppManagementRoleAssignment = {
  __typename?: 'GraphDeviceAndAppManagementRoleAssignment';
  members?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  resourceScopes?: Maybe<Array<Maybe<Scalars['String']>>>;
  roleDefinition?: Maybe<GraphRoleDefinition>;
  id: Scalars['String'];
};

export type GraphDeviceAppManagement = GraphEntity & {
  __typename?: 'GraphDeviceAppManagement';
  isEnabledForMicrosoftStoreForBusiness: Scalars['Boolean'];
  microsoftStoreForBusinessLanguage?: Maybe<Scalars['String']>;
  microsoftStoreForBusinessLastCompletedApplicationSyncTime: Scalars['DateTime'];
  microsoftStoreForBusinessLastSuccessfulSyncDateTime: Scalars['DateTime'];
  managedEBooks?: Maybe<Array<Maybe<GraphManagedEBook>>>;
  managedEBooksById?: Maybe<GraphManagedEBook>;
  mobileAppCategories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  mobileAppCategoriesById?: Maybe<GraphMobileAppCategory>;
  mobileAppConfigurations?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfiguration>>>;
  mobileAppConfigurationsById?: Maybe<GraphManagedDeviceMobileAppConfiguration>;
  mobileApps?: Maybe<Array<Maybe<GraphMobileApp>>>;
  mobileAppsById?: Maybe<GraphMobileApp>;
  vppTokens?: Maybe<Array<Maybe<GraphVppToken>>>;
  vppTokensById?: Maybe<GraphVppToken>;
  androidManagedAppProtections?: Maybe<Array<Maybe<GraphAndroidManagedAppProtection>>>;
  androidManagedAppProtectionsById?: Maybe<GraphAndroidManagedAppProtection>;
  defaultManagedAppProtections?: Maybe<Array<Maybe<GraphDefaultManagedAppProtection>>>;
  defaultManagedAppProtectionsById?: Maybe<GraphDefaultManagedAppProtection>;
  iosManagedAppProtections?: Maybe<Array<Maybe<GraphIosManagedAppProtection>>>;
  iosManagedAppProtectionsById?: Maybe<GraphIosManagedAppProtection>;
  managedAppPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  managedAppPoliciesById?: Maybe<GraphManagedAppPolicy>;
  managedAppRegistrations?: Maybe<Array<Maybe<GraphManagedAppRegistration>>>;
  managedAppRegistrationsById?: Maybe<GraphManagedAppRegistration>;
  managedAppStatuses?: Maybe<Array<Maybe<GraphManagedAppStatus>>>;
  managedAppStatusesById?: Maybe<GraphManagedAppStatus>;
  mdmWindowsInformationProtectionPolicies?: Maybe<Array<Maybe<GraphMdmWindowsInformationProtectionPolicy>>>;
  mdmWindowsInformationProtectionPoliciesById?: Maybe<GraphMdmWindowsInformationProtectionPolicy>;
  targetedManagedAppConfigurations?: Maybe<Array<Maybe<GraphTargetedManagedAppConfiguration>>>;
  targetedManagedAppConfigurationsById?: Maybe<GraphTargetedManagedAppConfiguration>;
  windowsInformationProtectionPolicies?: Maybe<Array<Maybe<GraphWindowsInformationProtectionPolicy>>>;
  windowsInformationProtectionPoliciesById?: Maybe<GraphWindowsInformationProtectionPolicy>;
  syncMicrosoftStoreForBusinessApps?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceAppManagementManagedEBooksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementManagedEBooksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementMobileAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementMobileAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementMobileAppConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementMobileAppConfigurationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementMobileAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementMobileAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementVppTokensArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementVppTokensByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementAndroidManagedAppProtectionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementAndroidManagedAppProtectionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementDefaultManagedAppProtectionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementDefaultManagedAppProtectionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementIosManagedAppProtectionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementIosManagedAppProtectionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementManagedAppPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementManagedAppPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementManagedAppRegistrationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementManagedAppRegistrationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementManagedAppStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementManagedAppStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementMdmWindowsInformationProtectionPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementMdmWindowsInformationProtectionPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementTargetedManagedAppConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementTargetedManagedAppConfigurationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementWindowsInformationProtectionPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceAppManagementWindowsInformationProtectionPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceAppManagementSyncMicrosoftStoreForBusinessAppsArgs = {
  bindingParameter?: Maybe<GraphDeviceAppManagementInput>;
};

export type GraphDeviceAppManagementInput = {
  isEnabledForMicrosoftStoreForBusiness: Scalars['Boolean'];
  microsoftStoreForBusinessLanguage?: Maybe<Scalars['String']>;
  microsoftStoreForBusinessLastCompletedApplicationSyncTime: Scalars['DateTime'];
  microsoftStoreForBusinessLastSuccessfulSyncDateTime: Scalars['DateTime'];
  id: Scalars['String'];
};

export type GraphDeviceCategory = GraphEntity & {
  __typename?: 'GraphDeviceCategory';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceComplianceActionItem = GraphEntity & {
  __typename?: 'GraphDeviceComplianceActionItem';
  actionType: GraphDeviceComplianceActionType;
  gracePeriodHours: Scalars['Int'];
  notificationMessageCCList?: Maybe<Array<Maybe<Scalars['String']>>>;
  notificationTemplateId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphDeviceComplianceActionType {
  NoAction = 'noAction',
  Notification = 'notification',
  Block = 'block',
  Retire = 'retire',
  Wipe = 'wipe',
  RemoveResourceAccessProfiles = 'removeResourceAccessProfiles',
  PushNotification = 'pushNotification',
}

export type GraphDeviceComplianceDeviceOverview = GraphEntity & {
  __typename?: 'GraphDeviceComplianceDeviceOverview';
  configurationVersion: Scalars['Int'];
  errorCount: Scalars['Int'];
  failedCount: Scalars['Int'];
  lastUpdateDateTime: Scalars['DateTime'];
  notApplicableCount: Scalars['Int'];
  pendingCount: Scalars['Int'];
  successCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceComplianceDeviceStatus = GraphEntity & {
  __typename?: 'GraphDeviceComplianceDeviceStatus';
  complianceGracePeriodExpirationDateTime: Scalars['DateTime'];
  deviceDisplayName?: Maybe<Scalars['String']>;
  deviceModel?: Maybe<Scalars['String']>;
  lastReportedDateTime: Scalars['DateTime'];
  status: GraphComplianceStatus;
  userName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceCompliancePolicy = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceCompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceCompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceCompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceCompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceCompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceCompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceCompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceCompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceCompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceCompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceCompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphDeviceCompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphDeviceCompliancePolicyAssignment = GraphEntity & {
  __typename?: 'GraphDeviceCompliancePolicyAssignment';
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphDeviceCompliancePolicyAssignmentInput = {
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTargetInput>;
  id: Scalars['String'];
};

export type GraphDeviceCompliancePolicyDeviceStateSummary = GraphEntity & {
  __typename?: 'GraphDeviceCompliancePolicyDeviceStateSummary';
  compliantDeviceCount: Scalars['Int'];
  configManagerCount: Scalars['Int'];
  conflictDeviceCount: Scalars['Int'];
  errorDeviceCount: Scalars['Int'];
  inGracePeriodCount: Scalars['Int'];
  nonCompliantDeviceCount: Scalars['Int'];
  notApplicableDeviceCount: Scalars['Int'];
  remediatedDeviceCount: Scalars['Int'];
  unknownDeviceCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceCompliancePolicyInput = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceCompliancePolicySettingState = {
  __typename?: 'GraphDeviceCompliancePolicySettingState';
  currentValue?: Maybe<Scalars['String']>;
  errorCode: Scalars['BigInt'];
  errorDescription?: Maybe<Scalars['String']>;
  instanceDisplayName?: Maybe<Scalars['String']>;
  setting?: Maybe<Scalars['String']>;
  settingName?: Maybe<Scalars['String']>;
  sources?: Maybe<Array<Maybe<GraphSettingSource>>>;
  state: GraphComplianceStatus;
  userEmail?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
};

export type GraphDeviceCompliancePolicySettingStateSummary = GraphEntity & {
  __typename?: 'GraphDeviceCompliancePolicySettingStateSummary';
  compliantDeviceCount: Scalars['Int'];
  conflictDeviceCount: Scalars['Int'];
  errorDeviceCount: Scalars['Int'];
  nonCompliantDeviceCount: Scalars['Int'];
  notApplicableDeviceCount: Scalars['Int'];
  platformType: GraphPolicyPlatformType;
  remediatedDeviceCount: Scalars['Int'];
  setting?: Maybe<Scalars['String']>;
  settingName?: Maybe<Scalars['String']>;
  unknownDeviceCount: Scalars['Int'];
  deviceComplianceSettingStates?: Maybe<Array<Maybe<GraphDeviceComplianceSettingState>>>;
  deviceComplianceSettingStatesById?: Maybe<GraphDeviceComplianceSettingState>;
  id: Scalars['String'];
};

export type GraphDeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceCompliancePolicyState = GraphEntity & {
  __typename?: 'GraphDeviceCompliancePolicyState';
  displayName?: Maybe<Scalars['String']>;
  platformType: GraphPolicyPlatformType;
  settingCount: Scalars['Int'];
  settingStates?: Maybe<Array<Maybe<GraphDeviceCompliancePolicySettingState>>>;
  state: GraphComplianceStatus;
  version: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceComplianceScheduledActionForRule = GraphEntity & {
  __typename?: 'GraphDeviceComplianceScheduledActionForRule';
  ruleName?: Maybe<Scalars['String']>;
  scheduledActionConfigurations?: Maybe<Array<Maybe<GraphDeviceComplianceActionItem>>>;
  scheduledActionConfigurationsById?: Maybe<GraphDeviceComplianceActionItem>;
  id: Scalars['String'];
};

export type GraphDeviceComplianceScheduledActionForRuleScheduledActionConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceComplianceScheduledActionForRuleScheduledActionConfigurationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceComplianceScheduledActionForRuleInput = {
  ruleName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceComplianceSettingState = GraphEntity & {
  __typename?: 'GraphDeviceComplianceSettingState';
  complianceGracePeriodExpirationDateTime: Scalars['DateTime'];
  deviceId?: Maybe<Scalars['String']>;
  deviceModel?: Maybe<Scalars['String']>;
  deviceName?: Maybe<Scalars['String']>;
  setting?: Maybe<Scalars['String']>;
  settingName?: Maybe<Scalars['String']>;
  state: GraphComplianceStatus;
  userEmail?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceComplianceUserOverview = GraphEntity & {
  __typename?: 'GraphDeviceComplianceUserOverview';
  configurationVersion: Scalars['Int'];
  errorCount: Scalars['Int'];
  failedCount: Scalars['Int'];
  lastUpdateDateTime: Scalars['DateTime'];
  notApplicableCount: Scalars['Int'];
  pendingCount: Scalars['Int'];
  successCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceComplianceUserStatus = GraphEntity & {
  __typename?: 'GraphDeviceComplianceUserStatus';
  devicesCount: Scalars['Int'];
  lastReportedDateTime: Scalars['DateTime'];
  status: GraphComplianceStatus;
  userDisplayName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceConfiguration = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphDeviceConfigurationAssignment = GraphEntity & {
  __typename?: 'GraphDeviceConfigurationAssignment';
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphDeviceConfigurationAssignmentInput = {
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTargetInput>;
  id: Scalars['String'];
};

export type GraphDeviceConfigurationDeviceOverview = GraphEntity & {
  __typename?: 'GraphDeviceConfigurationDeviceOverview';
  configurationVersion: Scalars['Int'];
  errorCount: Scalars['Int'];
  failedCount: Scalars['Int'];
  lastUpdateDateTime: Scalars['DateTime'];
  notApplicableCount: Scalars['Int'];
  pendingCount: Scalars['Int'];
  successCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceConfigurationDeviceStateSummary = GraphEntity & {
  __typename?: 'GraphDeviceConfigurationDeviceStateSummary';
  compliantDeviceCount: Scalars['Int'];
  conflictDeviceCount: Scalars['Int'];
  errorDeviceCount: Scalars['Int'];
  nonCompliantDeviceCount: Scalars['Int'];
  notApplicableDeviceCount: Scalars['Int'];
  remediatedDeviceCount: Scalars['Int'];
  unknownDeviceCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceConfigurationDeviceStatus = GraphEntity & {
  __typename?: 'GraphDeviceConfigurationDeviceStatus';
  complianceGracePeriodExpirationDateTime: Scalars['DateTime'];
  deviceDisplayName?: Maybe<Scalars['String']>;
  deviceModel?: Maybe<Scalars['String']>;
  lastReportedDateTime: Scalars['DateTime'];
  status: GraphComplianceStatus;
  userName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceConfigurationInput = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceConfigurationSettingState = {
  __typename?: 'GraphDeviceConfigurationSettingState';
  currentValue?: Maybe<Scalars['String']>;
  errorCode: Scalars['BigInt'];
  errorDescription?: Maybe<Scalars['String']>;
  instanceDisplayName?: Maybe<Scalars['String']>;
  setting?: Maybe<Scalars['String']>;
  settingName?: Maybe<Scalars['String']>;
  sources?: Maybe<Array<Maybe<GraphSettingSource>>>;
  state: GraphComplianceStatus;
  userEmail?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
};

export type GraphDeviceConfigurationState = GraphEntity & {
  __typename?: 'GraphDeviceConfigurationState';
  displayName?: Maybe<Scalars['String']>;
  platformType: GraphPolicyPlatformType;
  settingCount: Scalars['Int'];
  settingStates?: Maybe<Array<Maybe<GraphDeviceConfigurationSettingState>>>;
  state: GraphComplianceStatus;
  version: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceConfigurationUserOverview = GraphEntity & {
  __typename?: 'GraphDeviceConfigurationUserOverview';
  configurationVersion: Scalars['Int'];
  errorCount: Scalars['Int'];
  failedCount: Scalars['Int'];
  lastUpdateDateTime: Scalars['DateTime'];
  notApplicableCount: Scalars['Int'];
  pendingCount: Scalars['Int'];
  successCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceConfigurationUserStatus = GraphEntity & {
  __typename?: 'GraphDeviceConfigurationUserStatus';
  devicesCount: Scalars['Int'];
  lastReportedDateTime: Scalars['DateTime'];
  status: GraphComplianceStatus;
  userDisplayName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceDetail = {
  __typename?: 'GraphDeviceDetail';
  browser?: Maybe<Scalars['String']>;
  deviceId?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  isCompliant?: Maybe<Scalars['Boolean']>;
  isManaged?: Maybe<Scalars['Boolean']>;
  operatingSystem?: Maybe<Scalars['String']>;
  trustType?: Maybe<Scalars['String']>;
};

export type GraphDeviceEnrollmentConfiguration = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  priority: Scalars['Int'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphEnrollmentConfigurationAssignment>;
  assign?: Maybe<Scalars['JSON']>;
  setPriority?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceEnrollmentConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceEnrollmentConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceEnrollmentConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  enrollmentConfigurationAssignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignmentInput>>>;
};

export type GraphDeviceEnrollmentConfigurationSetPriorityArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  priority: Scalars['Int'];
};

export type GraphDeviceEnrollmentConfigurationInput = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  priority: Scalars['Int'];
  version: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDeviceEnrollmentLimitConfiguration = GraphDeviceEnrollmentConfiguration & {
  __typename?: 'GraphDeviceEnrollmentLimitConfiguration';
  limit: Scalars['Int'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  priority: Scalars['Int'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphEnrollmentConfigurationAssignment>;
  assign?: Maybe<Scalars['JSON']>;
  setPriority?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceEnrollmentLimitConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceEnrollmentLimitConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceEnrollmentLimitConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  enrollmentConfigurationAssignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignmentInput>>>;
};

export type GraphDeviceEnrollmentLimitConfigurationSetPriorityArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  priority: Scalars['Int'];
};

export type GraphDeviceEnrollmentPlatformRestriction = {
  __typename?: 'GraphDeviceEnrollmentPlatformRestriction';
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  personalDeviceEnrollmentBlocked: Scalars['Boolean'];
  platformBlocked: Scalars['Boolean'];
};

export type GraphDeviceEnrollmentPlatformRestrictionsConfiguration = GraphDeviceEnrollmentConfiguration & {
  __typename?: 'GraphDeviceEnrollmentPlatformRestrictionsConfiguration';
  androidRestriction?: Maybe<GraphDeviceEnrollmentPlatformRestriction>;
  iosRestriction?: Maybe<GraphDeviceEnrollmentPlatformRestriction>;
  macOSRestriction?: Maybe<GraphDeviceEnrollmentPlatformRestriction>;
  windowsMobileRestriction?: Maybe<GraphDeviceEnrollmentPlatformRestriction>;
  windowsRestriction?: Maybe<GraphDeviceEnrollmentPlatformRestriction>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  priority: Scalars['Int'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphEnrollmentConfigurationAssignment>;
  assign?: Maybe<Scalars['JSON']>;
  setPriority?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceEnrollmentPlatformRestrictionsConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceEnrollmentPlatformRestrictionsConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceEnrollmentPlatformRestrictionsConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  enrollmentConfigurationAssignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignmentInput>>>;
};

export type GraphDeviceEnrollmentPlatformRestrictionsConfigurationSetPriorityArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  priority: Scalars['Int'];
};

export enum GraphDeviceEnrollmentType {
  Unknown = 'unknown',
  UserEnrollment = 'userEnrollment',
  DeviceEnrollmentManager = 'deviceEnrollmentManager',
  AppleBulkWithUser = 'appleBulkWithUser',
  AppleBulkWithoutUser = 'appleBulkWithoutUser',
  WindowsAzureAdJoin = 'windowsAzureADJoin',
  WindowsBulkUserless = 'windowsBulkUserless',
  WindowsAutoEnrollment = 'windowsAutoEnrollment',
  WindowsBulkAzureDomainJoin = 'windowsBulkAzureDomainJoin',
  WindowsCoManagement = 'windowsCoManagement',
}

export type GraphDeviceEnrollmentWindowsHelloForBusinessConfiguration = GraphDeviceEnrollmentConfiguration & {
  __typename?: 'GraphDeviceEnrollmentWindowsHelloForBusinessConfiguration';
  enhancedBiometricsState: GraphEnablement;
  pinExpirationInDays: Scalars['Int'];
  pinLowercaseCharactersUsage: GraphWindowsHelloForBusinessPinUsage;
  pinMaximumLength: Scalars['Int'];
  pinMinimumLength: Scalars['Int'];
  pinPreviousBlockCount: Scalars['Int'];
  pinSpecialCharactersUsage: GraphWindowsHelloForBusinessPinUsage;
  pinUppercaseCharactersUsage: GraphWindowsHelloForBusinessPinUsage;
  remotePassportEnabled: Scalars['Boolean'];
  securityDeviceRequired: Scalars['Boolean'];
  state: GraphEnablement;
  unlockWithBiometricsEnabled: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  priority: Scalars['Int'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphEnrollmentConfigurationAssignment>;
  assign?: Maybe<Scalars['JSON']>;
  setPriority?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceEnrollmentWindowsHelloForBusinessConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceEnrollmentWindowsHelloForBusinessConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceEnrollmentWindowsHelloForBusinessConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  enrollmentConfigurationAssignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignmentInput>>>;
};

export type GraphDeviceEnrollmentWindowsHelloForBusinessConfigurationSetPriorityArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  priority: Scalars['Int'];
};

export type GraphDeviceExchangeAccessStateSummary = {
  __typename?: 'GraphDeviceExchangeAccessStateSummary';
  allowedDeviceCount: Scalars['Int'];
  blockedDeviceCount: Scalars['Int'];
  quarantinedDeviceCount: Scalars['Int'];
  unavailableDeviceCount: Scalars['Int'];
  unknownDeviceCount: Scalars['Int'];
};

export type GraphDeviceHealthAttestationState = {
  __typename?: 'GraphDeviceHealthAttestationState';
  attestationIdentityKey?: Maybe<Scalars['String']>;
  bitLockerStatus?: Maybe<Scalars['String']>;
  bootAppSecurityVersion?: Maybe<Scalars['String']>;
  bootDebugging?: Maybe<Scalars['String']>;
  bootManagerSecurityVersion?: Maybe<Scalars['String']>;
  bootManagerVersion?: Maybe<Scalars['String']>;
  bootRevisionListInfo?: Maybe<Scalars['String']>;
  codeIntegrity?: Maybe<Scalars['String']>;
  codeIntegrityCheckVersion?: Maybe<Scalars['String']>;
  codeIntegrityPolicy?: Maybe<Scalars['String']>;
  contentNamespaceUrl?: Maybe<Scalars['String']>;
  contentVersion?: Maybe<Scalars['String']>;
  dataExcutionPolicy?: Maybe<Scalars['String']>;
  deviceHealthAttestationStatus?: Maybe<Scalars['String']>;
  earlyLaunchAntiMalwareDriverProtection?: Maybe<Scalars['String']>;
  healthAttestationSupportedStatus?: Maybe<Scalars['String']>;
  healthStatusMismatchInfo?: Maybe<Scalars['String']>;
  issuedDateTime: Scalars['DateTime'];
  lastUpdateDateTime?: Maybe<Scalars['String']>;
  operatingSystemKernelDebugging?: Maybe<Scalars['String']>;
  operatingSystemRevListInfo?: Maybe<Scalars['String']>;
  pcr0?: Maybe<Scalars['String']>;
  pcrHashAlgorithm?: Maybe<Scalars['String']>;
  resetCount: Scalars['BigInt'];
  restartCount: Scalars['BigInt'];
  safeMode?: Maybe<Scalars['String']>;
  secureBoot?: Maybe<Scalars['String']>;
  secureBootConfigurationPolicyFingerPrint?: Maybe<Scalars['String']>;
  testSigning?: Maybe<Scalars['String']>;
  tpmVersion?: Maybe<Scalars['String']>;
  virtualSecureMode?: Maybe<Scalars['String']>;
  windowsPE?: Maybe<Scalars['String']>;
};

export type GraphDeviceHealthAttestationStateInput = {
  attestationIdentityKey?: Maybe<Scalars['String']>;
  bitLockerStatus?: Maybe<Scalars['String']>;
  bootAppSecurityVersion?: Maybe<Scalars['String']>;
  bootDebugging?: Maybe<Scalars['String']>;
  bootManagerSecurityVersion?: Maybe<Scalars['String']>;
  bootManagerVersion?: Maybe<Scalars['String']>;
  bootRevisionListInfo?: Maybe<Scalars['String']>;
  codeIntegrity?: Maybe<Scalars['String']>;
  codeIntegrityCheckVersion?: Maybe<Scalars['String']>;
  codeIntegrityPolicy?: Maybe<Scalars['String']>;
  contentNamespaceUrl?: Maybe<Scalars['String']>;
  contentVersion?: Maybe<Scalars['String']>;
  dataExcutionPolicy?: Maybe<Scalars['String']>;
  deviceHealthAttestationStatus?: Maybe<Scalars['String']>;
  earlyLaunchAntiMalwareDriverProtection?: Maybe<Scalars['String']>;
  healthAttestationSupportedStatus?: Maybe<Scalars['String']>;
  healthStatusMismatchInfo?: Maybe<Scalars['String']>;
  issuedDateTime: Scalars['DateTime'];
  lastUpdateDateTime?: Maybe<Scalars['String']>;
  operatingSystemKernelDebugging?: Maybe<Scalars['String']>;
  operatingSystemRevListInfo?: Maybe<Scalars['String']>;
  pcr0?: Maybe<Scalars['String']>;
  pcrHashAlgorithm?: Maybe<Scalars['String']>;
  resetCount: Scalars['BigInt'];
  restartCount: Scalars['BigInt'];
  safeMode?: Maybe<Scalars['String']>;
  secureBoot?: Maybe<Scalars['String']>;
  secureBootConfigurationPolicyFingerPrint?: Maybe<Scalars['String']>;
  testSigning?: Maybe<Scalars['String']>;
  tpmVersion?: Maybe<Scalars['String']>;
  virtualSecureMode?: Maybe<Scalars['String']>;
  windowsPE?: Maybe<Scalars['String']>;
};

export type GraphDeviceInput = {
  accountEnabled?: Maybe<Scalars['Boolean']>;
  alternativeSecurityIds: Array<Maybe<GraphAlternativeSecurityIdInput>>;
  approximateLastSignInDateTime?: Maybe<Scalars['DateTime']>;
  complianceExpirationDateTime?: Maybe<Scalars['DateTime']>;
  deviceId?: Maybe<Scalars['String']>;
  deviceMetadata?: Maybe<Scalars['String']>;
  deviceVersion?: Maybe<Scalars['Int']>;
  displayName?: Maybe<Scalars['String']>;
  isCompliant?: Maybe<Scalars['Boolean']>;
  isManaged?: Maybe<Scalars['Boolean']>;
  mdmAppId?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  operatingSystem?: Maybe<Scalars['String']>;
  operatingSystemVersion?: Maybe<Scalars['String']>;
  physicalIds: Array<Maybe<Scalars['String']>>;
  profileType?: Maybe<Scalars['String']>;
  systemLabels: Array<Maybe<Scalars['String']>>;
  trustType?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphDeviceInstallState = GraphEntity & {
  __typename?: 'GraphDeviceInstallState';
  deviceId?: Maybe<Scalars['String']>;
  deviceName?: Maybe<Scalars['String']>;
  errorCode?: Maybe<Scalars['String']>;
  installState: GraphInstallState;
  lastSyncDateTime: Scalars['DateTime'];
  osDescription?: Maybe<Scalars['String']>;
  osVersion?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDeviceManagement = GraphEntity & {
  __typename?: 'GraphDeviceManagement';
  intuneAccountId: Scalars['GUID'];
  settings?: Maybe<GraphDeviceManagementSettings>;
  intuneBrand?: Maybe<GraphIntuneBrand>;
  subscriptionState: GraphDeviceManagementSubscriptionState;
  termsAndConditions?: Maybe<Array<Maybe<GraphTermsAndConditions>>>;
  termsAndConditionsById?: Maybe<GraphTermsAndConditions>;
  deviceCompliancePolicies?: Maybe<Array<Maybe<GraphDeviceCompliancePolicy>>>;
  deviceCompliancePoliciesById?: Maybe<GraphDeviceCompliancePolicy>;
  deviceCompliancePolicyDeviceStateSummary?: Maybe<GraphDeviceCompliancePolicyDeviceStateSummary>;
  deviceCompliancePolicySettingStateSummaries?: Maybe<Array<Maybe<GraphDeviceCompliancePolicySettingStateSummary>>>;
  deviceCompliancePolicySettingStateSummariesById?: Maybe<GraphDeviceCompliancePolicySettingStateSummary>;
  deviceConfigurationDeviceStateSummaries?: Maybe<GraphDeviceConfigurationDeviceStateSummary>;
  deviceConfigurations?: Maybe<Array<Maybe<GraphDeviceConfiguration>>>;
  deviceConfigurationsById?: Maybe<GraphDeviceConfiguration>;
  iosUpdateStatuses?: Maybe<Array<Maybe<GraphIosUpdateDeviceStatus>>>;
  iosUpdateStatusesById?: Maybe<GraphIosUpdateDeviceStatus>;
  softwareUpdateStatusSummary?: Maybe<GraphSoftwareUpdateStatusSummary>;
  complianceManagementPartners?: Maybe<Array<Maybe<GraphComplianceManagementPartner>>>;
  complianceManagementPartnersById?: Maybe<GraphComplianceManagementPartner>;
  conditionalAccessSettings?: Maybe<GraphOnPremisesConditionalAccessSettings>;
  deviceCategories?: Maybe<Array<Maybe<GraphDeviceCategory>>>;
  deviceCategoriesById?: Maybe<GraphDeviceCategory>;
  deviceEnrollmentConfigurations?: Maybe<Array<Maybe<GraphDeviceEnrollmentConfiguration>>>;
  deviceEnrollmentConfigurationsById?: Maybe<GraphDeviceEnrollmentConfiguration>;
  deviceManagementPartners?: Maybe<Array<Maybe<GraphDeviceManagementPartner>>>;
  deviceManagementPartnersById?: Maybe<GraphDeviceManagementPartner>;
  exchangeConnectors?: Maybe<Array<Maybe<GraphDeviceManagementExchangeConnector>>>;
  exchangeConnectorsById?: Maybe<GraphDeviceManagementExchangeConnector>;
  mobileThreatDefenseConnectors?: Maybe<Array<Maybe<GraphMobileThreatDefenseConnector>>>;
  mobileThreatDefenseConnectorsById?: Maybe<GraphMobileThreatDefenseConnector>;
  applePushNotificationCertificate?: Maybe<GraphApplePushNotificationCertificate>;
  detectedApps?: Maybe<Array<Maybe<GraphDetectedApp>>>;
  detectedAppsById?: Maybe<GraphDetectedApp>;
  managedDeviceOverview?: Maybe<GraphManagedDeviceOverview>;
  managedDevices?: Maybe<Array<Maybe<GraphManagedDevice>>>;
  managedDevicesById?: Maybe<GraphManagedDevice>;
  importedWindowsAutopilotDeviceIdentities?: Maybe<Array<Maybe<GraphImportedWindowsAutopilotDeviceIdentity>>>;
  importedWindowsAutopilotDeviceIdentitiesById?: Maybe<GraphImportedWindowsAutopilotDeviceIdentity>;
  windowsAutopilotDeviceIdentities?: Maybe<Array<Maybe<GraphWindowsAutopilotDeviceIdentity>>>;
  windowsAutopilotDeviceIdentitiesById?: Maybe<GraphWindowsAutopilotDeviceIdentity>;
  notificationMessageTemplates?: Maybe<Array<Maybe<GraphNotificationMessageTemplate>>>;
  notificationMessageTemplatesById?: Maybe<GraphNotificationMessageTemplate>;
  resourceOperations?: Maybe<Array<Maybe<GraphResourceOperation>>>;
  resourceOperationsById?: Maybe<GraphResourceOperation>;
  roleAssignments?: Maybe<Array<Maybe<GraphDeviceAndAppManagementRoleAssignment>>>;
  roleAssignmentsById?: Maybe<GraphDeviceAndAppManagementRoleAssignment>;
  roleDefinitions?: Maybe<Array<Maybe<GraphRoleDefinition>>>;
  roleDefinitionsById?: Maybe<GraphRoleDefinition>;
  remoteAssistancePartners?: Maybe<Array<Maybe<GraphRemoteAssistancePartner>>>;
  remoteAssistancePartnersById?: Maybe<GraphRemoteAssistancePartner>;
  telecomExpenseManagementPartners?: Maybe<Array<Maybe<GraphTelecomExpenseManagementPartner>>>;
  telecomExpenseManagementPartnersById?: Maybe<GraphTelecomExpenseManagementPartner>;
  troubleshootingEvents?: Maybe<Array<Maybe<GraphDeviceManagementTroubleshootingEvent>>>;
  troubleshootingEventsById?: Maybe<GraphDeviceManagementTroubleshootingEvent>;
  windowsInformationProtectionAppLearningSummaries?: Maybe<
    Array<Maybe<GraphWindowsInformationProtectionAppLearningSummary>>
  >;
  windowsInformationProtectionAppLearningSummariesById?: Maybe<GraphWindowsInformationProtectionAppLearningSummary>;
  windowsInformationProtectionNetworkLearningSummaries?: Maybe<
    Array<Maybe<GraphWindowsInformationProtectionNetworkLearningSummary>>
  >;
  windowsInformationProtectionNetworkLearningSummariesById?: Maybe<GraphWindowsInformationProtectionNetworkLearningSummary>;
  verifyWindowsEnrollmentAutoDiscovery?: Maybe<Scalars['Boolean']>;
  getEffectivePermissions?: Maybe<Array<Maybe<GraphRolePermission>>>;
  id: Scalars['String'];
};

export type GraphDeviceManagementTermsAndConditionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementTermsAndConditionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementDeviceCompliancePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementDeviceCompliancePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementDeviceCompliancePolicySettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementDeviceCompliancePolicySettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementDeviceConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementDeviceConfigurationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementIosUpdateStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementIosUpdateStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementComplianceManagementPartnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementComplianceManagementPartnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementDeviceCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementDeviceCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementDeviceEnrollmentConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementDeviceEnrollmentConfigurationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementDeviceManagementPartnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementDeviceManagementPartnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementExchangeConnectorsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementExchangeConnectorsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementMobileThreatDefenseConnectorsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementMobileThreatDefenseConnectorsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementDetectedAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementDetectedAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementManagedDevicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementManagedDevicesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementImportedWindowsAutopilotDeviceIdentitiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementImportedWindowsAutopilotDeviceIdentitiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementWindowsAutopilotDeviceIdentitiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementWindowsAutopilotDeviceIdentitiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementNotificationMessageTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementNotificationMessageTemplatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementResourceOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementResourceOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementRoleAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementRoleAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementRoleDefinitionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementRoleDefinitionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementRemoteAssistancePartnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementRemoteAssistancePartnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementTelecomExpenseManagementPartnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementTelecomExpenseManagementPartnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementTroubleshootingEventsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementTroubleshootingEventsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementWindowsInformationProtectionAppLearningSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementWindowsInformationProtectionAppLearningSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDeviceManagementWindowsInformationProtectionNetworkLearningSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDeviceManagementWindowsInformationProtectionNetworkLearningSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphDeviceManagementExchangeAccessState {
  None = 'none',
  Unknown = 'unknown',
  Allowed = 'allowed',
  Blocked = 'blocked',
  Quarantined = 'quarantined',
}

export enum GraphDeviceManagementExchangeAccessStateReason {
  None = 'none',
  Unknown = 'unknown',
  ExchangeGlobalRule = 'exchangeGlobalRule',
  ExchangeIndividualRule = 'exchangeIndividualRule',
  ExchangeDeviceRule = 'exchangeDeviceRule',
  ExchangeUpgrade = 'exchangeUpgrade',
  ExchangeMailboxPolicy = 'exchangeMailboxPolicy',
  Other = 'other',
  Compliant = 'compliant',
  NotCompliant = 'notCompliant',
  NotEnrolled = 'notEnrolled',
  UnknownLocation = 'unknownLocation',
  MfaRequired = 'mfaRequired',
  AzureAdBlockDueToAccessPolicy = 'azureADBlockDueToAccessPolicy',
  CompromisedPassword = 'compromisedPassword',
  DeviceNotKnownWithManagedApp = 'deviceNotKnownWithManagedApp',
}

export type GraphDeviceManagementExchangeConnector = GraphEntity & {
  __typename?: 'GraphDeviceManagementExchangeConnector';
  connectorServerName?: Maybe<Scalars['String']>;
  exchangeAlias?: Maybe<Scalars['String']>;
  exchangeConnectorType: GraphDeviceManagementExchangeConnectorType;
  exchangeOrganization?: Maybe<Scalars['String']>;
  lastSyncDateTime: Scalars['DateTime'];
  primarySmtpAddress?: Maybe<Scalars['String']>;
  serverName?: Maybe<Scalars['String']>;
  status: GraphDeviceManagementExchangeConnectorStatus;
  version?: Maybe<Scalars['String']>;
  sync?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDeviceManagementExchangeConnectorSyncArgs = {
  bindingParameter?: Maybe<GraphDeviceManagementExchangeConnectorInput>;
  syncType: GraphDeviceManagementExchangeConnectorSyncType;
};

export type GraphDeviceManagementExchangeConnectorInput = {
  connectorServerName?: Maybe<Scalars['String']>;
  exchangeAlias?: Maybe<Scalars['String']>;
  exchangeConnectorType: GraphDeviceManagementExchangeConnectorType;
  exchangeOrganization?: Maybe<Scalars['String']>;
  lastSyncDateTime: Scalars['DateTime'];
  primarySmtpAddress?: Maybe<Scalars['String']>;
  serverName?: Maybe<Scalars['String']>;
  status: GraphDeviceManagementExchangeConnectorStatus;
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphDeviceManagementExchangeConnectorStatus {
  None = 'none',
  ConnectionPending = 'connectionPending',
  Connected = 'connected',
  Disconnected = 'disconnected',
}

export enum GraphDeviceManagementExchangeConnectorSyncType {
  FullSync = 'fullSync',
  DeltaSync = 'deltaSync',
}

export enum GraphDeviceManagementExchangeConnectorType {
  OnPremises = 'onPremises',
  Hosted = 'hosted',
  ServiceToService = 'serviceToService',
  Dedicated = 'dedicated',
}

export type GraphDeviceManagementPartner = GraphEntity & {
  __typename?: 'GraphDeviceManagementPartner';
  displayName?: Maybe<Scalars['String']>;
  isConfigured: Scalars['Boolean'];
  lastHeartbeatDateTime: Scalars['DateTime'];
  partnerAppType: GraphDeviceManagementPartnerAppType;
  partnerState: GraphDeviceManagementPartnerTenantState;
  singleTenantAppId?: Maybe<Scalars['String']>;
  whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime?: Maybe<Scalars['DateTime']>;
  whenPartnerDevicesWillBeRemovedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export enum GraphDeviceManagementPartnerAppType {
  Unknown = 'unknown',
  SingleTenantApp = 'singleTenantApp',
  MultiTenantApp = 'multiTenantApp',
}

export enum GraphDeviceManagementPartnerTenantState {
  Unknown = 'unknown',
  Unavailable = 'unavailable',
  Enabled = 'enabled',
  Terminated = 'terminated',
  Rejected = 'rejected',
  Unresponsive = 'unresponsive',
}

export type GraphDeviceManagementSettings = {
  __typename?: 'GraphDeviceManagementSettings';
  deviceComplianceCheckinThresholdDays: Scalars['Int'];
  isScheduledActionEnabled: Scalars['Boolean'];
  secureByDefault: Scalars['Boolean'];
};

export enum GraphDeviceManagementSubscriptionState {
  Pending = 'pending',
  Active = 'active',
  Warning = 'warning',
  Disabled = 'disabled',
  Deleted = 'deleted',
  Blocked = 'blocked',
  LockedOut = 'lockedOut',
}

export type GraphDeviceManagementTroubleshootingEvent = GraphEntity & {
  __typename?: 'GraphDeviceManagementTroubleshootingEvent';
  correlationId?: Maybe<Scalars['String']>;
  eventDateTime: Scalars['DateTime'];
  id: Scalars['String'];
};

export type GraphDeviceOperatingSystemSummary = {
  __typename?: 'GraphDeviceOperatingSystemSummary';
  androidCount: Scalars['Int'];
  iosCount: Scalars['Int'];
  macOSCount: Scalars['Int'];
  unknownCount: Scalars['Int'];
  windowsCount: Scalars['Int'];
  windowsMobileCount: Scalars['Int'];
};

export enum GraphDeviceRegistrationState {
  NotRegistered = 'notRegistered',
  Registered = 'registered',
  Revoked = 'revoked',
  KeyConflict = 'keyConflict',
  ApprovalPending = 'approvalPending',
  CertificateReset = 'certificateReset',
  NotRegisteredPendingEnrollment = 'notRegisteredPendingEnrollment',
  Unknown = 'unknown',
}

export enum GraphDeviceThreatProtectionLevel {
  Unavailable = 'unavailable',
  Secured = 'secured',
  Low = 'low',
  Medium = 'medium',
  High = 'high',
  NotSet = 'notSet',
}

export type GraphDeviceUpdateInput = {
  accountEnabled?: Maybe<Scalars['Boolean']>;
  alternativeSecurityIds?: Maybe<Array<Maybe<GraphAlternativeSecurityIdInput>>>;
  approximateLastSignInDateTime?: Maybe<Scalars['DateTime']>;
  complianceExpirationDateTime?: Maybe<Scalars['DateTime']>;
  deviceId?: Maybe<Scalars['String']>;
  deviceMetadata?: Maybe<Scalars['String']>;
  deviceVersion?: Maybe<Scalars['Int']>;
  displayName?: Maybe<Scalars['String']>;
  isCompliant?: Maybe<Scalars['Boolean']>;
  isManaged?: Maybe<Scalars['Boolean']>;
  mdmAppId?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  operatingSystem?: Maybe<Scalars['String']>;
  operatingSystemVersion?: Maybe<Scalars['String']>;
  physicalIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  profileType?: Maybe<Scalars['String']>;
  systemLabels?: Maybe<Array<Maybe<Scalars['String']>>>;
  trustType?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphDiagnosticDataSubmissionMode {
  UserDefined = 'userDefined',
  None = 'none',
  Basic = 'basic',
  Enhanced = 'enhanced',
  Full = 'full',
}

export type GraphDirectory = GraphEntity & {
  __typename?: 'GraphDirectory';
  administrativeUnits?: Maybe<Array<Maybe<GraphAdministrativeUnit>>>;
  administrativeUnitsById?: Maybe<GraphAdministrativeUnit>;
  deletedItems?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  deletedItemsById?: Maybe<GraphDirectoryObject>;
  id: Scalars['String'];
};

export type GraphDirectoryAdministrativeUnitsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDirectoryAdministrativeUnitsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDirectoryDeletedItemsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDirectoryDeletedItemsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDirectoryAudit = GraphEntity & {
  __typename?: 'GraphDirectoryAudit';
  activityDateTime: Scalars['DateTime'];
  activityDisplayName: Scalars['String'];
  additionalDetails?: Maybe<Array<Maybe<GraphKeyValue>>>;
  category: Scalars['String'];
  correlationId?: Maybe<Scalars['String']>;
  initiatedBy: GraphAuditActivityInitiator;
  loggedByService?: Maybe<Scalars['String']>;
  operationType?: Maybe<Scalars['String']>;
  result?: Maybe<GraphOperationResult>;
  resultReason?: Maybe<Scalars['String']>;
  targetResources?: Maybe<Array<Maybe<GraphTargetResource>>>;
  id: Scalars['String'];
};

export type GraphDirectoryObject = GraphEntity & {
  __typename?: 'GraphDirectoryObject';
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDirectoryObjectValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphDirectoryObjectCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphDirectoryObjectCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphDirectoryObjectGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryObjectGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryObjectRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphDirectoryObjectGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryObjectGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphDirectoryObjectInput = {
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDirectoryObjectUpdateInput = {
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDirectoryRole = {
  __typename?: 'GraphDirectoryRole';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  roleTemplateId?: Maybe<Scalars['String']>;
  members?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  membersById?: Maybe<GraphDirectoryObject>;
  scopedMembers?: Maybe<Array<Maybe<GraphScopedRoleMembership>>>;
  scopedMembersById?: Maybe<GraphScopedRoleMembership>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphDirectoryRole>>>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDirectoryRoleMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDirectoryRoleMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDirectoryRoleScopedMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDirectoryRoleScopedMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDirectoryRoleValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphDirectoryRoleCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphDirectoryRoleCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphDirectoryRoleGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryRoleGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryRoleRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphDirectoryRoleGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryRoleGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphDirectoryRoleInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  roleTemplateId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphDirectoryRoleTemplate = {
  __typename?: 'GraphDirectoryRoleTemplate';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDirectoryRoleTemplateValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphDirectoryRoleTemplateCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphDirectoryRoleTemplateCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphDirectoryRoleTemplateGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryRoleTemplateGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryRoleTemplateRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphDirectoryRoleTemplateGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphDirectoryRoleTemplateGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphDirectoryRoleTemplateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphDirectoryRoleTemplateUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDirectoryRoleUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  roleTemplateId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDisableAndDeleteUserApplyAction = GraphAccessReviewApplyAction & {
  __typename?: 'GraphDisableAndDeleteUserApplyAction';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDomain = GraphEntity & {
  __typename?: 'GraphDomain';
  authenticationType: Scalars['String'];
  availabilityStatus?: Maybe<Scalars['String']>;
  isAdminManaged: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  isInitial: Scalars['Boolean'];
  isRoot: Scalars['Boolean'];
  isVerified: Scalars['Boolean'];
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  passwordNotificationWindowInDays?: Maybe<Scalars['Int']>;
  passwordValidityPeriodInDays?: Maybe<Scalars['Int']>;
  state?: Maybe<GraphDomainState>;
  supportedServices: Array<Maybe<Scalars['String']>>;
  domainNameReferences?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  domainNameReferencesById?: Maybe<GraphDirectoryObject>;
  serviceConfigurationRecords?: Maybe<Array<Maybe<GraphDomainDnsRecord>>>;
  serviceConfigurationRecordsById?: Maybe<GraphDomainDnsRecord>;
  verificationDnsRecords?: Maybe<Array<Maybe<GraphDomainDnsRecord>>>;
  verificationDnsRecordsById?: Maybe<GraphDomainDnsRecord>;
  forceDelete?: Maybe<Scalars['JSON']>;
  verify?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphDomainDomainNameReferencesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDomainDomainNameReferencesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDomainServiceConfigurationRecordsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDomainServiceConfigurationRecordsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDomainVerificationDnsRecordsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDomainVerificationDnsRecordsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDomainForceDeleteArgs = {
  bindingParameter: GraphDomainInput;
  disableUserAccounts?: Maybe<Scalars['Boolean']>;
};

export type GraphDomainVerifyArgs = {
  bindingParameter: GraphDomainInput;
};

export type GraphDomainDnsRecord = GraphEntity & {
  __typename?: 'GraphDomainDnsRecord';
  isOptional: Scalars['Boolean'];
  label: Scalars['String'];
  recordType?: Maybe<Scalars['String']>;
  supportedService: Scalars['String'];
  ttl: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDomainDnsRecordInput = {
  isOptional: Scalars['Boolean'];
  label: Scalars['String'];
  recordType?: Maybe<Scalars['String']>;
  supportedService: Scalars['String'];
  ttl: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphDomainDnsRecordUpdateInput = {
  isOptional?: Maybe<Scalars['Boolean']>;
  label?: Maybe<Scalars['String']>;
  recordType?: Maybe<Scalars['String']>;
  supportedService?: Maybe<Scalars['String']>;
  ttl?: Maybe<Scalars['Int']>;
};

export type GraphDomainInput = {
  authenticationType: Scalars['String'];
  availabilityStatus?: Maybe<Scalars['String']>;
  isAdminManaged: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  isInitial: Scalars['Boolean'];
  isRoot: Scalars['Boolean'];
  isVerified: Scalars['Boolean'];
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  passwordNotificationWindowInDays?: Maybe<Scalars['Int']>;
  passwordValidityPeriodInDays?: Maybe<Scalars['Int']>;
  state?: Maybe<GraphDomainStateInput>;
  supportedServices: Array<Maybe<Scalars['String']>>;
  id: Scalars['String'];
};

export type GraphDomainState = {
  __typename?: 'GraphDomainState';
  lastActionDateTime?: Maybe<Scalars['DateTime']>;
  operation?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type GraphDomainStateInput = {
  lastActionDateTime?: Maybe<Scalars['DateTime']>;
  operation?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type GraphDomainUpdateInput = {
  authenticationType?: Maybe<Scalars['String']>;
  availabilityStatus?: Maybe<Scalars['String']>;
  isAdminManaged?: Maybe<Scalars['Boolean']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  isInitial?: Maybe<Scalars['Boolean']>;
  isRoot?: Maybe<Scalars['Boolean']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  passwordNotificationWindowInDays?: Maybe<Scalars['Int']>;
  passwordValidityPeriodInDays?: Maybe<Scalars['Int']>;
  state?: Maybe<GraphDomainStateInput>;
  supportedServices?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphDrive = GraphBaseItem & {
  __typename?: 'GraphDrive';
  driveType?: Maybe<Scalars['String']>;
  owner?: Maybe<GraphIdentitySet>;
  quota?: Maybe<GraphQuota>;
  sharePointIds?: Maybe<GraphSharepointIds>;
  system?: Maybe<GraphSystemFacet>;
  following?: Maybe<Array<Maybe<GraphDriveItem>>>;
  followingById?: Maybe<GraphDriveItem>;
  items?: Maybe<Array<Maybe<GraphDriveItem>>>;
  itemsById?: Maybe<GraphDriveItem>;
  list?: Maybe<GraphList>;
  root?: Maybe<GraphDriveItem>;
  special?: Maybe<Array<Maybe<GraphDriveItem>>>;
  specialById?: Maybe<GraphDriveItem>;
  search?: Maybe<Array<Maybe<GraphDriveItem>>>;
  recent?: Maybe<Array<Maybe<GraphDriveItem>>>;
  sharedWithMe?: Maybe<Array<Maybe<GraphDriveItem>>>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReference>;
  webUrl?: Maybe<Scalars['String']>;
  createdByUser?: Maybe<GraphUser>;
  lastModifiedByUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphDriveFollowingArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveFollowingByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveItemsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveItemsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveSpecialArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveSpecialByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveInput = {
  driveType?: Maybe<Scalars['String']>;
  owner?: Maybe<GraphIdentitySetInput>;
  quota?: Maybe<GraphQuotaInput>;
  sharePointIds?: Maybe<GraphSharepointIdsInput>;
  system?: Maybe<GraphSystemFacetInput>;
  createdBy?: Maybe<GraphIdentitySetInput>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReferenceInput>;
  webUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDriveItem = GraphBaseItem & {
  __typename?: 'GraphDriveItem';
  audio?: Maybe<GraphAudio>;
  content?: Maybe<Scalars['String']>;
  cTag?: Maybe<Scalars['String']>;
  deleted?: Maybe<GraphDeleted>;
  file?: Maybe<GraphFile>;
  fileSystemInfo?: Maybe<GraphFileSystemInfo>;
  folder?: Maybe<GraphFolder>;
  image?: Maybe<GraphImage>;
  location?: Maybe<GraphGeoCoordinates>;
  package?: Maybe<GraphPackage>;
  pendingOperations?: Maybe<GraphPendingOperations>;
  photo?: Maybe<GraphPhoto>;
  publication?: Maybe<GraphPublicationFacet>;
  remoteItem?: Maybe<GraphRemoteItem>;
  root?: Maybe<GraphRoot>;
  searchResult?: Maybe<GraphSearchResult>;
  shared?: Maybe<GraphShared>;
  sharepointIds?: Maybe<GraphSharepointIds>;
  size?: Maybe<Scalars['BigInt']>;
  specialFolder?: Maybe<GraphSpecialFolder>;
  video?: Maybe<GraphVideo>;
  webDavUrl?: Maybe<Scalars['String']>;
  workbook?: Maybe<GraphWorkbook>;
  analytics?: Maybe<GraphItemAnalytics>;
  children?: Maybe<Array<Maybe<GraphDriveItem>>>;
  childrenById?: Maybe<GraphDriveItem>;
  listItem?: Maybe<GraphListItem>;
  permissions?: Maybe<Array<Maybe<GraphPermission>>>;
  permissionsById?: Maybe<GraphPermission>;
  subscriptions?: Maybe<Array<Maybe<GraphSubscription>>>;
  subscriptionsById?: Maybe<GraphSubscription>;
  thumbnails?: Maybe<Array<Maybe<GraphThumbnailSet>>>;
  thumbnailsById?: Maybe<GraphThumbnailSet>;
  versions?: Maybe<Array<Maybe<GraphDriveItemVersion>>>;
  versionsById?: Maybe<GraphDriveItemVersion>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphDriveItem>>>;
  getActivitiesByInterval?: Maybe<Array<Maybe<GraphItemActivityStat>>>;
  search?: Maybe<Array<Maybe<GraphDriveItem>>>;
  restore?: Maybe<Scalars['JSON']>;
  copy?: Maybe<Scalars['JSON']>;
  createUploadSession?: Maybe<Scalars['JSON']>;
  checkin?: Maybe<Scalars['JSON']>;
  checkout?: Maybe<Scalars['JSON']>;
  createLink?: Maybe<Scalars['JSON']>;
  follow?: Maybe<Scalars['JSON']>;
  invite?: Maybe<Scalars['JSON']>;
  preview?: Maybe<Scalars['JSON']>;
  unfollow?: Maybe<Scalars['JSON']>;
  validatePermission?: Maybe<Scalars['JSON']>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReference>;
  webUrl?: Maybe<Scalars['String']>;
  createdByUser?: Maybe<GraphUser>;
  lastModifiedByUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphDriveItemChildrenArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveItemChildrenByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveItemPermissionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveItemPermissionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveItemSubscriptionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveItemSubscriptionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveItemThumbnailsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveItemThumbnailsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveItemVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphDriveItemVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphDriveItemRestoreArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  parentReference?: Maybe<GraphItemReferenceInput>;
  name?: Maybe<Scalars['String']>;
};

export type GraphDriveItemCopyArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReferenceInput>;
};

export type GraphDriveItemCreateUploadSessionArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  item?: Maybe<GraphDriveItemUploadablePropertiesInput>;
  deferCommit?: Maybe<Scalars['Boolean']>;
};

export type GraphDriveItemCheckinArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  checkInAs?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
};

export type GraphDriveItemCheckoutArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
};

export type GraphDriveItemCreateLinkArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  type: Scalars['String'];
  scope?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  password?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

export type GraphDriveItemFollowArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
};

export type GraphDriveItemInviteArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  requireSignIn?: Maybe<Scalars['Boolean']>;
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  sendInvitation?: Maybe<Scalars['Boolean']>;
  message?: Maybe<Scalars['String']>;
  recipients: Array<Maybe<GraphDriveRecipientInput>>;
  expirationDateTime?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
};

export type GraphDriveItemPreviewArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  page?: Maybe<Scalars['String']>;
  zoom?: Maybe<Scalars['Float']>;
};

export type GraphDriveItemUnfollowArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
};

export type GraphDriveItemValidatePermissionArgs = {
  bindingParameter?: Maybe<GraphDriveItemInput>;
  challengeToken?: Maybe<Scalars['String']>;
  password: Scalars['String'];
};

export type GraphDriveItemInput = {
  audio?: Maybe<GraphAudioInput>;
  content?: Maybe<Scalars['String']>;
  cTag?: Maybe<Scalars['String']>;
  deleted?: Maybe<GraphDeletedInput>;
  file?: Maybe<GraphFileInput>;
  fileSystemInfo?: Maybe<GraphFileSystemInfoInput>;
  folder?: Maybe<GraphFolderInput>;
  image?: Maybe<GraphImageInput>;
  location?: Maybe<GraphGeoCoordinatesInput>;
  package?: Maybe<GraphPackageInput>;
  pendingOperations?: Maybe<GraphPendingOperationsInput>;
  photo?: Maybe<GraphPhotoInput>;
  publication?: Maybe<GraphPublicationFacetInput>;
  remoteItem?: Maybe<GraphRemoteItemInput>;
  root?: Maybe<GraphRootInput>;
  searchResult?: Maybe<GraphSearchResultInput>;
  shared?: Maybe<GraphSharedInput>;
  sharepointIds?: Maybe<GraphSharepointIdsInput>;
  size?: Maybe<Scalars['BigInt']>;
  specialFolder?: Maybe<GraphSpecialFolderInput>;
  video?: Maybe<GraphVideoInput>;
  webDavUrl?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  createdBy?: Maybe<GraphIdentitySetInput>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReferenceInput>;
  webUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphDriveItemUpdateInput = {
  audio?: Maybe<GraphAudioInput>;
  content?: Maybe<Scalars['String']>;
  cTag?: Maybe<Scalars['String']>;
  deleted?: Maybe<GraphDeletedInput>;
  file?: Maybe<GraphFileInput>;
  fileSystemInfo?: Maybe<GraphFileSystemInfoInput>;
  folder?: Maybe<GraphFolderInput>;
  image?: Maybe<GraphImageInput>;
  location?: Maybe<GraphGeoCoordinatesInput>;
  package?: Maybe<GraphPackageInput>;
  pendingOperations?: Maybe<GraphPendingOperationsInput>;
  photo?: Maybe<GraphPhotoInput>;
  publication?: Maybe<GraphPublicationFacetInput>;
  remoteItem?: Maybe<GraphRemoteItemInput>;
  root?: Maybe<GraphRootInput>;
  searchResult?: Maybe<GraphSearchResultInput>;
  shared?: Maybe<GraphSharedInput>;
  sharepointIds?: Maybe<GraphSharepointIdsInput>;
  size?: Maybe<Scalars['BigInt']>;
  specialFolder?: Maybe<GraphSpecialFolderInput>;
  video?: Maybe<GraphVideoInput>;
  webDavUrl?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphDriveItemUploadablePropertiesInput = {
  description?: Maybe<Scalars['String']>;
  fileSize?: Maybe<Scalars['BigInt']>;
  fileSystemInfo?: Maybe<GraphFileSystemInfoInput>;
  name?: Maybe<Scalars['String']>;
};

export type GraphDriveItemVersion = GraphBaseItemVersion & {
  __typename?: 'GraphDriveItemVersion';
  content?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['BigInt']>;
  restoreVersion?: Maybe<Scalars['JSON']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  publication?: Maybe<GraphPublicationFacet>;
  id: Scalars['String'];
};

export type GraphDriveItemVersionRestoreVersionArgs = {
  bindingParameter?: Maybe<GraphDriveItemVersionInput>;
};

export type GraphDriveItemVersionInput = {
  content?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['BigInt']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  publication?: Maybe<GraphPublicationFacetInput>;
  id: Scalars['String'];
};

export type GraphDriveRecipientInput = {
  alias?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  objectId?: Maybe<Scalars['String']>;
};

export type GraphDriveUpdateInput = {
  driveType?: Maybe<Scalars['String']>;
  owner?: Maybe<GraphIdentitySetInput>;
  quota?: Maybe<GraphQuotaInput>;
  sharePointIds?: Maybe<GraphSharepointIdsInput>;
  system?: Maybe<GraphSystemFacetInput>;
};

export type GraphEBookInstallSummary = GraphEntity & {
  __typename?: 'GraphEBookInstallSummary';
  failedDeviceCount: Scalars['Int'];
  failedUserCount: Scalars['Int'];
  installedDeviceCount: Scalars['Int'];
  installedUserCount: Scalars['Int'];
  notInstalledDeviceCount: Scalars['Int'];
  notInstalledUserCount: Scalars['Int'];
  id: Scalars['String'];
};

export enum GraphEdgeCookiePolicy {
  UserDefined = 'userDefined',
  Allow = 'allow',
  BlockThirdParty = 'blockThirdParty',
  BlockAll = 'blockAll',
}

export type GraphEdgeSearchEngine = GraphEdgeSearchEngineBase & {
  __typename?: 'GraphEdgeSearchEngine';
  edgeSearchEngineType: GraphEdgeSearchEngineType;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphEdgeSearchEngineBase = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphEdgeSearchEngineCustom = GraphEdgeSearchEngineBase & {
  __typename?: 'GraphEdgeSearchEngineCustom';
  edgeSearchEngineOpenSearchXmlUrl: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphEdgeSearchEngineType {
  Default = 'default',
  Bing = 'bing',
}

export type GraphEditionUpgradeConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphEditionUpgradeConfiguration';
  license?: Maybe<Scalars['String']>;
  licenseType: GraphEditionUpgradeLicenseType;
  productKey?: Maybe<Scalars['String']>;
  targetEdition: GraphWindows10EditionType;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphEditionUpgradeConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEditionUpgradeConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEditionUpgradeConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEditionUpgradeConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEditionUpgradeConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEditionUpgradeConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEditionUpgradeConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEditionUpgradeConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEditionUpgradeConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export enum GraphEditionUpgradeLicenseType {
  ProductKey = 'productKey',
  LicenseFile = 'licenseFile',
}

export type GraphEducationClass = GraphEntity & {
  __typename?: 'GraphEducationClass';
  classCode?: Maybe<Scalars['String']>;
  course?: Maybe<GraphEducationCourse>;
  createdBy?: Maybe<GraphIdentitySet>;
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  externalId?: Maybe<Scalars['String']>;
  externalName?: Maybe<Scalars['String']>;
  externalSource?: Maybe<GraphEducationExternalSource>;
  externalSourceDetail?: Maybe<Scalars['String']>;
  grade?: Maybe<Scalars['String']>;
  mailNickname: Scalars['String'];
  term?: Maybe<GraphEducationTerm>;
  group?: Maybe<GraphGroup>;
  members?: Maybe<Array<Maybe<GraphEducationUser>>>;
  membersById?: Maybe<GraphEducationUser>;
  schools?: Maybe<Array<Maybe<GraphEducationSchool>>>;
  schoolsById?: Maybe<GraphEducationSchool>;
  teachers?: Maybe<Array<Maybe<GraphEducationUser>>>;
  teachersById?: Maybe<GraphEducationUser>;
  delta?: Maybe<Array<Maybe<GraphEducationClass>>>;
  id: Scalars['String'];
};

export type GraphEducationClassMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationClassMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationClassSchoolsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationClassSchoolsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationClassTeachersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationClassTeachersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationCourse = {
  __typename?: 'GraphEducationCourse';
  courseNumber?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  externalId?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
};

export enum GraphEducationExternalSource {
  Sis = 'sis',
  Manual = 'manual',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphEducationGender {
  Female = 'female',
  Male = 'male',
  Other = 'other',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphEducationOnPremisesInfo = {
  __typename?: 'GraphEducationOnPremisesInfo';
  immutableId?: Maybe<Scalars['String']>;
};

export type GraphEducationOrganization = {
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  externalSource?: Maybe<GraphEducationExternalSource>;
  externalSourceDetail?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphEducationRoot = {
  __typename?: 'GraphEducationRoot';
  classes?: Maybe<Array<Maybe<GraphEducationClass>>>;
  classesById?: Maybe<GraphEducationClass>;
  me?: Maybe<GraphEducationUser>;
  schools?: Maybe<Array<Maybe<GraphEducationSchool>>>;
  schoolsById?: Maybe<GraphEducationSchool>;
  users?: Maybe<Array<Maybe<GraphEducationUser>>>;
  usersById?: Maybe<GraphEducationUser>;
};

export type GraphEducationRootClassesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationRootClassesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationRootSchoolsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationRootSchoolsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationRootUsersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationRootUsersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationSchool = GraphEducationOrganization & {
  __typename?: 'GraphEducationSchool';
  address?: Maybe<GraphPhysicalAddress>;
  createdBy?: Maybe<GraphIdentitySet>;
  externalId?: Maybe<Scalars['String']>;
  externalPrincipalId?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  highestGrade?: Maybe<Scalars['String']>;
  lowestGrade?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  principalEmail?: Maybe<Scalars['String']>;
  principalName?: Maybe<Scalars['String']>;
  schoolNumber?: Maybe<Scalars['String']>;
  administrativeUnit?: Maybe<GraphAdministrativeUnit>;
  classes?: Maybe<Array<Maybe<GraphEducationClass>>>;
  classesById?: Maybe<GraphEducationClass>;
  users?: Maybe<Array<Maybe<GraphEducationUser>>>;
  usersById?: Maybe<GraphEducationUser>;
  delta?: Maybe<Array<Maybe<GraphEducationSchool>>>;
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  externalSource?: Maybe<GraphEducationExternalSource>;
  externalSourceDetail?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphEducationSchoolClassesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationSchoolClassesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationSchoolUsersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationSchoolUsersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationStudent = {
  __typename?: 'GraphEducationStudent';
  birthDate?: Maybe<Scalars['Date']>;
  externalId?: Maybe<Scalars['String']>;
  gender?: Maybe<GraphEducationGender>;
  grade?: Maybe<Scalars['String']>;
  graduationYear?: Maybe<Scalars['String']>;
  studentNumber?: Maybe<Scalars['String']>;
};

export type GraphEducationTeacher = {
  __typename?: 'GraphEducationTeacher';
  externalId?: Maybe<Scalars['String']>;
  teacherNumber?: Maybe<Scalars['String']>;
};

export type GraphEducationTerm = {
  __typename?: 'GraphEducationTerm';
  displayName?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['Date']>;
  externalId?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['Date']>;
};

export type GraphEducationUser = GraphEntity & {
  __typename?: 'GraphEducationUser';
  accountEnabled?: Maybe<Scalars['Boolean']>;
  assignedLicenses: Array<Maybe<GraphAssignedLicense>>;
  assignedPlans: Array<Maybe<GraphAssignedPlan>>;
  businessPhones: Array<Maybe<Scalars['String']>>;
  createdBy?: Maybe<GraphIdentitySet>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  externalSource?: Maybe<GraphEducationExternalSource>;
  externalSourceDetail?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  mailingAddress?: Maybe<GraphPhysicalAddress>;
  mailNickname?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  onPremisesInfo?: Maybe<GraphEducationOnPremisesInfo>;
  passwordPolicies?: Maybe<Scalars['String']>;
  passwordProfile?: Maybe<GraphPasswordProfile>;
  preferredLanguage?: Maybe<Scalars['String']>;
  primaryRole: GraphEducationUserRole;
  provisionedPlans: Array<Maybe<GraphProvisionedPlan>>;
  refreshTokensValidFromDateTime?: Maybe<Scalars['DateTime']>;
  residenceAddress?: Maybe<GraphPhysicalAddress>;
  showInAddressList?: Maybe<Scalars['Boolean']>;
  student?: Maybe<GraphEducationStudent>;
  surname?: Maybe<Scalars['String']>;
  teacher?: Maybe<GraphEducationTeacher>;
  usageLocation?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  userType?: Maybe<Scalars['String']>;
  classes?: Maybe<Array<Maybe<GraphEducationClass>>>;
  classesById?: Maybe<GraphEducationClass>;
  schools?: Maybe<Array<Maybe<GraphEducationSchool>>>;
  schoolsById?: Maybe<GraphEducationSchool>;
  taughtClasses?: Maybe<Array<Maybe<GraphEducationClass>>>;
  taughtClassesById?: Maybe<GraphEducationClass>;
  user?: Maybe<GraphUser>;
  delta?: Maybe<Array<Maybe<GraphEducationUser>>>;
  id: Scalars['String'];
};

export type GraphEducationUserClassesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationUserClassesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationUserSchoolsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationUserSchoolsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEducationUserTaughtClassesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEducationUserTaughtClassesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphEducationUserRole {
  Student = 'student',
  Teacher = 'teacher',
  None = 'none',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphEmailAddress = {
  __typename?: 'GraphEmailAddress';
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type GraphEmailAddressInput = {
  address?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type GraphEmailAuthenticationMethodConfiguration = GraphAuthenticationMethodConfiguration & {
  __typename?: 'GraphEmailAuthenticationMethodConfiguration';
  allowExternalIdToUseEmailOtp?: Maybe<GraphExternalEmailOtpState>;
  includeTargets?: Maybe<Array<Maybe<GraphAuthenticationMethodTarget>>>;
  includeTargetsById?: Maybe<GraphAuthenticationMethodTarget>;
  state?: Maybe<GraphAuthenticationMethodState>;
  id: Scalars['String'];
};

export type GraphEmailAuthenticationMethodConfigurationIncludeTargetsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEmailAuthenticationMethodConfigurationIncludeTargetsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEmailFileAssessmentRequest = GraphThreatAssessmentRequest & {
  __typename?: 'GraphEmailFileAssessmentRequest';
  contentData: Scalars['String'];
  destinationRoutingReason?: Maybe<GraphMailDestinationRoutingReason>;
  recipientEmail: Scalars['String'];
  category: GraphThreatCategory;
  contentType?: Maybe<GraphThreatAssessmentContentType>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  expectedAssessment: GraphThreatExpectedAssessment;
  requestSource?: Maybe<GraphThreatAssessmentRequestSource>;
  status?: Maybe<GraphThreatAssessmentStatus>;
  results?: Maybe<Array<Maybe<GraphThreatAssessmentResult>>>;
  resultsById?: Maybe<GraphThreatAssessmentResult>;
  id: Scalars['String'];
};

export type GraphEmailFileAssessmentRequestResultsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEmailFileAssessmentRequestResultsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphEmailRole {
  Unknown = 'unknown',
  Sender = 'sender',
  Recipient = 'recipient',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphEmployeeOrgData = {
  __typename?: 'GraphEmployeeOrgData';
  costCenter?: Maybe<Scalars['String']>;
  division?: Maybe<Scalars['String']>;
};

export type GraphEmployeeOrgDataInput = {
  costCenter?: Maybe<Scalars['String']>;
  division?: Maybe<Scalars['String']>;
};

export enum GraphEnablement {
  NotConfigured = 'notConfigured',
  Enabled = 'enabled',
  Disabled = 'disabled',
}

export type GraphEndpoint = {
  __typename?: 'GraphEndpoint';
  capability: Scalars['String'];
  providerId?: Maybe<Scalars['String']>;
  providerName?: Maybe<Scalars['String']>;
  providerResourceId?: Maybe<Scalars['String']>;
  uri: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphEndpointValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphEndpointCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphEndpointCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphEndpointGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphEndpointGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphEndpointRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphEndpointGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphEndpointGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphEndpointType {
  Default = 'default',
  Voicemail = 'voicemail',
  SkypeForBusiness = 'skypeForBusiness',
  SkypeForBusinessVoipPhone = 'skypeForBusinessVoipPhone',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphEnrollmentConfigurationAssignment = GraphEntity & {
  __typename?: 'GraphEnrollmentConfigurationAssignment';
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphEnrollmentConfigurationAssignmentInput = {
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTargetInput>;
  id: Scalars['String'];
};

export enum GraphEnrollmentState {
  Unknown = 'unknown',
  Enrolled = 'enrolled',
  PendingReset = 'pendingReset',
  Failed = 'failed',
  NotContacted = 'notContacted',
}

export type GraphEntity = {
  id: Scalars['String'];
};

export enum GraphEntityType {
  Event = 'event',
  Message = 'message',
  DriveItem = 'driveItem',
  ExternalItem = 'externalItem',
  Site = 'site',
  List = 'list',
  ListItem = 'listItem',
  Drive = 'drive',
  Unknownfuturevalue = 'unknownfuturevalue',
}

export type GraphEvent = GraphOutlookItem & {
  __typename?: 'GraphEvent';
  allowNewTimeProposals?: Maybe<Scalars['Boolean']>;
  attendees?: Maybe<Array<Maybe<GraphAttendee>>>;
  body?: Maybe<GraphItemBody>;
  bodyPreview?: Maybe<Scalars['String']>;
  end?: Maybe<GraphDateTimeTimeZone>;
  hasAttachments?: Maybe<Scalars['Boolean']>;
  hideAttendees?: Maybe<Scalars['Boolean']>;
  iCalUId?: Maybe<Scalars['String']>;
  importance?: Maybe<GraphImportance>;
  isAllDay?: Maybe<Scalars['Boolean']>;
  isCancelled?: Maybe<Scalars['Boolean']>;
  isDraft?: Maybe<Scalars['Boolean']>;
  isOnlineMeeting?: Maybe<Scalars['Boolean']>;
  isOrganizer?: Maybe<Scalars['Boolean']>;
  isReminderOn?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphLocation>;
  locations?: Maybe<Array<Maybe<GraphLocation>>>;
  onlineMeeting?: Maybe<GraphOnlineMeetingInfo>;
  onlineMeetingProvider?: Maybe<GraphOnlineMeetingProviderType>;
  onlineMeetingUrl?: Maybe<Scalars['String']>;
  organizer?: Maybe<GraphRecipient>;
  originalEndTimeZone?: Maybe<Scalars['String']>;
  originalStart?: Maybe<Scalars['DateTime']>;
  originalStartTimeZone?: Maybe<Scalars['String']>;
  recurrence?: Maybe<GraphPatternedRecurrence>;
  reminderMinutesBeforeStart?: Maybe<Scalars['Int']>;
  responseRequested?: Maybe<Scalars['Boolean']>;
  responseStatus?: Maybe<GraphResponseStatus>;
  sensitivity?: Maybe<GraphSensitivity>;
  seriesMasterId?: Maybe<Scalars['String']>;
  showAs?: Maybe<GraphFreeBusyStatus>;
  start?: Maybe<GraphDateTimeTimeZone>;
  subject?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  type?: Maybe<GraphEventType>;
  webLink?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<GraphAttachment>>>;
  attachmentsById?: Maybe<GraphAttachment>;
  calendar?: Maybe<GraphCalendar>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  instances?: Maybe<Array<Maybe<GraphEvent>>>;
  instancesById?: Maybe<GraphEvent>;
  multiValueExtendedProperties?: Maybe<Array<Maybe<GraphMultiValueLegacyExtendedProperty>>>;
  multiValueExtendedPropertiesById?: Maybe<GraphMultiValueLegacyExtendedProperty>;
  singleValueExtendedProperties?: Maybe<Array<Maybe<GraphSingleValueLegacyExtendedProperty>>>;
  singleValueExtendedPropertiesById?: Maybe<GraphSingleValueLegacyExtendedProperty>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphEvent>>>;
  accept?: Maybe<Scalars['JSON']>;
  cancel?: Maybe<Scalars['JSON']>;
  decline?: Maybe<Scalars['JSON']>;
  dismissReminder?: Maybe<Scalars['JSON']>;
  forward?: Maybe<Scalars['JSON']>;
  snoozeReminder?: Maybe<Scalars['JSON']>;
  tentativelyAccept?: Maybe<Scalars['JSON']>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphEventAttachmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEventAttachmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEventExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEventExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEventInstancesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEventInstancesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEventMultiValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEventMultiValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEventSingleValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphEventSingleValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphEventAcceptArgs = {
  bindingParameter?: Maybe<GraphEventInput>;
  SendResponse?: Maybe<Scalars['Boolean']>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphEventCancelArgs = {
  bindingParameter?: Maybe<GraphEventInput>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphEventDeclineArgs = {
  bindingParameter?: Maybe<GraphEventInput>;
  ProposedNewTime?: Maybe<GraphTimeSlotInput>;
  SendResponse?: Maybe<Scalars['Boolean']>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphEventDismissReminderArgs = {
  bindingParameter?: Maybe<GraphEventInput>;
};

export type GraphEventForwardArgs = {
  bindingParameter?: Maybe<GraphEventInput>;
  ToRecipients?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphEventSnoozeReminderArgs = {
  bindingParameter?: Maybe<GraphEventInput>;
  NewReminderTime: GraphDateTimeTimeZoneInput;
};

export type GraphEventTentativelyAcceptArgs = {
  bindingParameter?: Maybe<GraphEventInput>;
  ProposedNewTime?: Maybe<GraphTimeSlotInput>;
  SendResponse?: Maybe<Scalars['Boolean']>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphEventInput = {
  allowNewTimeProposals?: Maybe<Scalars['Boolean']>;
  attendees?: Maybe<Array<Maybe<GraphAttendeeInput>>>;
  body?: Maybe<GraphItemBodyInput>;
  bodyPreview?: Maybe<Scalars['String']>;
  end?: Maybe<GraphDateTimeTimeZoneInput>;
  hasAttachments?: Maybe<Scalars['Boolean']>;
  hideAttendees?: Maybe<Scalars['Boolean']>;
  iCalUId?: Maybe<Scalars['String']>;
  importance?: Maybe<GraphImportance>;
  isAllDay?: Maybe<Scalars['Boolean']>;
  isCancelled?: Maybe<Scalars['Boolean']>;
  isDraft?: Maybe<Scalars['Boolean']>;
  isOnlineMeeting?: Maybe<Scalars['Boolean']>;
  isOrganizer?: Maybe<Scalars['Boolean']>;
  isReminderOn?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphLocationInput>;
  locations?: Maybe<Array<Maybe<GraphLocationInput>>>;
  onlineMeeting?: Maybe<GraphOnlineMeetingInfoInput>;
  onlineMeetingProvider?: Maybe<GraphOnlineMeetingProviderType>;
  onlineMeetingUrl?: Maybe<Scalars['String']>;
  organizer?: Maybe<GraphRecipientInput>;
  originalEndTimeZone?: Maybe<Scalars['String']>;
  originalStart?: Maybe<Scalars['DateTime']>;
  originalStartTimeZone?: Maybe<Scalars['String']>;
  recurrence?: Maybe<GraphPatternedRecurrenceInput>;
  reminderMinutesBeforeStart?: Maybe<Scalars['Int']>;
  responseRequested?: Maybe<Scalars['Boolean']>;
  responseStatus?: Maybe<GraphResponseStatusInput>;
  sensitivity?: Maybe<GraphSensitivity>;
  seriesMasterId?: Maybe<Scalars['String']>;
  showAs?: Maybe<GraphFreeBusyStatus>;
  start?: Maybe<GraphDateTimeTimeZoneInput>;
  subject?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  type?: Maybe<GraphEventType>;
  webLink?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export enum GraphEventType {
  SingleInstance = 'singleInstance',
  Occurrence = 'occurrence',
  Exception = 'exception',
  SeriesMaster = 'seriesMaster',
}

export enum GraphExchangeIdFormat {
  EntryId = 'entryId',
  EwsId = 'ewsId',
  ImmutableEntryId = 'immutableEntryId',
  RestId = 'restId',
  RestImmutableEntryId = 'restImmutableEntryId',
}

export type GraphExtension = {
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphExtensionProperty = {
  __typename?: 'GraphExtensionProperty';
  appDisplayName?: Maybe<Scalars['String']>;
  dataType: Scalars['String'];
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  targetObjects: Array<Maybe<Scalars['String']>>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphExtensionPropertyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphExtensionPropertyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphExtensionPropertyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphExtensionPropertyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphExtensionPropertyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphExtensionPropertyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphExtensionPropertyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphExtensionPropertyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphExtensionSchemaProperty = {
  __typename?: 'GraphExtensionSchemaProperty';
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphExtensionSchemaPropertyInput = {
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export enum GraphExternalAudienceScope {
  None = 'none',
  ContactsOnly = 'contactsOnly',
  All = 'all',
}

export enum GraphExternalEmailOtpState {
  Default = 'default',
  Enabled = 'enabled',
  Disabled = 'disabled',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphExternalLink = {
  __typename?: 'GraphExternalLink';
  href?: Maybe<Scalars['String']>;
};

export type GraphExternalLinkInput = {
  href?: Maybe<Scalars['String']>;
};

export type GraphFeatureRolloutPolicy = GraphEntity & {
  __typename?: 'GraphFeatureRolloutPolicy';
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  feature: GraphStagedFeatureName;
  isAppliedToOrganization: Scalars['Boolean'];
  isEnabled: Scalars['Boolean'];
  appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  appliesToById?: Maybe<GraphDirectoryObject>;
  id: Scalars['String'];
};

export type GraphFeatureRolloutPolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphFeatureRolloutPolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphFido2AuthenticationMethod = GraphAuthenticationMethod & {
  __typename?: 'GraphFido2AuthenticationMethod';
  aaGuid?: Maybe<Scalars['String']>;
  attestationCertificates?: Maybe<Array<Maybe<Scalars['String']>>>;
  attestationLevel?: Maybe<GraphAttestationLevel>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphFido2AuthenticationMethodConfiguration = GraphAuthenticationMethodConfiguration & {
  __typename?: 'GraphFido2AuthenticationMethodConfiguration';
  isAttestationEnforced?: Maybe<Scalars['Boolean']>;
  isSelfServiceRegistrationAllowed?: Maybe<Scalars['Boolean']>;
  keyRestrictions?: Maybe<GraphFido2KeyRestrictions>;
  includeTargets?: Maybe<Array<Maybe<GraphAuthenticationMethodTarget>>>;
  includeTargetsById?: Maybe<GraphAuthenticationMethodTarget>;
  state?: Maybe<GraphAuthenticationMethodState>;
  id: Scalars['String'];
};

export type GraphFido2AuthenticationMethodConfigurationIncludeTargetsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphFido2AuthenticationMethodConfigurationIncludeTargetsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphFido2KeyRestrictions = {
  __typename?: 'GraphFido2KeyRestrictions';
  aaGuids?: Maybe<Array<Maybe<Scalars['String']>>>;
  enforcementType?: Maybe<GraphFido2RestrictionEnforcementType>;
  isEnforced?: Maybe<Scalars['Boolean']>;
};

export enum GraphFido2RestrictionEnforcementType {
  Allow = 'allow',
  Block = 'block',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphFieldValueSet = GraphEntity & {
  __typename?: 'GraphFieldValueSet';
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphFile = {
  __typename?: 'GraphFile';
  hashes?: Maybe<GraphHashes>;
  mimeType?: Maybe<Scalars['String']>;
  processingMetadata?: Maybe<Scalars['Boolean']>;
};

export type GraphFileAssessmentRequest = GraphThreatAssessmentRequest & {
  __typename?: 'GraphFileAssessmentRequest';
  contentData: Scalars['String'];
  fileName: Scalars['String'];
  category: GraphThreatCategory;
  contentType?: Maybe<GraphThreatAssessmentContentType>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  expectedAssessment: GraphThreatExpectedAssessment;
  requestSource?: Maybe<GraphThreatAssessmentRequestSource>;
  status?: Maybe<GraphThreatAssessmentStatus>;
  results?: Maybe<Array<Maybe<GraphThreatAssessmentResult>>>;
  resultsById?: Maybe<GraphThreatAssessmentResult>;
  id: Scalars['String'];
};

export type GraphFileAssessmentRequestResultsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphFileAssessmentRequestResultsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphFileAttachment = GraphAttachment & {
  __typename?: 'GraphFileAttachment';
  contentBytes?: Maybe<Scalars['String']>;
  contentId?: Maybe<Scalars['String']>;
  contentLocation?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  isInline: Scalars['Boolean'];
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  size: Scalars['Int'];
  createUploadSession?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphFileAttachmentCreateUploadSessionArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphAttachmentInput>>>;
  AttachmentItem: GraphAttachmentItemInput;
};

export type GraphFileEncryptionInfoInput = {
  encryptionKey?: Maybe<Scalars['String']>;
  fileDigest?: Maybe<Scalars['String']>;
  fileDigestAlgorithm?: Maybe<Scalars['String']>;
  initializationVector?: Maybe<Scalars['String']>;
  mac?: Maybe<Scalars['String']>;
  macKey?: Maybe<Scalars['String']>;
  profileIdentifier?: Maybe<Scalars['String']>;
};

export type GraphFileHash = {
  __typename?: 'GraphFileHash';
  hashType?: Maybe<GraphFileHashType>;
  hashValue?: Maybe<Scalars['String']>;
};

export enum GraphFileHashType {
  Unknown = 'unknown',
  Sha1 = 'sha1',
  Sha256 = 'sha256',
  Md5 = 'md5',
  AuthenticodeHash256 = 'authenticodeHash256',
  LsHash = 'lsHash',
  Ctph = 'ctph',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphFileInput = {
  hashes?: Maybe<GraphHashesInput>;
  mimeType?: Maybe<Scalars['String']>;
  processingMetadata?: Maybe<Scalars['Boolean']>;
};

export type GraphFileSecurityState = {
  __typename?: 'GraphFileSecurityState';
  fileHash?: Maybe<GraphFileHash>;
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  riskScore?: Maybe<Scalars['String']>;
};

export type GraphFileSystemInfo = {
  __typename?: 'GraphFileSystemInfo';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastAccessedDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphFileSystemInfoInput = {
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastAccessedDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
};

export enum GraphFirewallCertificateRevocationListCheckMethodType {
  DeviceDefault = 'deviceDefault',
  None = 'none',
  Attempt = 'attempt',
  Require = 'require',
}

export enum GraphFirewallPacketQueueingMethodType {
  DeviceDefault = 'deviceDefault',
  Disabled = 'disabled',
  QueueInbound = 'queueInbound',
  QueueOutbound = 'queueOutbound',
  QueueBoth = 'queueBoth',
}

export enum GraphFirewallPreSharedKeyEncodingMethodType {
  DeviceDefault = 'deviceDefault',
  None = 'none',
  UtF8 = 'utF8',
}

export type GraphFolder = {
  __typename?: 'GraphFolder';
  childCount?: Maybe<Scalars['Int']>;
  view?: Maybe<GraphFolderView>;
};

export type GraphFolderInput = {
  childCount?: Maybe<Scalars['Int']>;
  view?: Maybe<GraphFolderViewInput>;
};

export type GraphFolderView = {
  __typename?: 'GraphFolderView';
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
  viewType?: Maybe<Scalars['String']>;
};

export type GraphFolderViewInput = {
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
  viewType?: Maybe<Scalars['String']>;
};

export type GraphFollowupFlag = {
  __typename?: 'GraphFollowupFlag';
  completedDateTime?: Maybe<GraphDateTimeTimeZone>;
  dueDateTime?: Maybe<GraphDateTimeTimeZone>;
  flagStatus?: Maybe<GraphFollowupFlagStatus>;
  startDateTime?: Maybe<GraphDateTimeTimeZone>;
};

export type GraphFollowupFlagInput = {
  completedDateTime?: Maybe<GraphDateTimeTimeZoneInput>;
  dueDateTime?: Maybe<GraphDateTimeTimeZoneInput>;
  flagStatus?: Maybe<GraphFollowupFlagStatus>;
  startDateTime?: Maybe<GraphDateTimeTimeZoneInput>;
};

export enum GraphFollowupFlagStatus {
  NotFlagged = 'notFlagged',
  Complete = 'complete',
  Flagged = 'flagged',
}

export enum GraphFreeBusyStatus {
  Unknown = 'unknown',
  Free = 'free',
  Tentative = 'tentative',
  Busy = 'busy',
  Oof = 'oof',
  WorkingElsewhere = 'workingElsewhere',
}

export type GraphGeoCoordinates = {
  __typename?: 'GraphGeoCoordinates';
  altitude?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type GraphGeoCoordinatesInput = {
  altitude?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type GraphGeolocationColumn = {
  __typename?: 'GraphGeolocationColumn';
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphGiphyRatingType {
  Strict = 'strict',
  Moderate = 'moderate',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphGroup = {
  __typename?: 'GraphGroup';
  assignedLabels?: Maybe<Array<Maybe<GraphAssignedLabel>>>;
  assignedLicenses?: Maybe<Array<Maybe<GraphAssignedLicense>>>;
  classification?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  groupTypes: Array<Maybe<Scalars['String']>>;
  hasMembersWithLicenseErrors?: Maybe<Scalars['Boolean']>;
  licenseProcessingState?: Maybe<GraphLicenseProcessingState>;
  mail?: Maybe<Scalars['String']>;
  mailEnabled?: Maybe<Scalars['Boolean']>;
  mailNickname?: Maybe<Scalars['String']>;
  membershipRule?: Maybe<Scalars['String']>;
  membershipRuleProcessingState?: Maybe<Scalars['String']>;
  onPremisesDomainName?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesNetBiosName?: Maybe<Scalars['String']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningError>>>;
  onPremisesSamAccountName?: Maybe<Scalars['String']>;
  onPremisesSecurityIdentifier?: Maybe<Scalars['String']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  preferredDataLocation?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  proxyAddresses: Array<Maybe<Scalars['String']>>;
  renewedDateTime?: Maybe<Scalars['DateTime']>;
  securityEnabled?: Maybe<Scalars['Boolean']>;
  securityIdentifier?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  visibility?: Maybe<Scalars['String']>;
  allowExternalSenders?: Maybe<Scalars['Boolean']>;
  autoSubscribeNewMembers?: Maybe<Scalars['Boolean']>;
  hideFromAddressLists?: Maybe<Scalars['Boolean']>;
  hideFromOutlookClients?: Maybe<Scalars['Boolean']>;
  isSubscribedByMail?: Maybe<Scalars['Boolean']>;
  unseenCount?: Maybe<Scalars['Int']>;
  isArchived?: Maybe<Scalars['Boolean']>;
  appRoleAssignments?: Maybe<Array<Maybe<GraphAppRoleAssignment>>>;
  appRoleAssignmentsById?: Maybe<GraphAppRoleAssignment>;
  createdOnBehalfOf?: Maybe<GraphDirectoryObject>;
  memberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  memberOfById?: Maybe<GraphDirectoryObject>;
  members?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  membersById?: Maybe<GraphDirectoryObject>;
  membersWithLicenseErrors?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  membersWithLicenseErrorsById?: Maybe<GraphDirectoryObject>;
  owners?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  ownersById?: Maybe<GraphDirectoryObject>;
  permissionGrants?: Maybe<Array<Maybe<GraphResourceSpecificPermissionGrant>>>;
  permissionGrantsById?: Maybe<GraphResourceSpecificPermissionGrant>;
  settings?: Maybe<Array<Maybe<GraphGroupSetting>>>;
  settingsById?: Maybe<GraphGroupSetting>;
  transitiveMemberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  transitiveMemberOfById?: Maybe<GraphDirectoryObject>;
  transitiveMembers?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  transitiveMembersById?: Maybe<GraphDirectoryObject>;
  acceptedSenders?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  acceptedSendersById?: Maybe<GraphDirectoryObject>;
  calendar?: Maybe<GraphCalendar>;
  calendarView?: Maybe<Array<Maybe<GraphEvent>>>;
  calendarViewById?: Maybe<GraphEvent>;
  conversations?: Maybe<Array<Maybe<GraphConversation>>>;
  conversationsById?: Maybe<GraphConversation>;
  events?: Maybe<Array<Maybe<GraphEvent>>>;
  eventsById?: Maybe<GraphEvent>;
  photo?: Maybe<GraphProfilePhoto>;
  photos?: Maybe<Array<Maybe<GraphProfilePhoto>>>;
  photosById?: Maybe<GraphProfilePhoto>;
  rejectedSenders?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  rejectedSendersById?: Maybe<GraphDirectoryObject>;
  threads?: Maybe<Array<Maybe<GraphConversationThread>>>;
  threadsById?: Maybe<GraphConversationThread>;
  drive?: Maybe<GraphDrive>;
  drives?: Maybe<Array<Maybe<GraphDrive>>>;
  drivesById?: Maybe<GraphDrive>;
  sites?: Maybe<Array<Maybe<GraphSite>>>;
  sitesById?: Maybe<GraphSite>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  groupLifecyclePolicies?: Maybe<Array<Maybe<GraphGroupLifecyclePolicy>>>;
  groupLifecyclePoliciesById?: Maybe<GraphGroupLifecyclePolicy>;
  planner?: Maybe<GraphPlannerGroup>;
  onenote?: Maybe<GraphOnenote>;
  team?: Maybe<GraphTeam>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphGroup>>>;
  assignLicense?: Maybe<Scalars['JSON']>;
  checkGrantedPermissionsForApp?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  addFavorite?: Maybe<Scalars['JSON']>;
  removeFavorite?: Maybe<Scalars['JSON']>;
  resetUnseenCount?: Maybe<Scalars['JSON']>;
  subscribeByMail?: Maybe<Scalars['JSON']>;
  unsubscribeByMail?: Maybe<Scalars['JSON']>;
  renew?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphGroupAppRoleAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupAppRoleAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupMembersWithLicenseErrorsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupMembersWithLicenseErrorsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupOwnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupOwnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupPermissionGrantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupPermissionGrantsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupSettingsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupSettingsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupTransitiveMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupTransitiveMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupTransitiveMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupTransitiveMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupAcceptedSendersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupAcceptedSendersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupCalendarViewArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupCalendarViewByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupConversationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupConversationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupEventsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupEventsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupPhotosArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupPhotosByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupRejectedSendersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupRejectedSendersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupThreadsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupThreadsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupDrivesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupDrivesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupSitesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupSitesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupGroupLifecyclePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphGroupGroupLifecyclePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphGroupAssignLicenseArgs = {
  bindingParameter: GraphGroupInput;
  addLicenses: Array<Maybe<GraphAssignedLicenseInput>>;
  removeLicenses: Array<Maybe<Scalars['GUID']>>;
};

export type GraphGroupCheckGrantedPermissionsForAppArgs = {
  bindingParameter: GraphGroupInput;
};

export type GraphGroupValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphGroupAddFavoriteArgs = {
  bindingParameter?: Maybe<GraphGroupInput>;
};

export type GraphGroupRemoveFavoriteArgs = {
  bindingParameter?: Maybe<GraphGroupInput>;
};

export type GraphGroupResetUnseenCountArgs = {
  bindingParameter?: Maybe<GraphGroupInput>;
};

export type GraphGroupSubscribeByMailArgs = {
  bindingParameter?: Maybe<GraphGroupInput>;
};

export type GraphGroupUnsubscribeByMailArgs = {
  bindingParameter?: Maybe<GraphGroupInput>;
};

export type GraphGroupRenewArgs = {
  bindingParameter?: Maybe<GraphGroupInput>;
};

export type GraphGroupCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphGroupCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphGroupGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphGroupGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphGroupRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphGroupGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphGroupGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphGroupAssignmentTarget = GraphDeviceAndAppManagementAssignmentTarget & {
  __typename?: 'GraphGroupAssignmentTarget';
  groupId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphGroupInput = {
  assignedLabels?: Maybe<Array<Maybe<GraphAssignedLabelInput>>>;
  assignedLicenses?: Maybe<Array<Maybe<GraphAssignedLicenseInput>>>;
  classification?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  groupTypes: Array<Maybe<Scalars['String']>>;
  hasMembersWithLicenseErrors?: Maybe<Scalars['Boolean']>;
  licenseProcessingState?: Maybe<GraphLicenseProcessingStateInput>;
  mail?: Maybe<Scalars['String']>;
  mailEnabled?: Maybe<Scalars['Boolean']>;
  mailNickname?: Maybe<Scalars['String']>;
  membershipRule?: Maybe<Scalars['String']>;
  membershipRuleProcessingState?: Maybe<Scalars['String']>;
  onPremisesDomainName?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesNetBiosName?: Maybe<Scalars['String']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningErrorInput>>>;
  onPremisesSamAccountName?: Maybe<Scalars['String']>;
  onPremisesSecurityIdentifier?: Maybe<Scalars['String']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  preferredDataLocation?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  proxyAddresses: Array<Maybe<Scalars['String']>>;
  renewedDateTime?: Maybe<Scalars['DateTime']>;
  securityEnabled?: Maybe<Scalars['Boolean']>;
  securityIdentifier?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  visibility?: Maybe<Scalars['String']>;
  allowExternalSenders?: Maybe<Scalars['Boolean']>;
  autoSubscribeNewMembers?: Maybe<Scalars['Boolean']>;
  hideFromAddressLists?: Maybe<Scalars['Boolean']>;
  hideFromOutlookClients?: Maybe<Scalars['Boolean']>;
  isSubscribedByMail?: Maybe<Scalars['Boolean']>;
  unseenCount?: Maybe<Scalars['Int']>;
  isArchived?: Maybe<Scalars['Boolean']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphGroupLifecyclePolicy = GraphEntity & {
  __typename?: 'GraphGroupLifecyclePolicy';
  alternateNotificationEmails?: Maybe<Scalars['String']>;
  groupLifetimeInDays?: Maybe<Scalars['Int']>;
  managedGroupTypes?: Maybe<Scalars['String']>;
  addGroup?: Maybe<Scalars['JSON']>;
  removeGroup?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphGroupLifecyclePolicyAddGroupArgs = {
  bindingParameter?: Maybe<GraphGroupLifecyclePolicyInput>;
  groupId: Scalars['String'];
};

export type GraphGroupLifecyclePolicyRemoveGroupArgs = {
  bindingParameter?: Maybe<GraphGroupLifecyclePolicyInput>;
  groupId: Scalars['String'];
};

export type GraphGroupLifecyclePolicyInput = {
  alternateNotificationEmails?: Maybe<Scalars['String']>;
  groupLifetimeInDays?: Maybe<Scalars['Int']>;
  managedGroupTypes?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphGroupLifecyclePolicyUpdateInput = {
  alternateNotificationEmails?: Maybe<Scalars['String']>;
  groupLifetimeInDays?: Maybe<Scalars['Int']>;
  managedGroupTypes?: Maybe<Scalars['String']>;
};

export type GraphGroupSetting = GraphEntity & {
  __typename?: 'GraphGroupSetting';
  displayName?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['String']>;
  values: Array<Maybe<GraphSettingValue>>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphGroupSettingInput = {
  displayName?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['String']>;
  values: Array<Maybe<GraphSettingValueInput>>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphGroupSettingTemplate = {
  __typename?: 'GraphGroupSettingTemplate';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  values: Array<Maybe<GraphSettingTemplateValue>>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphGroupSettingTemplateValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphGroupSettingTemplateCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphGroupSettingTemplateCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphGroupSettingTemplateGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphGroupSettingTemplateGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphGroupSettingTemplateRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphGroupSettingTemplateGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphGroupSettingTemplateGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphGroupSettingTemplateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  values: Array<Maybe<GraphSettingTemplateValueInput>>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphGroupSettingTemplateUpdateInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<GraphSettingTemplateValueInput>>>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphGroupSettingUpdateInput = {
  displayName?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<GraphSettingValueInput>>>;
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphGroupType {
  UnifiedGroups = 'unifiedGroups',
  AzureAd = 'azureAD',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphGroupUpdateInput = {
  assignedLabels?: Maybe<Array<Maybe<GraphAssignedLabelInput>>>;
  assignedLicenses?: Maybe<Array<Maybe<GraphAssignedLicenseInput>>>;
  classification?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  groupTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  hasMembersWithLicenseErrors?: Maybe<Scalars['Boolean']>;
  licenseProcessingState?: Maybe<GraphLicenseProcessingStateInput>;
  mail?: Maybe<Scalars['String']>;
  mailEnabled?: Maybe<Scalars['Boolean']>;
  mailNickname?: Maybe<Scalars['String']>;
  membershipRule?: Maybe<Scalars['String']>;
  membershipRuleProcessingState?: Maybe<Scalars['String']>;
  onPremisesDomainName?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesNetBiosName?: Maybe<Scalars['String']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningErrorInput>>>;
  onPremisesSamAccountName?: Maybe<Scalars['String']>;
  onPremisesSecurityIdentifier?: Maybe<Scalars['String']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  preferredDataLocation?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  proxyAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  renewedDateTime?: Maybe<Scalars['DateTime']>;
  securityEnabled?: Maybe<Scalars['Boolean']>;
  securityIdentifier?: Maybe<Scalars['String']>;
  theme?: Maybe<Scalars['String']>;
  visibility?: Maybe<Scalars['String']>;
  allowExternalSenders?: Maybe<Scalars['Boolean']>;
  autoSubscribeNewMembers?: Maybe<Scalars['Boolean']>;
  hideFromAddressLists?: Maybe<Scalars['Boolean']>;
  hideFromOutlookClients?: Maybe<Scalars['Boolean']>;
  isSubscribedByMail?: Maybe<Scalars['Boolean']>;
  unseenCount?: Maybe<Scalars['Int']>;
  isArchived?: Maybe<Scalars['Boolean']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphHashes = {
  __typename?: 'GraphHashes';
  crc32Hash?: Maybe<Scalars['String']>;
  quickXorHash?: Maybe<Scalars['String']>;
  sha1Hash?: Maybe<Scalars['String']>;
  sha256Hash?: Maybe<Scalars['String']>;
};

export type GraphHashesInput = {
  crc32Hash?: Maybe<Scalars['String']>;
  quickXorHash?: Maybe<Scalars['String']>;
  sha1Hash?: Maybe<Scalars['String']>;
  sha256Hash?: Maybe<Scalars['String']>;
};

export type GraphHomeRealmDiscoveryPolicy = GraphStsPolicy & {
  __typename?: 'GraphHomeRealmDiscoveryPolicy';
  rest?: Maybe<Scalars['JSON']>;
  definition: Array<Maybe<Scalars['String']>>;
  isOrganizationDefault?: Maybe<Scalars['Boolean']>;
  appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  appliesToById?: Maybe<GraphDirectoryObject>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphHomeRealmDiscoveryPolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphHomeRealmDiscoveryPolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphHomeRealmDiscoveryPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphHomeRealmDiscoveryPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphHomeRealmDiscoveryPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphHomeRealmDiscoveryPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphHomeRealmDiscoveryPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphHomeRealmDiscoveryPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphHomeRealmDiscoveryPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphHomeRealmDiscoveryPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphHostSecurityState = {
  __typename?: 'GraphHostSecurityState';
  fqdn?: Maybe<Scalars['String']>;
  isAzureAdJoined?: Maybe<Scalars['Boolean']>;
  isAzureAdRegistered?: Maybe<Scalars['Boolean']>;
  isHybridAzureDomainJoined?: Maybe<Scalars['Boolean']>;
  netBiosName?: Maybe<Scalars['String']>;
  os?: Maybe<Scalars['String']>;
  privateIpAddress?: Maybe<Scalars['String']>;
  publicIpAddress?: Maybe<Scalars['String']>;
  riskScore?: Maybe<Scalars['String']>;
};

export type GraphIPv4CidrRange = GraphIpRange & {
  __typename?: 'GraphIPv4CidrRange';
  cidrAddress: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIPv4Range = GraphIpRange & {
  __typename?: 'GraphIPv4Range';
  lowerAddress: Scalars['String'];
  upperAddress: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIPv6CidrRange = GraphIpRange & {
  __typename?: 'GraphIPv6CidrRange';
  cidrAddress: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIPv6Range = GraphIpRange & {
  __typename?: 'GraphIPv6Range';
  lowerAddress: Scalars['String'];
  upperAddress: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIdentity = {
  __typename?: 'GraphIdentity';
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIdentityApiConnector = GraphEntity & {
  __typename?: 'GraphIdentityApiConnector';
  authenticationConfiguration?: Maybe<GraphApiAuthenticationConfigurationBase>;
  displayName?: Maybe<Scalars['String']>;
  targetUrl?: Maybe<Scalars['String']>;
  uploadClientCertificate?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIdentityApiConnectorUploadClientCertificateArgs = {
  bindingParameter?: Maybe<GraphIdentityApiConnectorInput>;
  pkcs12Value?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
};

export type GraphIdentityApiConnectorInput = {
  authenticationConfiguration?: Maybe<GraphApiAuthenticationConfigurationBaseInput>;
  displayName?: Maybe<Scalars['String']>;
  targetUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphIdentityContainer = GraphEntity & {
  __typename?: 'GraphIdentityContainer';
  conditionalAccess?: Maybe<GraphConditionalAccessRoot>;
  apiConnectors?: Maybe<Array<Maybe<GraphIdentityApiConnector>>>;
  apiConnectorsById?: Maybe<GraphIdentityApiConnector>;
  b2xUserFlows?: Maybe<Array<Maybe<GraphB2xIdentityUserFlow>>>;
  b2xUserFlowsById?: Maybe<GraphB2xIdentityUserFlow>;
  identityProviders?: Maybe<Array<Maybe<GraphIdentityProviderBase>>>;
  identityProvidersById?: Maybe<GraphIdentityProviderBase>;
  userFlowAttributes?: Maybe<Array<Maybe<GraphIdentityUserFlowAttribute>>>;
  userFlowAttributesById?: Maybe<GraphIdentityUserFlowAttribute>;
  id: Scalars['String'];
};

export type GraphIdentityContainerApiConnectorsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIdentityContainerApiConnectorsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIdentityContainerB2xUserFlowsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIdentityContainerB2xUserFlowsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIdentityContainerIdentityProvidersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIdentityContainerIdentityProvidersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIdentityContainerUserFlowAttributesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIdentityContainerUserFlowAttributesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIdentityGovernance = {
  __typename?: 'GraphIdentityGovernance';
  accessReviews?: Maybe<GraphAccessReviewSet>;
  appConsent?: Maybe<GraphAppConsentApprovalRoute>;
  termsOfUse?: Maybe<GraphTermsOfUseContainer>;
};

export type GraphIdentityInput = {
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIdentityProvider = GraphEntity & {
  __typename?: 'GraphIdentityProvider';
  clientId?: Maybe<Scalars['String']>;
  clientSecret?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  availableProviderTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphIdentityProviderBase = {
  displayName?: Maybe<Scalars['String']>;
  availableProviderTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphIdentityProviderInput = {
  clientId?: Maybe<Scalars['String']>;
  clientSecret?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphIdentityProviderUpdateInput = {
  clientId?: Maybe<Scalars['String']>;
  clientSecret?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicy = GraphPolicyBase & {
  __typename?: 'GraphIdentitySecurityDefaultsEnforcementPolicy';
  isEnabled: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphIdentitySecurityDefaultsEnforcementPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphIdentitySet = {
  __typename?: 'GraphIdentitySet';
  application?: Maybe<GraphIdentity>;
  device?: Maybe<GraphIdentity>;
  user?: Maybe<GraphIdentity>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIdentitySetInput = {
  application?: Maybe<GraphIdentityInput>;
  device?: Maybe<GraphIdentityInput>;
  user?: Maybe<GraphIdentityInput>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIdentityUserFlow = GraphEntity & {
  __typename?: 'GraphIdentityUserFlow';
  userFlowType: GraphUserFlowType;
  userFlowTypeVersion: Scalars['Float'];
  id: Scalars['String'];
};

export type GraphIdentityUserFlowAttribute = GraphEntity & {
  __typename?: 'GraphIdentityUserFlowAttribute';
  dataType: GraphIdentityUserFlowAttributeDataType;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  userFlowAttributeType: GraphIdentityUserFlowAttributeType;
  id: Scalars['String'];
};

export type GraphIdentityUserFlowAttributeAssignment = GraphEntity & {
  __typename?: 'GraphIdentityUserFlowAttributeAssignment';
  displayName?: Maybe<Scalars['String']>;
  isOptional: Scalars['Boolean'];
  requiresVerification: Scalars['Boolean'];
  userAttributeValues?: Maybe<Array<Maybe<GraphUserAttributeValuesItem>>>;
  userInputType: GraphIdentityUserFlowAttributeInputType;
  userAttribute?: Maybe<GraphIdentityUserFlowAttribute>;
  getOrder?: Maybe<GraphAssignmentOrder>;
  setOrder?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIdentityUserFlowAttributeAssignmentSetOrderArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphIdentityUserFlowAttributeAssignmentInput>>>;
  newAssignmentOrder?: Maybe<GraphAssignmentOrderInput>;
};

export type GraphIdentityUserFlowAttributeAssignmentInput = {
  displayName?: Maybe<Scalars['String']>;
  isOptional: Scalars['Boolean'];
  requiresVerification: Scalars['Boolean'];
  userAttributeValues?: Maybe<Array<Maybe<GraphUserAttributeValuesItemInput>>>;
  userInputType: GraphIdentityUserFlowAttributeInputType;
  id: Scalars['String'];
};

export enum GraphIdentityUserFlowAttributeDataType {
  String = 'string',
  Boolean = 'boolean',
  Int64 = 'int64',
  StringCollection = 'stringCollection',
  DateTime = 'dateTime',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphIdentityUserFlowAttributeInputType {
  TextBox = 'textBox',
  DateTimeDropdown = 'dateTimeDropdown',
  RadioSingleSelect = 'radioSingleSelect',
  DropdownSingleSelect = 'dropdownSingleSelect',
  EmailBox = 'emailBox',
  CheckboxMultiSelect = 'checkboxMultiSelect',
}

export enum GraphIdentityUserFlowAttributeType {
  BuiltIn = 'builtIn',
  Custom = 'custom',
  Required = 'required',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphImage = {
  __typename?: 'GraphImage';
  height?: Maybe<Scalars['Int']>;
  width?: Maybe<Scalars['Int']>;
};

export type GraphImageInfo = {
  __typename?: 'GraphImageInfo';
  addImageQuery?: Maybe<Scalars['Boolean']>;
  alternateText?: Maybe<Scalars['String']>;
  alternativeText?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
};

export type GraphImageInput = {
  height?: Maybe<Scalars['Int']>;
  width?: Maybe<Scalars['Int']>;
};

export type GraphImplicitGrantSettings = {
  __typename?: 'GraphImplicitGrantSettings';
  enableAccessTokenIssuance?: Maybe<Scalars['Boolean']>;
  enableIdTokenIssuance?: Maybe<Scalars['Boolean']>;
};

export type GraphImplicitGrantSettingsInput = {
  enableAccessTokenIssuance?: Maybe<Scalars['Boolean']>;
  enableIdTokenIssuance?: Maybe<Scalars['Boolean']>;
};

export enum GraphImportance {
  Low = 'low',
  Normal = 'normal',
  High = 'high',
}

export type GraphImportedWindowsAutopilotDeviceIdentity = GraphEntity & {
  __typename?: 'GraphImportedWindowsAutopilotDeviceIdentity';
  assignedUserPrincipalName?: Maybe<Scalars['String']>;
  groupTag?: Maybe<Scalars['String']>;
  hardwareIdentifier?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  productKey?: Maybe<Scalars['String']>;
  serialNumber?: Maybe<Scalars['String']>;
  state?: Maybe<GraphImportedWindowsAutopilotDeviceIdentityState>;
  import?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphImportedWindowsAutopilotDeviceIdentityImportArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphImportedWindowsAutopilotDeviceIdentityInput>>>;
  importedWindowsAutopilotDeviceIdentities?: Maybe<Array<Maybe<GraphImportedWindowsAutopilotDeviceIdentityInput>>>;
};

export enum GraphImportedWindowsAutopilotDeviceIdentityImportStatus {
  Unknown = 'unknown',
  Pending = 'pending',
  Partial = 'partial',
  Complete = 'complete',
  Error = 'error',
}

export type GraphImportedWindowsAutopilotDeviceIdentityInput = {
  assignedUserPrincipalName?: Maybe<Scalars['String']>;
  groupTag?: Maybe<Scalars['String']>;
  hardwareIdentifier?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  productKey?: Maybe<Scalars['String']>;
  serialNumber?: Maybe<Scalars['String']>;
  state?: Maybe<GraphImportedWindowsAutopilotDeviceIdentityStateInput>;
  id: Scalars['String'];
};

export type GraphImportedWindowsAutopilotDeviceIdentityState = {
  __typename?: 'GraphImportedWindowsAutopilotDeviceIdentityState';
  deviceErrorCode: Scalars['Int'];
  deviceErrorName?: Maybe<Scalars['String']>;
  deviceImportStatus: GraphImportedWindowsAutopilotDeviceIdentityImportStatus;
  deviceRegistrationId?: Maybe<Scalars['String']>;
};

export type GraphImportedWindowsAutopilotDeviceIdentityStateInput = {
  deviceErrorCode: Scalars['Int'];
  deviceErrorName?: Maybe<Scalars['String']>;
  deviceImportStatus: GraphImportedWindowsAutopilotDeviceIdentityImportStatus;
  deviceRegistrationId?: Maybe<Scalars['String']>;
};

export type GraphImportedWindowsAutopilotDeviceIdentityUpload = GraphEntity & {
  __typename?: 'GraphImportedWindowsAutopilotDeviceIdentityUpload';
  createdDateTimeUtc: Scalars['DateTime'];
  status: GraphImportedWindowsAutopilotDeviceIdentityUploadStatus;
  deviceIdentities?: Maybe<Array<Maybe<GraphImportedWindowsAutopilotDeviceIdentity>>>;
  deviceIdentitiesById?: Maybe<GraphImportedWindowsAutopilotDeviceIdentity>;
  id: Scalars['String'];
};

export type GraphImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphImportedWindowsAutopilotDeviceIdentityUploadStatus {
  NoUpload = 'noUpload',
  Pending = 'pending',
  Complete = 'complete',
  Error = 'error',
}

export type GraphIncomingContext = {
  __typename?: 'GraphIncomingContext';
  observedParticipantId?: Maybe<Scalars['String']>;
  onBehalfOf?: Maybe<GraphIdentitySet>;
  sourceParticipantId?: Maybe<Scalars['String']>;
  transferor?: Maybe<GraphIdentitySet>;
};

export type GraphIncomingContextInput = {
  observedParticipantId?: Maybe<Scalars['String']>;
  onBehalfOf?: Maybe<GraphIdentitySetInput>;
  sourceParticipantId?: Maybe<Scalars['String']>;
  transferor?: Maybe<GraphIdentitySetInput>;
};

export type GraphIncompleteData = {
  __typename?: 'GraphIncompleteData';
  missingDataBeforeDateTime?: Maybe<Scalars['DateTime']>;
  wasThrottled?: Maybe<Scalars['Boolean']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphInferenceClassification = GraphEntity & {
  __typename?: 'GraphInferenceClassification';
  overrides?: Maybe<Array<Maybe<GraphInferenceClassificationOverride>>>;
  overridesById?: Maybe<GraphInferenceClassificationOverride>;
  id: Scalars['String'];
};

export type GraphInferenceClassificationOverridesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphInferenceClassificationOverridesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphInferenceClassificationOverride = GraphEntity & {
  __typename?: 'GraphInferenceClassificationOverride';
  classifyAs?: Maybe<GraphInferenceClassificationType>;
  senderEmailAddress?: Maybe<GraphEmailAddress>;
  id: Scalars['String'];
};

export enum GraphInferenceClassificationType {
  Focused = 'focused',
  Other = 'other',
}

export type GraphInformationProtection = GraphEntity & {
  __typename?: 'GraphInformationProtection';
  threatAssessmentRequests?: Maybe<Array<Maybe<GraphThreatAssessmentRequest>>>;
  threatAssessmentRequestsById?: Maybe<GraphThreatAssessmentRequest>;
  id: Scalars['String'];
};

export type GraphInformationProtectionThreatAssessmentRequestsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphInformationProtectionThreatAssessmentRequestsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphInformationalUrl = {
  __typename?: 'GraphInformationalUrl';
  logoUrl?: Maybe<Scalars['String']>;
  marketingUrl?: Maybe<Scalars['String']>;
  privacyStatementUrl?: Maybe<Scalars['String']>;
  supportUrl?: Maybe<Scalars['String']>;
  termsOfServiceUrl?: Maybe<Scalars['String']>;
};

export type GraphInformationalUrlInput = {
  logoUrl?: Maybe<Scalars['String']>;
  marketingUrl?: Maybe<Scalars['String']>;
  privacyStatementUrl?: Maybe<Scalars['String']>;
  supportUrl?: Maybe<Scalars['String']>;
  termsOfServiceUrl?: Maybe<Scalars['String']>;
};

export type GraphInitiator = {
  __typename?: 'GraphInitiator';
  initiatorType?: Maybe<GraphInitiatorType>;
  rest?: Maybe<Scalars['JSON']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export enum GraphInitiatorType {
  User = 'user',
  Application = 'application',
  System = 'system',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphInsightIdentity = {
  __typename?: 'GraphInsightIdentity';
  address?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export enum GraphInstallIntent {
  Available = 'available',
  Required = 'required',
  Uninstall = 'uninstall',
  AvailableWithoutEnrollment = 'availableWithoutEnrollment',
}

export enum GraphInstallState {
  NotApplicable = 'notApplicable',
  Installed = 'installed',
  Failed = 'failed',
  NotInstalled = 'notInstalled',
  UninstallFailed = 'uninstallFailed',
  Unknown = 'unknown',
}

export type GraphIntegerRange = {
  __typename?: 'GraphIntegerRange';
  end?: Maybe<Scalars['BigInt']>;
  start?: Maybe<Scalars['BigInt']>;
};

export type GraphIntegerRangeInput = {
  end?: Maybe<Scalars['BigInt']>;
  start?: Maybe<Scalars['BigInt']>;
};

export type GraphInternetMessageHeader = {
  __typename?: 'GraphInternetMessageHeader';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphInternetMessageHeaderInput = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export enum GraphInternetSiteSecurityLevel {
  UserDefined = 'userDefined',
  Medium = 'medium',
  MediumHigh = 'mediumHigh',
  High = 'high',
}

export type GraphIntuneBrand = {
  __typename?: 'GraphIntuneBrand';
  contactITEmailAddress?: Maybe<Scalars['String']>;
  contactITName?: Maybe<Scalars['String']>;
  contactITNotes?: Maybe<Scalars['String']>;
  contactITPhoneNumber?: Maybe<Scalars['String']>;
  darkBackgroundLogo?: Maybe<GraphMimeContent>;
  displayName?: Maybe<Scalars['String']>;
  lightBackgroundLogo?: Maybe<GraphMimeContent>;
  onlineSupportSiteName?: Maybe<Scalars['String']>;
  onlineSupportSiteUrl?: Maybe<Scalars['String']>;
  privacyUrl?: Maybe<Scalars['String']>;
  showDisplayNameNextToLogo: Scalars['Boolean'];
  showLogo: Scalars['Boolean'];
  showNameNextToLogo: Scalars['Boolean'];
  themeColor?: Maybe<GraphRgbColor>;
};

export type GraphInvestigationSecurityState = {
  __typename?: 'GraphInvestigationSecurityState';
  name?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type GraphInvitation = GraphEntity & {
  __typename?: 'GraphInvitation';
  invitedUserDisplayName?: Maybe<Scalars['String']>;
  invitedUserEmailAddress: Scalars['String'];
  invitedUserMessageInfo?: Maybe<GraphInvitedUserMessageInfo>;
  invitedUserType?: Maybe<Scalars['String']>;
  inviteRedeemUrl?: Maybe<Scalars['String']>;
  inviteRedirectUrl: Scalars['String'];
  sendInvitationMessage?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  invitedUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphInvitationInput = {
  invitedUserDisplayName?: Maybe<Scalars['String']>;
  invitedUserEmailAddress: Scalars['String'];
  invitedUserMessageInfo?: Maybe<GraphInvitedUserMessageInfoInput>;
  invitedUserType?: Maybe<Scalars['String']>;
  inviteRedeemUrl?: Maybe<Scalars['String']>;
  inviteRedirectUrl: Scalars['String'];
  sendInvitationMessage?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphInvitationParticipantInfo = {
  __typename?: 'GraphInvitationParticipantInfo';
  identity: GraphIdentitySet;
  replacesCallId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphInvitationParticipantInfoInput = {
  identity: GraphIdentitySetInput;
  replacesCallId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphInvitationUpdateInput = {
  invitedUserDisplayName?: Maybe<Scalars['String']>;
  invitedUserEmailAddress?: Maybe<Scalars['String']>;
  invitedUserMessageInfo?: Maybe<GraphInvitedUserMessageInfoInput>;
  invitedUserType?: Maybe<Scalars['String']>;
  inviteRedeemUrl?: Maybe<Scalars['String']>;
  inviteRedirectUrl?: Maybe<Scalars['String']>;
  sendInvitationMessage?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
};

export type GraphInvitedUserMessageInfo = {
  __typename?: 'GraphInvitedUserMessageInfo';
  ccRecipients?: Maybe<Array<Maybe<GraphRecipient>>>;
  customizedMessageBody?: Maybe<Scalars['String']>;
  messageLanguage?: Maybe<Scalars['String']>;
};

export type GraphInvitedUserMessageInfoInput = {
  ccRecipients?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  customizedMessageBody?: Maybe<Scalars['String']>;
  messageLanguage?: Maybe<Scalars['String']>;
};

export type GraphIosCertificateProfile = {
  rest?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosCertificateProfileAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCertificateProfileAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCertificateProfileDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCertificateProfileDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCertificateProfileDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCertificateProfileDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCertificateProfileUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCertificateProfileUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCertificateProfileAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphIosCompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphIosCompliancePolicy';
  deviceThreatProtectionEnabled: Scalars['Boolean'];
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel;
  managedEmailProfileRequired: Scalars['Boolean'];
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passcodeBlockSimple: Scalars['Boolean'];
  passcodeExpirationDays?: Maybe<Scalars['Int']>;
  passcodeMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passcodeMinimumLength?: Maybe<Scalars['Int']>;
  passcodeMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passcodePreviousPasscodeBlockCount?: Maybe<Scalars['Int']>;
  passcodeRequired: Scalars['Boolean'];
  passcodeRequiredType: GraphRequiredPasswordType;
  securityBlockJailbrokenDevices: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosCompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphIosCompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphIosCustomConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphIosCustomConfiguration';
  payload: Scalars['String'];
  payloadFileName?: Maybe<Scalars['String']>;
  payloadName: Scalars['String'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosCustomConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCustomConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCustomConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCustomConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCustomConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCustomConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCustomConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosCustomConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosCustomConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphIosDeviceFeaturesConfiguration = GraphAppleDeviceFeaturesConfigurationBase & {
  __typename?: 'GraphIosDeviceFeaturesConfiguration';
  assetTagTemplate?: Maybe<Scalars['String']>;
  homeScreenDockIcons?: Maybe<Array<Maybe<GraphIosHomeScreenItem>>>;
  homeScreenPages?: Maybe<Array<Maybe<GraphIosHomeScreenPage>>>;
  lockScreenFootnote?: Maybe<Scalars['String']>;
  notificationSettings?: Maybe<Array<Maybe<GraphIosNotificationSettings>>>;
  rest?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosDeviceFeaturesConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosDeviceFeaturesConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosDeviceFeaturesConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosDeviceFeaturesConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosDeviceFeaturesConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosDeviceFeaturesConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosDeviceFeaturesConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosDeviceFeaturesConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosDeviceFeaturesConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphIosDeviceType = {
  __typename?: 'GraphIosDeviceType';
  iPad: Scalars['Boolean'];
  iPhoneAndIPod: Scalars['Boolean'];
};

export type GraphIosGeneralDeviceConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphIosGeneralDeviceConfiguration';
  accountBlockModification: Scalars['Boolean'];
  activationLockAllowWhenSupervised: Scalars['Boolean'];
  airDropBlocked: Scalars['Boolean'];
  airDropForceUnmanagedDropTarget: Scalars['Boolean'];
  airPlayForcePairingPasswordForOutgoingRequests: Scalars['Boolean'];
  appleNewsBlocked: Scalars['Boolean'];
  appleWatchBlockPairing: Scalars['Boolean'];
  appleWatchForceWristDetection: Scalars['Boolean'];
  appsSingleAppModeList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  appStoreBlockAutomaticDownloads: Scalars['Boolean'];
  appStoreBlocked: Scalars['Boolean'];
  appStoreBlockInAppPurchases: Scalars['Boolean'];
  appStoreBlockUIAppInstallation: Scalars['Boolean'];
  appStoreRequirePassword: Scalars['Boolean'];
  appsVisibilityList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  appsVisibilityListType: GraphAppListType;
  bluetoothBlockModification: Scalars['Boolean'];
  cameraBlocked: Scalars['Boolean'];
  cellularBlockDataRoaming: Scalars['Boolean'];
  cellularBlockGlobalBackgroundFetchWhileRoaming: Scalars['Boolean'];
  cellularBlockPerAppDataModification: Scalars['Boolean'];
  cellularBlockPersonalHotspot: Scalars['Boolean'];
  cellularBlockVoiceRoaming: Scalars['Boolean'];
  certificatesBlockUntrustedTlsCertificates: Scalars['Boolean'];
  classroomAppBlockRemoteScreenObservation: Scalars['Boolean'];
  classroomAppForceUnpromptedScreenObservation: Scalars['Boolean'];
  compliantAppListType: GraphAppListType;
  compliantAppsList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  configurationProfileBlockChanges: Scalars['Boolean'];
  definitionLookupBlocked: Scalars['Boolean'];
  deviceBlockEnableRestrictions: Scalars['Boolean'];
  deviceBlockEraseContentAndSettings: Scalars['Boolean'];
  deviceBlockNameModification: Scalars['Boolean'];
  diagnosticDataBlockSubmission: Scalars['Boolean'];
  diagnosticDataBlockSubmissionModification: Scalars['Boolean'];
  documentsBlockManagedDocumentsInUnmanagedApps: Scalars['Boolean'];
  documentsBlockUnmanagedDocumentsInManagedApps: Scalars['Boolean'];
  emailInDomainSuffixes?: Maybe<Array<Maybe<Scalars['String']>>>;
  enterpriseAppBlockTrust: Scalars['Boolean'];
  enterpriseAppBlockTrustModification: Scalars['Boolean'];
  faceTimeBlocked: Scalars['Boolean'];
  findMyFriendsBlocked: Scalars['Boolean'];
  gameCenterBlocked: Scalars['Boolean'];
  gamingBlockGameCenterFriends: Scalars['Boolean'];
  gamingBlockMultiplayer: Scalars['Boolean'];
  hostPairingBlocked: Scalars['Boolean'];
  iBooksStoreBlocked: Scalars['Boolean'];
  iBooksStoreBlockErotica: Scalars['Boolean'];
  iCloudBlockActivityContinuation: Scalars['Boolean'];
  iCloudBlockBackup: Scalars['Boolean'];
  iCloudBlockDocumentSync: Scalars['Boolean'];
  iCloudBlockManagedAppsSync: Scalars['Boolean'];
  iCloudBlockPhotoLibrary: Scalars['Boolean'];
  iCloudBlockPhotoStreamSync: Scalars['Boolean'];
  iCloudBlockSharedPhotoStream: Scalars['Boolean'];
  iCloudRequireEncryptedBackup: Scalars['Boolean'];
  iTunesBlockExplicitContent: Scalars['Boolean'];
  iTunesBlockMusicService: Scalars['Boolean'];
  iTunesBlockRadio: Scalars['Boolean'];
  keyboardBlockAutoCorrect: Scalars['Boolean'];
  keyboardBlockDictation: Scalars['Boolean'];
  keyboardBlockPredictive: Scalars['Boolean'];
  keyboardBlockShortcuts: Scalars['Boolean'];
  keyboardBlockSpellCheck: Scalars['Boolean'];
  kioskModeAllowAssistiveSpeak: Scalars['Boolean'];
  kioskModeAllowAssistiveTouchSettings: Scalars['Boolean'];
  kioskModeAllowAutoLock: Scalars['Boolean'];
  kioskModeAllowColorInversionSettings: Scalars['Boolean'];
  kioskModeAllowRingerSwitch: Scalars['Boolean'];
  kioskModeAllowScreenRotation: Scalars['Boolean'];
  kioskModeAllowSleepButton: Scalars['Boolean'];
  kioskModeAllowTouchscreen: Scalars['Boolean'];
  kioskModeAllowVoiceOverSettings: Scalars['Boolean'];
  kioskModeAllowVolumeButtons: Scalars['Boolean'];
  kioskModeAllowZoomSettings: Scalars['Boolean'];
  kioskModeAppStoreUrl?: Maybe<Scalars['String']>;
  kioskModeBuiltInAppId?: Maybe<Scalars['String']>;
  kioskModeManagedAppId?: Maybe<Scalars['String']>;
  kioskModeRequireAssistiveTouch: Scalars['Boolean'];
  kioskModeRequireColorInversion: Scalars['Boolean'];
  kioskModeRequireMonoAudio: Scalars['Boolean'];
  kioskModeRequireVoiceOver: Scalars['Boolean'];
  kioskModeRequireZoom: Scalars['Boolean'];
  lockScreenBlockControlCenter: Scalars['Boolean'];
  lockScreenBlockNotificationView: Scalars['Boolean'];
  lockScreenBlockPassbook: Scalars['Boolean'];
  lockScreenBlockTodayView: Scalars['Boolean'];
  mediaContentRatingApps: GraphRatingAppsType;
  mediaContentRatingAustralia?: Maybe<GraphMediaContentRatingAustralia>;
  mediaContentRatingCanada?: Maybe<GraphMediaContentRatingCanada>;
  mediaContentRatingFrance?: Maybe<GraphMediaContentRatingFrance>;
  mediaContentRatingGermany?: Maybe<GraphMediaContentRatingGermany>;
  mediaContentRatingIreland?: Maybe<GraphMediaContentRatingIreland>;
  mediaContentRatingJapan?: Maybe<GraphMediaContentRatingJapan>;
  mediaContentRatingNewZealand?: Maybe<GraphMediaContentRatingNewZealand>;
  mediaContentRatingUnitedKingdom?: Maybe<GraphMediaContentRatingUnitedKingdom>;
  mediaContentRatingUnitedStates?: Maybe<GraphMediaContentRatingUnitedStates>;
  messagesBlocked: Scalars['Boolean'];
  networkUsageRules?: Maybe<Array<Maybe<GraphIosNetworkUsageRule>>>;
  notificationsBlockSettingsModification: Scalars['Boolean'];
  passcodeBlockFingerprintModification: Scalars['Boolean'];
  passcodeBlockFingerprintUnlock: Scalars['Boolean'];
  passcodeBlockModification: Scalars['Boolean'];
  passcodeBlockSimple: Scalars['Boolean'];
  passcodeExpirationDays?: Maybe<Scalars['Int']>;
  passcodeMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passcodeMinimumLength?: Maybe<Scalars['Int']>;
  passcodeMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passcodeMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  passcodePreviousPasscodeBlockCount?: Maybe<Scalars['Int']>;
  passcodeRequired: Scalars['Boolean'];
  passcodeRequiredType: GraphRequiredPasswordType;
  passcodeSignInFailureCountBeforeWipe?: Maybe<Scalars['Int']>;
  podcastsBlocked: Scalars['Boolean'];
  safariBlockAutofill: Scalars['Boolean'];
  safariBlocked: Scalars['Boolean'];
  safariBlockJavaScript: Scalars['Boolean'];
  safariBlockPopups: Scalars['Boolean'];
  safariCookieSettings: GraphWebBrowserCookieSettings;
  safariManagedDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  safariPasswordAutoFillDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  safariRequireFraudWarning: Scalars['Boolean'];
  screenCaptureBlocked: Scalars['Boolean'];
  siriBlocked: Scalars['Boolean'];
  siriBlockedWhenLocked: Scalars['Boolean'];
  siriBlockUserGeneratedContent: Scalars['Boolean'];
  siriRequireProfanityFilter: Scalars['Boolean'];
  spotlightBlockInternetResults: Scalars['Boolean'];
  voiceDialingBlocked: Scalars['Boolean'];
  wallpaperBlockModification: Scalars['Boolean'];
  wiFiConnectOnlyToConfiguredNetworks: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosGeneralDeviceConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosGeneralDeviceConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosGeneralDeviceConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosGeneralDeviceConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosGeneralDeviceConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosGeneralDeviceConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosGeneralDeviceConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosGeneralDeviceConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosGeneralDeviceConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphIosHomeScreenApp = GraphIosHomeScreenItem & {
  __typename?: 'GraphIosHomeScreenApp';
  bundleID: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
};

export type GraphIosHomeScreenFolder = GraphIosHomeScreenItem & {
  __typename?: 'GraphIosHomeScreenFolder';
  pages: Array<Maybe<GraphIosHomeScreenFolderPage>>;
  displayName?: Maybe<Scalars['String']>;
};

export type GraphIosHomeScreenFolderPage = {
  __typename?: 'GraphIosHomeScreenFolderPage';
  apps: Array<Maybe<GraphIosHomeScreenApp>>;
  displayName?: Maybe<Scalars['String']>;
};

export type GraphIosHomeScreenItem = {
  displayName?: Maybe<Scalars['String']>;
};

export type GraphIosHomeScreenPage = {
  __typename?: 'GraphIosHomeScreenPage';
  displayName?: Maybe<Scalars['String']>;
  icons: Array<Maybe<GraphIosHomeScreenItem>>;
};

export type GraphIosLobApp = GraphMobileLobApp & {
  __typename?: 'GraphIosLobApp';
  applicableDeviceType: GraphIosDeviceType;
  buildNumber?: Maybe<Scalars['String']>;
  bundleId?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  minimumSupportedOperatingSystem?: Maybe<GraphIosMinimumOperatingSystem>;
  versionNumber?: Maybe<Scalars['String']>;
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphIosLobAppAssignmentSettings = GraphMobileAppAssignmentSettings & {
  __typename?: 'GraphIosLobAppAssignmentSettings';
  vpnConfigurationId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIosManagedAppProtection = GraphTargetedManagedAppProtection & {
  __typename?: 'GraphIosManagedAppProtection';
  appDataEncryptionType: GraphManagedAppDataEncryptionType;
  customBrowserProtocol?: Maybe<Scalars['String']>;
  deployedAppCount: Scalars['Int'];
  faceIdBlocked: Scalars['Boolean'];
  minimumRequiredSdkVersion?: Maybe<Scalars['String']>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileApp>>>;
  appsById?: Maybe<GraphManagedMobileApp>;
  deploymentSummary?: Maybe<GraphManagedAppPolicyDeploymentSummary>;
  isAssigned: Scalars['Boolean'];
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
  assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
  assign?: Maybe<Scalars['JSON']>;
  allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
  contactSyncBlocked: Scalars['Boolean'];
  dataBackupBlocked: Scalars['Boolean'];
  deviceComplianceRequired: Scalars['Boolean'];
  disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
  fingerprintBlocked: Scalars['Boolean'];
  managedBrowser: GraphManagedBrowserType;
  managedBrowserToOpenLinksRequired: Scalars['Boolean'];
  maximumPinRetries: Scalars['Int'];
  minimumPinLength: Scalars['Int'];
  minimumRequiredAppVersion?: Maybe<Scalars['String']>;
  minimumRequiredOsVersion?: Maybe<Scalars['String']>;
  minimumWarningAppVersion?: Maybe<Scalars['String']>;
  minimumWarningOsVersion?: Maybe<Scalars['String']>;
  organizationalCredentialsRequired: Scalars['Boolean'];
  periodBeforePinReset: Scalars['ISO8601Duration'];
  periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
  periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
  periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
  pinCharacterSet: GraphManagedAppPinCharacterSet;
  pinRequired: Scalars['Boolean'];
  printBlocked: Scalars['Boolean'];
  saveAsBlocked: Scalars['Boolean'];
  simplePinBlocked: Scalars['Boolean'];
  targetApps?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphIosManagedAppProtectionAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosManagedAppProtectionAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosManagedAppProtectionAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosManagedAppProtectionAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosManagedAppProtectionAssignArgs = {
  bindingParameter?: Maybe<GraphTargetedManagedAppProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type GraphIosManagedAppProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphIosManagedAppRegistration = GraphManagedAppRegistration & {
  __typename?: 'GraphIosManagedAppRegistration';
  rest?: Maybe<Scalars['JSON']>;
  appIdentifier?: Maybe<GraphMobileAppIdentifier>;
  applicationVersion?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  deviceName?: Maybe<Scalars['String']>;
  deviceTag?: Maybe<Scalars['String']>;
  deviceType?: Maybe<Scalars['String']>;
  flaggedReasons: Array<Maybe<GraphManagedAppFlaggedReason>>;
  lastSyncDateTime: Scalars['DateTime'];
  managementSdkVersion?: Maybe<Scalars['String']>;
  platformVersion?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  appliedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  appliedPoliciesById?: Maybe<GraphManagedAppPolicy>;
  intendedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  intendedPoliciesById?: Maybe<GraphManagedAppPolicy>;
  operations?: Maybe<Array<Maybe<GraphManagedAppOperation>>>;
  operationsById?: Maybe<GraphManagedAppOperation>;
  getUserIdsWithFlaggedAppRegistration?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphIosManagedAppRegistrationAppliedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosManagedAppRegistrationAppliedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosManagedAppRegistrationIntendedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosManagedAppRegistrationIntendedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosManagedAppRegistrationOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosManagedAppRegistrationOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosMinimumOperatingSystem = {
  __typename?: 'GraphIosMinimumOperatingSystem';
  v10_0: Scalars['Boolean'];
  v11_0: Scalars['Boolean'];
  v12_0: Scalars['Boolean'];
  v13_0: Scalars['Boolean'];
  v8_0: Scalars['Boolean'];
  v9_0: Scalars['Boolean'];
};

export type GraphIosMobileAppConfiguration = GraphManagedDeviceMobileAppConfiguration & {
  __typename?: 'GraphIosMobileAppConfiguration';
  encodedSettingXml?: Maybe<Scalars['String']>;
  settings?: Maybe<Array<Maybe<GraphAppConfigurationSettingItem>>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  targetedMobileApps?: Maybe<Array<Maybe<Scalars['String']>>>;
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphManagedDeviceMobileAppConfigurationAssignment>;
  deviceStatuses?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphManagedDeviceMobileAppConfigurationDeviceStatus>;
  deviceStatusSummary?: Maybe<GraphManagedDeviceMobileAppConfigurationDeviceSummary>;
  userStatuses?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphManagedDeviceMobileAppConfigurationUserStatus>;
  userStatusSummary?: Maybe<GraphManagedDeviceMobileAppConfigurationUserSummary>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosMobileAppConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosMobileAppConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosMobileAppConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosMobileAppConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosMobileAppConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosMobileAppConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosMobileAppConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceMobileAppConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationAssignmentInput>>>;
};

export type GraphIosMobileAppIdentifier = GraphMobileAppIdentifier & {
  __typename?: 'GraphIosMobileAppIdentifier';
  bundleId: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIosNetworkUsageRule = {
  __typename?: 'GraphIosNetworkUsageRule';
  cellularDataBlocked: Scalars['Boolean'];
  cellularDataBlockWhenRoaming: Scalars['Boolean'];
  managedApps?: Maybe<Array<Maybe<GraphAppListItem>>>;
};

export enum GraphIosNotificationAlertType {
  DeviceDefault = 'deviceDefault',
  Banner = 'banner',
  Modal = 'modal',
  None = 'none',
}

export type GraphIosNotificationSettings = {
  __typename?: 'GraphIosNotificationSettings';
  alertType: GraphIosNotificationAlertType;
  appName?: Maybe<Scalars['String']>;
  badgesEnabled?: Maybe<Scalars['Boolean']>;
  bundleID: Scalars['String'];
  enabled?: Maybe<Scalars['Boolean']>;
  publisher?: Maybe<Scalars['String']>;
  showInNotificationCenter?: Maybe<Scalars['Boolean']>;
  showOnLockScreen?: Maybe<Scalars['Boolean']>;
  soundsEnabled?: Maybe<Scalars['Boolean']>;
};

export type GraphIosStoreApp = GraphMobileApp & {
  __typename?: 'GraphIosStoreApp';
  applicableDeviceType: GraphIosDeviceType;
  appStoreUrl?: Maybe<Scalars['String']>;
  bundleId?: Maybe<Scalars['String']>;
  minimumSupportedOperatingSystem?: Maybe<GraphIosMinimumOperatingSystem>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosStoreAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosStoreAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosStoreAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosStoreAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosStoreAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphIosStoreAppAssignmentSettings = GraphMobileAppAssignmentSettings & {
  __typename?: 'GraphIosStoreAppAssignmentSettings';
  vpnConfigurationId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIosUpdateConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphIosUpdateConfiguration';
  activeHoursEnd: Scalars['String'];
  activeHoursStart: Scalars['String'];
  scheduledInstallDays: Array<Maybe<GraphDayOfWeek>>;
  utcTimeOffsetInMinutes?: Maybe<Scalars['Int']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosUpdateConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosUpdateConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosUpdateConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosUpdateConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosUpdateConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosUpdateConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosUpdateConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosUpdateConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosUpdateConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphIosUpdateDeviceStatus = GraphEntity & {
  __typename?: 'GraphIosUpdateDeviceStatus';
  complianceGracePeriodExpirationDateTime: Scalars['DateTime'];
  deviceDisplayName?: Maybe<Scalars['String']>;
  deviceId?: Maybe<Scalars['String']>;
  deviceModel?: Maybe<Scalars['String']>;
  installStatus: GraphIosUpdatesInstallStatus;
  lastReportedDateTime: Scalars['DateTime'];
  osVersion?: Maybe<Scalars['String']>;
  status: GraphComplianceStatus;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphIosUpdatesInstallStatus {
  DeviceOsHigherThanDesiredOsVersion = 'deviceOsHigherThanDesiredOsVersion',
  SharedDeviceUserLoggedInError = 'sharedDeviceUserLoggedInError',
  NotSupportedOperation = 'notSupportedOperation',
  InstallFailed = 'installFailed',
  InstallPhoneCallInProgress = 'installPhoneCallInProgress',
  InstallInsufficientPower = 'installInsufficientPower',
  InstallInsufficientSpace = 'installInsufficientSpace',
  Installing = 'installing',
  DownloadInsufficientNetwork = 'downloadInsufficientNetwork',
  DownloadInsufficientPower = 'downloadInsufficientPower',
  DownloadInsufficientSpace = 'downloadInsufficientSpace',
  DownloadRequiresComputer = 'downloadRequiresComputer',
  DownloadFailed = 'downloadFailed',
  Downloading = 'downloading',
  Success = 'success',
  Available = 'available',
  Idle = 'idle',
  Unknown = 'unknown',
}

export type GraphIosVppApp = GraphMobileApp & {
  __typename?: 'GraphIosVppApp';
  applicableDeviceType?: Maybe<GraphIosDeviceType>;
  appStoreUrl?: Maybe<Scalars['String']>;
  bundleId?: Maybe<Scalars['String']>;
  licensingType?: Maybe<GraphVppLicensingType>;
  releaseDateTime?: Maybe<Scalars['DateTime']>;
  totalLicenseCount: Scalars['Int'];
  usedLicenseCount: Scalars['Int'];
  vppTokenAccountType: GraphVppTokenAccountType;
  vppTokenAppleId?: Maybe<Scalars['String']>;
  vppTokenOrganizationName?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosVppAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosVppAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosVppAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosVppAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosVppAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphIosVppAppAssignmentSettings = GraphMobileAppAssignmentSettings & {
  __typename?: 'GraphIosVppAppAssignmentSettings';
  useDeviceLicensing: Scalars['Boolean'];
  vpnConfigurationId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIosVppEBook = GraphManagedEBook & {
  __typename?: 'GraphIosVppEBook';
  appleId?: Maybe<Scalars['String']>;
  genres?: Maybe<Array<Maybe<Scalars['String']>>>;
  language?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
  totalLicenseCount: Scalars['Int'];
  usedLicenseCount: Scalars['Int'];
  vppOrganizationName?: Maybe<Scalars['String']>;
  vppTokenId: Scalars['GUID'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  informationUrl?: Maybe<Scalars['String']>;
  largeCover?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publishedDateTime: Scalars['DateTime'];
  publisher?: Maybe<Scalars['String']>;
  assignments?: Maybe<Array<Maybe<GraphManagedEBookAssignment>>>;
  assignmentsById?: Maybe<GraphManagedEBookAssignment>;
  deviceStates?: Maybe<Array<Maybe<GraphDeviceInstallState>>>;
  deviceStatesById?: Maybe<GraphDeviceInstallState>;
  installSummary?: Maybe<GraphEBookInstallSummary>;
  userStateSummary?: Maybe<Array<Maybe<GraphUserInstallStateSummary>>>;
  userStateSummaryById?: Maybe<GraphUserInstallStateSummary>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphIosVppEBookAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosVppEBookAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosVppEBookDeviceStatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosVppEBookDeviceStatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosVppEBookUserStateSummaryArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphIosVppEBookUserStateSummaryByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphIosVppEBookAssignArgs = {
  bindingParameter?: Maybe<GraphManagedEBookInput>;
  managedEBookAssignments?: Maybe<Array<Maybe<GraphManagedEBookAssignmentInput>>>;
};

export type GraphIpRange = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphIpRangeInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphItemActionStat = {
  __typename?: 'GraphItemActionStat';
  actionCount?: Maybe<Scalars['Int']>;
  actorCount?: Maybe<Scalars['Int']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphItemActivity = GraphEntity & {
  __typename?: 'GraphItemActivity';
  access?: Maybe<GraphAccessAction>;
  activityDateTime?: Maybe<Scalars['DateTime']>;
  actor?: Maybe<GraphIdentitySet>;
  driveItem?: Maybe<GraphDriveItem>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphItemActivityStat = GraphEntity & {
  __typename?: 'GraphItemActivityStat';
  access?: Maybe<GraphItemActionStat>;
  create?: Maybe<GraphItemActionStat>;
  delete?: Maybe<GraphItemActionStat>;
  edit?: Maybe<GraphItemActionStat>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  incompleteData?: Maybe<GraphIncompleteData>;
  isTrending?: Maybe<Scalars['Boolean']>;
  move?: Maybe<GraphItemActionStat>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  activities?: Maybe<Array<Maybe<GraphItemActivity>>>;
  activitiesById?: Maybe<GraphItemActivity>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphItemActivityStatActivitiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphItemActivityStatActivitiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphItemAnalytics = GraphEntity & {
  __typename?: 'GraphItemAnalytics';
  allTime?: Maybe<GraphItemActivityStat>;
  itemActivityStats?: Maybe<Array<Maybe<GraphItemActivityStat>>>;
  itemActivityStatsById?: Maybe<GraphItemActivityStat>;
  lastSevenDays?: Maybe<GraphItemActivityStat>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphItemAnalyticsItemActivityStatsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphItemAnalyticsItemActivityStatsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphItemAttachment = GraphAttachment & {
  __typename?: 'GraphItemAttachment';
  item?: Maybe<GraphOutlookItem>;
  contentType?: Maybe<Scalars['String']>;
  isInline: Scalars['Boolean'];
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  size: Scalars['Int'];
  createUploadSession?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphItemAttachmentCreateUploadSessionArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphAttachmentInput>>>;
  AttachmentItem: GraphAttachmentItemInput;
};

export type GraphItemBody = {
  __typename?: 'GraphItemBody';
  content?: Maybe<Scalars['String']>;
  contentType?: Maybe<GraphBodyType>;
};

export type GraphItemBodyInput = {
  content?: Maybe<Scalars['String']>;
  contentType?: Maybe<GraphBodyType>;
};

export type GraphItemReference = {
  __typename?: 'GraphItemReference';
  driveId?: Maybe<Scalars['String']>;
  driveType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  shareId?: Maybe<Scalars['String']>;
  sharepointIds?: Maybe<GraphSharepointIds>;
  siteId?: Maybe<Scalars['String']>;
};

export type GraphItemReferenceInput = {
  driveId?: Maybe<Scalars['String']>;
  driveType?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  shareId?: Maybe<Scalars['String']>;
  sharepointIds?: Maybe<GraphSharepointIdsInput>;
  siteId?: Maybe<Scalars['String']>;
};

export type GraphJson = {
  __typename?: 'GraphJson';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphJsonInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphKeyCredential = {
  __typename?: 'GraphKeyCredential';
  customKeyIdentifier?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  key?: Maybe<Scalars['String']>;
  keyId?: Maybe<Scalars['GUID']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  type?: Maybe<Scalars['String']>;
  usage?: Maybe<Scalars['String']>;
};

export type GraphKeyCredentialInput = {
  customKeyIdentifier?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  key?: Maybe<Scalars['String']>;
  keyId?: Maybe<Scalars['GUID']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  type?: Maybe<Scalars['String']>;
  usage?: Maybe<Scalars['String']>;
};

export type GraphKeyValue = {
  __typename?: 'GraphKeyValue';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphKeyValueInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphKeyValuePair = {
  __typename?: 'GraphKeyValuePair';
  name: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

export type GraphKeyValuePairInput = {
  name: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

export type GraphLicenseAssignmentState = {
  __typename?: 'GraphLicenseAssignmentState';
  assignedByGroup?: Maybe<Scalars['String']>;
  disabledPlans?: Maybe<Array<Maybe<Scalars['GUID']>>>;
  error?: Maybe<Scalars['String']>;
  skuId?: Maybe<Scalars['GUID']>;
  state?: Maybe<Scalars['String']>;
};

export type GraphLicenseAssignmentStateInput = {
  assignedByGroup?: Maybe<Scalars['String']>;
  disabledPlans?: Maybe<Array<Maybe<Scalars['GUID']>>>;
  error?: Maybe<Scalars['String']>;
  skuId?: Maybe<Scalars['GUID']>;
  state?: Maybe<Scalars['String']>;
};

export type GraphLicenseDetails = GraphEntity & {
  __typename?: 'GraphLicenseDetails';
  servicePlans: Array<Maybe<GraphServicePlanInfo>>;
  skuId?: Maybe<Scalars['GUID']>;
  skuPartNumber?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphLicenseProcessingState = {
  __typename?: 'GraphLicenseProcessingState';
  state?: Maybe<Scalars['String']>;
};

export type GraphLicenseProcessingStateInput = {
  state?: Maybe<Scalars['String']>;
};

export type GraphLicenseUnitsDetail = {
  __typename?: 'GraphLicenseUnitsDetail';
  enabled?: Maybe<Scalars['Int']>;
  suspended?: Maybe<Scalars['Int']>;
  warning?: Maybe<Scalars['Int']>;
};

export type GraphLicenseUnitsDetailInput = {
  enabled?: Maybe<Scalars['Int']>;
  suspended?: Maybe<Scalars['Int']>;
  warning?: Maybe<Scalars['Int']>;
};

export type GraphLinkedResource = GraphEntity & {
  __typename?: 'GraphLinkedResource';
  applicationName?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  externalId?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphList = GraphBaseItem & {
  __typename?: 'GraphList';
  displayName?: Maybe<Scalars['String']>;
  list?: Maybe<GraphListInfo>;
  sharepointIds?: Maybe<GraphSharepointIds>;
  system?: Maybe<GraphSystemFacet>;
  columns?: Maybe<Array<Maybe<GraphColumnDefinition>>>;
  columnsById?: Maybe<GraphColumnDefinition>;
  contentTypes?: Maybe<Array<Maybe<GraphContentType>>>;
  contentTypesById?: Maybe<GraphContentType>;
  drive?: Maybe<GraphDrive>;
  items?: Maybe<Array<Maybe<GraphListItem>>>;
  itemsById?: Maybe<GraphListItem>;
  subscriptions?: Maybe<Array<Maybe<GraphSubscription>>>;
  subscriptionsById?: Maybe<GraphSubscription>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReference>;
  webUrl?: Maybe<Scalars['String']>;
  createdByUser?: Maybe<GraphUser>;
  lastModifiedByUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphListColumnsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphListColumnsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphListContentTypesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphListContentTypesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphListItemsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphListItemsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphListSubscriptionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphListSubscriptionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphListInfo = {
  __typename?: 'GraphListInfo';
  contentTypesEnabled?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
};

export type GraphListItem = GraphBaseItem & {
  __typename?: 'GraphListItem';
  contentType?: Maybe<GraphContentTypeInfo>;
  sharepointIds?: Maybe<GraphSharepointIds>;
  analytics?: Maybe<GraphItemAnalytics>;
  driveItem?: Maybe<GraphDriveItem>;
  fields?: Maybe<GraphFieldValueSet>;
  versions?: Maybe<Array<Maybe<GraphListItemVersion>>>;
  versionsById?: Maybe<GraphListItemVersion>;
  getActivitiesByInterval?: Maybe<Array<Maybe<GraphItemActivityStat>>>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReference>;
  webUrl?: Maybe<Scalars['String']>;
  createdByUser?: Maybe<GraphUser>;
  lastModifiedByUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphListItemVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphListItemVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphListItemVersion = GraphBaseItemVersion & {
  __typename?: 'GraphListItemVersion';
  fields?: Maybe<GraphFieldValueSet>;
  restoreVersion?: Maybe<Scalars['JSON']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  publication?: Maybe<GraphPublicationFacet>;
  id: Scalars['String'];
};

export type GraphListItemVersionRestoreVersionArgs = {
  bindingParameter?: Maybe<GraphListItemVersionInput>;
};

export type GraphListItemVersionInput = {
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  publication?: Maybe<GraphPublicationFacetInput>;
  id: Scalars['String'];
};

export enum GraphLobbyBypassScope {
  Organizer = 'organizer',
  Organization = 'organization',
  OrganizationAndFederated = 'organizationAndFederated',
  Everyone = 'everyone',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphLobbyBypassSettings = {
  __typename?: 'GraphLobbyBypassSettings';
  isDialInBypassEnabled?: Maybe<Scalars['Boolean']>;
  scope?: Maybe<GraphLobbyBypassScope>;
};

export type GraphLobbyBypassSettingsInput = {
  isDialInBypassEnabled?: Maybe<Scalars['Boolean']>;
  scope?: Maybe<GraphLobbyBypassScope>;
};

export type GraphLocaleInfo = {
  __typename?: 'GraphLocaleInfo';
  displayName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
};

export type GraphLocaleInfoInput = {
  displayName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
};

export type GraphLocalizedNotificationMessage = GraphEntity & {
  __typename?: 'GraphLocalizedNotificationMessage';
  isDefault: Scalars['Boolean'];
  lastModifiedDateTime: Scalars['DateTime'];
  locale: Scalars['String'];
  messageTemplate: Scalars['String'];
  subject: Scalars['String'];
  id: Scalars['String'];
};

export type GraphLocation = {
  __typename?: 'GraphLocation';
  address?: Maybe<GraphPhysicalAddress>;
  coordinates?: Maybe<GraphOutlookGeoCoordinates>;
  displayName?: Maybe<Scalars['String']>;
  locationEmailAddress?: Maybe<Scalars['String']>;
  locationType?: Maybe<GraphLocationType>;
  locationUri?: Maybe<Scalars['String']>;
  uniqueId?: Maybe<Scalars['String']>;
  uniqueIdType?: Maybe<GraphLocationUniqueIdType>;
};

export type GraphLocationConstraintInput = {
  isRequired?: Maybe<Scalars['Boolean']>;
  locations?: Maybe<Array<Maybe<GraphLocationConstraintItemInput>>>;
  suggestLocation?: Maybe<Scalars['Boolean']>;
};

export type GraphLocationConstraintItemInput = {
  resolveAvailability?: Maybe<Scalars['Boolean']>;
  address?: Maybe<GraphPhysicalAddressInput>;
  coordinates?: Maybe<GraphOutlookGeoCoordinatesInput>;
  displayName?: Maybe<Scalars['String']>;
  locationEmailAddress?: Maybe<Scalars['String']>;
  locationType?: Maybe<GraphLocationType>;
  locationUri?: Maybe<Scalars['String']>;
  uniqueId?: Maybe<Scalars['String']>;
  uniqueIdType?: Maybe<GraphLocationUniqueIdType>;
};

export type GraphLocationInput = {
  address?: Maybe<GraphPhysicalAddressInput>;
  coordinates?: Maybe<GraphOutlookGeoCoordinatesInput>;
  displayName?: Maybe<Scalars['String']>;
  locationEmailAddress?: Maybe<Scalars['String']>;
  locationType?: Maybe<GraphLocationType>;
  locationUri?: Maybe<Scalars['String']>;
  uniqueId?: Maybe<Scalars['String']>;
  uniqueIdType?: Maybe<GraphLocationUniqueIdType>;
};

export enum GraphLocationType {
  Default = 'default',
  ConferenceRoom = 'conferenceRoom',
  HomeAddress = 'homeAddress',
  BusinessAddress = 'businessAddress',
  GeoCoordinates = 'geoCoordinates',
  StreetAddress = 'streetAddress',
  Hotel = 'hotel',
  Restaurant = 'restaurant',
  LocalBusiness = 'localBusiness',
  PostalAddress = 'postalAddress',
}

export enum GraphLocationUniqueIdType {
  Unknown = 'unknown',
  LocationStore = 'locationStore',
  Directory = 'directory',
  Private = 'private',
  Bing = 'bing',
}

export enum GraphLogonType {
  Unknown = 'unknown',
  Interactive = 'interactive',
  RemoteInteractive = 'remoteInteractive',
  Network = 'network',
  Batch = 'batch',
  Service = 'service',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphLookupColumn = {
  __typename?: 'GraphLookupColumn';
  allowMultipleValues?: Maybe<Scalars['Boolean']>;
  allowUnlimitedLength?: Maybe<Scalars['Boolean']>;
  columnName?: Maybe<Scalars['String']>;
  listId?: Maybe<Scalars['String']>;
  primaryLookupColumnId?: Maybe<Scalars['String']>;
};

export type GraphMacOsCompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphMacOsCompliancePolicy';
  deviceThreatProtectionEnabled: Scalars['Boolean'];
  deviceThreatProtectionRequiredSecurityLevel: GraphDeviceThreatProtectionLevel;
  firewallBlockAllIncoming: Scalars['Boolean'];
  firewallEnabled: Scalars['Boolean'];
  firewallEnableStealthMode: Scalars['Boolean'];
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  storageRequireEncryption: Scalars['Boolean'];
  systemIntegrityProtectionEnabled: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMacOsCompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphMacOsCompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphMacOsCustomConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphMacOsCustomConfiguration';
  payload: Scalars['String'];
  payloadFileName?: Maybe<Scalars['String']>;
  payloadName: Scalars['String'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMacOsCustomConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCustomConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCustomConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCustomConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCustomConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCustomConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCustomConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsCustomConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsCustomConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphMacOsDeviceFeaturesConfiguration = GraphAppleDeviceFeaturesConfigurationBase & {
  __typename?: 'GraphMacOsDeviceFeaturesConfiguration';
  rest?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMacOsDeviceFeaturesConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsDeviceFeaturesConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsDeviceFeaturesConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsDeviceFeaturesConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsDeviceFeaturesConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsDeviceFeaturesConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsDeviceFeaturesConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsDeviceFeaturesConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsDeviceFeaturesConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphMacOsGeneralDeviceConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphMacOsGeneralDeviceConfiguration';
  compliantAppListType: GraphAppListType;
  compliantAppsList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  emailInDomainSuffixes?: Maybe<Array<Maybe<Scalars['String']>>>;
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMacOsGeneralDeviceConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsGeneralDeviceConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsGeneralDeviceConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsGeneralDeviceConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsGeneralDeviceConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsGeneralDeviceConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsGeneralDeviceConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsGeneralDeviceConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsGeneralDeviceConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphMacOsOfficeSuiteApp = GraphMobileApp & {
  __typename?: 'GraphMacOsOfficeSuiteApp';
  rest?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMacOsOfficeSuiteAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsOfficeSuiteAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsOfficeSuiteAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMacOsOfficeSuiteAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMacOsOfficeSuiteAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphMailAssessmentRequest = GraphThreatAssessmentRequest & {
  __typename?: 'GraphMailAssessmentRequest';
  destinationRoutingReason?: Maybe<GraphMailDestinationRoutingReason>;
  messageUri: Scalars['String'];
  recipientEmail: Scalars['String'];
  category: GraphThreatCategory;
  contentType?: Maybe<GraphThreatAssessmentContentType>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  expectedAssessment: GraphThreatExpectedAssessment;
  requestSource?: Maybe<GraphThreatAssessmentRequestSource>;
  status?: Maybe<GraphThreatAssessmentStatus>;
  results?: Maybe<Array<Maybe<GraphThreatAssessmentResult>>>;
  resultsById?: Maybe<GraphThreatAssessmentResult>;
  id: Scalars['String'];
};

export type GraphMailAssessmentRequestResultsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMailAssessmentRequestResultsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphMailDestinationRoutingReason {
  None = 'none',
  MailFlowRule = 'mailFlowRule',
  SafeSender = 'safeSender',
  BlockedSender = 'blockedSender',
  AdvancedSpamFiltering = 'advancedSpamFiltering',
  DomainAllowList = 'domainAllowList',
  DomainBlockList = 'domainBlockList',
  NotInAddressBook = 'notInAddressBook',
  FirstTimeSender = 'firstTimeSender',
  AutoPurgeToInbox = 'autoPurgeToInbox',
  AutoPurgeToJunk = 'autoPurgeToJunk',
  AutoPurgeToDeleted = 'autoPurgeToDeleted',
  Outbound = 'outbound',
  NotJunk = 'notJunk',
  Junk = 'junk',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphMailFolder = GraphEntity & {
  __typename?: 'GraphMailFolder';
  childFolderCount?: Maybe<Scalars['Int']>;
  displayName?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  parentFolderId?: Maybe<Scalars['String']>;
  totalItemCount?: Maybe<Scalars['Int']>;
  unreadItemCount?: Maybe<Scalars['Int']>;
  childFolders?: Maybe<Array<Maybe<GraphMailFolder>>>;
  childFoldersById?: Maybe<GraphMailFolder>;
  messageRules?: Maybe<Array<Maybe<GraphMessageRule>>>;
  messageRulesById?: Maybe<GraphMessageRule>;
  messages?: Maybe<Array<Maybe<GraphMessage>>>;
  messagesById?: Maybe<GraphMessage>;
  multiValueExtendedProperties?: Maybe<Array<Maybe<GraphMultiValueLegacyExtendedProperty>>>;
  multiValueExtendedPropertiesById?: Maybe<GraphMultiValueLegacyExtendedProperty>;
  singleValueExtendedProperties?: Maybe<Array<Maybe<GraphSingleValueLegacyExtendedProperty>>>;
  singleValueExtendedPropertiesById?: Maybe<GraphSingleValueLegacyExtendedProperty>;
  delta?: Maybe<Array<Maybe<GraphMailFolder>>>;
  copy?: Maybe<Scalars['JSON']>;
  move?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMailFolderChildFoldersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMailFolderChildFoldersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMailFolderMessageRulesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMailFolderMessageRulesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMailFolderMessagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMailFolderMessagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMailFolderMultiValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMailFolderMultiValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMailFolderSingleValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMailFolderSingleValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMailFolderCopyArgs = {
  bindingParameter?: Maybe<GraphMailFolderInput>;
  DestinationId: Scalars['String'];
};

export type GraphMailFolderMoveArgs = {
  bindingParameter?: Maybe<GraphMailFolderInput>;
  DestinationId: Scalars['String'];
};

export type GraphMailFolderInput = {
  childFolderCount?: Maybe<Scalars['Int']>;
  displayName?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  parentFolderId?: Maybe<Scalars['String']>;
  totalItemCount?: Maybe<Scalars['Int']>;
  unreadItemCount?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
};

export enum GraphMailTipsType {
  AutomaticReplies = 'automaticReplies',
  MailboxFullStatus = 'mailboxFullStatus',
  CustomMailTip = 'customMailTip',
  ExternalMemberCount = 'externalMemberCount',
  TotalMemberCount = 'totalMemberCount',
  MaxMessageSize = 'maxMessageSize',
  DeliveryRestriction = 'deliveryRestriction',
  ModerationStatus = 'moderationStatus',
  RecipientScope = 'recipientScope',
  RecipientSuggestions = 'recipientSuggestions',
}

export type GraphMailboxSettings = {
  __typename?: 'GraphMailboxSettings';
  archiveFolder?: Maybe<Scalars['String']>;
  automaticRepliesSetting?: Maybe<GraphAutomaticRepliesSetting>;
  dateFormat?: Maybe<Scalars['String']>;
  delegateMeetingMessageDeliveryOptions?: Maybe<GraphDelegateMeetingMessageDeliveryOptions>;
  language?: Maybe<GraphLocaleInfo>;
  timeFormat?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  workingHours?: Maybe<GraphWorkingHours>;
};

export type GraphMailboxSettingsInput = {
  archiveFolder?: Maybe<Scalars['String']>;
  automaticRepliesSetting?: Maybe<GraphAutomaticRepliesSettingInput>;
  dateFormat?: Maybe<Scalars['String']>;
  delegateMeetingMessageDeliveryOptions?: Maybe<GraphDelegateMeetingMessageDeliveryOptions>;
  language?: Maybe<GraphLocaleInfoInput>;
  timeFormat?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  workingHours?: Maybe<GraphWorkingHoursInput>;
};

export type GraphMalwareState = {
  __typename?: 'GraphMalwareState';
  category?: Maybe<Scalars['String']>;
  family?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  severity?: Maybe<Scalars['String']>;
  wasRunning?: Maybe<Scalars['Boolean']>;
};

export type GraphManagedAndroidLobApp = GraphManagedMobileLobApp & {
  __typename?: 'GraphManagedAndroidLobApp';
  minimumSupportedOperatingSystem?: Maybe<GraphAndroidMinimumOperatingSystem>;
  packageId?: Maybe<Scalars['String']>;
  versionCode?: Maybe<Scalars['String']>;
  versionName?: Maybe<Scalars['String']>;
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  appAvailability: GraphManagedAppAvailability;
  version?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedAndroidLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAndroidLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAndroidLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAndroidLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAndroidLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAndroidLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAndroidLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphManagedAndroidStoreApp = GraphManagedApp & {
  __typename?: 'GraphManagedAndroidStoreApp';
  appStoreUrl: Scalars['String'];
  minimumSupportedOperatingSystem: GraphAndroidMinimumOperatingSystem;
  packageId?: Maybe<Scalars['String']>;
  appAvailability: GraphManagedAppAvailability;
  version?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedAndroidStoreAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAndroidStoreAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAndroidStoreAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAndroidStoreAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAndroidStoreAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphManagedApp = {
  appAvailability: GraphManagedAppAvailability;
  version?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export enum GraphManagedAppAvailability {
  Global = 'global',
  LineOfBusiness = 'lineOfBusiness',
}

export enum GraphManagedAppClipboardSharingLevel {
  AllApps = 'allApps',
  ManagedAppsWithPasteIn = 'managedAppsWithPasteIn',
  ManagedApps = 'managedApps',
  Blocked = 'blocked',
}

export type GraphManagedAppConfiguration = {
  customSettings: Array<Maybe<GraphKeyValuePair>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  targetApps?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedAppConfigurationTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export enum GraphManagedAppDataEncryptionType {
  UseDeviceSettings = 'useDeviceSettings',
  AfterDeviceRestart = 'afterDeviceRestart',
  WhenDeviceLockedExceptOpenFiles = 'whenDeviceLockedExceptOpenFiles',
  WhenDeviceLocked = 'whenDeviceLocked',
}

export enum GraphManagedAppDataStorageLocation {
  OneDriveForBusiness = 'oneDriveForBusiness',
  SharePoint = 'sharePoint',
  LocalStorage = 'localStorage',
}

export enum GraphManagedAppDataTransferLevel {
  AllApps = 'allApps',
  ManagedApps = 'managedApps',
  None = 'none',
}

export type GraphManagedAppDiagnosticStatus = {
  __typename?: 'GraphManagedAppDiagnosticStatus';
  mitigationInstruction?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  validationName?: Maybe<Scalars['String']>;
};

export enum GraphManagedAppFlaggedReason {
  None = 'none',
  RootedDevice = 'rootedDevice',
}

export type GraphManagedAppOperation = GraphEntity & {
  __typename?: 'GraphManagedAppOperation';
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  state?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphManagedAppPinCharacterSet {
  Numeric = 'numeric',
  AlphanumericAndSymbol = 'alphanumericAndSymbol',
}

export type GraphManagedAppPolicy = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  targetApps?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedAppPolicyTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphManagedAppPolicyDeploymentSummary = GraphEntity & {
  __typename?: 'GraphManagedAppPolicyDeploymentSummary';
  configurationDeployedUserCount: Scalars['Int'];
  configurationDeploymentSummaryPerApp?: Maybe<Array<Maybe<GraphManagedAppPolicyDeploymentSummaryPerApp>>>;
  displayName?: Maybe<Scalars['String']>;
  lastRefreshTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedAppPolicyDeploymentSummaryPerApp = {
  __typename?: 'GraphManagedAppPolicyDeploymentSummaryPerApp';
  configurationAppliedUserCount: Scalars['Int'];
  mobileAppIdentifier?: Maybe<GraphMobileAppIdentifier>;
};

export type GraphManagedAppPolicyInput = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedAppProtection = {
  allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
  contactSyncBlocked: Scalars['Boolean'];
  dataBackupBlocked: Scalars['Boolean'];
  deviceComplianceRequired: Scalars['Boolean'];
  disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
  fingerprintBlocked: Scalars['Boolean'];
  managedBrowser: GraphManagedBrowserType;
  managedBrowserToOpenLinksRequired: Scalars['Boolean'];
  maximumPinRetries: Scalars['Int'];
  minimumPinLength: Scalars['Int'];
  minimumRequiredAppVersion?: Maybe<Scalars['String']>;
  minimumRequiredOsVersion?: Maybe<Scalars['String']>;
  minimumWarningAppVersion?: Maybe<Scalars['String']>;
  minimumWarningOsVersion?: Maybe<Scalars['String']>;
  organizationalCredentialsRequired: Scalars['Boolean'];
  periodBeforePinReset: Scalars['ISO8601Duration'];
  periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
  periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
  periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
  pinCharacterSet: GraphManagedAppPinCharacterSet;
  pinRequired: Scalars['Boolean'];
  printBlocked: Scalars['Boolean'];
  saveAsBlocked: Scalars['Boolean'];
  simplePinBlocked: Scalars['Boolean'];
  targetApps?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedAppProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphManagedAppRegistration = {
  appIdentifier?: Maybe<GraphMobileAppIdentifier>;
  applicationVersion?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  deviceName?: Maybe<Scalars['String']>;
  deviceTag?: Maybe<Scalars['String']>;
  deviceType?: Maybe<Scalars['String']>;
  flaggedReasons: Array<Maybe<GraphManagedAppFlaggedReason>>;
  lastSyncDateTime: Scalars['DateTime'];
  managementSdkVersion?: Maybe<Scalars['String']>;
  platformVersion?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  appliedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  appliedPoliciesById?: Maybe<GraphManagedAppPolicy>;
  intendedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  intendedPoliciesById?: Maybe<GraphManagedAppPolicy>;
  operations?: Maybe<Array<Maybe<GraphManagedAppOperation>>>;
  operationsById?: Maybe<GraphManagedAppOperation>;
  getUserIdsWithFlaggedAppRegistration?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphManagedAppRegistrationAppliedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAppRegistrationAppliedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAppRegistrationIntendedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAppRegistrationIntendedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAppRegistrationOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedAppRegistrationOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedAppStatus = {
  displayName?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedAppStatusRaw = GraphManagedAppStatus & {
  __typename?: 'GraphManagedAppStatusRaw';
  content?: Maybe<GraphJson>;
  displayName?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphManagedBrowserType {
  NotConfigured = 'notConfigured',
  MicrosoftEdge = 'microsoftEdge',
}

export type GraphManagedDevice = GraphEntity & {
  __typename?: 'GraphManagedDevice';
  activationLockBypassCode?: Maybe<Scalars['String']>;
  androidSecurityPatchLevel?: Maybe<Scalars['String']>;
  azureADDeviceId?: Maybe<Scalars['String']>;
  azureADRegistered?: Maybe<Scalars['Boolean']>;
  complianceGracePeriodExpirationDateTime: Scalars['DateTime'];
  complianceState: GraphComplianceState;
  configurationManagerClientEnabledFeatures?: Maybe<GraphConfigurationManagerClientEnabledFeatures>;
  deviceActionResults?: Maybe<Array<Maybe<GraphDeviceActionResult>>>;
  deviceCategoryDisplayName?: Maybe<Scalars['String']>;
  deviceEnrollmentType: GraphDeviceEnrollmentType;
  deviceHealthAttestationState?: Maybe<GraphDeviceHealthAttestationState>;
  deviceName?: Maybe<Scalars['String']>;
  deviceRegistrationState: GraphDeviceRegistrationState;
  easActivated: Scalars['Boolean'];
  easActivationDateTime: Scalars['DateTime'];
  easDeviceId?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  enrolledDateTime: Scalars['DateTime'];
  exchangeAccessState: GraphDeviceManagementExchangeAccessState;
  exchangeAccessStateReason: GraphDeviceManagementExchangeAccessStateReason;
  exchangeLastSuccessfulSyncDateTime: Scalars['DateTime'];
  freeStorageSpaceInBytes: Scalars['BigInt'];
  imei?: Maybe<Scalars['String']>;
  isEncrypted: Scalars['Boolean'];
  isSupervised: Scalars['Boolean'];
  jailBroken?: Maybe<Scalars['String']>;
  lastSyncDateTime: Scalars['DateTime'];
  managedDeviceName?: Maybe<Scalars['String']>;
  managedDeviceOwnerType: GraphManagedDeviceOwnerType;
  managementAgent: GraphManagementAgentType;
  manufacturer?: Maybe<Scalars['String']>;
  meid?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  operatingSystem?: Maybe<Scalars['String']>;
  osVersion?: Maybe<Scalars['String']>;
  partnerReportedThreatState: GraphManagedDevicePartnerReportedHealthState;
  phoneNumber?: Maybe<Scalars['String']>;
  remoteAssistanceSessionErrorDetails?: Maybe<Scalars['String']>;
  remoteAssistanceSessionUrl?: Maybe<Scalars['String']>;
  serialNumber?: Maybe<Scalars['String']>;
  subscriberCarrier?: Maybe<Scalars['String']>;
  totalStorageSpaceInBytes: Scalars['BigInt'];
  userDisplayName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  wiFiMacAddress?: Maybe<Scalars['String']>;
  deviceCompliancePolicyStates?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyState>>>;
  deviceCompliancePolicyStatesById?: Maybe<GraphDeviceCompliancePolicyState>;
  deviceConfigurationStates?: Maybe<Array<Maybe<GraphDeviceConfigurationState>>>;
  deviceConfigurationStatesById?: Maybe<GraphDeviceConfigurationState>;
  deviceCategory?: Maybe<GraphDeviceCategory>;
  bypassActivationLock?: Maybe<Scalars['JSON']>;
  cleanWindowsDevice?: Maybe<Scalars['JSON']>;
  deleteUserFromSharedAppleDevice?: Maybe<Scalars['JSON']>;
  disableLostMode?: Maybe<Scalars['JSON']>;
  locateDevice?: Maybe<Scalars['JSON']>;
  logoutSharedAppleDeviceActiveUser?: Maybe<Scalars['JSON']>;
  rebootNow?: Maybe<Scalars['JSON']>;
  recoverPasscode?: Maybe<Scalars['JSON']>;
  remoteLock?: Maybe<Scalars['JSON']>;
  requestRemoteAssistance?: Maybe<Scalars['JSON']>;
  resetPasscode?: Maybe<Scalars['JSON']>;
  retire?: Maybe<Scalars['JSON']>;
  shutDown?: Maybe<Scalars['JSON']>;
  syncDevice?: Maybe<Scalars['JSON']>;
  updateWindowsDeviceAccount?: Maybe<Scalars['JSON']>;
  windowsDefenderScan?: Maybe<Scalars['JSON']>;
  windowsDefenderUpdateSignatures?: Maybe<Scalars['JSON']>;
  wipe?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedDeviceDeviceCompliancePolicyStatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedDeviceDeviceCompliancePolicyStatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedDeviceDeviceConfigurationStatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedDeviceDeviceConfigurationStatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedDeviceBypassActivationLockArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceCleanWindowsDeviceArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
  keepUserData: Scalars['Boolean'];
};

export type GraphManagedDeviceDeleteUserFromSharedAppleDeviceArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
  userPrincipalName?: Maybe<Scalars['String']>;
};

export type GraphManagedDeviceDisableLostModeArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceLocateDeviceArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceLogoutSharedAppleDeviceActiveUserArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceRebootNowArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceRecoverPasscodeArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceRemoteLockArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceRequestRemoteAssistanceArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceResetPasscodeArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceRetireArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceShutDownArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceSyncDeviceArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceUpdateWindowsDeviceAccountArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
  updateWindowsDeviceAccountActionParameter?: Maybe<GraphUpdateWindowsDeviceAccountActionParameterInput>;
};

export type GraphManagedDeviceWindowsDefenderScanArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
  quickScan: Scalars['Boolean'];
};

export type GraphManagedDeviceWindowsDefenderUpdateSignaturesArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
};

export type GraphManagedDeviceWipeArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceInput>;
  keepEnrollmentData?: Maybe<Scalars['Boolean']>;
  keepUserData?: Maybe<Scalars['Boolean']>;
  macOsUnlockCode?: Maybe<Scalars['String']>;
};

export type GraphManagedDeviceInput = {
  activationLockBypassCode?: Maybe<Scalars['String']>;
  androidSecurityPatchLevel?: Maybe<Scalars['String']>;
  azureADDeviceId?: Maybe<Scalars['String']>;
  azureADRegistered?: Maybe<Scalars['Boolean']>;
  complianceGracePeriodExpirationDateTime: Scalars['DateTime'];
  complianceState: GraphComplianceState;
  configurationManagerClientEnabledFeatures?: Maybe<GraphConfigurationManagerClientEnabledFeaturesInput>;
  deviceActionResults?: Maybe<Array<Maybe<GraphDeviceActionResultInput>>>;
  deviceCategoryDisplayName?: Maybe<Scalars['String']>;
  deviceEnrollmentType: GraphDeviceEnrollmentType;
  deviceHealthAttestationState?: Maybe<GraphDeviceHealthAttestationStateInput>;
  deviceName?: Maybe<Scalars['String']>;
  deviceRegistrationState: GraphDeviceRegistrationState;
  easActivated: Scalars['Boolean'];
  easActivationDateTime: Scalars['DateTime'];
  easDeviceId?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  enrolledDateTime: Scalars['DateTime'];
  exchangeAccessState: GraphDeviceManagementExchangeAccessState;
  exchangeAccessStateReason: GraphDeviceManagementExchangeAccessStateReason;
  exchangeLastSuccessfulSyncDateTime: Scalars['DateTime'];
  freeStorageSpaceInBytes: Scalars['BigInt'];
  imei?: Maybe<Scalars['String']>;
  isEncrypted: Scalars['Boolean'];
  isSupervised: Scalars['Boolean'];
  jailBroken?: Maybe<Scalars['String']>;
  lastSyncDateTime: Scalars['DateTime'];
  managedDeviceName?: Maybe<Scalars['String']>;
  managedDeviceOwnerType: GraphManagedDeviceOwnerType;
  managementAgent: GraphManagementAgentType;
  manufacturer?: Maybe<Scalars['String']>;
  meid?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  operatingSystem?: Maybe<Scalars['String']>;
  osVersion?: Maybe<Scalars['String']>;
  partnerReportedThreatState: GraphManagedDevicePartnerReportedHealthState;
  phoneNumber?: Maybe<Scalars['String']>;
  remoteAssistanceSessionErrorDetails?: Maybe<Scalars['String']>;
  remoteAssistanceSessionUrl?: Maybe<Scalars['String']>;
  serialNumber?: Maybe<Scalars['String']>;
  subscriberCarrier?: Maybe<Scalars['String']>;
  totalStorageSpaceInBytes: Scalars['BigInt'];
  userDisplayName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  wiFiMacAddress?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfiguration = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  targetedMobileApps?: Maybe<Array<Maybe<Scalars['String']>>>;
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphManagedDeviceMobileAppConfigurationAssignment>;
  deviceStatuses?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphManagedDeviceMobileAppConfigurationDeviceStatus>;
  deviceStatusSummary?: Maybe<GraphManagedDeviceMobileAppConfigurationDeviceSummary>;
  userStatuses?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphManagedDeviceMobileAppConfigurationUserStatus>;
  userStatusSummary?: Maybe<GraphManagedDeviceMobileAppConfigurationUserSummary>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedDeviceMobileAppConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedDeviceMobileAppConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedDeviceMobileAppConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedDeviceMobileAppConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedDeviceMobileAppConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedDeviceMobileAppConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceMobileAppConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationAssignmentInput>>>;
};

export type GraphManagedDeviceMobileAppConfigurationAssignment = GraphEntity & {
  __typename?: 'GraphManagedDeviceMobileAppConfigurationAssignment';
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfigurationAssignmentInput = {
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTargetInput>;
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfigurationDeviceStatus = GraphEntity & {
  __typename?: 'GraphManagedDeviceMobileAppConfigurationDeviceStatus';
  complianceGracePeriodExpirationDateTime: Scalars['DateTime'];
  deviceDisplayName?: Maybe<Scalars['String']>;
  deviceModel?: Maybe<Scalars['String']>;
  lastReportedDateTime: Scalars['DateTime'];
  status: GraphComplianceStatus;
  userName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfigurationDeviceSummary = GraphEntity & {
  __typename?: 'GraphManagedDeviceMobileAppConfigurationDeviceSummary';
  configurationVersion: Scalars['Int'];
  errorCount: Scalars['Int'];
  failedCount: Scalars['Int'];
  lastUpdateDateTime: Scalars['DateTime'];
  notApplicableCount: Scalars['Int'];
  pendingCount: Scalars['Int'];
  successCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfigurationInput = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  targetedMobileApps?: Maybe<Array<Maybe<Scalars['String']>>>;
  version: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfigurationUserStatus = GraphEntity & {
  __typename?: 'GraphManagedDeviceMobileAppConfigurationUserStatus';
  devicesCount: Scalars['Int'];
  lastReportedDateTime: Scalars['DateTime'];
  status: GraphComplianceStatus;
  userDisplayName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedDeviceMobileAppConfigurationUserSummary = GraphEntity & {
  __typename?: 'GraphManagedDeviceMobileAppConfigurationUserSummary';
  configurationVersion: Scalars['Int'];
  errorCount: Scalars['Int'];
  failedCount: Scalars['Int'];
  lastUpdateDateTime: Scalars['DateTime'];
  notApplicableCount: Scalars['Int'];
  pendingCount: Scalars['Int'];
  successCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphManagedDeviceOverview = GraphEntity & {
  __typename?: 'GraphManagedDeviceOverview';
  deviceExchangeAccessStateSummary?: Maybe<GraphDeviceExchangeAccessStateSummary>;
  deviceOperatingSystemSummary?: Maybe<GraphDeviceOperatingSystemSummary>;
  dualEnrolledDeviceCount: Scalars['Int'];
  enrolledDeviceCount: Scalars['Int'];
  mdmEnrolledCount: Scalars['Int'];
  id: Scalars['String'];
};

export enum GraphManagedDeviceOwnerType {
  Unknown = 'unknown',
  Company = 'company',
  Personal = 'personal',
}

export enum GraphManagedDevicePartnerReportedHealthState {
  Unknown = 'unknown',
  Activated = 'activated',
  Deactivated = 'deactivated',
  Secured = 'secured',
  LowSeverity = 'lowSeverity',
  MediumSeverity = 'mediumSeverity',
  HighSeverity = 'highSeverity',
  Unresponsive = 'unresponsive',
  Compromised = 'compromised',
  Misconfigured = 'misconfigured',
}

export type GraphManagedEBook = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  informationUrl?: Maybe<Scalars['String']>;
  largeCover?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publishedDateTime: Scalars['DateTime'];
  publisher?: Maybe<Scalars['String']>;
  assignments?: Maybe<Array<Maybe<GraphManagedEBookAssignment>>>;
  assignmentsById?: Maybe<GraphManagedEBookAssignment>;
  deviceStates?: Maybe<Array<Maybe<GraphDeviceInstallState>>>;
  deviceStatesById?: Maybe<GraphDeviceInstallState>;
  installSummary?: Maybe<GraphEBookInstallSummary>;
  userStateSummary?: Maybe<Array<Maybe<GraphUserInstallStateSummary>>>;
  userStateSummaryById?: Maybe<GraphUserInstallStateSummary>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedEBookAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedEBookAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedEBookDeviceStatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedEBookDeviceStatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedEBookUserStateSummaryArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedEBookUserStateSummaryByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedEBookAssignArgs = {
  bindingParameter?: Maybe<GraphManagedEBookInput>;
  managedEBookAssignments?: Maybe<Array<Maybe<GraphManagedEBookAssignmentInput>>>;
};

export type GraphManagedEBookAssignment = GraphEntity & {
  __typename?: 'GraphManagedEBookAssignment';
  installIntent: GraphInstallIntent;
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphManagedEBookAssignmentInput = {
  installIntent: GraphInstallIntent;
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTargetInput>;
  id: Scalars['String'];
};

export type GraphManagedEBookInput = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  informationUrl?: Maybe<Scalars['String']>;
  largeCover?: Maybe<GraphMimeContentInput>;
  lastModifiedDateTime: Scalars['DateTime'];
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publishedDateTime: Scalars['DateTime'];
  publisher?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedIosLobApp = GraphManagedMobileLobApp & {
  __typename?: 'GraphManagedIosLobApp';
  applicableDeviceType: GraphIosDeviceType;
  buildNumber?: Maybe<Scalars['String']>;
  bundleId?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  minimumSupportedOperatingSystem?: Maybe<GraphIosMinimumOperatingSystem>;
  versionNumber?: Maybe<Scalars['String']>;
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  appAvailability: GraphManagedAppAvailability;
  version?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedIosLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedIosLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedIosLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedIosLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedIosLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedIosLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedIosLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphManagedIosStoreApp = GraphManagedApp & {
  __typename?: 'GraphManagedIosStoreApp';
  applicableDeviceType: GraphIosDeviceType;
  appStoreUrl: Scalars['String'];
  bundleId?: Maybe<Scalars['String']>;
  minimumSupportedOperatingSystem: GraphIosMinimumOperatingSystem;
  appAvailability: GraphManagedAppAvailability;
  version?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedIosStoreAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedIosStoreAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedIosStoreAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedIosStoreAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedIosStoreAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphManagedMobileApp = GraphEntity & {
  __typename?: 'GraphManagedMobileApp';
  mobileAppIdentifier?: Maybe<GraphMobileAppIdentifier>;
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedMobileAppInput = {
  mobileAppIdentifier?: Maybe<GraphMobileAppIdentifierInput>;
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphManagedMobileLobApp = {
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  appAvailability: GraphManagedAppAvailability;
  version?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphManagedMobileLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedMobileLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedMobileLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedMobileLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedMobileLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphManagedMobileLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphManagedMobileLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export enum GraphManagementAgentType {
  Eas = 'eas',
  Mdm = 'mdm',
  EasMdm = 'easMdm',
  IntuneClient = 'intuneClient',
  EasIntuneClient = 'easIntuneClient',
  ConfigurationManagerClient = 'configurationManagerClient',
  ConfigurationManagerClientMdm = 'configurationManagerClientMdm',
  ConfigurationManagerClientMdmEas = 'configurationManagerClientMdmEas',
  Unknown = 'unknown',
  Jamf = 'jamf',
  GoogleCloudDevicePolicyController = 'googleCloudDevicePolicyController',
}

export enum GraphMdmAppConfigKeyType {
  StringType = 'stringType',
  IntegerType = 'integerType',
  RealType = 'realType',
  BooleanType = 'booleanType',
  TokenType = 'tokenType',
}

export enum GraphMdmAuthority {
  Unknown = 'unknown',
  Intune = 'intune',
  Sccm = 'sccm',
  Office365 = 'office365',
}

export type GraphMdmWindowsInformationProtectionPolicy = GraphWindowsInformationProtection & {
  __typename?: 'GraphMdmWindowsInformationProtectionPolicy';
  rest?: Maybe<Scalars['JSON']>;
  azureRightsManagementServicesAllowed: Scalars['Boolean'];
  dataRecoveryCertificate?: Maybe<GraphWindowsInformationProtectionDataRecoveryCertificate>;
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel;
  enterpriseDomain?: Maybe<Scalars['String']>;
  enterpriseInternalProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseIPRanges?: Maybe<Array<Maybe<GraphWindowsInformationProtectionIpRangeCollection>>>;
  enterpriseIPRangesAreAuthoritative: Scalars['Boolean'];
  enterpriseNetworkDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProtectedDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProxiedDomains?: Maybe<Array<Maybe<GraphWindowsInformationProtectionProxiedDomainCollection>>>;
  enterpriseProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProxyServersAreAuthoritative: Scalars['Boolean'];
  exemptApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
  iconsVisible: Scalars['Boolean'];
  indexingEncryptedStoresOrItemsBlocked: Scalars['Boolean'];
  isAssigned: Scalars['Boolean'];
  neutralDomainResources?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  protectedApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
  protectionUnderLockConfigRequired: Scalars['Boolean'];
  revokeOnUnenrollDisabled: Scalars['Boolean'];
  rightsManagementServicesTemplateId?: Maybe<Scalars['GUID']>;
  smbAutoEncryptedFileExtensions?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
  assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
  exemptAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
  exemptAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
  protectedAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
  protectedAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
  assign?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  targetApps?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMdmWindowsInformationProtectionPolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMdmWindowsInformationProtectionPolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMdmWindowsInformationProtectionPolicyExemptAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMdmWindowsInformationProtectionPolicyExemptAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMdmWindowsInformationProtectionPolicyProtectedAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMdmWindowsInformationProtectionPolicyProtectedAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMdmWindowsInformationProtectionPolicyAssignArgs = {
  bindingParameter?: Maybe<GraphWindowsInformationProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type GraphMdmWindowsInformationProtectionPolicyTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphMediaConfig = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMediaConfigInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMediaContentRatingAustralia = {
  __typename?: 'GraphMediaContentRatingAustralia';
  movieRating: GraphRatingAustraliaMoviesType;
  tvRating: GraphRatingAustraliaTelevisionType;
};

export type GraphMediaContentRatingCanada = {
  __typename?: 'GraphMediaContentRatingCanada';
  movieRating: GraphRatingCanadaMoviesType;
  tvRating: GraphRatingCanadaTelevisionType;
};

export type GraphMediaContentRatingFrance = {
  __typename?: 'GraphMediaContentRatingFrance';
  movieRating: GraphRatingFranceMoviesType;
  tvRating: GraphRatingFranceTelevisionType;
};

export type GraphMediaContentRatingGermany = {
  __typename?: 'GraphMediaContentRatingGermany';
  movieRating: GraphRatingGermanyMoviesType;
  tvRating: GraphRatingGermanyTelevisionType;
};

export type GraphMediaContentRatingIreland = {
  __typename?: 'GraphMediaContentRatingIreland';
  movieRating: GraphRatingIrelandMoviesType;
  tvRating: GraphRatingIrelandTelevisionType;
};

export type GraphMediaContentRatingJapan = {
  __typename?: 'GraphMediaContentRatingJapan';
  movieRating: GraphRatingJapanMoviesType;
  tvRating: GraphRatingJapanTelevisionType;
};

export type GraphMediaContentRatingNewZealand = {
  __typename?: 'GraphMediaContentRatingNewZealand';
  movieRating: GraphRatingNewZealandMoviesType;
  tvRating: GraphRatingNewZealandTelevisionType;
};

export type GraphMediaContentRatingUnitedKingdom = {
  __typename?: 'GraphMediaContentRatingUnitedKingdom';
  movieRating: GraphRatingUnitedKingdomMoviesType;
  tvRating: GraphRatingUnitedKingdomTelevisionType;
};

export type GraphMediaContentRatingUnitedStates = {
  __typename?: 'GraphMediaContentRatingUnitedStates';
  movieRating: GraphRatingUnitedStatesMoviesType;
  tvRating: GraphRatingUnitedStatesTelevisionType;
};

export enum GraphMediaDirection {
  Inactive = 'inactive',
  SendOnly = 'sendOnly',
  ReceiveOnly = 'receiveOnly',
  SendReceive = 'sendReceive',
}

export type GraphMediaInfo = {
  __typename?: 'GraphMediaInfo';
  resourceId?: Maybe<Scalars['String']>;
  uri: Scalars['String'];
};

export enum GraphMediaState {
  Active = 'active',
  Inactive = 'inactive',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphMediaStream = {
  __typename?: 'GraphMediaStream';
  direction: GraphMediaDirection;
  label?: Maybe<Scalars['String']>;
  mediaType: GraphModality;
  serverMuted: Scalars['Boolean'];
  sourceId: Scalars['String'];
};

export type GraphMediaStreamInput = {
  direction: GraphMediaDirection;
  label?: Maybe<Scalars['String']>;
  mediaType: GraphModality;
  serverMuted: Scalars['Boolean'];
  sourceId: Scalars['String'];
};

export type GraphMeetingInfo = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMeetingInfoInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMeetingParticipantInfo = {
  __typename?: 'GraphMeetingParticipantInfo';
  identity?: Maybe<GraphIdentitySet>;
  role?: Maybe<GraphOnlineMeetingRole>;
  upn?: Maybe<Scalars['String']>;
};

export type GraphMeetingParticipantInfoInput = {
  identity?: Maybe<GraphIdentitySetInput>;
  role?: Maybe<GraphOnlineMeetingRole>;
  upn?: Maybe<Scalars['String']>;
};

export type GraphMeetingParticipants = {
  __typename?: 'GraphMeetingParticipants';
  attendees?: Maybe<Array<Maybe<GraphMeetingParticipantInfo>>>;
  organizer?: Maybe<GraphMeetingParticipantInfo>;
};

export type GraphMeetingParticipantsInput = {
  attendees?: Maybe<Array<Maybe<GraphMeetingParticipantInfoInput>>>;
  organizer?: Maybe<GraphMeetingParticipantInfoInput>;
};

export type GraphMessage = GraphOutlookItem & {
  __typename?: 'GraphMessage';
  bccRecipients?: Maybe<Array<Maybe<GraphRecipient>>>;
  body?: Maybe<GraphItemBody>;
  bodyPreview?: Maybe<Scalars['String']>;
  ccRecipients?: Maybe<Array<Maybe<GraphRecipient>>>;
  conversationId?: Maybe<Scalars['String']>;
  conversationIndex?: Maybe<Scalars['String']>;
  flag?: Maybe<GraphFollowupFlag>;
  from?: Maybe<GraphRecipient>;
  hasAttachments?: Maybe<Scalars['Boolean']>;
  importance?: Maybe<GraphImportance>;
  inferenceClassification?: Maybe<GraphInferenceClassificationType>;
  internetMessageHeaders?: Maybe<Array<Maybe<GraphInternetMessageHeader>>>;
  internetMessageId?: Maybe<Scalars['String']>;
  isDeliveryReceiptRequested?: Maybe<Scalars['Boolean']>;
  isDraft?: Maybe<Scalars['Boolean']>;
  isRead?: Maybe<Scalars['Boolean']>;
  isReadReceiptRequested?: Maybe<Scalars['Boolean']>;
  parentFolderId?: Maybe<Scalars['String']>;
  receivedDateTime?: Maybe<Scalars['DateTime']>;
  replyTo?: Maybe<Array<Maybe<GraphRecipient>>>;
  sender?: Maybe<GraphRecipient>;
  sentDateTime?: Maybe<Scalars['DateTime']>;
  subject?: Maybe<Scalars['String']>;
  toRecipients?: Maybe<Array<Maybe<GraphRecipient>>>;
  uniqueBody?: Maybe<GraphItemBody>;
  webLink?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<GraphAttachment>>>;
  attachmentsById?: Maybe<GraphAttachment>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  multiValueExtendedProperties?: Maybe<Array<Maybe<GraphMultiValueLegacyExtendedProperty>>>;
  multiValueExtendedPropertiesById?: Maybe<GraphMultiValueLegacyExtendedProperty>;
  singleValueExtendedProperties?: Maybe<Array<Maybe<GraphSingleValueLegacyExtendedProperty>>>;
  singleValueExtendedPropertiesById?: Maybe<GraphSingleValueLegacyExtendedProperty>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphMessage>>>;
  forward?: Maybe<Scalars['JSON']>;
  copy?: Maybe<Scalars['JSON']>;
  move?: Maybe<Scalars['JSON']>;
  createForward?: Maybe<Scalars['JSON']>;
  createReply?: Maybe<Scalars['JSON']>;
  createReplyAll?: Maybe<Scalars['JSON']>;
  reply?: Maybe<Scalars['JSON']>;
  replyAll?: Maybe<Scalars['JSON']>;
  send?: Maybe<Scalars['JSON']>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphMessageAttachmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMessageAttachmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMessageExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMessageExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMessageMultiValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMessageMultiValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMessageSingleValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMessageSingleValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMessageForwardArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  ToRecipients?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  Message?: Maybe<GraphMessageInput>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphMessageCopyArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  DestinationId: Scalars['String'];
};

export type GraphMessageMoveArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  DestinationId: Scalars['String'];
};

export type GraphMessageCreateForwardArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  ToRecipients?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  Message?: Maybe<GraphMessageInput>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphMessageCreateReplyArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  Message?: Maybe<GraphMessageInput>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphMessageCreateReplyAllArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  Message?: Maybe<GraphMessageInput>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphMessageReplyArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  Message?: Maybe<GraphMessageInput>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphMessageReplyAllArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
  Message?: Maybe<GraphMessageInput>;
  Comment?: Maybe<Scalars['String']>;
};

export type GraphMessageSendArgs = {
  bindingParameter?: Maybe<GraphMessageInput>;
};

export enum GraphMessageActionFlag {
  Any = 'any',
  Call = 'call',
  DoNotForward = 'doNotForward',
  FollowUp = 'followUp',
  Fyi = 'fyi',
  Forward = 'forward',
  NoResponseNecessary = 'noResponseNecessary',
  Read = 'read',
  Reply = 'reply',
  ReplyToAll = 'replyToAll',
  Review = 'review',
}

export type GraphMessageInput = {
  bccRecipients?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  body?: Maybe<GraphItemBodyInput>;
  bodyPreview?: Maybe<Scalars['String']>;
  ccRecipients?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  conversationId?: Maybe<Scalars['String']>;
  conversationIndex?: Maybe<Scalars['String']>;
  flag?: Maybe<GraphFollowupFlagInput>;
  from?: Maybe<GraphRecipientInput>;
  hasAttachments?: Maybe<Scalars['Boolean']>;
  importance?: Maybe<GraphImportance>;
  inferenceClassification?: Maybe<GraphInferenceClassificationType>;
  internetMessageHeaders?: Maybe<Array<Maybe<GraphInternetMessageHeaderInput>>>;
  internetMessageId?: Maybe<Scalars['String']>;
  isDeliveryReceiptRequested?: Maybe<Scalars['Boolean']>;
  isDraft?: Maybe<Scalars['Boolean']>;
  isRead?: Maybe<Scalars['Boolean']>;
  isReadReceiptRequested?: Maybe<Scalars['Boolean']>;
  parentFolderId?: Maybe<Scalars['String']>;
  receivedDateTime?: Maybe<Scalars['DateTime']>;
  replyTo?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  sender?: Maybe<GraphRecipientInput>;
  sentDateTime?: Maybe<Scalars['DateTime']>;
  subject?: Maybe<Scalars['String']>;
  toRecipients?: Maybe<Array<Maybe<GraphRecipientInput>>>;
  uniqueBody?: Maybe<GraphItemBodyInput>;
  webLink?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphMessageRule = GraphEntity & {
  __typename?: 'GraphMessageRule';
  actions?: Maybe<GraphMessageRuleActions>;
  conditions?: Maybe<GraphMessageRulePredicates>;
  displayName?: Maybe<Scalars['String']>;
  exceptions?: Maybe<GraphMessageRulePredicates>;
  hasError?: Maybe<Scalars['Boolean']>;
  isEnabled?: Maybe<Scalars['Boolean']>;
  isReadOnly?: Maybe<Scalars['Boolean']>;
  sequence?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
};

export type GraphMessageRuleActions = {
  __typename?: 'GraphMessageRuleActions';
  assignCategories?: Maybe<Array<Maybe<Scalars['String']>>>;
  copyToFolder?: Maybe<Scalars['String']>;
  delete?: Maybe<Scalars['Boolean']>;
  forwardAsAttachmentTo?: Maybe<Array<Maybe<GraphRecipient>>>;
  forwardTo?: Maybe<Array<Maybe<GraphRecipient>>>;
  markAsRead?: Maybe<Scalars['Boolean']>;
  markImportance?: Maybe<GraphImportance>;
  moveToFolder?: Maybe<Scalars['String']>;
  permanentDelete?: Maybe<Scalars['Boolean']>;
  redirectTo?: Maybe<Array<Maybe<GraphRecipient>>>;
  stopProcessingRules?: Maybe<Scalars['Boolean']>;
};

export type GraphMessageRulePredicates = {
  __typename?: 'GraphMessageRulePredicates';
  bodyContains?: Maybe<Array<Maybe<Scalars['String']>>>;
  bodyOrSubjectContains?: Maybe<Array<Maybe<Scalars['String']>>>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  fromAddresses?: Maybe<Array<Maybe<GraphRecipient>>>;
  hasAttachments?: Maybe<Scalars['Boolean']>;
  headerContains?: Maybe<Array<Maybe<Scalars['String']>>>;
  importance?: Maybe<GraphImportance>;
  isApprovalRequest?: Maybe<Scalars['Boolean']>;
  isAutomaticForward?: Maybe<Scalars['Boolean']>;
  isAutomaticReply?: Maybe<Scalars['Boolean']>;
  isEncrypted?: Maybe<Scalars['Boolean']>;
  isMeetingRequest?: Maybe<Scalars['Boolean']>;
  isMeetingResponse?: Maybe<Scalars['Boolean']>;
  isNonDeliveryReport?: Maybe<Scalars['Boolean']>;
  isPermissionControlled?: Maybe<Scalars['Boolean']>;
  isReadReceipt?: Maybe<Scalars['Boolean']>;
  isSigned?: Maybe<Scalars['Boolean']>;
  isVoicemail?: Maybe<Scalars['Boolean']>;
  messageActionFlag?: Maybe<GraphMessageActionFlag>;
  notSentToMe?: Maybe<Scalars['Boolean']>;
  recipientContains?: Maybe<Array<Maybe<Scalars['String']>>>;
  senderContains?: Maybe<Array<Maybe<Scalars['String']>>>;
  sensitivity?: Maybe<GraphSensitivity>;
  sentCcMe?: Maybe<Scalars['Boolean']>;
  sentOnlyToMe?: Maybe<Scalars['Boolean']>;
  sentToAddresses?: Maybe<Array<Maybe<GraphRecipient>>>;
  sentToMe?: Maybe<Scalars['Boolean']>;
  sentToOrCcMe?: Maybe<Scalars['Boolean']>;
  subjectContains?: Maybe<Array<Maybe<Scalars['String']>>>;
  withinSizeRange?: Maybe<GraphSizeRange>;
};

export type GraphMessageSecurityState = {
  __typename?: 'GraphMessageSecurityState';
  connectingIP?: Maybe<Scalars['String']>;
  deliveryAction?: Maybe<Scalars['String']>;
  deliveryLocation?: Maybe<Scalars['String']>;
  directionality?: Maybe<Scalars['String']>;
  internetMessageId?: Maybe<Scalars['String']>;
  messageFingerprint?: Maybe<Scalars['String']>;
  messageReceivedDateTime?: Maybe<Scalars['DateTime']>;
  messageSubject?: Maybe<Scalars['String']>;
  networkMessageId?: Maybe<Scalars['String']>;
};

export type GraphMicrosoftAuthenticatorAuthenticationMethod = GraphAuthenticationMethod & {
  __typename?: 'GraphMicrosoftAuthenticatorAuthenticationMethod';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  deviceTag?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  phoneAppVersion?: Maybe<Scalars['String']>;
  device?: Maybe<GraphDevice>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMicrosoftAuthenticatorAuthenticationMethodConfiguration = GraphAuthenticationMethodConfiguration & {
  __typename?: 'GraphMicrosoftAuthenticatorAuthenticationMethodConfiguration';
  includeTargets?: Maybe<Array<Maybe<GraphMicrosoftAuthenticatorAuthenticationMethodTarget>>>;
  includeTargetsById?: Maybe<GraphMicrosoftAuthenticatorAuthenticationMethodTarget>;
  state?: Maybe<GraphAuthenticationMethodState>;
  id: Scalars['String'];
};

export type GraphMicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMicrosoftAuthenticatorAuthenticationMethodTarget = {
  __typename?: 'GraphMicrosoftAuthenticatorAuthenticationMethodTarget';
  authenticationMode: GraphMicrosoftAuthenticatorAuthenticationMode;
  featureSettings?: Maybe<GraphAuthenticatorAppFeatureSettings>;
  isRegistrationRequired: Scalars['Boolean'];
  targetType: GraphAuthenticationMethodTargetType;
  id: Scalars['String'];
};

export enum GraphMicrosoftAuthenticatorAuthenticationMode {
  DeviceBasedPush = 'deviceBasedPush',
  Push = 'push',
  Any = 'any',
}

export type GraphMicrosoftStoreForBusinessApp = GraphMobileApp & {
  __typename?: 'GraphMicrosoftStoreForBusinessApp';
  licenseType: GraphMicrosoftStoreForBusinessLicenseType;
  packageIdentityName?: Maybe<Scalars['String']>;
  productKey?: Maybe<Scalars['String']>;
  totalLicenseCount: Scalars['Int'];
  usedLicenseCount: Scalars['Int'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMicrosoftStoreForBusinessAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMicrosoftStoreForBusinessAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMicrosoftStoreForBusinessAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMicrosoftStoreForBusinessAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMicrosoftStoreForBusinessAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphMicrosoftStoreForBusinessAppAssignmentSettings = GraphMobileAppAssignmentSettings & {
  __typename?: 'GraphMicrosoftStoreForBusinessAppAssignmentSettings';
  useDeviceContext: Scalars['Boolean'];
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphMicrosoftStoreForBusinessLicenseType {
  Offline = 'offline',
  Online = 'online',
}

export type GraphMimeContent = {
  __typename?: 'GraphMimeContent';
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphMimeContentInput = {
  type?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export enum GraphMiracastChannel {
  UserDefined = 'userDefined',
  One = 'one',
  Two = 'two',
  Three = 'three',
  Four = 'four',
  Five = 'five',
  Six = 'six',
  Seven = 'seven',
  Eight = 'eight',
  Nine = 'nine',
  Ten = 'ten',
  Eleven = 'eleven',
  ThirtySix = 'thirtySix',
  Forty = 'forty',
  FortyFour = 'fortyFour',
  FortyEight = 'fortyEight',
  OneHundredFortyNine = 'oneHundredFortyNine',
  OneHundredFiftyThree = 'oneHundredFiftyThree',
  OneHundredFiftySeven = 'oneHundredFiftySeven',
  OneHundredSixtyOne = 'oneHundredSixtyOne',
  OneHundredSixtyFive = 'oneHundredSixtyFive',
}

export type GraphMobileApp = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMobileAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMobileAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMobileAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMobileAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMobileAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphMobileAppAssignment = GraphEntity & {
  __typename?: 'GraphMobileAppAssignment';
  intent: GraphInstallIntent;
  settings?: Maybe<GraphMobileAppAssignmentSettings>;
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphMobileAppAssignmentInput = {
  intent: GraphInstallIntent;
  settings?: Maybe<GraphMobileAppAssignmentSettingsInput>;
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTargetInput>;
  id: Scalars['String'];
};

export type GraphMobileAppAssignmentSettings = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMobileAppAssignmentSettingsInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMobileAppCategory = GraphEntity & {
  __typename?: 'GraphMobileAppCategory';
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  id: Scalars['String'];
};

export type GraphMobileAppContent = GraphEntity & {
  __typename?: 'GraphMobileAppContent';
  files?: Maybe<Array<Maybe<GraphMobileAppContentFile>>>;
  filesById?: Maybe<GraphMobileAppContentFile>;
  id: Scalars['String'];
};

export type GraphMobileAppContentFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMobileAppContentFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMobileAppContentFile = GraphEntity & {
  __typename?: 'GraphMobileAppContentFile';
  azureStorageUri?: Maybe<Scalars['String']>;
  azureStorageUriExpirationDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime: Scalars['DateTime'];
  isCommitted: Scalars['Boolean'];
  manifest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  sizeEncrypted: Scalars['BigInt'];
  uploadState: GraphMobileAppContentFileUploadState;
  commit?: Maybe<Scalars['JSON']>;
  renewUpload?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMobileAppContentFileCommitArgs = {
  bindingParameter?: Maybe<GraphMobileAppContentFileInput>;
  fileEncryptionInfo?: Maybe<GraphFileEncryptionInfoInput>;
};

export type GraphMobileAppContentFileRenewUploadArgs = {
  bindingParameter?: Maybe<GraphMobileAppContentFileInput>;
};

export type GraphMobileAppContentFileInput = {
  azureStorageUri?: Maybe<Scalars['String']>;
  azureStorageUriExpirationDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime: Scalars['DateTime'];
  isCommitted: Scalars['Boolean'];
  manifest?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  sizeEncrypted: Scalars['BigInt'];
  uploadState: GraphMobileAppContentFileUploadState;
  id: Scalars['String'];
};

export enum GraphMobileAppContentFileUploadState {
  Success = 'success',
  TransientError = 'transientError',
  Error = 'error',
  Unknown = 'unknown',
  AzureStorageUriRequestSuccess = 'azureStorageUriRequestSuccess',
  AzureStorageUriRequestPending = 'azureStorageUriRequestPending',
  AzureStorageUriRequestFailed = 'azureStorageUriRequestFailed',
  AzureStorageUriRequestTimedOut = 'azureStorageUriRequestTimedOut',
  AzureStorageUriRenewalSuccess = 'azureStorageUriRenewalSuccess',
  AzureStorageUriRenewalPending = 'azureStorageUriRenewalPending',
  AzureStorageUriRenewalFailed = 'azureStorageUriRenewalFailed',
  AzureStorageUriRenewalTimedOut = 'azureStorageUriRenewalTimedOut',
  CommitFileSuccess = 'commitFileSuccess',
  CommitFilePending = 'commitFilePending',
  CommitFileFailed = 'commitFileFailed',
  CommitFileTimedOut = 'commitFileTimedOut',
}

export type GraphMobileAppIdentifier = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMobileAppIdentifierInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphMobileAppInput = {
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContentInput>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  id: Scalars['String'];
};

export type GraphMobileAppInstallTimeSettings = {
  __typename?: 'GraphMobileAppInstallTimeSettings';
  deadlineDateTime?: Maybe<Scalars['DateTime']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  useLocalTime: Scalars['Boolean'];
};

export enum GraphMobileAppPublishingState {
  NotPublished = 'notPublished',
  Processing = 'processing',
  Published = 'published',
}

export type GraphMobileLobApp = {
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphMobileLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMobileLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMobileLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMobileLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMobileLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphMobileLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphMobileLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphMobileThreatDefenseConnector = GraphEntity & {
  __typename?: 'GraphMobileThreatDefenseConnector';
  androidDeviceBlockedOnMissingPartnerData: Scalars['Boolean'];
  androidEnabled: Scalars['Boolean'];
  iosDeviceBlockedOnMissingPartnerData: Scalars['Boolean'];
  iosEnabled: Scalars['Boolean'];
  lastHeartbeatDateTime: Scalars['DateTime'];
  partnerState: GraphMobileThreatPartnerTenantState;
  partnerUnresponsivenessThresholdInDays: Scalars['Int'];
  partnerUnsupportedOsVersionBlocked: Scalars['Boolean'];
  id: Scalars['String'];
};

export enum GraphMobileThreatPartnerTenantState {
  Unavailable = 'unavailable',
  Available = 'available',
  Enabled = 'enabled',
  Unresponsive = 'unresponsive',
}

export enum GraphModality {
  Audio = 'audio',
  Video = 'video',
  VideoBasedScreenSharing = 'videoBasedScreenSharing',
  Data = 'data',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphModifiedProperty = {
  __typename?: 'GraphModifiedProperty';
  displayName?: Maybe<Scalars['String']>;
  newValue?: Maybe<Scalars['String']>;
  oldValue?: Maybe<Scalars['String']>;
};

export type GraphMultiValueLegacyExtendedProperty = GraphEntity & {
  __typename?: 'GraphMultiValueLegacyExtendedProperty';
  value?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphNamedLocation = GraphEntity & {
  __typename?: 'GraphNamedLocation';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName: Scalars['String'];
  modifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphNetworkConnection = {
  __typename?: 'GraphNetworkConnection';
  applicationName?: Maybe<Scalars['String']>;
  destinationAddress?: Maybe<Scalars['String']>;
  destinationDomain?: Maybe<Scalars['String']>;
  destinationLocation?: Maybe<Scalars['String']>;
  destinationPort?: Maybe<Scalars['String']>;
  destinationUrl?: Maybe<Scalars['String']>;
  direction?: Maybe<GraphConnectionDirection>;
  domainRegisteredDateTime?: Maybe<Scalars['DateTime']>;
  localDnsName?: Maybe<Scalars['String']>;
  natDestinationAddress?: Maybe<Scalars['String']>;
  natDestinationPort?: Maybe<Scalars['String']>;
  natSourceAddress?: Maybe<Scalars['String']>;
  natSourcePort?: Maybe<Scalars['String']>;
  protocol?: Maybe<GraphSecurityNetworkProtocol>;
  riskScore?: Maybe<Scalars['String']>;
  sourceAddress?: Maybe<Scalars['String']>;
  sourceLocation?: Maybe<Scalars['String']>;
  sourcePort?: Maybe<Scalars['String']>;
  status?: Maybe<GraphConnectionStatus>;
  urlParameters?: Maybe<Scalars['String']>;
};

export type GraphNotebook = GraphOnenoteEntityHierarchyModel & {
  __typename?: 'GraphNotebook';
  isDefault?: Maybe<Scalars['Boolean']>;
  isShared?: Maybe<Scalars['Boolean']>;
  links?: Maybe<GraphNotebookLinks>;
  sectionGroupsUrl?: Maybe<Scalars['String']>;
  sectionsUrl?: Maybe<Scalars['String']>;
  userRole?: Maybe<GraphOnenoteUserRole>;
  sectionGroups?: Maybe<Array<Maybe<GraphSectionGroup>>>;
  sectionGroupsById?: Maybe<GraphSectionGroup>;
  sections?: Maybe<Array<Maybe<GraphOnenoteSection>>>;
  sectionsById?: Maybe<GraphOnenoteSection>;
  getRecentNotebooks?: Maybe<Array<Maybe<GraphRecentNotebook>>>;
  copyNotebook?: Maybe<Scalars['JSON']>;
  getNotebookFromWebUrl?: Maybe<Scalars['JSON']>;
  createdBy?: Maybe<GraphIdentitySet>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphNotebookSectionGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphNotebookSectionGroupsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphNotebookSectionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphNotebookSectionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphNotebookCopyNotebookArgs = {
  bindingParameter?: Maybe<GraphNotebookInput>;
  groupId?: Maybe<Scalars['String']>;
  renameAs?: Maybe<Scalars['String']>;
  notebookFolder?: Maybe<Scalars['String']>;
  siteCollectionId?: Maybe<Scalars['String']>;
  siteId?: Maybe<Scalars['String']>;
};

export type GraphNotebookGetNotebookFromWebUrlArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphNotebookInput>>>;
  webUrl?: Maybe<Scalars['String']>;
};

export type GraphNotebookInput = {
  isDefault?: Maybe<Scalars['Boolean']>;
  isShared?: Maybe<Scalars['Boolean']>;
  links?: Maybe<GraphNotebookLinksInput>;
  sectionGroupsUrl?: Maybe<Scalars['String']>;
  sectionsUrl?: Maybe<Scalars['String']>;
  userRole?: Maybe<GraphOnenoteUserRole>;
  createdBy?: Maybe<GraphIdentitySetInput>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphNotebookLinks = {
  __typename?: 'GraphNotebookLinks';
  oneNoteClientUrl?: Maybe<GraphExternalLink>;
  oneNoteWebUrl?: Maybe<GraphExternalLink>;
};

export type GraphNotebookLinksInput = {
  oneNoteClientUrl?: Maybe<GraphExternalLinkInput>;
  oneNoteWebUrl?: Maybe<GraphExternalLinkInput>;
};

export type GraphNotificationMessageTemplate = GraphEntity & {
  __typename?: 'GraphNotificationMessageTemplate';
  brandingOptions: GraphNotificationTemplateBrandingOptions;
  defaultLocale?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  localizedNotificationMessages?: Maybe<Array<Maybe<GraphLocalizedNotificationMessage>>>;
  localizedNotificationMessagesById?: Maybe<GraphLocalizedNotificationMessage>;
  sendTestMessage?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphNotificationMessageTemplateLocalizedNotificationMessagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphNotificationMessageTemplateLocalizedNotificationMessagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphNotificationMessageTemplateSendTestMessageArgs = {
  bindingParameter?: Maybe<GraphNotificationMessageTemplateInput>;
};

export type GraphNotificationMessageTemplateInput = {
  brandingOptions: GraphNotificationTemplateBrandingOptions;
  defaultLocale?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  id: Scalars['String'];
};

export enum GraphNotificationTemplateBrandingOptions {
  None = 'none',
  IncludeCompanyLogo = 'includeCompanyLogo',
  IncludeCompanyName = 'includeCompanyName',
  IncludeContactInformation = 'includeContactInformation',
}

export type GraphNumberColumn = {
  __typename?: 'GraphNumberColumn';
  decimalPlaces?: Maybe<Scalars['String']>;
  displayAs?: Maybe<Scalars['String']>;
  maximum?: Maybe<Scalars['Float']>;
  minimum?: Maybe<Scalars['Float']>;
};

export type GraphOAuth2PermissionGrant = GraphEntity & {
  __typename?: 'GraphOAuth2PermissionGrant';
  clientId: Scalars['String'];
  consentType?: Maybe<Scalars['String']>;
  principalId?: Maybe<Scalars['String']>;
  resourceId: Scalars['String'];
  scope?: Maybe<Scalars['String']>;
  delta?: Maybe<Array<Maybe<GraphOAuth2PermissionGrant>>>;
  id: Scalars['String'];
};

export type GraphOAuth2PermissionGrantInput = {
  clientId: Scalars['String'];
  consentType?: Maybe<Scalars['String']>;
  principalId?: Maybe<Scalars['String']>;
  resourceId: Scalars['String'];
  scope?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOAuth2PermissionGrantUpdateInput = {
  clientId?: Maybe<Scalars['String']>;
  consentType?: Maybe<Scalars['String']>;
  principalId?: Maybe<Scalars['String']>;
  resourceId?: Maybe<Scalars['String']>;
  scope?: Maybe<Scalars['String']>;
};

export type GraphObjectIdentity = {
  __typename?: 'GraphObjectIdentity';
  issuer?: Maybe<Scalars['String']>;
  issuerAssignedId?: Maybe<Scalars['String']>;
  signInType?: Maybe<Scalars['String']>;
};

export type GraphObjectIdentityInput = {
  issuer?: Maybe<Scalars['String']>;
  issuerAssignedId?: Maybe<Scalars['String']>;
  signInType?: Maybe<Scalars['String']>;
};

export type GraphOfferShiftRequest = GraphScheduleChangeRequest & {
  __typename?: 'GraphOfferShiftRequest';
  recipientActionDateTime?: Maybe<Scalars['DateTime']>;
  recipientActionMessage?: Maybe<Scalars['String']>;
  recipientUserId?: Maybe<Scalars['String']>;
  senderShiftId?: Maybe<Scalars['String']>;
  assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
  managerActionDateTime?: Maybe<Scalars['DateTime']>;
  managerActionMessage?: Maybe<Scalars['String']>;
  managerUserId?: Maybe<Scalars['String']>;
  senderDateTime?: Maybe<Scalars['DateTime']>;
  senderMessage?: Maybe<Scalars['String']>;
  senderUserId?: Maybe<Scalars['String']>;
  state?: Maybe<GraphScheduleChangeState>;
  decline?: Maybe<Scalars['JSON']>;
  approve?: Maybe<Scalars['JSON']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphOfferShiftRequestDeclineArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphOfferShiftRequestApproveArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphOfficeGraphInsights = GraphEntity & {
  __typename?: 'GraphOfficeGraphInsights';
  shared?: Maybe<Array<Maybe<GraphSharedInsight>>>;
  sharedById?: Maybe<GraphSharedInsight>;
  trending?: Maybe<Array<Maybe<GraphTrending>>>;
  trendingById?: Maybe<GraphTrending>;
  used?: Maybe<Array<Maybe<GraphUsedInsight>>>;
  usedById?: Maybe<GraphUsedInsight>;
  id: Scalars['String'];
};

export type GraphOfficeGraphInsightsSharedArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOfficeGraphInsightsSharedByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOfficeGraphInsightsTrendingArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOfficeGraphInsightsTrendingByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOfficeGraphInsightsUsedArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOfficeGraphInsightsUsedByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOmaSetting = {
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOmaSettingBase64 = GraphOmaSetting & {
  __typename?: 'GraphOmaSettingBase64';
  fileName?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOmaSettingBoolean = GraphOmaSetting & {
  __typename?: 'GraphOmaSettingBoolean';
  value: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOmaSettingDateTime = GraphOmaSetting & {
  __typename?: 'GraphOmaSettingDateTime';
  value: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOmaSettingFloatingPoint = GraphOmaSetting & {
  __typename?: 'GraphOmaSettingFloatingPoint';
  value: Scalars['Float'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOmaSettingInteger = GraphOmaSetting & {
  __typename?: 'GraphOmaSettingInteger';
  value: Scalars['Int'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOmaSettingString = GraphOmaSetting & {
  __typename?: 'GraphOmaSettingString';
  value: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOmaSettingStringXml = GraphOmaSetting & {
  __typename?: 'GraphOmaSettingStringXml';
  fileName?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type GraphOnPremisesConditionalAccessSettings = GraphEntity & {
  __typename?: 'GraphOnPremisesConditionalAccessSettings';
  enabled: Scalars['Boolean'];
  excludedGroups: Array<Maybe<Scalars['GUID']>>;
  includedGroups: Array<Maybe<Scalars['GUID']>>;
  overrideDefaultRule: Scalars['Boolean'];
  id: Scalars['String'];
};

export type GraphOnPremisesExtensionAttributes = {
  __typename?: 'GraphOnPremisesExtensionAttributes';
  extensionAttribute1?: Maybe<Scalars['String']>;
  extensionAttribute10?: Maybe<Scalars['String']>;
  extensionAttribute11?: Maybe<Scalars['String']>;
  extensionAttribute12?: Maybe<Scalars['String']>;
  extensionAttribute13?: Maybe<Scalars['String']>;
  extensionAttribute14?: Maybe<Scalars['String']>;
  extensionAttribute15?: Maybe<Scalars['String']>;
  extensionAttribute2?: Maybe<Scalars['String']>;
  extensionAttribute3?: Maybe<Scalars['String']>;
  extensionAttribute4?: Maybe<Scalars['String']>;
  extensionAttribute5?: Maybe<Scalars['String']>;
  extensionAttribute6?: Maybe<Scalars['String']>;
  extensionAttribute7?: Maybe<Scalars['String']>;
  extensionAttribute8?: Maybe<Scalars['String']>;
  extensionAttribute9?: Maybe<Scalars['String']>;
};

export type GraphOnPremisesExtensionAttributesInput = {
  extensionAttribute1?: Maybe<Scalars['String']>;
  extensionAttribute10?: Maybe<Scalars['String']>;
  extensionAttribute11?: Maybe<Scalars['String']>;
  extensionAttribute12?: Maybe<Scalars['String']>;
  extensionAttribute13?: Maybe<Scalars['String']>;
  extensionAttribute14?: Maybe<Scalars['String']>;
  extensionAttribute15?: Maybe<Scalars['String']>;
  extensionAttribute2?: Maybe<Scalars['String']>;
  extensionAttribute3?: Maybe<Scalars['String']>;
  extensionAttribute4?: Maybe<Scalars['String']>;
  extensionAttribute5?: Maybe<Scalars['String']>;
  extensionAttribute6?: Maybe<Scalars['String']>;
  extensionAttribute7?: Maybe<Scalars['String']>;
  extensionAttribute8?: Maybe<Scalars['String']>;
  extensionAttribute9?: Maybe<Scalars['String']>;
};

export type GraphOnPremisesProvisioningError = {
  __typename?: 'GraphOnPremisesProvisioningError';
  category?: Maybe<Scalars['String']>;
  occurredDateTime?: Maybe<Scalars['DateTime']>;
  propertyCausingError?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphOnPremisesProvisioningErrorInput = {
  category?: Maybe<Scalars['String']>;
  occurredDateTime?: Maybe<Scalars['DateTime']>;
  propertyCausingError?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphOnenote = GraphEntity & {
  __typename?: 'GraphOnenote';
  notebooks?: Maybe<Array<Maybe<GraphNotebook>>>;
  notebooksById?: Maybe<GraphNotebook>;
  operations?: Maybe<Array<Maybe<GraphOnenoteOperation>>>;
  operationsById?: Maybe<GraphOnenoteOperation>;
  pages?: Maybe<Array<Maybe<GraphOnenotePage>>>;
  pagesById?: Maybe<GraphOnenotePage>;
  resources?: Maybe<Array<Maybe<GraphOnenoteResource>>>;
  resourcesById?: Maybe<GraphOnenoteResource>;
  sectionGroups?: Maybe<Array<Maybe<GraphSectionGroup>>>;
  sectionGroupsById?: Maybe<GraphSectionGroup>;
  sections?: Maybe<Array<Maybe<GraphOnenoteSection>>>;
  sectionsById?: Maybe<GraphOnenoteSection>;
  id: Scalars['String'];
};

export type GraphOnenoteNotebooksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOnenoteNotebooksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOnenoteOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOnenoteOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOnenotePagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOnenotePagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOnenoteResourcesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOnenoteResourcesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOnenoteSectionGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOnenoteSectionGroupsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOnenoteSectionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOnenoteSectionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOnenoteEntityBaseModel = {
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOnenoteEntityHierarchyModel = {
  createdBy?: Maybe<GraphIdentitySet>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOnenoteEntitySchemaObjectModel = {
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOnenoteOperation = {
  __typename?: 'GraphOnenoteOperation';
  error?: Maybe<GraphOnenoteOperationError>;
  percentComplete?: Maybe<Scalars['String']>;
  resourceId?: Maybe<Scalars['String']>;
  resourceLocation?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastActionDateTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<GraphOperationStatus>;
  id: Scalars['String'];
};

export type GraphOnenoteOperationError = {
  __typename?: 'GraphOnenoteOperationError';
  code?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

export type GraphOnenotePage = GraphOnenoteEntitySchemaObjectModel & {
  __typename?: 'GraphOnenotePage';
  content?: Maybe<Scalars['String']>;
  contentUrl?: Maybe<Scalars['String']>;
  createdByAppId?: Maybe<Scalars['String']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  links?: Maybe<GraphPageLinks>;
  order?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  userTags?: Maybe<Array<Maybe<Scalars['String']>>>;
  parentNotebook?: Maybe<GraphNotebook>;
  parentSection?: Maybe<GraphOnenoteSection>;
  preview?: Maybe<GraphOnenotePagePreview>;
  copyToSection?: Maybe<Scalars['JSON']>;
  onenotePatchContent?: Maybe<Scalars['JSON']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOnenotePageCopyToSectionArgs = {
  bindingParameter?: Maybe<GraphOnenotePageInput>;
  id?: Maybe<Scalars['String']>;
  groupId?: Maybe<Scalars['String']>;
  siteCollectionId?: Maybe<Scalars['String']>;
  siteId?: Maybe<Scalars['String']>;
};

export type GraphOnenotePageOnenotePatchContentArgs = {
  bindingParameter?: Maybe<GraphOnenotePageInput>;
  commands?: Maybe<Array<Maybe<GraphOnenotePatchContentCommandInput>>>;
};

export type GraphOnenotePageInput = {
  content?: Maybe<Scalars['String']>;
  contentUrl?: Maybe<Scalars['String']>;
  createdByAppId?: Maybe<Scalars['String']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  links?: Maybe<GraphPageLinksInput>;
  order?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  userTags?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOnenotePagePreview = {
  __typename?: 'GraphOnenotePagePreview';
  links?: Maybe<GraphOnenotePagePreviewLinks>;
  previewText?: Maybe<Scalars['String']>;
};

export type GraphOnenotePagePreviewLinks = {
  __typename?: 'GraphOnenotePagePreviewLinks';
  previewImageUrl?: Maybe<GraphExternalLink>;
};

export enum GraphOnenotePatchActionType {
  Replace = 'Replace',
  Append = 'Append',
  Delete = 'Delete',
  Insert = 'Insert',
  Prepend = 'Prepend',
}

export type GraphOnenotePatchContentCommandInput = {
  action: GraphOnenotePatchActionType;
  content?: Maybe<Scalars['String']>;
  position?: Maybe<GraphOnenotePatchInsertPosition>;
  target: Scalars['String'];
};

export enum GraphOnenotePatchInsertPosition {
  After = 'After',
  Before = 'Before',
}

export type GraphOnenoteResource = GraphOnenoteEntityBaseModel & {
  __typename?: 'GraphOnenoteResource';
  content?: Maybe<Scalars['String']>;
  contentUrl?: Maybe<Scalars['String']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOnenoteSection = GraphOnenoteEntityHierarchyModel & {
  __typename?: 'GraphOnenoteSection';
  isDefault?: Maybe<Scalars['Boolean']>;
  links?: Maybe<GraphSectionLinks>;
  pagesUrl?: Maybe<Scalars['String']>;
  pages?: Maybe<Array<Maybe<GraphOnenotePage>>>;
  pagesById?: Maybe<GraphOnenotePage>;
  parentNotebook?: Maybe<GraphNotebook>;
  parentSectionGroup?: Maybe<GraphSectionGroup>;
  copyToNotebook?: Maybe<Scalars['JSON']>;
  copyToSectionGroup?: Maybe<Scalars['JSON']>;
  createdBy?: Maybe<GraphIdentitySet>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOnenoteSectionPagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOnenoteSectionPagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOnenoteSectionCopyToNotebookArgs = {
  bindingParameter?: Maybe<GraphOnenoteSectionInput>;
  id?: Maybe<Scalars['String']>;
  groupId?: Maybe<Scalars['String']>;
  renameAs?: Maybe<Scalars['String']>;
  siteCollectionId?: Maybe<Scalars['String']>;
  siteId?: Maybe<Scalars['String']>;
};

export type GraphOnenoteSectionCopyToSectionGroupArgs = {
  bindingParameter?: Maybe<GraphOnenoteSectionInput>;
  id?: Maybe<Scalars['String']>;
  groupId?: Maybe<Scalars['String']>;
  renameAs?: Maybe<Scalars['String']>;
  siteCollectionId?: Maybe<Scalars['String']>;
  siteId?: Maybe<Scalars['String']>;
};

export type GraphOnenoteSectionInput = {
  isDefault?: Maybe<Scalars['Boolean']>;
  links?: Maybe<GraphSectionLinksInput>;
  pagesUrl?: Maybe<Scalars['String']>;
  createdBy?: Maybe<GraphIdentitySetInput>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphOnenoteSourceService {
  Unknown = 'Unknown',
  OneDrive = 'OneDrive',
  OneDriveForBusiness = 'OneDriveForBusiness',
  OnPremOneDriveForBusiness = 'OnPremOneDriveForBusiness',
}

export enum GraphOnenoteUserRole {
  None = 'None',
  Owner = 'Owner',
  Contributor = 'Contributor',
  Reader = 'Reader',
}

export type GraphOnlineMeeting = GraphEntity & {
  __typename?: 'GraphOnlineMeeting';
  allowedPresenters?: Maybe<GraphOnlineMeetingPresenters>;
  audioConferencing?: Maybe<GraphAudioConferencing>;
  chatInfo?: Maybe<GraphChatInfo>;
  creationDateTime?: Maybe<Scalars['DateTime']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  externalId?: Maybe<Scalars['String']>;
  isEntryExitAnnounced?: Maybe<Scalars['Boolean']>;
  joinInformation?: Maybe<GraphItemBody>;
  joinWebUrl?: Maybe<Scalars['String']>;
  lobbyBypassSettings?: Maybe<GraphLobbyBypassSettings>;
  participants?: Maybe<GraphMeetingParticipants>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  subject?: Maybe<Scalars['String']>;
  videoTeleconferenceId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  createOrGet?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphOnlineMeetingCreateOrGetArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphOnlineMeetingInput>>>;
  chatInfo?: Maybe<GraphChatInfoInput>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  externalId: Scalars['String'];
  participants?: Maybe<GraphMeetingParticipantsInput>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  subject?: Maybe<Scalars['String']>;
};

export type GraphOnlineMeetingInfo = {
  __typename?: 'GraphOnlineMeetingInfo';
  conferenceId?: Maybe<Scalars['String']>;
  joinUrl?: Maybe<Scalars['String']>;
  phones?: Maybe<Array<Maybe<GraphPhone>>>;
  quickDial?: Maybe<Scalars['String']>;
  tollFreeNumbers?: Maybe<Array<Maybe<Scalars['String']>>>;
  tollNumber?: Maybe<Scalars['String']>;
};

export type GraphOnlineMeetingInfoInput = {
  conferenceId?: Maybe<Scalars['String']>;
  joinUrl?: Maybe<Scalars['String']>;
  phones?: Maybe<Array<Maybe<GraphPhoneInput>>>;
  quickDial?: Maybe<Scalars['String']>;
  tollFreeNumbers?: Maybe<Array<Maybe<Scalars['String']>>>;
  tollNumber?: Maybe<Scalars['String']>;
};

export type GraphOnlineMeetingInput = {
  allowedPresenters?: Maybe<GraphOnlineMeetingPresenters>;
  audioConferencing?: Maybe<GraphAudioConferencingInput>;
  chatInfo?: Maybe<GraphChatInfoInput>;
  creationDateTime?: Maybe<Scalars['DateTime']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  externalId?: Maybe<Scalars['String']>;
  isEntryExitAnnounced?: Maybe<Scalars['Boolean']>;
  joinInformation?: Maybe<GraphItemBodyInput>;
  joinWebUrl?: Maybe<Scalars['String']>;
  lobbyBypassSettings?: Maybe<GraphLobbyBypassSettingsInput>;
  participants?: Maybe<GraphMeetingParticipantsInput>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  subject?: Maybe<Scalars['String']>;
  videoTeleconferenceId?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export enum GraphOnlineMeetingPresenters {
  Everyone = 'everyone',
  Organization = 'organization',
  RoleIsPresenter = 'roleIsPresenter',
  Organizer = 'organizer',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphOnlineMeetingProviderType {
  Unknown = 'unknown',
  SkypeForBusiness = 'skypeForBusiness',
  SkypeForConsumer = 'skypeForConsumer',
  TeamsForBusiness = 'teamsForBusiness',
}

export enum GraphOnlineMeetingRole {
  Attendee = 'attendee',
  Presenter = 'presenter',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphOpenShift = GraphChangeTrackedEntity & {
  __typename?: 'GraphOpenShift';
  draftOpenShift?: Maybe<GraphOpenShiftItem>;
  schedulingGroupId?: Maybe<Scalars['String']>;
  sharedOpenShift?: Maybe<GraphOpenShiftItem>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphOpenShiftChangeRequest = {
  openShiftId?: Maybe<Scalars['String']>;
  assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
  managerActionDateTime?: Maybe<Scalars['DateTime']>;
  managerActionMessage?: Maybe<Scalars['String']>;
  managerUserId?: Maybe<Scalars['String']>;
  senderDateTime?: Maybe<Scalars['DateTime']>;
  senderMessage?: Maybe<Scalars['String']>;
  senderUserId?: Maybe<Scalars['String']>;
  state?: Maybe<GraphScheduleChangeState>;
  decline?: Maybe<Scalars['JSON']>;
  approve?: Maybe<Scalars['JSON']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphOpenShiftChangeRequestDeclineArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphOpenShiftChangeRequestApproveArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphOpenShiftItem = {
  __typename?: 'GraphOpenShiftItem';
  openSlotCount: Scalars['Int'];
  activities?: Maybe<Array<Maybe<GraphShiftActivity>>>;
  displayName?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  theme: GraphScheduleEntityTheme;
};

export type GraphOpenTypeExtension = GraphExtension & {
  __typename?: 'GraphOpenTypeExtension';
  extensionName: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphOperation = GraphEntity & {
  __typename?: 'GraphOperation';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastActionDateTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<GraphOperationStatus>;
  id: Scalars['String'];
};

export type GraphOperationError = {
  __typename?: 'GraphOperationError';
  code?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

export enum GraphOperationResult {
  Success = 'success',
  Failure = 'failure',
  Timeout = 'timeout',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphOperationStatus {
  NotStarted = 'NotStarted',
  Running = 'Running',
  Completed = 'Completed',
  Failed = 'Failed',
}

export type GraphOptionalClaim = {
  __typename?: 'GraphOptionalClaim';
  additionalProperties?: Maybe<Array<Maybe<Scalars['String']>>>;
  essential: Scalars['Boolean'];
  name: Scalars['String'];
  source?: Maybe<Scalars['String']>;
};

export type GraphOptionalClaimInput = {
  additionalProperties?: Maybe<Array<Maybe<Scalars['String']>>>;
  essential: Scalars['Boolean'];
  name: Scalars['String'];
  source?: Maybe<Scalars['String']>;
};

export type GraphOptionalClaims = {
  __typename?: 'GraphOptionalClaims';
  accessToken?: Maybe<Array<Maybe<GraphOptionalClaim>>>;
  idToken?: Maybe<Array<Maybe<GraphOptionalClaim>>>;
  saml2Token?: Maybe<Array<Maybe<GraphOptionalClaim>>>;
};

export type GraphOptionalClaimsInput = {
  accessToken?: Maybe<Array<Maybe<GraphOptionalClaimInput>>>;
  idToken?: Maybe<Array<Maybe<GraphOptionalClaimInput>>>;
  saml2Token?: Maybe<Array<Maybe<GraphOptionalClaimInput>>>;
};

export type GraphOrgContact = {
  __typename?: 'GraphOrgContact';
  addresses?: Maybe<Array<Maybe<GraphPhysicalOfficeAddress>>>;
  companyName?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningError>>>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  phones?: Maybe<Array<Maybe<GraphPhone>>>;
  proxyAddresses: Array<Maybe<Scalars['String']>>;
  surname?: Maybe<Scalars['String']>;
  directReports?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  directReportsById?: Maybe<GraphDirectoryObject>;
  manager?: Maybe<GraphDirectoryObject>;
  memberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  memberOfById?: Maybe<GraphDirectoryObject>;
  transitiveMemberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  transitiveMemberOfById?: Maybe<GraphDirectoryObject>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphOrgContact>>>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphOrgContactDirectReportsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOrgContactDirectReportsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOrgContactMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOrgContactMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOrgContactTransitiveMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOrgContactTransitiveMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOrgContactValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphOrgContactCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphOrgContactCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphOrgContactGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphOrgContactGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphOrgContactRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphOrgContactGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphOrgContactGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphOrgContactInput = {
  addresses?: Maybe<Array<Maybe<GraphPhysicalOfficeAddressInput>>>;
  companyName?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningErrorInput>>>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  phones?: Maybe<Array<Maybe<GraphPhoneInput>>>;
  proxyAddresses: Array<Maybe<Scalars['String']>>;
  surname?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphOrgContactUpdateInput = {
  addresses?: Maybe<Array<Maybe<GraphPhysicalOfficeAddressInput>>>;
  companyName?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningErrorInput>>>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  phones?: Maybe<Array<Maybe<GraphPhoneInput>>>;
  proxyAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  surname?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphOrganization = {
  __typename?: 'GraphOrganization';
  assignedPlans: Array<Maybe<GraphAssignedPlan>>;
  businessPhones: Array<Maybe<Scalars['String']>>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryLetterCode?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  marketingNotificationEmails: Array<Maybe<Scalars['String']>>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  postalCode?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  privacyProfile?: Maybe<GraphPrivacyProfile>;
  provisionedPlans: Array<Maybe<GraphProvisionedPlan>>;
  securityComplianceNotificationMails: Array<Maybe<Scalars['String']>>;
  securityComplianceNotificationPhones: Array<Maybe<Scalars['String']>>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  technicalNotificationMails: Array<Maybe<Scalars['String']>>;
  tenantType?: Maybe<Scalars['String']>;
  verifiedDomains: Array<Maybe<GraphVerifiedDomain>>;
  mobileDeviceManagementAuthority: GraphMdmAuthority;
  branding?: Maybe<GraphOrganizationalBranding>;
  certificateBasedAuthConfiguration?: Maybe<Array<Maybe<GraphCertificateBasedAuthConfiguration>>>;
  certificateBasedAuthConfigurationById?: Maybe<GraphCertificateBasedAuthConfiguration>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  rest?: Maybe<Scalars['JSON']>;
  setMobileDeviceManagementAuthority?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphOrganizationCertificateBasedAuthConfigurationArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOrganizationCertificateBasedAuthConfigurationByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOrganizationExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOrganizationExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOrganizationSetMobileDeviceManagementAuthorityArgs = {
  bindingParameter?: Maybe<GraphOrganizationInput>;
};

export type GraphOrganizationValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphOrganizationCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphOrganizationCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphOrganizationGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphOrganizationGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphOrganizationRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphOrganizationGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphOrganizationGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphOrganizationInput = {
  assignedPlans: Array<Maybe<GraphAssignedPlanInput>>;
  businessPhones: Array<Maybe<Scalars['String']>>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryLetterCode?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  marketingNotificationEmails: Array<Maybe<Scalars['String']>>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  postalCode?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  privacyProfile?: Maybe<GraphPrivacyProfileInput>;
  provisionedPlans: Array<Maybe<GraphProvisionedPlanInput>>;
  securityComplianceNotificationMails: Array<Maybe<Scalars['String']>>;
  securityComplianceNotificationPhones: Array<Maybe<Scalars['String']>>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  technicalNotificationMails: Array<Maybe<Scalars['String']>>;
  tenantType?: Maybe<Scalars['String']>;
  verifiedDomains: Array<Maybe<GraphVerifiedDomainInput>>;
  mobileDeviceManagementAuthority: GraphMdmAuthority;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphOrganizationUpdateInput = {
  assignedPlans?: Maybe<Array<Maybe<GraphAssignedPlanInput>>>;
  businessPhones?: Maybe<Array<Maybe<Scalars['String']>>>;
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryLetterCode?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  marketingNotificationEmails?: Maybe<Array<Maybe<Scalars['String']>>>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  postalCode?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  privacyProfile?: Maybe<GraphPrivacyProfileInput>;
  provisionedPlans?: Maybe<Array<Maybe<GraphProvisionedPlanInput>>>;
  securityComplianceNotificationMails?: Maybe<Array<Maybe<Scalars['String']>>>;
  securityComplianceNotificationPhones?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  technicalNotificationMails?: Maybe<Array<Maybe<Scalars['String']>>>;
  tenantType?: Maybe<Scalars['String']>;
  verifiedDomains?: Maybe<Array<Maybe<GraphVerifiedDomainInput>>>;
  mobileDeviceManagementAuthority?: Maybe<GraphMdmAuthority>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphOrganizationalBranding = GraphOrganizationalBrandingProperties & {
  __typename?: 'GraphOrganizationalBranding';
  localizations?: Maybe<Array<Maybe<GraphOrganizationalBrandingLocalization>>>;
  localizationsById?: Maybe<GraphOrganizationalBrandingLocalization>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['String']>;
  bannerLogo?: Maybe<Scalars['String']>;
  signInPageText?: Maybe<Scalars['String']>;
  squareLogo?: Maybe<Scalars['String']>;
  usernameHintText?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOrganizationalBrandingLocalizationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOrganizationalBrandingLocalizationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphOrganizationalBrandingLocalization = GraphOrganizationalBrandingProperties & {
  __typename?: 'GraphOrganizationalBrandingLocalization';
  rest?: Maybe<Scalars['JSON']>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['String']>;
  bannerLogo?: Maybe<Scalars['String']>;
  signInPageText?: Maybe<Scalars['String']>;
  squareLogo?: Maybe<Scalars['String']>;
  usernameHintText?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOrganizationalBrandingLocalizationInput = {
  rest?: Maybe<Scalars['JSON']>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['String']>;
  bannerLogo?: Maybe<Scalars['String']>;
  signInPageText?: Maybe<Scalars['String']>;
  squareLogo?: Maybe<Scalars['String']>;
  usernameHintText?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOrganizationalBrandingLocalizationUpdateInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphOrganizationalBrandingProperties = {
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['String']>;
  bannerLogo?: Maybe<Scalars['String']>;
  signInPageText?: Maybe<Scalars['String']>;
  squareLogo?: Maybe<Scalars['String']>;
  usernameHintText?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOrganizerMeetingInfo = GraphMeetingInfo & {
  __typename?: 'GraphOrganizerMeetingInfo';
  organizer: GraphIdentitySet;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphOutgoingCallOptions = GraphCallOptions & {
  __typename?: 'GraphOutgoingCallOptions';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphOutlookCategory = GraphEntity & {
  __typename?: 'GraphOutlookCategory';
  color?: Maybe<GraphCategoryColor>;
  displayName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphOutlookGeoCoordinates = {
  __typename?: 'GraphOutlookGeoCoordinates';
  accuracy?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  altitudeAccuracy?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type GraphOutlookGeoCoordinatesInput = {
  accuracy?: Maybe<Scalars['Float']>;
  altitude?: Maybe<Scalars['Float']>;
  altitudeAccuracy?: Maybe<Scalars['Float']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
};

export type GraphOutlookItem = {
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphOutlookUser = GraphEntity & {
  __typename?: 'GraphOutlookUser';
  masterCategories?: Maybe<Array<Maybe<GraphOutlookCategory>>>;
  masterCategoriesById?: Maybe<GraphOutlookCategory>;
  supportedLanguages?: Maybe<Array<Maybe<GraphLocaleInfo>>>;
  supportedTimeZones?: Maybe<Array<Maybe<GraphTimeZoneInformation>>>;
  id: Scalars['String'];
};

export type GraphOutlookUserMasterCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphOutlookUserMasterCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPackage = {
  __typename?: 'GraphPackage';
  type?: Maybe<Scalars['String']>;
};

export type GraphPackageInput = {
  type?: Maybe<Scalars['String']>;
};

export type GraphPageLinks = {
  __typename?: 'GraphPageLinks';
  oneNoteClientUrl?: Maybe<GraphExternalLink>;
  oneNoteWebUrl?: Maybe<GraphExternalLink>;
};

export type GraphPageLinksInput = {
  oneNoteClientUrl?: Maybe<GraphExternalLinkInput>;
  oneNoteWebUrl?: Maybe<GraphExternalLinkInput>;
};

export type GraphParentalControlSettings = {
  __typename?: 'GraphParentalControlSettings';
  countriesBlockedForMinors?: Maybe<Array<Maybe<Scalars['String']>>>;
  legalAgeGroupRule?: Maybe<Scalars['String']>;
};

export type GraphParentalControlSettingsInput = {
  countriesBlockedForMinors?: Maybe<Array<Maybe<Scalars['String']>>>;
  legalAgeGroupRule?: Maybe<Scalars['String']>;
};

export type GraphParticipant = GraphEntity & {
  __typename?: 'GraphParticipant';
  info: GraphParticipantInfo;
  isInLobby: Scalars['Boolean'];
  isMuted: Scalars['Boolean'];
  mediaStreams?: Maybe<Array<Maybe<GraphMediaStream>>>;
  recordingInfo?: Maybe<GraphRecordingInfo>;
  invite?: Maybe<Scalars['JSON']>;
  mute?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphParticipantInviteArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphParticipantInput>>>;
  participants: Array<Maybe<GraphInvitationParticipantInfoInput>>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphParticipantMuteArgs = {
  bindingParameter?: Maybe<GraphParticipantInput>;
  clientContext?: Maybe<Scalars['String']>;
};

export type GraphParticipantInfo = {
  __typename?: 'GraphParticipantInfo';
  countryCode?: Maybe<Scalars['String']>;
  endpointType?: Maybe<GraphEndpointType>;
  identity: GraphIdentitySet;
  languageId?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
};

export type GraphParticipantInfoInput = {
  countryCode?: Maybe<Scalars['String']>;
  endpointType?: Maybe<GraphEndpointType>;
  identity: GraphIdentitySetInput;
  languageId?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
};

export type GraphParticipantInput = {
  info: GraphParticipantInfoInput;
  isInLobby: Scalars['Boolean'];
  isMuted: Scalars['Boolean'];
  mediaStreams?: Maybe<Array<Maybe<GraphMediaStreamInput>>>;
  recordingInfo?: Maybe<GraphRecordingInfoInput>;
  id: Scalars['String'];
};

export type GraphPasswordCredential = {
  __typename?: 'GraphPasswordCredential';
  customKeyIdentifier?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  hint?: Maybe<Scalars['String']>;
  keyId?: Maybe<Scalars['GUID']>;
  secretText?: Maybe<Scalars['String']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphPasswordCredentialInput = {
  customKeyIdentifier?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  hint?: Maybe<Scalars['String']>;
  keyId?: Maybe<Scalars['GUID']>;
  secretText?: Maybe<Scalars['String']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphPasswordProfile = {
  __typename?: 'GraphPasswordProfile';
  forceChangePasswordNextSignIn?: Maybe<Scalars['Boolean']>;
  forceChangePasswordNextSignInWithMfa?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
};

export type GraphPasswordProfileInput = {
  forceChangePasswordNextSignIn?: Maybe<Scalars['Boolean']>;
  forceChangePasswordNextSignInWithMfa?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
};

export type GraphPatternedRecurrence = {
  __typename?: 'GraphPatternedRecurrence';
  pattern?: Maybe<GraphRecurrencePattern>;
  range?: Maybe<GraphRecurrenceRange>;
};

export type GraphPatternedRecurrenceInput = {
  pattern?: Maybe<GraphRecurrencePatternInput>;
  range?: Maybe<GraphRecurrenceRangeInput>;
};

export type GraphPendingContentUpdate = {
  __typename?: 'GraphPendingContentUpdate';
  queuedDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphPendingContentUpdateInput = {
  queuedDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphPendingOperations = {
  __typename?: 'GraphPendingOperations';
  pendingContentUpdate?: Maybe<GraphPendingContentUpdate>;
};

export type GraphPendingOperationsInput = {
  pendingContentUpdate?: Maybe<GraphPendingContentUpdateInput>;
};

export type GraphPermission = GraphEntity & {
  __typename?: 'GraphPermission';
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  grantedTo?: Maybe<GraphIdentitySet>;
  grantedToIdentities?: Maybe<Array<Maybe<GraphIdentitySet>>>;
  hasPassword?: Maybe<Scalars['Boolean']>;
  inheritedFrom?: Maybe<GraphItemReference>;
  invitation?: Maybe<GraphSharingInvitation>;
  link?: Maybe<GraphSharingLink>;
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  shareId?: Maybe<Scalars['String']>;
  grant?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphPermissionGrantArgs = {
  bindingParameter?: Maybe<GraphPermissionInput>;
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipients?: Maybe<Array<Maybe<GraphDriveRecipientInput>>>;
};

export enum GraphPermissionClassificationType {
  Low = 'low',
  Medium = 'medium',
  High = 'high',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPermissionGrantConditionSet = GraphEntity & {
  __typename?: 'GraphPermissionGrantConditionSet';
  clientApplicationIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientApplicationPublisherIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientApplicationsFromVerifiedPublisherOnly?: Maybe<Scalars['Boolean']>;
  clientApplicationTenantIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  permissionClassification?: Maybe<Scalars['String']>;
  permissions?: Maybe<Array<Maybe<Scalars['String']>>>;
  permissionType?: Maybe<GraphPermissionType>;
  resourceApplication?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPermissionGrantPolicy = GraphPolicyBase & {
  __typename?: 'GraphPermissionGrantPolicy';
  excludes?: Maybe<Array<Maybe<GraphPermissionGrantConditionSet>>>;
  excludesById?: Maybe<GraphPermissionGrantConditionSet>;
  includes?: Maybe<Array<Maybe<GraphPermissionGrantConditionSet>>>;
  includesById?: Maybe<GraphPermissionGrantConditionSet>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphPermissionGrantPolicyExcludesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPermissionGrantPolicyExcludesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPermissionGrantPolicyIncludesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPermissionGrantPolicyIncludesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPermissionGrantPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphPermissionGrantPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphPermissionGrantPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphPermissionGrantPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphPermissionGrantPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphPermissionGrantPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphPermissionGrantPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphPermissionGrantPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphPermissionInput = {
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  grantedTo?: Maybe<GraphIdentitySetInput>;
  grantedToIdentities?: Maybe<Array<Maybe<GraphIdentitySetInput>>>;
  hasPassword?: Maybe<Scalars['Boolean']>;
  inheritedFrom?: Maybe<GraphItemReferenceInput>;
  invitation?: Maybe<GraphSharingInvitationInput>;
  link?: Maybe<GraphSharingLinkInput>;
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  shareId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPermissionScope = {
  __typename?: 'GraphPermissionScope';
  adminConsentDescription?: Maybe<Scalars['String']>;
  adminConsentDisplayName?: Maybe<Scalars['String']>;
  id: Scalars['GUID'];
  isEnabled: Scalars['Boolean'];
  origin?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  userConsentDescription?: Maybe<Scalars['String']>;
  userConsentDisplayName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphPermissionScopeInput = {
  adminConsentDescription?: Maybe<Scalars['String']>;
  adminConsentDisplayName?: Maybe<Scalars['String']>;
  id: Scalars['GUID'];
  isEnabled: Scalars['Boolean'];
  origin?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  userConsentDescription?: Maybe<Scalars['String']>;
  userConsentDisplayName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export enum GraphPermissionType {
  Application = 'application',
  Delegated = 'delegated',
  DelegatedUserConsentable = 'delegatedUserConsentable',
}

export type GraphPersistentBrowserSessionControl = GraphConditionalAccessSessionControl & {
  __typename?: 'GraphPersistentBrowserSessionControl';
  mode?: Maybe<GraphPersistentBrowserSessionMode>;
  isEnabled?: Maybe<Scalars['Boolean']>;
};

export enum GraphPersistentBrowserSessionMode {
  Always = 'always',
  Never = 'never',
}

export type GraphPerson = GraphEntity & {
  __typename?: 'GraphPerson';
  birthday?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  imAddress?: Maybe<Scalars['String']>;
  isFavorite?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  personNotes?: Maybe<Scalars['String']>;
  personType?: Maybe<GraphPersonType>;
  phones?: Maybe<Array<Maybe<GraphPhone>>>;
  postalAddresses?: Maybe<Array<Maybe<GraphLocation>>>;
  profession?: Maybe<Scalars['String']>;
  scoredEmailAddresses?: Maybe<Array<Maybe<GraphScoredEmailAddress>>>;
  surname?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  websites?: Maybe<Array<Maybe<GraphWebsite>>>;
  yomiCompany?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPersonOrGroupColumn = {
  __typename?: 'GraphPersonOrGroupColumn';
  allowMultipleSelection?: Maybe<Scalars['Boolean']>;
  chooseFromType?: Maybe<Scalars['String']>;
  displayAs?: Maybe<Scalars['String']>;
};

export type GraphPersonType = {
  __typename?: 'GraphPersonType';
  class?: Maybe<Scalars['String']>;
  subclass?: Maybe<Scalars['String']>;
};

export type GraphPhone = {
  __typename?: 'GraphPhone';
  language?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  type?: Maybe<GraphPhoneType>;
};

export type GraphPhoneInput = {
  language?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  type?: Maybe<GraphPhoneType>;
};

export enum GraphPhoneType {
  Home = 'home',
  Business = 'business',
  Mobile = 'mobile',
  Other = 'other',
  Assistant = 'assistant',
  HomeFax = 'homeFax',
  BusinessFax = 'businessFax',
  OtherFax = 'otherFax',
  Pager = 'pager',
  Radio = 'radio',
}

export type GraphPhoto = {
  __typename?: 'GraphPhoto';
  cameraMake?: Maybe<Scalars['String']>;
  cameraModel?: Maybe<Scalars['String']>;
  exposureDenominator?: Maybe<Scalars['Float']>;
  exposureNumerator?: Maybe<Scalars['Float']>;
  fNumber?: Maybe<Scalars['Float']>;
  focalLength?: Maybe<Scalars['Float']>;
  iso?: Maybe<Scalars['Int']>;
  orientation?: Maybe<Scalars['Int']>;
  takenDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphPhotoInput = {
  cameraMake?: Maybe<Scalars['String']>;
  cameraModel?: Maybe<Scalars['String']>;
  exposureDenominator?: Maybe<Scalars['Float']>;
  exposureNumerator?: Maybe<Scalars['Float']>;
  fNumber?: Maybe<Scalars['Float']>;
  focalLength?: Maybe<Scalars['Float']>;
  iso?: Maybe<Scalars['Int']>;
  orientation?: Maybe<Scalars['Int']>;
  takenDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphPhysicalAddress = {
  __typename?: 'GraphPhysicalAddress';
  city?: Maybe<Scalars['String']>;
  countryOrRegion?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
};

export type GraphPhysicalAddressInput = {
  city?: Maybe<Scalars['String']>;
  countryOrRegion?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
};

export type GraphPhysicalOfficeAddress = {
  __typename?: 'GraphPhysicalOfficeAddress';
  city?: Maybe<Scalars['String']>;
  countryOrRegion?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
};

export type GraphPhysicalOfficeAddressInput = {
  city?: Maybe<Scalars['String']>;
  countryOrRegion?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
};

export type GraphPkcs12Certificate = GraphApiAuthenticationConfigurationBase & {
  __typename?: 'GraphPkcs12Certificate';
  password?: Maybe<Scalars['String']>;
  pkcs12Value?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPkcs12CertificateInformation = {
  __typename?: 'GraphPkcs12CertificateInformation';
  isActive: Scalars['Boolean'];
  notAfter: Scalars['BigInt'];
  notBefore: Scalars['BigInt'];
  thumbprint?: Maybe<Scalars['String']>;
};

export type GraphPlace = {
  address?: Maybe<GraphPhysicalAddress>;
  displayName: Scalars['String'];
  geoCoordinates?: Maybe<GraphOutlookGeoCoordinates>;
  phone?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPlaceInput = {
  address?: Maybe<GraphPhysicalAddressInput>;
  displayName: Scalars['String'];
  geoCoordinates?: Maybe<GraphOutlookGeoCoordinatesInput>;
  phone?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPlaceUpdateInput = {
  address?: Maybe<GraphPhysicalAddressInput>;
  displayName?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<GraphOutlookGeoCoordinatesInput>;
  phone?: Maybe<Scalars['String']>;
};

export type GraphPlanner = GraphEntity & {
  __typename?: 'GraphPlanner';
  buckets?: Maybe<Array<Maybe<GraphPlannerBucket>>>;
  bucketsById?: Maybe<GraphPlannerBucket>;
  plans?: Maybe<Array<Maybe<GraphPlannerPlan>>>;
  plansById?: Maybe<GraphPlannerPlan>;
  tasks?: Maybe<Array<Maybe<GraphPlannerTask>>>;
  tasksById?: Maybe<GraphPlannerTask>;
  id: Scalars['String'];
};

export type GraphPlannerBucketsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerBucketsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerPlansArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerPlansByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerTasksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerTasksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerAppliedCategories = {
  __typename?: 'GraphPlannerAppliedCategories';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPlannerAssignedToTaskBoardTaskFormat = GraphEntity & {
  __typename?: 'GraphPlannerAssignedToTaskBoardTaskFormat';
  orderHintsByAssignee?: Maybe<GraphPlannerOrderHintsByAssignee>;
  unassignedOrderHint?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPlannerAssignments = {
  __typename?: 'GraphPlannerAssignments';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPlannerBucket = GraphEntity & {
  __typename?: 'GraphPlannerBucket';
  name: Scalars['String'];
  orderHint?: Maybe<Scalars['String']>;
  planId?: Maybe<Scalars['String']>;
  tasks?: Maybe<Array<Maybe<GraphPlannerTask>>>;
  tasksById?: Maybe<GraphPlannerTask>;
  id: Scalars['String'];
};

export type GraphPlannerBucketTasksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerBucketTasksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerBucketTaskBoardTaskFormat = GraphEntity & {
  __typename?: 'GraphPlannerBucketTaskBoardTaskFormat';
  orderHint?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPlannerCategoryDescriptions = {
  __typename?: 'GraphPlannerCategoryDescriptions';
  category1?: Maybe<Scalars['String']>;
  category2?: Maybe<Scalars['String']>;
  category3?: Maybe<Scalars['String']>;
  category4?: Maybe<Scalars['String']>;
  category5?: Maybe<Scalars['String']>;
  category6?: Maybe<Scalars['String']>;
};

export type GraphPlannerChecklistItems = {
  __typename?: 'GraphPlannerChecklistItems';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPlannerExternalReferences = {
  __typename?: 'GraphPlannerExternalReferences';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPlannerGroup = GraphEntity & {
  __typename?: 'GraphPlannerGroup';
  plans?: Maybe<Array<Maybe<GraphPlannerPlan>>>;
  plansById?: Maybe<GraphPlannerPlan>;
  id: Scalars['String'];
};

export type GraphPlannerGroupPlansArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerGroupPlansByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerOrderHintsByAssignee = {
  __typename?: 'GraphPlannerOrderHintsByAssignee';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPlannerPlan = GraphEntity & {
  __typename?: 'GraphPlannerPlan';
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  owner?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  buckets?: Maybe<Array<Maybe<GraphPlannerBucket>>>;
  bucketsById?: Maybe<GraphPlannerBucket>;
  details?: Maybe<GraphPlannerPlanDetails>;
  tasks?: Maybe<Array<Maybe<GraphPlannerTask>>>;
  tasksById?: Maybe<GraphPlannerTask>;
  id: Scalars['String'];
};

export type GraphPlannerPlanBucketsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerPlanBucketsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerPlanTasksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerPlanTasksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerPlanDetails = GraphEntity & {
  __typename?: 'GraphPlannerPlanDetails';
  categoryDescriptions?: Maybe<GraphPlannerCategoryDescriptions>;
  sharedWith?: Maybe<GraphPlannerUserIds>;
  id: Scalars['String'];
};

export enum GraphPlannerPreviewType {
  Automatic = 'automatic',
  NoPreview = 'noPreview',
  Checklist = 'checklist',
  Description = 'description',
  Reference = 'reference',
}

export type GraphPlannerProgressTaskBoardTaskFormat = GraphEntity & {
  __typename?: 'GraphPlannerProgressTaskBoardTaskFormat';
  orderHint?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPlannerTask = GraphEntity & {
  __typename?: 'GraphPlannerTask';
  activeChecklistItemCount?: Maybe<Scalars['Int']>;
  appliedCategories?: Maybe<GraphPlannerAppliedCategories>;
  assigneePriority?: Maybe<Scalars['String']>;
  assignments?: Maybe<GraphPlannerAssignments>;
  bucketId?: Maybe<Scalars['String']>;
  checklistItemCount?: Maybe<Scalars['Int']>;
  completedBy?: Maybe<GraphIdentitySet>;
  completedDateTime?: Maybe<Scalars['DateTime']>;
  conversationThreadId?: Maybe<Scalars['String']>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  dueDateTime?: Maybe<Scalars['DateTime']>;
  hasDescription?: Maybe<Scalars['Boolean']>;
  orderHint?: Maybe<Scalars['String']>;
  percentComplete?: Maybe<Scalars['Int']>;
  planId?: Maybe<Scalars['String']>;
  previewType?: Maybe<GraphPlannerPreviewType>;
  referenceCount?: Maybe<Scalars['Int']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  assignedToTaskBoardFormat?: Maybe<GraphPlannerAssignedToTaskBoardTaskFormat>;
  bucketTaskBoardFormat?: Maybe<GraphPlannerBucketTaskBoardTaskFormat>;
  details?: Maybe<GraphPlannerTaskDetails>;
  progressTaskBoardFormat?: Maybe<GraphPlannerProgressTaskBoardTaskFormat>;
  id: Scalars['String'];
};

export type GraphPlannerTaskDetails = GraphEntity & {
  __typename?: 'GraphPlannerTaskDetails';
  checklist?: Maybe<GraphPlannerChecklistItems>;
  description?: Maybe<Scalars['String']>;
  previewType?: Maybe<GraphPlannerPreviewType>;
  references?: Maybe<GraphPlannerExternalReferences>;
  id: Scalars['String'];
};

export type GraphPlannerUser = GraphEntity & {
  __typename?: 'GraphPlannerUser';
  plans?: Maybe<Array<Maybe<GraphPlannerPlan>>>;
  plansById?: Maybe<GraphPlannerPlan>;
  tasks?: Maybe<Array<Maybe<GraphPlannerTask>>>;
  tasksById?: Maybe<GraphPlannerTask>;
  id: Scalars['String'];
};

export type GraphPlannerUserPlansArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerUserPlansByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerUserTasksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPlannerUserTasksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPlannerUserIds = {
  __typename?: 'GraphPlannerUserIds';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPolicyBase = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphPolicyBaseValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphPolicyBaseCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphPolicyBaseCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphPolicyBaseGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphPolicyBaseGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphPolicyBaseRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphPolicyBaseGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphPolicyBaseGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphPolicyPlatformType {
  Android = 'android',
  IOs = 'iOS',
  MacOs = 'macOS',
  WindowsPhone81 = 'windowsPhone81',
  Windows81AndLater = 'windows81AndLater',
  Windows10AndLater = 'windows10AndLater',
  AndroidWorkProfile = 'androidWorkProfile',
  All = 'all',
}

export type GraphPolicyRoot = GraphEntity & {
  __typename?: 'GraphPolicyRoot';
  authenticationMethodsPolicy?: Maybe<GraphAuthenticationMethodsPolicy>;
  authenticationFlowsPolicy?: Maybe<GraphAuthenticationFlowsPolicy>;
  activityBasedTimeoutPolicies?: Maybe<Array<Maybe<GraphActivityBasedTimeoutPolicy>>>;
  activityBasedTimeoutPoliciesById?: Maybe<GraphActivityBasedTimeoutPolicy>;
  authorizationPolicy?: Maybe<GraphAuthorizationPolicy>;
  claimsMappingPolicies?: Maybe<Array<Maybe<GraphClaimsMappingPolicy>>>;
  claimsMappingPoliciesById?: Maybe<GraphClaimsMappingPolicy>;
  homeRealmDiscoveryPolicies?: Maybe<Array<Maybe<GraphHomeRealmDiscoveryPolicy>>>;
  homeRealmDiscoveryPoliciesById?: Maybe<GraphHomeRealmDiscoveryPolicy>;
  permissionGrantPolicies?: Maybe<Array<Maybe<GraphPermissionGrantPolicy>>>;
  permissionGrantPoliciesById?: Maybe<GraphPermissionGrantPolicy>;
  tokenIssuancePolicies?: Maybe<Array<Maybe<GraphTokenIssuancePolicy>>>;
  tokenIssuancePoliciesById?: Maybe<GraphTokenIssuancePolicy>;
  tokenLifetimePolicies?: Maybe<Array<Maybe<GraphTokenLifetimePolicy>>>;
  tokenLifetimePoliciesById?: Maybe<GraphTokenLifetimePolicy>;
  featureRolloutPolicies?: Maybe<Array<Maybe<GraphFeatureRolloutPolicy>>>;
  featureRolloutPoliciesById?: Maybe<GraphFeatureRolloutPolicy>;
  adminConsentRequestPolicy?: Maybe<GraphAdminConsentRequestPolicy>;
  conditionalAccessPolicies?: Maybe<Array<Maybe<GraphConditionalAccessPolicy>>>;
  conditionalAccessPoliciesById?: Maybe<GraphConditionalAccessPolicy>;
  identitySecurityDefaultsEnforcementPolicy?: Maybe<GraphIdentitySecurityDefaultsEnforcementPolicy>;
  id: Scalars['String'];
};

export type GraphPolicyRootActivityBasedTimeoutPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootActivityBasedTimeoutPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPolicyRootClaimsMappingPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootClaimsMappingPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPolicyRootHomeRealmDiscoveryPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootHomeRealmDiscoveryPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPolicyRootPermissionGrantPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootPermissionGrantPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPolicyRootTokenIssuancePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootTokenIssuancePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPolicyRootTokenLifetimePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootTokenLifetimePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPolicyRootFeatureRolloutPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootFeatureRolloutPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPolicyRootConditionalAccessPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPolicyRootConditionalAccessPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPost = GraphOutlookItem & {
  __typename?: 'GraphPost';
  body?: Maybe<GraphItemBody>;
  conversationId?: Maybe<Scalars['String']>;
  conversationThreadId?: Maybe<Scalars['String']>;
  from: GraphRecipient;
  hasAttachments: Scalars['Boolean'];
  newParticipants: Array<Maybe<GraphRecipient>>;
  receivedDateTime: Scalars['DateTime'];
  sender?: Maybe<GraphRecipient>;
  attachments?: Maybe<Array<Maybe<GraphAttachment>>>;
  attachmentsById?: Maybe<GraphAttachment>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  inReplyTo?: Maybe<GraphPost>;
  multiValueExtendedProperties?: Maybe<Array<Maybe<GraphMultiValueLegacyExtendedProperty>>>;
  multiValueExtendedPropertiesById?: Maybe<GraphMultiValueLegacyExtendedProperty>;
  singleValueExtendedProperties?: Maybe<Array<Maybe<GraphSingleValueLegacyExtendedProperty>>>;
  singleValueExtendedPropertiesById?: Maybe<GraphSingleValueLegacyExtendedProperty>;
  rest?: Maybe<Scalars['JSON']>;
  forward?: Maybe<Scalars['JSON']>;
  reply?: Maybe<Scalars['JSON']>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphPostAttachmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPostAttachmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPostExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPostExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPostMultiValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPostMultiValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPostSingleValueExtendedPropertiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPostSingleValueExtendedPropertiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPostForwardArgs = {
  bindingParameter?: Maybe<GraphPostInput>;
  Comment?: Maybe<Scalars['String']>;
  ToRecipients: Array<Maybe<GraphRecipientInput>>;
};

export type GraphPostReplyArgs = {
  bindingParameter?: Maybe<GraphPostInput>;
  Post: GraphPostInput;
};

export type GraphPostInput = {
  body?: Maybe<GraphItemBodyInput>;
  conversationId?: Maybe<Scalars['String']>;
  conversationThreadId?: Maybe<Scalars['String']>;
  from: GraphRecipientInput;
  hasAttachments: Scalars['Boolean'];
  newParticipants: Array<Maybe<GraphRecipientInput>>;
  receivedDateTime: Scalars['DateTime'];
  sender?: Maybe<GraphRecipientInput>;
  rest?: Maybe<Scalars['JSON']>;
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  changeKey?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphPreAuthorizedApplication = {
  __typename?: 'GraphPreAuthorizedApplication';
  appId?: Maybe<Scalars['String']>;
  delegatedPermissionIds: Array<Maybe<Scalars['String']>>;
};

export type GraphPreAuthorizedApplicationInput = {
  appId?: Maybe<Scalars['String']>;
  delegatedPermissionIds: Array<Maybe<Scalars['String']>>;
};

export enum GraphPrereleaseFeatures {
  UserDefined = 'userDefined',
  SettingsOnly = 'settingsOnly',
  SettingsAndExperimentations = 'settingsAndExperimentations',
  NotAllowed = 'notAllowed',
}

export type GraphPresence = GraphEntity & {
  __typename?: 'GraphPresence';
  activity?: Maybe<Scalars['String']>;
  availability?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphPrint = {
  __typename?: 'GraphPrint';
  settings?: Maybe<GraphPrintSettings>;
  connectors?: Maybe<Array<Maybe<GraphPrintConnector>>>;
  connectorsById?: Maybe<GraphPrintConnector>;
  operations?: Maybe<Array<Maybe<GraphPrintOperation>>>;
  operationsById?: Maybe<GraphPrintOperation>;
  printers?: Maybe<Array<Maybe<GraphPrinter>>>;
  printersById?: Maybe<GraphPrinter>;
  services?: Maybe<Array<Maybe<GraphPrintService>>>;
  servicesById?: Maybe<GraphPrintService>;
  shares?: Maybe<Array<Maybe<GraphPrinterShare>>>;
  sharesById?: Maybe<GraphPrinterShare>;
  taskDefinitions?: Maybe<Array<Maybe<GraphPrintTaskDefinition>>>;
  taskDefinitionsById?: Maybe<GraphPrintTaskDefinition>;
};

export type GraphPrintConnectorsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintConnectorsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintPrintersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintPrintersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintServicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintServicesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintSharesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintSharesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintTaskDefinitionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintTaskDefinitionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintCertificateSigningRequestInput = {
  content: Scalars['String'];
  transportKey: Scalars['String'];
};

export enum GraphPrintColorMode {
  BlackAndWhite = 'blackAndWhite',
  Grayscale = 'grayscale',
  Color = 'color',
  Auto = 'auto',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrintConnector = GraphEntity & {
  __typename?: 'GraphPrintConnector';
  appVersion: Scalars['String'];
  displayName: Scalars['String'];
  fullyQualifiedDomainName: Scalars['String'];
  location?: Maybe<GraphPrinterLocation>;
  operatingSystem: Scalars['String'];
  registeredDateTime: Scalars['DateTime'];
  id: Scalars['String'];
};

export type GraphPrintDocument = GraphEntity & {
  __typename?: 'GraphPrintDocument';
  contentType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  createUploadSession?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphPrintDocumentCreateUploadSessionArgs = {
  bindingParameter?: Maybe<GraphPrintDocumentInput>;
  properties: GraphPrintDocumentUploadPropertiesInput;
};

export type GraphPrintDocumentInput = {
  contentType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  id: Scalars['String'];
};

export type GraphPrintDocumentUploadPropertiesInput = {
  contentType: Scalars['String'];
  documentName: Scalars['String'];
  size: Scalars['BigInt'];
};

export enum GraphPrintDuplexMode {
  FlipOnLongEdge = 'flipOnLongEdge',
  FlipOnShortEdge = 'flipOnShortEdge',
  OneSided = 'oneSided',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphPrintEvent {
  JobStarted = 'jobStarted',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphPrintFinishing {
  None = 'none',
  Staple = 'staple',
  Punch = 'punch',
  Cover = 'cover',
  Bind = 'bind',
  SaddleStitch = 'saddleStitch',
  StitchEdge = 'stitchEdge',
  StapleTopLeft = 'stapleTopLeft',
  StapleBottomLeft = 'stapleBottomLeft',
  StapleTopRight = 'stapleTopRight',
  StapleBottomRight = 'stapleBottomRight',
  StitchLeftEdge = 'stitchLeftEdge',
  StitchTopEdge = 'stitchTopEdge',
  StitchRightEdge = 'stitchRightEdge',
  StitchBottomEdge = 'stitchBottomEdge',
  StapleDualLeft = 'stapleDualLeft',
  StapleDualTop = 'stapleDualTop',
  StapleDualRight = 'stapleDualRight',
  StapleDualBottom = 'stapleDualBottom',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrintJob = GraphEntity & {
  __typename?: 'GraphPrintJob';
  configuration: GraphPrintJobConfiguration;
  createdBy?: Maybe<GraphUserIdentity>;
  createdDateTime: Scalars['DateTime'];
  isFetchable: Scalars['Boolean'];
  redirectedFrom?: Maybe<Scalars['String']>;
  redirectedTo?: Maybe<Scalars['String']>;
  status: GraphPrintJobStatus;
  documents?: Maybe<Array<Maybe<GraphPrintDocument>>>;
  documentsById?: Maybe<GraphPrintDocument>;
  tasks?: Maybe<Array<Maybe<GraphPrintTask>>>;
  tasksById?: Maybe<GraphPrintTask>;
  cancel?: Maybe<Scalars['JSON']>;
  abort?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Scalars['JSON']>;
  start?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphPrintJobDocumentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintJobDocumentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintJobTasksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintJobTasksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintJobCancelArgs = {
  bindingParameter?: Maybe<GraphPrintJobInput>;
};

export type GraphPrintJobAbortArgs = {
  bindingParameter?: Maybe<GraphPrintJobInput>;
  reason?: Maybe<Scalars['String']>;
};

export type GraphPrintJobRedirectArgs = {
  bindingParameter?: Maybe<GraphPrintJobInput>;
  destinationPrinterId: Scalars['String'];
  configuration?: Maybe<GraphPrintJobConfigurationInput>;
};

export type GraphPrintJobStartArgs = {
  bindingParameter?: Maybe<GraphPrintJobInput>;
};

export type GraphPrintJobConfiguration = {
  __typename?: 'GraphPrintJobConfiguration';
  collate?: Maybe<Scalars['Boolean']>;
  colorMode?: Maybe<GraphPrintColorMode>;
  copies?: Maybe<Scalars['Int']>;
  dpi?: Maybe<Scalars['Int']>;
  duplexMode?: Maybe<GraphPrintDuplexMode>;
  feedOrientation?: Maybe<GraphPrinterFeedOrientation>;
  finishings?: Maybe<Array<Maybe<GraphPrintFinishing>>>;
  fitPdfToPage?: Maybe<Scalars['Boolean']>;
  inputBin?: Maybe<Scalars['String']>;
  margin?: Maybe<GraphPrintMargin>;
  mediaSize?: Maybe<Scalars['String']>;
  mediaType?: Maybe<Scalars['String']>;
  multipageLayout?: Maybe<GraphPrintMultipageLayout>;
  orientation?: Maybe<GraphPrintOrientation>;
  outputBin?: Maybe<Scalars['String']>;
  pageRanges?: Maybe<Array<Maybe<GraphIntegerRange>>>;
  pagesPerSheet?: Maybe<Scalars['Int']>;
  quality?: Maybe<GraphPrintQuality>;
  scaling?: Maybe<GraphPrintScaling>;
};

export type GraphPrintJobConfigurationInput = {
  collate?: Maybe<Scalars['Boolean']>;
  colorMode?: Maybe<GraphPrintColorMode>;
  copies?: Maybe<Scalars['Int']>;
  dpi?: Maybe<Scalars['Int']>;
  duplexMode?: Maybe<GraphPrintDuplexMode>;
  feedOrientation?: Maybe<GraphPrinterFeedOrientation>;
  finishings?: Maybe<Array<Maybe<GraphPrintFinishing>>>;
  fitPdfToPage?: Maybe<Scalars['Boolean']>;
  inputBin?: Maybe<Scalars['String']>;
  margin?: Maybe<GraphPrintMarginInput>;
  mediaSize?: Maybe<Scalars['String']>;
  mediaType?: Maybe<Scalars['String']>;
  multipageLayout?: Maybe<GraphPrintMultipageLayout>;
  orientation?: Maybe<GraphPrintOrientation>;
  outputBin?: Maybe<Scalars['String']>;
  pageRanges?: Maybe<Array<Maybe<GraphIntegerRangeInput>>>;
  pagesPerSheet?: Maybe<Scalars['Int']>;
  quality?: Maybe<GraphPrintQuality>;
  scaling?: Maybe<GraphPrintScaling>;
};

export type GraphPrintJobInput = {
  configuration: GraphPrintJobConfigurationInput;
  createdBy?: Maybe<GraphUserIdentityInput>;
  createdDateTime: Scalars['DateTime'];
  isFetchable: Scalars['Boolean'];
  redirectedFrom?: Maybe<Scalars['String']>;
  redirectedTo?: Maybe<Scalars['String']>;
  status: GraphPrintJobStatusInput;
  id: Scalars['String'];
};

export enum GraphPrintJobProcessingState {
  Unknown = 'unknown',
  Pending = 'pending',
  Processing = 'processing',
  Paused = 'paused',
  Stopped = 'stopped',
  Completed = 'completed',
  Canceled = 'canceled',
  Aborted = 'aborted',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphPrintJobStateDetail {
  UploadPending = 'uploadPending',
  Transforming = 'transforming',
  CompletedSuccessfully = 'completedSuccessfully',
  CompletedWithWarnings = 'completedWithWarnings',
  CompletedWithErrors = 'completedWithErrors',
  ReleaseWait = 'releaseWait',
  Interpreting = 'interpreting',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrintJobStatus = {
  __typename?: 'GraphPrintJobStatus';
  description: Scalars['String'];
  details: Array<Maybe<GraphPrintJobStateDetail>>;
  isAcquiredByPrinter: Scalars['Boolean'];
  state: GraphPrintJobProcessingState;
};

export type GraphPrintJobStatusInput = {
  description: Scalars['String'];
  details: Array<Maybe<GraphPrintJobStateDetail>>;
  isAcquiredByPrinter: Scalars['Boolean'];
  state: GraphPrintJobProcessingState;
};

export type GraphPrintMargin = {
  __typename?: 'GraphPrintMargin';
  bottom?: Maybe<Scalars['Int']>;
  left?: Maybe<Scalars['Int']>;
  right?: Maybe<Scalars['Int']>;
  top?: Maybe<Scalars['Int']>;
};

export type GraphPrintMarginInput = {
  bottom?: Maybe<Scalars['Int']>;
  left?: Maybe<Scalars['Int']>;
  right?: Maybe<Scalars['Int']>;
  top?: Maybe<Scalars['Int']>;
};

export enum GraphPrintMultipageLayout {
  ClockwiseFromTopLeft = 'clockwiseFromTopLeft',
  CounterclockwiseFromTopLeft = 'counterclockwiseFromTopLeft',
  CounterclockwiseFromTopRight = 'counterclockwiseFromTopRight',
  ClockwiseFromTopRight = 'clockwiseFromTopRight',
  CounterclockwiseFromBottomLeft = 'counterclockwiseFromBottomLeft',
  ClockwiseFromBottomLeft = 'clockwiseFromBottomLeft',
  CounterclockwiseFromBottomRight = 'counterclockwiseFromBottomRight',
  ClockwiseFromBottomRight = 'clockwiseFromBottomRight',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrintOperation = {
  createdDateTime: Scalars['DateTime'];
  status: GraphPrintOperationStatus;
  id: Scalars['String'];
};

export enum GraphPrintOperationProcessingState {
  NotStarted = 'notStarted',
  Running = 'running',
  Succeeded = 'succeeded',
  Failed = 'failed',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrintOperationStatus = {
  __typename?: 'GraphPrintOperationStatus';
  description: Scalars['String'];
  state: GraphPrintOperationProcessingState;
};

export enum GraphPrintOrientation {
  Portrait = 'portrait',
  Landscape = 'landscape',
  ReverseLandscape = 'reverseLandscape',
  ReversePortrait = 'reversePortrait',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphPrintQuality {
  Low = 'low',
  Medium = 'medium',
  High = 'high',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphPrintScaling {
  Auto = 'auto',
  ShrinkToFit = 'shrinkToFit',
  Fill = 'fill',
  Fit = 'fit',
  None = 'none',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrintService = GraphEntity & {
  __typename?: 'GraphPrintService';
  endpoints?: Maybe<Array<Maybe<GraphPrintServiceEndpoint>>>;
  endpointsById?: Maybe<GraphPrintServiceEndpoint>;
  id: Scalars['String'];
};

export type GraphPrintServiceEndpointsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintServiceEndpointsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrintServiceEndpoint = GraphEntity & {
  __typename?: 'GraphPrintServiceEndpoint';
  displayName: Scalars['String'];
  uri: Scalars['String'];
  id: Scalars['String'];
};

export type GraphPrintSettings = {
  __typename?: 'GraphPrintSettings';
  documentConversionEnabled: Scalars['Boolean'];
};

export type GraphPrintTask = GraphEntity & {
  __typename?: 'GraphPrintTask';
  parentUrl: Scalars['String'];
  status: GraphPrintTaskStatus;
  definition: GraphPrintTaskDefinition;
  trigger: GraphPrintTaskTrigger;
  id: Scalars['String'];
};

export type GraphPrintTaskDefinition = GraphEntity & {
  __typename?: 'GraphPrintTaskDefinition';
  createdBy: GraphAppIdentity;
  displayName: Scalars['String'];
  tasks?: Maybe<Array<Maybe<GraphPrintTask>>>;
  tasksById?: Maybe<GraphPrintTask>;
  id: Scalars['String'];
};

export type GraphPrintTaskDefinitionTasksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrintTaskDefinitionTasksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphPrintTaskProcessingState {
  Pending = 'pending',
  Processing = 'processing',
  Completed = 'completed',
  Aborted = 'aborted',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrintTaskStatus = {
  __typename?: 'GraphPrintTaskStatus';
  description: Scalars['String'];
  state: GraphPrintTaskProcessingState;
};

export type GraphPrintTaskTrigger = GraphEntity & {
  __typename?: 'GraphPrintTaskTrigger';
  event: GraphPrintEvent;
  definition: GraphPrintTaskDefinition;
  id: Scalars['String'];
};

export type GraphPrintUsage = {
  completedBlackAndWhiteJobCount: Scalars['BigInt'];
  completedColorJobCount: Scalars['BigInt'];
  incompleteJobCount: Scalars['BigInt'];
  usageDate: Scalars['Date'];
  id: Scalars['String'];
};

export type GraphPrintUsageByPrinter = GraphPrintUsage & {
  __typename?: 'GraphPrintUsageByPrinter';
  printerId: Scalars['String'];
  completedBlackAndWhiteJobCount: Scalars['BigInt'];
  completedColorJobCount: Scalars['BigInt'];
  incompleteJobCount: Scalars['BigInt'];
  usageDate: Scalars['Date'];
  id: Scalars['String'];
};

export type GraphPrintUsageByUser = GraphPrintUsage & {
  __typename?: 'GraphPrintUsageByUser';
  userPrincipalName: Scalars['String'];
  completedBlackAndWhiteJobCount: Scalars['BigInt'];
  completedColorJobCount: Scalars['BigInt'];
  incompleteJobCount: Scalars['BigInt'];
  usageDate: Scalars['Date'];
  id: Scalars['String'];
};

export type GraphPrinter = GraphPrinterBase & {
  __typename?: 'GraphPrinter';
  hasPhysicalDevice: Scalars['Boolean'];
  isShared: Scalars['Boolean'];
  lastSeenDateTime?: Maybe<Scalars['DateTime']>;
  registeredDateTime: Scalars['DateTime'];
  connectors?: Maybe<Array<Maybe<GraphPrintConnector>>>;
  connectorsById?: Maybe<GraphPrintConnector>;
  shares?: Maybe<Array<Maybe<GraphPrinterShare>>>;
  sharesById?: Maybe<GraphPrinterShare>;
  taskTriggers?: Maybe<Array<Maybe<GraphPrintTaskTrigger>>>;
  taskTriggersById?: Maybe<GraphPrintTaskTrigger>;
  create?: Maybe<Scalars['JSON']>;
  restoreFactoryDefaults?: Maybe<Scalars['JSON']>;
  capabilities?: Maybe<GraphPrinterCapabilities>;
  defaults?: Maybe<GraphPrinterDefaults>;
  displayName: Scalars['String'];
  isAcceptingJobs?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphPrinterLocation>;
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  status: GraphPrinterStatus;
  jobs?: Maybe<Array<Maybe<GraphPrintJob>>>;
  jobsById?: Maybe<GraphPrintJob>;
  id: Scalars['String'];
};

export type GraphPrinterConnectorsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterConnectorsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterSharesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterSharesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterTaskTriggersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterTaskTriggersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterCreateArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphPrinterInput>>>;
  displayName: Scalars['String'];
  manufacturer: Scalars['String'];
  model: Scalars['String'];
  physicalDeviceId?: Maybe<Scalars['String']>;
  hasPhysicalDevice?: Maybe<Scalars['Boolean']>;
  certificateSigningRequest: GraphPrintCertificateSigningRequestInput;
  connectorId?: Maybe<Scalars['String']>;
};

export type GraphPrinterRestoreFactoryDefaultsArgs = {
  bindingParameter?: Maybe<GraphPrinterInput>;
};

export type GraphPrinterJobsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterJobsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterBase = {
  capabilities?: Maybe<GraphPrinterCapabilities>;
  defaults?: Maybe<GraphPrinterDefaults>;
  displayName: Scalars['String'];
  isAcceptingJobs?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphPrinterLocation>;
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  status: GraphPrinterStatus;
  jobs?: Maybe<Array<Maybe<GraphPrintJob>>>;
  jobsById?: Maybe<GraphPrintJob>;
  id: Scalars['String'];
};

export type GraphPrinterBaseJobsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterBaseJobsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterCapabilities = {
  __typename?: 'GraphPrinterCapabilities';
  bottomMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
  collation?: Maybe<Scalars['Boolean']>;
  colorModes?: Maybe<Array<Maybe<GraphPrintColorMode>>>;
  contentTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  copiesPerJob?: Maybe<GraphIntegerRange>;
  dpis?: Maybe<Array<Maybe<Scalars['Int']>>>;
  duplexModes?: Maybe<Array<Maybe<GraphPrintDuplexMode>>>;
  feedOrientations?: Maybe<Array<Maybe<GraphPrinterFeedOrientation>>>;
  finishings?: Maybe<Array<Maybe<GraphPrintFinishing>>>;
  inputBins?: Maybe<Array<Maybe<Scalars['String']>>>;
  isColorPrintingSupported?: Maybe<Scalars['Boolean']>;
  isPageRangeSupported?: Maybe<Scalars['Boolean']>;
  leftMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
  mediaColors?: Maybe<Array<Maybe<Scalars['String']>>>;
  mediaSizes?: Maybe<Array<Maybe<Scalars['String']>>>;
  mediaTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  multipageLayouts?: Maybe<Array<Maybe<GraphPrintMultipageLayout>>>;
  orientations?: Maybe<Array<Maybe<GraphPrintOrientation>>>;
  outputBins?: Maybe<Array<Maybe<Scalars['String']>>>;
  pagesPerSheet?: Maybe<Array<Maybe<Scalars['Int']>>>;
  qualities?: Maybe<Array<Maybe<GraphPrintQuality>>>;
  rightMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
  scalings?: Maybe<Array<Maybe<GraphPrintScaling>>>;
  supportsFitPdfToPage?: Maybe<Scalars['Boolean']>;
  topMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
};

export type GraphPrinterCapabilitiesInput = {
  bottomMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
  collation?: Maybe<Scalars['Boolean']>;
  colorModes?: Maybe<Array<Maybe<GraphPrintColorMode>>>;
  contentTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  copiesPerJob?: Maybe<GraphIntegerRangeInput>;
  dpis?: Maybe<Array<Maybe<Scalars['Int']>>>;
  duplexModes?: Maybe<Array<Maybe<GraphPrintDuplexMode>>>;
  feedOrientations?: Maybe<Array<Maybe<GraphPrinterFeedOrientation>>>;
  finishings?: Maybe<Array<Maybe<GraphPrintFinishing>>>;
  inputBins?: Maybe<Array<Maybe<Scalars['String']>>>;
  isColorPrintingSupported?: Maybe<Scalars['Boolean']>;
  isPageRangeSupported?: Maybe<Scalars['Boolean']>;
  leftMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
  mediaColors?: Maybe<Array<Maybe<Scalars['String']>>>;
  mediaSizes?: Maybe<Array<Maybe<Scalars['String']>>>;
  mediaTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  multipageLayouts?: Maybe<Array<Maybe<GraphPrintMultipageLayout>>>;
  orientations?: Maybe<Array<Maybe<GraphPrintOrientation>>>;
  outputBins?: Maybe<Array<Maybe<Scalars['String']>>>;
  pagesPerSheet?: Maybe<Array<Maybe<Scalars['Int']>>>;
  qualities?: Maybe<Array<Maybe<GraphPrintQuality>>>;
  rightMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
  scalings?: Maybe<Array<Maybe<GraphPrintScaling>>>;
  supportsFitPdfToPage?: Maybe<Scalars['Boolean']>;
  topMargins?: Maybe<Array<Maybe<Scalars['Int']>>>;
};

export type GraphPrinterCreateOperation = GraphPrintOperation & {
  __typename?: 'GraphPrinterCreateOperation';
  certificate?: Maybe<Scalars['String']>;
  printer?: Maybe<GraphPrinter>;
  createdDateTime: Scalars['DateTime'];
  status: GraphPrintOperationStatus;
  id: Scalars['String'];
};

export type GraphPrinterDefaults = {
  __typename?: 'GraphPrinterDefaults';
  colorMode?: Maybe<GraphPrintColorMode>;
  contentType?: Maybe<Scalars['String']>;
  copiesPerJob?: Maybe<Scalars['Int']>;
  dpi?: Maybe<Scalars['Int']>;
  duplexMode?: Maybe<GraphPrintDuplexMode>;
  finishings?: Maybe<Array<Maybe<GraphPrintFinishing>>>;
  fitPdfToPage?: Maybe<Scalars['Boolean']>;
  inputBin?: Maybe<Scalars['String']>;
  mediaColor?: Maybe<Scalars['String']>;
  mediaSize?: Maybe<Scalars['String']>;
  mediaType?: Maybe<Scalars['String']>;
  multipageLayout?: Maybe<GraphPrintMultipageLayout>;
  orientation?: Maybe<GraphPrintOrientation>;
  outputBin?: Maybe<Scalars['String']>;
  pagesPerSheet?: Maybe<Scalars['Int']>;
  quality?: Maybe<GraphPrintQuality>;
  scaling?: Maybe<GraphPrintScaling>;
};

export type GraphPrinterDefaultsInput = {
  colorMode?: Maybe<GraphPrintColorMode>;
  contentType?: Maybe<Scalars['String']>;
  copiesPerJob?: Maybe<Scalars['Int']>;
  dpi?: Maybe<Scalars['Int']>;
  duplexMode?: Maybe<GraphPrintDuplexMode>;
  finishings?: Maybe<Array<Maybe<GraphPrintFinishing>>>;
  fitPdfToPage?: Maybe<Scalars['Boolean']>;
  inputBin?: Maybe<Scalars['String']>;
  mediaColor?: Maybe<Scalars['String']>;
  mediaSize?: Maybe<Scalars['String']>;
  mediaType?: Maybe<Scalars['String']>;
  multipageLayout?: Maybe<GraphPrintMultipageLayout>;
  orientation?: Maybe<GraphPrintOrientation>;
  outputBin?: Maybe<Scalars['String']>;
  pagesPerSheet?: Maybe<Scalars['Int']>;
  quality?: Maybe<GraphPrintQuality>;
  scaling?: Maybe<GraphPrintScaling>;
};

export enum GraphPrinterFeedOrientation {
  LongEdgeFirst = 'longEdgeFirst',
  ShortEdgeFirst = 'shortEdgeFirst',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrinterInput = {
  hasPhysicalDevice: Scalars['Boolean'];
  isShared: Scalars['Boolean'];
  lastSeenDateTime?: Maybe<Scalars['DateTime']>;
  registeredDateTime: Scalars['DateTime'];
  capabilities?: Maybe<GraphPrinterCapabilitiesInput>;
  defaults?: Maybe<GraphPrinterDefaultsInput>;
  displayName: Scalars['String'];
  isAcceptingJobs?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphPrinterLocationInput>;
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  status: GraphPrinterStatusInput;
  id: Scalars['String'];
};

export type GraphPrinterLocation = {
  __typename?: 'GraphPrinterLocation';
  altitudeInMeters?: Maybe<Scalars['Int']>;
  building?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  countryOrRegion?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  floorDescription?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  organization?: Maybe<Array<Maybe<Scalars['String']>>>;
  postalCode?: Maybe<Scalars['String']>;
  roomDescription?: Maybe<Scalars['String']>;
  roomName?: Maybe<Scalars['String']>;
  site?: Maybe<Scalars['String']>;
  stateOrProvince?: Maybe<Scalars['String']>;
  streetAddress?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Array<Maybe<Scalars['String']>>>;
  subunit?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphPrinterLocationInput = {
  altitudeInMeters?: Maybe<Scalars['Int']>;
  building?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  countryOrRegion?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  floorDescription?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  organization?: Maybe<Array<Maybe<Scalars['String']>>>;
  postalCode?: Maybe<Scalars['String']>;
  roomDescription?: Maybe<Scalars['String']>;
  roomName?: Maybe<Scalars['String']>;
  site?: Maybe<Scalars['String']>;
  stateOrProvince?: Maybe<Scalars['String']>;
  streetAddress?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Array<Maybe<Scalars['String']>>>;
  subunit?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphPrinterProcessingState {
  Unknown = 'unknown',
  Idle = 'idle',
  Processing = 'processing',
  Stopped = 'stopped',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphPrinterProcessingStateDetail {
  Paused = 'paused',
  MediaJam = 'mediaJam',
  MediaNeeded = 'mediaNeeded',
  MediaLow = 'mediaLow',
  MediaEmpty = 'mediaEmpty',
  CoverOpen = 'coverOpen',
  InterlockOpen = 'interlockOpen',
  OutputTrayMissing = 'outputTrayMissing',
  OutputAreaFull = 'outputAreaFull',
  MarkerSupplyLow = 'markerSupplyLow',
  MarkerSupplyEmpty = 'markerSupplyEmpty',
  InputTrayMissing = 'inputTrayMissing',
  OutputAreaAlmostFull = 'outputAreaAlmostFull',
  MarkerWasteAlmostFull = 'markerWasteAlmostFull',
  MarkerWasteFull = 'markerWasteFull',
  FuserOverTemp = 'fuserOverTemp',
  FuserUnderTemp = 'fuserUnderTemp',
  Other = 'other',
  None = 'none',
  MovingToPaused = 'movingToPaused',
  Shutdown = 'shutdown',
  ConnectingToDevice = 'connectingToDevice',
  TimedOut = 'timedOut',
  Stopping = 'stopping',
  StoppedPartially = 'stoppedPartially',
  TonerLow = 'tonerLow',
  TonerEmpty = 'tonerEmpty',
  SpoolAreaFull = 'spoolAreaFull',
  DoorOpen = 'doorOpen',
  OpticalPhotoConductorNearEndOfLife = 'opticalPhotoConductorNearEndOfLife',
  OpticalPhotoConductorLifeOver = 'opticalPhotoConductorLifeOver',
  DeveloperLow = 'developerLow',
  DeveloperEmpty = 'developerEmpty',
  InterpreterResourceUnavailable = 'interpreterResourceUnavailable',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphPrinterShare = GraphPrinterBase & {
  __typename?: 'GraphPrinterShare';
  allowAllUsers: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  allowedGroups?: Maybe<Array<Maybe<GraphGroup>>>;
  allowedGroupsById?: Maybe<GraphGroup>;
  allowedUsers?: Maybe<Array<Maybe<GraphUser>>>;
  allowedUsersById?: Maybe<GraphUser>;
  printer?: Maybe<GraphPrinter>;
  capabilities?: Maybe<GraphPrinterCapabilities>;
  defaults?: Maybe<GraphPrinterDefaults>;
  displayName: Scalars['String'];
  isAcceptingJobs?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphPrinterLocation>;
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  status: GraphPrinterStatus;
  jobs?: Maybe<Array<Maybe<GraphPrintJob>>>;
  jobsById?: Maybe<GraphPrintJob>;
  id: Scalars['String'];
};

export type GraphPrinterShareAllowedGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterShareAllowedGroupsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterShareAllowedUsersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterShareAllowedUsersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterShareJobsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphPrinterShareJobsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphPrinterStatus = {
  __typename?: 'GraphPrinterStatus';
  description?: Maybe<Scalars['String']>;
  details: Array<Maybe<GraphPrinterProcessingStateDetail>>;
  state: GraphPrinterProcessingState;
};

export type GraphPrinterStatusInput = {
  description?: Maybe<Scalars['String']>;
  details: Array<Maybe<GraphPrinterProcessingStateDetail>>;
  state: GraphPrinterProcessingState;
};

export type GraphPrivacyProfile = {
  __typename?: 'GraphPrivacyProfile';
  contactEmail?: Maybe<Scalars['String']>;
  statementUrl?: Maybe<Scalars['String']>;
};

export type GraphPrivacyProfileInput = {
  contactEmail?: Maybe<Scalars['String']>;
  statementUrl?: Maybe<Scalars['String']>;
};

export type GraphProcess = {
  __typename?: 'GraphProcess';
  accountName?: Maybe<Scalars['String']>;
  commandLine?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  fileHash?: Maybe<GraphFileHash>;
  integrityLevel?: Maybe<GraphProcessIntegrityLevel>;
  isElevated?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  parentProcessCreatedDateTime?: Maybe<Scalars['DateTime']>;
  parentProcessId?: Maybe<Scalars['Int']>;
  parentProcessName?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  processId?: Maybe<Scalars['Int']>;
};

export enum GraphProcessIntegrityLevel {
  Unknown = 'unknown',
  Untrusted = 'untrusted',
  Low = 'low',
  Medium = 'medium',
  High = 'high',
  System = 'system',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphProfilePhoto = GraphEntity & {
  __typename?: 'GraphProfilePhoto';
  height?: Maybe<Scalars['Int']>;
  width?: Maybe<Scalars['Int']>;
  id: Scalars['String'];
};

export type GraphPromptInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphProvisionedIdentity = {
  __typename?: 'GraphProvisionedIdentity';
  details?: Maybe<GraphDetailsInfo>;
  identityType?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type GraphProvisionedPlan = {
  __typename?: 'GraphProvisionedPlan';
  capabilityStatus?: Maybe<Scalars['String']>;
  provisioningStatus?: Maybe<Scalars['String']>;
  service?: Maybe<Scalars['String']>;
};

export type GraphProvisionedPlanInput = {
  capabilityStatus?: Maybe<Scalars['String']>;
  provisioningStatus?: Maybe<Scalars['String']>;
  service?: Maybe<Scalars['String']>;
};

export enum GraphProvisioningAction {
  Other = 'other',
  Create = 'create',
  Delete = 'delete',
  Disable = 'disable',
  Update = 'update',
  StagedDelete = 'stagedDelete',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphProvisioningErrorInfo = {
  __typename?: 'GraphProvisioningErrorInfo';
  additionalDetails?: Maybe<Scalars['String']>;
  errorCategory?: Maybe<GraphProvisioningStatusErrorCategory>;
  errorCode?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  recommendedAction?: Maybe<Scalars['String']>;
};

export type GraphProvisioningObjectSummary = GraphEntity & {
  __typename?: 'GraphProvisioningObjectSummary';
  activityDateTime: Scalars['DateTime'];
  changeId?: Maybe<Scalars['String']>;
  cycleId?: Maybe<Scalars['String']>;
  durationInMilliseconds?: Maybe<Scalars['Int']>;
  initiatedBy?: Maybe<GraphInitiator>;
  jobId?: Maybe<Scalars['String']>;
  modifiedProperties?: Maybe<Array<Maybe<GraphModifiedProperty>>>;
  provisioningAction?: Maybe<GraphProvisioningAction>;
  provisioningStatusInfo?: Maybe<GraphProvisioningStatusInfo>;
  provisioningSteps?: Maybe<Array<Maybe<GraphProvisioningStep>>>;
  servicePrincipal?: Maybe<GraphProvisioningServicePrincipal>;
  sourceIdentity?: Maybe<GraphProvisionedIdentity>;
  sourceSystem?: Maybe<GraphProvisioningSystem>;
  targetIdentity?: Maybe<GraphProvisionedIdentity>;
  targetSystem?: Maybe<GraphProvisioningSystem>;
  tenantId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphProvisioningResult {
  Success = 'success',
  Failure = 'failure',
  Skipped = 'skipped',
  Warning = 'warning',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphProvisioningServicePrincipal = {
  __typename?: 'GraphProvisioningServicePrincipal';
  rest?: Maybe<Scalars['JSON']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export enum GraphProvisioningStatusErrorCategory {
  Failure = 'failure',
  NonServiceFailure = 'nonServiceFailure',
  Success = 'success',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphProvisioningStatusInfo = {
  __typename?: 'GraphProvisioningStatusInfo';
  errorInformation?: Maybe<GraphProvisioningErrorInfo>;
  status?: Maybe<GraphProvisioningResult>;
};

export type GraphProvisioningStep = {
  __typename?: 'GraphProvisioningStep';
  description?: Maybe<Scalars['String']>;
  details?: Maybe<GraphDetailsInfo>;
  name?: Maybe<Scalars['String']>;
  provisioningStepType?: Maybe<GraphProvisioningStepType>;
  status?: Maybe<GraphProvisioningResult>;
};

export enum GraphProvisioningStepType {
  Import = 'import',
  Scoping = 'scoping',
  Matching = 'matching',
  Processing = 'processing',
  ReferenceResolution = 'referenceResolution',
  Export = 'export',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphProvisioningSystem = {
  __typename?: 'GraphProvisioningSystem';
  details?: Maybe<GraphDetailsInfo>;
  rest?: Maybe<Scalars['JSON']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type GraphProxiedDomain = {
  __typename?: 'GraphProxiedDomain';
  ipAddressOrFQDN: Scalars['String'];
  proxy?: Maybe<Scalars['String']>;
};

export type GraphProxiedDomainInput = {
  ipAddressOrFQDN: Scalars['String'];
  proxy?: Maybe<Scalars['String']>;
};

export type GraphPublicClientApplication = {
  __typename?: 'GraphPublicClientApplication';
  redirectUris: Array<Maybe<Scalars['String']>>;
};

export type GraphPublicClientApplicationInput = {
  redirectUris: Array<Maybe<Scalars['String']>>;
};

export type GraphPublicError = {
  __typename?: 'GraphPublicError';
  code?: Maybe<Scalars['String']>;
  details?: Maybe<Array<Maybe<GraphPublicErrorDetail>>>;
  innerError?: Maybe<GraphPublicInnerError>;
  message?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
};

export type GraphPublicErrorDetail = {
  __typename?: 'GraphPublicErrorDetail';
  code?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
};

export type GraphPublicErrorDetailInput = {
  code?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
};

export type GraphPublicErrorInput = {
  code?: Maybe<Scalars['String']>;
  details?: Maybe<Array<Maybe<GraphPublicErrorDetailInput>>>;
  innerError?: Maybe<GraphPublicInnerErrorInput>;
  message?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
};

export type GraphPublicInnerError = {
  __typename?: 'GraphPublicInnerError';
  code?: Maybe<Scalars['String']>;
  details?: Maybe<Array<Maybe<GraphPublicErrorDetail>>>;
  message?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPublicInnerErrorInput = {
  code?: Maybe<Scalars['String']>;
  details?: Maybe<Array<Maybe<GraphPublicErrorDetailInput>>>;
  message?: Maybe<Scalars['String']>;
  target?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphPublicationFacet = {
  __typename?: 'GraphPublicationFacet';
  level?: Maybe<Scalars['String']>;
  versionId?: Maybe<Scalars['String']>;
};

export type GraphPublicationFacetInput = {
  level?: Maybe<Scalars['String']>;
  versionId?: Maybe<Scalars['String']>;
};

export type GraphQuota = {
  __typename?: 'GraphQuota';
  deleted?: Maybe<Scalars['BigInt']>;
  remaining?: Maybe<Scalars['BigInt']>;
  state?: Maybe<Scalars['String']>;
  storagePlanInformation?: Maybe<GraphStoragePlanInformation>;
  total?: Maybe<Scalars['BigInt']>;
  used?: Maybe<Scalars['BigInt']>;
};

export type GraphQuotaInput = {
  deleted?: Maybe<Scalars['BigInt']>;
  remaining?: Maybe<Scalars['BigInt']>;
  state?: Maybe<Scalars['String']>;
  storagePlanInformation?: Maybe<GraphStoragePlanInformationInput>;
  total?: Maybe<Scalars['BigInt']>;
  used?: Maybe<Scalars['BigInt']>;
};

export enum GraphRatingAppsType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  AgesAbove4 = 'agesAbove4',
  AgesAbove9 = 'agesAbove9',
  AgesAbove12 = 'agesAbove12',
  AgesAbove17 = 'agesAbove17',
}

export enum GraphRatingAustraliaMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  Mature = 'mature',
  AgesAbove15 = 'agesAbove15',
  AgesAbove18 = 'agesAbove18',
}

export enum GraphRatingAustraliaTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  Preschoolers = 'preschoolers',
  Children = 'children',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  Mature = 'mature',
  AgesAbove15 = 'agesAbove15',
  AgesAbove15AdultViolence = 'agesAbove15AdultViolence',
}

export enum GraphRatingCanadaMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  AgesAbove14 = 'agesAbove14',
  AgesAbove18 = 'agesAbove18',
  Restricted = 'restricted',
}

export enum GraphRatingCanadaTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  Children = 'children',
  ChildrenAbove8 = 'childrenAbove8',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  AgesAbove14 = 'agesAbove14',
  AgesAbove18 = 'agesAbove18',
}

export enum GraphRatingFranceMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  AgesAbove10 = 'agesAbove10',
  AgesAbove12 = 'agesAbove12',
  AgesAbove16 = 'agesAbove16',
  AgesAbove18 = 'agesAbove18',
}

export enum GraphRatingFranceTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  AgesAbove10 = 'agesAbove10',
  AgesAbove12 = 'agesAbove12',
  AgesAbove16 = 'agesAbove16',
  AgesAbove18 = 'agesAbove18',
}

export enum GraphRatingGermanyMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  AgesAbove6 = 'agesAbove6',
  AgesAbove12 = 'agesAbove12',
  AgesAbove16 = 'agesAbove16',
  Adults = 'adults',
}

export enum GraphRatingGermanyTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  AgesAbove6 = 'agesAbove6',
  AgesAbove12 = 'agesAbove12',
  AgesAbove16 = 'agesAbove16',
  Adults = 'adults',
}

export enum GraphRatingIrelandMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  AgesAbove12 = 'agesAbove12',
  AgesAbove15 = 'agesAbove15',
  AgesAbove16 = 'agesAbove16',
  Adults = 'adults',
}

export enum GraphRatingIrelandTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  Children = 'children',
  YoungAdults = 'youngAdults',
  ParentalSupervision = 'parentalSupervision',
  Mature = 'mature',
}

export enum GraphRatingJapanMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  AgesAbove15 = 'agesAbove15',
  AgesAbove18 = 'agesAbove18',
}

export enum GraphRatingJapanTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  ExplicitAllowed = 'explicitAllowed',
}

export enum GraphRatingNewZealandMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  Mature = 'mature',
  AgesAbove13 = 'agesAbove13',
  AgesAbove15 = 'agesAbove15',
  AgesAbove16 = 'agesAbove16',
  AgesAbove18 = 'agesAbove18',
  Restricted = 'restricted',
  AgesAbove16Restricted = 'agesAbove16Restricted',
}

export enum GraphRatingNewZealandTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  Adults = 'adults',
}

export enum GraphRatingUnitedKingdomMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  UniversalChildren = 'universalChildren',
  ParentalGuidance = 'parentalGuidance',
  AgesAbove12Video = 'agesAbove12Video',
  AgesAbove12Cinema = 'agesAbove12Cinema',
  AgesAbove15 = 'agesAbove15',
  Adults = 'adults',
}

export enum GraphRatingUnitedKingdomTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  Caution = 'caution',
}

export enum GraphRatingUnitedStatesMoviesType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  ParentalGuidance13 = 'parentalGuidance13',
  Restricted = 'restricted',
  Adults = 'adults',
}

export enum GraphRatingUnitedStatesTelevisionType {
  AllAllowed = 'allAllowed',
  AllBlocked = 'allBlocked',
  ChildrenAll = 'childrenAll',
  ChildrenAbove7 = 'childrenAbove7',
  General = 'general',
  ParentalGuidance = 'parentalGuidance',
  ChildrenAbove14 = 'childrenAbove14',
  Adults = 'adults',
}

export type GraphRbacApplication = GraphEntity & {
  __typename?: 'GraphRbacApplication';
  roleAssignments?: Maybe<Array<Maybe<GraphUnifiedRoleAssignment>>>;
  roleAssignmentsById?: Maybe<GraphUnifiedRoleAssignment>;
  roleDefinitions?: Maybe<Array<Maybe<GraphUnifiedRoleDefinition>>>;
  roleDefinitionsById?: Maybe<GraphUnifiedRoleDefinition>;
  id: Scalars['String'];
};

export type GraphRbacApplicationRoleAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphRbacApplicationRoleAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphRbacApplicationRoleDefinitionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphRbacApplicationRoleDefinitionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphRecentNotebook = {
  __typename?: 'GraphRecentNotebook';
  displayName?: Maybe<Scalars['String']>;
  lastAccessedTime?: Maybe<Scalars['DateTime']>;
  links?: Maybe<GraphRecentNotebookLinks>;
  sourceService?: Maybe<GraphOnenoteSourceService>;
};

export type GraphRecentNotebookLinks = {
  __typename?: 'GraphRecentNotebookLinks';
  oneNoteClientUrl?: Maybe<GraphExternalLink>;
  oneNoteWebUrl?: Maybe<GraphExternalLink>;
};

export type GraphRecipient = {
  __typename?: 'GraphRecipient';
  emailAddress?: Maybe<GraphEmailAddress>;
};

export type GraphRecipientInput = {
  emailAddress?: Maybe<GraphEmailAddressInput>;
};

export type GraphRecordingInfo = {
  __typename?: 'GraphRecordingInfo';
  initiator?: Maybe<GraphIdentitySet>;
  recordingStatus: GraphRecordingStatus;
};

export type GraphRecordingInfoInput = {
  initiator?: Maybe<GraphIdentitySetInput>;
  recordingStatus: GraphRecordingStatus;
};

export enum GraphRecordingStatus {
  Unknown = 'unknown',
  NotRecording = 'notRecording',
  Recording = 'recording',
  Failed = 'failed',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphRecurrencePattern = {
  __typename?: 'GraphRecurrencePattern';
  dayOfMonth: Scalars['Int'];
  daysOfWeek?: Maybe<Array<Maybe<GraphDayOfWeek>>>;
  firstDayOfWeek?: Maybe<GraphDayOfWeek>;
  index?: Maybe<GraphWeekIndex>;
  interval: Scalars['Int'];
  month: Scalars['Int'];
  type?: Maybe<GraphRecurrencePatternType>;
};

export type GraphRecurrencePatternInput = {
  dayOfMonth: Scalars['Int'];
  daysOfWeek?: Maybe<Array<Maybe<GraphDayOfWeek>>>;
  firstDayOfWeek?: Maybe<GraphDayOfWeek>;
  index?: Maybe<GraphWeekIndex>;
  interval: Scalars['Int'];
  month: Scalars['Int'];
  type?: Maybe<GraphRecurrencePatternType>;
};

export enum GraphRecurrencePatternType {
  Daily = 'daily',
  Weekly = 'weekly',
  AbsoluteMonthly = 'absoluteMonthly',
  RelativeMonthly = 'relativeMonthly',
  AbsoluteYearly = 'absoluteYearly',
  RelativeYearly = 'relativeYearly',
}

export type GraphRecurrenceRange = {
  __typename?: 'GraphRecurrenceRange';
  endDate?: Maybe<Scalars['Date']>;
  numberOfOccurrences: Scalars['Int'];
  recurrenceTimeZone?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['Date']>;
  type?: Maybe<GraphRecurrenceRangeType>;
};

export type GraphRecurrenceRangeInput = {
  endDate?: Maybe<Scalars['Date']>;
  numberOfOccurrences: Scalars['Int'];
  recurrenceTimeZone?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['Date']>;
  type?: Maybe<GraphRecurrenceRangeType>;
};

export enum GraphRecurrenceRangeType {
  EndDate = 'endDate',
  NoEnd = 'noEnd',
  Numbered = 'numbered',
}

export type GraphReferenceAttachment = GraphAttachment & {
  __typename?: 'GraphReferenceAttachment';
  rest?: Maybe<Scalars['JSON']>;
  contentType?: Maybe<Scalars['String']>;
  isInline: Scalars['Boolean'];
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  size: Scalars['Int'];
  createUploadSession?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphReferenceAttachmentCreateUploadSessionArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphAttachmentInput>>>;
  AttachmentItem: GraphAttachmentItemInput;
};

export enum GraphRegistryHive {
  Unknown = 'unknown',
  CurrentConfig = 'currentConfig',
  CurrentUser = 'currentUser',
  LocalMachineSam = 'localMachineSam',
  LocalMachineSecurity = 'localMachineSecurity',
  LocalMachineSoftware = 'localMachineSoftware',
  LocalMachineSystem = 'localMachineSystem',
  UsersDefault = 'usersDefault',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphRegistryKeyState = {
  __typename?: 'GraphRegistryKeyState';
  hive?: Maybe<GraphRegistryHive>;
  key?: Maybe<Scalars['String']>;
  oldKey?: Maybe<Scalars['String']>;
  oldValueData?: Maybe<Scalars['String']>;
  oldValueName?: Maybe<Scalars['String']>;
  operation?: Maybe<GraphRegistryOperation>;
  processId?: Maybe<Scalars['Int']>;
  valueData?: Maybe<Scalars['String']>;
  valueName?: Maybe<Scalars['String']>;
  valueType?: Maybe<GraphRegistryValueType>;
};

export enum GraphRegistryOperation {
  Unknown = 'unknown',
  Create = 'create',
  Modify = 'modify',
  Delete = 'delete',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphRegistryValueType {
  Unknown = 'unknown',
  Binary = 'binary',
  Dword = 'dword',
  DwordLittleEndian = 'dwordLittleEndian',
  DwordBigEndian = 'dwordBigEndian',
  ExpandSz = 'expandSz',
  Link = 'link',
  MultiSz = 'multiSz',
  None = 'none',
  Qword = 'qword',
  QwordlittleEndian = 'qwordlittleEndian',
  Sz = 'sz',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphRejectReason {
  None = 'none',
  Busy = 'busy',
  Forbidden = 'forbidden',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphReminder = {
  __typename?: 'GraphReminder';
  changeKey?: Maybe<Scalars['String']>;
  eventEndTime?: Maybe<GraphDateTimeTimeZone>;
  eventId?: Maybe<Scalars['String']>;
  eventLocation?: Maybe<GraphLocation>;
  eventStartTime?: Maybe<GraphDateTimeTimeZone>;
  eventSubject?: Maybe<Scalars['String']>;
  eventWebLink?: Maybe<Scalars['String']>;
  reminderFireTime?: Maybe<GraphDateTimeTimeZone>;
};

export enum GraphRemoteAssistanceOnboardingStatus {
  NotOnboarded = 'notOnboarded',
  Onboarding = 'onboarding',
  Onboarded = 'onboarded',
}

export type GraphRemoteAssistancePartner = GraphEntity & {
  __typename?: 'GraphRemoteAssistancePartner';
  displayName?: Maybe<Scalars['String']>;
  lastConnectionDateTime: Scalars['DateTime'];
  onboardingStatus: GraphRemoteAssistanceOnboardingStatus;
  onboardingUrl?: Maybe<Scalars['String']>;
  beginOnboarding?: Maybe<Scalars['JSON']>;
  disconnect?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphRemoteAssistancePartnerBeginOnboardingArgs = {
  bindingParameter?: Maybe<GraphRemoteAssistancePartnerInput>;
};

export type GraphRemoteAssistancePartnerDisconnectArgs = {
  bindingParameter?: Maybe<GraphRemoteAssistancePartnerInput>;
};

export type GraphRemoteAssistancePartnerInput = {
  displayName?: Maybe<Scalars['String']>;
  lastConnectionDateTime: Scalars['DateTime'];
  onboardingStatus: GraphRemoteAssistanceOnboardingStatus;
  onboardingUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphRemoteItem = {
  __typename?: 'GraphRemoteItem';
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  file?: Maybe<GraphFile>;
  fileSystemInfo?: Maybe<GraphFileSystemInfo>;
  folder?: Maybe<GraphFolder>;
  id?: Maybe<Scalars['String']>;
  image?: Maybe<GraphImage>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  package?: Maybe<GraphPackage>;
  parentReference?: Maybe<GraphItemReference>;
  shared?: Maybe<GraphShared>;
  sharepointIds?: Maybe<GraphSharepointIds>;
  size?: Maybe<Scalars['BigInt']>;
  specialFolder?: Maybe<GraphSpecialFolder>;
  video?: Maybe<GraphVideo>;
  webDavUrl?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
};

export type GraphRemoteItemInput = {
  createdBy?: Maybe<GraphIdentitySetInput>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  file?: Maybe<GraphFileInput>;
  fileSystemInfo?: Maybe<GraphFileSystemInfoInput>;
  folder?: Maybe<GraphFolderInput>;
  id?: Maybe<Scalars['String']>;
  image?: Maybe<GraphImageInput>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  package?: Maybe<GraphPackageInput>;
  parentReference?: Maybe<GraphItemReferenceInput>;
  shared?: Maybe<GraphSharedInput>;
  sharepointIds?: Maybe<GraphSharepointIdsInput>;
  size?: Maybe<Scalars['BigInt']>;
  specialFolder?: Maybe<GraphSpecialFolderInput>;
  video?: Maybe<GraphVideoInput>;
  webDavUrl?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
};

export type GraphRemoveAccessApplyAction = GraphAccessReviewApplyAction & {
  __typename?: 'GraphRemoveAccessApplyAction';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphReport = {
  __typename?: 'GraphReport';
  content?: Maybe<Scalars['String']>;
};

export type GraphReportRoot = GraphEntity & {
  __typename?: 'GraphReportRoot';
  dailyPrintUsageByPrinter?: Maybe<Array<Maybe<GraphPrintUsageByPrinter>>>;
  dailyPrintUsageByPrinterById?: Maybe<GraphPrintUsageByPrinter>;
  dailyPrintUsageByUser?: Maybe<Array<Maybe<GraphPrintUsageByUser>>>;
  dailyPrintUsageByUserById?: Maybe<GraphPrintUsageByUser>;
  monthlyPrintUsageByPrinter?: Maybe<Array<Maybe<GraphPrintUsageByPrinter>>>;
  monthlyPrintUsageByPrinterById?: Maybe<GraphPrintUsageByPrinter>;
  monthlyPrintUsageByUser?: Maybe<Array<Maybe<GraphPrintUsageByUser>>>;
  monthlyPrintUsageByUserById?: Maybe<GraphPrintUsageByUser>;
  deviceConfigurationDeviceActivity?: Maybe<GraphReport>;
  deviceConfigurationUserActivity?: Maybe<GraphReport>;
  managedDeviceEnrollmentFailureDetails?: Maybe<GraphReport>;
  managedDeviceEnrollmentTopFailures?: Maybe<GraphReport>;
  getEmailActivityCounts?: Maybe<GraphReport>;
  getEmailActivityUserCounts?: Maybe<GraphReport>;
  getEmailActivityUserDetail?: Maybe<GraphReport>;
  getEmailAppUsageAppsUserCounts?: Maybe<GraphReport>;
  getEmailAppUsageUserCounts?: Maybe<GraphReport>;
  getEmailAppUsageUserDetail?: Maybe<GraphReport>;
  getEmailAppUsageVersionsUserCounts?: Maybe<GraphReport>;
  getMailboxUsageDetail?: Maybe<GraphReport>;
  getMailboxUsageMailboxCounts?: Maybe<GraphReport>;
  getMailboxUsageQuotaStatusMailboxCounts?: Maybe<GraphReport>;
  getMailboxUsageStorage?: Maybe<GraphReport>;
  getOffice365ActivationCounts?: Maybe<GraphReport>;
  getOffice365ActivationsUserCounts?: Maybe<GraphReport>;
  getOffice365ActivationsUserDetail?: Maybe<GraphReport>;
  getOffice365ActiveUserCounts?: Maybe<GraphReport>;
  getOffice365ActiveUserDetail?: Maybe<GraphReport>;
  getOffice365GroupsActivityCounts?: Maybe<GraphReport>;
  getOffice365GroupsActivityDetail?: Maybe<GraphReport>;
  getOffice365GroupsActivityFileCounts?: Maybe<GraphReport>;
  getOffice365GroupsActivityGroupCounts?: Maybe<GraphReport>;
  getOffice365GroupsActivityStorage?: Maybe<GraphReport>;
  getOffice365ServicesUserCounts?: Maybe<GraphReport>;
  getOneDriveActivityFileCounts?: Maybe<GraphReport>;
  getOneDriveActivityUserCounts?: Maybe<GraphReport>;
  getOneDriveActivityUserDetail?: Maybe<GraphReport>;
  getOneDriveUsageAccountCounts?: Maybe<GraphReport>;
  getOneDriveUsageAccountDetail?: Maybe<GraphReport>;
  getOneDriveUsageFileCounts?: Maybe<GraphReport>;
  getOneDriveUsageStorage?: Maybe<GraphReport>;
  getSharePointActivityFileCounts?: Maybe<GraphReport>;
  getSharePointActivityPages?: Maybe<GraphReport>;
  getSharePointActivityUserCounts?: Maybe<GraphReport>;
  getSharePointActivityUserDetail?: Maybe<GraphReport>;
  getSharePointSiteUsageDetail?: Maybe<GraphReport>;
  getSharePointSiteUsageFileCounts?: Maybe<GraphReport>;
  getSharePointSiteUsagePages?: Maybe<GraphReport>;
  getSharePointSiteUsageSiteCounts?: Maybe<GraphReport>;
  getSharePointSiteUsageStorage?: Maybe<GraphReport>;
  getSkypeForBusinessActivityCounts?: Maybe<GraphReport>;
  getSkypeForBusinessActivityUserCounts?: Maybe<GraphReport>;
  getSkypeForBusinessActivityUserDetail?: Maybe<GraphReport>;
  getSkypeForBusinessDeviceUsageDistributionUserCounts?: Maybe<GraphReport>;
  getSkypeForBusinessDeviceUsageUserCounts?: Maybe<GraphReport>;
  getSkypeForBusinessDeviceUsageUserDetail?: Maybe<GraphReport>;
  getSkypeForBusinessOrganizerActivityCounts?: Maybe<GraphReport>;
  getSkypeForBusinessOrganizerActivityMinuteCounts?: Maybe<GraphReport>;
  getSkypeForBusinessOrganizerActivityUserCounts?: Maybe<GraphReport>;
  getSkypeForBusinessParticipantActivityCounts?: Maybe<GraphReport>;
  getSkypeForBusinessParticipantActivityMinuteCounts?: Maybe<GraphReport>;
  getSkypeForBusinessParticipantActivityUserCounts?: Maybe<GraphReport>;
  getSkypeForBusinessPeerToPeerActivityCounts?: Maybe<GraphReport>;
  getSkypeForBusinessPeerToPeerActivityMinuteCounts?: Maybe<GraphReport>;
  getSkypeForBusinessPeerToPeerActivityUserCounts?: Maybe<GraphReport>;
  getTeamsDeviceUsageDistributionUserCounts?: Maybe<GraphReport>;
  getTeamsDeviceUsageUserCounts?: Maybe<GraphReport>;
  getTeamsDeviceUsageUserDetail?: Maybe<GraphReport>;
  getTeamsUserActivityCounts?: Maybe<GraphReport>;
  getTeamsUserActivityUserCounts?: Maybe<GraphReport>;
  getTeamsUserActivityUserDetail?: Maybe<GraphReport>;
  getYammerActivityCounts?: Maybe<GraphReport>;
  getYammerActivityUserCounts?: Maybe<GraphReport>;
  getYammerActivityUserDetail?: Maybe<GraphReport>;
  getYammerDeviceUsageDistributionUserCounts?: Maybe<GraphReport>;
  getYammerDeviceUsageUserCounts?: Maybe<GraphReport>;
  getYammerDeviceUsageUserDetail?: Maybe<GraphReport>;
  getYammerGroupsActivityCounts?: Maybe<GraphReport>;
  getYammerGroupsActivityDetail?: Maybe<GraphReport>;
  getYammerGroupsActivityGroupCounts?: Maybe<GraphReport>;
  getGroupArchivedPrintJobs?: Maybe<Array<Maybe<GraphArchivedPrintJob>>>;
  getPrinterArchivedPrintJobs?: Maybe<Array<Maybe<GraphArchivedPrintJob>>>;
  getUserArchivedPrintJobs?: Maybe<Array<Maybe<GraphArchivedPrintJob>>>;
  id: Scalars['String'];
};

export type GraphReportRootDailyPrintUsageByPrinterArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphReportRootDailyPrintUsageByPrinterByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphReportRootDailyPrintUsageByUserArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphReportRootDailyPrintUsageByUserByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphReportRootMonthlyPrintUsageByPrinterArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphReportRootMonthlyPrintUsageByPrinterByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphReportRootMonthlyPrintUsageByUserArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphReportRootMonthlyPrintUsageByUserByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphRequest = GraphEntity & {
  __typename?: 'GraphRequest';
  approvalId?: Maybe<Scalars['String']>;
  completedDateTime?: Maybe<Scalars['DateTime']>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  customData?: Maybe<Scalars['String']>;
  status: Scalars['String'];
  id: Scalars['String'];
};

export enum GraphRequiredPasswordType {
  DeviceDefault = 'deviceDefault',
  Alphanumeric = 'alphanumeric',
  Numeric = 'numeric',
}

export type GraphRequiredResourceAccess = {
  __typename?: 'GraphRequiredResourceAccess';
  resourceAccess: Array<Maybe<GraphResourceAccess>>;
  resourceAppId: Scalars['String'];
};

export type GraphRequiredResourceAccessInput = {
  resourceAccess: Array<Maybe<GraphResourceAccessInput>>;
  resourceAppId: Scalars['String'];
};

export type GraphResourceAccess = {
  __typename?: 'GraphResourceAccess';
  id: Scalars['GUID'];
  type?: Maybe<Scalars['String']>;
};

export type GraphResourceAccessInput = {
  id: Scalars['GUID'];
  type?: Maybe<Scalars['String']>;
};

export type GraphResourceAction = {
  __typename?: 'GraphResourceAction';
  allowedResourceActions?: Maybe<Array<Maybe<Scalars['String']>>>;
  notAllowedResourceActions?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphResourceOperation = GraphEntity & {
  __typename?: 'GraphResourceOperation';
  actionName?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  resourceName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphResourceReference = {
  __typename?: 'GraphResourceReference';
  id?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
};

export type GraphResourceSpecificPermissionGrant = {
  __typename?: 'GraphResourceSpecificPermissionGrant';
  clientAppId?: Maybe<Scalars['String']>;
  clientId?: Maybe<Scalars['String']>;
  permission?: Maybe<Scalars['String']>;
  permissionType?: Maybe<Scalars['String']>;
  resourceAppId?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphResourceSpecificPermissionGrantValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphResourceSpecificPermissionGrantCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphResourceSpecificPermissionGrantCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphResourceSpecificPermissionGrantGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphResourceSpecificPermissionGrantGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphResourceSpecificPermissionGrantRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphResourceSpecificPermissionGrantGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphResourceSpecificPermissionGrantGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphResourceSpecificPermissionGrantInput = {
  clientAppId?: Maybe<Scalars['String']>;
  clientId?: Maybe<Scalars['String']>;
  permission?: Maybe<Scalars['String']>;
  permissionType?: Maybe<Scalars['String']>;
  resourceAppId?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphResourceSpecificPermissionGrantUpdateInput = {
  clientAppId?: Maybe<Scalars['String']>;
  clientId?: Maybe<Scalars['String']>;
  permission?: Maybe<Scalars['String']>;
  permissionType?: Maybe<Scalars['String']>;
  resourceAppId?: Maybe<Scalars['String']>;
};

export type GraphResourceVisualization = {
  __typename?: 'GraphResourceVisualization';
  containerDisplayName?: Maybe<Scalars['String']>;
  containerType?: Maybe<Scalars['String']>;
  containerWebUrl?: Maybe<Scalars['String']>;
  mediaType?: Maybe<Scalars['String']>;
  previewImageUrl?: Maybe<Scalars['String']>;
  previewText?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphResponseStatus = {
  __typename?: 'GraphResponseStatus';
  response?: Maybe<GraphResponseType>;
  time?: Maybe<Scalars['DateTime']>;
};

export type GraphResponseStatusInput = {
  response?: Maybe<GraphResponseType>;
  time?: Maybe<Scalars['DateTime']>;
};

export enum GraphResponseType {
  None = 'none',
  Organizer = 'organizer',
  TentativelyAccepted = 'tentativelyAccepted',
  Accepted = 'accepted',
  Declined = 'declined',
  NotResponded = 'notResponded',
}

export type GraphRestrictedSignIn = {
  __typename?: 'GraphRestrictedSignIn';
  targetTenantId?: Maybe<Scalars['GUID']>;
  appDisplayName?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  appliedConditionalAccessPolicies?: Maybe<Array<Maybe<GraphAppliedConditionalAccessPolicy>>>;
  clientAppUsed?: Maybe<Scalars['String']>;
  conditionalAccessStatus?: Maybe<GraphConditionalAccessStatus>;
  correlationId?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  deviceDetail?: Maybe<GraphDeviceDetail>;
  ipAddress?: Maybe<Scalars['String']>;
  isInteractive?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphSignInLocation>;
  resourceDisplayName?: Maybe<Scalars['String']>;
  resourceId?: Maybe<Scalars['String']>;
  riskDetail?: Maybe<GraphRiskDetail>;
  riskEventTypes?: Maybe<Array<Maybe<GraphRiskEventType>>>;
  riskEventTypes_v2?: Maybe<Array<Maybe<Scalars['String']>>>;
  riskLevelAggregated?: Maybe<GraphRiskLevel>;
  riskLevelDuringSignIn?: Maybe<GraphRiskLevel>;
  riskState?: Maybe<GraphRiskState>;
  status?: Maybe<GraphSignInStatus>;
  userDisplayName?: Maybe<Scalars['String']>;
  userId: Scalars['String'];
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphResultInfo = {
  __typename?: 'GraphResultInfo';
  code: Scalars['Int'];
  message?: Maybe<Scalars['String']>;
  subcode: Scalars['Int'];
};

export type GraphResultInfoInput = {
  code: Scalars['Int'];
  message?: Maybe<Scalars['String']>;
  subcode: Scalars['Int'];
};

export type GraphRgbColor = {
  __typename?: 'GraphRgbColor';
  b: Scalars['Byte'];
  g: Scalars['Byte'];
  r: Scalars['Byte'];
};

export enum GraphRiskDetail {
  None = 'none',
  AdminGeneratedTemporaryPassword = 'adminGeneratedTemporaryPassword',
  UserPerformedSecuredPasswordChange = 'userPerformedSecuredPasswordChange',
  UserPerformedSecuredPasswordReset = 'userPerformedSecuredPasswordReset',
  AdminConfirmedSigninSafe = 'adminConfirmedSigninSafe',
  AiConfirmedSigninSafe = 'aiConfirmedSigninSafe',
  UserPassedMfaDrivenByRiskBasedPolicy = 'userPassedMFADrivenByRiskBasedPolicy',
  AdminDismissedAllRiskForUser = 'adminDismissedAllRiskForUser',
  AdminConfirmedSigninCompromised = 'adminConfirmedSigninCompromised',
  Hidden = 'hidden',
  AdminConfirmedUserCompromised = 'adminConfirmedUserCompromised',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphRiskEventType {
  UnlikelyTravel = 'unlikelyTravel',
  AnonymizedIpAddress = 'anonymizedIPAddress',
  MaliciousIpAddress = 'maliciousIPAddress',
  UnfamiliarFeatures = 'unfamiliarFeatures',
  MalwareInfectedIpAddress = 'malwareInfectedIPAddress',
  SuspiciousIpAddress = 'suspiciousIPAddress',
  LeakedCredentials = 'leakedCredentials',
  InvestigationsThreatIntelligence = 'investigationsThreatIntelligence',
  Generic = 'generic',
  AdminConfirmedUserCompromised = 'adminConfirmedUserCompromised',
  McasImpossibleTravel = 'mcasImpossibleTravel',
  McasSuspiciousInboxManipulationRules = 'mcasSuspiciousInboxManipulationRules',
  InvestigationsThreatIntelligenceSigninLinked = 'investigationsThreatIntelligenceSigninLinked',
  MaliciousIpAddressValidCredentialsBlockedIp = 'maliciousIPAddressValidCredentialsBlockedIP',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphRiskLevel {
  Low = 'low',
  Medium = 'medium',
  High = 'high',
  Hidden = 'hidden',
  None = 'none',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphRiskState {
  None = 'none',
  ConfirmedSafe = 'confirmedSafe',
  Remediated = 'remediated',
  Dismissed = 'dismissed',
  AtRisk = 'atRisk',
  ConfirmedCompromised = 'confirmedCompromised',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphRoleAssignment = GraphEntity & {
  __typename?: 'GraphRoleAssignment';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  resourceScopes?: Maybe<Array<Maybe<Scalars['String']>>>;
  roleDefinition?: Maybe<GraphRoleDefinition>;
  id: Scalars['String'];
};

export type GraphRoleDefinition = GraphEntity & {
  __typename?: 'GraphRoleDefinition';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  isBuiltIn: Scalars['Boolean'];
  rolePermissions?: Maybe<Array<Maybe<GraphRolePermission>>>;
  roleAssignments?: Maybe<Array<Maybe<GraphRoleAssignment>>>;
  roleAssignmentsById?: Maybe<GraphRoleAssignment>;
  id: Scalars['String'];
};

export type GraphRoleDefinitionRoleAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphRoleDefinitionRoleAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphRoleManagement = {
  __typename?: 'GraphRoleManagement';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphRolePermission = {
  __typename?: 'GraphRolePermission';
  resourceActions?: Maybe<Array<Maybe<GraphResourceAction>>>;
};

export type GraphRoom = GraphPlace & {
  __typename?: 'GraphRoom';
  audioDeviceName?: Maybe<Scalars['String']>;
  bookingType?: Maybe<GraphBookingType>;
  building?: Maybe<Scalars['String']>;
  capacity?: Maybe<Scalars['Int']>;
  displayDeviceName?: Maybe<Scalars['String']>;
  emailAddress?: Maybe<Scalars['String']>;
  floorLabel?: Maybe<Scalars['String']>;
  floorNumber?: Maybe<Scalars['Int']>;
  isWheelChairAccessible?: Maybe<Scalars['Boolean']>;
  label?: Maybe<Scalars['String']>;
  nickname: Scalars['String'];
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  videoDeviceName?: Maybe<Scalars['String']>;
  address?: Maybe<GraphPhysicalAddress>;
  displayName: Scalars['String'];
  geoCoordinates?: Maybe<GraphOutlookGeoCoordinates>;
  phone?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphRoomList = GraphPlace & {
  __typename?: 'GraphRoomList';
  emailAddress?: Maybe<Scalars['String']>;
  rooms?: Maybe<Array<Maybe<GraphRoom>>>;
  roomsById?: Maybe<GraphRoom>;
  address?: Maybe<GraphPhysicalAddress>;
  displayName: Scalars['String'];
  geoCoordinates?: Maybe<GraphOutlookGeoCoordinates>;
  phone?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphRoomListRoomsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphRoomListRoomsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphRoot = {
  __typename?: 'GraphRoot';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphRootInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphRoutingType {
  Forwarded = 'forwarded',
  Lookup = 'lookup',
  SelfFork = 'selfFork',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphRunAsAccountType {
  System = 'system',
  User = 'user',
}

export enum GraphSafeSearchFilterType {
  UserDefined = 'userDefined',
  Strict = 'strict',
  Moderate = 'moderate',
}

export type GraphSamlSingleSignOnSettings = {
  __typename?: 'GraphSamlSingleSignOnSettings';
  relayState?: Maybe<Scalars['String']>;
};

export type GraphSamlSingleSignOnSettingsInput = {
  relayState?: Maybe<Scalars['String']>;
};

export type GraphSchedule = GraphEntity & {
  __typename?: 'GraphSchedule';
  enabled?: Maybe<Scalars['Boolean']>;
  offerShiftRequestsEnabled?: Maybe<Scalars['Boolean']>;
  openShiftsEnabled?: Maybe<Scalars['Boolean']>;
  provisionStatus?: Maybe<GraphOperationStatus>;
  provisionStatusCode?: Maybe<Scalars['String']>;
  swapShiftsRequestsEnabled?: Maybe<Scalars['Boolean']>;
  timeClockEnabled?: Maybe<Scalars['Boolean']>;
  timeOffRequestsEnabled?: Maybe<Scalars['Boolean']>;
  timeZone?: Maybe<Scalars['String']>;
  workforceIntegrationIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  offerShiftRequests?: Maybe<Array<Maybe<GraphOfferShiftRequest>>>;
  offerShiftRequestsById?: Maybe<GraphOfferShiftRequest>;
  openShiftChangeRequests?: Maybe<Array<Maybe<GraphOpenShiftChangeRequest>>>;
  openShiftChangeRequestsById?: Maybe<GraphOpenShiftChangeRequest>;
  openShifts?: Maybe<Array<Maybe<GraphOpenShift>>>;
  openShiftsById?: Maybe<GraphOpenShift>;
  schedulingGroups?: Maybe<Array<Maybe<GraphSchedulingGroup>>>;
  schedulingGroupsById?: Maybe<GraphSchedulingGroup>;
  shifts?: Maybe<Array<Maybe<GraphShift>>>;
  shiftsById?: Maybe<GraphShift>;
  swapShiftsChangeRequests?: Maybe<Array<Maybe<GraphSwapShiftsChangeRequest>>>;
  swapShiftsChangeRequestsById?: Maybe<GraphSwapShiftsChangeRequest>;
  timeOffReasons?: Maybe<Array<Maybe<GraphTimeOffReason>>>;
  timeOffReasonsById?: Maybe<GraphTimeOffReason>;
  timeOffRequests?: Maybe<Array<Maybe<GraphTimeOffRequest>>>;
  timeOffRequestsById?: Maybe<GraphTimeOffRequest>;
  timesOff?: Maybe<Array<Maybe<GraphTimeOff>>>;
  timesOffById?: Maybe<GraphTimeOff>;
  share?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphScheduleOfferShiftRequestsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleOfferShiftRequestsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleOpenShiftChangeRequestsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleOpenShiftChangeRequestsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleOpenShiftsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleOpenShiftsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleSchedulingGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleSchedulingGroupsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleShiftsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleShiftsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleSwapShiftsChangeRequestsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleSwapShiftsChangeRequestsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleTimeOffReasonsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleTimeOffReasonsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleTimeOffRequestsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleTimeOffRequestsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleTimesOffArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphScheduleTimesOffByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphScheduleShareArgs = {
  bindingParameter?: Maybe<GraphScheduleInput>;
  notifyTeam?: Maybe<Scalars['Boolean']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphScheduleChangeRequest = {
  assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
  managerActionDateTime?: Maybe<Scalars['DateTime']>;
  managerActionMessage?: Maybe<Scalars['String']>;
  managerUserId?: Maybe<Scalars['String']>;
  senderDateTime?: Maybe<Scalars['DateTime']>;
  senderMessage?: Maybe<Scalars['String']>;
  senderUserId?: Maybe<Scalars['String']>;
  state?: Maybe<GraphScheduleChangeState>;
  decline?: Maybe<Scalars['JSON']>;
  approve?: Maybe<Scalars['JSON']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphScheduleChangeRequestDeclineArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphScheduleChangeRequestApproveArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export enum GraphScheduleChangeRequestActor {
  Sender = 'sender',
  Recipient = 'recipient',
  Manager = 'manager',
  System = 'system',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphScheduleChangeRequestInput = {
  assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
  managerActionDateTime?: Maybe<Scalars['DateTime']>;
  managerActionMessage?: Maybe<Scalars['String']>;
  managerUserId?: Maybe<Scalars['String']>;
  senderDateTime?: Maybe<Scalars['DateTime']>;
  senderMessage?: Maybe<Scalars['String']>;
  senderUserId?: Maybe<Scalars['String']>;
  state?: Maybe<GraphScheduleChangeState>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export enum GraphScheduleChangeState {
  Pending = 'pending',
  Approved = 'approved',
  Declined = 'declined',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphScheduleEntityTheme {
  White = 'white',
  Blue = 'blue',
  Green = 'green',
  Purple = 'purple',
  Pink = 'pink',
  Yellow = 'yellow',
  Gray = 'gray',
  DarkBlue = 'darkBlue',
  DarkGreen = 'darkGreen',
  DarkPurple = 'darkPurple',
  DarkPink = 'darkPink',
  DarkYellow = 'darkYellow',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphScheduleInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  offerShiftRequestsEnabled?: Maybe<Scalars['Boolean']>;
  openShiftsEnabled?: Maybe<Scalars['Boolean']>;
  provisionStatus?: Maybe<GraphOperationStatus>;
  provisionStatusCode?: Maybe<Scalars['String']>;
  swapShiftsRequestsEnabled?: Maybe<Scalars['Boolean']>;
  timeClockEnabled?: Maybe<Scalars['Boolean']>;
  timeOffRequestsEnabled?: Maybe<Scalars['Boolean']>;
  timeZone?: Maybe<Scalars['String']>;
  workforceIntegrationIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphSchedulingGroup = GraphChangeTrackedEntity & {
  __typename?: 'GraphSchedulingGroup';
  displayName?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphSchemaExtension = GraphEntity & {
  __typename?: 'GraphSchemaExtension';
  description?: Maybe<Scalars['String']>;
  owner: Scalars['String'];
  properties: Array<Maybe<GraphExtensionSchemaProperty>>;
  status: Scalars['String'];
  targetTypes: Array<Maybe<Scalars['String']>>;
  id: Scalars['String'];
};

export type GraphSchemaExtensionInput = {
  description?: Maybe<Scalars['String']>;
  owner: Scalars['String'];
  properties: Array<Maybe<GraphExtensionSchemaPropertyInput>>;
  status: Scalars['String'];
  targetTypes: Array<Maybe<Scalars['String']>>;
  id: Scalars['String'];
};

export type GraphSchemaExtensionUpdateInput = {
  description?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  properties?: Maybe<Array<Maybe<GraphExtensionSchemaPropertyInput>>>;
  status?: Maybe<Scalars['String']>;
  targetTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphScopedRoleMembership = GraphEntity & {
  __typename?: 'GraphScopedRoleMembership';
  administrativeUnitId: Scalars['String'];
  roleId: Scalars['String'];
  roleMemberInfo: GraphIdentity;
  id: Scalars['String'];
};

export type GraphScopedRoleMembershipInput = {
  administrativeUnitId: Scalars['String'];
  roleId: Scalars['String'];
  roleMemberInfo: GraphIdentityInput;
  id: Scalars['String'];
};

export type GraphScopedRoleMembershipUpdateInput = {
  administrativeUnitId?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleMemberInfo?: Maybe<GraphIdentityInput>;
};

export type GraphScoredEmailAddress = {
  __typename?: 'GraphScoredEmailAddress';
  address?: Maybe<Scalars['String']>;
  itemId?: Maybe<Scalars['String']>;
  relevanceScore?: Maybe<Scalars['Float']>;
  selectionLikelihood?: Maybe<GraphSelectionLikelihoodInfo>;
};

export enum GraphScreenSharingRole {
  Viewer = 'viewer',
  Sharer = 'sharer',
}

export type GraphSearchEntity = GraphEntity & {
  __typename?: 'GraphSearchEntity';
  rest?: Maybe<Scalars['JSON']>;
  query?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphSearchEntityQueryArgs = {
  bindingParameter?: Maybe<GraphSearchEntityInput>;
  requests: Array<Maybe<GraphSearchRequestInput>>;
};

export type GraphSearchEntityInput = {
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphSearchQueryInput = {
  queryString: Scalars['String'];
};

export type GraphSearchRequestInput = {
  contentSources?: Maybe<Array<Maybe<Scalars['String']>>>;
  enableTopResults?: Maybe<Scalars['Boolean']>;
  entityTypes?: Maybe<Array<Maybe<GraphEntityType>>>;
  fields?: Maybe<Array<Maybe<Scalars['String']>>>;
  from: Scalars['Int'];
  query: GraphSearchQueryInput;
  size: Scalars['Int'];
};

export type GraphSearchResult = {
  __typename?: 'GraphSearchResult';
  onClickTelemetryUrl?: Maybe<Scalars['String']>;
};

export type GraphSearchResultInput = {
  onClickTelemetryUrl?: Maybe<Scalars['String']>;
};

export type GraphSectionGroup = GraphOnenoteEntityHierarchyModel & {
  __typename?: 'GraphSectionGroup';
  sectionGroupsUrl?: Maybe<Scalars['String']>;
  sectionsUrl?: Maybe<Scalars['String']>;
  parentNotebook?: Maybe<GraphNotebook>;
  parentSectionGroup?: Maybe<GraphSectionGroup>;
  sectionGroups?: Maybe<Array<Maybe<GraphSectionGroup>>>;
  sectionGroupsById?: Maybe<GraphSectionGroup>;
  sections?: Maybe<Array<Maybe<GraphOnenoteSection>>>;
  sectionsById?: Maybe<GraphOnenoteSection>;
  createdBy?: Maybe<GraphIdentitySet>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  self?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphSectionGroupSectionGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSectionGroupSectionGroupsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSectionGroupSectionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSectionGroupSectionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSectionLinks = {
  __typename?: 'GraphSectionLinks';
  oneNoteClientUrl?: Maybe<GraphExternalLink>;
  oneNoteWebUrl?: Maybe<GraphExternalLink>;
};

export type GraphSectionLinksInput = {
  oneNoteClientUrl?: Maybe<GraphExternalLinkInput>;
  oneNoteWebUrl?: Maybe<GraphExternalLinkInput>;
};

export type GraphSecureScore = GraphEntity & {
  __typename?: 'GraphSecureScore';
  activeUserCount?: Maybe<Scalars['Int']>;
  averageComparativeScores?: Maybe<Array<Maybe<GraphAverageComparativeScore>>>;
  azureTenantId: Scalars['String'];
  controlScores?: Maybe<Array<Maybe<GraphControlScore>>>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  currentScore?: Maybe<Scalars['Float']>;
  enabledServices?: Maybe<Array<Maybe<Scalars['String']>>>;
  licensedUserCount?: Maybe<Scalars['Int']>;
  maxScore?: Maybe<Scalars['Float']>;
  vendorInformation?: Maybe<GraphSecurityVendorInformation>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphSecureScoreControlProfile = GraphEntity & {
  __typename?: 'GraphSecureScoreControlProfile';
  actionType?: Maybe<Scalars['String']>;
  actionUrl?: Maybe<Scalars['String']>;
  azureTenantId: Scalars['String'];
  complianceInformation?: Maybe<Array<Maybe<GraphComplianceInformation>>>;
  controlCategory?: Maybe<Scalars['String']>;
  controlStateUpdates?: Maybe<Array<Maybe<GraphSecureScoreControlStateUpdate>>>;
  deprecated?: Maybe<Scalars['Boolean']>;
  implementationCost?: Maybe<Scalars['String']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  maxScore?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  remediation?: Maybe<Scalars['String']>;
  remediationImpact?: Maybe<Scalars['String']>;
  service?: Maybe<Scalars['String']>;
  threats?: Maybe<Array<Maybe<Scalars['String']>>>;
  tier?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  userImpact?: Maybe<Scalars['String']>;
  vendorInformation?: Maybe<GraphSecurityVendorInformation>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphSecureScoreControlStateUpdate = {
  __typename?: 'GraphSecureScoreControlStateUpdate';
  assignedTo?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphSecurity = GraphEntity & {
  __typename?: 'GraphSecurity';
  alerts?: Maybe<Array<Maybe<GraphAlert>>>;
  alertsById?: Maybe<GraphAlert>;
  secureScoreControlProfiles?: Maybe<Array<Maybe<GraphSecureScoreControlProfile>>>;
  secureScoreControlProfilesById?: Maybe<GraphSecureScoreControlProfile>;
  secureScores?: Maybe<Array<Maybe<GraphSecureScore>>>;
  secureScoresById?: Maybe<GraphSecureScore>;
  id: Scalars['String'];
};

export type GraphSecurityAlertsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSecurityAlertsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSecuritySecureScoreControlProfilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSecuritySecureScoreControlProfilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSecuritySecureScoresArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSecuritySecureScoresByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphSecurityNetworkProtocol {
  Unknown = 'unknown',
  Ip = 'ip',
  Icmp = 'icmp',
  Igmp = 'igmp',
  Ggp = 'ggp',
  Ipv4 = 'ipv4',
  Tcp = 'tcp',
  Pup = 'pup',
  Udp = 'udp',
  Idp = 'idp',
  Ipv6 = 'ipv6',
  Ipv6RoutingHeader = 'ipv6RoutingHeader',
  Ipv6FragmentHeader = 'ipv6FragmentHeader',
  IpSecEncapsulatingSecurityPayload = 'ipSecEncapsulatingSecurityPayload',
  IpSecAuthenticationHeader = 'ipSecAuthenticationHeader',
  IcmpV6 = 'icmpV6',
  Ipv6NoNextHeader = 'ipv6NoNextHeader',
  Ipv6DestinationOptions = 'ipv6DestinationOptions',
  Nd = 'nd',
  Raw = 'raw',
  Ipx = 'ipx',
  Spx = 'spx',
  SpxIi = 'spxII',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphSecurityResource = {
  __typename?: 'GraphSecurityResource';
  resource?: Maybe<Scalars['String']>;
  resourceType?: Maybe<GraphSecurityResourceType>;
};

export enum GraphSecurityResourceType {
  Unknown = 'unknown',
  Attacked = 'attacked',
  Related = 'related',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphSecurityVendorInformation = {
  __typename?: 'GraphSecurityVendorInformation';
  provider?: Maybe<Scalars['String']>;
  providerVersion?: Maybe<Scalars['String']>;
  subProvider?: Maybe<Scalars['String']>;
  vendor?: Maybe<Scalars['String']>;
};

export enum GraphSelectionLikelihoodInfo {
  NotSpecified = 'notSpecified',
  High = 'high',
}

export type GraphSelfServiceSignUpAuthenticationFlowConfiguration = {
  __typename?: 'GraphSelfServiceSignUpAuthenticationFlowConfiguration';
  isEnabled: Scalars['Boolean'];
};

export enum GraphSensitivity {
  Normal = 'normal',
  Personal = 'personal',
  Private = 'private',
  Confidential = 'confidential',
}

export type GraphServiceHostedMediaConfig = GraphMediaConfig & {
  __typename?: 'GraphServiceHostedMediaConfig';
  preFetchMedia?: Maybe<Array<Maybe<GraphMediaInfo>>>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphServicePlanInfo = {
  __typename?: 'GraphServicePlanInfo';
  appliesTo?: Maybe<Scalars['String']>;
  provisioningStatus?: Maybe<Scalars['String']>;
  servicePlanId?: Maybe<Scalars['GUID']>;
  servicePlanName?: Maybe<Scalars['String']>;
};

export type GraphServicePlanInfoInput = {
  appliesTo?: Maybe<Scalars['String']>;
  provisioningStatus?: Maybe<Scalars['String']>;
  servicePlanId?: Maybe<Scalars['GUID']>;
  servicePlanName?: Maybe<Scalars['String']>;
};

export type GraphServicePrincipal = {
  __typename?: 'GraphServicePrincipal';
  accountEnabled?: Maybe<Scalars['Boolean']>;
  addIns: Array<Maybe<GraphAddIn>>;
  alternativeNames: Array<Maybe<Scalars['String']>>;
  appDescription?: Maybe<Scalars['String']>;
  appDisplayName?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  applicationTemplateId?: Maybe<Scalars['String']>;
  appOwnerOrganizationId?: Maybe<Scalars['GUID']>;
  appRoleAssignmentRequired: Scalars['Boolean'];
  appRoles: Array<Maybe<GraphAppRole>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  homepage?: Maybe<Scalars['String']>;
  info?: Maybe<GraphInformationalUrl>;
  keyCredentials: Array<Maybe<GraphKeyCredential>>;
  loginUrl?: Maybe<Scalars['String']>;
  logoutUrl?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  notificationEmailAddresses: Array<Maybe<Scalars['String']>>;
  oauth2PermissionScopes: Array<Maybe<GraphPermissionScope>>;
  passwordCredentials: Array<Maybe<GraphPasswordCredential>>;
  preferredSingleSignOnMode?: Maybe<Scalars['String']>;
  preferredTokenSigningKeyThumbprint?: Maybe<Scalars['String']>;
  replyUrls: Array<Maybe<Scalars['String']>>;
  samlSingleSignOnSettings?: Maybe<GraphSamlSingleSignOnSettings>;
  servicePrincipalNames: Array<Maybe<Scalars['String']>>;
  servicePrincipalType?: Maybe<Scalars['String']>;
  signInAudience?: Maybe<Scalars['String']>;
  tags: Array<Maybe<Scalars['String']>>;
  tokenEncryptionKeyId?: Maybe<Scalars['GUID']>;
  appRoleAssignedTo?: Maybe<Array<Maybe<GraphAppRoleAssignment>>>;
  appRoleAssignedToById?: Maybe<GraphAppRoleAssignment>;
  appRoleAssignments?: Maybe<Array<Maybe<GraphAppRoleAssignment>>>;
  appRoleAssignmentsById?: Maybe<GraphAppRoleAssignment>;
  claimsMappingPolicies?: Maybe<Array<Maybe<GraphClaimsMappingPolicy>>>;
  claimsMappingPoliciesById?: Maybe<GraphClaimsMappingPolicy>;
  createdObjects?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  createdObjectsById?: Maybe<GraphDirectoryObject>;
  delegatedPermissionClassifications?: Maybe<Array<Maybe<GraphDelegatedPermissionClassification>>>;
  delegatedPermissionClassificationsById?: Maybe<GraphDelegatedPermissionClassification>;
  endpoints?: Maybe<Array<Maybe<GraphEndpoint>>>;
  endpointsById?: Maybe<GraphEndpoint>;
  homeRealmDiscoveryPolicies?: Maybe<Array<Maybe<GraphHomeRealmDiscoveryPolicy>>>;
  homeRealmDiscoveryPoliciesById?: Maybe<GraphHomeRealmDiscoveryPolicy>;
  memberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  memberOfById?: Maybe<GraphDirectoryObject>;
  oauth2PermissionGrants?: Maybe<Array<Maybe<GraphOAuth2PermissionGrant>>>;
  oauth2PermissionGrantsById?: Maybe<GraphOAuth2PermissionGrant>;
  ownedObjects?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  ownedObjectsById?: Maybe<GraphDirectoryObject>;
  owners?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  ownersById?: Maybe<GraphDirectoryObject>;
  tokenIssuancePolicies?: Maybe<Array<Maybe<GraphTokenIssuancePolicy>>>;
  tokenIssuancePoliciesById?: Maybe<GraphTokenIssuancePolicy>;
  tokenLifetimePolicies?: Maybe<Array<Maybe<GraphTokenLifetimePolicy>>>;
  tokenLifetimePoliciesById?: Maybe<GraphTokenLifetimePolicy>;
  transitiveMemberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  transitiveMemberOfById?: Maybe<GraphDirectoryObject>;
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Array<Maybe<GraphServicePrincipal>>>;
  addKey?: Maybe<Scalars['JSON']>;
  addPassword?: Maybe<Scalars['JSON']>;
  removeKey?: Maybe<Scalars['JSON']>;
  removePassword?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphServicePrincipalAppRoleAssignedToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalAppRoleAssignedToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalAppRoleAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalAppRoleAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalClaimsMappingPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalClaimsMappingPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalCreatedObjectsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalCreatedObjectsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalDelegatedPermissionClassificationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalDelegatedPermissionClassificationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalEndpointsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalEndpointsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalHomeRealmDiscoveryPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalHomeRealmDiscoveryPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalOauth2PermissionGrantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalOauth2PermissionGrantsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalOwnedObjectsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalOwnedObjectsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalOwnersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalOwnersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalTokenIssuancePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalTokenIssuancePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalTokenLifetimePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalTokenLifetimePoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalTransitiveMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphServicePrincipalTransitiveMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphServicePrincipalAddKeyArgs = {
  bindingParameter: GraphServicePrincipalInput;
  keyCredential: GraphKeyCredentialInput;
  passwordCredential?: Maybe<GraphPasswordCredentialInput>;
  proof: Scalars['String'];
};

export type GraphServicePrincipalAddPasswordArgs = {
  bindingParameter: GraphServicePrincipalInput;
  passwordCredential?: Maybe<GraphPasswordCredentialInput>;
};

export type GraphServicePrincipalRemoveKeyArgs = {
  bindingParameter: GraphServicePrincipalInput;
  keyId: Scalars['GUID'];
  proof: Scalars['String'];
};

export type GraphServicePrincipalRemovePasswordArgs = {
  bindingParameter: GraphServicePrincipalInput;
  keyId: Scalars['GUID'];
};

export type GraphServicePrincipalValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphServicePrincipalCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphServicePrincipalCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphServicePrincipalGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphServicePrincipalGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphServicePrincipalRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphServicePrincipalGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphServicePrincipalGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphServicePrincipalInput = {
  accountEnabled?: Maybe<Scalars['Boolean']>;
  addIns: Array<Maybe<GraphAddInInput>>;
  alternativeNames: Array<Maybe<Scalars['String']>>;
  appDescription?: Maybe<Scalars['String']>;
  appDisplayName?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  applicationTemplateId?: Maybe<Scalars['String']>;
  appOwnerOrganizationId?: Maybe<Scalars['GUID']>;
  appRoleAssignmentRequired: Scalars['Boolean'];
  appRoles: Array<Maybe<GraphAppRoleInput>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  homepage?: Maybe<Scalars['String']>;
  info?: Maybe<GraphInformationalUrlInput>;
  keyCredentials: Array<Maybe<GraphKeyCredentialInput>>;
  loginUrl?: Maybe<Scalars['String']>;
  logoutUrl?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  notificationEmailAddresses: Array<Maybe<Scalars['String']>>;
  oauth2PermissionScopes: Array<Maybe<GraphPermissionScopeInput>>;
  passwordCredentials: Array<Maybe<GraphPasswordCredentialInput>>;
  preferredSingleSignOnMode?: Maybe<Scalars['String']>;
  preferredTokenSigningKeyThumbprint?: Maybe<Scalars['String']>;
  replyUrls: Array<Maybe<Scalars['String']>>;
  samlSingleSignOnSettings?: Maybe<GraphSamlSingleSignOnSettingsInput>;
  servicePrincipalNames: Array<Maybe<Scalars['String']>>;
  servicePrincipalType?: Maybe<Scalars['String']>;
  signInAudience?: Maybe<Scalars['String']>;
  tags: Array<Maybe<Scalars['String']>>;
  tokenEncryptionKeyId?: Maybe<Scalars['GUID']>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphServicePrincipalUpdateInput = {
  accountEnabled?: Maybe<Scalars['Boolean']>;
  addIns?: Maybe<Array<Maybe<GraphAddInInput>>>;
  alternativeNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  appDescription?: Maybe<Scalars['String']>;
  appDisplayName?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  applicationTemplateId?: Maybe<Scalars['String']>;
  appOwnerOrganizationId?: Maybe<Scalars['GUID']>;
  appRoleAssignmentRequired?: Maybe<Scalars['Boolean']>;
  appRoles?: Maybe<Array<Maybe<GraphAppRoleInput>>>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  homepage?: Maybe<Scalars['String']>;
  info?: Maybe<GraphInformationalUrlInput>;
  keyCredentials?: Maybe<Array<Maybe<GraphKeyCredentialInput>>>;
  loginUrl?: Maybe<Scalars['String']>;
  logoutUrl?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  notificationEmailAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  oauth2PermissionScopes?: Maybe<Array<Maybe<GraphPermissionScopeInput>>>;
  passwordCredentials?: Maybe<Array<Maybe<GraphPasswordCredentialInput>>>;
  preferredSingleSignOnMode?: Maybe<Scalars['String']>;
  preferredTokenSigningKeyThumbprint?: Maybe<Scalars['String']>;
  replyUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  samlSingleSignOnSettings?: Maybe<GraphSamlSingleSignOnSettingsInput>;
  servicePrincipalNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  servicePrincipalType?: Maybe<Scalars['String']>;
  signInAudience?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  tokenEncryptionKeyId?: Maybe<Scalars['GUID']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphSettingSource = {
  __typename?: 'GraphSettingSource';
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type GraphSettingStateDeviceSummary = GraphEntity & {
  __typename?: 'GraphSettingStateDeviceSummary';
  compliantDeviceCount: Scalars['Int'];
  conflictDeviceCount: Scalars['Int'];
  errorDeviceCount: Scalars['Int'];
  instancePath?: Maybe<Scalars['String']>;
  nonCompliantDeviceCount: Scalars['Int'];
  notApplicableDeviceCount: Scalars['Int'];
  remediatedDeviceCount: Scalars['Int'];
  settingName?: Maybe<Scalars['String']>;
  unknownDeviceCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphSettingTemplateValue = {
  __typename?: 'GraphSettingTemplateValue';
  defaultValue?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphSettingTemplateValueInput = {
  defaultValue?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphSettingValue = {
  __typename?: 'GraphSettingValue';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphSettingValueInput = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphShared = {
  __typename?: 'GraphShared';
  owner?: Maybe<GraphIdentitySet>;
  scope?: Maybe<Scalars['String']>;
  sharedBy?: Maybe<GraphIdentitySet>;
  sharedDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphSharedDriveItem = GraphBaseItem & {
  __typename?: 'GraphSharedDriveItem';
  owner?: Maybe<GraphIdentitySet>;
  driveItem?: Maybe<GraphDriveItem>;
  items?: Maybe<Array<Maybe<GraphDriveItem>>>;
  itemsById?: Maybe<GraphDriveItem>;
  list?: Maybe<GraphList>;
  listItem?: Maybe<GraphListItem>;
  permission?: Maybe<GraphPermission>;
  root?: Maybe<GraphDriveItem>;
  site?: Maybe<GraphSite>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReference>;
  webUrl?: Maybe<Scalars['String']>;
  createdByUser?: Maybe<GraphUser>;
  lastModifiedByUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphSharedDriveItemItemsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSharedDriveItemItemsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSharedDriveItemInput = {
  owner?: Maybe<GraphIdentitySetInput>;
  createdBy?: Maybe<GraphIdentitySetInput>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReferenceInput>;
  webUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphSharedDriveItemUpdateInput = {
  owner?: Maybe<GraphIdentitySetInput>;
};

export type GraphSharedInput = {
  owner?: Maybe<GraphIdentitySetInput>;
  scope?: Maybe<Scalars['String']>;
  sharedBy?: Maybe<GraphIdentitySetInput>;
  sharedDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphSharedInsight = GraphEntity & {
  __typename?: 'GraphSharedInsight';
  lastShared?: Maybe<GraphSharingDetail>;
  resourceReference?: Maybe<GraphResourceReference>;
  resourceVisualization?: Maybe<GraphResourceVisualization>;
  sharingHistory?: Maybe<Array<Maybe<GraphSharingDetail>>>;
  lastSharedMethod?: Maybe<GraphEntity>;
  resource?: Maybe<GraphEntity>;
  id: Scalars['String'];
};

export enum GraphSharedPcAccountDeletionPolicyType {
  Immediate = 'immediate',
  DiskSpaceThreshold = 'diskSpaceThreshold',
  DiskSpaceThresholdOrInactiveThreshold = 'diskSpaceThresholdOrInactiveThreshold',
}

export type GraphSharedPcAccountManagerPolicy = {
  __typename?: 'GraphSharedPcAccountManagerPolicy';
  accountDeletionPolicy: GraphSharedPcAccountDeletionPolicyType;
  cacheAccountsAboveDiskFreePercentage?: Maybe<Scalars['Int']>;
  inactiveThresholdDays?: Maybe<Scalars['Int']>;
  removeAccountsBelowDiskFreePercentage?: Maybe<Scalars['Int']>;
};

export enum GraphSharedPcAllowedAccountType {
  Guest = 'guest',
  Domain = 'domain',
}

export type GraphSharedPcConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphSharedPcConfiguration';
  accountManagerPolicy?: Maybe<GraphSharedPcAccountManagerPolicy>;
  allowedAccounts: GraphSharedPcAllowedAccountType;
  allowLocalStorage: Scalars['Boolean'];
  disableAccountManager: Scalars['Boolean'];
  disableEduPolicies: Scalars['Boolean'];
  disablePowerPolicies: Scalars['Boolean'];
  disableSignInOnResume: Scalars['Boolean'];
  enabled: Scalars['Boolean'];
  idleTimeBeforeSleepInSeconds?: Maybe<Scalars['Int']>;
  kioskAppDisplayName?: Maybe<Scalars['String']>;
  kioskAppUserModelId?: Maybe<Scalars['String']>;
  maintenanceStartTime?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphSharedPcConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSharedPcConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSharedPcConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSharedPcConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSharedPcConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSharedPcConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSharedPcConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSharedPcConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSharedPcConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphSharepointIds = {
  __typename?: 'GraphSharepointIds';
  listId?: Maybe<Scalars['String']>;
  listItemId?: Maybe<Scalars['String']>;
  listItemUniqueId?: Maybe<Scalars['String']>;
  siteId?: Maybe<Scalars['String']>;
  siteUrl?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  webId?: Maybe<Scalars['String']>;
};

export type GraphSharepointIdsInput = {
  listId?: Maybe<Scalars['String']>;
  listItemId?: Maybe<Scalars['String']>;
  listItemUniqueId?: Maybe<Scalars['String']>;
  siteId?: Maybe<Scalars['String']>;
  siteUrl?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  webId?: Maybe<Scalars['String']>;
};

export type GraphSharingDetail = {
  __typename?: 'GraphSharingDetail';
  sharedBy?: Maybe<GraphInsightIdentity>;
  sharedDateTime?: Maybe<Scalars['DateTime']>;
  sharingReference?: Maybe<GraphResourceReference>;
  sharingSubject?: Maybe<Scalars['String']>;
  sharingType?: Maybe<Scalars['String']>;
};

export type GraphSharingInvitation = {
  __typename?: 'GraphSharingInvitation';
  email?: Maybe<Scalars['String']>;
  invitedBy?: Maybe<GraphIdentitySet>;
  redeemedBy?: Maybe<Scalars['String']>;
  signInRequired?: Maybe<Scalars['Boolean']>;
};

export type GraphSharingInvitationInput = {
  email?: Maybe<Scalars['String']>;
  invitedBy?: Maybe<GraphIdentitySetInput>;
  redeemedBy?: Maybe<Scalars['String']>;
  signInRequired?: Maybe<Scalars['Boolean']>;
};

export type GraphSharingLink = {
  __typename?: 'GraphSharingLink';
  application?: Maybe<GraphIdentity>;
  preventsDownload?: Maybe<Scalars['Boolean']>;
  scope?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  webHtml?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
};

export type GraphSharingLinkInput = {
  application?: Maybe<GraphIdentityInput>;
  preventsDownload?: Maybe<Scalars['Boolean']>;
  scope?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  webHtml?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
};

export type GraphShift = GraphChangeTrackedEntity & {
  __typename?: 'GraphShift';
  draftShift?: Maybe<GraphShiftItem>;
  schedulingGroupId?: Maybe<Scalars['String']>;
  sharedShift?: Maybe<GraphShiftItem>;
  userId?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphShiftActivity = {
  __typename?: 'GraphShiftActivity';
  code?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  isPaid?: Maybe<Scalars['Boolean']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  theme: GraphScheduleEntityTheme;
};

export type GraphShiftAvailability = {
  __typename?: 'GraphShiftAvailability';
  recurrence?: Maybe<GraphPatternedRecurrence>;
  timeSlots?: Maybe<Array<Maybe<GraphTimeRange>>>;
  timeZone?: Maybe<Scalars['String']>;
};

export type GraphShiftItem = {
  __typename?: 'GraphShiftItem';
  activities?: Maybe<Array<Maybe<GraphShiftActivity>>>;
  displayName?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  theme: GraphScheduleEntityTheme;
};

export type GraphShiftPreferences = GraphChangeTrackedEntity & {
  __typename?: 'GraphShiftPreferences';
  availability?: Maybe<Array<Maybe<GraphShiftAvailability>>>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphSignIn = GraphEntity & {
  __typename?: 'GraphSignIn';
  appDisplayName?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  appliedConditionalAccessPolicies?: Maybe<Array<Maybe<GraphAppliedConditionalAccessPolicy>>>;
  clientAppUsed?: Maybe<Scalars['String']>;
  conditionalAccessStatus?: Maybe<GraphConditionalAccessStatus>;
  correlationId?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  deviceDetail?: Maybe<GraphDeviceDetail>;
  ipAddress?: Maybe<Scalars['String']>;
  isInteractive?: Maybe<Scalars['Boolean']>;
  location?: Maybe<GraphSignInLocation>;
  resourceDisplayName?: Maybe<Scalars['String']>;
  resourceId?: Maybe<Scalars['String']>;
  riskDetail?: Maybe<GraphRiskDetail>;
  riskEventTypes?: Maybe<Array<Maybe<GraphRiskEventType>>>;
  riskEventTypes_v2?: Maybe<Array<Maybe<Scalars['String']>>>;
  riskLevelAggregated?: Maybe<GraphRiskLevel>;
  riskLevelDuringSignIn?: Maybe<GraphRiskLevel>;
  riskState?: Maybe<GraphRiskState>;
  status?: Maybe<GraphSignInStatus>;
  userDisplayName?: Maybe<Scalars['String']>;
  userId: Scalars['String'];
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphSignInFrequencySessionControl = GraphConditionalAccessSessionControl & {
  __typename?: 'GraphSignInFrequencySessionControl';
  type?: Maybe<GraphSigninFrequencyType>;
  value?: Maybe<Scalars['Int']>;
  isEnabled?: Maybe<Scalars['Boolean']>;
};

export type GraphSignInLocation = {
  __typename?: 'GraphSignInLocation';
  city?: Maybe<Scalars['String']>;
  countryOrRegion?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<GraphGeoCoordinates>;
  state?: Maybe<Scalars['String']>;
};

export type GraphSignInStatus = {
  __typename?: 'GraphSignInStatus';
  additionalDetails?: Maybe<Scalars['String']>;
  errorCode?: Maybe<Scalars['Int']>;
  failureReason?: Maybe<Scalars['String']>;
};

export enum GraphSigninFrequencyType {
  Days = 'days',
  Hours = 'hours',
}

export type GraphSingleValueLegacyExtendedProperty = GraphEntity & {
  __typename?: 'GraphSingleValueLegacyExtendedProperty';
  value?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphSite = GraphBaseItem & {
  __typename?: 'GraphSite';
  displayName?: Maybe<Scalars['String']>;
  error?: Maybe<GraphPublicError>;
  root?: Maybe<GraphRoot>;
  sharepointIds?: Maybe<GraphSharepointIds>;
  siteCollection?: Maybe<GraphSiteCollection>;
  analytics?: Maybe<GraphItemAnalytics>;
  columns?: Maybe<Array<Maybe<GraphColumnDefinition>>>;
  columnsById?: Maybe<GraphColumnDefinition>;
  contentTypes?: Maybe<Array<Maybe<GraphContentType>>>;
  contentTypesById?: Maybe<GraphContentType>;
  drive?: Maybe<GraphDrive>;
  drives?: Maybe<Array<Maybe<GraphDrive>>>;
  drivesById?: Maybe<GraphDrive>;
  items?: Maybe<Array<Maybe<GraphBaseItem>>>;
  itemsById?: Maybe<GraphBaseItem>;
  lists?: Maybe<Array<Maybe<GraphList>>>;
  listsById?: Maybe<GraphList>;
  permissions?: Maybe<Array<Maybe<GraphPermission>>>;
  permissionsById?: Maybe<GraphPermission>;
  sites?: Maybe<Array<Maybe<GraphSite>>>;
  sitesById?: Maybe<GraphSite>;
  onenote?: Maybe<GraphOnenote>;
  getActivitiesByInterval?: Maybe<Array<Maybe<GraphItemActivityStat>>>;
  getByPath?: Maybe<GraphSite>;
  add?: Maybe<Scalars['JSON']>;
  remove?: Maybe<Scalars['JSON']>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReference>;
  webUrl?: Maybe<Scalars['String']>;
  createdByUser?: Maybe<GraphUser>;
  lastModifiedByUser?: Maybe<GraphUser>;
  id: Scalars['String'];
};

export type GraphSiteColumnsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSiteColumnsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSiteContentTypesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSiteContentTypesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSiteDrivesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSiteDrivesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSiteItemsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSiteItemsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSiteListsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSiteListsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSitePermissionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSitePermissionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSiteSitesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphSiteSitesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphSiteAddArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphSiteInput>>>;
  value?: Maybe<Array<Maybe<GraphSiteInput>>>;
};

export type GraphSiteRemoveArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphSiteInput>>>;
  value?: Maybe<Array<Maybe<GraphSiteInput>>>;
};

export type GraphSiteCollection = {
  __typename?: 'GraphSiteCollection';
  dataLocationCode?: Maybe<Scalars['String']>;
  hostname?: Maybe<Scalars['String']>;
  root?: Maybe<GraphRoot>;
};

export type GraphSiteCollectionInput = {
  dataLocationCode?: Maybe<Scalars['String']>;
  hostname?: Maybe<Scalars['String']>;
  root?: Maybe<GraphRootInput>;
};

export type GraphSiteInput = {
  displayName?: Maybe<Scalars['String']>;
  error?: Maybe<GraphPublicErrorInput>;
  root?: Maybe<GraphRootInput>;
  sharepointIds?: Maybe<GraphSharepointIdsInput>;
  siteCollection?: Maybe<GraphSiteCollectionInput>;
  createdBy?: Maybe<GraphIdentitySetInput>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  eTag?: Maybe<Scalars['String']>;
  lastModifiedBy?: Maybe<GraphIdentitySetInput>;
  lastModifiedDateTime: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  parentReference?: Maybe<GraphItemReferenceInput>;
  webUrl?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphSiteSecurityLevel {
  UserDefined = 'userDefined',
  Low = 'low',
  MediumLow = 'mediumLow',
  Medium = 'medium',
  MediumHigh = 'mediumHigh',
  High = 'high',
}

export type GraphSiteUpdateInput = {
  displayName?: Maybe<Scalars['String']>;
  error?: Maybe<GraphPublicErrorInput>;
  root?: Maybe<GraphRootInput>;
  sharepointIds?: Maybe<GraphSharepointIdsInput>;
  siteCollection?: Maybe<GraphSiteCollectionInput>;
};

export type GraphSizeRange = {
  __typename?: 'GraphSizeRange';
  maximumSize?: Maybe<Scalars['Int']>;
  minimumSize?: Maybe<Scalars['Int']>;
};

export type GraphSocialIdentityProvider = GraphIdentityProviderBase & {
  __typename?: 'GraphSocialIdentityProvider';
  clientId?: Maybe<Scalars['String']>;
  clientSecret?: Maybe<Scalars['String']>;
  identityProviderType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  availableProviderTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
};

export type GraphSoftwareUpdateStatusSummary = GraphEntity & {
  __typename?: 'GraphSoftwareUpdateStatusSummary';
  compliantDeviceCount: Scalars['Int'];
  compliantUserCount: Scalars['Int'];
  conflictDeviceCount: Scalars['Int'];
  conflictUserCount: Scalars['Int'];
  displayName?: Maybe<Scalars['String']>;
  errorDeviceCount: Scalars['Int'];
  errorUserCount: Scalars['Int'];
  nonCompliantDeviceCount: Scalars['Int'];
  nonCompliantUserCount: Scalars['Int'];
  notApplicableDeviceCount: Scalars['Int'];
  notApplicableUserCount: Scalars['Int'];
  remediatedDeviceCount: Scalars['Int'];
  remediatedUserCount: Scalars['Int'];
  unknownDeviceCount: Scalars['Int'];
  unknownUserCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphSpaApplication = {
  __typename?: 'GraphSpaApplication';
  redirectUris: Array<Maybe<Scalars['String']>>;
};

export type GraphSpaApplicationInput = {
  redirectUris: Array<Maybe<Scalars['String']>>;
};

export type GraphSpecialFolder = {
  __typename?: 'GraphSpecialFolder';
  name?: Maybe<Scalars['String']>;
};

export type GraphSpecialFolderInput = {
  name?: Maybe<Scalars['String']>;
};

export enum GraphStagedFeatureName {
  PassthroughAuthentication = 'passthroughAuthentication',
  SeamlessSso = 'seamlessSso',
  PasswordHashSync = 'passwordHashSync',
  EmailAsAlternateId = 'emailAsAlternateId',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphStateManagementSetting {
  NotConfigured = 'notConfigured',
  Blocked = 'blocked',
  Allowed = 'allowed',
}

export enum GraphStatus {
  Active = 'active',
  Updated = 'updated',
  Deleted = 'deleted',
  Ignored = 'ignored',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphStoragePlanInformation = {
  __typename?: 'GraphStoragePlanInformation';
  upgradeAvailable?: Maybe<Scalars['Boolean']>;
};

export type GraphStoragePlanInformationInput = {
  upgradeAvailable?: Maybe<Scalars['Boolean']>;
};

export type GraphStsPolicy = {
  definition: Array<Maybe<Scalars['String']>>;
  isOrganizationDefault?: Maybe<Scalars['Boolean']>;
  appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  appliesToById?: Maybe<GraphDirectoryObject>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphStsPolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphStsPolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphStsPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphStsPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphStsPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphStsPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphStsPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphStsPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphStsPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphStsPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphSubscribedSku = GraphEntity & {
  __typename?: 'GraphSubscribedSku';
  appliesTo?: Maybe<Scalars['String']>;
  capabilityStatus?: Maybe<Scalars['String']>;
  consumedUnits?: Maybe<Scalars['Int']>;
  prepaidUnits?: Maybe<GraphLicenseUnitsDetail>;
  servicePlans: Array<Maybe<GraphServicePlanInfo>>;
  skuId?: Maybe<Scalars['GUID']>;
  skuPartNumber?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphSubscribedSkuInput = {
  appliesTo?: Maybe<Scalars['String']>;
  capabilityStatus?: Maybe<Scalars['String']>;
  consumedUnits?: Maybe<Scalars['Int']>;
  prepaidUnits?: Maybe<GraphLicenseUnitsDetailInput>;
  servicePlans: Array<Maybe<GraphServicePlanInfoInput>>;
  skuId?: Maybe<Scalars['GUID']>;
  skuPartNumber?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphSubscribedSkuUpdateInput = {
  appliesTo?: Maybe<Scalars['String']>;
  capabilityStatus?: Maybe<Scalars['String']>;
  consumedUnits?: Maybe<Scalars['Int']>;
  prepaidUnits?: Maybe<GraphLicenseUnitsDetailInput>;
  servicePlans?: Maybe<Array<Maybe<GraphServicePlanInfoInput>>>;
  skuId?: Maybe<Scalars['GUID']>;
  skuPartNumber?: Maybe<Scalars['String']>;
};

export type GraphSubscription = GraphEntity & {
  __typename?: 'GraphSubscription';
  applicationId?: Maybe<Scalars['String']>;
  changeType: Scalars['String'];
  clientState?: Maybe<Scalars['String']>;
  creatorId?: Maybe<Scalars['String']>;
  encryptionCertificate?: Maybe<Scalars['String']>;
  encryptionCertificateId?: Maybe<Scalars['String']>;
  expirationDateTime: Scalars['DateTime'];
  includeResourceData?: Maybe<Scalars['Boolean']>;
  latestSupportedTlsVersion?: Maybe<Scalars['String']>;
  lifecycleNotificationUrl?: Maybe<Scalars['String']>;
  notificationQueryOptions?: Maybe<Scalars['String']>;
  notificationUrl: Scalars['String'];
  resource: Scalars['String'];
  id: Scalars['String'];
};

export type GraphSubscriptionInput = {
  applicationId?: Maybe<Scalars['String']>;
  changeType: Scalars['String'];
  clientState?: Maybe<Scalars['String']>;
  creatorId?: Maybe<Scalars['String']>;
  encryptionCertificate?: Maybe<Scalars['String']>;
  encryptionCertificateId?: Maybe<Scalars['String']>;
  expirationDateTime: Scalars['DateTime'];
  includeResourceData?: Maybe<Scalars['Boolean']>;
  latestSupportedTlsVersion?: Maybe<Scalars['String']>;
  lifecycleNotificationUrl?: Maybe<Scalars['String']>;
  notificationQueryOptions?: Maybe<Scalars['String']>;
  notificationUrl: Scalars['String'];
  resource: Scalars['String'];
  id: Scalars['String'];
};

export type GraphSubscriptionUpdateInput = {
  applicationId?: Maybe<Scalars['String']>;
  changeType?: Maybe<Scalars['String']>;
  clientState?: Maybe<Scalars['String']>;
  creatorId?: Maybe<Scalars['String']>;
  encryptionCertificate?: Maybe<Scalars['String']>;
  encryptionCertificateId?: Maybe<Scalars['String']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  includeResourceData?: Maybe<Scalars['Boolean']>;
  latestSupportedTlsVersion?: Maybe<Scalars['String']>;
  lifecycleNotificationUrl?: Maybe<Scalars['String']>;
  notificationQueryOptions?: Maybe<Scalars['String']>;
  notificationUrl?: Maybe<Scalars['String']>;
  resource?: Maybe<Scalars['String']>;
};

export type GraphSwapShiftsChangeRequest = {
  __typename?: 'GraphSwapShiftsChangeRequest';
  recipientShiftId?: Maybe<Scalars['String']>;
  recipientActionDateTime?: Maybe<Scalars['DateTime']>;
  recipientActionMessage?: Maybe<Scalars['String']>;
  recipientUserId?: Maybe<Scalars['String']>;
  senderShiftId?: Maybe<Scalars['String']>;
  assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
  managerActionDateTime?: Maybe<Scalars['DateTime']>;
  managerActionMessage?: Maybe<Scalars['String']>;
  managerUserId?: Maybe<Scalars['String']>;
  senderDateTime?: Maybe<Scalars['DateTime']>;
  senderMessage?: Maybe<Scalars['String']>;
  senderUserId?: Maybe<Scalars['String']>;
  state?: Maybe<GraphScheduleChangeState>;
  decline?: Maybe<Scalars['JSON']>;
  approve?: Maybe<Scalars['JSON']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphSwapShiftsChangeRequestDeclineArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphSwapShiftsChangeRequestApproveArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphSystemFacet = {
  __typename?: 'GraphSystemFacet';
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphSystemFacetInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphTargetResource = {
  __typename?: 'GraphTargetResource';
  displayName?: Maybe<Scalars['String']>;
  groupType?: Maybe<GraphGroupType>;
  id?: Maybe<Scalars['String']>;
  modifiedProperties?: Maybe<Array<Maybe<GraphModifiedProperty>>>;
  type?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
};

export type GraphTargetedManagedAppConfiguration = GraphManagedAppConfiguration & {
  __typename?: 'GraphTargetedManagedAppConfiguration';
  deployedAppCount: Scalars['Int'];
  isAssigned: Scalars['Boolean'];
  apps?: Maybe<Array<Maybe<GraphManagedMobileApp>>>;
  appsById?: Maybe<GraphManagedMobileApp>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
  assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
  deploymentSummary?: Maybe<GraphManagedAppPolicyDeploymentSummary>;
  assign?: Maybe<Scalars['JSON']>;
  targetApps?: Maybe<Scalars['JSON']>;
  customSettings: Array<Maybe<GraphKeyValuePair>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphTargetedManagedAppConfigurationAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTargetedManagedAppConfigurationAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTargetedManagedAppConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTargetedManagedAppConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTargetedManagedAppConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphTargetedManagedAppConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type GraphTargetedManagedAppConfigurationTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphTargetedManagedAppConfigurationInput = {
  deployedAppCount: Scalars['Int'];
  isAssigned: Scalars['Boolean'];
  customSettings: Array<Maybe<GraphKeyValuePairInput>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphTargetedManagedAppPolicyAssignment = GraphEntity & {
  __typename?: 'GraphTargetedManagedAppPolicyAssignment';
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphTargetedManagedAppPolicyAssignmentInput = {
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTargetInput>;
  id: Scalars['String'];
};

export type GraphTargetedManagedAppProtection = {
  isAssigned: Scalars['Boolean'];
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
  assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
  assign?: Maybe<Scalars['JSON']>;
  allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
  contactSyncBlocked: Scalars['Boolean'];
  dataBackupBlocked: Scalars['Boolean'];
  deviceComplianceRequired: Scalars['Boolean'];
  disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
  fingerprintBlocked: Scalars['Boolean'];
  managedBrowser: GraphManagedBrowserType;
  managedBrowserToOpenLinksRequired: Scalars['Boolean'];
  maximumPinRetries: Scalars['Int'];
  minimumPinLength: Scalars['Int'];
  minimumRequiredAppVersion?: Maybe<Scalars['String']>;
  minimumRequiredOsVersion?: Maybe<Scalars['String']>;
  minimumWarningAppVersion?: Maybe<Scalars['String']>;
  minimumWarningOsVersion?: Maybe<Scalars['String']>;
  organizationalCredentialsRequired: Scalars['Boolean'];
  periodBeforePinReset: Scalars['ISO8601Duration'];
  periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
  periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
  periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
  pinCharacterSet: GraphManagedAppPinCharacterSet;
  pinRequired: Scalars['Boolean'];
  printBlocked: Scalars['Boolean'];
  saveAsBlocked: Scalars['Boolean'];
  simplePinBlocked: Scalars['Boolean'];
  targetApps?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphTargetedManagedAppProtectionAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTargetedManagedAppProtectionAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTargetedManagedAppProtectionAssignArgs = {
  bindingParameter?: Maybe<GraphTargetedManagedAppProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type GraphTargetedManagedAppProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphTargetedManagedAppProtectionInput = {
  isAssigned: Scalars['Boolean'];
  allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
  allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
  allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
  allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
  contactSyncBlocked: Scalars['Boolean'];
  dataBackupBlocked: Scalars['Boolean'];
  deviceComplianceRequired: Scalars['Boolean'];
  disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
  fingerprintBlocked: Scalars['Boolean'];
  managedBrowser: GraphManagedBrowserType;
  managedBrowserToOpenLinksRequired: Scalars['Boolean'];
  maximumPinRetries: Scalars['Int'];
  minimumPinLength: Scalars['Int'];
  minimumRequiredAppVersion?: Maybe<Scalars['String']>;
  minimumRequiredOsVersion?: Maybe<Scalars['String']>;
  minimumWarningAppVersion?: Maybe<Scalars['String']>;
  minimumWarningOsVersion?: Maybe<Scalars['String']>;
  organizationalCredentialsRequired: Scalars['Boolean'];
  periodBeforePinReset: Scalars['ISO8601Duration'];
  periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
  periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
  periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
  pinCharacterSet: GraphManagedAppPinCharacterSet;
  pinRequired: Scalars['Boolean'];
  printBlocked: Scalars['Boolean'];
  saveAsBlocked: Scalars['Boolean'];
  simplePinBlocked: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphTaskStatus {
  NotStarted = 'notStarted',
  InProgress = 'inProgress',
  Completed = 'completed',
  WaitingOnOthers = 'waitingOnOthers',
  Deferred = 'deferred',
}

export type GraphTeam = GraphEntity & {
  __typename?: 'GraphTeam';
  classification?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  funSettings?: Maybe<GraphTeamFunSettings>;
  guestSettings?: Maybe<GraphTeamGuestSettings>;
  internalId?: Maybe<Scalars['String']>;
  isArchived?: Maybe<Scalars['Boolean']>;
  memberSettings?: Maybe<GraphTeamMemberSettings>;
  messagingSettings?: Maybe<GraphTeamMessagingSettings>;
  specialization?: Maybe<GraphTeamSpecialization>;
  visibility?: Maybe<GraphTeamVisibilityType>;
  webUrl?: Maybe<Scalars['String']>;
  schedule?: Maybe<GraphSchedule>;
  channels?: Maybe<Array<Maybe<GraphChannel>>>;
  channelsById?: Maybe<GraphChannel>;
  group?: Maybe<GraphGroup>;
  installedApps?: Maybe<Array<Maybe<GraphTeamsAppInstallation>>>;
  installedAppsById?: Maybe<GraphTeamsAppInstallation>;
  members?: Maybe<Array<Maybe<GraphConversationMember>>>;
  membersById?: Maybe<GraphConversationMember>;
  operations?: Maybe<Array<Maybe<GraphTeamsAsyncOperation>>>;
  operationsById?: Maybe<GraphTeamsAsyncOperation>;
  primaryChannel?: Maybe<GraphChannel>;
  template?: Maybe<GraphTeamsTemplate>;
  rest?: Maybe<Scalars['JSON']>;
  getAllMessages?: Maybe<Array<Maybe<GraphChatMessage>>>;
  archive?: Maybe<Scalars['JSON']>;
  clone?: Maybe<Scalars['JSON']>;
  completeMigration?: Maybe<Scalars['JSON']>;
  sendActivityNotification?: Maybe<Scalars['JSON']>;
  unarchive?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTeamChannelsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTeamChannelsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTeamInstalledAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTeamInstalledAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTeamMembersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTeamMembersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTeamOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTeamOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTeamArchiveArgs = {
  bindingParameter?: Maybe<GraphTeamInput>;
  shouldSetSpoSiteReadOnlyForMembers?: Maybe<Scalars['Boolean']>;
};

export type GraphTeamCloneArgs = {
  bindingParameter?: Maybe<GraphTeamInput>;
  displayName?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  classification?: Maybe<Scalars['String']>;
  visibility: GraphTeamVisibilityType;
  partsToClone: GraphClonableTeamParts;
};

export type GraphTeamCompleteMigrationArgs = {
  bindingParameter?: Maybe<GraphTeamInput>;
};

export type GraphTeamSendActivityNotificationArgs = {
  bindingParameter?: Maybe<GraphTeamInput>;
  topic?: Maybe<GraphTeamworkActivityTopicInput>;
  activityType?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['BigInt']>;
  previewText?: Maybe<GraphItemBodyInput>;
  templateParameters?: Maybe<Array<Maybe<GraphKeyValuePairInput>>>;
  recipient?: Maybe<GraphTeamworkNotificationRecipientInput>;
};

export type GraphTeamUnarchiveArgs = {
  bindingParameter?: Maybe<GraphTeamInput>;
};

export type GraphTeamFunSettings = {
  __typename?: 'GraphTeamFunSettings';
  allowCustomMemes?: Maybe<Scalars['Boolean']>;
  allowGiphy?: Maybe<Scalars['Boolean']>;
  allowStickersAndMemes?: Maybe<Scalars['Boolean']>;
  giphyContentRating?: Maybe<GraphGiphyRatingType>;
};

export type GraphTeamFunSettingsInput = {
  allowCustomMemes?: Maybe<Scalars['Boolean']>;
  allowGiphy?: Maybe<Scalars['Boolean']>;
  allowStickersAndMemes?: Maybe<Scalars['Boolean']>;
  giphyContentRating?: Maybe<GraphGiphyRatingType>;
};

export type GraphTeamGuestSettings = {
  __typename?: 'GraphTeamGuestSettings';
  allowCreateUpdateChannels?: Maybe<Scalars['Boolean']>;
  allowDeleteChannels?: Maybe<Scalars['Boolean']>;
};

export type GraphTeamGuestSettingsInput = {
  allowCreateUpdateChannels?: Maybe<Scalars['Boolean']>;
  allowDeleteChannels?: Maybe<Scalars['Boolean']>;
};

export type GraphTeamInput = {
  classification?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  funSettings?: Maybe<GraphTeamFunSettingsInput>;
  guestSettings?: Maybe<GraphTeamGuestSettingsInput>;
  internalId?: Maybe<Scalars['String']>;
  isArchived?: Maybe<Scalars['Boolean']>;
  memberSettings?: Maybe<GraphTeamMemberSettingsInput>;
  messagingSettings?: Maybe<GraphTeamMessagingSettingsInput>;
  specialization?: Maybe<GraphTeamSpecialization>;
  visibility?: Maybe<GraphTeamVisibilityType>;
  webUrl?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTeamMemberSettings = {
  __typename?: 'GraphTeamMemberSettings';
  allowAddRemoveApps?: Maybe<Scalars['Boolean']>;
  allowCreatePrivateChannels?: Maybe<Scalars['Boolean']>;
  allowCreateUpdateChannels?: Maybe<Scalars['Boolean']>;
  allowCreateUpdateRemoveConnectors?: Maybe<Scalars['Boolean']>;
  allowCreateUpdateRemoveTabs?: Maybe<Scalars['Boolean']>;
  allowDeleteChannels?: Maybe<Scalars['Boolean']>;
};

export type GraphTeamMemberSettingsInput = {
  allowAddRemoveApps?: Maybe<Scalars['Boolean']>;
  allowCreatePrivateChannels?: Maybe<Scalars['Boolean']>;
  allowCreateUpdateChannels?: Maybe<Scalars['Boolean']>;
  allowCreateUpdateRemoveConnectors?: Maybe<Scalars['Boolean']>;
  allowCreateUpdateRemoveTabs?: Maybe<Scalars['Boolean']>;
  allowDeleteChannels?: Maybe<Scalars['Boolean']>;
};

export type GraphTeamMessagingSettings = {
  __typename?: 'GraphTeamMessagingSettings';
  allowChannelMentions?: Maybe<Scalars['Boolean']>;
  allowOwnerDeleteMessages?: Maybe<Scalars['Boolean']>;
  allowTeamMentions?: Maybe<Scalars['Boolean']>;
  allowUserDeleteMessages?: Maybe<Scalars['Boolean']>;
  allowUserEditMessages?: Maybe<Scalars['Boolean']>;
};

export type GraphTeamMessagingSettingsInput = {
  allowChannelMentions?: Maybe<Scalars['Boolean']>;
  allowOwnerDeleteMessages?: Maybe<Scalars['Boolean']>;
  allowTeamMentions?: Maybe<Scalars['Boolean']>;
  allowUserDeleteMessages?: Maybe<Scalars['Boolean']>;
  allowUserEditMessages?: Maybe<Scalars['Boolean']>;
};

export enum GraphTeamSpecialization {
  None = 'none',
  EducationStandard = 'educationStandard',
  EducationClass = 'educationClass',
  EducationProfessionalLearningCommunity = 'educationProfessionalLearningCommunity',
  EducationStaff = 'educationStaff',
  HealthcareStandard = 'healthcareStandard',
  HealthcareCareCoordination = 'healthcareCareCoordination',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphTeamUpdateInput = {
  classification?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  funSettings?: Maybe<GraphTeamFunSettingsInput>;
  guestSettings?: Maybe<GraphTeamGuestSettingsInput>;
  internalId?: Maybe<Scalars['String']>;
  isArchived?: Maybe<Scalars['Boolean']>;
  memberSettings?: Maybe<GraphTeamMemberSettingsInput>;
  messagingSettings?: Maybe<GraphTeamMessagingSettingsInput>;
  specialization?: Maybe<GraphTeamSpecialization>;
  visibility?: Maybe<GraphTeamVisibilityType>;
  webUrl?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphTeamVisibilityType {
  Private = 'private',
  Public = 'public',
  HiddenMembership = 'hiddenMembership',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphTeamsApp = GraphEntity & {
  __typename?: 'GraphTeamsApp';
  displayName?: Maybe<Scalars['String']>;
  distributionMethod?: Maybe<GraphTeamsAppDistributionMethod>;
  externalId?: Maybe<Scalars['String']>;
  appDefinitions?: Maybe<Array<Maybe<GraphTeamsAppDefinition>>>;
  appDefinitionsById?: Maybe<GraphTeamsAppDefinition>;
  id: Scalars['String'];
};

export type GraphTeamsAppAppDefinitionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTeamsAppAppDefinitionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTeamsAppDefinition = GraphEntity & {
  __typename?: 'GraphTeamsAppDefinition';
  createdBy?: Maybe<GraphIdentitySet>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  publishingState?: Maybe<GraphTeamsAppPublishingState>;
  shortDescription?: Maybe<Scalars['String']>;
  teamsAppId?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  bot?: Maybe<GraphTeamworkBot>;
  id: Scalars['String'];
};

export enum GraphTeamsAppDistributionMethod {
  Store = 'store',
  Organization = 'organization',
  Sideloaded = 'sideloaded',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphTeamsAppInstallation = GraphEntity & {
  __typename?: 'GraphTeamsAppInstallation';
  teamsApp?: Maybe<GraphTeamsApp>;
  teamsAppDefinition?: Maybe<GraphTeamsAppDefinition>;
  upgrade?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTeamsAppInstallationUpgradeArgs = {
  bindingParameter?: Maybe<GraphTeamsAppInstallationInput>;
};

export type GraphTeamsAppInstallationInput = {
  id: Scalars['String'];
};

export enum GraphTeamsAppPublishingState {
  Submitted = 'submitted',
  Rejected = 'rejected',
  Published = 'published',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphTeamsAsyncOperation = GraphEntity & {
  __typename?: 'GraphTeamsAsyncOperation';
  attemptsCount: Scalars['Int'];
  createdDateTime: Scalars['DateTime'];
  error?: Maybe<GraphOperationError>;
  lastActionDateTime: Scalars['DateTime'];
  operationType: GraphTeamsAsyncOperationType;
  status: GraphTeamsAsyncOperationStatus;
  targetResourceId?: Maybe<Scalars['String']>;
  targetResourceLocation?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export enum GraphTeamsAsyncOperationStatus {
  Invalid = 'invalid',
  NotStarted = 'notStarted',
  InProgress = 'inProgress',
  Succeeded = 'succeeded',
  Failed = 'failed',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphTeamsAsyncOperationType {
  Invalid = 'invalid',
  CloneTeam = 'cloneTeam',
  ArchiveTeam = 'archiveTeam',
  UnarchiveTeam = 'unarchiveTeam',
  CreateTeam = 'createTeam',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphTeamsTab = GraphEntity & {
  __typename?: 'GraphTeamsTab';
  configuration?: Maybe<GraphTeamsTabConfiguration>;
  displayName?: Maybe<Scalars['String']>;
  webUrl?: Maybe<Scalars['String']>;
  teamsApp?: Maybe<GraphTeamsApp>;
  id: Scalars['String'];
};

export type GraphTeamsTabConfiguration = {
  __typename?: 'GraphTeamsTabConfiguration';
  contentUrl?: Maybe<Scalars['String']>;
  entityId?: Maybe<Scalars['String']>;
  removeUrl?: Maybe<Scalars['String']>;
  websiteUrl?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphTeamsTemplate = GraphEntity & {
  __typename?: 'GraphTeamsTemplate';
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTeamsTemplateInput = {
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTeamsTemplateUpdateInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphTeamwork = GraphEntity & {
  __typename?: 'GraphTeamwork';
  workforceIntegrations?: Maybe<Array<Maybe<GraphWorkforceIntegration>>>;
  workforceIntegrationsById?: Maybe<GraphWorkforceIntegration>;
  id: Scalars['String'];
};

export type GraphTeamworkWorkforceIntegrationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTeamworkWorkforceIntegrationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTeamworkActivityTopicInput = {
  source?: Maybe<GraphTeamworkActivityTopicSource>;
  value: Scalars['String'];
  webUrl?: Maybe<Scalars['String']>;
};

export enum GraphTeamworkActivityTopicSource {
  EntityUrl = 'entityUrl',
  Text = 'text',
}

export type GraphTeamworkBot = GraphEntity & {
  __typename?: 'GraphTeamworkBot';
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTeamworkHostedContent = GraphEntity & {
  __typename?: 'GraphTeamworkHostedContent';
  contentBytes?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphTeamworkNotificationRecipientInput = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphTelecomExpenseManagementPartner = GraphEntity & {
  __typename?: 'GraphTelecomExpenseManagementPartner';
  appAuthorized: Scalars['Boolean'];
  displayName?: Maybe<Scalars['String']>;
  enabled: Scalars['Boolean'];
  lastConnectionDateTime: Scalars['DateTime'];
  url?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphTeleconferenceDeviceMediaQualityInput = {
  averageInboundJitter?: Maybe<Scalars['ISO8601Duration']>;
  averageInboundPacketLossRateInPercentage?: Maybe<Scalars['Float']>;
  averageInboundRoundTripDelay?: Maybe<Scalars['ISO8601Duration']>;
  averageOutboundJitter?: Maybe<Scalars['ISO8601Duration']>;
  averageOutboundPacketLossRateInPercentage?: Maybe<Scalars['Float']>;
  averageOutboundRoundTripDelay?: Maybe<Scalars['ISO8601Duration']>;
  channelIndex: Scalars['Int'];
  inboundPackets?: Maybe<Scalars['BigInt']>;
  localIPAddress?: Maybe<Scalars['String']>;
  localPort?: Maybe<Scalars['Int']>;
  maximumInboundJitter?: Maybe<Scalars['ISO8601Duration']>;
  maximumInboundPacketLossRateInPercentage?: Maybe<Scalars['Float']>;
  maximumInboundRoundTripDelay?: Maybe<Scalars['ISO8601Duration']>;
  maximumOutboundJitter?: Maybe<Scalars['ISO8601Duration']>;
  maximumOutboundPacketLossRateInPercentage?: Maybe<Scalars['Float']>;
  maximumOutboundRoundTripDelay?: Maybe<Scalars['ISO8601Duration']>;
  mediaDuration?: Maybe<Scalars['ISO8601Duration']>;
  networkLinkSpeedInBytes?: Maybe<Scalars['BigInt']>;
  outboundPackets?: Maybe<Scalars['BigInt']>;
  remoteIPAddress?: Maybe<Scalars['String']>;
  remotePort?: Maybe<Scalars['Int']>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphTeleconferenceDeviceQualityInput = {
  callChainId: Scalars['GUID'];
  cloudServiceDeploymentEnvironment?: Maybe<Scalars['String']>;
  cloudServiceDeploymentId?: Maybe<Scalars['String']>;
  cloudServiceInstanceName?: Maybe<Scalars['String']>;
  cloudServiceName?: Maybe<Scalars['String']>;
  deviceDescription: Scalars['String'];
  deviceName: Scalars['String'];
  mediaLegId: Scalars['GUID'];
  mediaQualityList: Array<Maybe<GraphTeleconferenceDeviceMediaQualityInput>>;
  participantId: Scalars['GUID'];
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphTermsAndConditions = GraphEntity & {
  __typename?: 'GraphTermsAndConditions';
  acceptanceStatement?: Maybe<Scalars['String']>;
  bodyText?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  title?: Maybe<Scalars['String']>;
  version: Scalars['Int'];
  acceptanceStatuses?: Maybe<Array<Maybe<GraphTermsAndConditionsAcceptanceStatus>>>;
  acceptanceStatusesById?: Maybe<GraphTermsAndConditionsAcceptanceStatus>;
  assignments?: Maybe<Array<Maybe<GraphTermsAndConditionsAssignment>>>;
  assignmentsById?: Maybe<GraphTermsAndConditionsAssignment>;
  id: Scalars['String'];
};

export type GraphTermsAndConditionsAcceptanceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTermsAndConditionsAcceptanceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTermsAndConditionsAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTermsAndConditionsAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTermsAndConditionsAcceptanceStatus = GraphEntity & {
  __typename?: 'GraphTermsAndConditionsAcceptanceStatus';
  acceptedDateTime: Scalars['DateTime'];
  acceptedVersion: Scalars['Int'];
  userDisplayName?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  termsAndConditions?: Maybe<GraphTermsAndConditions>;
  id: Scalars['String'];
};

export type GraphTermsAndConditionsAssignment = GraphEntity & {
  __typename?: 'GraphTermsAndConditionsAssignment';
  target?: Maybe<GraphDeviceAndAppManagementAssignmentTarget>;
  id: Scalars['String'];
};

export type GraphTermsExpiration = {
  __typename?: 'GraphTermsExpiration';
  frequency?: Maybe<Scalars['ISO8601Duration']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphTermsExpirationInput = {
  frequency?: Maybe<Scalars['ISO8601Duration']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphTermsOfUseContainer = GraphEntity & {
  __typename?: 'GraphTermsOfUseContainer';
  agreementAcceptances?: Maybe<Array<Maybe<GraphAgreementAcceptance>>>;
  agreementAcceptancesById?: Maybe<GraphAgreementAcceptance>;
  agreements?: Maybe<Array<Maybe<GraphAgreement>>>;
  agreementsById?: Maybe<GraphAgreement>;
  id: Scalars['String'];
};

export type GraphTermsOfUseContainerAgreementAcceptancesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTermsOfUseContainerAgreementAcceptancesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTermsOfUseContainerAgreementsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTermsOfUseContainerAgreementsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTextColumn = {
  __typename?: 'GraphTextColumn';
  allowMultipleLines?: Maybe<Scalars['Boolean']>;
  appendChangesToExistingText?: Maybe<Scalars['Boolean']>;
  linesForEditing?: Maybe<Scalars['Int']>;
  maxLength?: Maybe<Scalars['Int']>;
  textType?: Maybe<Scalars['String']>;
};

export enum GraphThreatAssessmentContentType {
  Mail = 'mail',
  Url = 'url',
  File = 'file',
}

export type GraphThreatAssessmentRequest = {
  category: GraphThreatCategory;
  contentType?: Maybe<GraphThreatAssessmentContentType>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  expectedAssessment: GraphThreatExpectedAssessment;
  requestSource?: Maybe<GraphThreatAssessmentRequestSource>;
  status?: Maybe<GraphThreatAssessmentStatus>;
  results?: Maybe<Array<Maybe<GraphThreatAssessmentResult>>>;
  resultsById?: Maybe<GraphThreatAssessmentResult>;
  id: Scalars['String'];
};

export type GraphThreatAssessmentRequestResultsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphThreatAssessmentRequestResultsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum GraphThreatAssessmentRequestSource {
  Undefined = 'undefined',
  User = 'user',
  Administrator = 'administrator',
}

export type GraphThreatAssessmentResult = GraphEntity & {
  __typename?: 'GraphThreatAssessmentResult';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  message?: Maybe<Scalars['String']>;
  resultType?: Maybe<GraphThreatAssessmentResultType>;
  id: Scalars['String'];
};

export enum GraphThreatAssessmentResultType {
  CheckPolicy = 'checkPolicy',
  Rescan = 'rescan',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphThreatAssessmentStatus {
  Pending = 'pending',
  Completed = 'completed',
}

export enum GraphThreatCategory {
  Undefined = 'undefined',
  Spam = 'spam',
  Phishing = 'phishing',
  Malware = 'malware',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphThreatExpectedAssessment {
  Block = 'block',
  Unblock = 'unblock',
}

export type GraphThumbnail = {
  __typename?: 'GraphThumbnail';
  content?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  sourceItemId?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
};

export type GraphThumbnailSet = GraphEntity & {
  __typename?: 'GraphThumbnailSet';
  large?: Maybe<GraphThumbnail>;
  medium?: Maybe<GraphThumbnail>;
  small?: Maybe<GraphThumbnail>;
  source?: Maybe<GraphThumbnail>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTimeConstraintInput = {
  activityDomain?: Maybe<GraphActivityDomain>;
  timeSlots?: Maybe<Array<Maybe<GraphTimeSlotInput>>>;
};

export type GraphTimeOff = GraphChangeTrackedEntity & {
  __typename?: 'GraphTimeOff';
  draftTimeOff?: Maybe<GraphTimeOffItem>;
  sharedTimeOff?: Maybe<GraphTimeOffItem>;
  userId?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphTimeOffItem = {
  __typename?: 'GraphTimeOffItem';
  timeOffReasonId?: Maybe<Scalars['String']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  theme: GraphScheduleEntityTheme;
};

export type GraphTimeOffReason = GraphChangeTrackedEntity & {
  __typename?: 'GraphTimeOffReason';
  displayName?: Maybe<Scalars['String']>;
  iconType?: Maybe<GraphTimeOffReasonIconType>;
  isActive?: Maybe<Scalars['Boolean']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export enum GraphTimeOffReasonIconType {
  None = 'none',
  Car = 'car',
  Calendar = 'calendar',
  Running = 'running',
  Plane = 'plane',
  FirstAid = 'firstAid',
  Doctor = 'doctor',
  NotWorking = 'notWorking',
  Clock = 'clock',
  JuryDuty = 'juryDuty',
  Globe = 'globe',
  Cup = 'cup',
  Phone = 'phone',
  Weather = 'weather',
  Umbrella = 'umbrella',
  PiggyBank = 'piggyBank',
  Dog = 'dog',
  Cake = 'cake',
  TrafficCone = 'trafficCone',
  Pin = 'pin',
  Sunny = 'sunny',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphTimeOffRequest = GraphScheduleChangeRequest & {
  __typename?: 'GraphTimeOffRequest';
  endDateTime?: Maybe<Scalars['DateTime']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  timeOffReasonId?: Maybe<Scalars['String']>;
  assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
  managerActionDateTime?: Maybe<Scalars['DateTime']>;
  managerActionMessage?: Maybe<Scalars['String']>;
  managerUserId?: Maybe<Scalars['String']>;
  senderDateTime?: Maybe<Scalars['DateTime']>;
  senderMessage?: Maybe<Scalars['String']>;
  senderUserId?: Maybe<Scalars['String']>;
  state?: Maybe<GraphScheduleChangeState>;
  decline?: Maybe<Scalars['JSON']>;
  approve?: Maybe<Scalars['JSON']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphTimeOffRequestDeclineArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphTimeOffRequestApproveArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type GraphTimeRange = {
  __typename?: 'GraphTimeRange';
  endTime?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
};

export type GraphTimeSlot = {
  __typename?: 'GraphTimeSlot';
  end: GraphDateTimeTimeZone;
  start: GraphDateTimeTimeZone;
};

export type GraphTimeSlotInput = {
  end: GraphDateTimeTimeZoneInput;
  start: GraphDateTimeTimeZoneInput;
};

export type GraphTimeZoneBase = {
  __typename?: 'GraphTimeZoneBase';
  name?: Maybe<Scalars['String']>;
};

export type GraphTimeZoneBaseInput = {
  name?: Maybe<Scalars['String']>;
};

export type GraphTimeZoneInformation = {
  __typename?: 'GraphTimeZoneInformation';
  alias?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
};

export type GraphTodo = GraphEntity & {
  __typename?: 'GraphTodo';
  lists?: Maybe<Array<Maybe<GraphTodoTaskList>>>;
  listsById?: Maybe<GraphTodoTaskList>;
  id: Scalars['String'];
};

export type GraphTodoListsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTodoListsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTodoTask = GraphEntity & {
  __typename?: 'GraphTodoTask';
  body?: Maybe<GraphItemBody>;
  bodyLastModifiedDateTime: Scalars['DateTime'];
  completedDateTime?: Maybe<GraphDateTimeTimeZone>;
  createdDateTime: Scalars['DateTime'];
  dueDateTime?: Maybe<GraphDateTimeTimeZone>;
  importance: GraphImportance;
  isReminderOn: Scalars['Boolean'];
  lastModifiedDateTime: Scalars['DateTime'];
  recurrence?: Maybe<GraphPatternedRecurrence>;
  reminderDateTime?: Maybe<GraphDateTimeTimeZone>;
  status: GraphTaskStatus;
  title?: Maybe<Scalars['String']>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  linkedResources?: Maybe<Array<Maybe<GraphLinkedResource>>>;
  linkedResourcesById?: Maybe<GraphLinkedResource>;
  delta?: Maybe<Array<Maybe<GraphTodoTask>>>;
  id: Scalars['String'];
};

export type GraphTodoTaskExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTodoTaskExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTodoTaskLinkedResourcesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTodoTaskLinkedResourcesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTodoTaskList = GraphEntity & {
  __typename?: 'GraphTodoTaskList';
  displayName?: Maybe<Scalars['String']>;
  isOwner: Scalars['Boolean'];
  isShared: Scalars['Boolean'];
  wellknownListName: GraphWellknownListName;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  tasks?: Maybe<Array<Maybe<GraphTodoTask>>>;
  tasksById?: Maybe<GraphTodoTask>;
  delta?: Maybe<Array<Maybe<GraphTodoTaskList>>>;
  id: Scalars['String'];
};

export type GraphTodoTaskListExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTodoTaskListExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTodoTaskListTasksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTodoTaskListTasksByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTokenIssuancePolicy = GraphStsPolicy & {
  __typename?: 'GraphTokenIssuancePolicy';
  rest?: Maybe<Scalars['JSON']>;
  definition: Array<Maybe<Scalars['String']>>;
  isOrganizationDefault?: Maybe<Scalars['Boolean']>;
  appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  appliesToById?: Maybe<GraphDirectoryObject>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTokenIssuancePolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTokenIssuancePolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTokenIssuancePolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphTokenIssuancePolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphTokenIssuancePolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphTokenIssuancePolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphTokenIssuancePolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphTokenIssuancePolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphTokenIssuancePolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphTokenIssuancePolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphTokenLifetimePolicy = GraphStsPolicy & {
  __typename?: 'GraphTokenLifetimePolicy';
  rest?: Maybe<Scalars['JSON']>;
  definition: Array<Maybe<Scalars['String']>>;
  isOrganizationDefault?: Maybe<Scalars['Boolean']>;
  appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  appliesToById?: Maybe<GraphDirectoryObject>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphTokenLifetimePolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphTokenLifetimePolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphTokenLifetimePolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphTokenLifetimePolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphTokenLifetimePolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphTokenLifetimePolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphTokenLifetimePolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphTokenLifetimePolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphTokenLifetimePolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphTokenLifetimePolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphTokenMeetingInfo = GraphMeetingInfo & {
  __typename?: 'GraphTokenMeetingInfo';
  token: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphTone {
  Tone0 = 'tone0',
  Tone1 = 'tone1',
  Tone2 = 'tone2',
  Tone3 = 'tone3',
  Tone4 = 'tone4',
  Tone5 = 'tone5',
  Tone6 = 'tone6',
  Tone7 = 'tone7',
  Tone8 = 'tone8',
  Tone9 = 'tone9',
  Star = 'star',
  Pound = 'pound',
  A = 'a',
  B = 'b',
  C = 'c',
  D = 'd',
  Flash = 'flash',
}

export type GraphToneInfo = {
  __typename?: 'GraphToneInfo';
  sequenceId: Scalars['BigInt'];
  tone: GraphTone;
};

export type GraphToneInfoInput = {
  sequenceId: Scalars['BigInt'];
  tone: GraphTone;
};

export type GraphTrending = GraphEntity & {
  __typename?: 'GraphTrending';
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  resourceReference?: Maybe<GraphResourceReference>;
  resourceVisualization?: Maybe<GraphResourceVisualization>;
  weight: Scalars['Float'];
  resource?: Maybe<GraphEntity>;
  id: Scalars['String'];
};

export type GraphUnifiedRoleAssignment = GraphEntity & {
  __typename?: 'GraphUnifiedRoleAssignment';
  appScopeId?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  directoryScopeId?: Maybe<Scalars['String']>;
  principalId?: Maybe<Scalars['String']>;
  roleDefinitionId?: Maybe<Scalars['String']>;
  appScope?: Maybe<GraphAppScope>;
  directoryScope?: Maybe<GraphDirectoryObject>;
  principal?: Maybe<GraphDirectoryObject>;
  roleDefinition?: Maybe<GraphUnifiedRoleDefinition>;
  id: Scalars['String'];
};

export type GraphUnifiedRoleDefinition = GraphEntity & {
  __typename?: 'GraphUnifiedRoleDefinition';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  isBuiltIn?: Maybe<Scalars['Boolean']>;
  isEnabled?: Maybe<Scalars['Boolean']>;
  resourceScopes: Array<Maybe<Scalars['String']>>;
  rolePermissions: Array<Maybe<GraphUnifiedRolePermission>>;
  templateId?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  inheritsPermissionsFrom?: Maybe<Array<Maybe<GraphUnifiedRoleDefinition>>>;
  inheritsPermissionsFromById?: Maybe<GraphUnifiedRoleDefinition>;
  id: Scalars['String'];
};

export type GraphUnifiedRoleDefinitionInheritsPermissionsFromArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUnifiedRoleDefinitionInheritsPermissionsFromByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUnifiedRolePermission = {
  __typename?: 'GraphUnifiedRolePermission';
  allowedResourceActions: Array<Maybe<Scalars['String']>>;
  condition?: Maybe<Scalars['String']>;
  excludedResourceActions?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphUpdateWindowsDeviceAccountActionParameterInput = {
  calendarSyncEnabled?: Maybe<Scalars['Boolean']>;
  deviceAccount?: Maybe<GraphWindowsDeviceAccountInput>;
  deviceAccountEmail?: Maybe<Scalars['String']>;
  exchangeServer?: Maybe<Scalars['String']>;
  passwordRotationEnabled?: Maybe<Scalars['Boolean']>;
  sessionInitiationProtocalAddress?: Maybe<Scalars['String']>;
};

export type GraphUriClickSecurityState = {
  __typename?: 'GraphUriClickSecurityState';
  clickAction?: Maybe<Scalars['String']>;
  clickDateTime?: Maybe<Scalars['DateTime']>;
  id?: Maybe<Scalars['String']>;
  sourceId?: Maybe<Scalars['String']>;
  uriDomain?: Maybe<Scalars['String']>;
  verdict?: Maybe<Scalars['String']>;
};

export type GraphUrlAssessmentRequest = GraphThreatAssessmentRequest & {
  __typename?: 'GraphUrlAssessmentRequest';
  url: Scalars['String'];
  category: GraphThreatCategory;
  contentType?: Maybe<GraphThreatAssessmentContentType>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  expectedAssessment: GraphThreatExpectedAssessment;
  requestSource?: Maybe<GraphThreatAssessmentRequestSource>;
  status?: Maybe<GraphThreatAssessmentStatus>;
  results?: Maybe<Array<Maybe<GraphThreatAssessmentResult>>>;
  resultsById?: Maybe<GraphThreatAssessmentResult>;
  id: Scalars['String'];
};

export type GraphUrlAssessmentRequestResultsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUrlAssessmentRequestResultsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUsageDetails = {
  __typename?: 'GraphUsageDetails';
  lastAccessedDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
};

export type GraphUsedInsight = GraphEntity & {
  __typename?: 'GraphUsedInsight';
  lastUsed?: Maybe<GraphUsageDetails>;
  resourceReference?: Maybe<GraphResourceReference>;
  resourceVisualization?: Maybe<GraphResourceVisualization>;
  resource?: Maybe<GraphEntity>;
  id: Scalars['String'];
};

export type GraphUser = {
  __typename?: 'GraphUser';
  accountEnabled?: Maybe<Scalars['Boolean']>;
  ageGroup?: Maybe<Scalars['String']>;
  assignedLicenses: Array<Maybe<GraphAssignedLicense>>;
  assignedPlans: Array<Maybe<GraphAssignedPlan>>;
  businessPhones: Array<Maybe<Scalars['String']>>;
  city?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  consentProvidedForMinor?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  creationType?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  employeeHireDate?: Maybe<Scalars['DateTime']>;
  employeeId?: Maybe<Scalars['String']>;
  employeeOrgData?: Maybe<GraphEmployeeOrgData>;
  employeeType?: Maybe<Scalars['String']>;
  externalUserState?: Maybe<Scalars['String']>;
  externalUserStateChangeDateTime?: Maybe<Scalars['DateTime']>;
  faxNumber?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  identities?: Maybe<Array<Maybe<GraphObjectIdentity>>>;
  imAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  isResourceAccount?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  lastPasswordChangeDateTime?: Maybe<Scalars['DateTime']>;
  legalAgeGroupClassification?: Maybe<Scalars['String']>;
  licenseAssignmentStates?: Maybe<Array<Maybe<GraphLicenseAssignmentState>>>;
  mail?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  onPremisesDistinguishedName?: Maybe<Scalars['String']>;
  onPremisesDomainName?: Maybe<Scalars['String']>;
  onPremisesExtensionAttributes?: Maybe<GraphOnPremisesExtensionAttributes>;
  onPremisesImmutableId?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningError>>>;
  onPremisesSamAccountName?: Maybe<Scalars['String']>;
  onPremisesSecurityIdentifier?: Maybe<Scalars['String']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  onPremisesUserPrincipalName?: Maybe<Scalars['String']>;
  otherMails: Array<Maybe<Scalars['String']>>;
  passwordPolicies?: Maybe<Scalars['String']>;
  passwordProfile?: Maybe<GraphPasswordProfile>;
  postalCode?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  provisionedPlans: Array<Maybe<GraphProvisionedPlan>>;
  proxyAddresses: Array<Maybe<Scalars['String']>>;
  showInAddressList?: Maybe<Scalars['Boolean']>;
  signInSessionsValidFromDateTime?: Maybe<Scalars['DateTime']>;
  state?: Maybe<Scalars['String']>;
  streetAddress?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  usageLocation?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  userType?: Maybe<Scalars['String']>;
  mailboxSettings?: Maybe<GraphMailboxSettings>;
  deviceEnrollmentLimit: Scalars['Int'];
  aboutMe?: Maybe<Scalars['String']>;
  birthday: Scalars['DateTime'];
  hireDate: Scalars['DateTime'];
  interests?: Maybe<Array<Maybe<Scalars['String']>>>;
  mySite?: Maybe<Scalars['String']>;
  pastProjects?: Maybe<Array<Maybe<Scalars['String']>>>;
  preferredName?: Maybe<Scalars['String']>;
  responsibilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  schools?: Maybe<Array<Maybe<Scalars['String']>>>;
  skills?: Maybe<Array<Maybe<Scalars['String']>>>;
  appRoleAssignments?: Maybe<Array<Maybe<GraphAppRoleAssignment>>>;
  appRoleAssignmentsById?: Maybe<GraphAppRoleAssignment>;
  createdObjects?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  createdObjectsById?: Maybe<GraphDirectoryObject>;
  directReports?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  directReportsById?: Maybe<GraphDirectoryObject>;
  licenseDetails?: Maybe<Array<Maybe<GraphLicenseDetails>>>;
  licenseDetailsById?: Maybe<GraphLicenseDetails>;
  manager?: Maybe<GraphDirectoryObject>;
  memberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  memberOfById?: Maybe<GraphDirectoryObject>;
  oauth2PermissionGrants?: Maybe<Array<Maybe<GraphOAuth2PermissionGrant>>>;
  oauth2PermissionGrantsById?: Maybe<GraphOAuth2PermissionGrant>;
  ownedDevices?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  ownedDevicesById?: Maybe<GraphDirectoryObject>;
  ownedObjects?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  ownedObjectsById?: Maybe<GraphDirectoryObject>;
  registeredDevices?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  registeredDevicesById?: Maybe<GraphDirectoryObject>;
  scopedRoleMemberOf?: Maybe<Array<Maybe<GraphScopedRoleMembership>>>;
  scopedRoleMemberOfById?: Maybe<GraphScopedRoleMembership>;
  transitiveMemberOf?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  transitiveMemberOfById?: Maybe<GraphDirectoryObject>;
  calendar?: Maybe<GraphCalendar>;
  calendarGroups?: Maybe<Array<Maybe<GraphCalendarGroup>>>;
  calendarGroupsById?: Maybe<GraphCalendarGroup>;
  calendars?: Maybe<Array<Maybe<GraphCalendar>>>;
  calendarsById?: Maybe<GraphCalendar>;
  calendarView?: Maybe<Array<Maybe<GraphEvent>>>;
  calendarViewById?: Maybe<GraphEvent>;
  contactFolders?: Maybe<Array<Maybe<GraphContactFolder>>>;
  contactFoldersById?: Maybe<GraphContactFolder>;
  contacts?: Maybe<Array<Maybe<GraphContact>>>;
  contactsById?: Maybe<GraphContact>;
  events?: Maybe<Array<Maybe<GraphEvent>>>;
  eventsById?: Maybe<GraphEvent>;
  inferenceClassification?: Maybe<GraphInferenceClassification>;
  mailFolders?: Maybe<Array<Maybe<GraphMailFolder>>>;
  mailFoldersById?: Maybe<GraphMailFolder>;
  messages?: Maybe<Array<Maybe<GraphMessage>>>;
  messagesById?: Maybe<GraphMessage>;
  outlook?: Maybe<GraphOutlookUser>;
  people?: Maybe<Array<Maybe<GraphPerson>>>;
  peopleById?: Maybe<GraphPerson>;
  photo?: Maybe<GraphProfilePhoto>;
  photos?: Maybe<Array<Maybe<GraphProfilePhoto>>>;
  photosById?: Maybe<GraphProfilePhoto>;
  drive?: Maybe<GraphDrive>;
  drives?: Maybe<Array<Maybe<GraphDrive>>>;
  drivesById?: Maybe<GraphDrive>;
  followedSites?: Maybe<Array<Maybe<GraphSite>>>;
  followedSitesById?: Maybe<GraphSite>;
  extensions?: Maybe<Array<Maybe<GraphExtension>>>;
  extensionsById?: Maybe<GraphExtension>;
  agreementAcceptances?: Maybe<Array<Maybe<GraphAgreementAcceptance>>>;
  agreementAcceptancesById?: Maybe<GraphAgreementAcceptance>;
  managedDevices?: Maybe<Array<Maybe<GraphManagedDevice>>>;
  managedDevicesById?: Maybe<GraphManagedDevice>;
  managedAppRegistrations?: Maybe<Array<Maybe<GraphManagedAppRegistration>>>;
  managedAppRegistrationsById?: Maybe<GraphManagedAppRegistration>;
  deviceManagementTroubleshootingEvents?: Maybe<Array<Maybe<GraphDeviceManagementTroubleshootingEvent>>>;
  deviceManagementTroubleshootingEventsById?: Maybe<GraphDeviceManagementTroubleshootingEvent>;
  planner?: Maybe<GraphPlannerUser>;
  insights?: Maybe<GraphOfficeGraphInsights>;
  settings?: Maybe<GraphUserSettings>;
  onenote?: Maybe<GraphOnenote>;
  activities?: Maybe<Array<Maybe<GraphUserActivity>>>;
  activitiesById?: Maybe<GraphUserActivity>;
  onlineMeetings?: Maybe<Array<Maybe<GraphOnlineMeeting>>>;
  onlineMeetingsById?: Maybe<GraphOnlineMeeting>;
  presence?: Maybe<GraphPresence>;
  authentication?: Maybe<GraphAuthentication>;
  chats?: Maybe<Array<Maybe<GraphChat>>>;
  chatsById?: Maybe<GraphChat>;
  joinedTeams?: Maybe<Array<Maybe<GraphTeam>>>;
  joinedTeamsById?: Maybe<GraphTeam>;
  teamwork?: Maybe<GraphUserTeamwork>;
  todo?: Maybe<GraphTodo>;
  rest?: Maybe<Scalars['JSON']>;
  reminderView?: Maybe<Array<Maybe<GraphReminder>>>;
  getManagedAppDiagnosticStatuses?: Maybe<Array<Maybe<GraphManagedAppDiagnosticStatus>>>;
  getManagedAppPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
  delta?: Maybe<Array<Maybe<GraphUser>>>;
  assignLicense?: Maybe<Scalars['JSON']>;
  changePassword?: Maybe<Scalars['JSON']>;
  reprocessLicenseAssignment?: Maybe<Scalars['JSON']>;
  revokeSignInSessions?: Maybe<Scalars['JSON']>;
  findMeetingTimes?: Maybe<Scalars['JSON']>;
  getMailTips?: Maybe<Scalars['JSON']>;
  sendMail?: Maybe<Scalars['JSON']>;
  translateExchangeIds?: Maybe<Scalars['JSON']>;
  removeAllDevicesFromManagement?: Maybe<Scalars['JSON']>;
  wipeManagedAppRegistrationsByDeviceTag?: Maybe<Scalars['JSON']>;
  exportPersonalData?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphUserAppRoleAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserAppRoleAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserCreatedObjectsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserCreatedObjectsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserDirectReportsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserDirectReportsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserLicenseDetailsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserLicenseDetailsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserOauth2PermissionGrantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserOauth2PermissionGrantsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserOwnedDevicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserOwnedDevicesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserOwnedObjectsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserOwnedObjectsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserRegisteredDevicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserRegisteredDevicesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserScopedRoleMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserScopedRoleMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserTransitiveMemberOfArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserTransitiveMemberOfByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserCalendarGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserCalendarGroupsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserCalendarsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserCalendarsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserCalendarViewArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserCalendarViewByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserContactFoldersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserContactFoldersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserContactsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserContactsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserEventsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserEventsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserMailFoldersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserMailFoldersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserMessagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserMessagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserPeopleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserPeopleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserPhotosArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserPhotosByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserDrivesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserDrivesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserFollowedSitesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserFollowedSitesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserExtensionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserAgreementAcceptancesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserAgreementAcceptancesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserManagedDevicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserManagedDevicesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserManagedAppRegistrationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserManagedAppRegistrationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserDeviceManagementTroubleshootingEventsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserDeviceManagementTroubleshootingEventsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserActivitiesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserActivitiesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserOnlineMeetingsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserOnlineMeetingsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserChatsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserChatsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserJoinedTeamsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserJoinedTeamsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserAssignLicenseArgs = {
  bindingParameter: GraphUserInput;
  addLicenses: Array<Maybe<GraphAssignedLicenseInput>>;
  removeLicenses: Array<Maybe<Scalars['GUID']>>;
};

export type GraphUserChangePasswordArgs = {
  bindingParameter: GraphUserInput;
  currentPassword?: Maybe<Scalars['String']>;
  newPassword?: Maybe<Scalars['String']>;
};

export type GraphUserReprocessLicenseAssignmentArgs = {
  bindingParameter: GraphUserInput;
};

export type GraphUserRevokeSignInSessionsArgs = {
  bindingParameter: GraphUserInput;
};

export type GraphUserFindMeetingTimesArgs = {
  bindingParameter?: Maybe<GraphUserInput>;
  attendees?: Maybe<Array<Maybe<GraphAttendeeBaseInput>>>;
  locationConstraint?: Maybe<GraphLocationConstraintInput>;
  timeConstraint?: Maybe<GraphTimeConstraintInput>;
  meetingDuration?: Maybe<Scalars['ISO8601Duration']>;
  maxCandidates?: Maybe<Scalars['Int']>;
  isOrganizerOptional?: Maybe<Scalars['Boolean']>;
  returnSuggestionReasons?: Maybe<Scalars['Boolean']>;
  minimumAttendeePercentage?: Maybe<Scalars['Float']>;
};

export type GraphUserGetMailTipsArgs = {
  bindingParameter?: Maybe<GraphUserInput>;
  EmailAddresses: Array<Maybe<Scalars['String']>>;
  MailTipsOptions?: Maybe<GraphMailTipsType>;
};

export type GraphUserSendMailArgs = {
  bindingParameter?: Maybe<GraphUserInput>;
  Message: GraphMessageInput;
  SaveToSentItems?: Maybe<Scalars['Boolean']>;
};

export type GraphUserTranslateExchangeIdsArgs = {
  bindingParameter?: Maybe<GraphUserInput>;
  InputIds: Array<Maybe<Scalars['String']>>;
  TargetIdType: GraphExchangeIdFormat;
  SourceIdType: GraphExchangeIdFormat;
};

export type GraphUserRemoveAllDevicesFromManagementArgs = {
  bindingParameter?: Maybe<GraphUserInput>;
};

export type GraphUserWipeManagedAppRegistrationsByDeviceTagArgs = {
  bindingParameter?: Maybe<GraphUserInput>;
  deviceTag?: Maybe<Scalars['String']>;
};

export type GraphUserExportPersonalDataArgs = {
  bindingParameter?: Maybe<GraphUserInput>;
  storageLocation?: Maybe<Scalars['String']>;
};

export type GraphUserValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type GraphUserCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type GraphUserCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type GraphUserGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphUserGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type GraphUserRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type GraphUserGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type GraphUserGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum GraphUserAccountSecurityType {
  Unknown = 'unknown',
  Standard = 'standard',
  Power = 'power',
  Administrator = 'administrator',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphUserActivity = GraphEntity & {
  __typename?: 'GraphUserActivity';
  activationUrl: Scalars['String'];
  activitySourceHost: Scalars['String'];
  appActivityId: Scalars['String'];
  appDisplayName?: Maybe<Scalars['String']>;
  contentInfo?: Maybe<GraphJson>;
  contentUrl?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  expirationDateTime?: Maybe<Scalars['DateTime']>;
  fallbackUrl?: Maybe<Scalars['String']>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  status?: Maybe<GraphStatus>;
  userTimezone?: Maybe<Scalars['String']>;
  visualElements: GraphVisualInfo;
  historyItems?: Maybe<Array<Maybe<GraphActivityHistoryItem>>>;
  historyItemsById?: Maybe<GraphActivityHistoryItem>;
  recent?: Maybe<Array<Maybe<GraphUserActivity>>>;
  id: Scalars['String'];
};

export type GraphUserActivityHistoryItemsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserActivityHistoryItemsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserAttributeValuesItem = {
  __typename?: 'GraphUserAttributeValuesItem';
  isDefault: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphUserAttributeValuesItemInput = {
  isDefault: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type GraphUserConsentRequest = {
  __typename?: 'GraphUserConsentRequest';
  reason?: Maybe<Scalars['String']>;
  approval?: Maybe<GraphApproval>;
  filterByCurrentUser?: Maybe<Array<Maybe<GraphUserConsentRequest>>>;
  approvalId?: Maybe<Scalars['String']>;
  completedDateTime?: Maybe<Scalars['DateTime']>;
  createdBy?: Maybe<GraphIdentitySet>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  customData?: Maybe<Scalars['String']>;
  status: Scalars['String'];
  id: Scalars['String'];
};

export type GraphUserFlowApiConnectorConfiguration = {
  __typename?: 'GraphUserFlowApiConnectorConfiguration';
  postAttributeCollection?: Maybe<GraphIdentityApiConnector>;
  postFederationSignup?: Maybe<GraphIdentityApiConnector>;
};

export type GraphUserFlowLanguageConfiguration = GraphEntity & {
  __typename?: 'GraphUserFlowLanguageConfiguration';
  displayName?: Maybe<Scalars['String']>;
  isEnabled: Scalars['Boolean'];
  defaultPages?: Maybe<Array<Maybe<GraphUserFlowLanguagePage>>>;
  defaultPagesById?: Maybe<GraphUserFlowLanguagePage>;
  overridesPages?: Maybe<Array<Maybe<GraphUserFlowLanguagePage>>>;
  overridesPagesById?: Maybe<GraphUserFlowLanguagePage>;
  id: Scalars['String'];
};

export type GraphUserFlowLanguageConfigurationDefaultPagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserFlowLanguageConfigurationDefaultPagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserFlowLanguageConfigurationOverridesPagesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserFlowLanguageConfigurationOverridesPagesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserFlowLanguagePage = GraphEntity & {
  __typename?: 'GraphUserFlowLanguagePage';
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export enum GraphUserFlowType {
  SignUp = 'signUp',
  SignIn = 'signIn',
  SignUpOrSignIn = 'signUpOrSignIn',
  PasswordReset = 'passwordReset',
  ProfileUpdate = 'profileUpdate',
  ResourceOwner = 'resourceOwner',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphUserIdentity = {
  __typename?: 'GraphUserIdentity';
  ipAddress?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type GraphUserIdentityInput = {
  ipAddress?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['JSON']>;
  displayName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
};

export type GraphUserInput = {
  accountEnabled?: Maybe<Scalars['Boolean']>;
  ageGroup?: Maybe<Scalars['String']>;
  assignedLicenses: Array<Maybe<GraphAssignedLicenseInput>>;
  assignedPlans: Array<Maybe<GraphAssignedPlanInput>>;
  businessPhones: Array<Maybe<Scalars['String']>>;
  city?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  consentProvidedForMinor?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  creationType?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  employeeHireDate?: Maybe<Scalars['DateTime']>;
  employeeId?: Maybe<Scalars['String']>;
  employeeOrgData?: Maybe<GraphEmployeeOrgDataInput>;
  employeeType?: Maybe<Scalars['String']>;
  externalUserState?: Maybe<Scalars['String']>;
  externalUserStateChangeDateTime?: Maybe<Scalars['DateTime']>;
  faxNumber?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  identities?: Maybe<Array<Maybe<GraphObjectIdentityInput>>>;
  imAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  isResourceAccount?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  lastPasswordChangeDateTime?: Maybe<Scalars['DateTime']>;
  legalAgeGroupClassification?: Maybe<Scalars['String']>;
  licenseAssignmentStates?: Maybe<Array<Maybe<GraphLicenseAssignmentStateInput>>>;
  mail?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  onPremisesDistinguishedName?: Maybe<Scalars['String']>;
  onPremisesDomainName?: Maybe<Scalars['String']>;
  onPremisesExtensionAttributes?: Maybe<GraphOnPremisesExtensionAttributesInput>;
  onPremisesImmutableId?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningErrorInput>>>;
  onPremisesSamAccountName?: Maybe<Scalars['String']>;
  onPremisesSecurityIdentifier?: Maybe<Scalars['String']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  onPremisesUserPrincipalName?: Maybe<Scalars['String']>;
  otherMails: Array<Maybe<Scalars['String']>>;
  passwordPolicies?: Maybe<Scalars['String']>;
  passwordProfile?: Maybe<GraphPasswordProfileInput>;
  postalCode?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  provisionedPlans: Array<Maybe<GraphProvisionedPlanInput>>;
  proxyAddresses: Array<Maybe<Scalars['String']>>;
  showInAddressList?: Maybe<Scalars['Boolean']>;
  signInSessionsValidFromDateTime?: Maybe<Scalars['DateTime']>;
  state?: Maybe<Scalars['String']>;
  streetAddress?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  usageLocation?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  userType?: Maybe<Scalars['String']>;
  mailboxSettings?: Maybe<GraphMailboxSettingsInput>;
  deviceEnrollmentLimit: Scalars['Int'];
  aboutMe?: Maybe<Scalars['String']>;
  birthday: Scalars['DateTime'];
  hireDate: Scalars['DateTime'];
  interests?: Maybe<Array<Maybe<Scalars['String']>>>;
  mySite?: Maybe<Scalars['String']>;
  pastProjects?: Maybe<Array<Maybe<Scalars['String']>>>;
  preferredName?: Maybe<Scalars['String']>;
  responsibilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  schools?: Maybe<Array<Maybe<Scalars['String']>>>;
  skills?: Maybe<Array<Maybe<Scalars['String']>>>;
  rest?: Maybe<Scalars['JSON']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphUserInstallStateSummary = GraphEntity & {
  __typename?: 'GraphUserInstallStateSummary';
  failedDeviceCount: Scalars['Int'];
  installedDeviceCount: Scalars['Int'];
  notInstalledDeviceCount: Scalars['Int'];
  userName?: Maybe<Scalars['String']>;
  deviceStates?: Maybe<Array<Maybe<GraphDeviceInstallState>>>;
  deviceStatesById?: Maybe<GraphDeviceInstallState>;
  id: Scalars['String'];
};

export type GraphUserInstallStateSummaryDeviceStatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserInstallStateSummaryDeviceStatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserScopeTeamsAppInstallation = {
  __typename?: 'GraphUserScopeTeamsAppInstallation';
  chat?: Maybe<GraphChat>;
  teamsApp?: Maybe<GraphTeamsApp>;
  teamsAppDefinition?: Maybe<GraphTeamsAppDefinition>;
  upgrade?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphUserScopeTeamsAppInstallationUpgradeArgs = {
  bindingParameter?: Maybe<GraphTeamsAppInstallationInput>;
};

export type GraphUserSecurityState = {
  __typename?: 'GraphUserSecurityState';
  aadUserId?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  domainName?: Maybe<Scalars['String']>;
  emailRole?: Maybe<GraphEmailRole>;
  isVpn?: Maybe<Scalars['Boolean']>;
  logonDateTime?: Maybe<Scalars['DateTime']>;
  logonId?: Maybe<Scalars['String']>;
  logonIp?: Maybe<Scalars['String']>;
  logonLocation?: Maybe<Scalars['String']>;
  logonType?: Maybe<GraphLogonType>;
  onPremisesSecurityIdentifier?: Maybe<Scalars['String']>;
  riskScore?: Maybe<Scalars['String']>;
  userAccountType?: Maybe<GraphUserAccountSecurityType>;
  userPrincipalName?: Maybe<Scalars['String']>;
};

export type GraphUserSettings = GraphEntity & {
  __typename?: 'GraphUserSettings';
  contributionToContentDiscoveryAsOrganizationDisabled: Scalars['Boolean'];
  contributionToContentDiscoveryDisabled: Scalars['Boolean'];
  shiftPreferences?: Maybe<GraphShiftPreferences>;
  id: Scalars['String'];
};

export type GraphUserTeamwork = GraphEntity & {
  __typename?: 'GraphUserTeamwork';
  installedApps?: Maybe<Array<Maybe<GraphUserScopeTeamsAppInstallation>>>;
  installedAppsById?: Maybe<GraphUserScopeTeamsAppInstallation>;
  sendActivityNotification?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphUserTeamworkInstalledAppsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphUserTeamworkInstalledAppsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphUserTeamworkSendActivityNotificationArgs = {
  bindingParameter?: Maybe<GraphUserTeamworkInput>;
  topic?: Maybe<GraphTeamworkActivityTopicInput>;
  activityType?: Maybe<Scalars['String']>;
  chainId?: Maybe<Scalars['BigInt']>;
  previewText?: Maybe<GraphItemBodyInput>;
  templateParameters?: Maybe<Array<Maybe<GraphKeyValuePairInput>>>;
};

export type GraphUserTeamworkInput = {
  id: Scalars['String'];
};

export type GraphUserUpdateInput = {
  accountEnabled?: Maybe<Scalars['Boolean']>;
  ageGroup?: Maybe<Scalars['String']>;
  assignedLicenses?: Maybe<Array<Maybe<GraphAssignedLicenseInput>>>;
  assignedPlans?: Maybe<Array<Maybe<GraphAssignedPlanInput>>>;
  businessPhones?: Maybe<Array<Maybe<Scalars['String']>>>;
  city?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  consentProvidedForMinor?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  creationType?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  employeeHireDate?: Maybe<Scalars['DateTime']>;
  employeeId?: Maybe<Scalars['String']>;
  employeeOrgData?: Maybe<GraphEmployeeOrgDataInput>;
  employeeType?: Maybe<Scalars['String']>;
  externalUserState?: Maybe<Scalars['String']>;
  externalUserStateChangeDateTime?: Maybe<Scalars['DateTime']>;
  faxNumber?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  identities?: Maybe<Array<Maybe<GraphObjectIdentityInput>>>;
  imAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  isResourceAccount?: Maybe<Scalars['Boolean']>;
  jobTitle?: Maybe<Scalars['String']>;
  lastPasswordChangeDateTime?: Maybe<Scalars['DateTime']>;
  legalAgeGroupClassification?: Maybe<Scalars['String']>;
  licenseAssignmentStates?: Maybe<Array<Maybe<GraphLicenseAssignmentStateInput>>>;
  mail?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  mobilePhone?: Maybe<Scalars['String']>;
  officeLocation?: Maybe<Scalars['String']>;
  onPremisesDistinguishedName?: Maybe<Scalars['String']>;
  onPremisesDomainName?: Maybe<Scalars['String']>;
  onPremisesExtensionAttributes?: Maybe<GraphOnPremisesExtensionAttributesInput>;
  onPremisesImmutableId?: Maybe<Scalars['String']>;
  onPremisesLastSyncDateTime?: Maybe<Scalars['DateTime']>;
  onPremisesProvisioningErrors?: Maybe<Array<Maybe<GraphOnPremisesProvisioningErrorInput>>>;
  onPremisesSamAccountName?: Maybe<Scalars['String']>;
  onPremisesSecurityIdentifier?: Maybe<Scalars['String']>;
  onPremisesSyncEnabled?: Maybe<Scalars['Boolean']>;
  onPremisesUserPrincipalName?: Maybe<Scalars['String']>;
  otherMails?: Maybe<Array<Maybe<Scalars['String']>>>;
  passwordPolicies?: Maybe<Scalars['String']>;
  passwordProfile?: Maybe<GraphPasswordProfileInput>;
  postalCode?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  provisionedPlans?: Maybe<Array<Maybe<GraphProvisionedPlanInput>>>;
  proxyAddresses?: Maybe<Array<Maybe<Scalars['String']>>>;
  showInAddressList?: Maybe<Scalars['Boolean']>;
  signInSessionsValidFromDateTime?: Maybe<Scalars['DateTime']>;
  state?: Maybe<Scalars['String']>;
  streetAddress?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  usageLocation?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  userType?: Maybe<Scalars['String']>;
  mailboxSettings?: Maybe<GraphMailboxSettingsInput>;
  deviceEnrollmentLimit?: Maybe<Scalars['Int']>;
  aboutMe?: Maybe<Scalars['String']>;
  birthday?: Maybe<Scalars['DateTime']>;
  hireDate?: Maybe<Scalars['DateTime']>;
  interests?: Maybe<Array<Maybe<Scalars['String']>>>;
  mySite?: Maybe<Scalars['String']>;
  pastProjects?: Maybe<Array<Maybe<Scalars['String']>>>;
  preferredName?: Maybe<Scalars['String']>;
  responsibilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  schools?: Maybe<Array<Maybe<Scalars['String']>>>;
  skills?: Maybe<Array<Maybe<Scalars['String']>>>;
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphVerifiedDomain = {
  __typename?: 'GraphVerifiedDomain';
  capabilities?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  isInitial?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphVerifiedDomainInput = {
  capabilities?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  isInitial?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GraphVideo = {
  __typename?: 'GraphVideo';
  audioBitsPerSample?: Maybe<Scalars['Int']>;
  audioChannels?: Maybe<Scalars['Int']>;
  audioFormat?: Maybe<Scalars['String']>;
  audioSamplesPerSecond?: Maybe<Scalars['Int']>;
  bitrate?: Maybe<Scalars['Int']>;
  duration?: Maybe<Scalars['BigInt']>;
  fourCC?: Maybe<Scalars['String']>;
  frameRate?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Int']>;
  width?: Maybe<Scalars['Int']>;
};

export type GraphVideoInput = {
  audioBitsPerSample?: Maybe<Scalars['Int']>;
  audioChannels?: Maybe<Scalars['Int']>;
  audioFormat?: Maybe<Scalars['String']>;
  audioSamplesPerSecond?: Maybe<Scalars['Int']>;
  bitrate?: Maybe<Scalars['Int']>;
  duration?: Maybe<Scalars['BigInt']>;
  fourCC?: Maybe<Scalars['String']>;
  frameRate?: Maybe<Scalars['Float']>;
  height?: Maybe<Scalars['Int']>;
  width?: Maybe<Scalars['Int']>;
};

export enum GraphVisibilitySetting {
  NotConfigured = 'notConfigured',
  Hide = 'hide',
  Show = 'show',
}

export type GraphVisualInfo = {
  __typename?: 'GraphVisualInfo';
  attribution?: Maybe<GraphImageInfo>;
  backgroundColor?: Maybe<Scalars['String']>;
  content?: Maybe<GraphJson>;
  description?: Maybe<Scalars['String']>;
  displayText: Scalars['String'];
};

export type GraphVppLicensingType = {
  __typename?: 'GraphVppLicensingType';
  supportsDeviceLicensing: Scalars['Boolean'];
  supportsUserLicensing: Scalars['Boolean'];
};

export type GraphVppToken = GraphEntity & {
  __typename?: 'GraphVppToken';
  appleId?: Maybe<Scalars['String']>;
  automaticallyUpdateApps: Scalars['Boolean'];
  countryOrRegion?: Maybe<Scalars['String']>;
  expirationDateTime: Scalars['DateTime'];
  lastModifiedDateTime: Scalars['DateTime'];
  lastSyncDateTime: Scalars['DateTime'];
  lastSyncStatus: GraphVppTokenSyncStatus;
  organizationName?: Maybe<Scalars['String']>;
  state: GraphVppTokenState;
  token?: Maybe<Scalars['String']>;
  vppTokenAccountType: GraphVppTokenAccountType;
  syncLicenses?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphVppTokenSyncLicensesArgs = {
  bindingParameter?: Maybe<GraphVppTokenInput>;
};

export enum GraphVppTokenAccountType {
  Business = 'business',
  Education = 'education',
}

export type GraphVppTokenInput = {
  appleId?: Maybe<Scalars['String']>;
  automaticallyUpdateApps: Scalars['Boolean'];
  countryOrRegion?: Maybe<Scalars['String']>;
  expirationDateTime: Scalars['DateTime'];
  lastModifiedDateTime: Scalars['DateTime'];
  lastSyncDateTime: Scalars['DateTime'];
  lastSyncStatus: GraphVppTokenSyncStatus;
  organizationName?: Maybe<Scalars['String']>;
  state: GraphVppTokenState;
  token?: Maybe<Scalars['String']>;
  vppTokenAccountType: GraphVppTokenAccountType;
  id: Scalars['String'];
};

export enum GraphVppTokenState {
  Unknown = 'unknown',
  Valid = 'valid',
  Expired = 'expired',
  Invalid = 'invalid',
  AssignedToExternalMdm = 'assignedToExternalMDM',
}

export enum GraphVppTokenSyncStatus {
  None = 'none',
  InProgress = 'inProgress',
  Completed = 'completed',
  Failed = 'failed',
}

export type GraphVulnerabilityState = {
  __typename?: 'GraphVulnerabilityState';
  cve?: Maybe<Scalars['String']>;
  severity?: Maybe<Scalars['String']>;
  wasRunning?: Maybe<Scalars['Boolean']>;
};

export type GraphWebApp = GraphMobileApp & {
  __typename?: 'GraphWebApp';
  appUrl?: Maybe<Scalars['String']>;
  useManagedBrowser: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWebAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWebAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWebAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWebAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWebAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphWebApplication = {
  __typename?: 'GraphWebApplication';
  homePageUrl?: Maybe<Scalars['String']>;
  implicitGrantSettings?: Maybe<GraphImplicitGrantSettings>;
  logoutUrl?: Maybe<Scalars['String']>;
  redirectUris: Array<Maybe<Scalars['String']>>;
};

export type GraphWebApplicationInput = {
  homePageUrl?: Maybe<Scalars['String']>;
  implicitGrantSettings?: Maybe<GraphImplicitGrantSettingsInput>;
  logoutUrl?: Maybe<Scalars['String']>;
  redirectUris: Array<Maybe<Scalars['String']>>;
};

export enum GraphWebBrowserCookieSettings {
  BrowserDefault = 'browserDefault',
  BlockAlways = 'blockAlways',
  AllowCurrentWebSite = 'allowCurrentWebSite',
  AllowFromWebsitesVisited = 'allowFromWebsitesVisited',
  AllowAlways = 'allowAlways',
}

export type GraphWebsite = {
  __typename?: 'GraphWebsite';
  address?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  type?: Maybe<GraphWebsiteType>;
};

export enum GraphWebsiteType {
  Other = 'other',
  Home = 'home',
  Work = 'work',
  Blog = 'blog',
  Profile = 'profile',
}

export enum GraphWeekIndex {
  First = 'first',
  Second = 'second',
  Third = 'third',
  Fourth = 'fourth',
  Last = 'last',
}

export enum GraphWeeklySchedule {
  UserDefined = 'userDefined',
  Everyday = 'everyday',
  Sunday = 'sunday',
  Monday = 'monday',
  Tuesday = 'tuesday',
  Wednesday = 'wednesday',
  Thursday = 'thursday',
  Friday = 'friday',
  Saturday = 'saturday',
}

export enum GraphWelcomeScreenMeetingInformation {
  UserDefined = 'userDefined',
  ShowOrganizerAndTimeOnly = 'showOrganizerAndTimeOnly',
  ShowOrganizerAndTimeAndSubject = 'showOrganizerAndTimeAndSubject',
}

export enum GraphWellknownListName {
  None = 'none',
  DefaultList = 'defaultList',
  FlaggedEmails = 'flaggedEmails',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphWin32LobApp = GraphMobileLobApp & {
  __typename?: 'GraphWin32LobApp';
  applicableArchitectures: GraphWindowsArchitecture;
  installCommandLine?: Maybe<Scalars['String']>;
  installExperience?: Maybe<GraphWin32LobAppInstallExperience>;
  minimumCpuSpeedInMHz?: Maybe<Scalars['Int']>;
  minimumFreeDiskSpaceInMB?: Maybe<Scalars['Int']>;
  minimumMemoryInMB?: Maybe<Scalars['Int']>;
  minimumNumberOfProcessors?: Maybe<Scalars['Int']>;
  minimumSupportedWindowsRelease?: Maybe<Scalars['String']>;
  msiInformation?: Maybe<GraphWin32LobAppMsiInformation>;
  returnCodes?: Maybe<Array<Maybe<GraphWin32LobAppReturnCode>>>;
  rules?: Maybe<Array<Maybe<GraphWin32LobAppRule>>>;
  setupFilePath?: Maybe<Scalars['String']>;
  uninstallCommandLine?: Maybe<Scalars['String']>;
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWin32LobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWin32LobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWin32LobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWin32LobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWin32LobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWin32LobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWin32LobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphWin32LobAppAssignmentSettings = GraphMobileAppAssignmentSettings & {
  __typename?: 'GraphWin32LobAppAssignmentSettings';
  installTimeSettings?: Maybe<GraphMobileAppInstallTimeSettings>;
  notifications: GraphWin32LobAppNotification;
  restartSettings?: Maybe<GraphWin32LobAppRestartSettings>;
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphWin32LobAppFileSystemOperationType {
  NotConfigured = 'notConfigured',
  Exists = 'exists',
  ModifiedDate = 'modifiedDate',
  CreatedDate = 'createdDate',
  Version = 'version',
  SizeInMb = 'sizeInMB',
}

export type GraphWin32LobAppFileSystemRule = GraphWin32LobAppRule & {
  __typename?: 'GraphWin32LobAppFileSystemRule';
  check32BitOn64System: Scalars['Boolean'];
  comparisonValue?: Maybe<Scalars['String']>;
  fileOrFolderName?: Maybe<Scalars['String']>;
  operationType: GraphWin32LobAppFileSystemOperationType;
  operator: GraphWin32LobAppRuleOperator;
  path?: Maybe<Scalars['String']>;
  ruleType: GraphWin32LobAppRuleType;
};

export type GraphWin32LobAppInstallExperience = {
  __typename?: 'GraphWin32LobAppInstallExperience';
  deviceRestartBehavior: GraphWin32LobAppRestartBehavior;
  runAsAccount: GraphRunAsAccountType;
};

export type GraphWin32LobAppMsiInformation = {
  __typename?: 'GraphWin32LobAppMsiInformation';
  packageType: GraphWin32LobAppMsiPackageType;
  productCode?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  productVersion?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  requiresReboot: Scalars['Boolean'];
  upgradeCode?: Maybe<Scalars['String']>;
};

export enum GraphWin32LobAppMsiPackageType {
  PerMachine = 'perMachine',
  PerUser = 'perUser',
  DualPurpose = 'dualPurpose',
}

export enum GraphWin32LobAppNotification {
  ShowAll = 'showAll',
  ShowReboot = 'showReboot',
  HideAll = 'hideAll',
}

export type GraphWin32LobAppPowerShellScriptRule = GraphWin32LobAppRule & {
  __typename?: 'GraphWin32LobAppPowerShellScriptRule';
  comparisonValue?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  enforceSignatureCheck: Scalars['Boolean'];
  operationType: GraphWin32LobAppPowerShellScriptRuleOperationType;
  operator: GraphWin32LobAppRuleOperator;
  runAs32Bit: Scalars['Boolean'];
  runAsAccount?: Maybe<GraphRunAsAccountType>;
  scriptContent?: Maybe<Scalars['String']>;
  ruleType: GraphWin32LobAppRuleType;
};

export enum GraphWin32LobAppPowerShellScriptRuleOperationType {
  NotConfigured = 'notConfigured',
  String = 'string',
  DateTime = 'dateTime',
  Integer = 'integer',
  Float = 'float',
  Version = 'version',
  Boolean = 'boolean',
}

export type GraphWin32LobAppProductCodeRule = GraphWin32LobAppRule & {
  __typename?: 'GraphWin32LobAppProductCodeRule';
  productCode?: Maybe<Scalars['String']>;
  productVersion?: Maybe<Scalars['String']>;
  productVersionOperator: GraphWin32LobAppRuleOperator;
  ruleType: GraphWin32LobAppRuleType;
};

export type GraphWin32LobAppRegistryRule = GraphWin32LobAppRule & {
  __typename?: 'GraphWin32LobAppRegistryRule';
  check32BitOn64System: Scalars['Boolean'];
  comparisonValue?: Maybe<Scalars['String']>;
  keyPath?: Maybe<Scalars['String']>;
  operationType: GraphWin32LobAppRegistryRuleOperationType;
  operator: GraphWin32LobAppRuleOperator;
  valueName?: Maybe<Scalars['String']>;
  ruleType: GraphWin32LobAppRuleType;
};

export enum GraphWin32LobAppRegistryRuleOperationType {
  NotConfigured = 'notConfigured',
  Exists = 'exists',
  DoesNotExist = 'doesNotExist',
  String = 'string',
  Integer = 'integer',
  Version = 'version',
}

export enum GraphWin32LobAppRestartBehavior {
  BasedOnReturnCode = 'basedOnReturnCode',
  Allow = 'allow',
  Suppress = 'suppress',
  Force = 'force',
}

export type GraphWin32LobAppRestartSettings = {
  __typename?: 'GraphWin32LobAppRestartSettings';
  countdownDisplayBeforeRestartInMinutes: Scalars['Int'];
  gracePeriodInMinutes: Scalars['Int'];
  restartNotificationSnoozeDurationInMinutes?: Maybe<Scalars['Int']>;
};

export type GraphWin32LobAppReturnCode = {
  __typename?: 'GraphWin32LobAppReturnCode';
  returnCode: Scalars['Int'];
  type: GraphWin32LobAppReturnCodeType;
};

export enum GraphWin32LobAppReturnCodeType {
  Failed = 'failed',
  Success = 'success',
  SoftReboot = 'softReboot',
  HardReboot = 'hardReboot',
  Retry = 'retry',
}

export type GraphWin32LobAppRule = {
  ruleType: GraphWin32LobAppRuleType;
};

export enum GraphWin32LobAppRuleOperator {
  NotConfigured = 'notConfigured',
  Equal = 'equal',
  NotEqual = 'notEqual',
  GreaterThan = 'greaterThan',
  GreaterThanOrEqual = 'greaterThanOrEqual',
  LessThan = 'lessThan',
  LessThanOrEqual = 'lessThanOrEqual',
}

export enum GraphWin32LobAppRuleType {
  Detection = 'detection',
  Requirement = 'requirement',
}

export type GraphWindows10CompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphWindows10CompliancePolicy';
  bitLockerEnabled: Scalars['Boolean'];
  codeIntegrityEnabled: Scalars['Boolean'];
  earlyLaunchAntiMalwareDriverEnabled: Scalars['Boolean'];
  mobileOsMaximumVersion?: Maybe<Scalars['String']>;
  mobileOsMinimumVersion?: Maybe<Scalars['String']>;
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredToUnlockFromIdle: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  requireHealthyDeviceReport: Scalars['Boolean'];
  secureBootEnabled: Scalars['Boolean'];
  storageRequireEncryption: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10CompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphWindows10CompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphWindows10CustomConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindows10CustomConfiguration';
  omaSettings?: Maybe<Array<Maybe<GraphOmaSetting>>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10CustomConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CustomConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CustomConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CustomConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CustomConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CustomConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CustomConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10CustomConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10CustomConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export enum GraphWindows10EditionType {
  Windows10Enterprise = 'windows10Enterprise',
  Windows10EnterpriseN = 'windows10EnterpriseN',
  Windows10Education = 'windows10Education',
  Windows10EducationN = 'windows10EducationN',
  Windows10MobileEnterprise = 'windows10MobileEnterprise',
  Windows10HolographicEnterprise = 'windows10HolographicEnterprise',
  Windows10Professional = 'windows10Professional',
  Windows10ProfessionalN = 'windows10ProfessionalN',
  Windows10ProfessionalEducation = 'windows10ProfessionalEducation',
  Windows10ProfessionalEducationN = 'windows10ProfessionalEducationN',
  Windows10ProfessionalWorkstation = 'windows10ProfessionalWorkstation',
  Windows10ProfessionalWorkstationN = 'windows10ProfessionalWorkstationN',
}

export type GraphWindows10EndpointProtectionConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindows10EndpointProtectionConfiguration';
  applicationGuardAllowPersistence: Scalars['Boolean'];
  applicationGuardAllowPrintToLocalPrinters: Scalars['Boolean'];
  applicationGuardAllowPrintToNetworkPrinters: Scalars['Boolean'];
  applicationGuardAllowPrintToPDF: Scalars['Boolean'];
  applicationGuardAllowPrintToXPS: Scalars['Boolean'];
  applicationGuardBlockClipboardSharing: GraphApplicationGuardBlockClipboardSharingType;
  applicationGuardBlockFileTransfer: GraphApplicationGuardBlockFileTransferType;
  applicationGuardBlockNonEnterpriseContent: Scalars['Boolean'];
  applicationGuardEnabled: Scalars['Boolean'];
  applicationGuardForceAuditing: Scalars['Boolean'];
  appLockerApplicationControl: GraphAppLockerApplicationControlType;
  bitLockerDisableWarningForOtherDiskEncryption: Scalars['Boolean'];
  bitLockerEnableStorageCardEncryptionOnMobile: Scalars['Boolean'];
  bitLockerEncryptDevice: Scalars['Boolean'];
  bitLockerRemovableDrivePolicy?: Maybe<GraphBitLockerRemovableDrivePolicy>;
  defenderAdditionalGuardedFolders?: Maybe<Array<Maybe<Scalars['String']>>>;
  defenderAttackSurfaceReductionExcludedPaths?: Maybe<Array<Maybe<Scalars['String']>>>;
  defenderExploitProtectionXml?: Maybe<Scalars['String']>;
  defenderExploitProtectionXmlFileName?: Maybe<Scalars['String']>;
  defenderGuardedFoldersAllowedAppPaths?: Maybe<Array<Maybe<Scalars['String']>>>;
  defenderSecurityCenterBlockExploitProtectionOverride: Scalars['Boolean'];
  firewallBlockStatefulFTP?: Maybe<Scalars['Boolean']>;
  firewallCertificateRevocationListCheckMethod: GraphFirewallCertificateRevocationListCheckMethodType;
  firewallIdleTimeoutForSecurityAssociationInSeconds?: Maybe<Scalars['Int']>;
  firewallIPSecExemptionsAllowDHCP: Scalars['Boolean'];
  firewallIPSecExemptionsAllowICMP: Scalars['Boolean'];
  firewallIPSecExemptionsAllowNeighborDiscovery: Scalars['Boolean'];
  firewallIPSecExemptionsAllowRouterDiscovery: Scalars['Boolean'];
  firewallMergeKeyingModuleSettings?: Maybe<Scalars['Boolean']>;
  firewallPacketQueueingMethod: GraphFirewallPacketQueueingMethodType;
  firewallPreSharedKeyEncodingMethod: GraphFirewallPreSharedKeyEncodingMethodType;
  firewallProfileDomain?: Maybe<GraphWindowsFirewallNetworkProfile>;
  firewallProfilePrivate?: Maybe<GraphWindowsFirewallNetworkProfile>;
  firewallProfilePublic?: Maybe<GraphWindowsFirewallNetworkProfile>;
  smartScreenBlockOverrideForFiles: Scalars['Boolean'];
  smartScreenEnableInShell: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10EndpointProtectionConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EndpointProtectionConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EndpointProtectionConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EndpointProtectionConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EndpointProtectionConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EndpointProtectionConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EndpointProtectionConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EndpointProtectionConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EndpointProtectionConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphWindows10EnterpriseModernAppManagementConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindows10EnterpriseModernAppManagementConfiguration';
  uninstallBuiltInApps: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10EnterpriseModernAppManagementConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphWindows10GeneralConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindows10GeneralConfiguration';
  accountsBlockAddingNonMicrosoftAccountEmail: Scalars['Boolean'];
  antiTheftModeBlocked: Scalars['Boolean'];
  appsAllowTrustedAppsSideloading: GraphStateManagementSetting;
  appsBlockWindowsStoreOriginatedApps: Scalars['Boolean'];
  bluetoothAllowedServices?: Maybe<Array<Maybe<Scalars['String']>>>;
  bluetoothBlockAdvertising: Scalars['Boolean'];
  bluetoothBlockDiscoverableMode: Scalars['Boolean'];
  bluetoothBlocked: Scalars['Boolean'];
  bluetoothBlockPrePairing: Scalars['Boolean'];
  cameraBlocked: Scalars['Boolean'];
  cellularBlockDataWhenRoaming: Scalars['Boolean'];
  cellularBlockVpn: Scalars['Boolean'];
  cellularBlockVpnWhenRoaming: Scalars['Boolean'];
  certificatesBlockManualRootCertificateInstallation: Scalars['Boolean'];
  connectedDevicesServiceBlocked: Scalars['Boolean'];
  copyPasteBlocked: Scalars['Boolean'];
  cortanaBlocked: Scalars['Boolean'];
  defenderBlockEndUserAccess: Scalars['Boolean'];
  defenderCloudBlockLevel: GraphDefenderCloudBlockLevelType;
  defenderDaysBeforeDeletingQuarantinedMalware?: Maybe<Scalars['Int']>;
  defenderDetectedMalwareActions?: Maybe<GraphDefenderDetectedMalwareActions>;
  defenderFileExtensionsToExclude?: Maybe<Array<Maybe<Scalars['String']>>>;
  defenderFilesAndFoldersToExclude?: Maybe<Array<Maybe<Scalars['String']>>>;
  defenderMonitorFileActivity: GraphDefenderMonitorFileActivity;
  defenderProcessesToExclude?: Maybe<Array<Maybe<Scalars['String']>>>;
  defenderPromptForSampleSubmission: GraphDefenderPromptForSampleSubmission;
  defenderRequireBehaviorMonitoring: Scalars['Boolean'];
  defenderRequireCloudProtection: Scalars['Boolean'];
  defenderRequireNetworkInspectionSystem: Scalars['Boolean'];
  defenderRequireRealTimeMonitoring: Scalars['Boolean'];
  defenderScanArchiveFiles: Scalars['Boolean'];
  defenderScanDownloads: Scalars['Boolean'];
  defenderScanIncomingMail: Scalars['Boolean'];
  defenderScanMappedNetworkDrivesDuringFullScan: Scalars['Boolean'];
  defenderScanMaxCpu?: Maybe<Scalars['Int']>;
  defenderScanNetworkFiles: Scalars['Boolean'];
  defenderScanRemovableDrivesDuringFullScan: Scalars['Boolean'];
  defenderScanScriptsLoadedInInternetExplorer: Scalars['Boolean'];
  defenderScanType: GraphDefenderScanType;
  defenderScheduledQuickScanTime?: Maybe<Scalars['String']>;
  defenderScheduledScanTime?: Maybe<Scalars['String']>;
  defenderSignatureUpdateIntervalInHours?: Maybe<Scalars['Int']>;
  defenderSystemScanSchedule: GraphWeeklySchedule;
  developerUnlockSetting: GraphStateManagementSetting;
  deviceManagementBlockFactoryResetOnMobile: Scalars['Boolean'];
  deviceManagementBlockManualUnenroll: Scalars['Boolean'];
  diagnosticsDataSubmissionMode: GraphDiagnosticDataSubmissionMode;
  edgeAllowStartPagesModification: Scalars['Boolean'];
  edgeBlockAccessToAboutFlags: Scalars['Boolean'];
  edgeBlockAddressBarDropdown: Scalars['Boolean'];
  edgeBlockAutofill: Scalars['Boolean'];
  edgeBlockCompatibilityList: Scalars['Boolean'];
  edgeBlockDeveloperTools: Scalars['Boolean'];
  edgeBlocked: Scalars['Boolean'];
  edgeBlockExtensions: Scalars['Boolean'];
  edgeBlockInPrivateBrowsing: Scalars['Boolean'];
  edgeBlockJavaScript: Scalars['Boolean'];
  edgeBlockLiveTileDataCollection: Scalars['Boolean'];
  edgeBlockPasswordManager: Scalars['Boolean'];
  edgeBlockPopups: Scalars['Boolean'];
  edgeBlockSearchSuggestions: Scalars['Boolean'];
  edgeBlockSendingDoNotTrackHeader: Scalars['Boolean'];
  edgeBlockSendingIntranetTrafficToInternetExplorer: Scalars['Boolean'];
  edgeClearBrowsingDataOnExit: Scalars['Boolean'];
  edgeCookiePolicy: GraphEdgeCookiePolicy;
  edgeDisableFirstRunPage: Scalars['Boolean'];
  edgeEnterpriseModeSiteListLocation?: Maybe<Scalars['String']>;
  edgeFirstRunUrl?: Maybe<Scalars['String']>;
  edgeHomepageUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  edgeRequireSmartScreen: Scalars['Boolean'];
  edgeSearchEngine?: Maybe<GraphEdgeSearchEngineBase>;
  edgeSendIntranetTrafficToInternetExplorer: Scalars['Boolean'];
  edgeSyncFavoritesWithInternetExplorer: Scalars['Boolean'];
  enterpriseCloudPrintDiscoveryEndPoint?: Maybe<Scalars['String']>;
  enterpriseCloudPrintDiscoveryMaxLimit?: Maybe<Scalars['Int']>;
  enterpriseCloudPrintMopriaDiscoveryResourceIdentifier?: Maybe<Scalars['String']>;
  enterpriseCloudPrintOAuthAuthority?: Maybe<Scalars['String']>;
  enterpriseCloudPrintOAuthClientIdentifier?: Maybe<Scalars['String']>;
  enterpriseCloudPrintResourceIdentifier?: Maybe<Scalars['String']>;
  experienceBlockDeviceDiscovery: Scalars['Boolean'];
  experienceBlockErrorDialogWhenNoSIM: Scalars['Boolean'];
  experienceBlockTaskSwitcher: Scalars['Boolean'];
  gameDvrBlocked: Scalars['Boolean'];
  internetSharingBlocked: Scalars['Boolean'];
  locationServicesBlocked: Scalars['Boolean'];
  lockScreenAllowTimeoutConfiguration: Scalars['Boolean'];
  lockScreenBlockActionCenterNotifications: Scalars['Boolean'];
  lockScreenBlockCortana: Scalars['Boolean'];
  lockScreenBlockToastNotifications: Scalars['Boolean'];
  lockScreenTimeoutInSeconds?: Maybe<Scalars['Int']>;
  logonBlockFastUserSwitching: Scalars['Boolean'];
  microsoftAccountBlocked: Scalars['Boolean'];
  microsoftAccountBlockSettingsSync: Scalars['Boolean'];
  networkProxyApplySettingsDeviceWide: Scalars['Boolean'];
  networkProxyAutomaticConfigurationUrl?: Maybe<Scalars['String']>;
  networkProxyDisableAutoDetect: Scalars['Boolean'];
  networkProxyServer?: Maybe<GraphWindows10NetworkProxyServer>;
  nfcBlocked: Scalars['Boolean'];
  oneDriveDisableFileSync: Scalars['Boolean'];
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  passwordRequireWhenResumeFromIdleState: Scalars['Boolean'];
  passwordSignInFailureCountBeforeFactoryReset?: Maybe<Scalars['Int']>;
  personalizationDesktopImageUrl?: Maybe<Scalars['String']>;
  personalizationLockScreenImageUrl?: Maybe<Scalars['String']>;
  privacyAdvertisingId: GraphStateManagementSetting;
  privacyAutoAcceptPairingAndConsentPrompts: Scalars['Boolean'];
  privacyBlockInputPersonalization: Scalars['Boolean'];
  resetProtectionModeBlocked: Scalars['Boolean'];
  safeSearchFilter: GraphSafeSearchFilterType;
  screenCaptureBlocked: Scalars['Boolean'];
  searchBlockDiacritics: Scalars['Boolean'];
  searchDisableAutoLanguageDetection: Scalars['Boolean'];
  searchDisableIndexerBackoff: Scalars['Boolean'];
  searchDisableIndexingEncryptedItems: Scalars['Boolean'];
  searchDisableIndexingRemovableDrive: Scalars['Boolean'];
  searchEnableAutomaticIndexSizeManangement: Scalars['Boolean'];
  searchEnableRemoteQueries: Scalars['Boolean'];
  settingsBlockAccountsPage: Scalars['Boolean'];
  settingsBlockAddProvisioningPackage: Scalars['Boolean'];
  settingsBlockAppsPage: Scalars['Boolean'];
  settingsBlockChangeLanguage: Scalars['Boolean'];
  settingsBlockChangePowerSleep: Scalars['Boolean'];
  settingsBlockChangeRegion: Scalars['Boolean'];
  settingsBlockChangeSystemTime: Scalars['Boolean'];
  settingsBlockDevicesPage: Scalars['Boolean'];
  settingsBlockEaseOfAccessPage: Scalars['Boolean'];
  settingsBlockEditDeviceName: Scalars['Boolean'];
  settingsBlockGamingPage: Scalars['Boolean'];
  settingsBlockNetworkInternetPage: Scalars['Boolean'];
  settingsBlockPersonalizationPage: Scalars['Boolean'];
  settingsBlockPrivacyPage: Scalars['Boolean'];
  settingsBlockRemoveProvisioningPackage: Scalars['Boolean'];
  settingsBlockSettingsApp: Scalars['Boolean'];
  settingsBlockSystemPage: Scalars['Boolean'];
  settingsBlockTimeLanguagePage: Scalars['Boolean'];
  settingsBlockUpdateSecurityPage: Scalars['Boolean'];
  sharedUserAppDataAllowed: Scalars['Boolean'];
  smartScreenBlockPromptOverride: Scalars['Boolean'];
  smartScreenBlockPromptOverrideForFiles: Scalars['Boolean'];
  smartScreenEnableAppInstallControl: Scalars['Boolean'];
  startBlockUnpinningAppsFromTaskbar: Scalars['Boolean'];
  startMenuAppListVisibility: GraphWindowsStartMenuAppListVisibilityType;
  startMenuHideChangeAccountSettings: Scalars['Boolean'];
  startMenuHideFrequentlyUsedApps: Scalars['Boolean'];
  startMenuHideHibernate: Scalars['Boolean'];
  startMenuHideLock: Scalars['Boolean'];
  startMenuHidePowerButton: Scalars['Boolean'];
  startMenuHideRecentJumpLists: Scalars['Boolean'];
  startMenuHideRecentlyAddedApps: Scalars['Boolean'];
  startMenuHideRestartOptions: Scalars['Boolean'];
  startMenuHideShutDown: Scalars['Boolean'];
  startMenuHideSignOut: Scalars['Boolean'];
  startMenuHideSleep: Scalars['Boolean'];
  startMenuHideSwitchAccount: Scalars['Boolean'];
  startMenuHideUserTile: Scalars['Boolean'];
  startMenuLayoutEdgeAssetsXml?: Maybe<Scalars['String']>;
  startMenuLayoutXml?: Maybe<Scalars['String']>;
  startMenuMode: GraphWindowsStartMenuModeType;
  startMenuPinnedFolderDocuments: GraphVisibilitySetting;
  startMenuPinnedFolderDownloads: GraphVisibilitySetting;
  startMenuPinnedFolderFileExplorer: GraphVisibilitySetting;
  startMenuPinnedFolderHomeGroup: GraphVisibilitySetting;
  startMenuPinnedFolderMusic: GraphVisibilitySetting;
  startMenuPinnedFolderNetwork: GraphVisibilitySetting;
  startMenuPinnedFolderPersonalFolder: GraphVisibilitySetting;
  startMenuPinnedFolderPictures: GraphVisibilitySetting;
  startMenuPinnedFolderSettings: GraphVisibilitySetting;
  startMenuPinnedFolderVideos: GraphVisibilitySetting;
  storageBlockRemovableStorage: Scalars['Boolean'];
  storageRequireMobileDeviceEncryption: Scalars['Boolean'];
  storageRestrictAppDataToSystemVolume: Scalars['Boolean'];
  storageRestrictAppInstallToSystemVolume: Scalars['Boolean'];
  tenantLockdownRequireNetworkDuringOutOfBoxExperience: Scalars['Boolean'];
  usbBlocked: Scalars['Boolean'];
  voiceRecordingBlocked: Scalars['Boolean'];
  webRtcBlockLocalhostIpAddress: Scalars['Boolean'];
  wiFiBlockAutomaticConnectHotspots: Scalars['Boolean'];
  wiFiBlocked: Scalars['Boolean'];
  wiFiBlockManualConfiguration: Scalars['Boolean'];
  wiFiScanInterval?: Maybe<Scalars['Int']>;
  windowsSpotlightBlockConsumerSpecificFeatures: Scalars['Boolean'];
  windowsSpotlightBlocked: Scalars['Boolean'];
  windowsSpotlightBlockOnActionCenter: Scalars['Boolean'];
  windowsSpotlightBlockTailoredExperiences: Scalars['Boolean'];
  windowsSpotlightBlockThirdPartyNotifications: Scalars['Boolean'];
  windowsSpotlightBlockWelcomeExperience: Scalars['Boolean'];
  windowsSpotlightBlockWindowsTips: Scalars['Boolean'];
  windowsSpotlightConfigureOnLockScreen: GraphWindowsSpotlightEnablementSettings;
  windowsStoreBlockAutoUpdate: Scalars['Boolean'];
  windowsStoreBlocked: Scalars['Boolean'];
  windowsStoreEnablePrivateStoreOnly: Scalars['Boolean'];
  wirelessDisplayBlockProjectionToThisDevice: Scalars['Boolean'];
  wirelessDisplayBlockUserInputFromReceiver: Scalars['Boolean'];
  wirelessDisplayRequirePinForPairing: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10GeneralConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10GeneralConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10GeneralConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10GeneralConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10GeneralConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10GeneralConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10GeneralConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10GeneralConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10GeneralConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphWindows10MobileCompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphWindows10MobileCompliancePolicy';
  bitLockerEnabled: Scalars['Boolean'];
  codeIntegrityEnabled: Scalars['Boolean'];
  earlyLaunchAntiMalwareDriverEnabled: Scalars['Boolean'];
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  passwordRequireToUnlockFromIdle: Scalars['Boolean'];
  secureBootEnabled: Scalars['Boolean'];
  storageRequireEncryption: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10MobileCompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10MobileCompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10MobileCompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10MobileCompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10MobileCompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10MobileCompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10MobileCompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10MobileCompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10MobileCompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10MobileCompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10MobileCompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphWindows10MobileCompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphWindows10NetworkProxyServer = {
  __typename?: 'GraphWindows10NetworkProxyServer';
  address: Scalars['String'];
  exceptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  useForLocalAddresses: Scalars['Boolean'];
};

export type GraphWindows10SecureAssessmentConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindows10SecureAssessmentConfiguration';
  allowPrinting: Scalars['Boolean'];
  allowScreenCapture: Scalars['Boolean'];
  allowTextSuggestion: Scalars['Boolean'];
  configurationAccount?: Maybe<Scalars['String']>;
  launchUri?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10SecureAssessmentConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10SecureAssessmentConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10SecureAssessmentConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10SecureAssessmentConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10SecureAssessmentConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10SecureAssessmentConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10SecureAssessmentConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10SecureAssessmentConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10SecureAssessmentConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphWindows10TeamGeneralConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindows10TeamGeneralConfiguration';
  azureOperationalInsightsBlockTelemetry: Scalars['Boolean'];
  azureOperationalInsightsWorkspaceId?: Maybe<Scalars['String']>;
  azureOperationalInsightsWorkspaceKey?: Maybe<Scalars['String']>;
  connectAppBlockAutoLaunch: Scalars['Boolean'];
  maintenanceWindowBlocked: Scalars['Boolean'];
  maintenanceWindowDurationInHours?: Maybe<Scalars['Int']>;
  maintenanceWindowStartTime?: Maybe<Scalars['String']>;
  miracastBlocked: Scalars['Boolean'];
  miracastChannel: GraphMiracastChannel;
  miracastRequirePin: Scalars['Boolean'];
  settingsBlockMyMeetingsAndFiles: Scalars['Boolean'];
  settingsBlockSessionResume: Scalars['Boolean'];
  settingsBlockSigninSuggestions: Scalars['Boolean'];
  settingsDefaultVolume?: Maybe<Scalars['Int']>;
  settingsScreenTimeoutInMinutes?: Maybe<Scalars['Int']>;
  settingsSessionTimeoutInMinutes?: Maybe<Scalars['Int']>;
  settingsSleepTimeoutInMinutes?: Maybe<Scalars['Int']>;
  welcomeScreenBackgroundImageUrl?: Maybe<Scalars['String']>;
  welcomeScreenBlockAutomaticWakeUp: Scalars['Boolean'];
  welcomeScreenMeetingInformation: GraphWelcomeScreenMeetingInformation;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows10TeamGeneralConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10TeamGeneralConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10TeamGeneralConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10TeamGeneralConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10TeamGeneralConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10TeamGeneralConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10TeamGeneralConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows10TeamGeneralConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows10TeamGeneralConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphWindows81CompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphWindows81CompliancePolicy';
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  storageRequireEncryption: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows81CompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81CompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81CompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81CompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81CompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81CompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81CompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81CompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81CompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81CompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81CompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphWindows81CompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphWindows81GeneralConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindows81GeneralConfiguration';
  accountsBlockAddingNonMicrosoftAccountEmail: Scalars['Boolean'];
  applyOnlyToWindows81: Scalars['Boolean'];
  browserBlockAutofill: Scalars['Boolean'];
  browserBlockAutomaticDetectionOfIntranetSites: Scalars['Boolean'];
  browserBlockEnterpriseModeAccess: Scalars['Boolean'];
  browserBlockJavaScript: Scalars['Boolean'];
  browserBlockPlugins: Scalars['Boolean'];
  browserBlockPopups: Scalars['Boolean'];
  browserBlockSendingDoNotTrackHeader: Scalars['Boolean'];
  browserBlockSingleWordEntryOnIntranetSites: Scalars['Boolean'];
  browserEnterpriseModeSiteListLocation?: Maybe<Scalars['String']>;
  browserInternetSecurityLevel: GraphInternetSiteSecurityLevel;
  browserIntranetSecurityLevel: GraphSiteSecurityLevel;
  browserLoggingReportLocation?: Maybe<Scalars['String']>;
  browserRequireFirewall: Scalars['Boolean'];
  browserRequireFraudWarning: Scalars['Boolean'];
  browserRequireHighSecurityForRestrictedSites: Scalars['Boolean'];
  browserRequireSmartScreen: Scalars['Boolean'];
  browserTrustedSitesSecurityLevel: GraphSiteSecurityLevel;
  cellularBlockDataRoaming: Scalars['Boolean'];
  diagnosticsBlockDataSubmission: Scalars['Boolean'];
  passwordBlockPicturePasswordAndPin: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequiredType: GraphRequiredPasswordType;
  passwordSignInFailureCountBeforeFactoryReset?: Maybe<Scalars['Int']>;
  storageRequireDeviceEncryption: Scalars['Boolean'];
  updatesRequireAutomaticUpdates: Scalars['Boolean'];
  userAccountControlSettings: GraphWindowsUserAccountControlSettings;
  workFoldersUrl?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindows81GeneralConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81GeneralConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81GeneralConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81GeneralConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81GeneralConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81GeneralConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81GeneralConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindows81GeneralConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindows81GeneralConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export enum GraphWindowsArchitecture {
  None = 'none',
  X86 = 'x86',
  X64 = 'x64',
  Arm = 'arm',
  Neutral = 'neutral',
}

export type GraphWindowsAutopilotDeviceIdentity = GraphEntity & {
  __typename?: 'GraphWindowsAutopilotDeviceIdentity';
  addressableUserName?: Maybe<Scalars['String']>;
  azureActiveDirectoryDeviceId?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  enrollmentState: GraphEnrollmentState;
  groupTag?: Maybe<Scalars['String']>;
  lastContactedDateTime: Scalars['DateTime'];
  managedDeviceId?: Maybe<Scalars['String']>;
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  productKey?: Maybe<Scalars['String']>;
  purchaseOrderIdentifier?: Maybe<Scalars['String']>;
  resourceName?: Maybe<Scalars['String']>;
  serialNumber?: Maybe<Scalars['String']>;
  skuNumber?: Maybe<Scalars['String']>;
  systemFamily?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  assignUserToDevice?: Maybe<Scalars['JSON']>;
  unassignUserFromDevice?: Maybe<Scalars['JSON']>;
  updateDeviceProperties?: Maybe<Scalars['JSON']>;
  deleteDevices?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsAutopilotDeviceIdentityAssignUserToDeviceArgs = {
  bindingParameter?: Maybe<GraphWindowsAutopilotDeviceIdentityInput>;
  userPrincipalName?: Maybe<Scalars['String']>;
  addressableUserName?: Maybe<Scalars['String']>;
};

export type GraphWindowsAutopilotDeviceIdentityUnassignUserFromDeviceArgs = {
  bindingParameter?: Maybe<GraphWindowsAutopilotDeviceIdentityInput>;
};

export type GraphWindowsAutopilotDeviceIdentityUpdateDevicePropertiesArgs = {
  bindingParameter?: Maybe<GraphWindowsAutopilotDeviceIdentityInput>;
  userPrincipalName?: Maybe<Scalars['String']>;
  addressableUserName?: Maybe<Scalars['String']>;
  groupTag?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
};

export type GraphWindowsAutopilotDeviceIdentityDeleteDevicesArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphWindowsAutopilotDeviceIdentityInput>>>;
  serialNumbers?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphWindowsAutopilotDeviceIdentityInput = {
  addressableUserName?: Maybe<Scalars['String']>;
  azureActiveDirectoryDeviceId?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  enrollmentState: GraphEnrollmentState;
  groupTag?: Maybe<Scalars['String']>;
  lastContactedDateTime: Scalars['DateTime'];
  managedDeviceId?: Maybe<Scalars['String']>;
  manufacturer?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  productKey?: Maybe<Scalars['String']>;
  purchaseOrderIdentifier?: Maybe<Scalars['String']>;
  resourceName?: Maybe<Scalars['String']>;
  serialNumber?: Maybe<Scalars['String']>;
  skuNumber?: Maybe<Scalars['String']>;
  systemFamily?: Maybe<Scalars['String']>;
  userPrincipalName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindowsDefenderAdvancedThreatProtectionConfiguration';
  allowSampleSharing: Scalars['Boolean'];
  enableExpeditedTelemetryReporting: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsDefenderAdvancedThreatProtectionConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export enum GraphWindowsDeliveryOptimizationMode {
  UserDefined = 'userDefined',
  HttpOnly = 'httpOnly',
  HttpWithPeeringNat = 'httpWithPeeringNat',
  HttpWithPeeringPrivateGroup = 'httpWithPeeringPrivateGroup',
  HttpWithInternetPeering = 'httpWithInternetPeering',
  SimpleDownload = 'simpleDownload',
  BypassMode = 'bypassMode',
}

export type GraphWindowsDeviceAccountInput = {
  password?: Maybe<Scalars['String']>;
};

export enum GraphWindowsDeviceType {
  None = 'none',
  Desktop = 'desktop',
  Mobile = 'mobile',
  Holographic = 'holographic',
  Team = 'team',
}

export type GraphWindowsFirewallNetworkProfile = {
  __typename?: 'GraphWindowsFirewallNetworkProfile';
  authorizedApplicationRulesFromGroupPolicyMerged: Scalars['Boolean'];
  connectionSecurityRulesFromGroupPolicyMerged: Scalars['Boolean'];
  firewallEnabled: GraphStateManagementSetting;
  globalPortRulesFromGroupPolicyMerged: Scalars['Boolean'];
  inboundConnectionsBlocked: Scalars['Boolean'];
  inboundNotificationsBlocked: Scalars['Boolean'];
  incomingTrafficBlocked: Scalars['Boolean'];
  outboundConnectionsBlocked: Scalars['Boolean'];
  policyRulesFromGroupPolicyMerged: Scalars['Boolean'];
  securedPacketExemptionAllowed: Scalars['Boolean'];
  stealthModeBlocked: Scalars['Boolean'];
  unicastResponsesToMulticastBroadcastsBlocked: Scalars['Boolean'];
};

export type GraphWindowsHelloForBusinessAuthenticationMethod = GraphAuthenticationMethod & {
  __typename?: 'GraphWindowsHelloForBusinessAuthenticationMethod';
  createdDateTime?: Maybe<Scalars['DateTime']>;
  displayName?: Maybe<Scalars['String']>;
  keyStrength?: Maybe<GraphAuthenticationMethodKeyStrength>;
  device?: Maybe<GraphDevice>;
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export enum GraphWindowsHelloForBusinessPinUsage {
  Allowed = 'allowed',
  Required = 'required',
  Disallowed = 'disallowed',
}

export type GraphWindowsInformationProtection = {
  azureRightsManagementServicesAllowed: Scalars['Boolean'];
  dataRecoveryCertificate?: Maybe<GraphWindowsInformationProtectionDataRecoveryCertificate>;
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel;
  enterpriseDomain?: Maybe<Scalars['String']>;
  enterpriseInternalProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseIPRanges?: Maybe<Array<Maybe<GraphWindowsInformationProtectionIpRangeCollection>>>;
  enterpriseIPRangesAreAuthoritative: Scalars['Boolean'];
  enterpriseNetworkDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProtectedDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProxiedDomains?: Maybe<Array<Maybe<GraphWindowsInformationProtectionProxiedDomainCollection>>>;
  enterpriseProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProxyServersAreAuthoritative: Scalars['Boolean'];
  exemptApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
  iconsVisible: Scalars['Boolean'];
  indexingEncryptedStoresOrItemsBlocked: Scalars['Boolean'];
  isAssigned: Scalars['Boolean'];
  neutralDomainResources?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  protectedApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
  protectionUnderLockConfigRequired: Scalars['Boolean'];
  revokeOnUnenrollDisabled: Scalars['Boolean'];
  rightsManagementServicesTemplateId?: Maybe<Scalars['GUID']>;
  smbAutoEncryptedFileExtensions?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
  assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
  exemptAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
  exemptAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
  protectedAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
  protectedAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
  assign?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  targetApps?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsInformationProtectionAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsInformationProtectionAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsInformationProtectionExemptAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsInformationProtectionExemptAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsInformationProtectionProtectedAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsInformationProtectionProtectedAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsInformationProtectionAssignArgs = {
  bindingParameter?: Maybe<GraphWindowsInformationProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type GraphWindowsInformationProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphWindowsInformationProtectionApp = {
  denied: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  productName?: Maybe<Scalars['String']>;
  publisherName?: Maybe<Scalars['String']>;
};

export type GraphWindowsInformationProtectionAppInput = {
  denied: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  productName?: Maybe<Scalars['String']>;
  publisherName?: Maybe<Scalars['String']>;
};

export type GraphWindowsInformationProtectionAppLearningSummary = GraphEntity & {
  __typename?: 'GraphWindowsInformationProtectionAppLearningSummary';
  applicationName?: Maybe<Scalars['String']>;
  applicationType: GraphApplicationType;
  deviceCount: Scalars['Int'];
  id: Scalars['String'];
};

export type GraphWindowsInformationProtectionAppLockerFile = GraphEntity & {
  __typename?: 'GraphWindowsInformationProtectionAppLockerFile';
  displayName?: Maybe<Scalars['String']>;
  file?: Maybe<Scalars['String']>;
  fileHash?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWindowsInformationProtectionDataRecoveryCertificate = {
  __typename?: 'GraphWindowsInformationProtectionDataRecoveryCertificate';
  certificate?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  expirationDateTime: Scalars['DateTime'];
  subjectName?: Maybe<Scalars['String']>;
};

export type GraphWindowsInformationProtectionDataRecoveryCertificateInput = {
  certificate?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  expirationDateTime: Scalars['DateTime'];
  subjectName?: Maybe<Scalars['String']>;
};

export type GraphWindowsInformationProtectionDesktopApp = GraphWindowsInformationProtectionApp & {
  __typename?: 'GraphWindowsInformationProtectionDesktopApp';
  binaryName: Scalars['String'];
  binaryVersionHigh?: Maybe<Scalars['String']>;
  binaryVersionLow?: Maybe<Scalars['String']>;
  denied: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  productName?: Maybe<Scalars['String']>;
  publisherName?: Maybe<Scalars['String']>;
};

export enum GraphWindowsInformationProtectionEnforcementLevel {
  NoProtection = 'noProtection',
  EncryptAndAuditOnly = 'encryptAndAuditOnly',
  EncryptAuditAndPrompt = 'encryptAuditAndPrompt',
  EncryptAuditAndBlock = 'encryptAuditAndBlock',
}

export type GraphWindowsInformationProtectionInput = {
  azureRightsManagementServicesAllowed: Scalars['Boolean'];
  dataRecoveryCertificate?: Maybe<GraphWindowsInformationProtectionDataRecoveryCertificateInput>;
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel;
  enterpriseDomain?: Maybe<Scalars['String']>;
  enterpriseInternalProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollectionInput>>>;
  enterpriseIPRanges?: Maybe<Array<Maybe<GraphWindowsInformationProtectionIpRangeCollectionInput>>>;
  enterpriseIPRangesAreAuthoritative: Scalars['Boolean'];
  enterpriseNetworkDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollectionInput>>>;
  enterpriseProtectedDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollectionInput>>>;
  enterpriseProxiedDomains?: Maybe<Array<Maybe<GraphWindowsInformationProtectionProxiedDomainCollectionInput>>>;
  enterpriseProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollectionInput>>>;
  enterpriseProxyServersAreAuthoritative: Scalars['Boolean'];
  exemptApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppInput>>>;
  iconsVisible: Scalars['Boolean'];
  indexingEncryptedStoresOrItemsBlocked: Scalars['Boolean'];
  isAssigned: Scalars['Boolean'];
  neutralDomainResources?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollectionInput>>>;
  protectedApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppInput>>>;
  protectionUnderLockConfigRequired: Scalars['Boolean'];
  revokeOnUnenrollDisabled: Scalars['Boolean'];
  rightsManagementServicesTemplateId?: Maybe<Scalars['GUID']>;
  smbAutoEncryptedFileExtensions?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollectionInput>>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWindowsInformationProtectionIpRangeCollection = {
  __typename?: 'GraphWindowsInformationProtectionIpRangeCollection';
  displayName: Scalars['String'];
  ranges: Array<Maybe<GraphIpRange>>;
};

export type GraphWindowsInformationProtectionIpRangeCollectionInput = {
  displayName: Scalars['String'];
  ranges: Array<Maybe<GraphIpRangeInput>>;
};

export type GraphWindowsInformationProtectionNetworkLearningSummary = GraphEntity & {
  __typename?: 'GraphWindowsInformationProtectionNetworkLearningSummary';
  deviceCount: Scalars['Int'];
  url?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export enum GraphWindowsInformationProtectionPinCharacterRequirements {
  NotAllow = 'notAllow',
  RequireAtLeastOne = 'requireAtLeastOne',
  Allow = 'allow',
}

export type GraphWindowsInformationProtectionPolicy = GraphWindowsInformationProtection & {
  __typename?: 'GraphWindowsInformationProtectionPolicy';
  daysWithoutContactBeforeUnenroll: Scalars['Int'];
  mdmEnrollmentUrl?: Maybe<Scalars['String']>;
  minutesOfInactivityBeforeDeviceLock: Scalars['Int'];
  numberOfPastPinsRemembered: Scalars['Int'];
  passwordMaximumAttemptCount: Scalars['Int'];
  pinExpirationDays: Scalars['Int'];
  pinLowercaseLetters: GraphWindowsInformationProtectionPinCharacterRequirements;
  pinMinimumLength: Scalars['Int'];
  pinSpecialCharacters: GraphWindowsInformationProtectionPinCharacterRequirements;
  pinUppercaseLetters: GraphWindowsInformationProtectionPinCharacterRequirements;
  revokeOnMdmHandoffDisabled: Scalars['Boolean'];
  windowsHelloForBusinessBlocked: Scalars['Boolean'];
  azureRightsManagementServicesAllowed: Scalars['Boolean'];
  dataRecoveryCertificate?: Maybe<GraphWindowsInformationProtectionDataRecoveryCertificate>;
  enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel;
  enterpriseDomain?: Maybe<Scalars['String']>;
  enterpriseInternalProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseIPRanges?: Maybe<Array<Maybe<GraphWindowsInformationProtectionIpRangeCollection>>>;
  enterpriseIPRangesAreAuthoritative: Scalars['Boolean'];
  enterpriseNetworkDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProtectedDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProxiedDomains?: Maybe<Array<Maybe<GraphWindowsInformationProtectionProxiedDomainCollection>>>;
  enterpriseProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  enterpriseProxyServersAreAuthoritative: Scalars['Boolean'];
  exemptApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
  iconsVisible: Scalars['Boolean'];
  indexingEncryptedStoresOrItemsBlocked: Scalars['Boolean'];
  isAssigned: Scalars['Boolean'];
  neutralDomainResources?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  protectedApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
  protectionUnderLockConfigRequired: Scalars['Boolean'];
  revokeOnUnenrollDisabled: Scalars['Boolean'];
  rightsManagementServicesTemplateId?: Maybe<Scalars['GUID']>;
  smbAutoEncryptedFileExtensions?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
  assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
  exemptAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
  exemptAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
  protectedAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
  protectedAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
  assign?: Maybe<Scalars['JSON']>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version?: Maybe<Scalars['String']>;
  targetApps?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsInformationProtectionPolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsInformationProtectionPolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsInformationProtectionPolicyExemptAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsInformationProtectionPolicyExemptAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsInformationProtectionPolicyProtectedAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsInformationProtectionPolicyProtectedAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsInformationProtectionPolicyAssignArgs = {
  bindingParameter?: Maybe<GraphWindowsInformationProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type GraphWindowsInformationProtectionPolicyTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type GraphWindowsInformationProtectionProxiedDomainCollection = {
  __typename?: 'GraphWindowsInformationProtectionProxiedDomainCollection';
  displayName: Scalars['String'];
  proxiedDomains: Array<Maybe<GraphProxiedDomain>>;
};

export type GraphWindowsInformationProtectionProxiedDomainCollectionInput = {
  displayName: Scalars['String'];
  proxiedDomains: Array<Maybe<GraphProxiedDomainInput>>;
};

export type GraphWindowsInformationProtectionResourceCollection = {
  __typename?: 'GraphWindowsInformationProtectionResourceCollection';
  displayName: Scalars['String'];
  resources?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphWindowsInformationProtectionResourceCollectionInput = {
  displayName: Scalars['String'];
  resources?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type GraphWindowsInformationProtectionStoreApp = GraphWindowsInformationProtectionApp & {
  __typename?: 'GraphWindowsInformationProtectionStoreApp';
  rest?: Maybe<Scalars['JSON']>;
  denied: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  productName?: Maybe<Scalars['String']>;
  publisherName?: Maybe<Scalars['String']>;
};

export type GraphWindowsMinimumOperatingSystem = {
  __typename?: 'GraphWindowsMinimumOperatingSystem';
  v10_0: Scalars['Boolean'];
  v8_0: Scalars['Boolean'];
  v8_1: Scalars['Boolean'];
};

export type GraphWindowsMobileMsi = GraphMobileLobApp & {
  __typename?: 'GraphWindowsMobileMsi';
  commandLine?: Maybe<Scalars['String']>;
  ignoreVersionDetection: Scalars['Boolean'];
  productCode?: Maybe<Scalars['String']>;
  productVersion?: Maybe<Scalars['String']>;
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsMobileMsiContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsMobileMsiContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsMobileMsiAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsMobileMsiAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsMobileMsiCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsMobileMsiCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsMobileMsiAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphWindowsPhone81CompliancePolicy = GraphDeviceCompliancePolicy & {
  __typename?: 'GraphWindowsPhone81CompliancePolicy';
  osMaximumVersion?: Maybe<Scalars['String']>;
  osMinimumVersion?: Maybe<Scalars['String']>;
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeLock?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  storageRequireEncryption: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
  scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
  scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  scheduleActionsForRules?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsPhone81CompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type GraphWindowsPhone81CompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type GraphWindowsPhone81CustomConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindowsPhone81CustomConfiguration';
  omaSettings?: Maybe<Array<Maybe<GraphOmaSetting>>>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsPhone81CustomConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CustomConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CustomConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CustomConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CustomConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CustomConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CustomConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81CustomConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81CustomConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphWindowsPhone81GeneralConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindowsPhone81GeneralConfiguration';
  applyOnlyToWindowsPhone81: Scalars['Boolean'];
  appsBlockCopyPaste: Scalars['Boolean'];
  bluetoothBlocked: Scalars['Boolean'];
  cameraBlocked: Scalars['Boolean'];
  cellularBlockWifiTethering: Scalars['Boolean'];
  compliantAppListType: GraphAppListType;
  compliantAppsList?: Maybe<Array<Maybe<GraphAppListItem>>>;
  diagnosticDataBlockSubmission: Scalars['Boolean'];
  emailBlockAddingAccounts: Scalars['Boolean'];
  locationServicesBlocked: Scalars['Boolean'];
  microsoftAccountBlocked: Scalars['Boolean'];
  nfcBlocked: Scalars['Boolean'];
  passwordBlockSimple: Scalars['Boolean'];
  passwordExpirationDays?: Maybe<Scalars['Int']>;
  passwordMinimumCharacterSetCount?: Maybe<Scalars['Int']>;
  passwordMinimumLength?: Maybe<Scalars['Int']>;
  passwordMinutesOfInactivityBeforeScreenTimeout?: Maybe<Scalars['Int']>;
  passwordPreviousPasswordBlockCount?: Maybe<Scalars['Int']>;
  passwordRequired: Scalars['Boolean'];
  passwordRequiredType: GraphRequiredPasswordType;
  passwordSignInFailureCountBeforeFactoryReset?: Maybe<Scalars['Int']>;
  screenCaptureBlocked: Scalars['Boolean'];
  storageBlockRemovableStorage: Scalars['Boolean'];
  storageRequireEncryption: Scalars['Boolean'];
  webBrowserBlocked: Scalars['Boolean'];
  wifiBlockAutomaticConnectHotspots: Scalars['Boolean'];
  wifiBlocked: Scalars['Boolean'];
  wifiBlockHotspotReporting: Scalars['Boolean'];
  windowsStoreBlocked: Scalars['Boolean'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsPhone81GeneralConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81GeneralConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81GeneralConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81GeneralConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81GeneralConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81GeneralConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81GeneralConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsPhone81GeneralConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsPhone81GeneralConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export enum GraphWindowsSpotlightEnablementSettings {
  NotConfigured = 'notConfigured',
  Disabled = 'disabled',
  Enabled = 'enabled',
}

export enum GraphWindowsStartMenuAppListVisibilityType {
  UserDefined = 'userDefined',
  Collapse = 'collapse',
  Remove = 'remove',
  DisableSettingsApp = 'disableSettingsApp',
}

export enum GraphWindowsStartMenuModeType {
  UserDefined = 'userDefined',
  FullScreen = 'fullScreen',
  NonFullScreen = 'nonFullScreen',
}

export type GraphWindowsUniversalAppX = GraphMobileLobApp & {
  __typename?: 'GraphWindowsUniversalAppX';
  applicableArchitectures: GraphWindowsArchitecture;
  applicableDeviceTypes: GraphWindowsDeviceType;
  identityName?: Maybe<Scalars['String']>;
  identityPublisherHash: Scalars['String'];
  identityResourceIdentifier?: Maybe<Scalars['String']>;
  identityVersion?: Maybe<Scalars['String']>;
  isBundle: Scalars['Boolean'];
  minimumSupportedOperatingSystem: GraphWindowsMinimumOperatingSystem;
  committedContentVersion?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  size: Scalars['BigInt'];
  contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
  contentVersionsById?: Maybe<GraphMobileAppContent>;
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  informationUrl?: Maybe<Scalars['String']>;
  isFeatured: Scalars['Boolean'];
  largeIcon?: Maybe<GraphMimeContent>;
  lastModifiedDateTime: Scalars['DateTime'];
  notes?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  privacyInformationUrl?: Maybe<Scalars['String']>;
  publisher?: Maybe<Scalars['String']>;
  publishingState: GraphMobileAppPublishingState;
  assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
  assignmentsById?: Maybe<GraphMobileAppAssignment>;
  categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
  categoriesById?: Maybe<GraphMobileAppCategory>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsUniversalAppXContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsUniversalAppXContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsUniversalAppXAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsUniversalAppXAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsUniversalAppXCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsUniversalAppXCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsUniversalAppXAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type GraphWindowsUpdateActiveHoursInstall = GraphWindowsUpdateInstallScheduleType & {
  __typename?: 'GraphWindowsUpdateActiveHoursInstall';
  activeHoursEnd: Scalars['String'];
  activeHoursStart: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphWindowsUpdateForBusinessConfiguration = GraphDeviceConfiguration & {
  __typename?: 'GraphWindowsUpdateForBusinessConfiguration';
  automaticUpdateMode: GraphAutomaticUpdateMode;
  businessReadyUpdatesOnly: GraphWindowsUpdateType;
  deliveryOptimizationMode: GraphWindowsDeliveryOptimizationMode;
  driversExcluded: Scalars['Boolean'];
  featureUpdatesDeferralPeriodInDays: Scalars['Int'];
  featureUpdatesPaused: Scalars['Boolean'];
  featureUpdatesPauseExpiryDateTime: Scalars['DateTime'];
  installationSchedule?: Maybe<GraphWindowsUpdateInstallScheduleType>;
  microsoftUpdateServiceAllowed: Scalars['Boolean'];
  prereleaseFeatures: GraphPrereleaseFeatures;
  qualityUpdatesDeferralPeriodInDays: Scalars['Int'];
  qualityUpdatesPaused: Scalars['Boolean'];
  qualityUpdatesPauseExpiryDateTime: Scalars['DateTime'];
  createdDateTime: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  lastModifiedDateTime: Scalars['DateTime'];
  version: Scalars['Int'];
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
  assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
  deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
  deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
  deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
  deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
  deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
  userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
  userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
  userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
  assign?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWindowsUpdateForBusinessConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsUpdateForBusinessConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsUpdateForBusinessConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsUpdateForBusinessConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsUpdateForBusinessConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsUpdateForBusinessConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsUpdateForBusinessConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWindowsUpdateForBusinessConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWindowsUpdateForBusinessConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type GraphWindowsUpdateInstallScheduleType = {
  rest?: Maybe<Scalars['JSON']>;
};

export type GraphWindowsUpdateScheduledInstall = GraphWindowsUpdateInstallScheduleType & {
  __typename?: 'GraphWindowsUpdateScheduledInstall';
  scheduledInstallDay: GraphWeeklySchedule;
  scheduledInstallTime: Scalars['String'];
  rest?: Maybe<Scalars['JSON']>;
};

export enum GraphWindowsUpdateType {
  UserDefined = 'userDefined',
  All = 'all',
  BusinessReadyOnly = 'businessReadyOnly',
  WindowsInsiderBuildFast = 'windowsInsiderBuildFast',
  WindowsInsiderBuildSlow = 'windowsInsiderBuildSlow',
  WindowsInsiderBuildRelease = 'windowsInsiderBuildRelease',
}

export enum GraphWindowsUserAccountControlSettings {
  UserDefined = 'userDefined',
  AlwaysNotify = 'alwaysNotify',
  NotifyOnAppChanges = 'notifyOnAppChanges',
  NotifyOnAppChangesWithoutDimming = 'notifyOnAppChangesWithoutDimming',
  NeverNotify = 'neverNotify',
}

export type GraphWorkbook = GraphEntity & {
  __typename?: 'GraphWorkbook';
  application?: Maybe<GraphWorkbookApplication>;
  comments?: Maybe<Array<Maybe<GraphWorkbookComment>>>;
  commentsById?: Maybe<GraphWorkbookComment>;
  functions?: Maybe<GraphWorkbookFunctions>;
  names?: Maybe<Array<Maybe<GraphWorkbookNamedItem>>>;
  namesById?: Maybe<GraphWorkbookNamedItem>;
  operations?: Maybe<Array<Maybe<GraphWorkbookOperation>>>;
  operationsById?: Maybe<GraphWorkbookOperation>;
  tables?: Maybe<Array<Maybe<GraphWorkbookTable>>>;
  tablesById?: Maybe<GraphWorkbookTable>;
  worksheets?: Maybe<Array<Maybe<GraphWorkbookWorksheet>>>;
  worksheetsById?: Maybe<GraphWorkbookWorksheet>;
  sessionInfoResource?: Maybe<GraphWorkbookSessionInfo>;
  closeSession?: Maybe<Scalars['JSON']>;
  createSession?: Maybe<Scalars['JSON']>;
  refreshSession?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookCommentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookCommentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookNamesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookNamesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookTablesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookTablesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookWorksheetsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookWorksheetsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookCloseSessionArgs = {
  this?: Maybe<GraphWorkbookInput>;
};

export type GraphWorkbookCreateSessionArgs = {
  this?: Maybe<GraphWorkbookInput>;
  persistChanges: Scalars['Boolean'];
};

export type GraphWorkbookRefreshSessionArgs = {
  this?: Maybe<GraphWorkbookInput>;
};

export type GraphWorkbookApplication = GraphEntity & {
  __typename?: 'GraphWorkbookApplication';
  calculationMode: Scalars['String'];
  calculate?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookApplicationCalculateArgs = {
  bindparameter?: Maybe<GraphWorkbookApplicationInput>;
  calculationType: Scalars['String'];
};

export type GraphWorkbookApplicationInput = {
  calculationMode: Scalars['String'];
  id: Scalars['String'];
};

export type GraphWorkbookChart = GraphEntity & {
  __typename?: 'GraphWorkbookChart';
  height: Scalars['Float'];
  left: Scalars['Float'];
  name?: Maybe<Scalars['String']>;
  top: Scalars['Float'];
  width: Scalars['Float'];
  axes?: Maybe<GraphWorkbookChartAxes>;
  dataLabels?: Maybe<GraphWorkbookChartDataLabels>;
  format?: Maybe<GraphWorkbookChartAreaFormat>;
  legend?: Maybe<GraphWorkbookChartLegend>;
  series?: Maybe<Array<Maybe<GraphWorkbookChartSeries>>>;
  seriesById?: Maybe<GraphWorkbookChartSeries>;
  title?: Maybe<GraphWorkbookChartTitle>;
  worksheet?: Maybe<GraphWorkbookWorksheet>;
  count?: Maybe<Scalars['Int']>;
  item?: Maybe<GraphWorkbookChart>;
  itemAt?: Maybe<GraphWorkbookChart>;
  image?: Maybe<Scalars['String']>;
  add?: Maybe<Scalars['JSON']>;
  setData?: Maybe<Scalars['JSON']>;
  setPosition?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookChartSeriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookChartSeriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookChartAddArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookChartInput>>>;
  type: Scalars['String'];
  sourceData?: Maybe<GraphJsonInput>;
  seriesBy: Scalars['String'];
};

export type GraphWorkbookChartSetDataArgs = {
  bindparameter?: Maybe<GraphWorkbookChartInput>;
  sourceData?: Maybe<GraphJsonInput>;
  seriesBy: Scalars['String'];
};

export type GraphWorkbookChartSetPositionArgs = {
  bindparameter?: Maybe<GraphWorkbookChartInput>;
  startCell?: Maybe<GraphJsonInput>;
  endCell?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookChartAreaFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartAreaFormat';
  fill?: Maybe<GraphWorkbookChartFill>;
  font?: Maybe<GraphWorkbookChartFont>;
  id: Scalars['String'];
};

export type GraphWorkbookChartAxes = GraphEntity & {
  __typename?: 'GraphWorkbookChartAxes';
  categoryAxis?: Maybe<GraphWorkbookChartAxis>;
  seriesAxis?: Maybe<GraphWorkbookChartAxis>;
  valueAxis?: Maybe<GraphWorkbookChartAxis>;
  id: Scalars['String'];
};

export type GraphWorkbookChartAxis = GraphEntity & {
  __typename?: 'GraphWorkbookChartAxis';
  majorUnit?: Maybe<GraphJson>;
  maximum?: Maybe<GraphJson>;
  minimum?: Maybe<GraphJson>;
  minorUnit?: Maybe<GraphJson>;
  format?: Maybe<GraphWorkbookChartAxisFormat>;
  majorGridlines?: Maybe<GraphWorkbookChartGridlines>;
  minorGridlines?: Maybe<GraphWorkbookChartGridlines>;
  title?: Maybe<GraphWorkbookChartAxisTitle>;
  id: Scalars['String'];
};

export type GraphWorkbookChartAxisFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartAxisFormat';
  font?: Maybe<GraphWorkbookChartFont>;
  line?: Maybe<GraphWorkbookChartLineFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartAxisTitle = GraphEntity & {
  __typename?: 'GraphWorkbookChartAxisTitle';
  text?: Maybe<Scalars['String']>;
  visible: Scalars['Boolean'];
  format?: Maybe<GraphWorkbookChartAxisTitleFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartAxisTitleFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartAxisTitleFormat';
  font?: Maybe<GraphWorkbookChartFont>;
  id: Scalars['String'];
};

export type GraphWorkbookChartDataLabelFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartDataLabelFormat';
  fill?: Maybe<GraphWorkbookChartFill>;
  font?: Maybe<GraphWorkbookChartFont>;
  id: Scalars['String'];
};

export type GraphWorkbookChartDataLabels = GraphEntity & {
  __typename?: 'GraphWorkbookChartDataLabels';
  position?: Maybe<Scalars['String']>;
  separator?: Maybe<Scalars['String']>;
  showBubbleSize?: Maybe<Scalars['Boolean']>;
  showCategoryName?: Maybe<Scalars['Boolean']>;
  showLegendKey?: Maybe<Scalars['Boolean']>;
  showPercentage?: Maybe<Scalars['Boolean']>;
  showSeriesName?: Maybe<Scalars['Boolean']>;
  showValue?: Maybe<Scalars['Boolean']>;
  format?: Maybe<GraphWorkbookChartDataLabelFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartFill = GraphEntity & {
  __typename?: 'GraphWorkbookChartFill';
  rest?: Maybe<Scalars['JSON']>;
  clear?: Maybe<Scalars['JSON']>;
  setSolidColor?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookChartFillClearArgs = {
  bindparameter?: Maybe<GraphWorkbookChartFillInput>;
};

export type GraphWorkbookChartFillSetSolidColorArgs = {
  bindparameter?: Maybe<GraphWorkbookChartFillInput>;
  color?: Maybe<Scalars['String']>;
};

export type GraphWorkbookChartFillInput = {
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookChartFont = GraphEntity & {
  __typename?: 'GraphWorkbookChartFont';
  bold?: Maybe<Scalars['Boolean']>;
  color?: Maybe<Scalars['String']>;
  italic?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  underline?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWorkbookChartGridlines = GraphEntity & {
  __typename?: 'GraphWorkbookChartGridlines';
  visible: Scalars['Boolean'];
  format?: Maybe<GraphWorkbookChartGridlinesFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartGridlinesFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartGridlinesFormat';
  line?: Maybe<GraphWorkbookChartLineFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartInput = {
  height: Scalars['Float'];
  left: Scalars['Float'];
  name?: Maybe<Scalars['String']>;
  top: Scalars['Float'];
  width: Scalars['Float'];
  id: Scalars['String'];
};

export type GraphWorkbookChartLegend = GraphEntity & {
  __typename?: 'GraphWorkbookChartLegend';
  overlay?: Maybe<Scalars['Boolean']>;
  position?: Maybe<Scalars['String']>;
  visible: Scalars['Boolean'];
  format?: Maybe<GraphWorkbookChartLegendFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartLegendFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartLegendFormat';
  fill?: Maybe<GraphWorkbookChartFill>;
  font?: Maybe<GraphWorkbookChartFont>;
  id: Scalars['String'];
};

export type GraphWorkbookChartLineFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartLineFormat';
  color?: Maybe<Scalars['String']>;
  clear?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookChartLineFormatClearArgs = {
  bindparameter?: Maybe<GraphWorkbookChartLineFormatInput>;
};

export type GraphWorkbookChartLineFormatInput = {
  color?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWorkbookChartPoint = GraphEntity & {
  __typename?: 'GraphWorkbookChartPoint';
  value?: Maybe<GraphJson>;
  format?: Maybe<GraphWorkbookChartPointFormat>;
  count?: Maybe<Scalars['Int']>;
  itemAt?: Maybe<GraphWorkbookChartPoint>;
  id: Scalars['String'];
};

export type GraphWorkbookChartPointFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartPointFormat';
  fill?: Maybe<GraphWorkbookChartFill>;
  id: Scalars['String'];
};

export type GraphWorkbookChartSeries = GraphEntity & {
  __typename?: 'GraphWorkbookChartSeries';
  name?: Maybe<Scalars['String']>;
  format?: Maybe<GraphWorkbookChartSeriesFormat>;
  points?: Maybe<Array<Maybe<GraphWorkbookChartPoint>>>;
  pointsById?: Maybe<GraphWorkbookChartPoint>;
  count?: Maybe<Scalars['Int']>;
  itemAt?: Maybe<GraphWorkbookChartSeries>;
  id: Scalars['String'];
};

export type GraphWorkbookChartSeriesPointsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookChartSeriesPointsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookChartSeriesFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartSeriesFormat';
  fill?: Maybe<GraphWorkbookChartFill>;
  line?: Maybe<GraphWorkbookChartLineFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartTitle = GraphEntity & {
  __typename?: 'GraphWorkbookChartTitle';
  overlay?: Maybe<Scalars['Boolean']>;
  text?: Maybe<Scalars['String']>;
  visible: Scalars['Boolean'];
  format?: Maybe<GraphWorkbookChartTitleFormat>;
  id: Scalars['String'];
};

export type GraphWorkbookChartTitleFormat = GraphEntity & {
  __typename?: 'GraphWorkbookChartTitleFormat';
  fill?: Maybe<GraphWorkbookChartFill>;
  font?: Maybe<GraphWorkbookChartFont>;
  id: Scalars['String'];
};

export type GraphWorkbookComment = GraphEntity & {
  __typename?: 'GraphWorkbookComment';
  content?: Maybe<Scalars['String']>;
  contentType: Scalars['String'];
  replies?: Maybe<Array<Maybe<GraphWorkbookCommentReply>>>;
  repliesById?: Maybe<GraphWorkbookCommentReply>;
  id: Scalars['String'];
};

export type GraphWorkbookCommentRepliesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookCommentRepliesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookCommentReply = GraphEntity & {
  __typename?: 'GraphWorkbookCommentReply';
  content?: Maybe<Scalars['String']>;
  contentType: Scalars['String'];
  id: Scalars['String'];
};

export type GraphWorkbookFilter = GraphEntity & {
  __typename?: 'GraphWorkbookFilter';
  criteria?: Maybe<GraphWorkbookFilterCriteria>;
  apply?: Maybe<Scalars['JSON']>;
  applyBottomItemsFilter?: Maybe<Scalars['JSON']>;
  applyBottomPercentFilter?: Maybe<Scalars['JSON']>;
  applyCellColorFilter?: Maybe<Scalars['JSON']>;
  applyCustomFilter?: Maybe<Scalars['JSON']>;
  applyDynamicFilter?: Maybe<Scalars['JSON']>;
  applyFontColorFilter?: Maybe<Scalars['JSON']>;
  applyIconFilter?: Maybe<Scalars['JSON']>;
  applyTopItemsFilter?: Maybe<Scalars['JSON']>;
  applyTopPercentFilter?: Maybe<Scalars['JSON']>;
  applyValuesFilter?: Maybe<Scalars['JSON']>;
  clear?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookFilterApplyArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  criteria?: Maybe<GraphWorkbookFilterCriteriaInput>;
};

export type GraphWorkbookFilterApplyBottomItemsFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  count: Scalars['Int'];
};

export type GraphWorkbookFilterApplyBottomPercentFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  percent: Scalars['Int'];
};

export type GraphWorkbookFilterApplyCellColorFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  color?: Maybe<Scalars['String']>;
};

export type GraphWorkbookFilterApplyCustomFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  criteria1?: Maybe<Scalars['String']>;
  criteria2?: Maybe<Scalars['String']>;
  oper: Scalars['String'];
};

export type GraphWorkbookFilterApplyDynamicFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  criteria: Scalars['String'];
};

export type GraphWorkbookFilterApplyFontColorFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  color?: Maybe<Scalars['String']>;
};

export type GraphWorkbookFilterApplyIconFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  icon?: Maybe<GraphWorkbookIconInput>;
};

export type GraphWorkbookFilterApplyTopItemsFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  count: Scalars['Int'];
};

export type GraphWorkbookFilterApplyTopPercentFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  percent: Scalars['Int'];
};

export type GraphWorkbookFilterApplyValuesFilterArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFilterClearArgs = {
  bindparameter?: Maybe<GraphWorkbookFilterInput>;
};

export type GraphWorkbookFilterCriteria = {
  __typename?: 'GraphWorkbookFilterCriteria';
  color?: Maybe<Scalars['String']>;
  criterion1?: Maybe<Scalars['String']>;
  criterion2?: Maybe<Scalars['String']>;
  dynamicCriteria: Scalars['String'];
  filterOn: Scalars['String'];
  icon?: Maybe<GraphWorkbookIcon>;
  operator: Scalars['String'];
  values?: Maybe<GraphJson>;
};

export type GraphWorkbookFilterCriteriaInput = {
  color?: Maybe<Scalars['String']>;
  criterion1?: Maybe<Scalars['String']>;
  criterion2?: Maybe<Scalars['String']>;
  dynamicCriteria: Scalars['String'];
  filterOn: Scalars['String'];
  icon?: Maybe<GraphWorkbookIconInput>;
  operator: Scalars['String'];
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFilterInput = {
  criteria?: Maybe<GraphWorkbookFilterCriteriaInput>;
  id: Scalars['String'];
};

export type GraphWorkbookFormatProtection = GraphEntity & {
  __typename?: 'GraphWorkbookFormatProtection';
  formulaHidden?: Maybe<Scalars['Boolean']>;
  locked?: Maybe<Scalars['Boolean']>;
  id: Scalars['String'];
};

export type GraphWorkbookFunctionResult = GraphEntity & {
  __typename?: 'GraphWorkbookFunctionResult';
  error?: Maybe<Scalars['String']>;
  value?: Maybe<GraphJson>;
  id: Scalars['String'];
};

export type GraphWorkbookFunctions = GraphEntity & {
  __typename?: 'GraphWorkbookFunctions';
  rest?: Maybe<Scalars['JSON']>;
  delta?: Maybe<Scalars['JSON']>;
  abs?: Maybe<Scalars['JSON']>;
  accrInt?: Maybe<Scalars['JSON']>;
  accrIntM?: Maybe<Scalars['JSON']>;
  acos?: Maybe<Scalars['JSON']>;
  acosh?: Maybe<Scalars['JSON']>;
  acot?: Maybe<Scalars['JSON']>;
  acoth?: Maybe<Scalars['JSON']>;
  amorDegrc?: Maybe<Scalars['JSON']>;
  amorLinc?: Maybe<Scalars['JSON']>;
  and?: Maybe<Scalars['JSON']>;
  arabic?: Maybe<Scalars['JSON']>;
  areas?: Maybe<Scalars['JSON']>;
  asc?: Maybe<Scalars['JSON']>;
  asin?: Maybe<Scalars['JSON']>;
  asinh?: Maybe<Scalars['JSON']>;
  atan?: Maybe<Scalars['JSON']>;
  atan2?: Maybe<Scalars['JSON']>;
  atanh?: Maybe<Scalars['JSON']>;
  aveDev?: Maybe<Scalars['JSON']>;
  average?: Maybe<Scalars['JSON']>;
  averageA?: Maybe<Scalars['JSON']>;
  averageIf?: Maybe<Scalars['JSON']>;
  averageIfs?: Maybe<Scalars['JSON']>;
  bahtText?: Maybe<Scalars['JSON']>;
  base?: Maybe<Scalars['JSON']>;
  besselI?: Maybe<Scalars['JSON']>;
  besselJ?: Maybe<Scalars['JSON']>;
  besselK?: Maybe<Scalars['JSON']>;
  besselY?: Maybe<Scalars['JSON']>;
  beta_Dist?: Maybe<Scalars['JSON']>;
  beta_Inv?: Maybe<Scalars['JSON']>;
  bin2Dec?: Maybe<Scalars['JSON']>;
  bin2Hex?: Maybe<Scalars['JSON']>;
  bin2Oct?: Maybe<Scalars['JSON']>;
  binom_Dist?: Maybe<Scalars['JSON']>;
  binom_Dist_Range?: Maybe<Scalars['JSON']>;
  binom_Inv?: Maybe<Scalars['JSON']>;
  bitand?: Maybe<Scalars['JSON']>;
  bitlshift?: Maybe<Scalars['JSON']>;
  bitor?: Maybe<Scalars['JSON']>;
  bitrshift?: Maybe<Scalars['JSON']>;
  bitxor?: Maybe<Scalars['JSON']>;
  ceiling_Math?: Maybe<Scalars['JSON']>;
  ceiling_Precise?: Maybe<Scalars['JSON']>;
  char?: Maybe<Scalars['JSON']>;
  chiSq_Dist?: Maybe<Scalars['JSON']>;
  chiSq_Dist_RT?: Maybe<Scalars['JSON']>;
  chiSq_Inv?: Maybe<Scalars['JSON']>;
  chiSq_Inv_RT?: Maybe<Scalars['JSON']>;
  choose?: Maybe<Scalars['JSON']>;
  clean?: Maybe<Scalars['JSON']>;
  code?: Maybe<Scalars['JSON']>;
  columns?: Maybe<Scalars['JSON']>;
  combin?: Maybe<Scalars['JSON']>;
  combina?: Maybe<Scalars['JSON']>;
  complex?: Maybe<Scalars['JSON']>;
  concatenate?: Maybe<Scalars['JSON']>;
  confidence_Norm?: Maybe<Scalars['JSON']>;
  confidence_T?: Maybe<Scalars['JSON']>;
  convert?: Maybe<Scalars['JSON']>;
  cos?: Maybe<Scalars['JSON']>;
  cosh?: Maybe<Scalars['JSON']>;
  cot?: Maybe<Scalars['JSON']>;
  coth?: Maybe<Scalars['JSON']>;
  count?: Maybe<Scalars['JSON']>;
  countA?: Maybe<Scalars['JSON']>;
  countBlank?: Maybe<Scalars['JSON']>;
  countIf?: Maybe<Scalars['JSON']>;
  countIfs?: Maybe<Scalars['JSON']>;
  coupDayBs?: Maybe<Scalars['JSON']>;
  coupDays?: Maybe<Scalars['JSON']>;
  coupDaysNc?: Maybe<Scalars['JSON']>;
  coupNcd?: Maybe<Scalars['JSON']>;
  coupNum?: Maybe<Scalars['JSON']>;
  coupPcd?: Maybe<Scalars['JSON']>;
  csc?: Maybe<Scalars['JSON']>;
  csch?: Maybe<Scalars['JSON']>;
  cumIPmt?: Maybe<Scalars['JSON']>;
  cumPrinc?: Maybe<Scalars['JSON']>;
  date?: Maybe<Scalars['JSON']>;
  datevalue?: Maybe<Scalars['JSON']>;
  daverage?: Maybe<Scalars['JSON']>;
  day?: Maybe<Scalars['JSON']>;
  days?: Maybe<Scalars['JSON']>;
  days360?: Maybe<Scalars['JSON']>;
  db?: Maybe<Scalars['JSON']>;
  dbcs?: Maybe<Scalars['JSON']>;
  dcount?: Maybe<Scalars['JSON']>;
  dcountA?: Maybe<Scalars['JSON']>;
  ddb?: Maybe<Scalars['JSON']>;
  dec2Bin?: Maybe<Scalars['JSON']>;
  dec2Hex?: Maybe<Scalars['JSON']>;
  dec2Oct?: Maybe<Scalars['JSON']>;
  decimal?: Maybe<Scalars['JSON']>;
  degrees?: Maybe<Scalars['JSON']>;
  devSq?: Maybe<Scalars['JSON']>;
  dget?: Maybe<Scalars['JSON']>;
  disc?: Maybe<Scalars['JSON']>;
  dmax?: Maybe<Scalars['JSON']>;
  dmin?: Maybe<Scalars['JSON']>;
  dollar?: Maybe<Scalars['JSON']>;
  dollarDe?: Maybe<Scalars['JSON']>;
  dollarFr?: Maybe<Scalars['JSON']>;
  dproduct?: Maybe<Scalars['JSON']>;
  dstDev?: Maybe<Scalars['JSON']>;
  dstDevP?: Maybe<Scalars['JSON']>;
  dsum?: Maybe<Scalars['JSON']>;
  duration?: Maybe<Scalars['JSON']>;
  dvar?: Maybe<Scalars['JSON']>;
  dvarP?: Maybe<Scalars['JSON']>;
  ecma_Ceiling?: Maybe<Scalars['JSON']>;
  edate?: Maybe<Scalars['JSON']>;
  effect?: Maybe<Scalars['JSON']>;
  eoMonth?: Maybe<Scalars['JSON']>;
  erf?: Maybe<Scalars['JSON']>;
  erfC?: Maybe<Scalars['JSON']>;
  erfC_Precise?: Maybe<Scalars['JSON']>;
  erf_Precise?: Maybe<Scalars['JSON']>;
  error_Type?: Maybe<Scalars['JSON']>;
  even?: Maybe<Scalars['JSON']>;
  exact?: Maybe<Scalars['JSON']>;
  exp?: Maybe<Scalars['JSON']>;
  expon_Dist?: Maybe<Scalars['JSON']>;
  fact?: Maybe<Scalars['JSON']>;
  factDouble?: Maybe<Scalars['JSON']>;
  false?: Maybe<Scalars['JSON']>;
  find?: Maybe<Scalars['JSON']>;
  findB?: Maybe<Scalars['JSON']>;
  fisher?: Maybe<Scalars['JSON']>;
  fisherInv?: Maybe<Scalars['JSON']>;
  fixed?: Maybe<Scalars['JSON']>;
  floor_Math?: Maybe<Scalars['JSON']>;
  floor_Precise?: Maybe<Scalars['JSON']>;
  fv?: Maybe<Scalars['JSON']>;
  fvschedule?: Maybe<Scalars['JSON']>;
  f_Dist?: Maybe<Scalars['JSON']>;
  f_Dist_RT?: Maybe<Scalars['JSON']>;
  f_Inv?: Maybe<Scalars['JSON']>;
  f_Inv_RT?: Maybe<Scalars['JSON']>;
  gamma?: Maybe<Scalars['JSON']>;
  gammaLn?: Maybe<Scalars['JSON']>;
  gammaLn_Precise?: Maybe<Scalars['JSON']>;
  gamma_Dist?: Maybe<Scalars['JSON']>;
  gamma_Inv?: Maybe<Scalars['JSON']>;
  gauss?: Maybe<Scalars['JSON']>;
  gcd?: Maybe<Scalars['JSON']>;
  geoMean?: Maybe<Scalars['JSON']>;
  geStep?: Maybe<Scalars['JSON']>;
  harMean?: Maybe<Scalars['JSON']>;
  hex2Bin?: Maybe<Scalars['JSON']>;
  hex2Dec?: Maybe<Scalars['JSON']>;
  hex2Oct?: Maybe<Scalars['JSON']>;
  hlookup?: Maybe<Scalars['JSON']>;
  hour?: Maybe<Scalars['JSON']>;
  hyperlink?: Maybe<Scalars['JSON']>;
  hypGeom_Dist?: Maybe<Scalars['JSON']>;
  if?: Maybe<Scalars['JSON']>;
  imAbs?: Maybe<Scalars['JSON']>;
  imaginary?: Maybe<Scalars['JSON']>;
  imArgument?: Maybe<Scalars['JSON']>;
  imConjugate?: Maybe<Scalars['JSON']>;
  imCos?: Maybe<Scalars['JSON']>;
  imCosh?: Maybe<Scalars['JSON']>;
  imCot?: Maybe<Scalars['JSON']>;
  imCsc?: Maybe<Scalars['JSON']>;
  imCsch?: Maybe<Scalars['JSON']>;
  imDiv?: Maybe<Scalars['JSON']>;
  imExp?: Maybe<Scalars['JSON']>;
  imLn?: Maybe<Scalars['JSON']>;
  imLog10?: Maybe<Scalars['JSON']>;
  imLog2?: Maybe<Scalars['JSON']>;
  imPower?: Maybe<Scalars['JSON']>;
  imProduct?: Maybe<Scalars['JSON']>;
  imReal?: Maybe<Scalars['JSON']>;
  imSec?: Maybe<Scalars['JSON']>;
  imSech?: Maybe<Scalars['JSON']>;
  imSin?: Maybe<Scalars['JSON']>;
  imSinh?: Maybe<Scalars['JSON']>;
  imSqrt?: Maybe<Scalars['JSON']>;
  imSub?: Maybe<Scalars['JSON']>;
  imSum?: Maybe<Scalars['JSON']>;
  imTan?: Maybe<Scalars['JSON']>;
  int?: Maybe<Scalars['JSON']>;
  intRate?: Maybe<Scalars['JSON']>;
  ipmt?: Maybe<Scalars['JSON']>;
  irr?: Maybe<Scalars['JSON']>;
  isErr?: Maybe<Scalars['JSON']>;
  isError?: Maybe<Scalars['JSON']>;
  isEven?: Maybe<Scalars['JSON']>;
  isFormula?: Maybe<Scalars['JSON']>;
  isLogical?: Maybe<Scalars['JSON']>;
  isNA?: Maybe<Scalars['JSON']>;
  isNonText?: Maybe<Scalars['JSON']>;
  isNumber?: Maybe<Scalars['JSON']>;
  isOdd?: Maybe<Scalars['JSON']>;
  isoWeekNum?: Maybe<Scalars['JSON']>;
  iso_Ceiling?: Maybe<Scalars['JSON']>;
  ispmt?: Maybe<Scalars['JSON']>;
  isref?: Maybe<Scalars['JSON']>;
  isText?: Maybe<Scalars['JSON']>;
  kurt?: Maybe<Scalars['JSON']>;
  large?: Maybe<Scalars['JSON']>;
  lcm?: Maybe<Scalars['JSON']>;
  left?: Maybe<Scalars['JSON']>;
  leftb?: Maybe<Scalars['JSON']>;
  len?: Maybe<Scalars['JSON']>;
  lenb?: Maybe<Scalars['JSON']>;
  ln?: Maybe<Scalars['JSON']>;
  log?: Maybe<Scalars['JSON']>;
  log10?: Maybe<Scalars['JSON']>;
  logNorm_Dist?: Maybe<Scalars['JSON']>;
  logNorm_Inv?: Maybe<Scalars['JSON']>;
  lookup?: Maybe<Scalars['JSON']>;
  lower?: Maybe<Scalars['JSON']>;
  match?: Maybe<Scalars['JSON']>;
  max?: Maybe<Scalars['JSON']>;
  maxA?: Maybe<Scalars['JSON']>;
  mduration?: Maybe<Scalars['JSON']>;
  median?: Maybe<Scalars['JSON']>;
  mid?: Maybe<Scalars['JSON']>;
  midb?: Maybe<Scalars['JSON']>;
  min?: Maybe<Scalars['JSON']>;
  minA?: Maybe<Scalars['JSON']>;
  minute?: Maybe<Scalars['JSON']>;
  mirr?: Maybe<Scalars['JSON']>;
  mod?: Maybe<Scalars['JSON']>;
  month?: Maybe<Scalars['JSON']>;
  mround?: Maybe<Scalars['JSON']>;
  multiNomial?: Maybe<Scalars['JSON']>;
  n?: Maybe<Scalars['JSON']>;
  na?: Maybe<Scalars['JSON']>;
  negBinom_Dist?: Maybe<Scalars['JSON']>;
  networkDays?: Maybe<Scalars['JSON']>;
  networkDays_Intl?: Maybe<Scalars['JSON']>;
  nominal?: Maybe<Scalars['JSON']>;
  norm_Dist?: Maybe<Scalars['JSON']>;
  norm_Inv?: Maybe<Scalars['JSON']>;
  norm_S_Dist?: Maybe<Scalars['JSON']>;
  norm_S_Inv?: Maybe<Scalars['JSON']>;
  not?: Maybe<Scalars['JSON']>;
  now?: Maybe<Scalars['JSON']>;
  nper?: Maybe<Scalars['JSON']>;
  npv?: Maybe<Scalars['JSON']>;
  numberValue?: Maybe<Scalars['JSON']>;
  oct2Bin?: Maybe<Scalars['JSON']>;
  oct2Dec?: Maybe<Scalars['JSON']>;
  oct2Hex?: Maybe<Scalars['JSON']>;
  odd?: Maybe<Scalars['JSON']>;
  oddFPrice?: Maybe<Scalars['JSON']>;
  oddFYield?: Maybe<Scalars['JSON']>;
  oddLPrice?: Maybe<Scalars['JSON']>;
  oddLYield?: Maybe<Scalars['JSON']>;
  or?: Maybe<Scalars['JSON']>;
  pduration?: Maybe<Scalars['JSON']>;
  percentile_Exc?: Maybe<Scalars['JSON']>;
  percentile_Inc?: Maybe<Scalars['JSON']>;
  percentRank_Exc?: Maybe<Scalars['JSON']>;
  percentRank_Inc?: Maybe<Scalars['JSON']>;
  permut?: Maybe<Scalars['JSON']>;
  permutationa?: Maybe<Scalars['JSON']>;
  phi?: Maybe<Scalars['JSON']>;
  pi?: Maybe<Scalars['JSON']>;
  pmt?: Maybe<Scalars['JSON']>;
  poisson_Dist?: Maybe<Scalars['JSON']>;
  power?: Maybe<Scalars['JSON']>;
  ppmt?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['JSON']>;
  priceDisc?: Maybe<Scalars['JSON']>;
  priceMat?: Maybe<Scalars['JSON']>;
  product?: Maybe<Scalars['JSON']>;
  proper?: Maybe<Scalars['JSON']>;
  pv?: Maybe<Scalars['JSON']>;
  quartile_Exc?: Maybe<Scalars['JSON']>;
  quartile_Inc?: Maybe<Scalars['JSON']>;
  quotient?: Maybe<Scalars['JSON']>;
  radians?: Maybe<Scalars['JSON']>;
  rand?: Maybe<Scalars['JSON']>;
  randBetween?: Maybe<Scalars['JSON']>;
  rank_Avg?: Maybe<Scalars['JSON']>;
  rank_Eq?: Maybe<Scalars['JSON']>;
  rate?: Maybe<Scalars['JSON']>;
  received?: Maybe<Scalars['JSON']>;
  replace?: Maybe<Scalars['JSON']>;
  replaceB?: Maybe<Scalars['JSON']>;
  rept?: Maybe<Scalars['JSON']>;
  right?: Maybe<Scalars['JSON']>;
  rightb?: Maybe<Scalars['JSON']>;
  roman?: Maybe<Scalars['JSON']>;
  round?: Maybe<Scalars['JSON']>;
  roundDown?: Maybe<Scalars['JSON']>;
  roundUp?: Maybe<Scalars['JSON']>;
  rows?: Maybe<Scalars['JSON']>;
  rri?: Maybe<Scalars['JSON']>;
  sec?: Maybe<Scalars['JSON']>;
  sech?: Maybe<Scalars['JSON']>;
  second?: Maybe<Scalars['JSON']>;
  seriesSum?: Maybe<Scalars['JSON']>;
  sheet?: Maybe<Scalars['JSON']>;
  sheets?: Maybe<Scalars['JSON']>;
  sign?: Maybe<Scalars['JSON']>;
  sin?: Maybe<Scalars['JSON']>;
  sinh?: Maybe<Scalars['JSON']>;
  skew?: Maybe<Scalars['JSON']>;
  skew_p?: Maybe<Scalars['JSON']>;
  sln?: Maybe<Scalars['JSON']>;
  small?: Maybe<Scalars['JSON']>;
  sqrt?: Maybe<Scalars['JSON']>;
  sqrtPi?: Maybe<Scalars['JSON']>;
  standardize?: Maybe<Scalars['JSON']>;
  stDevA?: Maybe<Scalars['JSON']>;
  stDevPA?: Maybe<Scalars['JSON']>;
  stDev_P?: Maybe<Scalars['JSON']>;
  stDev_S?: Maybe<Scalars['JSON']>;
  substitute?: Maybe<Scalars['JSON']>;
  subtotal?: Maybe<Scalars['JSON']>;
  sum?: Maybe<Scalars['JSON']>;
  sumIf?: Maybe<Scalars['JSON']>;
  sumIfs?: Maybe<Scalars['JSON']>;
  sumSq?: Maybe<Scalars['JSON']>;
  syd?: Maybe<Scalars['JSON']>;
  t?: Maybe<Scalars['JSON']>;
  tan?: Maybe<Scalars['JSON']>;
  tanh?: Maybe<Scalars['JSON']>;
  tbillEq?: Maybe<Scalars['JSON']>;
  tbillPrice?: Maybe<Scalars['JSON']>;
  tbillYield?: Maybe<Scalars['JSON']>;
  text?: Maybe<Scalars['JSON']>;
  time?: Maybe<Scalars['JSON']>;
  timevalue?: Maybe<Scalars['JSON']>;
  today?: Maybe<Scalars['JSON']>;
  trim?: Maybe<Scalars['JSON']>;
  trimMean?: Maybe<Scalars['JSON']>;
  true?: Maybe<Scalars['JSON']>;
  trunc?: Maybe<Scalars['JSON']>;
  type?: Maybe<Scalars['JSON']>;
  t_Dist?: Maybe<Scalars['JSON']>;
  t_Dist_2T?: Maybe<Scalars['JSON']>;
  t_Dist_RT?: Maybe<Scalars['JSON']>;
  t_Inv?: Maybe<Scalars['JSON']>;
  t_Inv_2T?: Maybe<Scalars['JSON']>;
  unichar?: Maybe<Scalars['JSON']>;
  unicode?: Maybe<Scalars['JSON']>;
  upper?: Maybe<Scalars['JSON']>;
  usdollar?: Maybe<Scalars['JSON']>;
  value?: Maybe<Scalars['JSON']>;
  varA?: Maybe<Scalars['JSON']>;
  varPA?: Maybe<Scalars['JSON']>;
  var_P?: Maybe<Scalars['JSON']>;
  var_S?: Maybe<Scalars['JSON']>;
  vdb?: Maybe<Scalars['JSON']>;
  vlookup?: Maybe<Scalars['JSON']>;
  weekday?: Maybe<Scalars['JSON']>;
  weekNum?: Maybe<Scalars['JSON']>;
  weibull_Dist?: Maybe<Scalars['JSON']>;
  workDay?: Maybe<Scalars['JSON']>;
  workDay_Intl?: Maybe<Scalars['JSON']>;
  xirr?: Maybe<Scalars['JSON']>;
  xnpv?: Maybe<Scalars['JSON']>;
  xor?: Maybe<Scalars['JSON']>;
  year?: Maybe<Scalars['JSON']>;
  yearFrac?: Maybe<Scalars['JSON']>;
  yield?: Maybe<Scalars['JSON']>;
  yieldDisc?: Maybe<Scalars['JSON']>;
  yieldMat?: Maybe<Scalars['JSON']>;
  z_Test?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookFunctionsDeltaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number1?: Maybe<GraphJsonInput>;
  number2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAbsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAccrIntArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  issue?: Maybe<GraphJsonInput>;
  firstInterest?: Maybe<GraphJsonInput>;
  settlement?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  par?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
  calcMethod?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAccrIntMArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  issue?: Maybe<GraphJsonInput>;
  settlement?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  par?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAcosArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAcoshArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAcotArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAcothArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAmorDegrcArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  cost?: Maybe<GraphJsonInput>;
  datePurchased?: Maybe<GraphJsonInput>;
  firstPeriod?: Maybe<GraphJsonInput>;
  salvage?: Maybe<GraphJsonInput>;
  period?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAmorLincArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  cost?: Maybe<GraphJsonInput>;
  datePurchased?: Maybe<GraphJsonInput>;
  firstPeriod?: Maybe<GraphJsonInput>;
  salvage?: Maybe<GraphJsonInput>;
  period?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAndArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsArabicArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAreasArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  reference?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAscArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAsinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAsinhArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAtanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAtan2Args = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  xNum?: Maybe<GraphJsonInput>;
  yNum?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAtanhArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAveDevArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAverageArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAverageAArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAverageIfArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  range?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
  averageRange?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsAverageIfsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  averageRange?: Maybe<GraphJsonInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBahtTextArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBaseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  radix?: Maybe<GraphJsonInput>;
  minLength?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBesselIArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  n?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBesselJArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  n?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBesselKArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  n?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBesselYArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  n?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBeta_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  alpha?: Maybe<GraphJsonInput>;
  beta?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
  A?: Maybe<GraphJsonInput>;
  B?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBeta_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  alpha?: Maybe<GraphJsonInput>;
  beta?: Maybe<GraphJsonInput>;
  A?: Maybe<GraphJsonInput>;
  B?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBin2DecArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBin2HexArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBin2OctArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBinom_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  numberS?: Maybe<GraphJsonInput>;
  trials?: Maybe<GraphJsonInput>;
  probabilityS?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBinom_Dist_RangeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  trials?: Maybe<GraphJsonInput>;
  probabilityS?: Maybe<GraphJsonInput>;
  numberS?: Maybe<GraphJsonInput>;
  numberS2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBinom_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  trials?: Maybe<GraphJsonInput>;
  probabilityS?: Maybe<GraphJsonInput>;
  alpha?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBitandArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number1?: Maybe<GraphJsonInput>;
  number2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBitlshiftArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  shiftAmount?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBitorArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number1?: Maybe<GraphJsonInput>;
  number2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBitrshiftArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  shiftAmount?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsBitxorArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number1?: Maybe<GraphJsonInput>;
  number2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCeiling_MathArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
  mode?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCeiling_PreciseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCharArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsChiSq_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsChiSq_Dist_RtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsChiSq_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsChiSq_Inv_RtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsChooseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  indexNum?: Maybe<GraphJsonInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCleanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCodeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsColumnsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCombinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numberChosen?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCombinaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numberChosen?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsComplexArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  realNum?: Maybe<GraphJsonInput>;
  iNum?: Maybe<GraphJsonInput>;
  suffix?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsConcatenateArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsConfidence_NormArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  alpha?: Maybe<GraphJsonInput>;
  standardDev?: Maybe<GraphJsonInput>;
  size?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsConfidence_TArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  alpha?: Maybe<GraphJsonInput>;
  standardDev?: Maybe<GraphJsonInput>;
  size?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsConvertArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  fromUnit?: Maybe<GraphJsonInput>;
  toUnit?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCosArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCoshArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCotArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCothArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCountArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCountAArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCountBlankArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  range?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCountIfArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  range?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCountIfsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCoupDayBsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCoupDaysArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCoupDaysNcArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCoupNcdArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCoupNumArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCoupPcdArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCscArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCschArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCumIPmtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  startPeriod?: Maybe<GraphJsonInput>;
  endPeriod?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsCumPrincArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  startPeriod?: Maybe<GraphJsonInput>;
  endPeriod?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDateArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  year?: Maybe<GraphJsonInput>;
  month?: Maybe<GraphJsonInput>;
  day?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDatevalueArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  dateText?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDaverageArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDayArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDaysArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  endDate?: Maybe<GraphJsonInput>;
  startDate?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDays360Args = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  endDate?: Maybe<GraphJsonInput>;
  method?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDbArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  cost?: Maybe<GraphJsonInput>;
  salvage?: Maybe<GraphJsonInput>;
  life?: Maybe<GraphJsonInput>;
  period?: Maybe<GraphJsonInput>;
  month?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDbcsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDcountArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDcountAArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDdbArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  cost?: Maybe<GraphJsonInput>;
  salvage?: Maybe<GraphJsonInput>;
  life?: Maybe<GraphJsonInput>;
  period?: Maybe<GraphJsonInput>;
  factor?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDec2BinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDec2HexArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDec2OctArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDecimalArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  radix?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDegreesArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  angle?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDevSqArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDgetArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDiscArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  pr?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDmaxArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDminArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDollarArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  decimals?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDollarDeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  fractionalDollar?: Maybe<GraphJsonInput>;
  fraction?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDollarFrArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  decimalDollar?: Maybe<GraphJsonInput>;
  fraction?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDproductArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDstDevArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDstDevPArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDsumArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDurationArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  coupon?: Maybe<GraphJsonInput>;
  yld?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDvarArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsDvarPArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  database?: Maybe<GraphJsonInput>;
  field?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsEcma_CeilingArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsEdateArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  months?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsEffectArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  nominalRate?: Maybe<GraphJsonInput>;
  npery?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsEoMonthArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  months?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsErfArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  lowerLimit?: Maybe<GraphJsonInput>;
  upperLimit?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsErfCArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsErfC_PreciseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  X?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsErf_PreciseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  X?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsError_TypeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  errorVal?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsEvenArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsExactArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text1?: Maybe<GraphJsonInput>;
  text2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsExpArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsExpon_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  lambda?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFactArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFactDoubleArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFalseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
};

export type GraphWorkbookFunctionsFindArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  findText?: Maybe<GraphJsonInput>;
  withinText?: Maybe<GraphJsonInput>;
  startNum?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFindBArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  findText?: Maybe<GraphJsonInput>;
  withinText?: Maybe<GraphJsonInput>;
  startNum?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFisherArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFisherInvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  y?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFixedArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  decimals?: Maybe<GraphJsonInput>;
  noCommas?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFloor_MathArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
  mode?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFloor_PreciseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pmt?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsFvscheduleArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  principal?: Maybe<GraphJsonInput>;
  schedule?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsF_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  degFreedom1?: Maybe<GraphJsonInput>;
  degFreedom2?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsF_Dist_RtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  degFreedom1?: Maybe<GraphJsonInput>;
  degFreedom2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsF_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  degFreedom1?: Maybe<GraphJsonInput>;
  degFreedom2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsF_Inv_RtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  degFreedom1?: Maybe<GraphJsonInput>;
  degFreedom2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGammaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGammaLnArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGammaLn_PreciseArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGamma_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  alpha?: Maybe<GraphJsonInput>;
  beta?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGamma_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  alpha?: Maybe<GraphJsonInput>;
  beta?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGaussArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGcdArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGeoMeanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsGeStepArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  step?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHarMeanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHex2BinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHex2DecArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHex2OctArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHlookupArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  lookupValue?: Maybe<GraphJsonInput>;
  tableArray?: Maybe<GraphJsonInput>;
  rowIndexNum?: Maybe<GraphJsonInput>;
  rangeLookup?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHourArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHyperlinkArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  linkLocation?: Maybe<GraphJsonInput>;
  friendlyName?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsHypGeom_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  sampleS?: Maybe<GraphJsonInput>;
  numberSample?: Maybe<GraphJsonInput>;
  populationS?: Maybe<GraphJsonInput>;
  numberPop?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIfArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  logicalTest?: Maybe<GraphJsonInput>;
  valueIfTrue?: Maybe<GraphJsonInput>;
  valueIfFalse?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImAbsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImaginaryArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImArgumentArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImConjugateArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImCosArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImCoshArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImCotArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImCscArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImCschArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImDivArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber1?: Maybe<GraphJsonInput>;
  inumber2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImExpArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImLnArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImLog10Args = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImLog2Args = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImPowerArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImProductArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImRealArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImSecArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImSechArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImSinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImSinhArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImSqrtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImSubArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber1?: Maybe<GraphJsonInput>;
  inumber2?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImSumArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsImTanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  inumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIntArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIntRateArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  investment?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIpmtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  per?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIrrArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
  guess?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsErrArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsErrorArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsEvenArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsFormulaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  reference?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsLogicalArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsNaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsNonTextArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsNumberArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsOddArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsoWeekNumArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  date?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIso_CeilingArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIspmtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  per?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsrefArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsIsTextArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsKurtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLargeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  k?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLcmArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLeftArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  numChars?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLeftbArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  numBytes?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLenArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLenbArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLnArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLogArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  base?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLog10Args = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLogNorm_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  mean?: Maybe<GraphJsonInput>;
  standardDev?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLogNorm_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  mean?: Maybe<GraphJsonInput>;
  standardDev?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLookupArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  lookupValue?: Maybe<GraphJsonInput>;
  lookupVector?: Maybe<GraphJsonInput>;
  resultVector?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsLowerArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMatchArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  lookupValue?: Maybe<GraphJsonInput>;
  lookupArray?: Maybe<GraphJsonInput>;
  matchType?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMaxArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMaxAArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMdurationArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  coupon?: Maybe<GraphJsonInput>;
  yld?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMedianArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMidArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  startNum?: Maybe<GraphJsonInput>;
  numChars?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMidbArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  startNum?: Maybe<GraphJsonInput>;
  numBytes?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMinAArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMinuteArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMirrArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
  financeRate?: Maybe<GraphJsonInput>;
  reinvestRate?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsModArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  divisor?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMonthArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMroundArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  multiple?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsMultiNomialArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
};

export type GraphWorkbookFunctionsNegBinom_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  numberF?: Maybe<GraphJsonInput>;
  numberS?: Maybe<GraphJsonInput>;
  probabilityS?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNetworkDaysArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  endDate?: Maybe<GraphJsonInput>;
  holidays?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNetworkDays_IntlArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  endDate?: Maybe<GraphJsonInput>;
  weekend?: Maybe<GraphJsonInput>;
  holidays?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNominalArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  effectRate?: Maybe<GraphJsonInput>;
  npery?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNorm_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  mean?: Maybe<GraphJsonInput>;
  standardDev?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNorm_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  mean?: Maybe<GraphJsonInput>;
  standardDev?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNorm_S_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  z?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNorm_S_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNotArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  logical?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNowArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
};

export type GraphWorkbookFunctionsNperArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  pmt?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNpvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsNumberValueArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  decimalSeparator?: Maybe<GraphJsonInput>;
  groupSeparator?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOct2BinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOct2DecArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOct2HexArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  places?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOddArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOddFPriceArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  issue?: Maybe<GraphJsonInput>;
  firstCoupon?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  yld?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOddFYieldArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  issue?: Maybe<GraphJsonInput>;
  firstCoupon?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  pr?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOddLPriceArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  lastInterest?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  yld?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOddLYieldArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  lastInterest?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  pr?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsOrArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPdurationArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPercentile_ExcArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  k?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPercentile_IncArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  k?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPercentRank_ExcArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  x?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPercentRank_IncArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  x?: Maybe<GraphJsonInput>;
  significance?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPermutArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numberChosen?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPermutationaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numberChosen?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPhiArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPiArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
};

export type GraphWorkbookFunctionsPmtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPoisson_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  mean?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPowerArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  power?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPpmtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  per?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPriceArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  yld?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPriceDiscArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  discount?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPriceMatArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  issue?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  yld?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsProductArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsProperArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsPvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  nper?: Maybe<GraphJsonInput>;
  pmt?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsQuartile_ExcArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  quart?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsQuartile_IncArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  quart?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsQuotientArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  numerator?: Maybe<GraphJsonInput>;
  denominator?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRadiansArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  angle?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRandArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
};

export type GraphWorkbookFunctionsRandBetweenArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  bottom?: Maybe<GraphJsonInput>;
  top?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRank_AvgArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  ref?: Maybe<GraphJsonInput>;
  order?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRank_EqArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  ref?: Maybe<GraphJsonInput>;
  order?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRateArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  nper?: Maybe<GraphJsonInput>;
  pmt?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
  type?: Maybe<GraphJsonInput>;
  guess?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsReceivedArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  investment?: Maybe<GraphJsonInput>;
  discount?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsReplaceArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  oldText?: Maybe<GraphJsonInput>;
  startNum?: Maybe<GraphJsonInput>;
  numChars?: Maybe<GraphJsonInput>;
  newText?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsReplaceBArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  oldText?: Maybe<GraphJsonInput>;
  startNum?: Maybe<GraphJsonInput>;
  numBytes?: Maybe<GraphJsonInput>;
  newText?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsReptArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  numberTimes?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRightArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  numChars?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRightbArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  numBytes?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRomanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  form?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRoundArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numDigits?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRoundDownArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numDigits?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRoundUpArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numDigits?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRowsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsRriArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  nper?: Maybe<GraphJsonInput>;
  pv?: Maybe<GraphJsonInput>;
  fv?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSecArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSechArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSecondArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSeriesSumArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  n?: Maybe<GraphJsonInput>;
  m?: Maybe<GraphJsonInput>;
  coefficients?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSheetArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSheetsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  reference?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSignArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSinArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSinhArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSkewArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSkew_PArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSlnArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  cost?: Maybe<GraphJsonInput>;
  salvage?: Maybe<GraphJsonInput>;
  life?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSmallArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  k?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSqrtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSqrtPiArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsStandardizeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  mean?: Maybe<GraphJsonInput>;
  standardDev?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsStDevAArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsStDevPaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsStDev_PArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsStDev_SArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSubstituteArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
  oldText?: Maybe<GraphJsonInput>;
  newText?: Maybe<GraphJsonInput>;
  instanceNum?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSubtotalArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  functionNum?: Maybe<GraphJsonInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSumArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSumIfArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  range?: Maybe<GraphJsonInput>;
  criteria?: Maybe<GraphJsonInput>;
  sumRange?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSumIfsArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  sumRange?: Maybe<GraphJsonInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSumSqArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsSydArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  cost?: Maybe<GraphJsonInput>;
  salvage?: Maybe<GraphJsonInput>;
  life?: Maybe<GraphJsonInput>;
  per?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTanhArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTbillEqArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  discount?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTbillPriceArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  discount?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTbillYieldArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  pr?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTextArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
  formatText?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTimeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  hour?: Maybe<GraphJsonInput>;
  minute?: Maybe<GraphJsonInput>;
  second?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTimevalueArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  timeText?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTodayArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
};

export type GraphWorkbookFunctionsTrimArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTrimMeanArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  percent?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTrueArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
};

export type GraphWorkbookFunctionsTruncArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  numDigits?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsTypeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  value?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsT_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsT_Dist_2TArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsT_Dist_RtArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsT_InvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsT_Inv_2TArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  probability?: Maybe<GraphJsonInput>;
  degFreedom?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsUnicharArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsUnicodeArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsUpperArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsUsdollarArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  number?: Maybe<GraphJsonInput>;
  decimals?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsValueArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  text?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsVarAArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsVarPaArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsVar_PArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsVar_SArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsVdbArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  cost?: Maybe<GraphJsonInput>;
  salvage?: Maybe<GraphJsonInput>;
  life?: Maybe<GraphJsonInput>;
  startPeriod?: Maybe<GraphJsonInput>;
  endPeriod?: Maybe<GraphJsonInput>;
  factor?: Maybe<GraphJsonInput>;
  noSwitch?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsVlookupArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  lookupValue?: Maybe<GraphJsonInput>;
  tableArray?: Maybe<GraphJsonInput>;
  colIndexNum?: Maybe<GraphJsonInput>;
  rangeLookup?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsWeekdayArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
  returnType?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsWeekNumArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
  returnType?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsWeibull_DistArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  x?: Maybe<GraphJsonInput>;
  alpha?: Maybe<GraphJsonInput>;
  beta?: Maybe<GraphJsonInput>;
  cumulative?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsWorkDayArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  days?: Maybe<GraphJsonInput>;
  holidays?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsWorkDay_IntlArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  days?: Maybe<GraphJsonInput>;
  weekend?: Maybe<GraphJsonInput>;
  holidays?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsXirrArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
  dates?: Maybe<GraphJsonInput>;
  guess?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsXnpvArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  rate?: Maybe<GraphJsonInput>;
  values?: Maybe<GraphJsonInput>;
  dates?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsXorArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsYearArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  serialNumber?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsYearFracArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  startDate?: Maybe<GraphJsonInput>;
  endDate?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsYieldArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  pr?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  frequency?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsYieldDiscArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  pr?: Maybe<GraphJsonInput>;
  redemption?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsYieldMatArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  settlement?: Maybe<GraphJsonInput>;
  maturity?: Maybe<GraphJsonInput>;
  issue?: Maybe<GraphJsonInput>;
  rate?: Maybe<GraphJsonInput>;
  pr?: Maybe<GraphJsonInput>;
  basis?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsZ_TestArgs = {
  bindparameter?: Maybe<GraphWorkbookFunctionsInput>;
  array?: Maybe<GraphJsonInput>;
  x?: Maybe<GraphJsonInput>;
  sigma?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookFunctionsInput = {
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookIcon = {
  __typename?: 'GraphWorkbookIcon';
  index: Scalars['Int'];
  set: Scalars['String'];
};

export type GraphWorkbookIconInput = {
  index: Scalars['Int'];
  set: Scalars['String'];
};

export type GraphWorkbookInput = {
  id: Scalars['String'];
};

export type GraphWorkbookNamedItem = GraphEntity & {
  __typename?: 'GraphWorkbookNamedItem';
  comment?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  scope: Scalars['String'];
  type?: Maybe<Scalars['String']>;
  value?: Maybe<GraphJson>;
  visible: Scalars['Boolean'];
  worksheet?: Maybe<GraphWorkbookWorksheet>;
  range?: Maybe<GraphWorkbookRange>;
  add?: Maybe<Scalars['JSON']>;
  addFormulaLocal?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookNamedItemAddArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookNamedItemInput>>>;
  name?: Maybe<Scalars['String']>;
  reference?: Maybe<GraphJsonInput>;
  comment?: Maybe<Scalars['String']>;
};

export type GraphWorkbookNamedItemAddFormulaLocalArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookNamedItemInput>>>;
  name?: Maybe<Scalars['String']>;
  formula?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
};

export type GraphWorkbookNamedItemInput = {
  comment?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  scope: Scalars['String'];
  type?: Maybe<Scalars['String']>;
  value?: Maybe<GraphJsonInput>;
  visible: Scalars['Boolean'];
  id: Scalars['String'];
};

export type GraphWorkbookOperation = GraphEntity & {
  __typename?: 'GraphWorkbookOperation';
  error?: Maybe<GraphWorkbookOperationError>;
  resourceLocation?: Maybe<Scalars['String']>;
  status: GraphWorkbookOperationStatus;
  id: Scalars['String'];
};

export type GraphWorkbookOperationError = {
  __typename?: 'GraphWorkbookOperationError';
  code?: Maybe<Scalars['String']>;
  innerError?: Maybe<GraphWorkbookOperationError>;
  message?: Maybe<Scalars['String']>;
};

export enum GraphWorkbookOperationStatus {
  NotStarted = 'notStarted',
  Running = 'running',
  Succeeded = 'succeeded',
  Failed = 'failed',
}

export type GraphWorkbookPivotTable = GraphEntity & {
  __typename?: 'GraphWorkbookPivotTable';
  name?: Maybe<Scalars['String']>;
  worksheet?: Maybe<GraphWorkbookWorksheet>;
  refresh?: Maybe<Scalars['JSON']>;
  refreshAll?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookPivotTableRefreshArgs = {
  bindparameter?: Maybe<GraphWorkbookPivotTableInput>;
};

export type GraphWorkbookPivotTableRefreshAllArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookPivotTableInput>>>;
};

export type GraphWorkbookPivotTableInput = {
  name?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWorkbookRange = GraphEntity & {
  __typename?: 'GraphWorkbookRange';
  address?: Maybe<Scalars['String']>;
  addressLocal?: Maybe<Scalars['String']>;
  cellCount: Scalars['Int'];
  columnCount: Scalars['Int'];
  columnHidden?: Maybe<Scalars['Boolean']>;
  columnIndex: Scalars['Int'];
  formulas?: Maybe<GraphJson>;
  formulasLocal?: Maybe<GraphJson>;
  formulasR1C1?: Maybe<GraphJson>;
  hidden?: Maybe<Scalars['Boolean']>;
  numberFormat?: Maybe<GraphJson>;
  rowCount: Scalars['Int'];
  rowHidden?: Maybe<Scalars['Boolean']>;
  rowIndex: Scalars['Int'];
  text?: Maybe<GraphJson>;
  values?: Maybe<GraphJson>;
  valueTypes?: Maybe<GraphJson>;
  format?: Maybe<GraphWorkbookRangeFormat>;
  sort?: Maybe<GraphWorkbookRangeSort>;
  worksheet?: Maybe<GraphWorkbookWorksheet>;
  boundingRect?: Maybe<GraphWorkbookRange>;
  cell?: Maybe<GraphWorkbookRange>;
  column?: Maybe<GraphWorkbookRange>;
  columnsAfter?: Maybe<GraphWorkbookRange>;
  columnsBefore?: Maybe<GraphWorkbookRange>;
  entireColumn?: Maybe<GraphWorkbookRange>;
  entireRow?: Maybe<GraphWorkbookRange>;
  intersection?: Maybe<GraphWorkbookRange>;
  lastCell?: Maybe<GraphWorkbookRange>;
  lastColumn?: Maybe<GraphWorkbookRange>;
  lastRow?: Maybe<GraphWorkbookRange>;
  offsetRange?: Maybe<GraphWorkbookRange>;
  resizedRange?: Maybe<GraphWorkbookRange>;
  row?: Maybe<GraphWorkbookRange>;
  rowsAbove?: Maybe<GraphWorkbookRange>;
  rowsBelow?: Maybe<GraphWorkbookRange>;
  usedRange?: Maybe<GraphWorkbookRange>;
  visibleView?: Maybe<GraphWorkbookRangeView>;
  clear?: Maybe<Scalars['JSON']>;
  delete?: Maybe<Scalars['JSON']>;
  insert?: Maybe<Scalars['JSON']>;
  merge?: Maybe<Scalars['JSON']>;
  unmerge?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeClearArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeInput>;
  applyTo: Scalars['String'];
};

export type GraphWorkbookRangeDeleteArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeInput>;
  shift: Scalars['String'];
};

export type GraphWorkbookRangeInsertArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeInput>;
  shift: Scalars['String'];
};

export type GraphWorkbookRangeMergeArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeInput>;
  across: Scalars['Boolean'];
};

export type GraphWorkbookRangeUnmergeArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeInput>;
};

export type GraphWorkbookRangeBorder = GraphEntity & {
  __typename?: 'GraphWorkbookRangeBorder';
  color?: Maybe<Scalars['String']>;
  sideIndex?: Maybe<Scalars['String']>;
  style?: Maybe<Scalars['String']>;
  weight?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['Int']>;
  itemAt?: Maybe<GraphWorkbookRangeBorder>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeFill = GraphEntity & {
  __typename?: 'GraphWorkbookRangeFill';
  color?: Maybe<Scalars['String']>;
  clear?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeFillClearArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeFillInput>;
};

export type GraphWorkbookRangeFillInput = {
  color?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeFont = GraphEntity & {
  __typename?: 'GraphWorkbookRangeFont';
  bold?: Maybe<Scalars['Boolean']>;
  color?: Maybe<Scalars['String']>;
  italic?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  underline?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeFormat = GraphEntity & {
  __typename?: 'GraphWorkbookRangeFormat';
  columnWidth?: Maybe<Scalars['Float']>;
  horizontalAlignment?: Maybe<Scalars['String']>;
  rowHeight?: Maybe<Scalars['Float']>;
  verticalAlignment?: Maybe<Scalars['String']>;
  wrapText?: Maybe<Scalars['Boolean']>;
  borders?: Maybe<Array<Maybe<GraphWorkbookRangeBorder>>>;
  bordersById?: Maybe<GraphWorkbookRangeBorder>;
  fill?: Maybe<GraphWorkbookRangeFill>;
  font?: Maybe<GraphWorkbookRangeFont>;
  protection?: Maybe<GraphWorkbookFormatProtection>;
  autofitColumns?: Maybe<Scalars['JSON']>;
  autofitRows?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeFormatBordersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookRangeFormatBordersByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookRangeFormatAutofitColumnsArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeFormatInput>;
};

export type GraphWorkbookRangeFormatAutofitRowsArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeFormatInput>;
};

export type GraphWorkbookRangeFormatInput = {
  columnWidth?: Maybe<Scalars['Float']>;
  horizontalAlignment?: Maybe<Scalars['String']>;
  rowHeight?: Maybe<Scalars['Float']>;
  verticalAlignment?: Maybe<Scalars['String']>;
  wrapText?: Maybe<Scalars['Boolean']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeInput = {
  address?: Maybe<Scalars['String']>;
  addressLocal?: Maybe<Scalars['String']>;
  cellCount: Scalars['Int'];
  columnCount: Scalars['Int'];
  columnHidden?: Maybe<Scalars['Boolean']>;
  columnIndex: Scalars['Int'];
  formulas?: Maybe<GraphJsonInput>;
  formulasLocal?: Maybe<GraphJsonInput>;
  formulasR1C1?: Maybe<GraphJsonInput>;
  hidden?: Maybe<Scalars['Boolean']>;
  numberFormat?: Maybe<GraphJsonInput>;
  rowCount: Scalars['Int'];
  rowHidden?: Maybe<Scalars['Boolean']>;
  rowIndex: Scalars['Int'];
  text?: Maybe<GraphJsonInput>;
  values?: Maybe<GraphJsonInput>;
  valueTypes?: Maybe<GraphJsonInput>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeSort = GraphEntity & {
  __typename?: 'GraphWorkbookRangeSort';
  rest?: Maybe<Scalars['JSON']>;
  apply?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeSortApplyArgs = {
  bindparameter?: Maybe<GraphWorkbookRangeSortInput>;
  fields?: Maybe<Array<Maybe<GraphWorkbookSortFieldInput>>>;
  matchCase: Scalars['Boolean'];
  hasHeaders: Scalars['Boolean'];
  orientation: Scalars['String'];
  method: Scalars['String'];
};

export type GraphWorkbookRangeSortInput = {
  rest?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeView = GraphEntity & {
  __typename?: 'GraphWorkbookRangeView';
  cellAddresses?: Maybe<GraphJson>;
  columnCount: Scalars['Int'];
  formulas?: Maybe<GraphJson>;
  formulasLocal?: Maybe<GraphJson>;
  formulasR1C1?: Maybe<GraphJson>;
  index: Scalars['Int'];
  numberFormat?: Maybe<GraphJson>;
  rowCount: Scalars['Int'];
  text?: Maybe<GraphJson>;
  values?: Maybe<GraphJson>;
  valueTypes?: Maybe<GraphJson>;
  rows?: Maybe<Array<Maybe<GraphWorkbookRangeView>>>;
  rowsById?: Maybe<GraphWorkbookRangeView>;
  itemAt?: Maybe<GraphWorkbookRangeView>;
  range?: Maybe<GraphWorkbookRange>;
  id: Scalars['String'];
};

export type GraphWorkbookRangeViewRowsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookRangeViewRowsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookSessionInfo = {
  __typename?: 'GraphWorkbookSessionInfo';
  id?: Maybe<Scalars['String']>;
  persistChanges?: Maybe<Scalars['Boolean']>;
};

export type GraphWorkbookSortField = {
  __typename?: 'GraphWorkbookSortField';
  ascending: Scalars['Boolean'];
  color?: Maybe<Scalars['String']>;
  dataOption: Scalars['String'];
  icon?: Maybe<GraphWorkbookIcon>;
  key: Scalars['Int'];
  sortOn: Scalars['String'];
};

export type GraphWorkbookSortFieldInput = {
  ascending: Scalars['Boolean'];
  color?: Maybe<Scalars['String']>;
  dataOption: Scalars['String'];
  icon?: Maybe<GraphWorkbookIconInput>;
  key: Scalars['Int'];
  sortOn: Scalars['String'];
};

export type GraphWorkbookTable = GraphEntity & {
  __typename?: 'GraphWorkbookTable';
  highlightFirstColumn: Scalars['Boolean'];
  highlightLastColumn: Scalars['Boolean'];
  legacyId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  showBandedColumns: Scalars['Boolean'];
  showBandedRows: Scalars['Boolean'];
  showFilterButton: Scalars['Boolean'];
  showHeaders: Scalars['Boolean'];
  showTotals: Scalars['Boolean'];
  style?: Maybe<Scalars['String']>;
  columns?: Maybe<Array<Maybe<GraphWorkbookTableColumn>>>;
  columnsById?: Maybe<GraphWorkbookTableColumn>;
  rows?: Maybe<Array<Maybe<GraphWorkbookTableRow>>>;
  rowsById?: Maybe<GraphWorkbookTableRow>;
  sort?: Maybe<GraphWorkbookTableSort>;
  worksheet?: Maybe<GraphWorkbookWorksheet>;
  count?: Maybe<Scalars['Int']>;
  itemAt?: Maybe<GraphWorkbookTable>;
  dataBodyRange?: Maybe<GraphWorkbookRange>;
  headerRowRange?: Maybe<GraphWorkbookRange>;
  range?: Maybe<GraphWorkbookRange>;
  totalRowRange?: Maybe<GraphWorkbookRange>;
  add?: Maybe<Scalars['JSON']>;
  clearFilters?: Maybe<Scalars['JSON']>;
  convertToRange?: Maybe<Scalars['JSON']>;
  reapplyFilters?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookTableColumnsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookTableColumnsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookTableRowsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookTableRowsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookTableAddArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookTableInput>>>;
  address?: Maybe<Scalars['String']>;
  hasHeaders: Scalars['Boolean'];
};

export type GraphWorkbookTableClearFiltersArgs = {
  bindparameter?: Maybe<GraphWorkbookTableInput>;
};

export type GraphWorkbookTableConvertToRangeArgs = {
  bindparameter?: Maybe<GraphWorkbookTableInput>;
};

export type GraphWorkbookTableReapplyFiltersArgs = {
  bindparameter?: Maybe<GraphWorkbookTableInput>;
};

export type GraphWorkbookTableColumn = GraphEntity & {
  __typename?: 'GraphWorkbookTableColumn';
  index: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  values?: Maybe<GraphJson>;
  filter?: Maybe<GraphWorkbookFilter>;
  count?: Maybe<Scalars['Int']>;
  itemAt?: Maybe<GraphWorkbookTableColumn>;
  dataBodyRange?: Maybe<GraphWorkbookRange>;
  headerRowRange?: Maybe<GraphWorkbookRange>;
  range?: Maybe<GraphWorkbookRange>;
  totalRowRange?: Maybe<GraphWorkbookRange>;
  add?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookTableColumnAddArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookTableColumnInput>>>;
  index?: Maybe<Scalars['Int']>;
  values?: Maybe<GraphJsonInput>;
  name?: Maybe<Scalars['String']>;
};

export type GraphWorkbookTableColumnInput = {
  index: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  values?: Maybe<GraphJsonInput>;
  id: Scalars['String'];
};

export type GraphWorkbookTableInput = {
  highlightFirstColumn: Scalars['Boolean'];
  highlightLastColumn: Scalars['Boolean'];
  legacyId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  showBandedColumns: Scalars['Boolean'];
  showBandedRows: Scalars['Boolean'];
  showFilterButton: Scalars['Boolean'];
  showHeaders: Scalars['Boolean'];
  showTotals: Scalars['Boolean'];
  style?: Maybe<Scalars['String']>;
  id: Scalars['String'];
};

export type GraphWorkbookTableRow = GraphEntity & {
  __typename?: 'GraphWorkbookTableRow';
  index: Scalars['Int'];
  values?: Maybe<GraphJson>;
  count?: Maybe<Scalars['Int']>;
  itemAt?: Maybe<GraphWorkbookTableRow>;
  range?: Maybe<GraphWorkbookRange>;
  add?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookTableRowAddArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookTableRowInput>>>;
  index?: Maybe<Scalars['Int']>;
  values?: Maybe<GraphJsonInput>;
};

export type GraphWorkbookTableRowInput = {
  index: Scalars['Int'];
  values?: Maybe<GraphJsonInput>;
  id: Scalars['String'];
};

export type GraphWorkbookTableSort = GraphEntity & {
  __typename?: 'GraphWorkbookTableSort';
  fields?: Maybe<Array<Maybe<GraphWorkbookSortField>>>;
  matchCase: Scalars['Boolean'];
  method: Scalars['String'];
  apply?: Maybe<Scalars['JSON']>;
  clear?: Maybe<Scalars['JSON']>;
  reapply?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookTableSortApplyArgs = {
  bindparameter?: Maybe<GraphWorkbookTableSortInput>;
  fields?: Maybe<Array<Maybe<GraphWorkbookSortFieldInput>>>;
  matchCase: Scalars['Boolean'];
  method: Scalars['String'];
};

export type GraphWorkbookTableSortClearArgs = {
  bindparameter?: Maybe<GraphWorkbookTableSortInput>;
};

export type GraphWorkbookTableSortReapplyArgs = {
  bindparameter?: Maybe<GraphWorkbookTableSortInput>;
};

export type GraphWorkbookTableSortInput = {
  fields?: Maybe<Array<Maybe<GraphWorkbookSortFieldInput>>>;
  matchCase: Scalars['Boolean'];
  method: Scalars['String'];
  id: Scalars['String'];
};

export type GraphWorkbookWorksheet = GraphEntity & {
  __typename?: 'GraphWorkbookWorksheet';
  name?: Maybe<Scalars['String']>;
  position: Scalars['Int'];
  visibility: Scalars['String'];
  charts?: Maybe<Array<Maybe<GraphWorkbookChart>>>;
  chartsById?: Maybe<GraphWorkbookChart>;
  names?: Maybe<Array<Maybe<GraphWorkbookNamedItem>>>;
  namesById?: Maybe<GraphWorkbookNamedItem>;
  pivotTables?: Maybe<Array<Maybe<GraphWorkbookPivotTable>>>;
  pivotTablesById?: Maybe<GraphWorkbookPivotTable>;
  protection?: Maybe<GraphWorkbookWorksheetProtection>;
  tables?: Maybe<Array<Maybe<GraphWorkbookTable>>>;
  tablesById?: Maybe<GraphWorkbookTable>;
  cell?: Maybe<GraphWorkbookRange>;
  usedRange?: Maybe<GraphWorkbookRange>;
  range?: Maybe<GraphWorkbookRange>;
  add?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookWorksheetChartsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookWorksheetChartsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookWorksheetNamesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookWorksheetNamesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookWorksheetPivotTablesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookWorksheetPivotTablesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookWorksheetTablesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type GraphWorkbookWorksheetTablesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GraphWorkbookWorksheetAddArgs = {
  bindparameter?: Maybe<Array<Maybe<GraphWorkbookWorksheetInput>>>;
  name?: Maybe<Scalars['String']>;
};

export type GraphWorkbookWorksheetInput = {
  name?: Maybe<Scalars['String']>;
  position: Scalars['Int'];
  visibility: Scalars['String'];
  id: Scalars['String'];
};

export type GraphWorkbookWorksheetProtection = GraphEntity & {
  __typename?: 'GraphWorkbookWorksheetProtection';
  options?: Maybe<GraphWorkbookWorksheetProtectionOptions>;
  protected: Scalars['Boolean'];
  protect?: Maybe<Scalars['JSON']>;
  unprotect?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type GraphWorkbookWorksheetProtectionProtectArgs = {
  bindparameter?: Maybe<GraphWorkbookWorksheetProtectionInput>;
  options?: Maybe<GraphWorkbookWorksheetProtectionOptionsInput>;
};

export type GraphWorkbookWorksheetProtectionUnprotectArgs = {
  bindparameter?: Maybe<GraphWorkbookWorksheetProtectionInput>;
};

export type GraphWorkbookWorksheetProtectionInput = {
  options?: Maybe<GraphWorkbookWorksheetProtectionOptionsInput>;
  protected: Scalars['Boolean'];
  id: Scalars['String'];
};

export type GraphWorkbookWorksheetProtectionOptions = {
  __typename?: 'GraphWorkbookWorksheetProtectionOptions';
  allowAutoFilter: Scalars['Boolean'];
  allowDeleteColumns: Scalars['Boolean'];
  allowDeleteRows: Scalars['Boolean'];
  allowFormatCells: Scalars['Boolean'];
  allowFormatColumns: Scalars['Boolean'];
  allowFormatRows: Scalars['Boolean'];
  allowInsertColumns: Scalars['Boolean'];
  allowInsertHyperlinks: Scalars['Boolean'];
  allowInsertRows: Scalars['Boolean'];
  allowPivotTables: Scalars['Boolean'];
  allowSort: Scalars['Boolean'];
};

export type GraphWorkbookWorksheetProtectionOptionsInput = {
  allowAutoFilter: Scalars['Boolean'];
  allowDeleteColumns: Scalars['Boolean'];
  allowDeleteRows: Scalars['Boolean'];
  allowFormatCells: Scalars['Boolean'];
  allowFormatColumns: Scalars['Boolean'];
  allowFormatRows: Scalars['Boolean'];
  allowInsertColumns: Scalars['Boolean'];
  allowInsertHyperlinks: Scalars['Boolean'];
  allowInsertRows: Scalars['Boolean'];
  allowPivotTables: Scalars['Boolean'];
  allowSort: Scalars['Boolean'];
};

export type GraphWorkforceIntegration = GraphChangeTrackedEntity & {
  __typename?: 'GraphWorkforceIntegration';
  apiVersion?: Maybe<Scalars['Int']>;
  displayName?: Maybe<Scalars['String']>;
  encryption?: Maybe<GraphWorkforceIntegrationEncryption>;
  isActive?: Maybe<Scalars['Boolean']>;
  supportedEntities?: Maybe<GraphWorkforceIntegrationSupportedEntities>;
  url?: Maybe<Scalars['String']>;
  createdDateTime?: Maybe<Scalars['DateTime']>;
  lastModifiedBy?: Maybe<GraphIdentitySet>;
  lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
};

export type GraphWorkforceIntegrationEncryption = {
  __typename?: 'GraphWorkforceIntegrationEncryption';
  protocol?: Maybe<GraphWorkforceIntegrationEncryptionProtocol>;
  secret?: Maybe<Scalars['String']>;
};

export enum GraphWorkforceIntegrationEncryptionProtocol {
  SharedSecret = 'sharedSecret',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum GraphWorkforceIntegrationSupportedEntities {
  None = 'none',
  Shift = 'shift',
  SwapRequest = 'swapRequest',
  UserShiftPreferences = 'userShiftPreferences',
  OpenShift = 'openShift',
  OpenShiftRequest = 'openShiftRequest',
  OfferShiftRequest = 'offerShiftRequest',
  UnknownFutureValue = 'unknownFutureValue',
}

export type GraphWorkingHours = {
  __typename?: 'GraphWorkingHours';
  daysOfWeek?: Maybe<Array<Maybe<GraphDayOfWeek>>>;
  endTime?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  timeZone?: Maybe<GraphTimeZoneBase>;
};

export type GraphWorkingHoursInput = {
  daysOfWeek?: Maybe<Array<Maybe<GraphDayOfWeek>>>;
  endTime?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['String']>;
  timeZone?: Maybe<GraphTimeZoneBaseInput>;
};

export enum InlineCount {
  /** The OData MUST include a count of the number of entities in the collection identified by the URI (after applying any $filter System Query Options present on the URI) */
  Allpages = 'allpages',
  /** The OData service MUST NOT include a count in the response. This is equivalence to a URI that does not include a $inlinecount query string parameter. */
  None = 'none',
}

export type MicrosoftGraphCallRecordsCallRecord = GraphEntity & {
  __typename?: 'MicrosoftGraphCallRecordsCallRecord';
  endDateTime: Scalars['DateTime'];
  joinWebUrl?: Maybe<Scalars['String']>;
  lastModifiedDateTime: Scalars['DateTime'];
  modalities: Array<Maybe<MicrosoftGraphCallRecordsModality>>;
  organizer?: Maybe<GraphIdentitySet>;
  participants?: Maybe<Array<Maybe<GraphIdentitySet>>>;
  startDateTime: Scalars['DateTime'];
  type: MicrosoftGraphCallRecordsCallType;
  version: Scalars['BigInt'];
  sessions?: Maybe<Array<Maybe<MicrosoftGraphCallRecordsSession>>>;
  sessionsById?: Maybe<MicrosoftGraphCallRecordsSession>;
  id: Scalars['String'];
};

export type MicrosoftGraphCallRecordsCallRecordSessionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MicrosoftGraphCallRecordsCallRecordSessionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum MicrosoftGraphCallRecordsCallType {
  Unknown = 'unknown',
  GroupCall = 'groupCall',
  PeerToPeer = 'peerToPeer',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum MicrosoftGraphCallRecordsClientPlatform {
  Unknown = 'unknown',
  Windows = 'windows',
  MacOs = 'macOS',
  IOs = 'iOS',
  Android = 'android',
  Web = 'web',
  IpPhone = 'ipPhone',
  RoomSystem = 'roomSystem',
  SurfaceHub = 'surfaceHub',
  HoloLens = 'holoLens',
  UnknownFutureValue = 'unknownFutureValue',
}

export type MicrosoftGraphCallRecordsClientUserAgent = MicrosoftGraphCallRecordsUserAgent & {
  __typename?: 'MicrosoftGraphCallRecordsClientUserAgent';
  platform: MicrosoftGraphCallRecordsClientPlatform;
  productFamily: MicrosoftGraphCallRecordsProductFamily;
  applicationVersion?: Maybe<Scalars['String']>;
  headerValue?: Maybe<Scalars['String']>;
};

export type MicrosoftGraphCallRecordsDeviceInfo = {
  __typename?: 'MicrosoftGraphCallRecordsDeviceInfo';
  captureDeviceDriver?: Maybe<Scalars['String']>;
  captureDeviceName?: Maybe<Scalars['String']>;
  captureNotFunctioningEventRatio?: Maybe<Scalars['Float']>;
  cpuInsufficentEventRatio?: Maybe<Scalars['Float']>;
  deviceClippingEventRatio?: Maybe<Scalars['Float']>;
  deviceGlitchEventRatio?: Maybe<Scalars['Float']>;
  howlingEventCount?: Maybe<Scalars['Int']>;
  initialSignalLevelRootMeanSquare?: Maybe<Scalars['Float']>;
  lowSpeechLevelEventRatio?: Maybe<Scalars['Float']>;
  lowSpeechToNoiseEventRatio?: Maybe<Scalars['Float']>;
  micGlitchRate?: Maybe<Scalars['Float']>;
  receivedNoiseLevel?: Maybe<Scalars['Int']>;
  receivedSignalLevel?: Maybe<Scalars['Int']>;
  renderDeviceDriver?: Maybe<Scalars['String']>;
  renderDeviceName?: Maybe<Scalars['String']>;
  renderMuteEventRatio?: Maybe<Scalars['Float']>;
  renderNotFunctioningEventRatio?: Maybe<Scalars['Float']>;
  renderZeroVolumeEventRatio?: Maybe<Scalars['Float']>;
  sentNoiseLevel?: Maybe<Scalars['Int']>;
  sentSignalLevel?: Maybe<Scalars['Int']>;
  speakerGlitchRate?: Maybe<Scalars['Float']>;
};

export type MicrosoftGraphCallRecordsEndpoint = {
  __typename?: 'MicrosoftGraphCallRecordsEndpoint';
  userAgent?: Maybe<MicrosoftGraphCallRecordsUserAgent>;
};

export type MicrosoftGraphCallRecordsFailureInfo = {
  __typename?: 'MicrosoftGraphCallRecordsFailureInfo';
  reason?: Maybe<Scalars['String']>;
  stage: MicrosoftGraphCallRecordsFailureStage;
};

export enum MicrosoftGraphCallRecordsFailureStage {
  Unknown = 'unknown',
  CallSetup = 'callSetup',
  Midcall = 'midcall',
  UnknownFutureValue = 'unknownFutureValue',
}

export type MicrosoftGraphCallRecordsMedia = {
  __typename?: 'MicrosoftGraphCallRecordsMedia';
  calleeDevice?: Maybe<MicrosoftGraphCallRecordsDeviceInfo>;
  calleeNetwork?: Maybe<MicrosoftGraphCallRecordsNetworkInfo>;
  callerDevice?: Maybe<MicrosoftGraphCallRecordsDeviceInfo>;
  callerNetwork?: Maybe<MicrosoftGraphCallRecordsNetworkInfo>;
  label?: Maybe<Scalars['String']>;
  streams?: Maybe<Array<Maybe<MicrosoftGraphCallRecordsMediaStream>>>;
};

export type MicrosoftGraphCallRecordsMediaStream = {
  __typename?: 'MicrosoftGraphCallRecordsMediaStream';
  averageAudioDegradation?: Maybe<Scalars['Float']>;
  averageAudioNetworkJitter?: Maybe<Scalars['ISO8601Duration']>;
  averageBandwidthEstimate?: Maybe<Scalars['BigInt']>;
  averageJitter?: Maybe<Scalars['ISO8601Duration']>;
  averagePacketLossRate?: Maybe<Scalars['Float']>;
  averageRatioOfConcealedSamples?: Maybe<Scalars['Float']>;
  averageReceivedFrameRate?: Maybe<Scalars['Float']>;
  averageRoundTripTime?: Maybe<Scalars['ISO8601Duration']>;
  averageVideoFrameLossPercentage?: Maybe<Scalars['Float']>;
  averageVideoFrameRate?: Maybe<Scalars['Float']>;
  averageVideoPacketLossRate?: Maybe<Scalars['Float']>;
  endDateTime?: Maybe<Scalars['DateTime']>;
  lowFrameRateRatio?: Maybe<Scalars['Float']>;
  lowVideoProcessingCapabilityRatio?: Maybe<Scalars['Float']>;
  maxAudioNetworkJitter?: Maybe<Scalars['ISO8601Duration']>;
  maxJitter?: Maybe<Scalars['ISO8601Duration']>;
  maxPacketLossRate?: Maybe<Scalars['Float']>;
  maxRatioOfConcealedSamples?: Maybe<Scalars['Float']>;
  maxRoundTripTime?: Maybe<Scalars['ISO8601Duration']>;
  packetUtilization?: Maybe<Scalars['BigInt']>;
  postForwardErrorCorrectionPacketLossRate?: Maybe<Scalars['Float']>;
  startDateTime?: Maybe<Scalars['DateTime']>;
  streamDirection: MicrosoftGraphCallRecordsMediaStreamDirection;
  streamId?: Maybe<Scalars['String']>;
  wasMediaBypassed?: Maybe<Scalars['Boolean']>;
};

export enum MicrosoftGraphCallRecordsMediaStreamDirection {
  CallerToCallee = 'callerToCallee',
  CalleeToCaller = 'calleeToCaller',
}

export enum MicrosoftGraphCallRecordsModality {
  Audio = 'audio',
  Video = 'video',
  VideoBasedScreenSharing = 'videoBasedScreenSharing',
  Data = 'data',
  ScreenSharing = 'screenSharing',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum MicrosoftGraphCallRecordsNetworkConnectionType {
  Unknown = 'unknown',
  Wired = 'wired',
  Wifi = 'wifi',
  Mobile = 'mobile',
  Tunnel = 'tunnel',
  UnknownFutureValue = 'unknownFutureValue',
}

export type MicrosoftGraphCallRecordsNetworkInfo = {
  __typename?: 'MicrosoftGraphCallRecordsNetworkInfo';
  bandwidthLowEventRatio?: Maybe<Scalars['Float']>;
  basicServiceSetIdentifier?: Maybe<Scalars['String']>;
  connectionType: MicrosoftGraphCallRecordsNetworkConnectionType;
  delayEventRatio?: Maybe<Scalars['Float']>;
  dnsSuffix?: Maybe<Scalars['String']>;
  ipAddress?: Maybe<Scalars['String']>;
  linkSpeed?: Maybe<Scalars['BigInt']>;
  macAddress?: Maybe<Scalars['String']>;
  port?: Maybe<Scalars['Int']>;
  receivedQualityEventRatio?: Maybe<Scalars['Float']>;
  reflexiveIPAddress?: Maybe<Scalars['String']>;
  relayIPAddress?: Maybe<Scalars['String']>;
  relayPort?: Maybe<Scalars['Int']>;
  sentQualityEventRatio?: Maybe<Scalars['Float']>;
  subnet?: Maybe<Scalars['String']>;
  wifiBand: MicrosoftGraphCallRecordsWifiBand;
  wifiBatteryCharge?: Maybe<Scalars['Int']>;
  wifiChannel?: Maybe<Scalars['Int']>;
  wifiMicrosoftDriver?: Maybe<Scalars['String']>;
  wifiMicrosoftDriverVersion?: Maybe<Scalars['String']>;
  wifiRadioType: MicrosoftGraphCallRecordsWifiRadioType;
  wifiSignalStrength?: Maybe<Scalars['Int']>;
  wifiVendorDriver?: Maybe<Scalars['String']>;
  wifiVendorDriverVersion?: Maybe<Scalars['String']>;
};

export enum MicrosoftGraphCallRecordsProductFamily {
  Unknown = 'unknown',
  Teams = 'teams',
  SkypeForBusiness = 'skypeForBusiness',
  Lync = 'lync',
  UnknownFutureValue = 'unknownFutureValue',
}

export type MicrosoftGraphCallRecordsSegment = GraphEntity & {
  __typename?: 'MicrosoftGraphCallRecordsSegment';
  callee?: Maybe<MicrosoftGraphCallRecordsEndpoint>;
  caller?: Maybe<MicrosoftGraphCallRecordsEndpoint>;
  endDateTime: Scalars['DateTime'];
  failureInfo?: Maybe<MicrosoftGraphCallRecordsFailureInfo>;
  media?: Maybe<Array<Maybe<MicrosoftGraphCallRecordsMedia>>>;
  startDateTime: Scalars['DateTime'];
  id: Scalars['String'];
};

export enum MicrosoftGraphCallRecordsServiceRole {
  Unknown = 'unknown',
  CustomBot = 'customBot',
  SkypeForBusinessMicrosoftTeamsGateway = 'skypeForBusinessMicrosoftTeamsGateway',
  SkypeForBusinessAudioVideoMcu = 'skypeForBusinessAudioVideoMcu',
  SkypeForBusinessApplicationSharingMcu = 'skypeForBusinessApplicationSharingMcu',
  SkypeForBusinessCallQueues = 'skypeForBusinessCallQueues',
  SkypeForBusinessAutoAttendant = 'skypeForBusinessAutoAttendant',
  MediationServer = 'mediationServer',
  MediationServerCloudConnectorEdition = 'mediationServerCloudConnectorEdition',
  ExchangeUnifiedMessagingService = 'exchangeUnifiedMessagingService',
  MediaController = 'mediaController',
  ConferencingAnnouncementService = 'conferencingAnnouncementService',
  ConferencingAttendant = 'conferencingAttendant',
  AudioTeleconferencerController = 'audioTeleconferencerController',
  SkypeForBusinessUnifiedCommunicationApplicationPlatform = 'skypeForBusinessUnifiedCommunicationApplicationPlatform',
  ResponseGroupServiceAnnouncementService = 'responseGroupServiceAnnouncementService',
  Gateway = 'gateway',
  SkypeTranslator = 'skypeTranslator',
  SkypeForBusinessAttendant = 'skypeForBusinessAttendant',
  ResponseGroupService = 'responseGroupService',
  Voicemail = 'voicemail',
  UnknownFutureValue = 'unknownFutureValue',
}

export type MicrosoftGraphCallRecordsServiceUserAgent = MicrosoftGraphCallRecordsUserAgent & {
  __typename?: 'MicrosoftGraphCallRecordsServiceUserAgent';
  role: MicrosoftGraphCallRecordsServiceRole;
  applicationVersion?: Maybe<Scalars['String']>;
  headerValue?: Maybe<Scalars['String']>;
};

export type MicrosoftGraphCallRecordsSession = GraphEntity & {
  __typename?: 'MicrosoftGraphCallRecordsSession';
  callee?: Maybe<MicrosoftGraphCallRecordsEndpoint>;
  caller?: Maybe<MicrosoftGraphCallRecordsEndpoint>;
  endDateTime: Scalars['DateTime'];
  failureInfo?: Maybe<MicrosoftGraphCallRecordsFailureInfo>;
  modalities: Array<Maybe<MicrosoftGraphCallRecordsModality>>;
  startDateTime: Scalars['DateTime'];
  segments?: Maybe<Array<Maybe<MicrosoftGraphCallRecordsSegment>>>;
  segmentsById?: Maybe<MicrosoftGraphCallRecordsSegment>;
  id: Scalars['String'];
};

export type MicrosoftGraphCallRecordsSessionSegmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MicrosoftGraphCallRecordsSessionSegmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type MicrosoftGraphCallRecordsUserAgent = {
  applicationVersion?: Maybe<Scalars['String']>;
  headerValue?: Maybe<Scalars['String']>;
};

export enum MicrosoftGraphCallRecordsWifiBand {
  Unknown = 'unknown',
  Frequency24GHz = 'frequency24GHz',
  Frequency50GHz = 'frequency50GHz',
  Frequency60GHz = 'frequency60GHz',
  UnknownFutureValue = 'unknownFutureValue',
}

export enum MicrosoftGraphCallRecordsWifiRadioType {
  Unknown = 'unknown',
  Wifi80211a = 'wifi80211a',
  Wifi80211b = 'wifi80211b',
  Wifi80211g = 'wifi80211g',
  Wifi80211n = 'wifi80211n',
  Wifi80211ac = 'wifi80211ac',
  Wifi80211ax = 'wifi80211ax',
  UnknownFutureValue = 'unknownFutureValue',
}

export type MicrosoftGraphExternalConnectorsExternalItem = GraphEntity & {
  __typename?: 'MicrosoftGraphExternalConnectorsExternalItem';
  content?: Maybe<MicrosoftGraphExternalConnectorsExternalItemContent>;
  properties?: Maybe<MicrosoftGraphExternalConnectorsProperties>;
  id: Scalars['String'];
};

export type MicrosoftGraphExternalConnectorsExternalItemContent = {
  __typename?: 'MicrosoftGraphExternalConnectorsExternalItemContent';
  type: MicrosoftGraphExternalConnectorsExternalItemContentType;
  value?: Maybe<Scalars['String']>;
};

export enum MicrosoftGraphExternalConnectorsExternalItemContentType {
  Text = 'text',
  Html = 'html',
  UnknownFutureValue = 'unknownFutureValue',
}

export type MicrosoftGraphExternalConnectorsProperties = {
  __typename?: 'MicrosoftGraphExternalConnectorsProperties';
  rest?: Maybe<Scalars['JSON']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  invitations?: Maybe<Array<Maybe<GraphInvitation>>>;
  invitationsByid?: Maybe<GraphInvitation>;
  createinvitations?: Maybe<GraphInvitation>;
  deleteinvitationsByid?: Maybe<Scalars['JSON']>;
  updateinvitationsByid?: Maybe<GraphInvitation>;
  users?: Maybe<Array<Maybe<GraphUser>>>;
  usersByid?: Maybe<GraphUser>;
  createusers?: Maybe<GraphUser>;
  deleteusersByid?: Maybe<Scalars['JSON']>;
  updateusersByid?: Maybe<GraphUser>;
  applicationTemplates?: Maybe<Array<Maybe<GraphApplicationTemplate>>>;
  applicationTemplatesByid?: Maybe<GraphApplicationTemplate>;
  createapplicationTemplates?: Maybe<GraphApplicationTemplate>;
  deleteapplicationTemplatesByid?: Maybe<Scalars['JSON']>;
  updateapplicationTemplatesByid?: Maybe<GraphApplicationTemplate>;
  authenticationMethodConfigurations?: Maybe<Array<Maybe<GraphAuthenticationMethodConfiguration>>>;
  authenticationMethodConfigurationsByid?: Maybe<GraphAuthenticationMethodConfiguration>;
  createauthenticationMethodConfigurations?: Maybe<GraphAuthenticationMethodConfiguration>;
  deleteauthenticationMethodConfigurationsByid?: Maybe<Scalars['JSON']>;
  updateauthenticationMethodConfigurationsByid?: Maybe<GraphAuthenticationMethodConfiguration>;
  identityProviders?: Maybe<Array<Maybe<GraphIdentityProvider>>>;
  identityProvidersByid?: Maybe<GraphIdentityProvider>;
  createidentityProviders?: Maybe<GraphIdentityProvider>;
  deleteidentityProvidersByid?: Maybe<Scalars['JSON']>;
  updateidentityProvidersByid?: Maybe<GraphIdentityProvider>;
  applications?: Maybe<Array<Maybe<GraphApplication>>>;
  applicationsByid?: Maybe<GraphApplication>;
  createapplications?: Maybe<GraphApplication>;
  deleteapplicationsByid?: Maybe<Scalars['JSON']>;
  updateapplicationsByid?: Maybe<GraphApplication>;
  certificateBasedAuthConfiguration?: Maybe<Array<Maybe<GraphCertificateBasedAuthConfiguration>>>;
  certificateBasedAuthConfigurationByid?: Maybe<GraphCertificateBasedAuthConfiguration>;
  createcertificateBasedAuthConfiguration?: Maybe<GraphCertificateBasedAuthConfiguration>;
  deletecertificateBasedAuthConfigurationByid?: Maybe<Scalars['JSON']>;
  updatecertificateBasedAuthConfigurationByid?: Maybe<GraphCertificateBasedAuthConfiguration>;
  contacts?: Maybe<Array<Maybe<GraphOrgContact>>>;
  contactsByid?: Maybe<GraphOrgContact>;
  createcontacts?: Maybe<GraphOrgContact>;
  deletecontactsByid?: Maybe<Scalars['JSON']>;
  updatecontactsByid?: Maybe<GraphOrgContact>;
  contracts?: Maybe<Array<Maybe<GraphContract>>>;
  contractsByid?: Maybe<GraphContract>;
  createcontracts?: Maybe<GraphContract>;
  deletecontractsByid?: Maybe<Scalars['JSON']>;
  updatecontractsByid?: Maybe<GraphContract>;
  devices?: Maybe<Array<Maybe<GraphDevice>>>;
  devicesByid?: Maybe<GraphDevice>;
  createdevices?: Maybe<GraphDevice>;
  deletedevicesByid?: Maybe<Scalars['JSON']>;
  updatedevicesByid?: Maybe<GraphDevice>;
  directoryObjects?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  directoryObjectsByid?: Maybe<GraphDirectoryObject>;
  createdirectoryObjects?: Maybe<GraphDirectoryObject>;
  deletedirectoryObjectsByid?: Maybe<Scalars['JSON']>;
  updatedirectoryObjectsByid?: Maybe<GraphDirectoryObject>;
  directoryRoles?: Maybe<Array<Maybe<GraphDirectoryRole>>>;
  directoryRolesByid?: Maybe<GraphDirectoryRole>;
  createdirectoryRoles?: Maybe<GraphDirectoryRole>;
  deletedirectoryRolesByid?: Maybe<Scalars['JSON']>;
  updatedirectoryRolesByid?: Maybe<GraphDirectoryRole>;
  directoryRoleTemplates?: Maybe<Array<Maybe<GraphDirectoryRoleTemplate>>>;
  directoryRoleTemplatesByid?: Maybe<GraphDirectoryRoleTemplate>;
  createdirectoryRoleTemplates?: Maybe<GraphDirectoryRoleTemplate>;
  deletedirectoryRoleTemplatesByid?: Maybe<Scalars['JSON']>;
  updatedirectoryRoleTemplatesByid?: Maybe<GraphDirectoryRoleTemplate>;
  domainDnsRecords?: Maybe<Array<Maybe<GraphDomainDnsRecord>>>;
  domainDnsRecordsByid?: Maybe<GraphDomainDnsRecord>;
  createdomainDnsRecords?: Maybe<GraphDomainDnsRecord>;
  deletedomainDnsRecordsByid?: Maybe<Scalars['JSON']>;
  updatedomainDnsRecordsByid?: Maybe<GraphDomainDnsRecord>;
  domains?: Maybe<Array<Maybe<GraphDomain>>>;
  domainsByid?: Maybe<GraphDomain>;
  createdomains?: Maybe<GraphDomain>;
  deletedomainsByid?: Maybe<Scalars['JSON']>;
  updatedomainsByid?: Maybe<GraphDomain>;
  groups?: Maybe<Array<Maybe<GraphGroup>>>;
  groupsByid?: Maybe<GraphGroup>;
  creategroups?: Maybe<GraphGroup>;
  deletegroupsByid?: Maybe<Scalars['JSON']>;
  updategroupsByid?: Maybe<GraphGroup>;
  groupSettings?: Maybe<Array<Maybe<GraphGroupSetting>>>;
  groupSettingsByid?: Maybe<GraphGroupSetting>;
  creategroupSettings?: Maybe<GraphGroupSetting>;
  deletegroupSettingsByid?: Maybe<Scalars['JSON']>;
  updategroupSettingsByid?: Maybe<GraphGroupSetting>;
  groupSettingTemplates?: Maybe<Array<Maybe<GraphGroupSettingTemplate>>>;
  groupSettingTemplatesByid?: Maybe<GraphGroupSettingTemplate>;
  creategroupSettingTemplates?: Maybe<GraphGroupSettingTemplate>;
  deletegroupSettingTemplatesByid?: Maybe<Scalars['JSON']>;
  updategroupSettingTemplatesByid?: Maybe<GraphGroupSettingTemplate>;
  localizations?: Maybe<Array<Maybe<GraphOrganizationalBrandingLocalization>>>;
  localizationsByid?: Maybe<GraphOrganizationalBrandingLocalization>;
  createlocalizations?: Maybe<GraphOrganizationalBrandingLocalization>;
  deletelocalizationsByid?: Maybe<Scalars['JSON']>;
  updatelocalizationsByid?: Maybe<GraphOrganizationalBrandingLocalization>;
  oauth2PermissionGrants?: Maybe<Array<Maybe<GraphOAuth2PermissionGrant>>>;
  oauth2PermissionGrantsByid?: Maybe<GraphOAuth2PermissionGrant>;
  createoauth2PermissionGrants?: Maybe<GraphOAuth2PermissionGrant>;
  deleteoauth2PermissionGrantsByid?: Maybe<Scalars['JSON']>;
  updateoauth2PermissionGrantsByid?: Maybe<GraphOAuth2PermissionGrant>;
  organization?: Maybe<Array<Maybe<GraphOrganization>>>;
  organizationByid?: Maybe<GraphOrganization>;
  createorganization?: Maybe<GraphOrganization>;
  deleteorganizationByid?: Maybe<Scalars['JSON']>;
  updateorganizationByid?: Maybe<GraphOrganization>;
  permissionGrants?: Maybe<Array<Maybe<GraphResourceSpecificPermissionGrant>>>;
  permissionGrantsByid?: Maybe<GraphResourceSpecificPermissionGrant>;
  createpermissionGrants?: Maybe<GraphResourceSpecificPermissionGrant>;
  deletepermissionGrantsByid?: Maybe<Scalars['JSON']>;
  updatepermissionGrantsByid?: Maybe<GraphResourceSpecificPermissionGrant>;
  scopedRoleMemberships?: Maybe<Array<Maybe<GraphScopedRoleMembership>>>;
  scopedRoleMembershipsByid?: Maybe<GraphScopedRoleMembership>;
  createscopedRoleMemberships?: Maybe<GraphScopedRoleMembership>;
  deletescopedRoleMembershipsByid?: Maybe<Scalars['JSON']>;
  updatescopedRoleMembershipsByid?: Maybe<GraphScopedRoleMembership>;
  servicePrincipals?: Maybe<Array<Maybe<GraphServicePrincipal>>>;
  servicePrincipalsByid?: Maybe<GraphServicePrincipal>;
  createservicePrincipals?: Maybe<GraphServicePrincipal>;
  deleteservicePrincipalsByid?: Maybe<Scalars['JSON']>;
  updateservicePrincipalsByid?: Maybe<GraphServicePrincipal>;
  subscribedSkus?: Maybe<Array<Maybe<GraphSubscribedSku>>>;
  subscribedSkusByid?: Maybe<GraphSubscribedSku>;
  createsubscribedSkus?: Maybe<GraphSubscribedSku>;
  deletesubscribedSkusByid?: Maybe<Scalars['JSON']>;
  updatesubscribedSkusByid?: Maybe<GraphSubscribedSku>;
  workbooks?: Maybe<Array<Maybe<GraphDriveItem>>>;
  workbooksByid?: Maybe<GraphDriveItem>;
  createworkbooks?: Maybe<GraphDriveItem>;
  deleteworkbooksByid?: Maybe<Scalars['JSON']>;
  updateworkbooksByid?: Maybe<GraphDriveItem>;
  places?: Maybe<Array<Maybe<GraphPlace>>>;
  placesByid?: Maybe<GraphPlace>;
  createplaces?: Maybe<GraphPlace>;
  deleteplacesByid?: Maybe<Scalars['JSON']>;
  updateplacesByid?: Maybe<GraphPlace>;
  drives?: Maybe<Array<Maybe<GraphDrive>>>;
  drivesByid?: Maybe<GraphDrive>;
  createdrives?: Maybe<GraphDrive>;
  deletedrivesByid?: Maybe<Scalars['JSON']>;
  updatedrivesByid?: Maybe<GraphDrive>;
  shares?: Maybe<Array<Maybe<GraphSharedDriveItem>>>;
  sharesByid?: Maybe<GraphSharedDriveItem>;
  createshares?: Maybe<GraphSharedDriveItem>;
  deletesharesByid?: Maybe<Scalars['JSON']>;
  updatesharesByid?: Maybe<GraphSharedDriveItem>;
  sites?: Maybe<Array<Maybe<GraphSite>>>;
  sitesByid?: Maybe<GraphSite>;
  createsites?: Maybe<GraphSite>;
  deletesitesByid?: Maybe<Scalars['JSON']>;
  updatesitesByid?: Maybe<GraphSite>;
  schemaExtensions?: Maybe<Array<Maybe<GraphSchemaExtension>>>;
  schemaExtensionsByid?: Maybe<GraphSchemaExtension>;
  createschemaExtensions?: Maybe<GraphSchemaExtension>;
  deleteschemaExtensionsByid?: Maybe<Scalars['JSON']>;
  updateschemaExtensionsByid?: Maybe<GraphSchemaExtension>;
  groupLifecyclePolicies?: Maybe<Array<Maybe<GraphGroupLifecyclePolicy>>>;
  groupLifecyclePoliciesByid?: Maybe<GraphGroupLifecyclePolicy>;
  creategroupLifecyclePolicies?: Maybe<GraphGroupLifecyclePolicy>;
  deletegroupLifecyclePoliciesByid?: Maybe<Scalars['JSON']>;
  updategroupLifecyclePoliciesByid?: Maybe<GraphGroupLifecyclePolicy>;
  agreementAcceptances?: Maybe<Array<Maybe<GraphAgreementAcceptance>>>;
  agreementAcceptancesByid?: Maybe<GraphAgreementAcceptance>;
  createagreementAcceptances?: Maybe<GraphAgreementAcceptance>;
  deleteagreementAcceptancesByid?: Maybe<Scalars['JSON']>;
  updateagreementAcceptancesByid?: Maybe<GraphAgreementAcceptance>;
  agreements?: Maybe<Array<Maybe<GraphAgreement>>>;
  agreementsByid?: Maybe<GraphAgreement>;
  createagreements?: Maybe<GraphAgreement>;
  deleteagreementsByid?: Maybe<Scalars['JSON']>;
  updateagreementsByid?: Maybe<GraphAgreement>;
  dataPolicyOperations?: Maybe<Array<Maybe<GraphDataPolicyOperation>>>;
  dataPolicyOperationsByid?: Maybe<GraphDataPolicyOperation>;
  createdataPolicyOperations?: Maybe<GraphDataPolicyOperation>;
  deletedataPolicyOperationsByid?: Maybe<Scalars['JSON']>;
  updatedataPolicyOperationsByid?: Maybe<GraphDataPolicyOperation>;
  subscriptions?: Maybe<Array<Maybe<GraphSubscription>>>;
  subscriptionsByid?: Maybe<GraphSubscription>;
  createsubscriptions?: Maybe<GraphSubscription>;
  deletesubscriptionsByid?: Maybe<Scalars['JSON']>;
  updatesubscriptionsByid?: Maybe<GraphSubscription>;
  chats?: Maybe<Array<Maybe<GraphChat>>>;
  chatsByid?: Maybe<GraphChat>;
  createchats?: Maybe<GraphChat>;
  deletechatsByid?: Maybe<Scalars['JSON']>;
  updatechatsByid?: Maybe<GraphChat>;
  teams?: Maybe<Array<Maybe<GraphTeam>>>;
  teamsByid?: Maybe<GraphTeam>;
  createteams?: Maybe<GraphTeam>;
  deleteteamsByid?: Maybe<Scalars['JSON']>;
  updateteamsByid?: Maybe<GraphTeam>;
  teamsTemplates?: Maybe<Array<Maybe<GraphTeamsTemplate>>>;
  teamsTemplatesByid?: Maybe<GraphTeamsTemplate>;
  createteamsTemplates?: Maybe<GraphTeamsTemplate>;
  deleteteamsTemplatesByid?: Maybe<Scalars['JSON']>;
  updateteamsTemplatesByid?: Maybe<GraphTeamsTemplate>;
};

export type MutationInvitationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationInvitationsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateinvitationsArgs = {
  input?: Maybe<GraphInvitationInput>;
};

export type MutationDeleteinvitationsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateinvitationsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphInvitationUpdateInput>;
};

export type MutationUsersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationUsersByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateusersArgs = {
  input?: Maybe<GraphUserInput>;
};

export type MutationDeleteusersByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateusersByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphUserUpdateInput>;
};

export type MutationApplicationTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationApplicationTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateapplicationTemplatesArgs = {
  input?: Maybe<GraphApplicationTemplateInput>;
};

export type MutationDeleteapplicationTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateapplicationTemplatesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphApplicationTemplateUpdateInput>;
};

export type MutationAuthenticationMethodConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationAuthenticationMethodConfigurationsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateauthenticationMethodConfigurationsArgs = {
  input?: Maybe<GraphAuthenticationMethodConfigurationInput>;
};

export type MutationDeleteauthenticationMethodConfigurationsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateauthenticationMethodConfigurationsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphAuthenticationMethodConfigurationUpdateInput>;
};

export type MutationIdentityProvidersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationIdentityProvidersByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateidentityProvidersArgs = {
  input?: Maybe<GraphIdentityProviderInput>;
};

export type MutationDeleteidentityProvidersByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateidentityProvidersByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphIdentityProviderUpdateInput>;
};

export type MutationApplicationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationApplicationsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateapplicationsArgs = {
  input?: Maybe<GraphApplicationInput>;
};

export type MutationDeleteapplicationsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateapplicationsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphApplicationUpdateInput>;
};

export type MutationCertificateBasedAuthConfigurationArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationCertificateBasedAuthConfigurationByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatecertificateBasedAuthConfigurationArgs = {
  input?: Maybe<GraphCertificateBasedAuthConfigurationInput>;
};

export type MutationDeletecertificateBasedAuthConfigurationByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatecertificateBasedAuthConfigurationByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphCertificateBasedAuthConfigurationUpdateInput>;
};

export type MutationContactsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationContactsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatecontactsArgs = {
  input?: Maybe<GraphOrgContactInput>;
};

export type MutationDeletecontactsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatecontactsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphOrgContactUpdateInput>;
};

export type MutationContractsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationContractsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatecontractsArgs = {
  input?: Maybe<GraphContractInput>;
};

export type MutationDeletecontractsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatecontractsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphContractUpdateInput>;
};

export type MutationDevicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDevicesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedevicesArgs = {
  input?: Maybe<GraphDeviceInput>;
};

export type MutationDeletedevicesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedevicesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDeviceUpdateInput>;
};

export type MutationDirectoryObjectsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDirectoryObjectsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedirectoryObjectsArgs = {
  input?: Maybe<GraphDirectoryObjectInput>;
};

export type MutationDeletedirectoryObjectsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedirectoryObjectsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDirectoryObjectUpdateInput>;
};

export type MutationDirectoryRolesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDirectoryRolesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedirectoryRolesArgs = {
  input?: Maybe<GraphDirectoryRoleInput>;
};

export type MutationDeletedirectoryRolesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedirectoryRolesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDirectoryRoleUpdateInput>;
};

export type MutationDirectoryRoleTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDirectoryRoleTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedirectoryRoleTemplatesArgs = {
  input?: Maybe<GraphDirectoryRoleTemplateInput>;
};

export type MutationDeletedirectoryRoleTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedirectoryRoleTemplatesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDirectoryRoleTemplateUpdateInput>;
};

export type MutationDomainDnsRecordsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDomainDnsRecordsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedomainDnsRecordsArgs = {
  input?: Maybe<GraphDomainDnsRecordInput>;
};

export type MutationDeletedomainDnsRecordsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedomainDnsRecordsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDomainDnsRecordUpdateInput>;
};

export type MutationDomainsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDomainsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedomainsArgs = {
  input?: Maybe<GraphDomainInput>;
};

export type MutationDeletedomainsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedomainsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDomainUpdateInput>;
};

export type MutationGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationGroupsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreategroupsArgs = {
  input?: Maybe<GraphGroupInput>;
};

export type MutationDeletegroupsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdategroupsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphGroupUpdateInput>;
};

export type MutationGroupSettingsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationGroupSettingsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreategroupSettingsArgs = {
  input?: Maybe<GraphGroupSettingInput>;
};

export type MutationDeletegroupSettingsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdategroupSettingsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphGroupSettingUpdateInput>;
};

export type MutationGroupSettingTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationGroupSettingTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreategroupSettingTemplatesArgs = {
  input?: Maybe<GraphGroupSettingTemplateInput>;
};

export type MutationDeletegroupSettingTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdategroupSettingTemplatesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphGroupSettingTemplateUpdateInput>;
};

export type MutationLocalizationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationLocalizationsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatelocalizationsArgs = {
  input?: Maybe<GraphOrganizationalBrandingLocalizationInput>;
};

export type MutationDeletelocalizationsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatelocalizationsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphOrganizationalBrandingLocalizationUpdateInput>;
};

export type MutationOauth2PermissionGrantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationOauth2PermissionGrantsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateoauth2PermissionGrantsArgs = {
  input?: Maybe<GraphOAuth2PermissionGrantInput>;
};

export type MutationDeleteoauth2PermissionGrantsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateoauth2PermissionGrantsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphOAuth2PermissionGrantUpdateInput>;
};

export type MutationOrganizationArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationOrganizationByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateorganizationArgs = {
  input?: Maybe<GraphOrganizationInput>;
};

export type MutationDeleteorganizationByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateorganizationByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphOrganizationUpdateInput>;
};

export type MutationPermissionGrantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationPermissionGrantsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatepermissionGrantsArgs = {
  input?: Maybe<GraphResourceSpecificPermissionGrantInput>;
};

export type MutationDeletepermissionGrantsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatepermissionGrantsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphResourceSpecificPermissionGrantUpdateInput>;
};

export type MutationScopedRoleMembershipsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationScopedRoleMembershipsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatescopedRoleMembershipsArgs = {
  input?: Maybe<GraphScopedRoleMembershipInput>;
};

export type MutationDeletescopedRoleMembershipsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatescopedRoleMembershipsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphScopedRoleMembershipUpdateInput>;
};

export type MutationServicePrincipalsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationServicePrincipalsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateservicePrincipalsArgs = {
  input?: Maybe<GraphServicePrincipalInput>;
};

export type MutationDeleteservicePrincipalsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateservicePrincipalsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphServicePrincipalUpdateInput>;
};

export type MutationSubscribedSkusArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationSubscribedSkusByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatesubscribedSkusArgs = {
  input?: Maybe<GraphSubscribedSkuInput>;
};

export type MutationDeletesubscribedSkusByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatesubscribedSkusByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphSubscribedSkuUpdateInput>;
};

export type MutationWorkbooksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationWorkbooksByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateworkbooksArgs = {
  input?: Maybe<GraphDriveItemInput>;
};

export type MutationDeleteworkbooksByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateworkbooksByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDriveItemUpdateInput>;
};

export type MutationPlacesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationPlacesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateplacesArgs = {
  input?: Maybe<GraphPlaceInput>;
};

export type MutationDeleteplacesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateplacesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphPlaceUpdateInput>;
};

export type MutationDrivesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDrivesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedrivesArgs = {
  input?: Maybe<GraphDriveInput>;
};

export type MutationDeletedrivesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedrivesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDriveUpdateInput>;
};

export type MutationSharesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationSharesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatesharesArgs = {
  input?: Maybe<GraphSharedDriveItemInput>;
};

export type MutationDeletesharesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatesharesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphSharedDriveItemUpdateInput>;
};

export type MutationSitesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationSitesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatesitesArgs = {
  input?: Maybe<GraphSiteInput>;
};

export type MutationDeletesitesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatesitesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphSiteUpdateInput>;
};

export type MutationSchemaExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationSchemaExtensionsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateschemaExtensionsArgs = {
  input?: Maybe<GraphSchemaExtensionInput>;
};

export type MutationDeleteschemaExtensionsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateschemaExtensionsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphSchemaExtensionUpdateInput>;
};

export type MutationGroupLifecyclePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationGroupLifecyclePoliciesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreategroupLifecyclePoliciesArgs = {
  input?: Maybe<GraphGroupLifecyclePolicyInput>;
};

export type MutationDeletegroupLifecyclePoliciesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdategroupLifecyclePoliciesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphGroupLifecyclePolicyUpdateInput>;
};

export type MutationAgreementAcceptancesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationAgreementAcceptancesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateagreementAcceptancesArgs = {
  input?: Maybe<GraphAgreementAcceptanceInput>;
};

export type MutationDeleteagreementAcceptancesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateagreementAcceptancesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphAgreementAcceptanceUpdateInput>;
};

export type MutationAgreementsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationAgreementsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateagreementsArgs = {
  input?: Maybe<GraphAgreementInput>;
};

export type MutationDeleteagreementsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateagreementsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphAgreementUpdateInput>;
};

export type MutationDataPolicyOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationDataPolicyOperationsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatedataPolicyOperationsArgs = {
  input?: Maybe<GraphDataPolicyOperationInput>;
};

export type MutationDeletedataPolicyOperationsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatedataPolicyOperationsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphDataPolicyOperationUpdateInput>;
};

export type MutationSubscriptionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationSubscriptionsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatesubscriptionsArgs = {
  input?: Maybe<GraphSubscriptionInput>;
};

export type MutationDeletesubscriptionsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatesubscriptionsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphSubscriptionUpdateInput>;
};

export type MutationChatsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationChatsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreatechatsArgs = {
  input?: Maybe<GraphChatInput>;
};

export type MutationDeletechatsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdatechatsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphChatUpdateInput>;
};

export type MutationTeamsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationTeamsByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateteamsArgs = {
  input?: Maybe<GraphTeamInput>;
};

export type MutationDeleteteamsByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateteamsByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphTeamUpdateInput>;
};

export type MutationTeamsTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type MutationTeamsTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationCreateteamsTemplatesArgs = {
  input?: Maybe<GraphTeamsTemplateInput>;
};

export type MutationDeleteteamsTemplatesByidArgs = {
  id: Scalars['String'];
};

export type MutationUpdateteamsTemplatesByidArgs = {
  id: Scalars['String'];
  input?: Maybe<GraphTeamsTemplateUpdateInput>;
};

export type Query = {
  __typename?: 'Query';
  auditLogs?: Maybe<GraphAuditLogRoot>;
  authenticationMethodsPolicy?: Maybe<GraphAuthenticationMethodsPolicy>;
  identity?: Maybe<GraphIdentityContainer>;
  branding?: Maybe<GraphOrganizationalBranding>;
  directory?: Maybe<GraphDirectory>;
  me?: Maybe<GraphUser>;
  policies?: Maybe<GraphPolicyRoot>;
  education?: Maybe<GraphEducationRoot>;
  roleManagement?: Maybe<GraphRoleManagement>;
  drive?: Maybe<GraphDrive>;
  communications?: Maybe<GraphCloudCommunications>;
  identityGovernance?: Maybe<GraphIdentityGovernance>;
  deviceAppManagement?: Maybe<GraphDeviceAppManagement>;
  deviceManagement?: Maybe<GraphDeviceManagement>;
  reports?: Maybe<GraphReportRoot>;
  search?: Maybe<GraphSearchEntity>;
  planner?: Maybe<GraphPlanner>;
  print?: Maybe<GraphPrint>;
  security?: Maybe<GraphSecurity>;
  appCatalogs?: Maybe<GraphAppCatalogs>;
  teamwork?: Maybe<GraphTeamwork>;
  informationProtection?: Maybe<GraphInformationProtection>;
  invitations?: Maybe<Array<Maybe<GraphInvitation>>>;
  invitationsByid?: Maybe<GraphInvitation>;
  invitationsCount?: Maybe<Scalars['Int']>;
  users?: Maybe<Array<Maybe<GraphUser>>>;
  usersByid?: Maybe<GraphUser>;
  usersCount?: Maybe<Scalars['Int']>;
  applicationTemplates?: Maybe<Array<Maybe<GraphApplicationTemplate>>>;
  applicationTemplatesByid?: Maybe<GraphApplicationTemplate>;
  applicationTemplatesCount?: Maybe<Scalars['Int']>;
  authenticationMethodConfigurations?: Maybe<Array<Maybe<GraphAuthenticationMethodConfiguration>>>;
  authenticationMethodConfigurationsByid?: Maybe<GraphAuthenticationMethodConfiguration>;
  authenticationMethodConfigurationsCount?: Maybe<Scalars['Int']>;
  identityProviders?: Maybe<Array<Maybe<GraphIdentityProvider>>>;
  identityProvidersByid?: Maybe<GraphIdentityProvider>;
  identityProvidersCount?: Maybe<Scalars['Int']>;
  applications?: Maybe<Array<Maybe<GraphApplication>>>;
  applicationsByid?: Maybe<GraphApplication>;
  applicationsCount?: Maybe<Scalars['Int']>;
  certificateBasedAuthConfiguration?: Maybe<Array<Maybe<GraphCertificateBasedAuthConfiguration>>>;
  certificateBasedAuthConfigurationByid?: Maybe<GraphCertificateBasedAuthConfiguration>;
  certificateBasedAuthConfigurationCount?: Maybe<Scalars['Int']>;
  contacts?: Maybe<Array<Maybe<GraphOrgContact>>>;
  contactsByid?: Maybe<GraphOrgContact>;
  contactsCount?: Maybe<Scalars['Int']>;
  contracts?: Maybe<Array<Maybe<GraphContract>>>;
  contractsByid?: Maybe<GraphContract>;
  contractsCount?: Maybe<Scalars['Int']>;
  devices?: Maybe<Array<Maybe<GraphDevice>>>;
  devicesByid?: Maybe<GraphDevice>;
  devicesCount?: Maybe<Scalars['Int']>;
  directoryObjects?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
  directoryObjectsByid?: Maybe<GraphDirectoryObject>;
  directoryObjectsCount?: Maybe<Scalars['Int']>;
  directoryRoles?: Maybe<Array<Maybe<GraphDirectoryRole>>>;
  directoryRolesByid?: Maybe<GraphDirectoryRole>;
  directoryRolesCount?: Maybe<Scalars['Int']>;
  directoryRoleTemplates?: Maybe<Array<Maybe<GraphDirectoryRoleTemplate>>>;
  directoryRoleTemplatesByid?: Maybe<GraphDirectoryRoleTemplate>;
  directoryRoleTemplatesCount?: Maybe<Scalars['Int']>;
  domainDnsRecords?: Maybe<Array<Maybe<GraphDomainDnsRecord>>>;
  domainDnsRecordsByid?: Maybe<GraphDomainDnsRecord>;
  domainDnsRecordsCount?: Maybe<Scalars['Int']>;
  domains?: Maybe<Array<Maybe<GraphDomain>>>;
  domainsByid?: Maybe<GraphDomain>;
  domainsCount?: Maybe<Scalars['Int']>;
  groups?: Maybe<Array<Maybe<GraphGroup>>>;
  groupsByid?: Maybe<GraphGroup>;
  groupsCount?: Maybe<Scalars['Int']>;
  groupSettings?: Maybe<Array<Maybe<GraphGroupSetting>>>;
  groupSettingsByid?: Maybe<GraphGroupSetting>;
  groupSettingsCount?: Maybe<Scalars['Int']>;
  groupSettingTemplates?: Maybe<Array<Maybe<GraphGroupSettingTemplate>>>;
  groupSettingTemplatesByid?: Maybe<GraphGroupSettingTemplate>;
  groupSettingTemplatesCount?: Maybe<Scalars['Int']>;
  localizations?: Maybe<Array<Maybe<GraphOrganizationalBrandingLocalization>>>;
  localizationsByid?: Maybe<GraphOrganizationalBrandingLocalization>;
  localizationsCount?: Maybe<Scalars['Int']>;
  oauth2PermissionGrants?: Maybe<Array<Maybe<GraphOAuth2PermissionGrant>>>;
  oauth2PermissionGrantsByid?: Maybe<GraphOAuth2PermissionGrant>;
  oauth2PermissionGrantsCount?: Maybe<Scalars['Int']>;
  organization?: Maybe<Array<Maybe<GraphOrganization>>>;
  organizationByid?: Maybe<GraphOrganization>;
  organizationCount?: Maybe<Scalars['Int']>;
  permissionGrants?: Maybe<Array<Maybe<GraphResourceSpecificPermissionGrant>>>;
  permissionGrantsByid?: Maybe<GraphResourceSpecificPermissionGrant>;
  permissionGrantsCount?: Maybe<Scalars['Int']>;
  scopedRoleMemberships?: Maybe<Array<Maybe<GraphScopedRoleMembership>>>;
  scopedRoleMembershipsByid?: Maybe<GraphScopedRoleMembership>;
  scopedRoleMembershipsCount?: Maybe<Scalars['Int']>;
  servicePrincipals?: Maybe<Array<Maybe<GraphServicePrincipal>>>;
  servicePrincipalsByid?: Maybe<GraphServicePrincipal>;
  servicePrincipalsCount?: Maybe<Scalars['Int']>;
  subscribedSkus?: Maybe<Array<Maybe<GraphSubscribedSku>>>;
  subscribedSkusByid?: Maybe<GraphSubscribedSku>;
  subscribedSkusCount?: Maybe<Scalars['Int']>;
  workbooks?: Maybe<Array<Maybe<GraphDriveItem>>>;
  workbooksByid?: Maybe<GraphDriveItem>;
  workbooksCount?: Maybe<Scalars['Int']>;
  places?: Maybe<Array<Maybe<GraphPlace>>>;
  placesByid?: Maybe<GraphPlace>;
  placesCount?: Maybe<Scalars['Int']>;
  drives?: Maybe<Array<Maybe<GraphDrive>>>;
  drivesByid?: Maybe<GraphDrive>;
  drivesCount?: Maybe<Scalars['Int']>;
  shares?: Maybe<Array<Maybe<GraphSharedDriveItem>>>;
  sharesByid?: Maybe<GraphSharedDriveItem>;
  sharesCount?: Maybe<Scalars['Int']>;
  sites?: Maybe<Array<Maybe<GraphSite>>>;
  sitesByid?: Maybe<GraphSite>;
  sitesCount?: Maybe<Scalars['Int']>;
  schemaExtensions?: Maybe<Array<Maybe<GraphSchemaExtension>>>;
  schemaExtensionsByid?: Maybe<GraphSchemaExtension>;
  schemaExtensionsCount?: Maybe<Scalars['Int']>;
  groupLifecyclePolicies?: Maybe<Array<Maybe<GraphGroupLifecyclePolicy>>>;
  groupLifecyclePoliciesByid?: Maybe<GraphGroupLifecyclePolicy>;
  groupLifecyclePoliciesCount?: Maybe<Scalars['Int']>;
  agreementAcceptances?: Maybe<Array<Maybe<GraphAgreementAcceptance>>>;
  agreementAcceptancesByid?: Maybe<GraphAgreementAcceptance>;
  agreementAcceptancesCount?: Maybe<Scalars['Int']>;
  agreements?: Maybe<Array<Maybe<GraphAgreement>>>;
  agreementsByid?: Maybe<GraphAgreement>;
  agreementsCount?: Maybe<Scalars['Int']>;
  dataPolicyOperations?: Maybe<Array<Maybe<GraphDataPolicyOperation>>>;
  dataPolicyOperationsByid?: Maybe<GraphDataPolicyOperation>;
  dataPolicyOperationsCount?: Maybe<Scalars['Int']>;
  subscriptions?: Maybe<Array<Maybe<GraphSubscription>>>;
  subscriptionsByid?: Maybe<GraphSubscription>;
  subscriptionsCount?: Maybe<Scalars['Int']>;
  chats?: Maybe<Array<Maybe<GraphChat>>>;
  chatsByid?: Maybe<GraphChat>;
  chatsCount?: Maybe<Scalars['Int']>;
  teams?: Maybe<Array<Maybe<GraphTeam>>>;
  teamsByid?: Maybe<GraphTeam>;
  teamsCount?: Maybe<Scalars['Int']>;
  teamsTemplates?: Maybe<Array<Maybe<GraphTeamsTemplate>>>;
  teamsTemplatesByid?: Maybe<GraphTeamsTemplate>;
  teamsTemplatesCount?: Maybe<Scalars['Int']>;
};

export type QueryInvitationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryInvitationsByidArgs = {
  id: Scalars['String'];
};

export type QueryInvitationsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryUsersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryUsersByidArgs = {
  id: Scalars['String'];
};

export type QueryUsersCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryApplicationTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryApplicationTemplatesByidArgs = {
  id: Scalars['String'];
};

export type QueryApplicationTemplatesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryAuthenticationMethodConfigurationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryAuthenticationMethodConfigurationsByidArgs = {
  id: Scalars['String'];
};

export type QueryAuthenticationMethodConfigurationsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryIdentityProvidersArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryIdentityProvidersByidArgs = {
  id: Scalars['String'];
};

export type QueryIdentityProvidersCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryApplicationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryApplicationsByidArgs = {
  id: Scalars['String'];
};

export type QueryApplicationsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryCertificateBasedAuthConfigurationArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryCertificateBasedAuthConfigurationByidArgs = {
  id: Scalars['String'];
};

export type QueryCertificateBasedAuthConfigurationCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryContactsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryContactsByidArgs = {
  id: Scalars['String'];
};

export type QueryContactsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryContractsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryContractsByidArgs = {
  id: Scalars['String'];
};

export type QueryContractsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDevicesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDevicesByidArgs = {
  id: Scalars['String'];
};

export type QueryDevicesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDirectoryObjectsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDirectoryObjectsByidArgs = {
  id: Scalars['String'];
};

export type QueryDirectoryObjectsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDirectoryRolesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDirectoryRolesByidArgs = {
  id: Scalars['String'];
};

export type QueryDirectoryRolesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDirectoryRoleTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDirectoryRoleTemplatesByidArgs = {
  id: Scalars['String'];
};

export type QueryDirectoryRoleTemplatesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDomainDnsRecordsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDomainDnsRecordsByidArgs = {
  id: Scalars['String'];
};

export type QueryDomainDnsRecordsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDomainsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDomainsByidArgs = {
  id: Scalars['String'];
};

export type QueryDomainsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupsByidArgs = {
  id: Scalars['String'];
};

export type QueryGroupsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupSettingsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupSettingsByidArgs = {
  id: Scalars['String'];
};

export type QueryGroupSettingsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupSettingTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupSettingTemplatesByidArgs = {
  id: Scalars['String'];
};

export type QueryGroupSettingTemplatesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryLocalizationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryLocalizationsByidArgs = {
  id: Scalars['String'];
};

export type QueryLocalizationsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryOauth2PermissionGrantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryOauth2PermissionGrantsByidArgs = {
  id: Scalars['String'];
};

export type QueryOauth2PermissionGrantsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryOrganizationArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryOrganizationByidArgs = {
  id: Scalars['String'];
};

export type QueryOrganizationCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryPermissionGrantsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryPermissionGrantsByidArgs = {
  id: Scalars['String'];
};

export type QueryPermissionGrantsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryScopedRoleMembershipsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryScopedRoleMembershipsByidArgs = {
  id: Scalars['String'];
};

export type QueryScopedRoleMembershipsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryServicePrincipalsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryServicePrincipalsByidArgs = {
  id: Scalars['String'];
};

export type QueryServicePrincipalsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySubscribedSkusArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySubscribedSkusByidArgs = {
  id: Scalars['String'];
};

export type QuerySubscribedSkusCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryWorkbooksArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryWorkbooksByidArgs = {
  id: Scalars['String'];
};

export type QueryWorkbooksCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryPlacesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryPlacesByidArgs = {
  id: Scalars['String'];
};

export type QueryPlacesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDrivesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDrivesByidArgs = {
  id: Scalars['String'];
};

export type QueryDrivesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySharesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySharesByidArgs = {
  id: Scalars['String'];
};

export type QuerySharesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySitesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySitesByidArgs = {
  id: Scalars['String'];
};

export type QuerySitesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySchemaExtensionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySchemaExtensionsByidArgs = {
  id: Scalars['String'];
};

export type QuerySchemaExtensionsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupLifecyclePoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryGroupLifecyclePoliciesByidArgs = {
  id: Scalars['String'];
};

export type QueryGroupLifecyclePoliciesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryAgreementAcceptancesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryAgreementAcceptancesByidArgs = {
  id: Scalars['String'];
};

export type QueryAgreementAcceptancesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryAgreementsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryAgreementsByidArgs = {
  id: Scalars['String'];
};

export type QueryAgreementsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDataPolicyOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryDataPolicyOperationsByidArgs = {
  id: Scalars['String'];
};

export type QueryDataPolicyOperationsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySubscriptionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QuerySubscriptionsByidArgs = {
  id: Scalars['String'];
};

export type QuerySubscriptionsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryChatsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryChatsByidArgs = {
  id: Scalars['String'];
};

export type QueryChatsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryTeamsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryTeamsByidArgs = {
  id: Scalars['String'];
};

export type QueryTeamsCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryTeamsTemplatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryTeamsTemplatesByidArgs = {
  id: Scalars['String'];
};

export type QueryTeamsTemplatesCountArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type QueryOptions = {
  /** A data service URI with a $orderby System Query Option specifies an expression for determining what values are used to order the collection of Entries identified by the Resource Path section of the URI. This query option is only supported when the resource path identifies a Collection of Entries. */
  orderby?: Maybe<Scalars['String']>;
  /** A data service URI with a $top System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. This subset is formed by selecting only the first N items of the set, where N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed. */
  top?: Maybe<Scalars['Int']>;
  /** A data service URI with a $skip System Query Option identifies a subset of the Entries in the Collection of Entries identified by the Resource Path section of the URI. That subset is defined by seeking N Entries into the Collection and selecting only the remaining Entries (starting with Entry N+1). N is an integer greater than or equal to zero specified by this query option. If a value less than zero is specified, the URI should be considered malformed. */
  skip?: Maybe<Scalars['Int']>;
  /** A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. */
  filter?: Maybe<Scalars['String']>;
  /** A URI with a $inlinecount System Query Option specifies that the response to the request includes a count of the number of Entries in the Collection of Entries identified by the Resource Path section of the URI. The count must be calculated after applying any $filter System Query Options present in the URI. The set of valid values for the $inlinecount query option are shown in the table below. If a value other than one shown in Table 4 is specified the URI is considered malformed. */
  inlinecount?: Maybe<InlineCount>;
  count?: Maybe<Scalars['Boolean']>;
};

export type TGraphAccessReviewApplyAction = GraphAccessReviewApplyAction & {
  __typename?: 'TGraphAccessReviewApplyAction';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphApiAuthenticationConfigurationBase = GraphApiAuthenticationConfigurationBase & {
  __typename?: 'TGraphApiAuthenticationConfigurationBase';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphAppleDeviceFeaturesConfigurationBase = GraphAppleDeviceFeaturesConfigurationBase &
  GraphDeviceConfiguration & {
    __typename?: 'TGraphAppleDeviceFeaturesConfigurationBase';
    rest?: Maybe<Scalars['JSON']>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version: Scalars['Int'];
    assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
    assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
    deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
    deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
    deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
    deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
    deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
    userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
    userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
    userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphAppleDeviceFeaturesConfigurationBaseAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphAppleDeviceFeaturesConfigurationBaseAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type TGraphAttachment = GraphAttachment &
  GraphEntity & {
    __typename?: 'TGraphAttachment';
    contentType?: Maybe<Scalars['String']>;
    isInline: Scalars['Boolean'];
    lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
    name?: Maybe<Scalars['String']>;
    size: Scalars['Int'];
    createUploadSession?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphAttachmentCreateUploadSessionArgs = {
  bindingParameter?: Maybe<Array<Maybe<GraphAttachmentInput>>>;
  AttachmentItem: GraphAttachmentItemInput;
};

export type TGraphAuthenticationMethod = GraphAuthenticationMethod &
  GraphEntity & {
    __typename?: 'TGraphAuthenticationMethod';
    rest?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphAuthenticationMethodConfiguration = GraphAuthenticationMethodConfiguration &
  GraphEntity & {
    __typename?: 'TGraphAuthenticationMethodConfiguration';
    state?: Maybe<GraphAuthenticationMethodState>;
    id: Scalars['String'];
  };

export type TGraphBaseItem = GraphBaseItem &
  GraphEntity & {
    __typename?: 'TGraphBaseItem';
    createdBy?: Maybe<GraphIdentitySet>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    eTag?: Maybe<Scalars['String']>;
    lastModifiedBy?: Maybe<GraphIdentitySet>;
    lastModifiedDateTime: Scalars['DateTime'];
    name?: Maybe<Scalars['String']>;
    parentReference?: Maybe<GraphItemReference>;
    webUrl?: Maybe<Scalars['String']>;
    createdByUser?: Maybe<GraphUser>;
    lastModifiedByUser?: Maybe<GraphUser>;
    id: Scalars['String'];
  };

export type TGraphBaseItemVersion = GraphBaseItemVersion &
  GraphEntity & {
    __typename?: 'TGraphBaseItemVersion';
    lastModifiedBy?: Maybe<GraphIdentitySet>;
    lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
    publication?: Maybe<GraphPublicationFacet>;
    id: Scalars['String'];
  };

export type TGraphCallOptions = GraphCallOptions & {
  __typename?: 'TGraphCallOptions';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphChangeTrackedEntity = GraphChangeTrackedEntity &
  GraphEntity & {
    __typename?: 'TGraphChangeTrackedEntity';
    createdDateTime?: Maybe<Scalars['DateTime']>;
    lastModifiedBy?: Maybe<GraphIdentitySet>;
    lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
    id: Scalars['String'];
  };

export type TGraphConditionalAccessSessionControl = GraphConditionalAccessSessionControl & {
  __typename?: 'TGraphConditionalAccessSessionControl';
  isEnabled?: Maybe<Scalars['Boolean']>;
};

export type TGraphConversationMember = GraphConversationMember &
  GraphEntity & {
    __typename?: 'TGraphConversationMember';
    displayName?: Maybe<Scalars['String']>;
    roles?: Maybe<Array<Maybe<Scalars['String']>>>;
    visibleHistoryStartDateTime?: Maybe<Scalars['DateTime']>;
    id: Scalars['String'];
  };

export type TGraphDeviceAndAppManagementAssignmentTarget = GraphDeviceAndAppManagementAssignmentTarget & {
  __typename?: 'TGraphDeviceAndAppManagementAssignmentTarget';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphDeviceCompliancePolicy = GraphDeviceCompliancePolicy &
  GraphEntity & {
    __typename?: 'TGraphDeviceCompliancePolicy';
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version: Scalars['Int'];
    assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignment>>>;
    assignmentsById?: Maybe<GraphDeviceCompliancePolicyAssignment>;
    deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
    deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
    deviceStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceDeviceStatus>>>;
    deviceStatusesById?: Maybe<GraphDeviceComplianceDeviceStatus>;
    deviceStatusOverview?: Maybe<GraphDeviceComplianceDeviceOverview>;
    scheduledActionsForRule?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRule>>>;
    scheduledActionsForRuleById?: Maybe<GraphDeviceComplianceScheduledActionForRule>;
    userStatuses?: Maybe<Array<Maybe<GraphDeviceComplianceUserStatus>>>;
    userStatusesById?: Maybe<GraphDeviceComplianceUserStatus>;
    userStatusOverview?: Maybe<GraphDeviceComplianceUserOverview>;
    assign?: Maybe<Scalars['JSON']>;
    scheduleActionsForRules?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphDeviceCompliancePolicyAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceCompliancePolicyAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceCompliancePolicyDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceCompliancePolicyDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceCompliancePolicyDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceCompliancePolicyDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceCompliancePolicyScheduledActionsForRuleArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceCompliancePolicyScheduledActionsForRuleByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceCompliancePolicyUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceCompliancePolicyUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceCompliancePolicyAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceCompliancePolicyAssignmentInput>>>;
};

export type TGraphDeviceCompliancePolicyScheduleActionsForRulesArgs = {
  bindingParameter?: Maybe<GraphDeviceCompliancePolicyInput>;
  deviceComplianceScheduledActionForRules?: Maybe<Array<Maybe<GraphDeviceComplianceScheduledActionForRuleInput>>>;
};

export type TGraphDeviceConfiguration = GraphDeviceConfiguration &
  GraphEntity & {
    __typename?: 'TGraphDeviceConfiguration';
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version: Scalars['Int'];
    assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
    assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
    deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
    deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
    deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
    deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
    deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
    userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
    userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
    userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphDeviceConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceConfigurationDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceConfigurationDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type TGraphDeviceEnrollmentConfiguration = GraphDeviceEnrollmentConfiguration &
  GraphEntity & {
    __typename?: 'TGraphDeviceEnrollmentConfiguration';
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    lastModifiedDateTime: Scalars['DateTime'];
    priority: Scalars['Int'];
    version: Scalars['Int'];
    assignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignment>>>;
    assignmentsById?: Maybe<GraphEnrollmentConfigurationAssignment>;
    assign?: Maybe<Scalars['JSON']>;
    setPriority?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphDeviceEnrollmentConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphDeviceEnrollmentConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphDeviceEnrollmentConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  enrollmentConfigurationAssignments?: Maybe<Array<Maybe<GraphEnrollmentConfigurationAssignmentInput>>>;
};

export type TGraphDeviceEnrollmentConfigurationSetPriorityArgs = {
  bindingParameter?: Maybe<GraphDeviceEnrollmentConfigurationInput>;
  priority: Scalars['Int'];
};

export type TGraphEdgeSearchEngineBase = GraphEdgeSearchEngineBase & {
  __typename?: 'TGraphEdgeSearchEngineBase';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphEducationOrganization = GraphEducationOrganization &
  GraphEntity & {
    __typename?: 'TGraphEducationOrganization';
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    externalSource?: Maybe<GraphEducationExternalSource>;
    externalSourceDetail?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphEntity = GraphEntity & {
  __typename?: 'TGraphEntity';
  id: Scalars['String'];
};

export type TGraphExtension = GraphExtension &
  GraphEntity & {
    __typename?: 'TGraphExtension';
    rest?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphIdentityProviderBase = GraphIdentityProviderBase &
  GraphEntity & {
    __typename?: 'TGraphIdentityProviderBase';
    displayName?: Maybe<Scalars['String']>;
    availableProviderTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
    id: Scalars['String'];
  };

export type TGraphIosCertificateProfile = GraphIosCertificateProfile &
  GraphDeviceConfiguration & {
    __typename?: 'TGraphIosCertificateProfile';
    rest?: Maybe<Scalars['JSON']>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version: Scalars['Int'];
    assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignment>>>;
    assignmentsById?: Maybe<GraphDeviceConfigurationAssignment>;
    deviceSettingStateSummaries?: Maybe<Array<Maybe<GraphSettingStateDeviceSummary>>>;
    deviceSettingStateSummariesById?: Maybe<GraphSettingStateDeviceSummary>;
    deviceStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationDeviceStatus>>>;
    deviceStatusesById?: Maybe<GraphDeviceConfigurationDeviceStatus>;
    deviceStatusOverview?: Maybe<GraphDeviceConfigurationDeviceOverview>;
    userStatuses?: Maybe<Array<Maybe<GraphDeviceConfigurationUserStatus>>>;
    userStatusesById?: Maybe<GraphDeviceConfigurationUserStatus>;
    userStatusOverview?: Maybe<GraphDeviceConfigurationUserOverview>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphIosCertificateProfileAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphIosCertificateProfileAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphIosCertificateProfileDeviceSettingStateSummariesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphIosCertificateProfileDeviceSettingStateSummariesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphIosCertificateProfileDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphIosCertificateProfileDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphIosCertificateProfileUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphIosCertificateProfileUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphIosCertificateProfileAssignArgs = {
  bindingParameter?: Maybe<GraphDeviceConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphDeviceConfigurationAssignmentInput>>>;
};

export type TGraphIosHomeScreenItem = GraphIosHomeScreenItem & {
  __typename?: 'TGraphIosHomeScreenItem';
  displayName?: Maybe<Scalars['String']>;
};

export type TGraphIpRange = GraphIpRange & {
  __typename?: 'TGraphIpRange';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphManagedApp = GraphManagedApp &
  GraphMobileApp & {
    __typename?: 'TGraphManagedApp';
    appAvailability: GraphManagedAppAvailability;
    version?: Maybe<Scalars['String']>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    developer?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    informationUrl?: Maybe<Scalars['String']>;
    isFeatured: Scalars['Boolean'];
    largeIcon?: Maybe<GraphMimeContent>;
    lastModifiedDateTime: Scalars['DateTime'];
    notes?: Maybe<Scalars['String']>;
    owner?: Maybe<Scalars['String']>;
    privacyInformationUrl?: Maybe<Scalars['String']>;
    publisher?: Maybe<Scalars['String']>;
    publishingState: GraphMobileAppPublishingState;
    assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
    assignmentsById?: Maybe<GraphMobileAppAssignment>;
    categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
    categoriesById?: Maybe<GraphMobileAppCategory>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphManagedAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type TGraphManagedAppConfiguration = GraphManagedAppConfiguration &
  GraphManagedAppPolicy & {
    __typename?: 'TGraphManagedAppConfiguration';
    customSettings: Array<Maybe<GraphKeyValuePair>>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version?: Maybe<Scalars['String']>;
    targetApps?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphManagedAppConfigurationTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type TGraphManagedAppPolicy = GraphManagedAppPolicy &
  GraphEntity & {
    __typename?: 'TGraphManagedAppPolicy';
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version?: Maybe<Scalars['String']>;
    targetApps?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphManagedAppPolicyTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type TGraphManagedAppProtection = GraphManagedAppProtection &
  GraphManagedAppPolicy & {
    __typename?: 'TGraphManagedAppProtection';
    allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
    allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
    allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
    allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
    contactSyncBlocked: Scalars['Boolean'];
    dataBackupBlocked: Scalars['Boolean'];
    deviceComplianceRequired: Scalars['Boolean'];
    disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
    fingerprintBlocked: Scalars['Boolean'];
    managedBrowser: GraphManagedBrowserType;
    managedBrowserToOpenLinksRequired: Scalars['Boolean'];
    maximumPinRetries: Scalars['Int'];
    minimumPinLength: Scalars['Int'];
    minimumRequiredAppVersion?: Maybe<Scalars['String']>;
    minimumRequiredOsVersion?: Maybe<Scalars['String']>;
    minimumWarningAppVersion?: Maybe<Scalars['String']>;
    minimumWarningOsVersion?: Maybe<Scalars['String']>;
    organizationalCredentialsRequired: Scalars['Boolean'];
    periodBeforePinReset: Scalars['ISO8601Duration'];
    periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
    periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
    periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
    pinCharacterSet: GraphManagedAppPinCharacterSet;
    pinRequired: Scalars['Boolean'];
    printBlocked: Scalars['Boolean'];
    saveAsBlocked: Scalars['Boolean'];
    simplePinBlocked: Scalars['Boolean'];
    targetApps?: Maybe<Scalars['JSON']>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphManagedAppProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type TGraphManagedAppRegistration = GraphManagedAppRegistration &
  GraphEntity & {
    __typename?: 'TGraphManagedAppRegistration';
    appIdentifier?: Maybe<GraphMobileAppIdentifier>;
    applicationVersion?: Maybe<Scalars['String']>;
    createdDateTime: Scalars['DateTime'];
    deviceName?: Maybe<Scalars['String']>;
    deviceTag?: Maybe<Scalars['String']>;
    deviceType?: Maybe<Scalars['String']>;
    flaggedReasons: Array<Maybe<GraphManagedAppFlaggedReason>>;
    lastSyncDateTime: Scalars['DateTime'];
    managementSdkVersion?: Maybe<Scalars['String']>;
    platformVersion?: Maybe<Scalars['String']>;
    userId?: Maybe<Scalars['String']>;
    version?: Maybe<Scalars['String']>;
    appliedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
    appliedPoliciesById?: Maybe<GraphManagedAppPolicy>;
    intendedPolicies?: Maybe<Array<Maybe<GraphManagedAppPolicy>>>;
    intendedPoliciesById?: Maybe<GraphManagedAppPolicy>;
    operations?: Maybe<Array<Maybe<GraphManagedAppOperation>>>;
    operationsById?: Maybe<GraphManagedAppOperation>;
    getUserIdsWithFlaggedAppRegistration?: Maybe<Array<Maybe<Scalars['String']>>>;
    id: Scalars['String'];
  };

export type TGraphManagedAppRegistrationAppliedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedAppRegistrationAppliedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedAppRegistrationIntendedPoliciesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedAppRegistrationIntendedPoliciesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedAppRegistrationOperationsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedAppRegistrationOperationsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedAppStatus = GraphManagedAppStatus &
  GraphEntity & {
    __typename?: 'TGraphManagedAppStatus';
    displayName?: Maybe<Scalars['String']>;
    version?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphManagedDeviceMobileAppConfiguration = GraphManagedDeviceMobileAppConfiguration &
  GraphEntity & {
    __typename?: 'TGraphManagedDeviceMobileAppConfiguration';
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    targetedMobileApps?: Maybe<Array<Maybe<Scalars['String']>>>;
    version: Scalars['Int'];
    assignments?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationAssignment>>>;
    assignmentsById?: Maybe<GraphManagedDeviceMobileAppConfigurationAssignment>;
    deviceStatuses?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationDeviceStatus>>>;
    deviceStatusesById?: Maybe<GraphManagedDeviceMobileAppConfigurationDeviceStatus>;
    deviceStatusSummary?: Maybe<GraphManagedDeviceMobileAppConfigurationDeviceSummary>;
    userStatuses?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationUserStatus>>>;
    userStatusesById?: Maybe<GraphManagedDeviceMobileAppConfigurationUserStatus>;
    userStatusSummary?: Maybe<GraphManagedDeviceMobileAppConfigurationUserSummary>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphManagedDeviceMobileAppConfigurationAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedDeviceMobileAppConfigurationAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedDeviceMobileAppConfigurationDeviceStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedDeviceMobileAppConfigurationDeviceStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedDeviceMobileAppConfigurationUserStatusesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedDeviceMobileAppConfigurationUserStatusesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedDeviceMobileAppConfigurationAssignArgs = {
  bindingParameter?: Maybe<GraphManagedDeviceMobileAppConfigurationInput>;
  assignments?: Maybe<Array<Maybe<GraphManagedDeviceMobileAppConfigurationAssignmentInput>>>;
};

export type TGraphManagedEBook = GraphManagedEBook &
  GraphEntity & {
    __typename?: 'TGraphManagedEBook';
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    informationUrl?: Maybe<Scalars['String']>;
    largeCover?: Maybe<GraphMimeContent>;
    lastModifiedDateTime: Scalars['DateTime'];
    privacyInformationUrl?: Maybe<Scalars['String']>;
    publishedDateTime: Scalars['DateTime'];
    publisher?: Maybe<Scalars['String']>;
    assignments?: Maybe<Array<Maybe<GraphManagedEBookAssignment>>>;
    assignmentsById?: Maybe<GraphManagedEBookAssignment>;
    deviceStates?: Maybe<Array<Maybe<GraphDeviceInstallState>>>;
    deviceStatesById?: Maybe<GraphDeviceInstallState>;
    installSummary?: Maybe<GraphEBookInstallSummary>;
    userStateSummary?: Maybe<Array<Maybe<GraphUserInstallStateSummary>>>;
    userStateSummaryById?: Maybe<GraphUserInstallStateSummary>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphManagedEBookAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedEBookAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedEBookDeviceStatesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedEBookDeviceStatesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedEBookUserStateSummaryArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedEBookUserStateSummaryByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedEBookAssignArgs = {
  bindingParameter?: Maybe<GraphManagedEBookInput>;
  managedEBookAssignments?: Maybe<Array<Maybe<GraphManagedEBookAssignmentInput>>>;
};

export type TGraphManagedMobileLobApp = GraphManagedMobileLobApp &
  GraphManagedApp & {
    __typename?: 'TGraphManagedMobileLobApp';
    committedContentVersion?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    size: Scalars['BigInt'];
    contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
    contentVersionsById?: Maybe<GraphMobileAppContent>;
    appAvailability: GraphManagedAppAvailability;
    version?: Maybe<Scalars['String']>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    developer?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    informationUrl?: Maybe<Scalars['String']>;
    isFeatured: Scalars['Boolean'];
    largeIcon?: Maybe<GraphMimeContent>;
    lastModifiedDateTime: Scalars['DateTime'];
    notes?: Maybe<Scalars['String']>;
    owner?: Maybe<Scalars['String']>;
    privacyInformationUrl?: Maybe<Scalars['String']>;
    publisher?: Maybe<Scalars['String']>;
    publishingState: GraphMobileAppPublishingState;
    assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
    assignmentsById?: Maybe<GraphMobileAppAssignment>;
    categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
    categoriesById?: Maybe<GraphMobileAppCategory>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphManagedMobileLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedMobileLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedMobileLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedMobileLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedMobileLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphManagedMobileLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphManagedMobileLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type TGraphMediaConfig = GraphMediaConfig & {
  __typename?: 'TGraphMediaConfig';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphMeetingInfo = GraphMeetingInfo & {
  __typename?: 'TGraphMeetingInfo';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphMobileApp = GraphMobileApp &
  GraphEntity & {
    __typename?: 'TGraphMobileApp';
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    developer?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    informationUrl?: Maybe<Scalars['String']>;
    isFeatured: Scalars['Boolean'];
    largeIcon?: Maybe<GraphMimeContent>;
    lastModifiedDateTime: Scalars['DateTime'];
    notes?: Maybe<Scalars['String']>;
    owner?: Maybe<Scalars['String']>;
    privacyInformationUrl?: Maybe<Scalars['String']>;
    publisher?: Maybe<Scalars['String']>;
    publishingState: GraphMobileAppPublishingState;
    assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
    assignmentsById?: Maybe<GraphMobileAppAssignment>;
    categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
    categoriesById?: Maybe<GraphMobileAppCategory>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphMobileAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphMobileAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphMobileAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphMobileAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphMobileAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type TGraphMobileAppAssignmentSettings = GraphMobileAppAssignmentSettings & {
  __typename?: 'TGraphMobileAppAssignmentSettings';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphMobileAppIdentifier = GraphMobileAppIdentifier & {
  __typename?: 'TGraphMobileAppIdentifier';
  rest?: Maybe<Scalars['JSON']>;
};

export type TGraphMobileLobApp = GraphMobileLobApp &
  GraphMobileApp & {
    __typename?: 'TGraphMobileLobApp';
    committedContentVersion?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    size: Scalars['BigInt'];
    contentVersions?: Maybe<Array<Maybe<GraphMobileAppContent>>>;
    contentVersionsById?: Maybe<GraphMobileAppContent>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    developer?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    informationUrl?: Maybe<Scalars['String']>;
    isFeatured: Scalars['Boolean'];
    largeIcon?: Maybe<GraphMimeContent>;
    lastModifiedDateTime: Scalars['DateTime'];
    notes?: Maybe<Scalars['String']>;
    owner?: Maybe<Scalars['String']>;
    privacyInformationUrl?: Maybe<Scalars['String']>;
    publisher?: Maybe<Scalars['String']>;
    publishingState: GraphMobileAppPublishingState;
    assignments?: Maybe<Array<Maybe<GraphMobileAppAssignment>>>;
    assignmentsById?: Maybe<GraphMobileAppAssignment>;
    categories?: Maybe<Array<Maybe<GraphMobileAppCategory>>>;
    categoriesById?: Maybe<GraphMobileAppCategory>;
    assign?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphMobileLobAppContentVersionsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphMobileLobAppContentVersionsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphMobileLobAppAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphMobileLobAppAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphMobileLobAppCategoriesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphMobileLobAppCategoriesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphMobileLobAppAssignArgs = {
  bindingParameter?: Maybe<GraphMobileAppInput>;
  mobileAppAssignments?: Maybe<Array<Maybe<GraphMobileAppAssignmentInput>>>;
};

export type TGraphOmaSetting = GraphOmaSetting & {
  __typename?: 'TGraphOmaSetting';
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  omaUri: Scalars['String'];
};

export type TGraphOnenoteEntityBaseModel = GraphOnenoteEntityBaseModel &
  GraphEntity & {
    __typename?: 'TGraphOnenoteEntityBaseModel';
    self?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphOnenoteEntityHierarchyModel = GraphOnenoteEntityHierarchyModel &
  GraphOnenoteEntitySchemaObjectModel & {
    __typename?: 'TGraphOnenoteEntityHierarchyModel';
    createdBy?: Maybe<GraphIdentitySet>;
    displayName?: Maybe<Scalars['String']>;
    lastModifiedBy?: Maybe<GraphIdentitySet>;
    lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
    createdDateTime?: Maybe<Scalars['DateTime']>;
    self?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphOnenoteEntitySchemaObjectModel = GraphOnenoteEntitySchemaObjectModel &
  GraphOnenoteEntityBaseModel & {
    __typename?: 'TGraphOnenoteEntitySchemaObjectModel';
    createdDateTime?: Maybe<Scalars['DateTime']>;
    self?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphOpenShiftChangeRequest = GraphOpenShiftChangeRequest &
  GraphScheduleChangeRequest & {
    __typename?: 'TGraphOpenShiftChangeRequest';
    openShiftId?: Maybe<Scalars['String']>;
    assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
    managerActionDateTime?: Maybe<Scalars['DateTime']>;
    managerActionMessage?: Maybe<Scalars['String']>;
    managerUserId?: Maybe<Scalars['String']>;
    senderDateTime?: Maybe<Scalars['DateTime']>;
    senderMessage?: Maybe<Scalars['String']>;
    senderUserId?: Maybe<Scalars['String']>;
    state?: Maybe<GraphScheduleChangeState>;
    decline?: Maybe<Scalars['JSON']>;
    approve?: Maybe<Scalars['JSON']>;
    createdDateTime?: Maybe<Scalars['DateTime']>;
    lastModifiedBy?: Maybe<GraphIdentitySet>;
    lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
    id: Scalars['String'];
  };

export type TGraphOpenShiftChangeRequestDeclineArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type TGraphOpenShiftChangeRequestApproveArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type TGraphOrganizationalBrandingProperties = GraphOrganizationalBrandingProperties &
  GraphEntity & {
    __typename?: 'TGraphOrganizationalBrandingProperties';
    backgroundColor?: Maybe<Scalars['String']>;
    backgroundImage?: Maybe<Scalars['String']>;
    bannerLogo?: Maybe<Scalars['String']>;
    signInPageText?: Maybe<Scalars['String']>;
    squareLogo?: Maybe<Scalars['String']>;
    usernameHintText?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphOutlookItem = GraphOutlookItem &
  GraphEntity & {
    __typename?: 'TGraphOutlookItem';
    categories?: Maybe<Array<Maybe<Scalars['String']>>>;
    changeKey?: Maybe<Scalars['String']>;
    createdDateTime?: Maybe<Scalars['DateTime']>;
    lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
    id: Scalars['String'];
  };

export type TGraphPlace = GraphPlace &
  GraphEntity & {
    __typename?: 'TGraphPlace';
    address?: Maybe<GraphPhysicalAddress>;
    displayName: Scalars['String'];
    geoCoordinates?: Maybe<GraphOutlookGeoCoordinates>;
    phone?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphPolicyBase = GraphPolicyBase & {
  __typename?: 'TGraphPolicyBase';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  deletedDateTime?: Maybe<Scalars['DateTime']>;
  rest?: Maybe<Scalars['JSON']>;
  validateProperties?: Maybe<Scalars['JSON']>;
  checkMemberGroups?: Maybe<Scalars['JSON']>;
  checkMemberObjects?: Maybe<Scalars['JSON']>;
  getMemberGroups?: Maybe<Scalars['JSON']>;
  getMemberObjects?: Maybe<Scalars['JSON']>;
  restore?: Maybe<Scalars['JSON']>;
  getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
  getByIds?: Maybe<Scalars['JSON']>;
  id: Scalars['String'];
};

export type TGraphPolicyBaseValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type TGraphPolicyBaseCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type TGraphPolicyBaseCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type TGraphPolicyBaseGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type TGraphPolicyBaseGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type TGraphPolicyBaseRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type TGraphPolicyBaseGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type TGraphPolicyBaseGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TGraphPrintOperation = GraphPrintOperation &
  GraphEntity & {
    __typename?: 'TGraphPrintOperation';
    createdDateTime: Scalars['DateTime'];
    status: GraphPrintOperationStatus;
    id: Scalars['String'];
  };

export type TGraphPrintUsage = GraphPrintUsage &
  GraphEntity & {
    __typename?: 'TGraphPrintUsage';
    completedBlackAndWhiteJobCount: Scalars['BigInt'];
    completedColorJobCount: Scalars['BigInt'];
    incompleteJobCount: Scalars['BigInt'];
    usageDate: Scalars['Date'];
    id: Scalars['String'];
  };

export type TGraphPrinterBase = GraphPrinterBase &
  GraphEntity & {
    __typename?: 'TGraphPrinterBase';
    capabilities?: Maybe<GraphPrinterCapabilities>;
    defaults?: Maybe<GraphPrinterDefaults>;
    displayName: Scalars['String'];
    isAcceptingJobs?: Maybe<Scalars['Boolean']>;
    location?: Maybe<GraphPrinterLocation>;
    manufacturer?: Maybe<Scalars['String']>;
    model?: Maybe<Scalars['String']>;
    status: GraphPrinterStatus;
    jobs?: Maybe<Array<Maybe<GraphPrintJob>>>;
    jobsById?: Maybe<GraphPrintJob>;
    id: Scalars['String'];
  };

export type TGraphPrinterBaseJobsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphPrinterBaseJobsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphScheduleChangeRequest = GraphScheduleChangeRequest &
  GraphChangeTrackedEntity & {
    __typename?: 'TGraphScheduleChangeRequest';
    assignedTo?: Maybe<GraphScheduleChangeRequestActor>;
    managerActionDateTime?: Maybe<Scalars['DateTime']>;
    managerActionMessage?: Maybe<Scalars['String']>;
    managerUserId?: Maybe<Scalars['String']>;
    senderDateTime?: Maybe<Scalars['DateTime']>;
    senderMessage?: Maybe<Scalars['String']>;
    senderUserId?: Maybe<Scalars['String']>;
    state?: Maybe<GraphScheduleChangeState>;
    decline?: Maybe<Scalars['JSON']>;
    approve?: Maybe<Scalars['JSON']>;
    createdDateTime?: Maybe<Scalars['DateTime']>;
    lastModifiedBy?: Maybe<GraphIdentitySet>;
    lastModifiedDateTime?: Maybe<Scalars['DateTime']>;
    id: Scalars['String'];
  };

export type TGraphScheduleChangeRequestDeclineArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type TGraphScheduleChangeRequestApproveArgs = {
  bindingParameter?: Maybe<GraphScheduleChangeRequestInput>;
  message?: Maybe<Scalars['String']>;
};

export type TGraphStsPolicy = GraphStsPolicy &
  GraphPolicyBase & {
    __typename?: 'TGraphStsPolicy';
    definition: Array<Maybe<Scalars['String']>>;
    isOrganizationDefault?: Maybe<Scalars['Boolean']>;
    appliesTo?: Maybe<Array<Maybe<GraphDirectoryObject>>>;
    appliesToById?: Maybe<GraphDirectoryObject>;
    description?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    deletedDateTime?: Maybe<Scalars['DateTime']>;
    rest?: Maybe<Scalars['JSON']>;
    validateProperties?: Maybe<Scalars['JSON']>;
    checkMemberGroups?: Maybe<Scalars['JSON']>;
    checkMemberObjects?: Maybe<Scalars['JSON']>;
    getMemberGroups?: Maybe<Scalars['JSON']>;
    getMemberObjects?: Maybe<Scalars['JSON']>;
    restore?: Maybe<Scalars['JSON']>;
    getAvailableExtensionProperties?: Maybe<Scalars['JSON']>;
    getByIds?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphStsPolicyAppliesToArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphStsPolicyAppliesToByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphStsPolicyValidatePropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  entityType?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  mailNickname?: Maybe<Scalars['String']>;
  onBehalfOfUserId?: Maybe<Scalars['GUID']>;
};

export type TGraphStsPolicyCheckMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  groupIds: Array<Maybe<Scalars['String']>>;
};

export type TGraphStsPolicyCheckMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  ids: Array<Maybe<Scalars['String']>>;
};

export type TGraphStsPolicyGetMemberGroupsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type TGraphStsPolicyGetMemberObjectsArgs = {
  bindingParameter: GraphDirectoryObjectInput;
  securityEnabledOnly?: Maybe<Scalars['Boolean']>;
};

export type TGraphStsPolicyRestoreArgs = {
  bindingParameter: GraphDirectoryObjectInput;
};

export type TGraphStsPolicyGetAvailableExtensionPropertiesArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  isSyncedFromOnPremises?: Maybe<Scalars['Boolean']>;
};

export type TGraphStsPolicyGetByIdsArgs = {
  bindingParameter: Array<Maybe<GraphDirectoryObjectInput>>;
  ids: Array<Maybe<Scalars['String']>>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TGraphTargetedManagedAppProtection = GraphTargetedManagedAppProtection &
  GraphManagedAppProtection & {
    __typename?: 'TGraphTargetedManagedAppProtection';
    isAssigned: Scalars['Boolean'];
    assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
    assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
    assign?: Maybe<Scalars['JSON']>;
    allowedDataStorageLocations: Array<Maybe<GraphManagedAppDataStorageLocation>>;
    allowedInboundDataTransferSources: GraphManagedAppDataTransferLevel;
    allowedOutboundClipboardSharingLevel: GraphManagedAppClipboardSharingLevel;
    allowedOutboundDataTransferDestinations: GraphManagedAppDataTransferLevel;
    contactSyncBlocked: Scalars['Boolean'];
    dataBackupBlocked: Scalars['Boolean'];
    deviceComplianceRequired: Scalars['Boolean'];
    disableAppPinIfDevicePinIsSet: Scalars['Boolean'];
    fingerprintBlocked: Scalars['Boolean'];
    managedBrowser: GraphManagedBrowserType;
    managedBrowserToOpenLinksRequired: Scalars['Boolean'];
    maximumPinRetries: Scalars['Int'];
    minimumPinLength: Scalars['Int'];
    minimumRequiredAppVersion?: Maybe<Scalars['String']>;
    minimumRequiredOsVersion?: Maybe<Scalars['String']>;
    minimumWarningAppVersion?: Maybe<Scalars['String']>;
    minimumWarningOsVersion?: Maybe<Scalars['String']>;
    organizationalCredentialsRequired: Scalars['Boolean'];
    periodBeforePinReset: Scalars['ISO8601Duration'];
    periodOfflineBeforeAccessCheck: Scalars['ISO8601Duration'];
    periodOfflineBeforeWipeIsEnforced: Scalars['ISO8601Duration'];
    periodOnlineBeforeAccessCheck: Scalars['ISO8601Duration'];
    pinCharacterSet: GraphManagedAppPinCharacterSet;
    pinRequired: Scalars['Boolean'];
    printBlocked: Scalars['Boolean'];
    saveAsBlocked: Scalars['Boolean'];
    simplePinBlocked: Scalars['Boolean'];
    targetApps?: Maybe<Scalars['JSON']>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version?: Maybe<Scalars['String']>;
    id: Scalars['String'];
  };

export type TGraphTargetedManagedAppProtectionAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphTargetedManagedAppProtectionAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphTargetedManagedAppProtectionAssignArgs = {
  bindingParameter?: Maybe<GraphTargetedManagedAppProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type TGraphTargetedManagedAppProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type TGraphThreatAssessmentRequest = GraphThreatAssessmentRequest &
  GraphEntity & {
    __typename?: 'TGraphThreatAssessmentRequest';
    category: GraphThreatCategory;
    contentType?: Maybe<GraphThreatAssessmentContentType>;
    createdBy?: Maybe<GraphIdentitySet>;
    createdDateTime?: Maybe<Scalars['DateTime']>;
    expectedAssessment: GraphThreatExpectedAssessment;
    requestSource?: Maybe<GraphThreatAssessmentRequestSource>;
    status?: Maybe<GraphThreatAssessmentStatus>;
    results?: Maybe<Array<Maybe<GraphThreatAssessmentResult>>>;
    resultsById?: Maybe<GraphThreatAssessmentResult>;
    id: Scalars['String'];
  };

export type TGraphThreatAssessmentRequestResultsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphThreatAssessmentRequestResultsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphWin32LobAppRule = GraphWin32LobAppRule & {
  __typename?: 'TGraphWin32LobAppRule';
  ruleType: GraphWin32LobAppRuleType;
};

export type TGraphWindowsInformationProtection = GraphWindowsInformationProtection &
  GraphManagedAppPolicy & {
    __typename?: 'TGraphWindowsInformationProtection';
    azureRightsManagementServicesAllowed: Scalars['Boolean'];
    dataRecoveryCertificate?: Maybe<GraphWindowsInformationProtectionDataRecoveryCertificate>;
    enforcementLevel: GraphWindowsInformationProtectionEnforcementLevel;
    enterpriseDomain?: Maybe<Scalars['String']>;
    enterpriseInternalProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
    enterpriseIPRanges?: Maybe<Array<Maybe<GraphWindowsInformationProtectionIpRangeCollection>>>;
    enterpriseIPRangesAreAuthoritative: Scalars['Boolean'];
    enterpriseNetworkDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
    enterpriseProtectedDomainNames?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
    enterpriseProxiedDomains?: Maybe<Array<Maybe<GraphWindowsInformationProtectionProxiedDomainCollection>>>;
    enterpriseProxyServers?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
    enterpriseProxyServersAreAuthoritative: Scalars['Boolean'];
    exemptApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
    iconsVisible: Scalars['Boolean'];
    indexingEncryptedStoresOrItemsBlocked: Scalars['Boolean'];
    isAssigned: Scalars['Boolean'];
    neutralDomainResources?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
    protectedApps?: Maybe<Array<Maybe<GraphWindowsInformationProtectionApp>>>;
    protectionUnderLockConfigRequired: Scalars['Boolean'];
    revokeOnUnenrollDisabled: Scalars['Boolean'];
    rightsManagementServicesTemplateId?: Maybe<Scalars['GUID']>;
    smbAutoEncryptedFileExtensions?: Maybe<Array<Maybe<GraphWindowsInformationProtectionResourceCollection>>>;
    assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignment>>>;
    assignmentsById?: Maybe<GraphTargetedManagedAppPolicyAssignment>;
    exemptAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
    exemptAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
    protectedAppLockerFiles?: Maybe<Array<Maybe<GraphWindowsInformationProtectionAppLockerFile>>>;
    protectedAppLockerFilesById?: Maybe<GraphWindowsInformationProtectionAppLockerFile>;
    assign?: Maybe<Scalars['JSON']>;
    createdDateTime: Scalars['DateTime'];
    description?: Maybe<Scalars['String']>;
    displayName: Scalars['String'];
    lastModifiedDateTime: Scalars['DateTime'];
    version?: Maybe<Scalars['String']>;
    targetApps?: Maybe<Scalars['JSON']>;
    id: Scalars['String'];
  };

export type TGraphWindowsInformationProtectionAssignmentsArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphWindowsInformationProtectionAssignmentsByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphWindowsInformationProtectionExemptAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphWindowsInformationProtectionExemptAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphWindowsInformationProtectionProtectedAppLockerFilesArgs = {
  queryOptions?: Maybe<QueryOptions>;
};

export type TGraphWindowsInformationProtectionProtectedAppLockerFilesByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type TGraphWindowsInformationProtectionAssignArgs = {
  bindingParameter?: Maybe<GraphWindowsInformationProtectionInput>;
  assignments?: Maybe<Array<Maybe<GraphTargetedManagedAppPolicyAssignmentInput>>>;
};

export type TGraphWindowsInformationProtectionTargetAppsArgs = {
  bindingParameter?: Maybe<GraphManagedAppPolicyInput>;
  apps?: Maybe<Array<Maybe<GraphManagedMobileAppInput>>>;
};

export type TGraphWindowsInformationProtectionApp = GraphWindowsInformationProtectionApp & {
  __typename?: 'TGraphWindowsInformationProtectionApp';
  denied: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  displayName: Scalars['String'];
  productName?: Maybe<Scalars['String']>;
  publisherName?: Maybe<Scalars['String']>;
};

export type TGraphWindowsUpdateInstallScheduleType = GraphWindowsUpdateInstallScheduleType & {
  __typename?: 'TGraphWindowsUpdateInstallScheduleType';
  rest?: Maybe<Scalars['JSON']>;
};

export type TMicrosoftGraphCallRecordsUserAgent = MicrosoftGraphCallRecordsUserAgent & {
  __typename?: 'TMicrosoftGraphCallRecordsUserAgent';
  applicationVersion?: Maybe<Scalars['String']>;
  headerValue?: Maybe<Scalars['String']>;
};

export type FetchRecentEmailsQueryVariables = Exact<{ [key: string]: never }>;

export type FetchRecentEmailsQuery = { __typename?: 'Query' } & {
  me?: Maybe<
    { __typename?: 'GraphUser' } & Pick<GraphUser, 'displayName' | 'officeLocation'> & {
        messages?: Maybe<
          Array<
            Maybe<
              { __typename?: 'GraphMessage' } & Pick<GraphMessage, 'subject' | 'isRead'> & {
                  from?: Maybe<
                    { __typename?: 'GraphRecipient' } & {
                      emailAddress?: Maybe<{ __typename?: 'GraphEmailAddress' } & Pick<GraphEmailAddress, 'address'>>;
                    }
                  >;
                }
            >
          >
        >;
      }
  >;
};

export const FetchRecentEmailsDocument: DocumentNode<FetchRecentEmailsQuery, FetchRecentEmailsQueryVariables> = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'fetchRecentEmails' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'me' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'officeLocation' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'messages' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'queryOptions' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'top' },
                            value: { kind: 'IntValue', value: '3' },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'subject' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'isRead' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'from' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'emailAddress' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [{ kind: 'Field', name: { kind: 'Name', value: 'address' } }],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
};
